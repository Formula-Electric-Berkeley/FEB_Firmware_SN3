
APPS24.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007858  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08007a28  08007a28  00017a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ac4  08007ac4  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08007ac4  08007ac4  00017ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007acc  08007acc  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007acc  08007acc  00017acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ad0  08007ad0  00017ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007ad4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  2000006c  08007b40  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  08007b40  0002041c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017be7  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036fd  00000000  00000000  00037cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a8  00000000  00000000  0003b3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f6e  00000000  00000000  0003c770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002619c  00000000  00000000  0003d6de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b044  00000000  00000000  0006387a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3108  00000000  00000000  0007e8be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005954  00000000  00000000  001619c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0016731c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007a10 	.word	0x08007a10

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08007a10 	.word	0x08007a10

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c60:	f000 b970 	b.w	8000f44 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f806 	bl	8000c7c <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__udivmoddi4>:
 8000c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c80:	9e08      	ldr	r6, [sp, #32]
 8000c82:	460d      	mov	r5, r1
 8000c84:	4604      	mov	r4, r0
 8000c86:	460f      	mov	r7, r1
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d14a      	bne.n	8000d22 <__udivmoddi4+0xa6>
 8000c8c:	428a      	cmp	r2, r1
 8000c8e:	4694      	mov	ip, r2
 8000c90:	d965      	bls.n	8000d5e <__udivmoddi4+0xe2>
 8000c92:	fab2 f382 	clz	r3, r2
 8000c96:	b143      	cbz	r3, 8000caa <__udivmoddi4+0x2e>
 8000c98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c9c:	f1c3 0220 	rsb	r2, r3, #32
 8000ca0:	409f      	lsls	r7, r3
 8000ca2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca6:	4317      	orrs	r7, r2
 8000ca8:	409c      	lsls	r4, r3
 8000caa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cae:	fa1f f58c 	uxth.w	r5, ip
 8000cb2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb6:	0c22      	lsrs	r2, r4, #16
 8000cb8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cbc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cc0:	fb01 f005 	mul.w	r0, r1, r5
 8000cc4:	4290      	cmp	r0, r2
 8000cc6:	d90a      	bls.n	8000cde <__udivmoddi4+0x62>
 8000cc8:	eb1c 0202 	adds.w	r2, ip, r2
 8000ccc:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000cd0:	f080 811c 	bcs.w	8000f0c <__udivmoddi4+0x290>
 8000cd4:	4290      	cmp	r0, r2
 8000cd6:	f240 8119 	bls.w	8000f0c <__udivmoddi4+0x290>
 8000cda:	3902      	subs	r1, #2
 8000cdc:	4462      	add	r2, ip
 8000cde:	1a12      	subs	r2, r2, r0
 8000ce0:	b2a4      	uxth	r4, r4
 8000ce2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cee:	fb00 f505 	mul.w	r5, r0, r5
 8000cf2:	42a5      	cmp	r5, r4
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x90>
 8000cf6:	eb1c 0404 	adds.w	r4, ip, r4
 8000cfa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cfe:	f080 8107 	bcs.w	8000f10 <__udivmoddi4+0x294>
 8000d02:	42a5      	cmp	r5, r4
 8000d04:	f240 8104 	bls.w	8000f10 <__udivmoddi4+0x294>
 8000d08:	4464      	add	r4, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d10:	1b64      	subs	r4, r4, r5
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11e      	cbz	r6, 8000d1e <__udivmoddi4+0xa2>
 8000d16:	40dc      	lsrs	r4, r3
 8000d18:	2300      	movs	r3, #0
 8000d1a:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0xbc>
 8000d26:	2e00      	cmp	r6, #0
 8000d28:	f000 80ed 	beq.w	8000f06 <__udivmoddi4+0x28a>
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	e9c6 0500 	strd	r0, r5, [r6]
 8000d32:	4608      	mov	r0, r1
 8000d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d38:	fab3 f183 	clz	r1, r3
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	d149      	bne.n	8000dd4 <__udivmoddi4+0x158>
 8000d40:	42ab      	cmp	r3, r5
 8000d42:	d302      	bcc.n	8000d4a <__udivmoddi4+0xce>
 8000d44:	4282      	cmp	r2, r0
 8000d46:	f200 80f8 	bhi.w	8000f3a <__udivmoddi4+0x2be>
 8000d4a:	1a84      	subs	r4, r0, r2
 8000d4c:	eb65 0203 	sbc.w	r2, r5, r3
 8000d50:	2001      	movs	r0, #1
 8000d52:	4617      	mov	r7, r2
 8000d54:	2e00      	cmp	r6, #0
 8000d56:	d0e2      	beq.n	8000d1e <__udivmoddi4+0xa2>
 8000d58:	e9c6 4700 	strd	r4, r7, [r6]
 8000d5c:	e7df      	b.n	8000d1e <__udivmoddi4+0xa2>
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xe6>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f382 	clz	r3, r2
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x210>
 8000d6c:	1a8a      	subs	r2, r1, r2
 8000d6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d72:	fa1f fe8c 	uxth.w	lr, ip
 8000d76:	2101      	movs	r1, #1
 8000d78:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d7c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d80:	0c22      	lsrs	r2, r4, #16
 8000d82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d86:	fb0e f005 	mul.w	r0, lr, r5
 8000d8a:	4290      	cmp	r0, r2
 8000d8c:	d908      	bls.n	8000da0 <__udivmoddi4+0x124>
 8000d8e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d92:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d96:	d202      	bcs.n	8000d9e <__udivmoddi4+0x122>
 8000d98:	4290      	cmp	r0, r2
 8000d9a:	f200 80cb 	bhi.w	8000f34 <__udivmoddi4+0x2b8>
 8000d9e:	4645      	mov	r5, r8
 8000da0:	1a12      	subs	r2, r2, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da8:	fb07 2210 	mls	r2, r7, r0, r2
 8000dac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db0:	fb0e fe00 	mul.w	lr, lr, r0
 8000db4:	45a6      	cmp	lr, r4
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x14e>
 8000db8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dbc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dc0:	d202      	bcs.n	8000dc8 <__udivmoddi4+0x14c>
 8000dc2:	45a6      	cmp	lr, r4
 8000dc4:	f200 80bb 	bhi.w	8000f3e <__udivmoddi4+0x2c2>
 8000dc8:	4610      	mov	r0, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dd2:	e79f      	b.n	8000d14 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0720 	rsb	r7, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de2:	fa05 f401 	lsl.w	r4, r5, r1
 8000de6:	fa20 f307 	lsr.w	r3, r0, r7
 8000dea:	40fd      	lsrs	r5, r7
 8000dec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e04:	fb08 f50e 	mul.w	r5, r8, lr
 8000e08:	42a5      	cmp	r5, r4
 8000e0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0e:	fa00 f001 	lsl.w	r0, r0, r1
 8000e12:	d90b      	bls.n	8000e2c <__udivmoddi4+0x1b0>
 8000e14:	eb1c 0404 	adds.w	r4, ip, r4
 8000e18:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e1c:	f080 8088 	bcs.w	8000f30 <__udivmoddi4+0x2b4>
 8000e20:	42a5      	cmp	r5, r4
 8000e22:	f240 8085 	bls.w	8000f30 <__udivmoddi4+0x2b4>
 8000e26:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2a:	4464      	add	r4, ip
 8000e2c:	1b64      	subs	r4, r4, r5
 8000e2e:	b29d      	uxth	r5, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e3c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e40:	45a6      	cmp	lr, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1da>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e4c:	d26c      	bcs.n	8000f28 <__udivmoddi4+0x2ac>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	d96a      	bls.n	8000f28 <__udivmoddi4+0x2ac>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	4464      	add	r4, ip
 8000e56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e5a:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5e:	eba4 040e 	sub.w	r4, r4, lr
 8000e62:	42ac      	cmp	r4, r5
 8000e64:	46c8      	mov	r8, r9
 8000e66:	46ae      	mov	lr, r5
 8000e68:	d356      	bcc.n	8000f18 <__udivmoddi4+0x29c>
 8000e6a:	d053      	beq.n	8000f14 <__udivmoddi4+0x298>
 8000e6c:	b156      	cbz	r6, 8000e84 <__udivmoddi4+0x208>
 8000e6e:	ebb0 0208 	subs.w	r2, r0, r8
 8000e72:	eb64 040e 	sbc.w	r4, r4, lr
 8000e76:	fa04 f707 	lsl.w	r7, r4, r7
 8000e7a:	40ca      	lsrs	r2, r1
 8000e7c:	40cc      	lsrs	r4, r1
 8000e7e:	4317      	orrs	r7, r2
 8000e80:	e9c6 7400 	strd	r7, r4, [r6]
 8000e84:	4618      	mov	r0, r3
 8000e86:	2100      	movs	r1, #0
 8000e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8c:	f1c3 0120 	rsb	r1, r3, #32
 8000e90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e94:	fa20 f201 	lsr.w	r2, r0, r1
 8000e98:	fa25 f101 	lsr.w	r1, r5, r1
 8000e9c:	409d      	lsls	r5, r3
 8000e9e:	432a      	orrs	r2, r5
 8000ea0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea4:	fa1f fe8c 	uxth.w	lr, ip
 8000ea8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eac:	fb07 1510 	mls	r5, r7, r0, r1
 8000eb0:	0c11      	lsrs	r1, r2, #16
 8000eb2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb6:	fb00 f50e 	mul.w	r5, r0, lr
 8000eba:	428d      	cmp	r5, r1
 8000ebc:	fa04 f403 	lsl.w	r4, r4, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x258>
 8000ec2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000eca:	d22f      	bcs.n	8000f2c <__udivmoddi4+0x2b0>
 8000ecc:	428d      	cmp	r5, r1
 8000ece:	d92d      	bls.n	8000f2c <__udivmoddi4+0x2b0>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4461      	add	r1, ip
 8000ed4:	1b49      	subs	r1, r1, r5
 8000ed6:	b292      	uxth	r2, r2
 8000ed8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000edc:	fb07 1115 	mls	r1, r7, r5, r1
 8000ee0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee8:	4291      	cmp	r1, r2
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x282>
 8000eec:	eb1c 0202 	adds.w	r2, ip, r2
 8000ef0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ef4:	d216      	bcs.n	8000f24 <__udivmoddi4+0x2a8>
 8000ef6:	4291      	cmp	r1, r2
 8000ef8:	d914      	bls.n	8000f24 <__udivmoddi4+0x2a8>
 8000efa:	3d02      	subs	r5, #2
 8000efc:	4462      	add	r2, ip
 8000efe:	1a52      	subs	r2, r2, r1
 8000f00:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f04:	e738      	b.n	8000d78 <__udivmoddi4+0xfc>
 8000f06:	4631      	mov	r1, r6
 8000f08:	4630      	mov	r0, r6
 8000f0a:	e708      	b.n	8000d1e <__udivmoddi4+0xa2>
 8000f0c:	4639      	mov	r1, r7
 8000f0e:	e6e6      	b.n	8000cde <__udivmoddi4+0x62>
 8000f10:	4610      	mov	r0, r2
 8000f12:	e6fb      	b.n	8000d0c <__udivmoddi4+0x90>
 8000f14:	4548      	cmp	r0, r9
 8000f16:	d2a9      	bcs.n	8000e6c <__udivmoddi4+0x1f0>
 8000f18:	ebb9 0802 	subs.w	r8, r9, r2
 8000f1c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f20:	3b01      	subs	r3, #1
 8000f22:	e7a3      	b.n	8000e6c <__udivmoddi4+0x1f0>
 8000f24:	4645      	mov	r5, r8
 8000f26:	e7ea      	b.n	8000efe <__udivmoddi4+0x282>
 8000f28:	462b      	mov	r3, r5
 8000f2a:	e794      	b.n	8000e56 <__udivmoddi4+0x1da>
 8000f2c:	4640      	mov	r0, r8
 8000f2e:	e7d1      	b.n	8000ed4 <__udivmoddi4+0x258>
 8000f30:	46d0      	mov	r8, sl
 8000f32:	e77b      	b.n	8000e2c <__udivmoddi4+0x1b0>
 8000f34:	3d02      	subs	r5, #2
 8000f36:	4462      	add	r2, ip
 8000f38:	e732      	b.n	8000da0 <__udivmoddi4+0x124>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e70a      	b.n	8000d54 <__udivmoddi4+0xd8>
 8000f3e:	4464      	add	r4, ip
 8000f40:	3802      	subs	r0, #2
 8000f42:	e742      	b.n	8000dca <__udivmoddi4+0x14e>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <FEB_CAN_Init>:

uint32_t FEB_CAN_Tx_Mailbox;

// **************************************** Functions ****************************************

void FEB_CAN_Init(void) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	FEB_CAN_Filter_Config();
 8000f4c:	f000 f80c 	bl	8000f68 <FEB_CAN_Filter_Config>
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8000f50:	4804      	ldr	r0, [pc, #16]	; (8000f64 <FEB_CAN_Init+0x1c>)
 8000f52:	f002 fb37 	bl	80035c4 <HAL_CAN_Start>
        // Code Error - Shutdown
	}
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000f56:	2102      	movs	r1, #2
 8000f58:	4802      	ldr	r0, [pc, #8]	; (8000f64 <FEB_CAN_Init+0x1c>)
 8000f5a:	f002 fd99 	bl	8003a90 <HAL_CAN_ActivateNotification>
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200001c4 	.word	0x200001c4

08000f68 <FEB_CAN_Filter_Config>:

void FEB_CAN_Filter_Config(void) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
	uint8_t filter_bank = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	71fb      	strb	r3, [r7, #7]
	// Assign Filter
    // filter_bank = Function(&hcan1, CAN_RX_FIFO0, filter_bank);
	filter_bank = FEB_CAN_RMS_Filter_Config(&hcan1, CAN_RX_FIFO0, filter_bank);
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	461a      	mov	r2, r3
 8000f76:	2100      	movs	r1, #0
 8000f78:	4808      	ldr	r0, [pc, #32]	; (8000f9c <FEB_CAN_Filter_Config+0x34>)
 8000f7a:	f000 f973 	bl	8001264 <FEB_CAN_RMS_Filter_Config>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
	filter_bank = FEB_CAN_SW_Filter_Config(&hcan1, CAN_RX_FIFO0, filter_bank);
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	461a      	mov	r2, r3
 8000f86:	2100      	movs	r1, #0
 8000f88:	4804      	ldr	r0, [pc, #16]	; (8000f9c <FEB_CAN_Filter_Config+0x34>)
 8000f8a:	f000 fabb 	bl	8001504 <FEB_CAN_SW_Filter_Config>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200001c4 	.word	0x200001c4

08000fa0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &FEB_CAN_Rx_Header, FEB_CAN_Rx_Data) == HAL_OK) {
 8000fa8:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000faa:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000fac:	2100      	movs	r1, #0
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f002 fc5c 	bl	800386c <HAL_CAN_GetRxMessage>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d107      	bne.n	8000fca <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
		FEB_CAN_RMS_Store_Msg(&FEB_CAN_Rx_Header, FEB_CAN_Rx_Data);
 8000fba:	4906      	ldr	r1, [pc, #24]	; (8000fd4 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000fbc:	4806      	ldr	r0, [pc, #24]	; (8000fd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000fbe:	f000 f995 	bl	80012ec <FEB_CAN_RMS_Store_Msg>
		FEB_CAN_SW_Store_Msg(&FEB_CAN_Rx_Header, FEB_CAN_Rx_Data);
 8000fc2:	4904      	ldr	r1, [pc, #16]	; (8000fd4 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000fc4:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000fc6:	f000 fadf 	bl	8001588 <FEB_CAN_SW_Store_Msg>
		//add CAN Store for SW?

		// Store Message
        // Function(&FEB_CAN_Rx_Header, FEB_CAN_Rx_Data);
	}
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200000c4 	.word	0x200000c4
 8000fd8:	200000a0 	.word	0x200000a0

08000fdc <FEB_CAN_RMS_Setup>:
// ********************************** Functions **********************************




void FEB_CAN_RMS_Setup(void){
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
	 RMSControl.enabled = 0;
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <FEB_CAN_RMS_Setup+0x1c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	709a      	strb	r2, [r3, #2]
	 RMSControl.torque= 0.0;
 8000fe6:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <FEB_CAN_RMS_Setup+0x1c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	801a      	strh	r2, [r3, #0]
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	200000d0 	.word	0x200000d0

08000ffc <FEB_CAN_RMS_Process>:

void FEB_CAN_RMS_Process(void){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	if (!RMSControl.enabled){
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <FEB_CAN_RMS_Process+0x1c>)
 8001002:	789b      	ldrb	r3, [r3, #2]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d104      	bne.n	8001012 <FEB_CAN_RMS_Process+0x16>
		FEB_CAN_RMS_Init();
 8001008:	f000 f912 	bl	8001230 <FEB_CAN_RMS_Init>
		RMSControl.enabled = 1;
 800100c:	4b02      	ldr	r3, [pc, #8]	; (8001018 <FEB_CAN_RMS_Process+0x1c>)
 800100e:	2201      	movs	r2, #1
 8001010:	709a      	strb	r2, [r3, #2]
	}
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200000d0 	.word	0x200000d0

0800101c <FEB_CAN_RMS_Disable>:

void FEB_CAN_RMS_Disable(void){
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
	RMSControl.enabled = 0;
 8001020:	4b03      	ldr	r3, [pc, #12]	; (8001030 <FEB_CAN_RMS_Disable+0x14>)
 8001022:	2200      	movs	r2, #0
 8001024:	709a      	strb	r2, [r3, #2]
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	200000d0 	.word	0x200000d0

08001034 <min>:
// **** TORQUE FUNCTIONS****
int16_t min(int16_t x1, int16_t x2) {
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	460a      	mov	r2, r1
 800103e:	80fb      	strh	r3, [r7, #6]
 8001040:	4613      	mov	r3, r2
 8001042:	80bb      	strh	r3, [r7, #4]
	if (x1 < x2) {
 8001044:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001048:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800104c:	429a      	cmp	r2, r3
 800104e:	da02      	bge.n	8001056 <min+0x22>
		return x1;
 8001050:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001054:	e001      	b.n	800105a <min+0x26>
	}
	return x2;
 8001056:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 800105a:	4618      	mov	r0, r3
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
	...

08001068 <FEB_CAN_RMS_getMaxTorque>:
uint16_t FEB_CAN_RMS_getMaxTorque(void){
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
	int16_t accumulator_voltage = min(INIT_VOLTAGE, (RMS_MESSAGE.HV_Bus_Voltage-50) / 10);
 800106e:	4b24      	ldr	r3, [pc, #144]	; (8001100 <FEB_CAN_RMS_getMaxTorque+0x98>)
 8001070:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001074:	3b32      	subs	r3, #50	; 0x32
 8001076:	4a23      	ldr	r2, [pc, #140]	; (8001104 <FEB_CAN_RMS_getMaxTorque+0x9c>)
 8001078:	fb82 1203 	smull	r1, r2, r2, r3
 800107c:	1092      	asrs	r2, r2, #2
 800107e:	17db      	asrs	r3, r3, #31
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	b21b      	sxth	r3, r3
 8001084:	4619      	mov	r1, r3
 8001086:	20f2      	movs	r0, #242	; 0xf2
 8001088:	f7ff ffd4 	bl	8001034 <min>
 800108c:	4603      	mov	r3, r0
 800108e:	80fb      	strh	r3, [r7, #6]
	int16_t motor_speed = -1 * RMS_MESSAGE.Motor_Speed * RPM_TO_RAD_S;
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <FEB_CAN_RMS_getMaxTorque+0x98>)
 8001092:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001096:	425b      	negs	r3, r3
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fa5b 	bl	8000554 <__aeabi_i2d>
 800109e:	a316      	add	r3, pc, #88	; (adr r3, 80010f8 <FEB_CAN_RMS_getMaxTorque+0x90>)
 80010a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a4:	f7ff fac0 	bl	8000628 <__aeabi_dmul>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	4610      	mov	r0, r2
 80010ae:	4619      	mov	r1, r3
 80010b0:	f7ff fd54 	bl	8000b5c <__aeabi_d2iz>
 80010b4:	4603      	mov	r3, r0
 80010b6:	80bb      	strh	r3, [r7, #4]
  // If speed is less than 15, we should command max torque
  // This catches divide by 0 errors and also negative speeds (which may create very high negative torque values)
	if (motor_speed < 15) {
 80010b8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010bc:	2b0e      	cmp	r3, #14
 80010be:	dc01      	bgt.n	80010c4 <FEB_CAN_RMS_getMaxTorque+0x5c>
		return MAX_TORQUE;
 80010c0:	23e6      	movs	r3, #230	; 0xe6
 80010c2:	e012      	b.n	80010ea <FEB_CAN_RMS_getMaxTorque+0x82>
	}
	uint16_t maxTorque = min(MAX_TORQUE, (accumulator_voltage * PEAK_CURRENT) / motor_speed);
 80010c4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80010c8:	4613      	mov	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	4413      	add	r3, r2
 80010ce:	015b      	lsls	r3, r3, #5
 80010d0:	1a9a      	subs	r2, r3, r2
 80010d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80010da:	b21b      	sxth	r3, r3
 80010dc:	4619      	mov	r1, r3
 80010de:	20e6      	movs	r0, #230	; 0xe6
 80010e0:	f7ff ffa8 	bl	8001034 <min>
 80010e4:	4603      	mov	r3, r0
 80010e6:	807b      	strh	r3, [r7, #2]
	return maxTorque;
 80010e8:	887b      	ldrh	r3, [r7, #2]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	f3af 8000 	nop.w
 80010f8:	0f3cb3e5 	.word	0x0f3cb3e5
 80010fc:	3fbaceee 	.word	0x3fbaceee
 8001100:	200000d4 	.word	0x200000d4
 8001104:	66666667 	.word	0x66666667

08001108 <FEB_CAN_RMS_Torque>:

void FEB_CAN_RMS_Torque(void){
 8001108:	b580      	push	{r7, lr}
 800110a:	ed2d 8b02 	vpush	{d8}
 800110e:	af00      	add	r7, sp, #0
	RMSControl.torque = 10*FEB_Normalized_getAcc()*FEB_CAN_RMS_getMaxTorque();
 8001110:	f000 face 	bl	80016b0 <FEB_Normalized_getAcc>
 8001114:	eef0 7a40 	vmov.f32	s15, s0
 8001118:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800111c:	ee27 8a87 	vmul.f32	s16, s15, s14
 8001120:	f7ff ffa2 	bl	8001068 <FEB_CAN_RMS_getMaxTorque>
 8001124:	4603      	mov	r3, r0
 8001126:	ee07 3a90 	vmov	s15, r3
 800112a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800112e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001136:	ee17 3a90 	vmov	r3, s15
 800113a:	b29a      	uxth	r2, r3
 800113c:	4b04      	ldr	r3, [pc, #16]	; (8001150 <FEB_CAN_RMS_Torque+0x48>)
 800113e:	801a      	strh	r2, [r3, #0]
	FEB_CAN_RMS_Transmit_updateTorque();
 8001140:	f000 f808 	bl	8001154 <FEB_CAN_RMS_Transmit_updateTorque>
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	ecbd 8b02 	vpop	{d8}
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	200000d0 	.word	0x200000d0

08001154 <FEB_CAN_RMS_Transmit_updateTorque>:
// ***** OTHER FUNCS ***

void FEB_CAN_RMS_Transmit_updateTorque(void) { //TODO: Create Custom Transmit function and update below call
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  //uint8_t message_data[8] = {RMSControl.torque & 0xFF, RMSControl.torque >> 8, 0, 0, 0, RMSControl.enabled, 0, 0};
	FEB_CAN_Tx_Header.DLC = 8;
 8001158:	4b1e      	ldr	r3, [pc, #120]	; (80011d4 <FEB_CAN_RMS_Transmit_updateTorque+0x80>)
 800115a:	2208      	movs	r2, #8
 800115c:	611a      	str	r2, [r3, #16]
	FEB_CAN_Tx_Header.ExtId = 0x0C0; //ID for sending paramater messages for RMS
 800115e:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <FEB_CAN_RMS_Transmit_updateTorque+0x80>)
 8001160:	22c0      	movs	r2, #192	; 0xc0
 8001162:	605a      	str	r2, [r3, #4]
	FEB_CAN_Tx_Header.IDE = CAN_ID_EXT;
 8001164:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <FEB_CAN_RMS_Transmit_updateTorque+0x80>)
 8001166:	2204      	movs	r2, #4
 8001168:	609a      	str	r2, [r3, #8]
	FEB_CAN_Tx_Header.RTR = CAN_RTR_DATA;
 800116a:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <FEB_CAN_RMS_Transmit_updateTorque+0x80>)
 800116c:	2200      	movs	r2, #0
 800116e:	60da      	str	r2, [r3, #12]
	FEB_CAN_Tx_Header.TransmitGlobalTime = DISABLE;
 8001170:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <FEB_CAN_RMS_Transmit_updateTorque+0x80>)
 8001172:	2200      	movs	r2, #0
 8001174:	751a      	strb	r2, [r3, #20]

	// Copy data to Tx buffer
	FEB_CAN_Tx_Data[0] = RMSControl.torque & 0xFF;
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <FEB_CAN_RMS_Transmit_updateTorque+0x84>)
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	b2da      	uxtb	r2, r3
 800117c:	4b17      	ldr	r3, [pc, #92]	; (80011dc <FEB_CAN_RMS_Transmit_updateTorque+0x88>)
 800117e:	701a      	strb	r2, [r3, #0]
	FEB_CAN_Tx_Data[1] = RMSControl.torque >> 8;
 8001180:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <FEB_CAN_RMS_Transmit_updateTorque+0x84>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	0a1b      	lsrs	r3, r3, #8
 8001186:	b29b      	uxth	r3, r3
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4b14      	ldr	r3, [pc, #80]	; (80011dc <FEB_CAN_RMS_Transmit_updateTorque+0x88>)
 800118c:	705a      	strb	r2, [r3, #1]
	FEB_CAN_Tx_Data[2] = 0;
 800118e:	4b13      	ldr	r3, [pc, #76]	; (80011dc <FEB_CAN_RMS_Transmit_updateTorque+0x88>)
 8001190:	2200      	movs	r2, #0
 8001192:	709a      	strb	r2, [r3, #2]
	FEB_CAN_Tx_Data[3] = 0;
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <FEB_CAN_RMS_Transmit_updateTorque+0x88>)
 8001196:	2200      	movs	r2, #0
 8001198:	70da      	strb	r2, [r3, #3]
	FEB_CAN_Tx_Data[4] = 0;
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <FEB_CAN_RMS_Transmit_updateTorque+0x88>)
 800119c:	2200      	movs	r2, #0
 800119e:	711a      	strb	r2, [r3, #4]
	FEB_CAN_Tx_Data[5] = RMSControl.enabled;
 80011a0:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <FEB_CAN_RMS_Transmit_updateTorque+0x84>)
 80011a2:	789a      	ldrb	r2, [r3, #2]
 80011a4:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <FEB_CAN_RMS_Transmit_updateTorque+0x88>)
 80011a6:	715a      	strb	r2, [r3, #5]
	FEB_CAN_Tx_Data[6] = 0;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <FEB_CAN_RMS_Transmit_updateTorque+0x88>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	719a      	strb	r2, [r3, #6]
	FEB_CAN_Tx_Data[7] = 0;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <FEB_CAN_RMS_Transmit_updateTorque+0x88>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	71da      	strb	r2, [r3, #7]

	// Delay until mailbox available
	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0) {}
 80011b4:	bf00      	nop
 80011b6:	480a      	ldr	r0, [pc, #40]	; (80011e0 <FEB_CAN_RMS_Transmit_updateTorque+0x8c>)
 80011b8:	f002 fb23 	bl	8003802 <HAL_CAN_GetTxMailboxesFreeLevel>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d0f9      	beq.n	80011b6 <FEB_CAN_RMS_Transmit_updateTorque+0x62>

	// Add Tx data to mailbox
	if (HAL_CAN_AddTxMessage(&hcan1, &FEB_CAN_Tx_Header, FEB_CAN_Tx_Data, &FEB_CAN_Tx_Mailbox) != HAL_OK) {
 80011c2:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <FEB_CAN_RMS_Transmit_updateTorque+0x90>)
 80011c4:	4a05      	ldr	r2, [pc, #20]	; (80011dc <FEB_CAN_RMS_Transmit_updateTorque+0x88>)
 80011c6:	4903      	ldr	r1, [pc, #12]	; (80011d4 <FEB_CAN_RMS_Transmit_updateTorque+0x80>)
 80011c8:	4805      	ldr	r0, [pc, #20]	; (80011e0 <FEB_CAN_RMS_Transmit_updateTorque+0x8c>)
 80011ca:	f002 fa3f 	bl	800364c <HAL_CAN_AddTxMessage>
		// Code Error - Shutdown
	}
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000088 	.word	0x20000088
 80011d8:	200000d0 	.word	0x200000d0
 80011dc:	200000bc 	.word	0x200000bc
 80011e0:	200001c4 	.word	0x200001c4
 80011e4:	200000cc 	.word	0x200000cc

080011e8 <FEB_CAN_RMS_torqueTransmit>:

void FEB_CAN_RMS_torqueTransmit(void){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	//	  buf_len = sprintf(buf, "rtd:%d, enable:%d lockout:%d impl:%d acc: %.3f brake: %.3f Bus Voltage: %d Motor Speed: %d\n", SW_MESSAGE.ready_to_drive, Inverter_enable, Inverter_enable_lockout, isImpl, normalized_acc, normalized_brake, RMS_MESSAGE.HV_Bus_Voltage, RMS_MESSAGE.Motor_Speed);

		  buf_len = sprintf(buf, "Evan's Max Torque: %d\n", FEB_CAN_RMS_getMaxTorque());
 80011ec:	f7ff ff3c 	bl	8001068 <FEB_CAN_RMS_getMaxTorque>
 80011f0:	4603      	mov	r3, r0
 80011f2:	461a      	mov	r2, r3
 80011f4:	490a      	ldr	r1, [pc, #40]	; (8001220 <FEB_CAN_RMS_torqueTransmit+0x38>)
 80011f6:	480b      	ldr	r0, [pc, #44]	; (8001224 <FEB_CAN_RMS_torqueTransmit+0x3c>)
 80011f8:	f005 ff66 	bl	80070c8 <siprintf>
 80011fc:	4603      	mov	r3, r0
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	4b09      	ldr	r3, [pc, #36]	; (8001228 <FEB_CAN_RMS_torqueTransmit+0x40>)
 8001202:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2,(uint8_t *)buf, buf_len, 1000);
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <FEB_CAN_RMS_torqueTransmit+0x40>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	b29a      	uxth	r2, r3
 800120a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120e:	4905      	ldr	r1, [pc, #20]	; (8001224 <FEB_CAN_RMS_torqueTransmit+0x3c>)
 8001210:	4806      	ldr	r0, [pc, #24]	; (800122c <FEB_CAN_RMS_torqueTransmit+0x44>)
 8001212:	f005 fbe4 	bl	80069de <HAL_UART_Transmit>
		  HAL_Delay(SLEEP_TIME);
 8001216:	200a      	movs	r0, #10
 8001218:	f001 fac6 	bl	80027a8 <HAL_Delay>
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	08007a28 	.word	0x08007a28
 8001224:	200000e0 	.word	0x200000e0
 8001228:	20000160 	.word	0x20000160
 800122c:	20000288 	.word	0x20000288

08001230 <FEB_CAN_RMS_Init>:
// ***** CAN FUNCTIONS ****
//TODO: CREATE FEB_CAN_SW_Trasnmit Function and update below function
void FEB_CAN_RMS_Init(void){
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
	FEB_CAN_RMS_Transmit_paramSafety();
 8001236:	f000 f879 	bl	800132c <FEB_CAN_RMS_Transmit_paramSafety>

	// send disable command to remove lockout
	for (int i = 0; i < 10; i++) {
 800123a:	2300      	movs	r3, #0
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	e007      	b.n	8001250 <FEB_CAN_RMS_Init+0x20>
		FEB_CAN_RMS_Transmit_commDisable();
 8001240:	f000 f8bc 	bl	80013bc <FEB_CAN_RMS_Transmit_commDisable>
		HAL_Delay(10);
 8001244:	200a      	movs	r0, #10
 8001246:	f001 faaf 	bl	80027a8 <HAL_Delay>
	for (int i = 0; i < 10; i++) {
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3301      	adds	r3, #1
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b09      	cmp	r3, #9
 8001254:	ddf4      	ble.n	8001240 <FEB_CAN_RMS_Init+0x10>
	}

	// Select CAN msg to broadcast
	FEB_CAN_RMS_Transmit_paramBroadcast();
 8001256:	f000 f8fb 	bl	8001450 <FEB_CAN_RMS_Transmit_paramBroadcast>
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <FEB_CAN_RMS_Filter_Config>:


uint8_t FEB_CAN_RMS_Filter_Config(CAN_HandleTypeDef* hcan, uint8_t FIFO_assignment, uint8_t filter_bank) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b08e      	sub	sp, #56	; 0x38
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	70fb      	strb	r3, [r7, #3]
 8001270:	4613      	mov	r3, r2
 8001272:	70bb      	strb	r3, [r7, #2]
	uint16_t ids[] = {FEB_CAN_ID_RMS_VOLTAGE, FEB_CAN_ID_RMS_MOTOR};
 8001274:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <FEB_CAN_RMS_Filter_Config+0x84>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	633b      	str	r3, [r7, #48]	; 0x30

	for (uint8_t i = 0; i < 2; i++) {
 800127a:	2300      	movs	r3, #0
 800127c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001280:	e029      	b.n	80012d6 <FEB_CAN_RMS_Filter_Config+0x72>
		CAN_FilterTypeDef filter_config;

	    // Standard CAN - 2.0A - 11 bit
	    filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8001282:	2301      	movs	r3, #1
 8001284:	62bb      	str	r3, [r7, #40]	; 0x28
		filter_config.FilterBank = filter_bank;
 8001286:	78bb      	ldrb	r3, [r7, #2]
 8001288:	61fb      	str	r3, [r7, #28]
		filter_config.FilterFIFOAssignment = FIFO_assignment;
 800128a:	78fb      	ldrb	r3, [r7, #3]
 800128c:	61bb      	str	r3, [r7, #24]
		filter_config.FilterIdHigh = ids[i] << 5;
 800128e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	3338      	adds	r3, #56	; 0x38
 8001296:	443b      	add	r3, r7
 8001298:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 800129c:	015b      	lsls	r3, r3, #5
 800129e:	60bb      	str	r3, [r7, #8]
		filter_config.FilterIdLow = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60fb      	str	r3, [r7, #12]
		filter_config.FilterMaskIdHigh = 0xFFE0;
 80012a4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80012a8:	613b      	str	r3, [r7, #16]
		filter_config.FilterMaskIdLow = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
		filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 80012ae:	2300      	movs	r3, #0
 80012b0:	623b      	str	r3, [r7, #32]
		filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 80012b2:	2301      	movs	r3, #1
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
		filter_config.SlaveStartFilterBank = 27;
 80012b6:	231b      	movs	r3, #27
 80012b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	    filter_bank++;
 80012ba:	78bb      	ldrb	r3, [r7, #2]
 80012bc:	3301      	adds	r3, #1
 80012be:	70bb      	strb	r3, [r7, #2]

		if (HAL_CAN_ConfigFilter(hcan, &filter_config) != HAL_OK) {
 80012c0:	f107 0308 	add.w	r3, r7, #8
 80012c4:	4619      	mov	r1, r3
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f002 f89c 	bl	8003404 <HAL_CAN_ConfigFilter>
	for (uint8_t i = 0; i < 2; i++) {
 80012cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80012d0:	3301      	adds	r3, #1
 80012d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80012d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d9d1      	bls.n	8001282 <FEB_CAN_RMS_Filter_Config+0x1e>
			//Code Error - shutdown
		}
	}

	return filter_bank;
 80012de:	78bb      	ldrb	r3, [r7, #2]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3738      	adds	r7, #56	; 0x38
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	08007a40 	.word	0x08007a40

080012ec <FEB_CAN_RMS_Store_Msg>:
// @lovehate TODO: update below function to fit with call

void FEB_CAN_RMS_Store_Msg(CAN_RxHeaderTypeDef* pHeader, uint8_t *RxData) {
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
	switch (pHeader -> StdId){
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2ba5      	cmp	r3, #165	; 0xa5
 80012fc:	d007      	beq.n	800130e <FEB_CAN_RMS_Store_Msg+0x22>
 80012fe:	2ba7      	cmp	r3, #167	; 0xa7
 8001300:	d10c      	bne.n	800131c <FEB_CAN_RMS_Store_Msg+0x30>
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	b29a      	uxth	r2, r3
		case FEB_CAN_ID_RMS_VOLTAGE:
			memcpy(&(RMS_MESSAGE.HV_Bus_Voltage), RxData, 2);
 8001308:	4b07      	ldr	r3, [pc, #28]	; (8001328 <FEB_CAN_RMS_Store_Msg+0x3c>)
 800130a:	801a      	strh	r2, [r3, #0]
			break;
 800130c:	e006      	b.n	800131c <FEB_CAN_RMS_Store_Msg+0x30>
		case FEB_CAN_ID_RMS_MOTOR:
			memcpy(&(RMS_MESSAGE.Motor_Speed), RxData+2, 2);
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	3302      	adds	r3, #2
 8001312:	881b      	ldrh	r3, [r3, #0]
 8001314:	b29a      	uxth	r2, r3
 8001316:	4b04      	ldr	r3, [pc, #16]	; (8001328 <FEB_CAN_RMS_Store_Msg+0x3c>)
 8001318:	805a      	strh	r2, [r3, #2]
			break;
 800131a:	bf00      	nop
	}
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	200000d4 	.word	0x200000d4

0800132c <FEB_CAN_RMS_Transmit_paramSafety>:

//TODO: WORK IN PROGRESS

void FEB_CAN_RMS_Transmit_paramSafety(void){
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
	//Clear fault in case inverter is powered before disable command sent
	uint8_t fault_clear_addr = 20;
 8001332:	2314      	movs	r3, #20
 8001334:	71fb      	strb	r3, [r7, #7]
	uint8_t fault_clear_data = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	71bb      	strb	r3, [r7, #6]

	//-----Transmit Stuff Below-----
	// Initialize transmission header
	FEB_CAN_Tx_Header.DLC = 8;
 800133a:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <FEB_CAN_RMS_Transmit_paramSafety+0x80>)
 800133c:	2208      	movs	r2, #8
 800133e:	611a      	str	r2, [r3, #16]
	FEB_CAN_Tx_Header.ExtId = FEB_CAN_ID_RMS_PARAMETER; //ID for sending paramater messages for RMS
 8001340:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <FEB_CAN_RMS_Transmit_paramSafety+0x80>)
 8001342:	22c1      	movs	r2, #193	; 0xc1
 8001344:	605a      	str	r2, [r3, #4]
	FEB_CAN_Tx_Header.IDE = CAN_ID_EXT;
 8001346:	4b19      	ldr	r3, [pc, #100]	; (80013ac <FEB_CAN_RMS_Transmit_paramSafety+0x80>)
 8001348:	2204      	movs	r2, #4
 800134a:	609a      	str	r2, [r3, #8]
	FEB_CAN_Tx_Header.RTR = CAN_RTR_DATA;
 800134c:	4b17      	ldr	r3, [pc, #92]	; (80013ac <FEB_CAN_RMS_Transmit_paramSafety+0x80>)
 800134e:	2200      	movs	r2, #0
 8001350:	60da      	str	r2, [r3, #12]
	FEB_CAN_Tx_Header.TransmitGlobalTime = DISABLE;
 8001352:	4b16      	ldr	r3, [pc, #88]	; (80013ac <FEB_CAN_RMS_Transmit_paramSafety+0x80>)
 8001354:	2200      	movs	r2, #0
 8001356:	751a      	strb	r2, [r3, #20]
		// 0,1: param addr
		// 2: r/w cmd
		// 3: NA
		// 4,5: data
		// 6,7: NA
	FEB_CAN_Tx_Data[0] = fault_clear_addr;
 8001358:	4a15      	ldr	r2, [pc, #84]	; (80013b0 <FEB_CAN_RMS_Transmit_paramSafety+0x84>)
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	7013      	strb	r3, [r2, #0]
	FEB_CAN_Tx_Data[1] = 0;
 800135e:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <FEB_CAN_RMS_Transmit_paramSafety+0x84>)
 8001360:	2200      	movs	r2, #0
 8001362:	705a      	strb	r2, [r3, #1]
	FEB_CAN_Tx_Data[2] = 1;
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <FEB_CAN_RMS_Transmit_paramSafety+0x84>)
 8001366:	2201      	movs	r2, #1
 8001368:	709a      	strb	r2, [r3, #2]
	FEB_CAN_Tx_Data[3] = 0;
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <FEB_CAN_RMS_Transmit_paramSafety+0x84>)
 800136c:	2200      	movs	r2, #0
 800136e:	70da      	strb	r2, [r3, #3]
	FEB_CAN_Tx_Data[4] = fault_clear_data;
 8001370:	4a0f      	ldr	r2, [pc, #60]	; (80013b0 <FEB_CAN_RMS_Transmit_paramSafety+0x84>)
 8001372:	79bb      	ldrb	r3, [r7, #6]
 8001374:	7113      	strb	r3, [r2, #4]
	FEB_CAN_Tx_Data[5] = 0;
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <FEB_CAN_RMS_Transmit_paramSafety+0x84>)
 8001378:	2200      	movs	r2, #0
 800137a:	715a      	strb	r2, [r3, #5]
	FEB_CAN_Tx_Data[6] = 0;
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <FEB_CAN_RMS_Transmit_paramSafety+0x84>)
 800137e:	2200      	movs	r2, #0
 8001380:	719a      	strb	r2, [r3, #6]
	FEB_CAN_Tx_Data[7] = 0;
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <FEB_CAN_RMS_Transmit_paramSafety+0x84>)
 8001384:	2200      	movs	r2, #0
 8001386:	71da      	strb	r2, [r3, #7]

	// Delay until mailbox available
	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0) {}
 8001388:	bf00      	nop
 800138a:	480a      	ldr	r0, [pc, #40]	; (80013b4 <FEB_CAN_RMS_Transmit_paramSafety+0x88>)
 800138c:	f002 fa39 	bl	8003802 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0f9      	beq.n	800138a <FEB_CAN_RMS_Transmit_paramSafety+0x5e>

	// Add Tx data to mailbox
	if (HAL_CAN_AddTxMessage(&hcan1, &FEB_CAN_Tx_Header, FEB_CAN_Tx_Data, &FEB_CAN_Tx_Mailbox) != HAL_OK) {
 8001396:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <FEB_CAN_RMS_Transmit_paramSafety+0x8c>)
 8001398:	4a05      	ldr	r2, [pc, #20]	; (80013b0 <FEB_CAN_RMS_Transmit_paramSafety+0x84>)
 800139a:	4904      	ldr	r1, [pc, #16]	; (80013ac <FEB_CAN_RMS_Transmit_paramSafety+0x80>)
 800139c:	4805      	ldr	r0, [pc, #20]	; (80013b4 <FEB_CAN_RMS_Transmit_paramSafety+0x88>)
 800139e:	f002 f955 	bl	800364c <HAL_CAN_AddTxMessage>
		//Shutdown error
	}

}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000088 	.word	0x20000088
 80013b0:	200000bc 	.word	0x200000bc
 80013b4:	200001c4 	.word	0x200001c4
 80013b8:	200000cc 	.word	0x200000cc

080013bc <FEB_CAN_RMS_Transmit_commDisable>:

void FEB_CAN_RMS_Transmit_commDisable(void){
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
	//Selects CAN msg to broadcast

	uint8_t param_addr = 148;
 80013c2:	2394      	movs	r3, #148	; 0x94
 80013c4:	71fb      	strb	r3, [r7, #7]
	uint8_t CAN_active_msg_byte4 = 0b10100000; // motor position, input voltage
 80013c6:	23a0      	movs	r3, #160	; 0xa0
 80013c8:	71bb      	strb	r3, [r7, #6]
	uint8_t CAN_active_msg_byte5 = 0b10010100; // flux info (dq axes), torque/timer info, internal states
 80013ca:	2394      	movs	r3, #148	; 0x94
 80013cc:	717b      	strb	r3, [r7, #5]



	// Initialize transmission header
	FEB_CAN_Tx_Header.DLC = 8;
 80013ce:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <FEB_CAN_RMS_Transmit_commDisable+0x84>)
 80013d0:	2208      	movs	r2, #8
 80013d2:	611a      	str	r2, [r3, #16]
	FEB_CAN_Tx_Header.ExtId = FEB_CAN_ID_RMS_COMMAND; //ID for sending command messages for RMS
 80013d4:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <FEB_CAN_RMS_Transmit_commDisable+0x84>)
 80013d6:	22c0      	movs	r2, #192	; 0xc0
 80013d8:	605a      	str	r2, [r3, #4]
	FEB_CAN_Tx_Header.IDE = CAN_ID_EXT;
 80013da:	4b19      	ldr	r3, [pc, #100]	; (8001440 <FEB_CAN_RMS_Transmit_commDisable+0x84>)
 80013dc:	2204      	movs	r2, #4
 80013de:	609a      	str	r2, [r3, #8]
	FEB_CAN_Tx_Header.RTR = CAN_RTR_DATA;
 80013e0:	4b17      	ldr	r3, [pc, #92]	; (8001440 <FEB_CAN_RMS_Transmit_commDisable+0x84>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	60da      	str	r2, [r3, #12]
	FEB_CAN_Tx_Header.TransmitGlobalTime = DISABLE;
 80013e6:	4b16      	ldr	r3, [pc, #88]	; (8001440 <FEB_CAN_RMS_Transmit_commDisable+0x84>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	751a      	strb	r2, [r3, #20]
		// 0,1: param addr
		// 2: r/w cmd
		// 3: NA
		// 4,5: data
		// 6,7: NA
	FEB_CAN_Tx_Data[0] = param_addr;
 80013ec:	4a15      	ldr	r2, [pc, #84]	; (8001444 <FEB_CAN_RMS_Transmit_commDisable+0x88>)
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	7013      	strb	r3, [r2, #0]
	FEB_CAN_Tx_Data[1] = 0;
 80013f2:	4b14      	ldr	r3, [pc, #80]	; (8001444 <FEB_CAN_RMS_Transmit_commDisable+0x88>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	705a      	strb	r2, [r3, #1]
	FEB_CAN_Tx_Data[2] = 1;
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <FEB_CAN_RMS_Transmit_commDisable+0x88>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	709a      	strb	r2, [r3, #2]
	FEB_CAN_Tx_Data[3] = 0;
 80013fe:	4b11      	ldr	r3, [pc, #68]	; (8001444 <FEB_CAN_RMS_Transmit_commDisable+0x88>)
 8001400:	2200      	movs	r2, #0
 8001402:	70da      	strb	r2, [r3, #3]
	FEB_CAN_Tx_Data[4] = CAN_active_msg_byte4;
 8001404:	4a0f      	ldr	r2, [pc, #60]	; (8001444 <FEB_CAN_RMS_Transmit_commDisable+0x88>)
 8001406:	79bb      	ldrb	r3, [r7, #6]
 8001408:	7113      	strb	r3, [r2, #4]
	FEB_CAN_Tx_Data[5] = CAN_active_msg_byte5;
 800140a:	4a0e      	ldr	r2, [pc, #56]	; (8001444 <FEB_CAN_RMS_Transmit_commDisable+0x88>)
 800140c:	797b      	ldrb	r3, [r7, #5]
 800140e:	7153      	strb	r3, [r2, #5]
	FEB_CAN_Tx_Data[6] = 0;
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <FEB_CAN_RMS_Transmit_commDisable+0x88>)
 8001412:	2200      	movs	r2, #0
 8001414:	719a      	strb	r2, [r3, #6]
	FEB_CAN_Tx_Data[7] = 0;
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <FEB_CAN_RMS_Transmit_commDisable+0x88>)
 8001418:	2200      	movs	r2, #0
 800141a:	71da      	strb	r2, [r3, #7]

	// Delay until mailbox available
	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0) {}
 800141c:	bf00      	nop
 800141e:	480a      	ldr	r0, [pc, #40]	; (8001448 <FEB_CAN_RMS_Transmit_commDisable+0x8c>)
 8001420:	f002 f9ef 	bl	8003802 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f9      	beq.n	800141e <FEB_CAN_RMS_Transmit_commDisable+0x62>

	// Add Tx data to mailbox
	if (HAL_CAN_AddTxMessage(&hcan1, &FEB_CAN_Tx_Header, FEB_CAN_Tx_Data, &FEB_CAN_Tx_Mailbox) != HAL_OK) {
 800142a:	4b08      	ldr	r3, [pc, #32]	; (800144c <FEB_CAN_RMS_Transmit_commDisable+0x90>)
 800142c:	4a05      	ldr	r2, [pc, #20]	; (8001444 <FEB_CAN_RMS_Transmit_commDisable+0x88>)
 800142e:	4904      	ldr	r1, [pc, #16]	; (8001440 <FEB_CAN_RMS_Transmit_commDisable+0x84>)
 8001430:	4805      	ldr	r0, [pc, #20]	; (8001448 <FEB_CAN_RMS_Transmit_commDisable+0x8c>)
 8001432:	f002 f90b 	bl	800364c <HAL_CAN_AddTxMessage>
		// Code Error - Shutdown
	}

}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000088 	.word	0x20000088
 8001444:	200000bc 	.word	0x200000bc
 8001448:	200001c4 	.word	0x200001c4
 800144c:	200000cc 	.word	0x200000cc

08001450 <FEB_CAN_RMS_Transmit_paramBroadcast>:


void FEB_CAN_RMS_Transmit_paramBroadcast(void){
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0

	uint8_t param_addr = 148;
 8001456:	2394      	movs	r3, #148	; 0x94
 8001458:	71fb      	strb	r3, [r7, #7]
//	uint8_t CAN_active_msg_byte4 = 0b10100000; // motor position, input voltage
//	uint8_t CAN_active_msg_byte5 = 0b00010101; // flux info (dq axes), torque/timer info, internal states
	uint8_t CAN_active_msg_byte4 = 0xff; // literally log everything
 800145a:	23ff      	movs	r3, #255	; 0xff
 800145c:	71bb      	strb	r3, [r7, #6]
	uint8_t CAN_active_msg_byte5 = 0xff;
 800145e:	23ff      	movs	r3, #255	; 0xff
 8001460:	717b      	strb	r3, [r7, #5]
//	uint8_t broadcast_msg[8] = {param_addr, 0, 1, 0, CAN_active_msg_byte4, CAN_active_msg_byte5, 0, 0};

	// Initialize transmission header
	FEB_CAN_Tx_Header.DLC = 8;
 8001462:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <FEB_CAN_RMS_Transmit_paramBroadcast+0x84>)
 8001464:	2208      	movs	r2, #8
 8001466:	611a      	str	r2, [r3, #16]
	FEB_CAN_Tx_Header.ExtId = FEB_CAN_ID_RMS_PARAMETER; //ID for sending paramater messages for RMS
 8001468:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <FEB_CAN_RMS_Transmit_paramBroadcast+0x84>)
 800146a:	22c1      	movs	r2, #193	; 0xc1
 800146c:	605a      	str	r2, [r3, #4]
	FEB_CAN_Tx_Header.IDE = CAN_ID_EXT;
 800146e:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <FEB_CAN_RMS_Transmit_paramBroadcast+0x84>)
 8001470:	2204      	movs	r2, #4
 8001472:	609a      	str	r2, [r3, #8]
	FEB_CAN_Tx_Header.RTR = CAN_RTR_DATA;
 8001474:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <FEB_CAN_RMS_Transmit_paramBroadcast+0x84>)
 8001476:	2200      	movs	r2, #0
 8001478:	60da      	str	r2, [r3, #12]
	FEB_CAN_Tx_Header.TransmitGlobalTime = DISABLE;
 800147a:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <FEB_CAN_RMS_Transmit_paramBroadcast+0x84>)
 800147c:	2200      	movs	r2, #0
 800147e:	751a      	strb	r2, [r3, #20]

	// Copy data to Tx buffer
	FEB_CAN_Tx_Data[0] = param_addr;
 8001480:	4a15      	ldr	r2, [pc, #84]	; (80014d8 <FEB_CAN_RMS_Transmit_paramBroadcast+0x88>)
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	7013      	strb	r3, [r2, #0]
	FEB_CAN_Tx_Data[1] = 0;
 8001486:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <FEB_CAN_RMS_Transmit_paramBroadcast+0x88>)
 8001488:	2200      	movs	r2, #0
 800148a:	705a      	strb	r2, [r3, #1]
	FEB_CAN_Tx_Data[2] = 1;
 800148c:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <FEB_CAN_RMS_Transmit_paramBroadcast+0x88>)
 800148e:	2201      	movs	r2, #1
 8001490:	709a      	strb	r2, [r3, #2]
	FEB_CAN_Tx_Data[3] = 0;
 8001492:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <FEB_CAN_RMS_Transmit_paramBroadcast+0x88>)
 8001494:	2200      	movs	r2, #0
 8001496:	70da      	strb	r2, [r3, #3]
	FEB_CAN_Tx_Data[4] = CAN_active_msg_byte4;
 8001498:	4a0f      	ldr	r2, [pc, #60]	; (80014d8 <FEB_CAN_RMS_Transmit_paramBroadcast+0x88>)
 800149a:	79bb      	ldrb	r3, [r7, #6]
 800149c:	7113      	strb	r3, [r2, #4]
	FEB_CAN_Tx_Data[5] = CAN_active_msg_byte5;
 800149e:	4a0e      	ldr	r2, [pc, #56]	; (80014d8 <FEB_CAN_RMS_Transmit_paramBroadcast+0x88>)
 80014a0:	797b      	ldrb	r3, [r7, #5]
 80014a2:	7153      	strb	r3, [r2, #5]
	FEB_CAN_Tx_Data[6] = 0;
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <FEB_CAN_RMS_Transmit_paramBroadcast+0x88>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	719a      	strb	r2, [r3, #6]
	FEB_CAN_Tx_Data[7] = 0;
 80014aa:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <FEB_CAN_RMS_Transmit_paramBroadcast+0x88>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	71da      	strb	r2, [r3, #7]

	// Delay until mailbox available
	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0) {}
 80014b0:	bf00      	nop
 80014b2:	480a      	ldr	r0, [pc, #40]	; (80014dc <FEB_CAN_RMS_Transmit_paramBroadcast+0x8c>)
 80014b4:	f002 f9a5 	bl	8003802 <HAL_CAN_GetTxMailboxesFreeLevel>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f9      	beq.n	80014b2 <FEB_CAN_RMS_Transmit_paramBroadcast+0x62>

	// Add Tx data to mailbox
	if (HAL_CAN_AddTxMessage(&hcan1, &FEB_CAN_Tx_Header, FEB_CAN_Tx_Data, &FEB_CAN_Tx_Mailbox) != HAL_OK) {
 80014be:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <FEB_CAN_RMS_Transmit_paramBroadcast+0x90>)
 80014c0:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <FEB_CAN_RMS_Transmit_paramBroadcast+0x88>)
 80014c2:	4904      	ldr	r1, [pc, #16]	; (80014d4 <FEB_CAN_RMS_Transmit_paramBroadcast+0x84>)
 80014c4:	4805      	ldr	r0, [pc, #20]	; (80014dc <FEB_CAN_RMS_Transmit_paramBroadcast+0x8c>)
 80014c6:	f002 f8c1 	bl	800364c <HAL_CAN_AddTxMessage>
		// Code Error - Shutdown
	}
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000088 	.word	0x20000088
 80014d8:	200000bc 	.word	0x200000bc
 80014dc:	200001c4 	.word	0x200001c4
 80014e0:	200000cc 	.word	0x200000cc

080014e4 <FEB_CAN_SW_Ready>:
    SW_EXTRA_TYPE extra;
} SW_MESSAGE_TYPE;
SW_MESSAGE_TYPE SW_MESSAGE;

// **************************************** Functions ****************************************
bool FEB_CAN_SW_Ready(){
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
	return SW_MESSAGE.ready_to_drive == 1;
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <FEB_CAN_SW_Ready+0x1c>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	bf0c      	ite	eq
 80014f0:	2301      	moveq	r3, #1
 80014f2:	2300      	movne	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	200000d8 	.word	0x200000d8

08001504 <FEB_CAN_SW_Filter_Config>:

// ***** CAN FUNCTIONS ****

uint8_t FEB_CAN_SW_Filter_Config(CAN_HandleTypeDef* hcan, uint8_t FIFO_assignment, uint8_t filter_bank) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b08e      	sub	sp, #56	; 0x38
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	70fb      	strb	r3, [r7, #3]
 8001510:	4613      	mov	r3, r2
 8001512:	70bb      	strb	r3, [r7, #2]
	uint16_t ids[] = {FEB_CAN_ID_SW_READY_TO_DRIVE};
 8001514:	2306      	movs	r3, #6
 8001516:	86bb      	strh	r3, [r7, #52]	; 0x34

	for (uint8_t i = 0; i < 1; i++) {
 8001518:	2300      	movs	r3, #0
 800151a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800151e:	e029      	b.n	8001574 <FEB_CAN_SW_Filter_Config+0x70>
		CAN_FilterTypeDef filter_config;

	    // Standard CAN - 2.0A - 11 bit
	    filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8001520:	2301      	movs	r3, #1
 8001522:	62fb      	str	r3, [r7, #44]	; 0x2c
		filter_config.FilterBank = filter_bank;
 8001524:	78bb      	ldrb	r3, [r7, #2]
 8001526:	623b      	str	r3, [r7, #32]
		filter_config.FilterFIFOAssignment = FIFO_assignment;
 8001528:	78fb      	ldrb	r3, [r7, #3]
 800152a:	61fb      	str	r3, [r7, #28]
		filter_config.FilterIdHigh = ids[i] << 5;
 800152c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	3338      	adds	r3, #56	; 0x38
 8001534:	443b      	add	r3, r7
 8001536:	f833 3c04 	ldrh.w	r3, [r3, #-4]
 800153a:	015b      	lsls	r3, r3, #5
 800153c:	60fb      	str	r3, [r7, #12]
		filter_config.FilterIdLow = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
		filter_config.FilterMaskIdHigh = 0xFFE0;
 8001542:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001546:	617b      	str	r3, [r7, #20]
		filter_config.FilterMaskIdLow = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	61bb      	str	r3, [r7, #24]
		filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 800154c:	2300      	movs	r3, #0
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
		filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8001550:	2301      	movs	r3, #1
 8001552:	62bb      	str	r3, [r7, #40]	; 0x28
		filter_config.SlaveStartFilterBank = 27;
 8001554:	231b      	movs	r3, #27
 8001556:	633b      	str	r3, [r7, #48]	; 0x30
	    filter_bank++;
 8001558:	78bb      	ldrb	r3, [r7, #2]
 800155a:	3301      	adds	r3, #1
 800155c:	70bb      	strb	r3, [r7, #2]

		if (HAL_CAN_ConfigFilter(hcan, &filter_config) != HAL_OK) {
 800155e:	f107 030c 	add.w	r3, r7, #12
 8001562:	4619      	mov	r1, r3
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f001 ff4d 	bl	8003404 <HAL_CAN_ConfigFilter>
	for (uint8_t i = 0; i < 1; i++) {
 800156a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800156e:	3301      	adds	r3, #1
 8001570:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001574:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0d1      	beq.n	8001520 <FEB_CAN_SW_Filter_Config+0x1c>
			//Code Error - shutdown
		}
	}

	return filter_bank;
 800157c:	78bb      	ldrb	r3, [r7, #2]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3738      	adds	r7, #56	; 0x38
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <FEB_CAN_SW_Store_Msg>:

//TODO: check if "datalength" is 4
void FEB_CAN_SW_Store_Msg(CAN_RxHeaderTypeDef* pHeader, uint8_t *RxData) {
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
    switch (pHeader -> StdId){
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b06      	cmp	r3, #6
 8001598:	d105      	bne.n	80015a6 <FEB_CAN_SW_Store_Msg+0x1e>
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	461a      	mov	r2, r3
        case FEB_CAN_ID_SW_READY_TO_DRIVE :
            memcpy(&(SW_MESSAGE.ready_to_drive), RxData, 4);
 80015a0:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <FEB_CAN_SW_Store_Msg+0x2c>)
 80015a2:	601a      	str	r2, [r3, #0]
            break;
 80015a4:	bf00      	nop
    }
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	200000d8 	.word	0x200000d8

080015b8 <FEB_HECS_update>:
bool currHigh = false;


// **************************************** Functions ****************************************

void FEB_HECS_update(){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b0a2      	sub	sp, #136	; 0x88
 80015bc:	af00      	add	r7, sp, #0
	uint16_t current_value = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_4);
 80015be:	2104      	movs	r1, #4
 80015c0:	480e      	ldr	r0, [pc, #56]	; (80015fc <FEB_HECS_update+0x44>)
 80015c2:	f001 fc51 	bl	8002e68 <HAL_ADCEx_InjectedGetValue>
 80015c6:	4603      	mov	r3, r0
 80015c8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	char buf[128];
	uint8_t buf_len;
	buf_len = sprintf(buf, "HECS Current:%d\n", current_value);
 80015cc:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	490b      	ldr	r1, [pc, #44]	; (8001600 <FEB_HECS_update+0x48>)
 80015d4:	4618      	mov	r0, r3
 80015d6:	f005 fd77 	bl	80070c8 <siprintf>
 80015da:	4603      	mov	r3, r0
 80015dc:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85

	if (current_value > HECS_CURRENT){ //checks if current is above value (to be determined)
 80015e0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80015e4:	2b64      	cmp	r3, #100	; 0x64
 80015e6:	d902      	bls.n	80015ee <FEB_HECS_update+0x36>
		currHigh = true;
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <FEB_HECS_update+0x4c>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	701a      	strb	r2, [r3, #0]
	}
	FEB_HECS_indicate();
 80015ee:	f000 f80b 	bl	8001608 <FEB_HECS_indicate>
}
 80015f2:	bf00      	nop
 80015f4:	3788      	adds	r7, #136	; 0x88
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	2000017c 	.word	0x2000017c
 8001600:	08007a44 	.word	0x08007a44
 8001604:	200000dc 	.word	0x200000dc

08001608 <FEB_HECS_indicate>:

void FEB_HECS_indicate(){ //sends GPIO output to HECS Indicator
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
	if (currHigh == true){
 800160c:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <FEB_HECS_indicate+0x40>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d00e      	beq.n	8001632 <FEB_HECS_indicate+0x2a>
		if (FEB_Normalized_getBrake() > 0.0){ //should check whether brake is pressed -- get double checked
 8001614:	f000 f9a2 	bl	800195c <FEB_Normalized_getBrake>
 8001618:	eef0 7a40 	vmov.f32	s15, s0
 800161c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001624:	dd0a      	ble.n	800163c <FEB_HECS_indicate+0x34>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // sets GPIO PA5 to high
 8001626:	2201      	movs	r2, #1
 8001628:	2120      	movs	r1, #32
 800162a:	4808      	ldr	r0, [pc, #32]	; (800164c <FEB_HECS_indicate+0x44>)
 800162c:	f002 ff2c 	bl	8004488 <HAL_GPIO_WritePin>
 8001630:	e004      	b.n	800163c <FEB_HECS_indicate+0x34>
		}
	}else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); //sets GPIPO PA5 to low
 8001632:	2200      	movs	r2, #0
 8001634:	2120      	movs	r1, #32
 8001636:	4805      	ldr	r0, [pc, #20]	; (800164c <FEB_HECS_indicate+0x44>)
 8001638:	f002 ff26 	bl	8004488 <HAL_GPIO_WritePin>
	}
	HAL_Delay(1000);
 800163c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001640:	f001 f8b2 	bl	80027a8 <HAL_Delay>
}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	200000dc 	.word	0x200000dc
 800164c:	40020000 	.word	0x40020000

08001650 <FEB_Main_Setup>:
char buf[128];
uint8_t buf_len; //stolen from Main_Setup (SN2)

// ********************************** Functions **********************************

void FEB_Main_Setup(void){
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
	HAL_ADCEx_InjectedStart(&hadc1); //@lovehate - where does this go
 8001654:	4806      	ldr	r0, [pc, #24]	; (8001670 <FEB_Main_Setup+0x20>)
 8001656:	f001 fb3d 	bl	8002cd4 <HAL_ADCEx_InjectedStart>
	FEB_Timer_Init();
 800165a:	f000 fb57 	bl	8001d0c <FEB_Timer_Init>
	FEB_TPS2482_Setup();
 800165e:	f000 f9b9 	bl	80019d4 <FEB_TPS2482_Setup>
	FEB_CAN_Init(); //FEB_CAN_Init() // The transceiver must be connected otherwise you get sent into an infinite loop
 8001662:	f7ff fc71 	bl	8000f48 <FEB_CAN_Init>
	FEB_CAN_RMS_Setup();
 8001666:	f7ff fcb9 	bl	8000fdc <FEB_CAN_RMS_Setup>
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	2000017c 	.word	0x2000017c

08001674 <FEB_Main_While>:

void FEB_Main_While(void){
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	if (FEB_CAN_SW_Ready()){
 8001678:	f7ff ff34 	bl	80014e4 <FEB_CAN_SW_Ready>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d004      	beq.n	800168c <FEB_Main_While+0x18>
		FEB_Normalized_updateAcc();
 8001682:	f000 f831 	bl	80016e8 <FEB_Normalized_updateAcc>
		FEB_CAN_RMS_Process();
 8001686:	f7ff fcb9 	bl	8000ffc <FEB_CAN_RMS_Process>
 800168a:	e003      	b.n	8001694 <FEB_Main_While+0x20>
	} else {
		FEB_Normalized_setAcc0();
 800168c:	f000 f81e 	bl	80016cc <FEB_Normalized_setAcc0>
		FEB_CAN_RMS_Disable();
 8001690:	f7ff fcc4 	bl	800101c <FEB_CAN_RMS_Disable>
	}
	FEB_HECS_update();
 8001694:	f7ff ff90 	bl	80015b8 <FEB_HECS_update>
	FEB_Normalized_updateAcc();
 8001698:	f000 f826 	bl	80016e8 <FEB_Normalized_updateAcc>
	FEB_CAN_RMS_Torque();
 800169c:	f7ff fd34 	bl	8001108 <FEB_CAN_RMS_Torque>
	FEB_Normalized_CAN_sendBrake();
 80016a0:	f000 f96a 	bl	8001978 <FEB_Normalized_CAN_sendBrake>
	FEB_TPS2482_sendReadings(); //TODO: create transmit function for TPS2482
 80016a4:	f000 fad4 	bl	8001c50 <FEB_TPS2482_sendReadings>
	FEB_CAN_RMS_torqueTransmit();
 80016a8:	f7ff fd9e 	bl	80011e8 <FEB_CAN_RMS_torqueTransmit>
}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <FEB_Normalized_getAcc>:
float normalized_brake;
bool isImpl = false;

// **************************************** Functions ****************************************

float FEB_Normalized_getAcc(){
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
	return normalized_acc;
 80016b4:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <FEB_Normalized_getAcc+0x18>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	ee07 3a90 	vmov	s15, r3
}
 80016bc:	eeb0 0a67 	vmov.f32	s0, s15
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	20000164 	.word	0x20000164

080016cc <FEB_Normalized_setAcc0>:

void FEB_Normalized_setAcc0(){
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
	normalized_acc = 0.0;
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <FEB_Normalized_setAcc0+0x18>)
 80016d2:	f04f 0200 	mov.w	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	20000164 	.word	0x20000164

080016e8 <FEB_Normalized_updateAcc>:

void FEB_Normalized_updateAcc(){
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
	normalized_acc = FEB_Normalized_Acc_Pedals();
 80016ec:	f000 f80c 	bl	8001708 <FEB_Normalized_Acc_Pedals>
 80016f0:	eef0 7a40 	vmov.f32	s15, s0
 80016f4:	4b02      	ldr	r3, [pc, #8]	; (8001700 <FEB_Normalized_updateAcc+0x18>)
 80016f6:	edc3 7a00 	vstr	s15, [r3]
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000164 	.word	0x20000164
 8001704:	00000000 	.word	0x00000000

08001708 <FEB_Normalized_Acc_Pedals>:



float FEB_Normalized_Acc_Pedals(){
 8001708:	b580      	push	{r7, lr}
 800170a:	b0a6      	sub	sp, #152	; 0x98
 800170c:	af00      	add	r7, sp, #0
	// raw ADC readings of the two acc pedal sensors
	uint16_t acc_pedal_1 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 800170e:	2102      	movs	r1, #2
 8001710:	488b      	ldr	r0, [pc, #556]	; (8001940 <FEB_Normalized_Acc_Pedals+0x238>)
 8001712:	f001 fba9 	bl	8002e68 <HAL_ADCEx_InjectedGetValue>
 8001716:	4603      	mov	r3, r0
 8001718:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	uint16_t acc_pedal_2 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 800171c:	2103      	movs	r1, #3
 800171e:	4888      	ldr	r0, [pc, #544]	; (8001940 <FEB_Normalized_Acc_Pedals+0x238>)
 8001720:	f001 fba2 	bl	8002e68 <HAL_ADCEx_InjectedGetValue>
 8001724:	4603      	mov	r3, r0
 8001726:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
	char buf[128];
	uint8_t buf_len;
	buf_len = sprintf(buf, "acc1:%d acc2:%d\n", acc_pedal_1, acc_pedal_2);
 800172a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800172e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8001732:	1d38      	adds	r0, r7, #4
 8001734:	4983      	ldr	r1, [pc, #524]	; (8001944 <FEB_Normalized_Acc_Pedals+0x23c>)
 8001736:	f005 fcc7 	bl	80070c8 <siprintf>
 800173a:	4603      	mov	r3, r0
 800173c:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	//HAL_UART_Transmit(&huart2,(uint8_t *)buf, buf_len, HAL_MAX_DELAY);


	// check implausibility for shorting
	if (acc_pedal_1 < Sensor_Min || acc_pedal_1 > Sensor_Max
 8001740:	f240 1299 	movw	r2, #409	; 0x199
 8001744:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8001748:	4293      	cmp	r3, r2
 800174a:	d320      	bcc.n	800178e <FEB_Normalized_Acc_Pedals+0x86>
 800174c:	f640 6265 	movw	r2, #3685	; 0xe65
 8001750:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8001754:	4293      	cmp	r3, r2
 8001756:	d81a      	bhi.n	800178e <FEB_Normalized_Acc_Pedals+0x86>
			|| acc_pedal_2 < Sensor_Min || acc_pedal_2 > Sensor_Max
 8001758:	f240 1299 	movw	r2, #409	; 0x199
 800175c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8001760:	4293      	cmp	r3, r2
 8001762:	d314      	bcc.n	800178e <FEB_Normalized_Acc_Pedals+0x86>
 8001764:	f640 6265 	movw	r2, #3685	; 0xe65
 8001768:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800176c:	4293      	cmp	r3, r2
 800176e:	d80e      	bhi.n	800178e <FEB_Normalized_Acc_Pedals+0x86>
			|| abs(acc_pedal_1 - acc_pedal_2) < 100) {
 8001770:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8001774:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800177e:	db0c      	blt.n	800179a <FEB_Normalized_Acc_Pedals+0x92>
 8001780:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8001784:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b63      	cmp	r3, #99	; 0x63
 800178c:	dc05      	bgt.n	800179a <FEB_Normalized_Acc_Pedals+0x92>
		isImpl = true;
 800178e:	4b6e      	ldr	r3, [pc, #440]	; (8001948 <FEB_Normalized_Acc_Pedals+0x240>)
 8001790:	2201      	movs	r2, #1
 8001792:	701a      	strb	r2, [r3, #0]
		return 0.0;
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	e0b7      	b.n	800190a <FEB_Normalized_Acc_Pedals+0x202>
	}

	//convert to % travel
	// sensor 1 has positive slope
	float ped1_normalized = (acc_pedal_1 - ACC_PEDAL_1_START)/ (ACC_PEDAL_1_END - ACC_PEDAL_1_START);
 800179a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800179e:	4618      	mov	r0, r3
 80017a0:	f7fe fed8 	bl	8000554 <__aeabi_i2d>
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	4b68      	ldr	r3, [pc, #416]	; (800194c <FEB_Normalized_Acc_Pedals+0x244>)
 80017aa:	f7fe fd85 	bl	80002b8 <__aeabi_dsub>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4610      	mov	r0, r2
 80017b4:	4619      	mov	r1, r3
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	4b65      	ldr	r3, [pc, #404]	; (8001950 <FEB_Normalized_Acc_Pedals+0x248>)
 80017bc:	f7ff f85e 	bl	800087c <__aeabi_ddiv>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4610      	mov	r0, r2
 80017c6:	4619      	mov	r1, r3
 80017c8:	f7ff f9f0 	bl	8000bac <__aeabi_d2f>
 80017cc:	4603      	mov	r3, r0
 80017ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	// sensor 2 has negative slope
	float ped2_normalized = (acc_pedal_2 - ACC_PEDAL_2_START) / (ACC_PEDAL_2_END - ACC_PEDAL_2_START);
 80017d2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7fe febc 	bl	8000554 <__aeabi_i2d>
 80017dc:	a34e      	add	r3, pc, #312	; (adr r3, 8001918 <FEB_Normalized_Acc_Pedals+0x210>)
 80017de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e2:	f7fe fd69 	bl	80002b8 <__aeabi_dsub>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4610      	mov	r0, r2
 80017ec:	4619      	mov	r1, r3
 80017ee:	a34c      	add	r3, pc, #304	; (adr r3, 8001920 <FEB_Normalized_Acc_Pedals+0x218>)
 80017f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f4:	f7ff f842 	bl	800087c <__aeabi_ddiv>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4610      	mov	r0, r2
 80017fe:	4619      	mov	r1, r3
 8001800:	f7ff f9d4 	bl	8000bac <__aeabi_d2f>
 8001804:	4603      	mov	r3, r0
 8001806:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

	// sensor measurements mismatch by more than 10%
	if(abs(ped1_normalized - ped2_normalized) > 0.1 ){
 800180a:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 800180e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001812:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001816:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800181a:	ee17 3a90 	vmov	r3, s15
 800181e:	2b00      	cmp	r3, #0
 8001820:	bfb8      	it	lt
 8001822:	425b      	neglt	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	dd05      	ble.n	8001834 <FEB_Normalized_Acc_Pedals+0x12c>
		isImpl = true;
 8001828:	4b47      	ldr	r3, [pc, #284]	; (8001948 <FEB_Normalized_Acc_Pedals+0x240>)
 800182a:	2201      	movs	r2, #1
 800182c:	701a      	strb	r2, [r3, #0]
		return 0.0;
 800182e:	f04f 0300 	mov.w	r3, #0
 8001832:	e06a      	b.n	800190a <FEB_Normalized_Acc_Pedals+0x202>
	}

	float final_normalized = 0.5*(ped1_normalized + ped2_normalized);
 8001834:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8001838:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800183c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001840:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001844:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001848:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84

	// Implausiblity check if both pedals are stepped
	if (normalized_brake > 0.2 && normalized_acc > 0.1) {
 800184c:	4b41      	ldr	r3, [pc, #260]	; (8001954 <FEB_Normalized_Acc_Pedals+0x24c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f7fe fe91 	bl	8000578 <__aeabi_f2d>
 8001856:	a334      	add	r3, pc, #208	; (adr r3, 8001928 <FEB_Normalized_Acc_Pedals+0x220>)
 8001858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185c:	f7ff f974 	bl	8000b48 <__aeabi_dcmpgt>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00f      	beq.n	8001886 <FEB_Normalized_Acc_Pedals+0x17e>
 8001866:	4b3c      	ldr	r3, [pc, #240]	; (8001958 <FEB_Normalized_Acc_Pedals+0x250>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fe84 	bl	8000578 <__aeabi_f2d>
 8001870:	a32f      	add	r3, pc, #188	; (adr r3, 8001930 <FEB_Normalized_Acc_Pedals+0x228>)
 8001872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001876:	f7ff f967 	bl	8000b48 <__aeabi_dcmpgt>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d002      	beq.n	8001886 <FEB_Normalized_Acc_Pedals+0x17e>
		isImpl = true;
 8001880:	4b31      	ldr	r3, [pc, #196]	; (8001948 <FEB_Normalized_Acc_Pedals+0x240>)
 8001882:	2201      	movs	r2, #1
 8001884:	701a      	strb	r2, [r3, #0]
	}

	// recover from implausibility if acc pedal is not 5% less
	if (final_normalized < 0.05 && isImpl) {
 8001886:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800188a:	f7fe fe75 	bl	8000578 <__aeabi_f2d>
 800188e:	a32a      	add	r3, pc, #168	; (adr r3, 8001938 <FEB_Normalized_Acc_Pedals+0x230>)
 8001890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001894:	f7ff f93a 	bl	8000b0c <__aeabi_dcmplt>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d006      	beq.n	80018ac <FEB_Normalized_Acc_Pedals+0x1a4>
 800189e:	4b2a      	ldr	r3, [pc, #168]	; (8001948 <FEB_Normalized_Acc_Pedals+0x240>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d002      	beq.n	80018ac <FEB_Normalized_Acc_Pedals+0x1a4>
		isImpl = false;
 80018a6:	4b28      	ldr	r3, [pc, #160]	; (8001948 <FEB_Normalized_Acc_Pedals+0x240>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
	}

	if (!isImpl) {
 80018ac:	4b26      	ldr	r3, [pc, #152]	; (8001948 <FEB_Normalized_Acc_Pedals+0x240>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	f083 0301 	eor.w	r3, r3, #1
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d025      	beq.n	8001906 <FEB_Normalized_Acc_Pedals+0x1fe>
		final_normalized = final_normalized > 1 ? 1 : final_normalized;
 80018ba:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80018be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80018c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ca:	dd02      	ble.n	80018d2 <FEB_Normalized_Acc_Pedals+0x1ca>
 80018cc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80018d0:	e001      	b.n	80018d6 <FEB_Normalized_Acc_Pedals+0x1ce>
 80018d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		final_normalized = final_normalized < 0.05 ? 0 : final_normalized;
 80018da:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80018de:	f7fe fe4b 	bl	8000578 <__aeabi_f2d>
 80018e2:	a315      	add	r3, pc, #84	; (adr r3, 8001938 <FEB_Normalized_Acc_Pedals+0x230>)
 80018e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e8:	f7ff f910 	bl	8000b0c <__aeabi_dcmplt>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d002      	beq.n	80018f8 <FEB_Normalized_Acc_Pedals+0x1f0>
 80018f2:	f04f 0300 	mov.w	r3, #0
 80018f6:	e001      	b.n	80018fc <FEB_Normalized_Acc_Pedals+0x1f4>
 80018f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		return final_normalized;
 8001900:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001904:	e001      	b.n	800190a <FEB_Normalized_Acc_Pedals+0x202>
	} else {
		return 0.0;
 8001906:	f04f 0300 	mov.w	r3, #0
	}
}
 800190a:	ee07 3a90 	vmov	s15, r3
 800190e:	eeb0 0a67 	vmov.f32	s0, s15
 8001912:	3798      	adds	r7, #152	; 0x98
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	00000000 	.word	0x00000000
 800191c:	40a95a00 	.word	0x40a95a00
 8001920:	00000000 	.word	0x00000000
 8001924:	c06f4000 	.word	0xc06f4000
 8001928:	9999999a 	.word	0x9999999a
 800192c:	3fc99999 	.word	0x3fc99999
 8001930:	9999999a 	.word	0x9999999a
 8001934:	3fb99999 	.word	0x3fb99999
 8001938:	9999999a 	.word	0x9999999a
 800193c:	3fa99999 	.word	0x3fa99999
 8001940:	2000017c 	.word	0x2000017c
 8001944:	08007a58 	.word	0x08007a58
 8001948:	2000016c 	.word	0x2000016c
 800194c:	408ae000 	.word	0x408ae000
 8001950:	406f4000 	.word	0x406f4000
 8001954:	20000168 	.word	0x20000168
 8001958:	20000164 	.word	0x20000164

0800195c <FEB_Normalized_getBrake>:

float FEB_Normalized_getBrake(){
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
	return normalized_brake;
 8001960:	4b04      	ldr	r3, [pc, #16]	; (8001974 <FEB_Normalized_getBrake+0x18>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	ee07 3a90 	vmov	s15, r3
}
 8001968:	eeb0 0a67 	vmov.f32	s0, s15
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	20000168 	.word	0x20000168

08001978 <FEB_Normalized_CAN_sendBrake>:
	}

	return final_normalized;
}

void FEB_Normalized_CAN_sendBrake(){
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
	// Initialize transmission header
	FEB_CAN_Tx_Header.DLC = 4;
 800197c:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <FEB_Normalized_CAN_sendBrake+0x48>)
 800197e:	2204      	movs	r2, #4
 8001980:	611a      	str	r2, [r3, #16]
	FEB_CAN_Tx_Header.ExtId = FEB_CAN_ID_APPS_BRAKE_PEDAL;
 8001982:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <FEB_Normalized_CAN_sendBrake+0x48>)
 8001984:	220a      	movs	r2, #10
 8001986:	605a      	str	r2, [r3, #4]
	FEB_CAN_Tx_Header.IDE = CAN_ID_EXT;
 8001988:	4b0d      	ldr	r3, [pc, #52]	; (80019c0 <FEB_Normalized_CAN_sendBrake+0x48>)
 800198a:	2204      	movs	r2, #4
 800198c:	609a      	str	r2, [r3, #8]
	FEB_CAN_Tx_Header.RTR = CAN_RTR_DATA;
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <FEB_Normalized_CAN_sendBrake+0x48>)
 8001990:	2200      	movs	r2, #0
 8001992:	60da      	str	r2, [r3, #12]
	FEB_CAN_Tx_Header.TransmitGlobalTime = DISABLE;
 8001994:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <FEB_Normalized_CAN_sendBrake+0x48>)
 8001996:	2200      	movs	r2, #0
 8001998:	751a      	strb	r2, [r3, #20]
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <FEB_Normalized_CAN_sendBrake+0x4c>)
 800199c:	681b      	ldr	r3, [r3, #0]

	// Copy data to Tx buffer
	memcpy(FEB_CAN_Tx_Data, &normalized_brake, sizeof(float));
 800199e:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <FEB_Normalized_CAN_sendBrake+0x50>)
 80019a0:	6013      	str	r3, [r2, #0]


	// Delay until mailbox available
	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0) {}
 80019a2:	bf00      	nop
 80019a4:	4809      	ldr	r0, [pc, #36]	; (80019cc <FEB_Normalized_CAN_sendBrake+0x54>)
 80019a6:	f001 ff2c 	bl	8003802 <HAL_CAN_GetTxMailboxesFreeLevel>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f9      	beq.n	80019a4 <FEB_Normalized_CAN_sendBrake+0x2c>

	// Add Tx data to mailbox
	if (HAL_CAN_AddTxMessage(&hcan1, &FEB_CAN_Tx_Header, FEB_CAN_Tx_Data, &FEB_CAN_Tx_Mailbox) != HAL_OK) {
 80019b0:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <FEB_Normalized_CAN_sendBrake+0x58>)
 80019b2:	4a05      	ldr	r2, [pc, #20]	; (80019c8 <FEB_Normalized_CAN_sendBrake+0x50>)
 80019b4:	4902      	ldr	r1, [pc, #8]	; (80019c0 <FEB_Normalized_CAN_sendBrake+0x48>)
 80019b6:	4805      	ldr	r0, [pc, #20]	; (80019cc <FEB_Normalized_CAN_sendBrake+0x54>)
 80019b8:	f001 fe48 	bl	800364c <HAL_CAN_AddTxMessage>
		//error - shutdown
	}

}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000088 	.word	0x20000088
 80019c4:	20000168 	.word	0x20000168
 80019c8:	200000bc 	.word	0x200000bc
 80019cc:	200001c4 	.word	0x200001c4
 80019d0:	200000cc 	.word	0x200000cc

080019d4 <FEB_TPS2482_Setup>:
float shunt_voltage;

// **************************************** Functions ****************************************


void FEB_TPS2482_Setup() {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af04      	add	r7, sp, #16
//HAL_StatusTypeDef ret;
	HAL_I2C_Mem_Write(&hi2c1, FEB_CAN_ID_APPS_TPS, 0x00, 1, CONFIG, 2, HAL_MAX_DELAY); // configure
 80019da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019de:	9302      	str	r3, [sp, #8]
 80019e0:	2302      	movs	r3, #2
 80019e2:	9301      	str	r3, [sp, #4]
 80019e4:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <FEB_TPS2482_Setup+0x74>)
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	2301      	movs	r3, #1
 80019ea:	2200      	movs	r2, #0
 80019ec:	2180      	movs	r1, #128	; 0x80
 80019ee:	4817      	ldr	r0, [pc, #92]	; (8001a4c <FEB_TPS2482_Setup+0x78>)
 80019f0:	f003 f9cc 	bl	8004d8c <HAL_I2C_Mem_Write>
//	if (ret != HAL_OK) {
//			// error handler
//		__disable_irq();
//		while(1);
//	}
	HAL_I2C_Mem_Write(&hi2c1, FEB_CAN_ID_APPS_TPS, 0x05, 1, MAIN_CAL, 2, HAL_MAX_DELAY); // calibrate
 80019f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019f8:	9302      	str	r3, [sp, #8]
 80019fa:	2302      	movs	r3, #2
 80019fc:	9301      	str	r3, [sp, #4]
 80019fe:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <FEB_TPS2482_Setup+0x7c>)
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	2301      	movs	r3, #1
 8001a04:	2205      	movs	r2, #5
 8001a06:	2180      	movs	r1, #128	; 0x80
 8001a08:	4810      	ldr	r0, [pc, #64]	; (8001a4c <FEB_TPS2482_Setup+0x78>)
 8001a0a:	f003 f9bf 	bl	8004d8c <HAL_I2C_Mem_Write>
//	if (ret != HAL_OK) {
//			// error handler
//		__disable_irq();
//		while(1);
//	}
	HAL_I2C_Mem_Write(&hi2c1, FEB_CAN_ID_APPS_TPS, 0x06, 1, UNDERV, 2, HAL_MAX_DELAY); // set alert
 8001a0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a12:	9302      	str	r3, [sp, #8]
 8001a14:	2302      	movs	r3, #2
 8001a16:	9301      	str	r3, [sp, #4]
 8001a18:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <FEB_TPS2482_Setup+0x80>)
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	2206      	movs	r2, #6
 8001a20:	2180      	movs	r1, #128	; 0x80
 8001a22:	480a      	ldr	r0, [pc, #40]	; (8001a4c <FEB_TPS2482_Setup+0x78>)
 8001a24:	f003 f9b2 	bl	8004d8c <HAL_I2C_Mem_Write>
//	if (ret != HAL_OK) {
//			// error handler
//		__disable_irq();
//		while(1);
//	}
	HAL_I2C_Mem_Write(&hi2c1, FEB_CAN_ID_APPS_TPS, 0x07, 1, TPS_LIMIT, 2, HAL_MAX_DELAY); // set limit
 8001a28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a2c:	9302      	str	r3, [sp, #8]
 8001a2e:	2302      	movs	r3, #2
 8001a30:	9301      	str	r3, [sp, #4]
 8001a32:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <FEB_TPS2482_Setup+0x84>)
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	2301      	movs	r3, #1
 8001a38:	2207      	movs	r2, #7
 8001a3a:	2180      	movs	r1, #128	; 0x80
 8001a3c:	4803      	ldr	r0, [pc, #12]	; (8001a4c <FEB_TPS2482_Setup+0x78>)
 8001a3e:	f003 f9a5 	bl	8004d8c <HAL_I2C_Mem_Write>
//	if (ret != HAL_OK) {
//		// error handler
//		__disable_irq();
//		while(1);
//	}
}
 8001a42:	bf00      	nop
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000000 	.word	0x20000000
 8001a4c:	200001ec 	.word	0x200001ec
 8001a50:	20000004 	.word	0x20000004
 8001a54:	20000008 	.word	0x20000008
 8001a58:	2000000c 	.word	0x2000000c
 8001a5c:	00000000 	.word	0x00000000

08001a60 <FEB_TPS2482_PollBusCurrent>:

//Brief: Uses I2C to pull current value from a device on the bus
//Param: hi2c Pointer to a I2C_HandleTypeDef structure that contains
//                the configuration information for the specified I2C.
//Param: DEV_ADDR which points to which device on the bus you want to poll
float FEB_TPS2482_PollBusCurrent(I2C_HandleTypeDef * hi2c, uint8_t DEV_ADDR){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08a      	sub	sp, #40	; 0x28
 8001a64:	af02      	add	r7, sp, #8
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	70fb      	strb	r3, [r7, #3]
	//Buffer to store data;
	uint8_t buf[12];
	buf[0] = 4; //4 is the register that stores the current value
 8001a6c:	2304      	movs	r3, #4
 8001a6e:	733b      	strb	r3, [r7, #12]
	float returnVal = -1; //Set return val default to -1 as an "error". Not that great since we can actually have negative current
 8001a70:	4b23      	ldr	r3, [pc, #140]	; (8001b00 <FEB_TPS2482_PollBusCurrent+0xa0>)
 8001a72:	61fb      	str	r3, [r7, #28]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c, DEV_ADDR, buf, 1, 100);
 8001a74:	78fb      	ldrb	r3, [r7, #3]
 8001a76:	b299      	uxth	r1, r3
 8001a78:	f107 020c 	add.w	r2, r7, #12
 8001a7c:	2364      	movs	r3, #100	; 0x64
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	2301      	movs	r3, #1
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f002 fe5e 	bl	8004744 <HAL_I2C_Master_Transmit>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	76fb      	strb	r3, [r7, #27]
	if(ret == HAL_OK){
 8001a8c:	7efb      	ldrb	r3, [r7, #27]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d127      	bne.n	8001ae2 <FEB_TPS2482_PollBusCurrent+0x82>
		ret = HAL_I2C_Master_Receive(hi2c, DEV_ADDR, buf, 2,100);
 8001a92:	78fb      	ldrb	r3, [r7, #3]
 8001a94:	b299      	uxth	r1, r3
 8001a96:	f107 020c 	add.w	r2, r7, #12
 8001a9a:	2364      	movs	r3, #100	; 0x64
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f002 ff4d 	bl	8004940 <HAL_I2C_Master_Receive>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	76fb      	strb	r3, [r7, #27]
		if(ret == HAL_OK){
 8001aaa:	7efb      	ldrb	r3, [r7, #27]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d118      	bne.n	8001ae2 <FEB_TPS2482_PollBusCurrent+0x82>
			int16_t val = (buf[0]<<8) | buf[1]; //Not sure if little endian or not, needs testing!
 8001ab0:	7b3b      	ldrb	r3, [r7, #12]
 8001ab2:	021b      	lsls	r3, r3, #8
 8001ab4:	b21a      	sxth	r2, r3
 8001ab6:	7b7b      	ldrb	r3, [r7, #13]
 8001ab8:	b21b      	sxth	r3, r3
 8001aba:	4313      	orrs	r3, r2
 8001abc:	833b      	strh	r3, [r7, #24]
			returnVal = val * 0.0000305185; // LSB-weight = 2mA/bit
 8001abe:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7fe fd46 	bl	8000554 <__aeabi_i2d>
 8001ac8:	a30b      	add	r3, pc, #44	; (adr r3, 8001af8 <FEB_TPS2482_PollBusCurrent+0x98>)
 8001aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ace:	f7fe fdab 	bl	8000628 <__aeabi_dmul>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f7ff f867 	bl	8000bac <__aeabi_d2f>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	61fb      	str	r3, [r7, #28]
		}
	}

	return returnVal;
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	ee07 3a90 	vmov	s15, r3
}
 8001ae8:	eeb0 0a67 	vmov.f32	s0, s15
 8001aec:	3720      	adds	r7, #32
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	f3af 8000 	nop.w
 8001af8:	ace5f408 	.word	0xace5f408
 8001afc:	3f00001f 	.word	0x3f00001f
 8001b00:	bf800000 	.word	0xbf800000
 8001b04:	00000000 	.word	0x00000000

08001b08 <FEB_TPS2482_GetShunt>:

float FEB_TPS2482_GetShunt(I2C_HandleTypeDef * hi2c, uint8_t DEV_ADDR){
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	; 0x28
 8001b0c:	af02      	add	r7, sp, #8
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	70fb      	strb	r3, [r7, #3]
	//buffer to store data
	uint8_t buf[12];
	buf[0]=1; //Register 1 stores the shunt voltage
 8001b14:	2301      	movs	r3, #1
 8001b16:	733b      	strb	r3, [r7, #12]
	float returnVal=-1; //Return -1 as an error
 8001b18:	4b23      	ldr	r3, [pc, #140]	; (8001ba8 <FEB_TPS2482_GetShunt+0xa0>)
 8001b1a:	61fb      	str	r3, [r7, #28]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c, DEV_ADDR, buf, 1, 100);
 8001b1c:	78fb      	ldrb	r3, [r7, #3]
 8001b1e:	b299      	uxth	r1, r3
 8001b20:	f107 020c 	add.w	r2, r7, #12
 8001b24:	2364      	movs	r3, #100	; 0x64
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	2301      	movs	r3, #1
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f002 fe0a 	bl	8004744 <HAL_I2C_Master_Transmit>
 8001b30:	4603      	mov	r3, r0
 8001b32:	76fb      	strb	r3, [r7, #27]
	if(ret == HAL_OK){
 8001b34:	7efb      	ldrb	r3, [r7, #27]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d127      	bne.n	8001b8a <FEB_TPS2482_GetShunt+0x82>
		ret = HAL_I2C_Master_Receive(hi2c, DEV_ADDR, buf, 2, 100);
 8001b3a:	78fb      	ldrb	r3, [r7, #3]
 8001b3c:	b299      	uxth	r1, r3
 8001b3e:	f107 020c 	add.w	r2, r7, #12
 8001b42:	2364      	movs	r3, #100	; 0x64
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	2302      	movs	r3, #2
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f002 fef9 	bl	8004940 <HAL_I2C_Master_Receive>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	76fb      	strb	r3, [r7, #27]
		if(ret == HAL_OK){
 8001b52:	7efb      	ldrb	r3, [r7, #27]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d118      	bne.n	8001b8a <FEB_TPS2482_GetShunt+0x82>
			int16_t val = (buf[0]<<8) | buf[1];
 8001b58:	7b3b      	ldrb	r3, [r7, #12]
 8001b5a:	021b      	lsls	r3, r3, #8
 8001b5c:	b21a      	sxth	r2, r3
 8001b5e:	7b7b      	ldrb	r3, [r7, #13]
 8001b60:	b21b      	sxth	r3, r3
 8001b62:	4313      	orrs	r3, r2
 8001b64:	833b      	strh	r3, [r7, #24]
			returnVal = val *  0.0000025; // LSB-weight = 2mA/bit
 8001b66:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7fe fcf2 	bl	8000554 <__aeabi_i2d>
 8001b70:	a30b      	add	r3, pc, #44	; (adr r3, 8001ba0 <FEB_TPS2482_GetShunt+0x98>)
 8001b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b76:	f7fe fd57 	bl	8000628 <__aeabi_dmul>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4610      	mov	r0, r2
 8001b80:	4619      	mov	r1, r3
 8001b82:	f7ff f813 	bl	8000bac <__aeabi_d2f>
 8001b86:	4603      	mov	r3, r0
 8001b88:	61fb      	str	r3, [r7, #28]
		}
	}

	return returnVal;
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	ee07 3a90 	vmov	s15, r3
}
 8001b90:	eeb0 0a67 	vmov.f32	s0, s15
 8001b94:	3720      	adds	r7, #32
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	f3af 8000 	nop.w
 8001ba0:	88e368f1 	.word	0x88e368f1
 8001ba4:	3ec4f8b5 	.word	0x3ec4f8b5
 8001ba8:	bf800000 	.word	0xbf800000
 8001bac:	00000000 	.word	0x00000000

08001bb0 <FEB_TPS2482_PollBusVoltage>:

float FEB_TPS2482_PollBusVoltage(I2C_HandleTypeDef * hi2c, uint8_t DEV_ADDR){
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	; 0x28
 8001bb4:	af02      	add	r7, sp, #8
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	70fb      	strb	r3, [r7, #3]
	//buffer to store data
	uint8_t buf[12];
	buf[0]=2;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	733b      	strb	r3, [r7, #12]
	float returnVal=1;
 8001bc0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001bc4:	61fb      	str	r3, [r7, #28]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c, DEV_ADDR, buf, 1, 100);
 8001bc6:	78fb      	ldrb	r3, [r7, #3]
 8001bc8:	b299      	uxth	r1, r3
 8001bca:	f107 020c 	add.w	r2, r7, #12
 8001bce:	2364      	movs	r3, #100	; 0x64
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f002 fdb5 	bl	8004744 <HAL_I2C_Master_Transmit>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	76fb      	strb	r3, [r7, #27]
	if(ret == HAL_OK){
 8001bde:	7efb      	ldrb	r3, [r7, #27]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d127      	bne.n	8001c34 <FEB_TPS2482_PollBusVoltage+0x84>
		ret = HAL_I2C_Master_Receive(hi2c, DEV_ADDR, buf, 2, 100);
 8001be4:	78fb      	ldrb	r3, [r7, #3]
 8001be6:	b299      	uxth	r1, r3
 8001be8:	f107 020c 	add.w	r2, r7, #12
 8001bec:	2364      	movs	r3, #100	; 0x64
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f002 fea4 	bl	8004940 <HAL_I2C_Master_Receive>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	76fb      	strb	r3, [r7, #27]
		if(ret == HAL_OK){
 8001bfc:	7efb      	ldrb	r3, [r7, #27]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d118      	bne.n	8001c34 <FEB_TPS2482_PollBusVoltage+0x84>
			int16_t val = (buf[0]<<8) | buf[1];
 8001c02:	7b3b      	ldrb	r3, [r7, #12]
 8001c04:	021b      	lsls	r3, r3, #8
 8001c06:	b21a      	sxth	r2, r3
 8001c08:	7b7b      	ldrb	r3, [r7, #13]
 8001c0a:	b21b      	sxth	r3, r3
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	833b      	strh	r3, [r7, #24]
			returnVal = val * 0.00125; // LSB-weight = 2mA/bit
 8001c10:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fc9d 	bl	8000554 <__aeabi_i2d>
 8001c1a:	a30b      	add	r3, pc, #44	; (adr r3, 8001c48 <FEB_TPS2482_PollBusVoltage+0x98>)
 8001c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c20:	f7fe fd02 	bl	8000628 <__aeabi_dmul>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4610      	mov	r0, r2
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	f7fe ffbe 	bl	8000bac <__aeabi_d2f>
 8001c30:	4603      	mov	r3, r0
 8001c32:	61fb      	str	r3, [r7, #28]
		}
	}

	return returnVal;
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	ee07 3a90 	vmov	s15, r3
}
 8001c3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c3e:	3720      	adds	r7, #32
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	f3af 8000 	nop.w
 8001c48:	47ae147b 	.word	0x47ae147b
 8001c4c:	3f547ae1 	.word	0x3f547ae1

08001c50 <FEB_TPS2482_sendReadings>:

void FEB_TPS2482_sendReadings(){
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
	current_reading = FEB_TPS2482_PollBusCurrent(&hi2c1,FEB_CAN_ID_APPS_TPS+1); // can abstract away if needed
 8001c54:	2181      	movs	r1, #129	; 0x81
 8001c56:	4811      	ldr	r0, [pc, #68]	; (8001c9c <FEB_TPS2482_sendReadings+0x4c>)
 8001c58:	f7ff ff02 	bl	8001a60 <FEB_TPS2482_PollBusCurrent>
 8001c5c:	eef0 7a40 	vmov.f32	s15, s0
 8001c60:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <FEB_TPS2482_sendReadings+0x50>)
 8001c62:	edc3 7a00 	vstr	s15, [r3]
	voltage_reading = FEB_TPS2482_PollBusVoltage(&hi2c1, FEB_CAN_ID_APPS_TPS+1); // can abstract away if needed
 8001c66:	2181      	movs	r1, #129	; 0x81
 8001c68:	480c      	ldr	r0, [pc, #48]	; (8001c9c <FEB_TPS2482_sendReadings+0x4c>)
 8001c6a:	f7ff ffa1 	bl	8001bb0 <FEB_TPS2482_PollBusVoltage>
 8001c6e:	eef0 7a40 	vmov.f32	s15, s0
 8001c72:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <FEB_TPS2482_sendReadings+0x54>)
 8001c74:	edc3 7a00 	vstr	s15, [r3]
	shunt_voltage = FEB_TPS2482_GetShunt(&hi2c1, FEB_CAN_ID_APPS_TPS+1); //can abstract away if needed
 8001c78:	2181      	movs	r1, #129	; 0x81
 8001c7a:	4808      	ldr	r0, [pc, #32]	; (8001c9c <FEB_TPS2482_sendReadings+0x4c>)
 8001c7c:	f7ff ff44 	bl	8001b08 <FEB_TPS2482_GetShunt>
 8001c80:	eef0 7a40 	vmov.f32	s15, s0
 8001c84:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <FEB_TPS2482_sendReadings+0x58>)
 8001c86:	edc3 7a00 	vstr	s15, [r3]
	//FEB_CAN_Transmit(&hcan1,APPS_TPS,&current_reading,sizeof(float)); //TODO: convert to custom Transmit Funciton
	//TODO: create transmit function for FEB_TPS2482
	FEB_TPS2482_CAN_Transmit(current_reading);
 8001c8a:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <FEB_TPS2482_sendReadings+0x50>)
 8001c8c:	edd3 7a00 	vldr	s15, [r3]
 8001c90:	eeb0 0a67 	vmov.f32	s0, s15
 8001c94:	f000 f80a 	bl	8001cac <FEB_TPS2482_CAN_Transmit>
	//FEB_TPS2482_CAN_Transmit(voltage_reading);
	//FEB_TPS2482_CAN_Transmit(shunt_voltage);

}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	200001ec 	.word	0x200001ec
 8001ca0:	20000170 	.word	0x20000170
 8001ca4:	20000174 	.word	0x20000174
 8001ca8:	20000178 	.word	0x20000178

08001cac <FEB_TPS2482_CAN_Transmit>:

void FEB_TPS2482_CAN_Transmit(float reading){
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	ed87 0a01 	vstr	s0, [r7, #4]
	// Initialize transmission header
	FEB_CAN_Tx_Header.DLC = 8;
 8001cb6:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <FEB_TPS2482_CAN_Transmit+0x50>)
 8001cb8:	2208      	movs	r2, #8
 8001cba:	611a      	str	r2, [r3, #16]
	FEB_CAN_Tx_Header.ExtId = FEB_CAN_ID_APPS_TPS;
 8001cbc:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <FEB_TPS2482_CAN_Transmit+0x50>)
 8001cbe:	2280      	movs	r2, #128	; 0x80
 8001cc0:	605a      	str	r2, [r3, #4]
	FEB_CAN_Tx_Header.IDE = CAN_ID_EXT;
 8001cc2:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <FEB_TPS2482_CAN_Transmit+0x50>)
 8001cc4:	2204      	movs	r2, #4
 8001cc6:	609a      	str	r2, [r3, #8]
	FEB_CAN_Tx_Header.RTR = CAN_RTR_DATA;
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <FEB_TPS2482_CAN_Transmit+0x50>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	60da      	str	r2, [r3, #12]
	FEB_CAN_Tx_Header.TransmitGlobalTime = DISABLE;
 8001cce:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <FEB_TPS2482_CAN_Transmit+0x50>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	751a      	strb	r2, [r3, #20]
 8001cd4:	687b      	ldr	r3, [r7, #4]

	// Copy data to Tx buffer
	memcpy(FEB_CAN_Tx_Data, &reading, sizeof(float));
 8001cd6:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <FEB_TPS2482_CAN_Transmit+0x54>)
 8001cd8:	6013      	str	r3, [r2, #0]

	// Delay until mailbox available
	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0) {}
 8001cda:	bf00      	nop
 8001cdc:	4809      	ldr	r0, [pc, #36]	; (8001d04 <FEB_TPS2482_CAN_Transmit+0x58>)
 8001cde:	f001 fd90 	bl	8003802 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0f9      	beq.n	8001cdc <FEB_TPS2482_CAN_Transmit+0x30>

	// Add Tx data to mailbox
	if (HAL_CAN_AddTxMessage(&hcan1, &FEB_CAN_Tx_Header, FEB_CAN_Tx_Data, &FEB_CAN_Tx_Mailbox) != HAL_OK) {
 8001ce8:	4b07      	ldr	r3, [pc, #28]	; (8001d08 <FEB_TPS2482_CAN_Transmit+0x5c>)
 8001cea:	4a05      	ldr	r2, [pc, #20]	; (8001d00 <FEB_TPS2482_CAN_Transmit+0x54>)
 8001cec:	4903      	ldr	r1, [pc, #12]	; (8001cfc <FEB_TPS2482_CAN_Transmit+0x50>)
 8001cee:	4805      	ldr	r0, [pc, #20]	; (8001d04 <FEB_TPS2482_CAN_Transmit+0x58>)
 8001cf0:	f001 fcac 	bl	800364c <HAL_CAN_AddTxMessage>
		//Shutdown error
	}
}
 8001cf4:	bf00      	nop
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20000088 	.word	0x20000088
 8001d00:	200000bc 	.word	0x200000bc
 8001d04:	200001c4 	.word	0x200001c4
 8001d08:	200000cc 	.word	0x200000cc

08001d0c <FEB_Timer_Init>:

extern TIM_HandleTypeDef htim5;

// ********************************** Initialize **********************************

void FEB_Timer_Init(void) {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim5);
 8001d10:	4802      	ldr	r0, [pc, #8]	; (8001d1c <FEB_Timer_Init+0x10>)
 8001d12:	f004 fb31 	bl	8006378 <HAL_TIM_Base_Start>
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000240 	.word	0x20000240

08001d20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d24:	f000 fcce 	bl	80026c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d28:	f000 f812 	bl	8001d50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d2c:	f000 f9fa 	bl	8002124 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001d30:	f000 f9ce 	bl	80020d0 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8001d34:	f000 f91a 	bl	8001f6c <MX_CAN1_Init>
  MX_ADC1_Init();
 8001d38:	f000 f876 	bl	8001e28 <MX_ADC1_Init>
  MX_TIM5_Init();
 8001d3c:	f000 f97a 	bl	8002034 <MX_TIM5_Init>
  MX_I2C1_Init();
 8001d40:	f000 f94a 	bl	8001fd8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  FEB_Main_Setup();
 8001d44:	f7ff fc84 	bl	8001650 <FEB_Main_Setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  FEB_Main_While();
 8001d48:	f7ff fc94 	bl	8001674 <FEB_Main_While>
 8001d4c:	e7fc      	b.n	8001d48 <main+0x28>
	...

08001d50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b094      	sub	sp, #80	; 0x50
 8001d54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d56:	f107 031c 	add.w	r3, r7, #28
 8001d5a:	2234      	movs	r2, #52	; 0x34
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f005 f9d2 	bl	8007108 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d64:	f107 0308 	add.w	r3, r7, #8
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d74:	2300      	movs	r3, #0
 8001d76:	607b      	str	r3, [r7, #4]
 8001d78:	4b29      	ldr	r3, [pc, #164]	; (8001e20 <SystemClock_Config+0xd0>)
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	4a28      	ldr	r2, [pc, #160]	; (8001e20 <SystemClock_Config+0xd0>)
 8001d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d82:	6413      	str	r3, [r2, #64]	; 0x40
 8001d84:	4b26      	ldr	r3, [pc, #152]	; (8001e20 <SystemClock_Config+0xd0>)
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	607b      	str	r3, [r7, #4]
 8001d8e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d90:	2300      	movs	r3, #0
 8001d92:	603b      	str	r3, [r7, #0]
 8001d94:	4b23      	ldr	r3, [pc, #140]	; (8001e24 <SystemClock_Config+0xd4>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a22      	ldr	r2, [pc, #136]	; (8001e24 <SystemClock_Config+0xd4>)
 8001d9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d9e:	6013      	str	r3, [r2, #0]
 8001da0:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <SystemClock_Config+0xd4>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001da8:	603b      	str	r3, [r7, #0]
 8001daa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001dac:	2301      	movs	r3, #1
 8001dae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001db0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001db4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001db6:	2302      	movs	r3, #2
 8001db8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001dbe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001dc0:	2304      	movs	r3, #4
 8001dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001dc4:	23a0      	movs	r3, #160	; 0xa0
 8001dc6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dd4:	f107 031c 	add.w	r3, r7, #28
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f003 ffdf 	bl	8005d9c <HAL_RCC_OscConfig>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001de4:	f000 fa26 	bl	8002234 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001de8:	230f      	movs	r3, #15
 8001dea:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dec:	2302      	movs	r3, #2
 8001dee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001df0:	2300      	movs	r3, #0
 8001df2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001df4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001df8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001dfa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001dfe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e00:	f107 0308 	add.w	r3, r7, #8
 8001e04:	2105      	movs	r1, #5
 8001e06:	4618      	mov	r0, r3
 8001e08:	f003 fc7e 	bl	8005708 <HAL_RCC_ClockConfig>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001e12:	f000 fa0f 	bl	8002234 <Error_Handler>
  }
}
 8001e16:	bf00      	nop
 8001e18:	3750      	adds	r7, #80	; 0x50
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40007000 	.word	0x40007000

08001e28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08c      	sub	sp, #48	; 0x30
 8001e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e2e:	f107 0320 	add.w	r3, r7, #32
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	605a      	str	r2, [r3, #4]
 8001e38:	609a      	str	r2, [r3, #8]
 8001e3a:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001e3c:	463b      	mov	r3, r7
 8001e3e:	2220      	movs	r2, #32
 8001e40:	2100      	movs	r1, #0
 8001e42:	4618      	mov	r0, r3
 8001e44:	f005 f960 	bl	8007108 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001e48:	4b45      	ldr	r3, [pc, #276]	; (8001f60 <MX_ADC1_Init+0x138>)
 8001e4a:	4a46      	ldr	r2, [pc, #280]	; (8001f64 <MX_ADC1_Init+0x13c>)
 8001e4c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001e4e:	4b44      	ldr	r3, [pc, #272]	; (8001f60 <MX_ADC1_Init+0x138>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e54:	4b42      	ldr	r3, [pc, #264]	; (8001f60 <MX_ADC1_Init+0x138>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001e5a:	4b41      	ldr	r3, [pc, #260]	; (8001f60 <MX_ADC1_Init+0x138>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001e60:	4b3f      	ldr	r3, [pc, #252]	; (8001f60 <MX_ADC1_Init+0x138>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e66:	4b3e      	ldr	r3, [pc, #248]	; (8001f60 <MX_ADC1_Init+0x138>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e6e:	4b3c      	ldr	r3, [pc, #240]	; (8001f60 <MX_ADC1_Init+0x138>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e74:	4b3a      	ldr	r3, [pc, #232]	; (8001f60 <MX_ADC1_Init+0x138>)
 8001e76:	4a3c      	ldr	r2, [pc, #240]	; (8001f68 <MX_ADC1_Init+0x140>)
 8001e78:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e7a:	4b39      	ldr	r3, [pc, #228]	; (8001f60 <MX_ADC1_Init+0x138>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001e80:	4b37      	ldr	r3, [pc, #220]	; (8001f60 <MX_ADC1_Init+0x138>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e86:	4b36      	ldr	r3, [pc, #216]	; (8001f60 <MX_ADC1_Init+0x138>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e8e:	4b34      	ldr	r3, [pc, #208]	; (8001f60 <MX_ADC1_Init+0x138>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e94:	4832      	ldr	r0, [pc, #200]	; (8001f60 <MX_ADC1_Init+0x138>)
 8001e96:	f000 fcab 	bl	80027f0 <HAL_ADC_Init>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8001ea0:	f000 f9c8 	bl	8002234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001ea4:	2307      	movs	r3, #7
 8001ea6:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001eac:	2304      	movs	r3, #4
 8001eae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001eb0:	f107 0320 	add.w	r3, r7, #32
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	482a      	ldr	r0, [pc, #168]	; (8001f60 <MX_ADC1_Init+0x138>)
 8001eb8:	f000 fcde 	bl	8002878 <HAL_ADC_ConfigChannel>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8001ec2:	f000 f9b7 	bl	8002234 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 8001ec6:	2307      	movs	r3, #7
 8001ec8:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 4;
 8001ece:	2304      	movs	r3, #4
 8001ed0:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001ed2:	2304      	movs	r3, #4
 8001ed4:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 8001ed6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001eda:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T5_TRGO;
 8001edc:	f44f 2330 	mov.w	r3, #720896	; 0xb0000
 8001ee0:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001eee:	463b      	mov	r3, r7
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	481b      	ldr	r0, [pc, #108]	; (8001f60 <MX_ADC1_Init+0x138>)
 8001ef4:	f000 fff0 	bl	8002ed8 <HAL_ADCEx_InjectedConfigChannel>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8001efe:	f000 f999 	bl	8002234 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8001f02:	2301      	movs	r3, #1
 8001f04:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 8001f06:	2302      	movs	r3, #2
 8001f08:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001f0a:	463b      	mov	r3, r7
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4814      	ldr	r0, [pc, #80]	; (8001f60 <MX_ADC1_Init+0x138>)
 8001f10:	f000 ffe2 	bl	8002ed8 <HAL_ADCEx_InjectedConfigChannel>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8001f1a:	f000 f98b 	bl	8002234 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 8001f22:	2303      	movs	r3, #3
 8001f24:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001f26:	463b      	mov	r3, r7
 8001f28:	4619      	mov	r1, r3
 8001f2a:	480d      	ldr	r0, [pc, #52]	; (8001f60 <MX_ADC1_Init+0x138>)
 8001f2c:	f000 ffd4 	bl	8002ed8 <HAL_ADCEx_InjectedConfigChannel>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8001f36:	f000 f97d 	bl	8002234 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 8001f3a:	230b      	movs	r3, #11
 8001f3c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 4;
 8001f3e:	2304      	movs	r3, #4
 8001f40:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001f42:	463b      	mov	r3, r7
 8001f44:	4619      	mov	r1, r3
 8001f46:	4806      	ldr	r0, [pc, #24]	; (8001f60 <MX_ADC1_Init+0x138>)
 8001f48:	f000 ffc6 	bl	8002ed8 <HAL_ADCEx_InjectedConfigChannel>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_ADC1_Init+0x12e>
  {
    Error_Handler();
 8001f52:	f000 f96f 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f56:	bf00      	nop
 8001f58:	3730      	adds	r7, #48	; 0x30
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	2000017c 	.word	0x2000017c
 8001f64:	40012000 	.word	0x40012000
 8001f68:	0f000001 	.word	0x0f000001

08001f6c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001f70:	4b17      	ldr	r3, [pc, #92]	; (8001fd0 <MX_CAN1_Init+0x64>)
 8001f72:	4a18      	ldr	r2, [pc, #96]	; (8001fd4 <MX_CAN1_Init+0x68>)
 8001f74:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001f76:	4b16      	ldr	r3, [pc, #88]	; (8001fd0 <MX_CAN1_Init+0x64>)
 8001f78:	2210      	movs	r2, #16
 8001f7a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001f7c:	4b14      	ldr	r3, [pc, #80]	; (8001fd0 <MX_CAN1_Init+0x64>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001f82:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <MX_CAN1_Init+0x64>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001f88:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <MX_CAN1_Init+0x64>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001f8e:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <MX_CAN1_Init+0x64>)
 8001f90:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001f94:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001f96:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <MX_CAN1_Init+0x64>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <MX_CAN1_Init+0x64>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <MX_CAN1_Init+0x64>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001fa8:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <MX_CAN1_Init+0x64>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001fae:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <MX_CAN1_Init+0x64>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001fb4:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <MX_CAN1_Init+0x64>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001fba:	4805      	ldr	r0, [pc, #20]	; (8001fd0 <MX_CAN1_Init+0x64>)
 8001fbc:	f001 f926 	bl	800320c <HAL_CAN_Init>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001fc6:	f000 f935 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	200001c4 	.word	0x200001c4
 8001fd4:	40006400 	.word	0x40006400

08001fd8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fdc:	4b12      	ldr	r3, [pc, #72]	; (8002028 <MX_I2C1_Init+0x50>)
 8001fde:	4a13      	ldr	r2, [pc, #76]	; (800202c <MX_I2C1_Init+0x54>)
 8001fe0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001fe2:	4b11      	ldr	r3, [pc, #68]	; (8002028 <MX_I2C1_Init+0x50>)
 8001fe4:	4a12      	ldr	r2, [pc, #72]	; (8002030 <MX_I2C1_Init+0x58>)
 8001fe6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fe8:	4b0f      	ldr	r3, [pc, #60]	; (8002028 <MX_I2C1_Init+0x50>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001fee:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <MX_I2C1_Init+0x50>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <MX_I2C1_Init+0x50>)
 8001ff6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ffa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ffc:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <MX_I2C1_Init+0x50>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002002:	4b09      	ldr	r3, [pc, #36]	; (8002028 <MX_I2C1_Init+0x50>)
 8002004:	2200      	movs	r2, #0
 8002006:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002008:	4b07      	ldr	r3, [pc, #28]	; (8002028 <MX_I2C1_Init+0x50>)
 800200a:	2200      	movs	r2, #0
 800200c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800200e:	4b06      	ldr	r3, [pc, #24]	; (8002028 <MX_I2C1_Init+0x50>)
 8002010:	2200      	movs	r2, #0
 8002012:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002014:	4804      	ldr	r0, [pc, #16]	; (8002028 <MX_I2C1_Init+0x50>)
 8002016:	f002 fa51 	bl	80044bc <HAL_I2C_Init>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002020:	f000 f908 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002024:	bf00      	nop
 8002026:	bd80      	pop	{r7, pc}
 8002028:	200001ec 	.word	0x200001ec
 800202c:	40005400 	.word	0x40005400
 8002030:	000186a0 	.word	0x000186a0

08002034 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800203a:	f107 0308 	add.w	r3, r7, #8
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	605a      	str	r2, [r3, #4]
 8002044:	609a      	str	r2, [r3, #8]
 8002046:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002048:	463b      	mov	r3, r7
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002050:	4b1d      	ldr	r3, [pc, #116]	; (80020c8 <MX_TIM5_Init+0x94>)
 8002052:	4a1e      	ldr	r2, [pc, #120]	; (80020cc <MX_TIM5_Init+0x98>)
 8002054:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002056:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <MX_TIM5_Init+0x94>)
 8002058:	2200      	movs	r2, #0
 800205a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800205c:	4b1a      	ldr	r3, [pc, #104]	; (80020c8 <MX_TIM5_Init+0x94>)
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002062:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <MX_TIM5_Init+0x94>)
 8002064:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002068:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800206a:	4b17      	ldr	r3, [pc, #92]	; (80020c8 <MX_TIM5_Init+0x94>)
 800206c:	2200      	movs	r2, #0
 800206e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002070:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <MX_TIM5_Init+0x94>)
 8002072:	2200      	movs	r2, #0
 8002074:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002076:	4814      	ldr	r0, [pc, #80]	; (80020c8 <MX_TIM5_Init+0x94>)
 8002078:	f004 f92e 	bl	80062d8 <HAL_TIM_Base_Init>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002082:	f000 f8d7 	bl	8002234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002086:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800208a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800208c:	f107 0308 	add.w	r3, r7, #8
 8002090:	4619      	mov	r1, r3
 8002092:	480d      	ldr	r0, [pc, #52]	; (80020c8 <MX_TIM5_Init+0x94>)
 8002094:	f004 f9d8 	bl	8006448 <HAL_TIM_ConfigClockSource>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800209e:	f000 f8c9 	bl	8002234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020a2:	2300      	movs	r3, #0
 80020a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80020aa:	463b      	mov	r3, r7
 80020ac:	4619      	mov	r1, r3
 80020ae:	4806      	ldr	r0, [pc, #24]	; (80020c8 <MX_TIM5_Init+0x94>)
 80020b0:	f004 fbcc 	bl	800684c <HAL_TIMEx_MasterConfigSynchronization>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80020ba:	f000 f8bb 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80020be:	bf00      	nop
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000240 	.word	0x20000240
 80020cc:	40000c00 	.word	0x40000c00

080020d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020d4:	4b11      	ldr	r3, [pc, #68]	; (800211c <MX_USART2_UART_Init+0x4c>)
 80020d6:	4a12      	ldr	r2, [pc, #72]	; (8002120 <MX_USART2_UART_Init+0x50>)
 80020d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020da:	4b10      	ldr	r3, [pc, #64]	; (800211c <MX_USART2_UART_Init+0x4c>)
 80020dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020e2:	4b0e      	ldr	r3, [pc, #56]	; (800211c <MX_USART2_UART_Init+0x4c>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020e8:	4b0c      	ldr	r3, [pc, #48]	; (800211c <MX_USART2_UART_Init+0x4c>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80020ee:	4b0b      	ldr	r3, [pc, #44]	; (800211c <MX_USART2_UART_Init+0x4c>)
 80020f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020f4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 80020f6:	4b09      	ldr	r3, [pc, #36]	; (800211c <MX_USART2_UART_Init+0x4c>)
 80020f8:	2208      	movs	r2, #8
 80020fa:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020fc:	4b07      	ldr	r3, [pc, #28]	; (800211c <MX_USART2_UART_Init+0x4c>)
 80020fe:	2200      	movs	r2, #0
 8002100:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002102:	4b06      	ldr	r3, [pc, #24]	; (800211c <MX_USART2_UART_Init+0x4c>)
 8002104:	2200      	movs	r2, #0
 8002106:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002108:	4804      	ldr	r0, [pc, #16]	; (800211c <MX_USART2_UART_Init+0x4c>)
 800210a:	f004 fc1b 	bl	8006944 <HAL_UART_Init>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8002114:	f000 f88e 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002118:	bf00      	nop
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20000288 	.word	0x20000288
 8002120:	40004400 	.word	0x40004400

08002124 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b08a      	sub	sp, #40	; 0x28
 8002128:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212a:	f107 0314 	add.w	r3, r7, #20
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	605a      	str	r2, [r3, #4]
 8002134:	609a      	str	r2, [r3, #8]
 8002136:	60da      	str	r2, [r3, #12]
 8002138:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	4b39      	ldr	r3, [pc, #228]	; (8002224 <MX_GPIO_Init+0x100>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	4a38      	ldr	r2, [pc, #224]	; (8002224 <MX_GPIO_Init+0x100>)
 8002144:	f043 0304 	orr.w	r3, r3, #4
 8002148:	6313      	str	r3, [r2, #48]	; 0x30
 800214a:	4b36      	ldr	r3, [pc, #216]	; (8002224 <MX_GPIO_Init+0x100>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	f003 0304 	and.w	r3, r3, #4
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	4b32      	ldr	r3, [pc, #200]	; (8002224 <MX_GPIO_Init+0x100>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	4a31      	ldr	r2, [pc, #196]	; (8002224 <MX_GPIO_Init+0x100>)
 8002160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002164:	6313      	str	r3, [r2, #48]	; 0x30
 8002166:	4b2f      	ldr	r3, [pc, #188]	; (8002224 <MX_GPIO_Init+0x100>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	4b2b      	ldr	r3, [pc, #172]	; (8002224 <MX_GPIO_Init+0x100>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	4a2a      	ldr	r2, [pc, #168]	; (8002224 <MX_GPIO_Init+0x100>)
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	6313      	str	r3, [r2, #48]	; 0x30
 8002182:	4b28      	ldr	r3, [pc, #160]	; (8002224 <MX_GPIO_Init+0x100>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	607b      	str	r3, [r7, #4]
 8002192:	4b24      	ldr	r3, [pc, #144]	; (8002224 <MX_GPIO_Init+0x100>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	4a23      	ldr	r2, [pc, #140]	; (8002224 <MX_GPIO_Init+0x100>)
 8002198:	f043 0302 	orr.w	r3, r3, #2
 800219c:	6313      	str	r3, [r2, #48]	; 0x30
 800219e:	4b21      	ldr	r3, [pc, #132]	; (8002224 <MX_GPIO_Init+0x100>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	607b      	str	r3, [r7, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80021aa:	2200      	movs	r2, #0
 80021ac:	2120      	movs	r1, #32
 80021ae:	481e      	ldr	r0, [pc, #120]	; (8002228 <MX_GPIO_Init+0x104>)
 80021b0:	f002 f96a 	bl	8004488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80021b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80021c4:	f107 0314 	add.w	r3, r7, #20
 80021c8:	4619      	mov	r1, r3
 80021ca:	4818      	ldr	r0, [pc, #96]	; (800222c <MX_GPIO_Init+0x108>)
 80021cc:	f001 ffc8 	bl	8004160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021d0:	2304      	movs	r3, #4
 80021d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021d4:	2300      	movs	r3, #0
 80021d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	4619      	mov	r1, r3
 80021e2:	4812      	ldr	r0, [pc, #72]	; (800222c <MX_GPIO_Init+0x108>)
 80021e4:	f001 ffbc 	bl	8004160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80021e8:	2320      	movs	r3, #32
 80021ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ec:	2301      	movs	r3, #1
 80021ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f4:	2300      	movs	r3, #0
 80021f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	4619      	mov	r1, r3
 80021fe:	480a      	ldr	r0, [pc, #40]	; (8002228 <MX_GPIO_Init+0x104>)
 8002200:	f001 ffae 	bl	8004160 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002204:	23c0      	movs	r3, #192	; 0xc0
 8002206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002208:	2300      	movs	r3, #0
 800220a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002210:	f107 0314 	add.w	r3, r7, #20
 8002214:	4619      	mov	r1, r3
 8002216:	4806      	ldr	r0, [pc, #24]	; (8002230 <MX_GPIO_Init+0x10c>)
 8002218:	f001 ffa2 	bl	8004160 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800221c:	bf00      	nop
 800221e:	3728      	adds	r7, #40	; 0x28
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40023800 	.word	0x40023800
 8002228:	40020000 	.word	0x40020000
 800222c:	40020800 	.word	0x40020800
 8002230:	40020400 	.word	0x40020400

08002234 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002238:	b672      	cpsid	i
}
 800223a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800223c:	e7fe      	b.n	800223c <Error_Handler+0x8>
	...

08002240 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	607b      	str	r3, [r7, #4]
 800224a:	4b10      	ldr	r3, [pc, #64]	; (800228c <HAL_MspInit+0x4c>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224e:	4a0f      	ldr	r2, [pc, #60]	; (800228c <HAL_MspInit+0x4c>)
 8002250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002254:	6453      	str	r3, [r2, #68]	; 0x44
 8002256:	4b0d      	ldr	r3, [pc, #52]	; (800228c <HAL_MspInit+0x4c>)
 8002258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800225e:	607b      	str	r3, [r7, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	603b      	str	r3, [r7, #0]
 8002266:	4b09      	ldr	r3, [pc, #36]	; (800228c <HAL_MspInit+0x4c>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	4a08      	ldr	r2, [pc, #32]	; (800228c <HAL_MspInit+0x4c>)
 800226c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002270:	6413      	str	r3, [r2, #64]	; 0x40
 8002272:	4b06      	ldr	r3, [pc, #24]	; (800228c <HAL_MspInit+0x4c>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227a:	603b      	str	r3, [r7, #0]
 800227c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	40023800 	.word	0x40023800

08002290 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08a      	sub	sp, #40	; 0x28
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 0314 	add.w	r3, r7, #20
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a24      	ldr	r2, [pc, #144]	; (8002340 <HAL_ADC_MspInit+0xb0>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d141      	bne.n	8002336 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	613b      	str	r3, [r7, #16]
 80022b6:	4b23      	ldr	r3, [pc, #140]	; (8002344 <HAL_ADC_MspInit+0xb4>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ba:	4a22      	ldr	r2, [pc, #136]	; (8002344 <HAL_ADC_MspInit+0xb4>)
 80022bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c0:	6453      	str	r3, [r2, #68]	; 0x44
 80022c2:	4b20      	ldr	r3, [pc, #128]	; (8002344 <HAL_ADC_MspInit+0xb4>)
 80022c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ca:	613b      	str	r3, [r7, #16]
 80022cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	4b1c      	ldr	r3, [pc, #112]	; (8002344 <HAL_ADC_MspInit+0xb4>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	4a1b      	ldr	r2, [pc, #108]	; (8002344 <HAL_ADC_MspInit+0xb4>)
 80022d8:	f043 0304 	orr.w	r3, r3, #4
 80022dc:	6313      	str	r3, [r2, #48]	; 0x30
 80022de:	4b19      	ldr	r3, [pc, #100]	; (8002344 <HAL_ADC_MspInit+0xb4>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	f003 0304 	and.w	r3, r3, #4
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	4b15      	ldr	r3, [pc, #84]	; (8002344 <HAL_ADC_MspInit+0xb4>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	4a14      	ldr	r2, [pc, #80]	; (8002344 <HAL_ADC_MspInit+0xb4>)
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	6313      	str	r3, [r2, #48]	; 0x30
 80022fa:	4b12      	ldr	r3, [pc, #72]	; (8002344 <HAL_ADC_MspInit+0xb4>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	60bb      	str	r3, [r7, #8]
 8002304:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8002306:	230a      	movs	r3, #10
 8002308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800230a:	2303      	movs	r3, #3
 800230c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002312:	f107 0314 	add.w	r3, r7, #20
 8002316:	4619      	mov	r1, r3
 8002318:	480b      	ldr	r0, [pc, #44]	; (8002348 <HAL_ADC_MspInit+0xb8>)
 800231a:	f001 ff21 	bl	8004160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800231e:	23c3      	movs	r3, #195	; 0xc3
 8002320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002322:	2303      	movs	r3, #3
 8002324:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232a:	f107 0314 	add.w	r3, r7, #20
 800232e:	4619      	mov	r1, r3
 8002330:	4806      	ldr	r0, [pc, #24]	; (800234c <HAL_ADC_MspInit+0xbc>)
 8002332:	f001 ff15 	bl	8004160 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002336:	bf00      	nop
 8002338:	3728      	adds	r7, #40	; 0x28
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40012000 	.word	0x40012000
 8002344:	40023800 	.word	0x40023800
 8002348:	40020800 	.word	0x40020800
 800234c:	40020000 	.word	0x40020000

08002350 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b08a      	sub	sp, #40	; 0x28
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002358:	f107 0314 	add.w	r3, r7, #20
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a21      	ldr	r2, [pc, #132]	; (80023f4 <HAL_CAN_MspInit+0xa4>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d13c      	bne.n	80023ec <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	613b      	str	r3, [r7, #16]
 8002376:	4b20      	ldr	r3, [pc, #128]	; (80023f8 <HAL_CAN_MspInit+0xa8>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	4a1f      	ldr	r2, [pc, #124]	; (80023f8 <HAL_CAN_MspInit+0xa8>)
 800237c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002380:	6413      	str	r3, [r2, #64]	; 0x40
 8002382:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <HAL_CAN_MspInit+0xa8>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238a:	613b      	str	r3, [r7, #16]
 800238c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <HAL_CAN_MspInit+0xa8>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	4a18      	ldr	r2, [pc, #96]	; (80023f8 <HAL_CAN_MspInit+0xa8>)
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	6313      	str	r3, [r2, #48]	; 0x30
 800239e:	4b16      	ldr	r3, [pc, #88]	; (80023f8 <HAL_CAN_MspInit+0xa8>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80023aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80023ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b0:	2302      	movs	r3, #2
 80023b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b8:	2303      	movs	r3, #3
 80023ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80023bc:	2309      	movs	r3, #9
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c0:	f107 0314 	add.w	r3, r7, #20
 80023c4:	4619      	mov	r1, r3
 80023c6:	480d      	ldr	r0, [pc, #52]	; (80023fc <HAL_CAN_MspInit+0xac>)
 80023c8:	f001 feca 	bl	8004160 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80023cc:	2200      	movs	r2, #0
 80023ce:	2100      	movs	r1, #0
 80023d0:	2014      	movs	r0, #20
 80023d2:	f001 fe8e 	bl	80040f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80023d6:	2014      	movs	r0, #20
 80023d8:	f001 fea7 	bl	800412a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80023dc:	2200      	movs	r2, #0
 80023de:	2100      	movs	r1, #0
 80023e0:	2015      	movs	r0, #21
 80023e2:	f001 fe86 	bl	80040f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80023e6:	2015      	movs	r0, #21
 80023e8:	f001 fe9f 	bl	800412a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80023ec:	bf00      	nop
 80023ee:	3728      	adds	r7, #40	; 0x28
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40006400 	.word	0x40006400
 80023f8:	40023800 	.word	0x40023800
 80023fc:	40020000 	.word	0x40020000

08002400 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08a      	sub	sp, #40	; 0x28
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002408:	f107 0314 	add.w	r3, r7, #20
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	609a      	str	r2, [r3, #8]
 8002414:	60da      	str	r2, [r3, #12]
 8002416:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a19      	ldr	r2, [pc, #100]	; (8002484 <HAL_I2C_MspInit+0x84>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d12c      	bne.n	800247c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]
 8002426:	4b18      	ldr	r3, [pc, #96]	; (8002488 <HAL_I2C_MspInit+0x88>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	4a17      	ldr	r2, [pc, #92]	; (8002488 <HAL_I2C_MspInit+0x88>)
 800242c:	f043 0302 	orr.w	r3, r3, #2
 8002430:	6313      	str	r3, [r2, #48]	; 0x30
 8002432:	4b15      	ldr	r3, [pc, #84]	; (8002488 <HAL_I2C_MspInit+0x88>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800243e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002444:	2312      	movs	r3, #18
 8002446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	2300      	movs	r3, #0
 800244a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800244c:	2303      	movs	r3, #3
 800244e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002450:	2304      	movs	r3, #4
 8002452:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002454:	f107 0314 	add.w	r3, r7, #20
 8002458:	4619      	mov	r1, r3
 800245a:	480c      	ldr	r0, [pc, #48]	; (800248c <HAL_I2C_MspInit+0x8c>)
 800245c:	f001 fe80 	bl	8004160 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002460:	2300      	movs	r3, #0
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	4b08      	ldr	r3, [pc, #32]	; (8002488 <HAL_I2C_MspInit+0x88>)
 8002466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002468:	4a07      	ldr	r2, [pc, #28]	; (8002488 <HAL_I2C_MspInit+0x88>)
 800246a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800246e:	6413      	str	r3, [r2, #64]	; 0x40
 8002470:	4b05      	ldr	r3, [pc, #20]	; (8002488 <HAL_I2C_MspInit+0x88>)
 8002472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800247c:	bf00      	nop
 800247e:	3728      	adds	r7, #40	; 0x28
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40005400 	.word	0x40005400
 8002488:	40023800 	.word	0x40023800
 800248c:	40020400 	.word	0x40020400

08002490 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a0b      	ldr	r2, [pc, #44]	; (80024cc <HAL_TIM_Base_MspInit+0x3c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d10d      	bne.n	80024be <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	4b0a      	ldr	r3, [pc, #40]	; (80024d0 <HAL_TIM_Base_MspInit+0x40>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	4a09      	ldr	r2, [pc, #36]	; (80024d0 <HAL_TIM_Base_MspInit+0x40>)
 80024ac:	f043 0308 	orr.w	r3, r3, #8
 80024b0:	6413      	str	r3, [r2, #64]	; 0x40
 80024b2:	4b07      	ldr	r3, [pc, #28]	; (80024d0 <HAL_TIM_Base_MspInit+0x40>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80024be:	bf00      	nop
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	40000c00 	.word	0x40000c00
 80024d0:	40023800 	.word	0x40023800

080024d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08a      	sub	sp, #40	; 0x28
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024dc:	f107 0314 	add.w	r3, r7, #20
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	60da      	str	r2, [r3, #12]
 80024ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a19      	ldr	r2, [pc, #100]	; (8002558 <HAL_UART_MspInit+0x84>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d12b      	bne.n	800254e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	613b      	str	r3, [r7, #16]
 80024fa:	4b18      	ldr	r3, [pc, #96]	; (800255c <HAL_UART_MspInit+0x88>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	4a17      	ldr	r2, [pc, #92]	; (800255c <HAL_UART_MspInit+0x88>)
 8002500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002504:	6413      	str	r3, [r2, #64]	; 0x40
 8002506:	4b15      	ldr	r3, [pc, #84]	; (800255c <HAL_UART_MspInit+0x88>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250e:	613b      	str	r3, [r7, #16]
 8002510:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	60fb      	str	r3, [r7, #12]
 8002516:	4b11      	ldr	r3, [pc, #68]	; (800255c <HAL_UART_MspInit+0x88>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	4a10      	ldr	r2, [pc, #64]	; (800255c <HAL_UART_MspInit+0x88>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	6313      	str	r3, [r2, #48]	; 0x30
 8002522:	4b0e      	ldr	r3, [pc, #56]	; (800255c <HAL_UART_MspInit+0x88>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800252e:	230c      	movs	r3, #12
 8002530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002532:	2302      	movs	r3, #2
 8002534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002536:	2300      	movs	r3, #0
 8002538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253a:	2303      	movs	r3, #3
 800253c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800253e:	2307      	movs	r3, #7
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002542:	f107 0314 	add.w	r3, r7, #20
 8002546:	4619      	mov	r1, r3
 8002548:	4805      	ldr	r0, [pc, #20]	; (8002560 <HAL_UART_MspInit+0x8c>)
 800254a:	f001 fe09 	bl	8004160 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800254e:	bf00      	nop
 8002550:	3728      	adds	r7, #40	; 0x28
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40004400 	.word	0x40004400
 800255c:	40023800 	.word	0x40023800
 8002560:	40020000 	.word	0x40020000

08002564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002568:	e7fe      	b.n	8002568 <NMI_Handler+0x4>

0800256a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800256a:	b480      	push	{r7}
 800256c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800256e:	e7fe      	b.n	800256e <HardFault_Handler+0x4>

08002570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002574:	e7fe      	b.n	8002574 <MemManage_Handler+0x4>

08002576 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002576:	b480      	push	{r7}
 8002578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800257a:	e7fe      	b.n	800257a <BusFault_Handler+0x4>

0800257c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002580:	e7fe      	b.n	8002580 <UsageFault_Handler+0x4>

08002582 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002582:	b480      	push	{r7}
 8002584:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002586:	bf00      	nop
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800259e:	b480      	push	{r7}
 80025a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025a2:	bf00      	nop
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025b0:	f000 f8da 	bl	8002768 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025b4:	bf00      	nop
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80025bc:	4802      	ldr	r0, [pc, #8]	; (80025c8 <CAN1_RX0_IRQHandler+0x10>)
 80025be:	f001 fa8d 	bl	8003adc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	200001c4 	.word	0x200001c4

080025cc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80025d0:	4802      	ldr	r0, [pc, #8]	; (80025dc <CAN1_RX1_IRQHandler+0x10>)
 80025d2:	f001 fa83 	bl	8003adc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	200001c4 	.word	0x200001c4

080025e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025e8:	4a14      	ldr	r2, [pc, #80]	; (800263c <_sbrk+0x5c>)
 80025ea:	4b15      	ldr	r3, [pc, #84]	; (8002640 <_sbrk+0x60>)
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025f4:	4b13      	ldr	r3, [pc, #76]	; (8002644 <_sbrk+0x64>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d102      	bne.n	8002602 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025fc:	4b11      	ldr	r3, [pc, #68]	; (8002644 <_sbrk+0x64>)
 80025fe:	4a12      	ldr	r2, [pc, #72]	; (8002648 <_sbrk+0x68>)
 8002600:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002602:	4b10      	ldr	r3, [pc, #64]	; (8002644 <_sbrk+0x64>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4413      	add	r3, r2
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	429a      	cmp	r2, r3
 800260e:	d207      	bcs.n	8002620 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002610:	f004 fd82 	bl	8007118 <__errno>
 8002614:	4603      	mov	r3, r0
 8002616:	220c      	movs	r2, #12
 8002618:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800261a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800261e:	e009      	b.n	8002634 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002620:	4b08      	ldr	r3, [pc, #32]	; (8002644 <_sbrk+0x64>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002626:	4b07      	ldr	r3, [pc, #28]	; (8002644 <_sbrk+0x64>)
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4413      	add	r3, r2
 800262e:	4a05      	ldr	r2, [pc, #20]	; (8002644 <_sbrk+0x64>)
 8002630:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002632:	68fb      	ldr	r3, [r7, #12]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	20020000 	.word	0x20020000
 8002640:	00000400 	.word	0x00000400
 8002644:	200002cc 	.word	0x200002cc
 8002648:	20000420 	.word	0x20000420

0800264c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002650:	4b06      	ldr	r3, [pc, #24]	; (800266c <SystemInit+0x20>)
 8002652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002656:	4a05      	ldr	r2, [pc, #20]	; (800266c <SystemInit+0x20>)
 8002658:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800265c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002660:	bf00      	nop
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	e000ed00 	.word	0xe000ed00

08002670 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002670:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002674:	480d      	ldr	r0, [pc, #52]	; (80026ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002676:	490e      	ldr	r1, [pc, #56]	; (80026b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002678:	4a0e      	ldr	r2, [pc, #56]	; (80026b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800267a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800267c:	e002      	b.n	8002684 <LoopCopyDataInit>

0800267e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800267e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002682:	3304      	adds	r3, #4

08002684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002688:	d3f9      	bcc.n	800267e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800268a:	4a0b      	ldr	r2, [pc, #44]	; (80026b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800268c:	4c0b      	ldr	r4, [pc, #44]	; (80026bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800268e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002690:	e001      	b.n	8002696 <LoopFillZerobss>

08002692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002694:	3204      	adds	r2, #4

08002696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002698:	d3fb      	bcc.n	8002692 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800269a:	f7ff ffd7 	bl	800264c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800269e:	f004 fd41 	bl	8007124 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026a2:	f7ff fb3d 	bl	8001d20 <main>
  bx  lr    
 80026a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026b0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80026b4:	08007ad4 	.word	0x08007ad4
  ldr r2, =_sbss
 80026b8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80026bc:	2000041c 	.word	0x2000041c

080026c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026c0:	e7fe      	b.n	80026c0 <ADC_IRQHandler>
	...

080026c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026c8:	4b0e      	ldr	r3, [pc, #56]	; (8002704 <HAL_Init+0x40>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a0d      	ldr	r2, [pc, #52]	; (8002704 <HAL_Init+0x40>)
 80026ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026d4:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <HAL_Init+0x40>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a0a      	ldr	r2, [pc, #40]	; (8002704 <HAL_Init+0x40>)
 80026da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026e0:	4b08      	ldr	r3, [pc, #32]	; (8002704 <HAL_Init+0x40>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a07      	ldr	r2, [pc, #28]	; (8002704 <HAL_Init+0x40>)
 80026e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026ec:	2003      	movs	r0, #3
 80026ee:	f001 fcf5 	bl	80040dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026f2:	200f      	movs	r0, #15
 80026f4:	f000 f808 	bl	8002708 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026f8:	f7ff fda2 	bl	8002240 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40023c00 	.word	0x40023c00

08002708 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002710:	4b12      	ldr	r3, [pc, #72]	; (800275c <HAL_InitTick+0x54>)
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	4b12      	ldr	r3, [pc, #72]	; (8002760 <HAL_InitTick+0x58>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	4619      	mov	r1, r3
 800271a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800271e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002722:	fbb2 f3f3 	udiv	r3, r2, r3
 8002726:	4618      	mov	r0, r3
 8002728:	f001 fd0d 	bl	8004146 <HAL_SYSTICK_Config>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e00e      	b.n	8002754 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b0f      	cmp	r3, #15
 800273a:	d80a      	bhi.n	8002752 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800273c:	2200      	movs	r2, #0
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002744:	f001 fcd5 	bl	80040f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002748:	4a06      	ldr	r2, [pc, #24]	; (8002764 <HAL_InitTick+0x5c>)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800274e:	2300      	movs	r3, #0
 8002750:	e000      	b.n	8002754 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
}
 8002754:	4618      	mov	r0, r3
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	20000010 	.word	0x20000010
 8002760:	20000018 	.word	0x20000018
 8002764:	20000014 	.word	0x20000014

08002768 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800276c:	4b06      	ldr	r3, [pc, #24]	; (8002788 <HAL_IncTick+0x20>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	461a      	mov	r2, r3
 8002772:	4b06      	ldr	r3, [pc, #24]	; (800278c <HAL_IncTick+0x24>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4413      	add	r3, r2
 8002778:	4a04      	ldr	r2, [pc, #16]	; (800278c <HAL_IncTick+0x24>)
 800277a:	6013      	str	r3, [r2, #0]
}
 800277c:	bf00      	nop
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	20000018 	.word	0x20000018
 800278c:	200002d0 	.word	0x200002d0

08002790 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  return uwTick;
 8002794:	4b03      	ldr	r3, [pc, #12]	; (80027a4 <HAL_GetTick+0x14>)
 8002796:	681b      	ldr	r3, [r3, #0]
}
 8002798:	4618      	mov	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	200002d0 	.word	0x200002d0

080027a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027b0:	f7ff ffee 	bl	8002790 <HAL_GetTick>
 80027b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027c0:	d005      	beq.n	80027ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027c2:	4b0a      	ldr	r3, [pc, #40]	; (80027ec <HAL_Delay+0x44>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	461a      	mov	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4413      	add	r3, r2
 80027cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027ce:	bf00      	nop
 80027d0:	f7ff ffde 	bl	8002790 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d8f7      	bhi.n	80027d0 <HAL_Delay+0x28>
  {
  }
}
 80027e0:	bf00      	nop
 80027e2:	bf00      	nop
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20000018 	.word	0x20000018

080027f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027f8:	2300      	movs	r3, #0
 80027fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e033      	b.n	800286e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	2b00      	cmp	r3, #0
 800280c:	d109      	bne.n	8002822 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7ff fd3e 	bl	8002290 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f003 0310 	and.w	r3, r3, #16
 800282a:	2b00      	cmp	r3, #0
 800282c:	d118      	bne.n	8002860 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002836:	f023 0302 	bic.w	r3, r3, #2
 800283a:	f043 0202 	orr.w	r2, r3, #2
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f94a 	bl	8002adc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	f023 0303 	bic.w	r3, r3, #3
 8002856:	f043 0201 	orr.w	r2, r3, #1
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	641a      	str	r2, [r3, #64]	; 0x40
 800285e:	e001      	b.n	8002864 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800286c:	7bfb      	ldrb	r3, [r7, #15]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002882:	2300      	movs	r3, #0
 8002884:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800288c:	2b01      	cmp	r3, #1
 800288e:	d101      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x1c>
 8002890:	2302      	movs	r3, #2
 8002892:	e113      	b.n	8002abc <HAL_ADC_ConfigChannel+0x244>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2b09      	cmp	r3, #9
 80028a2:	d925      	bls.n	80028f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68d9      	ldr	r1, [r3, #12]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	461a      	mov	r2, r3
 80028b2:	4613      	mov	r3, r2
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	4413      	add	r3, r2
 80028b8:	3b1e      	subs	r3, #30
 80028ba:	2207      	movs	r2, #7
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43da      	mvns	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	400a      	ands	r2, r1
 80028c8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68d9      	ldr	r1, [r3, #12]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	b29b      	uxth	r3, r3
 80028da:	4618      	mov	r0, r3
 80028dc:	4603      	mov	r3, r0
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	4403      	add	r3, r0
 80028e2:	3b1e      	subs	r3, #30
 80028e4:	409a      	lsls	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	60da      	str	r2, [r3, #12]
 80028ee:	e022      	b.n	8002936 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6919      	ldr	r1, [r3, #16]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	461a      	mov	r2, r3
 80028fe:	4613      	mov	r3, r2
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	4413      	add	r3, r2
 8002904:	2207      	movs	r2, #7
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43da      	mvns	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	400a      	ands	r2, r1
 8002912:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6919      	ldr	r1, [r3, #16]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	b29b      	uxth	r3, r3
 8002924:	4618      	mov	r0, r3
 8002926:	4603      	mov	r3, r0
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	4403      	add	r3, r0
 800292c:	409a      	lsls	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b06      	cmp	r3, #6
 800293c:	d824      	bhi.n	8002988 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	3b05      	subs	r3, #5
 8002950:	221f      	movs	r2, #31
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43da      	mvns	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	400a      	ands	r2, r1
 800295e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	b29b      	uxth	r3, r3
 800296c:	4618      	mov	r0, r3
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	4613      	mov	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	3b05      	subs	r3, #5
 800297a:	fa00 f203 	lsl.w	r2, r0, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	430a      	orrs	r2, r1
 8002984:	635a      	str	r2, [r3, #52]	; 0x34
 8002986:	e04c      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b0c      	cmp	r3, #12
 800298e:	d824      	bhi.n	80029da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	4613      	mov	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	3b23      	subs	r3, #35	; 0x23
 80029a2:	221f      	movs	r2, #31
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	43da      	mvns	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	400a      	ands	r2, r1
 80029b0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	b29b      	uxth	r3, r3
 80029be:	4618      	mov	r0, r3
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	3b23      	subs	r3, #35	; 0x23
 80029cc:	fa00 f203 	lsl.w	r2, r0, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	631a      	str	r2, [r3, #48]	; 0x30
 80029d8:	e023      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	4613      	mov	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	3b41      	subs	r3, #65	; 0x41
 80029ec:	221f      	movs	r2, #31
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43da      	mvns	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	400a      	ands	r2, r1
 80029fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	4618      	mov	r0, r3
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	3b41      	subs	r3, #65	; 0x41
 8002a16:	fa00 f203 	lsl.w	r2, r0, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a22:	4b29      	ldr	r3, [pc, #164]	; (8002ac8 <HAL_ADC_ConfigChannel+0x250>)
 8002a24:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a28      	ldr	r2, [pc, #160]	; (8002acc <HAL_ADC_ConfigChannel+0x254>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d10f      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x1d8>
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2b12      	cmp	r3, #18
 8002a36:	d10b      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a1d      	ldr	r2, [pc, #116]	; (8002acc <HAL_ADC_ConfigChannel+0x254>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d12b      	bne.n	8002ab2 <HAL_ADC_ConfigChannel+0x23a>
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a1c      	ldr	r2, [pc, #112]	; (8002ad0 <HAL_ADC_ConfigChannel+0x258>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d003      	beq.n	8002a6c <HAL_ADC_ConfigChannel+0x1f4>
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2b11      	cmp	r3, #17
 8002a6a:	d122      	bne.n	8002ab2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a11      	ldr	r2, [pc, #68]	; (8002ad0 <HAL_ADC_ConfigChannel+0x258>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d111      	bne.n	8002ab2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a8e:	4b11      	ldr	r3, [pc, #68]	; (8002ad4 <HAL_ADC_ConfigChannel+0x25c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a11      	ldr	r2, [pc, #68]	; (8002ad8 <HAL_ADC_ConfigChannel+0x260>)
 8002a94:	fba2 2303 	umull	r2, r3, r2, r3
 8002a98:	0c9a      	lsrs	r2, r3, #18
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002aa4:	e002      	b.n	8002aac <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f9      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	40012300 	.word	0x40012300
 8002acc:	40012000 	.word	0x40012000
 8002ad0:	10000012 	.word	0x10000012
 8002ad4:	20000010 	.word	0x20000010
 8002ad8:	431bde83 	.word	0x431bde83

08002adc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ae4:	4b79      	ldr	r3, [pc, #484]	; (8002ccc <ADC_Init+0x1f0>)
 8002ae6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	431a      	orrs	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6859      	ldr	r1, [r3, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	021a      	lsls	r2, r3, #8
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002b34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6859      	ldr	r1, [r3, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689a      	ldr	r2, [r3, #8]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6899      	ldr	r1, [r3, #8]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6e:	4a58      	ldr	r2, [pc, #352]	; (8002cd0 <ADC_Init+0x1f4>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d022      	beq.n	8002bba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689a      	ldr	r2, [r3, #8]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b82:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6899      	ldr	r1, [r3, #8]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ba4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6899      	ldr	r1, [r3, #8]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	609a      	str	r2, [r3, #8]
 8002bb8:	e00f      	b.n	8002bda <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bd8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 0202 	bic.w	r2, r2, #2
 8002be8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6899      	ldr	r1, [r3, #8]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	7e1b      	ldrb	r3, [r3, #24]
 8002bf4:	005a      	lsls	r2, r3, #1
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d01b      	beq.n	8002c40 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c16:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6859      	ldr	r1, [r3, #4]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	3b01      	subs	r3, #1
 8002c34:	035a      	lsls	r2, r3, #13
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	605a      	str	r2, [r3, #4]
 8002c3e:	e007      	b.n	8002c50 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002c5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	051a      	lsls	r2, r3, #20
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6899      	ldr	r1, [r3, #8]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c92:	025a      	lsls	r2, r3, #9
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689a      	ldr	r2, [r3, #8]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002caa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6899      	ldr	r1, [r3, #8]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	029a      	lsls	r2, r3, #10
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	609a      	str	r2, [r3, #8]
}
 8002cc0:	bf00      	nop
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	40012300 	.word	0x40012300
 8002cd0:	0f000001 	.word	0x0f000001

08002cd4 <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b087      	sub	sp, #28
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d101      	bne.n	8002cf6 <HAL_ADCEx_InjectedStart+0x22>
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	e0aa      	b.n	8002e4c <HAL_ADCEx_InjectedStart+0x178>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d018      	beq.n	8002d3e <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f042 0201 	orr.w	r2, r2, #1
 8002d1a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d1c:	4b4e      	ldr	r3, [pc, #312]	; (8002e58 <HAL_ADCEx_InjectedStart+0x184>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a4e      	ldr	r2, [pc, #312]	; (8002e5c <HAL_ADCEx_InjectedStart+0x188>)
 8002d22:	fba2 2303 	umull	r2, r3, r2, r3
 8002d26:	0c9a      	lsrs	r2, r3, #18
 8002d28:	4613      	mov	r3, r2
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	4413      	add	r3, r2
 8002d2e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002d30:	e002      	b.n	8002d38 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	3b01      	subs	r3, #1
 8002d36:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f9      	bne.n	8002d32 <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d172      	bne.n	8002e32 <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d54:	f023 0301 	bic.w	r3, r3, #1
 8002d58:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d102      	bne.n	8002d72 <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f06f 0204 	mvn.w	r2, #4
 8002d82:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d84:	4b36      	ldr	r3, [pc, #216]	; (8002e60 <HAL_ADCEx_InjectedStart+0x18c>)
 8002d86:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f003 031f 	and.w	r3, r3, #31
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d124      	bne.n	8002dde <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	bf0c      	ite	eq
 8002da2:	2301      	moveq	r3, #1
 8002da4:	2300      	movne	r3, #0
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	bf0c      	ite	eq
 8002db8:	2301      	moveq	r3, #1
 8002dba:	2300      	movne	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d041      	beq.n	8002e4a <HAL_ADCEx_InjectedStart+0x176>
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d03e      	beq.n	8002e4a <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002dda:	609a      	str	r2, [r3, #8]
 8002ddc:	e035      	b.n	8002e4a <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	bf0c      	ite	eq
 8002dec:	2301      	moveq	r3, #1
 8002dee:	2300      	movne	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	bf0c      	ite	eq
 8002e02:	2301      	moveq	r3, #1
 8002e04:	2300      	movne	r3, #0
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a15      	ldr	r2, [pc, #84]	; (8002e64 <HAL_ADCEx_InjectedStart+0x190>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d11a      	bne.n	8002e4a <HAL_ADCEx_InjectedStart+0x176>
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d017      	beq.n	8002e4a <HAL_ADCEx_InjectedStart+0x176>
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d014      	beq.n	8002e4a <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689a      	ldr	r2, [r3, #8]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002e2e:	609a      	str	r2, [r3, #8]
 8002e30:	e00b      	b.n	8002e4a <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f043 0210 	orr.w	r2, r3, #16
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e42:	f043 0201 	orr.w	r2, r3, #1
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	371c      	adds	r7, #28
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	20000010 	.word	0x20000010
 8002e5c:	431bde83 	.word	0x431bde83
 8002e60:	40012300 	.word	0x40012300
 8002e64:	40012000 	.word	0x40012000

08002e68 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f06f 0204 	mvn.w	r2, #4
 8002e7e:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	3b01      	subs	r3, #1
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d81f      	bhi.n	8002ec8 <HAL_ADCEx_InjectedGetValue+0x60>
 8002e88:	a201      	add	r2, pc, #4	; (adr r2, 8002e90 <HAL_ADCEx_InjectedGetValue+0x28>)
 8002e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8e:	bf00      	nop
 8002e90:	08002ebf 	.word	0x08002ebf
 8002e94:	08002eb5 	.word	0x08002eb5
 8002e98:	08002eab 	.word	0x08002eab
 8002e9c:	08002ea1 	.word	0x08002ea1
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ea6:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8002ea8:	e00f      	b.n	8002eca <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb0:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8002eb2:	e00a      	b.n	8002eca <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	60fb      	str	r3, [r7, #12]
    }
    break;
 8002ebc:	e005      	b.n	8002eca <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec4:	60fb      	str	r3, [r7, #12]
    }
    break;
 8002ec6:	e000      	b.n	8002eca <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8002ec8:	bf00      	nop
  }
  return tmp;
 8002eca:	68fb      	ldr	r3, [r7, #12]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8002eec:	2302      	movs	r3, #2
 8002eee:	e17e      	b.n	80031ee <HAL_ADCEx_InjectedConfigChannel+0x316>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2b09      	cmp	r3, #9
 8002efe:	d925      	bls.n	8002f4c <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68d9      	ldr	r1, [r3, #12]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	4613      	mov	r3, r2
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	4413      	add	r3, r2
 8002f14:	3b1e      	subs	r3, #30
 8002f16:	2207      	movs	r2, #7
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	43da      	mvns	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	400a      	ands	r2, r1
 8002f24:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68d9      	ldr	r1, [r3, #12]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	4618      	mov	r0, r3
 8002f38:	4603      	mov	r3, r0
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	4403      	add	r3, r0
 8002f3e:	3b1e      	subs	r3, #30
 8002f40:	409a      	lsls	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	60da      	str	r2, [r3, #12]
 8002f4a:	e022      	b.n	8002f92 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6919      	ldr	r1, [r3, #16]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	461a      	mov	r2, r3
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	4413      	add	r3, r2
 8002f60:	2207      	movs	r2, #7
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43da      	mvns	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	400a      	ands	r2, r1
 8002f6e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6919      	ldr	r1, [r3, #16]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	689a      	ldr	r2, [r3, #8]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	4618      	mov	r0, r3
 8002f82:	4603      	mov	r3, r0
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	4403      	add	r3, r0
 8002f88:	409a      	lsls	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002fa0:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	3b01      	subs	r3, #1
 8002fae:	051a      	lsls	r2, r3, #20
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	3303      	adds	r3, #3
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	221f      	movs	r2, #31
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	43da      	mvns	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	400a      	ands	r2, r1
 8002fe8:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	b2db      	uxtb	r3, r3
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	b2db      	uxtb	r3, r3
 8003008:	3303      	adds	r3, #3
 800300a:	b2db      	uxtb	r3, r3
 800300c:	461a      	mov	r2, r3
 800300e:	4613      	mov	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4413      	add	r3, r2
 8003014:	fa00 f203 	lsl.w	r2, r0, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	430a      	orrs	r2, r1
 800301e:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	4a75      	ldr	r2, [pc, #468]	; (80031fc <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d022      	beq.n	8003070 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8003038:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6899      	ldr	r1, [r3, #8]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	699a      	ldr	r2, [r3, #24]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800305a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6899      	ldr	r1, [r3, #8]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	69da      	ldr	r2, [r3, #28]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	609a      	str	r2, [r3, #8]
 800306e:	e00f      	b.n	8003090 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800307e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689a      	ldr	r2, [r3, #8]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800308e:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	7d5b      	ldrb	r3, [r3, #21]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d008      	beq.n	80030aa <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030a6:	605a      	str	r2, [r3, #4]
 80030a8:	e007      	b.n	80030ba <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030b8:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	7d1b      	ldrb	r3, [r3, #20]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d008      	beq.n	80030d4 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030d0:	605a      	str	r2, [r3, #4]
 80030d2:	e007      	b.n	80030e4 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030e2:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	2b03      	cmp	r3, #3
 80030ea:	d02e      	beq.n	800314a <HAL_ADCEx_InjectedConfigChannel+0x272>
 80030ec:	2b03      	cmp	r3, #3
 80030ee:	d840      	bhi.n	8003172 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d002      	beq.n	80030fa <HAL_ADCEx_InjectedConfigChannel+0x222>
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d014      	beq.n	8003122 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 80030f8:	e03b      	b.n	8003172 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6812      	ldr	r2, [r2, #0]
 8003104:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003108:	f023 030f 	bic.w	r3, r3, #15
 800310c:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6959      	ldr	r1, [r3, #20]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	68da      	ldr	r2, [r3, #12]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	615a      	str	r2, [r3, #20]
      break;
 8003120:	e03b      	b.n	800319a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6812      	ldr	r2, [r2, #0]
 800312c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003130:	f023 030f 	bic.w	r3, r3, #15
 8003134:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6999      	ldr	r1, [r3, #24]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	619a      	str	r2, [r3, #24]
      break;
 8003148:	e027      	b.n	800319a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6812      	ldr	r2, [r2, #0]
 8003154:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003158:	f023 030f 	bic.w	r3, r3, #15
 800315c:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	69d9      	ldr	r1, [r3, #28]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	61da      	str	r2, [r3, #28]
      break;
 8003170:	e013      	b.n	800319a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003180:	f023 030f 	bic.w	r3, r3, #15
 8003184:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6a19      	ldr	r1, [r3, #32]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	68da      	ldr	r2, [r3, #12]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	621a      	str	r2, [r3, #32]
      break;
 8003198:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800319a:	4b19      	ldr	r3, [pc, #100]	; (8003200 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 800319c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a18      	ldr	r2, [pc, #96]	; (8003204 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d109      	bne.n	80031bc <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2b12      	cmp	r3, #18
 80031ae:	d105      	bne.n	80031bc <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a10      	ldr	r2, [pc, #64]	; (8003204 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d10e      	bne.n	80031e4 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a0f      	ldr	r2, [pc, #60]	; (8003208 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d003      	beq.n	80031d8 <HAL_ADCEx_InjectedConfigChannel+0x300>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b11      	cmp	r3, #17
 80031d6:	d105      	bne.n	80031e4 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	000f0001 	.word	0x000f0001
 8003200:	40012300 	.word	0x40012300
 8003204:	40012000 	.word	0x40012000
 8003208:	10000012 	.word	0x10000012

0800320c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e0ed      	b.n	80033fa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d102      	bne.n	8003230 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7ff f890 	bl	8002350 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0201 	orr.w	r2, r2, #1
 800323e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003240:	f7ff faa6 	bl	8002790 <HAL_GetTick>
 8003244:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003246:	e012      	b.n	800326e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003248:	f7ff faa2 	bl	8002790 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b0a      	cmp	r3, #10
 8003254:	d90b      	bls.n	800326e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2205      	movs	r2, #5
 8003266:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e0c5      	b.n	80033fa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0e5      	beq.n	8003248 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0202 	bic.w	r2, r2, #2
 800328a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800328c:	f7ff fa80 	bl	8002790 <HAL_GetTick>
 8003290:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003292:	e012      	b.n	80032ba <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003294:	f7ff fa7c 	bl	8002790 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b0a      	cmp	r3, #10
 80032a0:	d90b      	bls.n	80032ba <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2205      	movs	r2, #5
 80032b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e09f      	b.n	80033fa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1e5      	bne.n	8003294 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	7e1b      	ldrb	r3, [r3, #24]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d108      	bne.n	80032e2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	e007      	b.n	80032f2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	7e5b      	ldrb	r3, [r3, #25]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d108      	bne.n	800330c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	e007      	b.n	800331c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800331a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	7e9b      	ldrb	r3, [r3, #26]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d108      	bne.n	8003336 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0220 	orr.w	r2, r2, #32
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	e007      	b.n	8003346 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 0220 	bic.w	r2, r2, #32
 8003344:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	7edb      	ldrb	r3, [r3, #27]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d108      	bne.n	8003360 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0210 	bic.w	r2, r2, #16
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	e007      	b.n	8003370 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 0210 	orr.w	r2, r2, #16
 800336e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	7f1b      	ldrb	r3, [r3, #28]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d108      	bne.n	800338a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0208 	orr.w	r2, r2, #8
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	e007      	b.n	800339a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0208 	bic.w	r2, r2, #8
 8003398:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	7f5b      	ldrb	r3, [r3, #29]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d108      	bne.n	80033b4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f042 0204 	orr.w	r2, r2, #4
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	e007      	b.n	80033c4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 0204 	bic.w	r2, r2, #4
 80033c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	431a      	orrs	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	431a      	orrs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	ea42 0103 	orr.w	r1, r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	1e5a      	subs	r2, r3, #1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
	...

08003404 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003404:	b480      	push	{r7}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 3020 	ldrb.w	r3, [r3, #32]
 800341a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800341c:	7cfb      	ldrb	r3, [r7, #19]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d003      	beq.n	800342a <HAL_CAN_ConfigFilter+0x26>
 8003422:	7cfb      	ldrb	r3, [r7, #19]
 8003424:	2b02      	cmp	r3, #2
 8003426:	f040 80be 	bne.w	80035a6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800342a:	4b65      	ldr	r3, [pc, #404]	; (80035c0 <HAL_CAN_ConfigFilter+0x1bc>)
 800342c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003434:	f043 0201 	orr.w	r2, r3, #1
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003444:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	021b      	lsls	r3, r3, #8
 800345a:	431a      	orrs	r2, r3
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	f003 031f 	and.w	r3, r3, #31
 800346a:	2201      	movs	r2, #1
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	43db      	mvns	r3, r3
 800347c:	401a      	ands	r2, r3
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	69db      	ldr	r3, [r3, #28]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d123      	bne.n	80034d4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	43db      	mvns	r3, r3
 8003496:	401a      	ands	r2, r3
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80034ae:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	3248      	adds	r2, #72	; 0x48
 80034b4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80034c8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80034ca:	6979      	ldr	r1, [r7, #20]
 80034cc:	3348      	adds	r3, #72	; 0x48
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	440b      	add	r3, r1
 80034d2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	69db      	ldr	r3, [r3, #28]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d122      	bne.n	8003522 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	431a      	orrs	r2, r3
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80034fc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	3248      	adds	r2, #72	; 0x48
 8003502:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003516:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003518:	6979      	ldr	r1, [r7, #20]
 800351a:	3348      	adds	r3, #72	; 0x48
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	440b      	add	r3, r1
 8003520:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d109      	bne.n	800353e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	43db      	mvns	r3, r3
 8003534:	401a      	ands	r2, r3
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800353c:	e007      	b.n	800354e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	431a      	orrs	r2, r3
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d109      	bne.n	800356a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	43db      	mvns	r3, r3
 8003560:	401a      	ands	r2, r3
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003568:	e007      	b.n	800357a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	431a      	orrs	r2, r3
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d107      	bne.n	8003592 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	431a      	orrs	r2, r3
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003598:	f023 0201 	bic.w	r2, r3, #1
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	e006      	b.n	80035b4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
  }
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	371c      	adds	r7, #28
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	40006400 	.word	0x40006400

080035c4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d12e      	bne.n	8003636 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2202      	movs	r2, #2
 80035dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 0201 	bic.w	r2, r2, #1
 80035ee:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80035f0:	f7ff f8ce 	bl	8002790 <HAL_GetTick>
 80035f4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80035f6:	e012      	b.n	800361e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80035f8:	f7ff f8ca 	bl	8002790 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b0a      	cmp	r3, #10
 8003604:	d90b      	bls.n	800361e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2205      	movs	r2, #5
 8003616:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e012      	b.n	8003644 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1e5      	bne.n	80035f8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	e006      	b.n	8003644 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
  }
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800364c:	b480      	push	{r7}
 800364e:	b089      	sub	sp, #36	; 0x24
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
 8003658:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003660:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800366a:	7ffb      	ldrb	r3, [r7, #31]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d003      	beq.n	8003678 <HAL_CAN_AddTxMessage+0x2c>
 8003670:	7ffb      	ldrb	r3, [r7, #31]
 8003672:	2b02      	cmp	r3, #2
 8003674:	f040 80b8 	bne.w	80037e8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10a      	bne.n	8003698 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003688:	2b00      	cmp	r3, #0
 800368a:	d105      	bne.n	8003698 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 80a0 	beq.w	80037d8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	0e1b      	lsrs	r3, r3, #24
 800369c:	f003 0303 	and.w	r3, r3, #3
 80036a0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d907      	bls.n	80036b8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e09e      	b.n	80037f6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80036b8:	2201      	movs	r2, #1
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	409a      	lsls	r2, r3
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10d      	bne.n	80036e6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80036d4:	68f9      	ldr	r1, [r7, #12]
 80036d6:	6809      	ldr	r1, [r1, #0]
 80036d8:	431a      	orrs	r2, r3
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	3318      	adds	r3, #24
 80036de:	011b      	lsls	r3, r3, #4
 80036e0:	440b      	add	r3, r1
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	e00f      	b.n	8003706 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80036f0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80036f6:	68f9      	ldr	r1, [r7, #12]
 80036f8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80036fa:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	3318      	adds	r3, #24
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	440b      	add	r3, r1
 8003704:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6819      	ldr	r1, [r3, #0]
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	691a      	ldr	r2, [r3, #16]
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	3318      	adds	r3, #24
 8003712:	011b      	lsls	r3, r3, #4
 8003714:	440b      	add	r3, r1
 8003716:	3304      	adds	r3, #4
 8003718:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	7d1b      	ldrb	r3, [r3, #20]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d111      	bne.n	8003746 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	3318      	adds	r3, #24
 800372a:	011b      	lsls	r3, r3, #4
 800372c:	4413      	add	r3, r2
 800372e:	3304      	adds	r3, #4
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	6811      	ldr	r1, [r2, #0]
 8003736:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	3318      	adds	r3, #24
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	440b      	add	r3, r1
 8003742:	3304      	adds	r3, #4
 8003744:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	3307      	adds	r3, #7
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	061a      	lsls	r2, r3, #24
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	3306      	adds	r3, #6
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	041b      	lsls	r3, r3, #16
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3305      	adds	r3, #5
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	021b      	lsls	r3, r3, #8
 8003760:	4313      	orrs	r3, r2
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	3204      	adds	r2, #4
 8003766:	7812      	ldrb	r2, [r2, #0]
 8003768:	4610      	mov	r0, r2
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	6811      	ldr	r1, [r2, #0]
 800376e:	ea43 0200 	orr.w	r2, r3, r0
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	011b      	lsls	r3, r3, #4
 8003776:	440b      	add	r3, r1
 8003778:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800377c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3303      	adds	r3, #3
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	061a      	lsls	r2, r3, #24
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	3302      	adds	r3, #2
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	041b      	lsls	r3, r3, #16
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3301      	adds	r3, #1
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	021b      	lsls	r3, r3, #8
 8003798:	4313      	orrs	r3, r2
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	7812      	ldrb	r2, [r2, #0]
 800379e:	4610      	mov	r0, r2
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	6811      	ldr	r1, [r2, #0]
 80037a4:	ea43 0200 	orr.w	r2, r3, r0
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	440b      	add	r3, r1
 80037ae:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80037b2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	3318      	adds	r3, #24
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	4413      	add	r3, r2
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	6811      	ldr	r1, [r2, #0]
 80037c6:	f043 0201 	orr.w	r2, r3, #1
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	3318      	adds	r3, #24
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	440b      	add	r3, r1
 80037d2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80037d4:	2300      	movs	r3, #0
 80037d6:	e00e      	b.n	80037f6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e006      	b.n	80037f6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
  }
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3724      	adds	r7, #36	; 0x24
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8003802:	b480      	push	{r7}
 8003804:	b085      	sub	sp, #20
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800380a:	2300      	movs	r3, #0
 800380c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003814:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003816:	7afb      	ldrb	r3, [r7, #11]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d002      	beq.n	8003822 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800381c:	7afb      	ldrb	r3, [r7, #11]
 800381e:	2b02      	cmp	r3, #2
 8003820:	d11d      	bne.n	800385e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d002      	beq.n	8003836 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	3301      	adds	r3, #1
 8003834:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d002      	beq.n	800384a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	3301      	adds	r3, #1
 8003848:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d002      	beq.n	800385e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	3301      	adds	r3, #1
 800385c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800385e:	68fb      	ldr	r3, [r7, #12]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3714      	adds	r7, #20
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
 8003878:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003880:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003882:	7dfb      	ldrb	r3, [r7, #23]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d003      	beq.n	8003890 <HAL_CAN_GetRxMessage+0x24>
 8003888:	7dfb      	ldrb	r3, [r7, #23]
 800388a:	2b02      	cmp	r3, #2
 800388c:	f040 80f3 	bne.w	8003a76 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10e      	bne.n	80038b4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f003 0303 	and.w	r3, r3, #3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d116      	bne.n	80038d2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e0e7      	b.n	8003a84 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d107      	bne.n	80038d2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e0d8      	b.n	8003a84 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	331b      	adds	r3, #27
 80038da:	011b      	lsls	r3, r3, #4
 80038dc:	4413      	add	r3, r2
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0204 	and.w	r2, r3, #4
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10c      	bne.n	800390a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	331b      	adds	r3, #27
 80038f8:	011b      	lsls	r3, r3, #4
 80038fa:	4413      	add	r3, r2
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	0d5b      	lsrs	r3, r3, #21
 8003900:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	e00b      	b.n	8003922 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	331b      	adds	r3, #27
 8003912:	011b      	lsls	r3, r3, #4
 8003914:	4413      	add	r3, r2
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	08db      	lsrs	r3, r3, #3
 800391a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	331b      	adds	r3, #27
 800392a:	011b      	lsls	r3, r3, #4
 800392c:	4413      	add	r3, r2
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0202 	and.w	r2, r3, #2
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	331b      	adds	r3, #27
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	4413      	add	r3, r2
 8003944:	3304      	adds	r3, #4
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 020f 	and.w	r2, r3, #15
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	331b      	adds	r3, #27
 8003958:	011b      	lsls	r3, r3, #4
 800395a:	4413      	add	r3, r2
 800395c:	3304      	adds	r3, #4
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	0a1b      	lsrs	r3, r3, #8
 8003962:	b2da      	uxtb	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	331b      	adds	r3, #27
 8003970:	011b      	lsls	r3, r3, #4
 8003972:	4413      	add	r3, r2
 8003974:	3304      	adds	r3, #4
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	0c1b      	lsrs	r3, r3, #16
 800397a:	b29a      	uxth	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	4413      	add	r3, r2
 800398a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	b2da      	uxtb	r2, r3
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	011b      	lsls	r3, r3, #4
 800399e:	4413      	add	r3, r2
 80039a0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	0a1a      	lsrs	r2, r3, #8
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	3301      	adds	r3, #1
 80039ac:	b2d2      	uxtb	r2, r2
 80039ae:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	4413      	add	r3, r2
 80039ba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	0c1a      	lsrs	r2, r3, #16
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	3302      	adds	r3, #2
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	011b      	lsls	r3, r3, #4
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	0e1a      	lsrs	r2, r3, #24
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	3303      	adds	r3, #3
 80039e0:	b2d2      	uxtb	r2, r2
 80039e2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	011b      	lsls	r3, r3, #4
 80039ec:	4413      	add	r3, r2
 80039ee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	3304      	adds	r3, #4
 80039f8:	b2d2      	uxtb	r2, r2
 80039fa:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	0a1a      	lsrs	r2, r3, #8
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	3305      	adds	r3, #5
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	011b      	lsls	r3, r3, #4
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	0c1a      	lsrs	r2, r3, #16
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	3306      	adds	r3, #6
 8003a2c:	b2d2      	uxtb	r2, r2
 8003a2e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	4413      	add	r3, r2
 8003a3a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	0e1a      	lsrs	r2, r3, #24
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	3307      	adds	r3, #7
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d108      	bne.n	8003a62 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0220 	orr.w	r2, r2, #32
 8003a5e:	60da      	str	r2, [r3, #12]
 8003a60:	e007      	b.n	8003a72 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	691a      	ldr	r2, [r3, #16]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f042 0220 	orr.w	r2, r2, #32
 8003a70:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003a72:	2300      	movs	r3, #0
 8003a74:	e006      	b.n	8003a84 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
  }
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	371c      	adds	r7, #28
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003aa0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003aa2:	7bfb      	ldrb	r3, [r7, #15]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d002      	beq.n	8003aae <HAL_CAN_ActivateNotification+0x1e>
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d109      	bne.n	8003ac2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6959      	ldr	r1, [r3, #20]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	e006      	b.n	8003ad0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
  }
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b08a      	sub	sp, #40	; 0x28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003b18:	6a3b      	ldr	r3, [r7, #32]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d07c      	beq.n	8003c1c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d023      	beq.n	8003b74 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2201      	movs	r2, #1
 8003b32:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f983 	bl	8003e4a <HAL_CAN_TxMailbox0CompleteCallback>
 8003b44:	e016      	b.n	8003b74 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d004      	beq.n	8003b5a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b52:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24
 8003b58:	e00c      	b.n	8003b74 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	f003 0308 	and.w	r3, r3, #8
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d004      	beq.n	8003b6e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b6c:	e002      	b.n	8003b74 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f989 	bl	8003e86 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d024      	beq.n	8003bc8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b86:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f963 	bl	8003e5e <HAL_CAN_TxMailbox1CompleteCallback>
 8003b98:	e016      	b.n	8003bc8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d004      	beq.n	8003bae <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003baa:	627b      	str	r3, [r7, #36]	; 0x24
 8003bac:	e00c      	b.n	8003bc8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d004      	beq.n	8003bc2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc0:	e002      	b.n	8003bc8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f969 	bl	8003e9a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d024      	beq.n	8003c1c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003bda:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d003      	beq.n	8003bee <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f943 	bl	8003e72 <HAL_CAN_TxMailbox2CompleteCallback>
 8003bec:	e016      	b.n	8003c1c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d004      	beq.n	8003c02 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8003c00:	e00c      	b.n	8003c1c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d004      	beq.n	8003c16 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c12:	627b      	str	r3, [r7, #36]	; 0x24
 8003c14:	e002      	b.n	8003c1c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f949 	bl	8003eae <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00c      	beq.n	8003c40 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f003 0310 	and.w	r3, r3, #16
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d007      	beq.n	8003c40 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c36:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2210      	movs	r2, #16
 8003c3e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	f003 0304 	and.w	r3, r3, #4
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00b      	beq.n	8003c62 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f003 0308 	and.w	r3, r3, #8
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d006      	beq.n	8003c62 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2208      	movs	r2, #8
 8003c5a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f930 	bl	8003ec2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d009      	beq.n	8003c80 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f003 0303 	and.w	r3, r3, #3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7fd f990 	bl	8000fa0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00c      	beq.n	8003ca4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	f003 0310 	and.w	r3, r3, #16
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d007      	beq.n	8003ca4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c9a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2210      	movs	r2, #16
 8003ca2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	f003 0320 	and.w	r3, r3, #32
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00b      	beq.n	8003cc6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f003 0308 	and.w	r3, r3, #8
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d006      	beq.n	8003cc6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2208      	movs	r2, #8
 8003cbe:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 f912 	bl	8003eea <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003cc6:	6a3b      	ldr	r3, [r7, #32]
 8003cc8:	f003 0310 	and.w	r3, r3, #16
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d009      	beq.n	8003ce4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	f003 0303 	and.w	r3, r3, #3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d002      	beq.n	8003ce4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f8f9 	bl	8003ed6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00b      	beq.n	8003d06 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	f003 0310 	and.w	r3, r3, #16
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d006      	beq.n	8003d06 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2210      	movs	r2, #16
 8003cfe:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 f8fc 	bl	8003efe <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00b      	beq.n	8003d28 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	f003 0308 	and.w	r3, r3, #8
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d006      	beq.n	8003d28 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2208      	movs	r2, #8
 8003d20:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f8f5 	bl	8003f12 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003d28:	6a3b      	ldr	r3, [r7, #32]
 8003d2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d07b      	beq.n	8003e2a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	f003 0304 	and.w	r3, r3, #4
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d072      	beq.n	8003e22 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003d3c:	6a3b      	ldr	r3, [r7, #32]
 8003d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d008      	beq.n	8003d58 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d003      	beq.n	8003d58 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	f043 0301 	orr.w	r3, r3, #1
 8003d56:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003d58:	6a3b      	ldr	r3, [r7, #32]
 8003d5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d008      	beq.n	8003d74 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d003      	beq.n	8003d74 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6e:	f043 0302 	orr.w	r3, r3, #2
 8003d72:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d008      	beq.n	8003d90 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	f043 0304 	orr.w	r3, r3, #4
 8003d8e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003d90:	6a3b      	ldr	r3, [r7, #32]
 8003d92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d043      	beq.n	8003e22 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d03e      	beq.n	8003e22 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003daa:	2b60      	cmp	r3, #96	; 0x60
 8003dac:	d02b      	beq.n	8003e06 <HAL_CAN_IRQHandler+0x32a>
 8003dae:	2b60      	cmp	r3, #96	; 0x60
 8003db0:	d82e      	bhi.n	8003e10 <HAL_CAN_IRQHandler+0x334>
 8003db2:	2b50      	cmp	r3, #80	; 0x50
 8003db4:	d022      	beq.n	8003dfc <HAL_CAN_IRQHandler+0x320>
 8003db6:	2b50      	cmp	r3, #80	; 0x50
 8003db8:	d82a      	bhi.n	8003e10 <HAL_CAN_IRQHandler+0x334>
 8003dba:	2b40      	cmp	r3, #64	; 0x40
 8003dbc:	d019      	beq.n	8003df2 <HAL_CAN_IRQHandler+0x316>
 8003dbe:	2b40      	cmp	r3, #64	; 0x40
 8003dc0:	d826      	bhi.n	8003e10 <HAL_CAN_IRQHandler+0x334>
 8003dc2:	2b30      	cmp	r3, #48	; 0x30
 8003dc4:	d010      	beq.n	8003de8 <HAL_CAN_IRQHandler+0x30c>
 8003dc6:	2b30      	cmp	r3, #48	; 0x30
 8003dc8:	d822      	bhi.n	8003e10 <HAL_CAN_IRQHandler+0x334>
 8003dca:	2b10      	cmp	r3, #16
 8003dcc:	d002      	beq.n	8003dd4 <HAL_CAN_IRQHandler+0x2f8>
 8003dce:	2b20      	cmp	r3, #32
 8003dd0:	d005      	beq.n	8003dde <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003dd2:	e01d      	b.n	8003e10 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	f043 0308 	orr.w	r3, r3, #8
 8003dda:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ddc:	e019      	b.n	8003e12 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de0:	f043 0310 	orr.w	r3, r3, #16
 8003de4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003de6:	e014      	b.n	8003e12 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	f043 0320 	orr.w	r3, r3, #32
 8003dee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003df0:	e00f      	b.n	8003e12 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003df8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003dfa:	e00a      	b.n	8003e12 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e02:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e04:	e005      	b.n	8003e12 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e0c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e0e:	e000      	b.n	8003e12 <HAL_CAN_IRQHandler+0x336>
            break;
 8003e10:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	699a      	ldr	r2, [r3, #24]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003e20:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2204      	movs	r2, #4
 8003e28:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d008      	beq.n	8003e42 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 f872 	bl	8003f26 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003e42:	bf00      	nop
 8003e44:	3728      	adds	r7, #40	; 0x28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003e52:	bf00      	nop
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003e66:	bf00      	nop
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b083      	sub	sp, #12
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003e7a:	bf00      	nop
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003e8e:	bf00      	nop
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003ea2:	bf00      	nop
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003eb6:	bf00      	nop
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003eca:	bf00      	nop
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr

08003ed6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b083      	sub	sp, #12
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003ef2:	bf00      	nop
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003f06:	bf00      	nop
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b083      	sub	sp, #12
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003f2e:	bf00      	nop
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
	...

08003f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f4c:	4b0c      	ldr	r3, [pc, #48]	; (8003f80 <__NVIC_SetPriorityGrouping+0x44>)
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f58:	4013      	ands	r3, r2
 8003f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f6e:	4a04      	ldr	r2, [pc, #16]	; (8003f80 <__NVIC_SetPriorityGrouping+0x44>)
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	60d3      	str	r3, [r2, #12]
}
 8003f74:	bf00      	nop
 8003f76:	3714      	adds	r7, #20
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	e000ed00 	.word	0xe000ed00

08003f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f84:	b480      	push	{r7}
 8003f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f88:	4b04      	ldr	r3, [pc, #16]	; (8003f9c <__NVIC_GetPriorityGrouping+0x18>)
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	0a1b      	lsrs	r3, r3, #8
 8003f8e:	f003 0307 	and.w	r3, r3, #7
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr
 8003f9c:	e000ed00 	.word	0xe000ed00

08003fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	db0b      	blt.n	8003fca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fb2:	79fb      	ldrb	r3, [r7, #7]
 8003fb4:	f003 021f 	and.w	r2, r3, #31
 8003fb8:	4907      	ldr	r1, [pc, #28]	; (8003fd8 <__NVIC_EnableIRQ+0x38>)
 8003fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fbe:	095b      	lsrs	r3, r3, #5
 8003fc0:	2001      	movs	r0, #1
 8003fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8003fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	e000e100 	.word	0xe000e100

08003fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	6039      	str	r1, [r7, #0]
 8003fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	db0a      	blt.n	8004006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	b2da      	uxtb	r2, r3
 8003ff4:	490c      	ldr	r1, [pc, #48]	; (8004028 <__NVIC_SetPriority+0x4c>)
 8003ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ffa:	0112      	lsls	r2, r2, #4
 8003ffc:	b2d2      	uxtb	r2, r2
 8003ffe:	440b      	add	r3, r1
 8004000:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004004:	e00a      	b.n	800401c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	b2da      	uxtb	r2, r3
 800400a:	4908      	ldr	r1, [pc, #32]	; (800402c <__NVIC_SetPriority+0x50>)
 800400c:	79fb      	ldrb	r3, [r7, #7]
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	3b04      	subs	r3, #4
 8004014:	0112      	lsls	r2, r2, #4
 8004016:	b2d2      	uxtb	r2, r2
 8004018:	440b      	add	r3, r1
 800401a:	761a      	strb	r2, [r3, #24]
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	e000e100 	.word	0xe000e100
 800402c:	e000ed00 	.word	0xe000ed00

08004030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004030:	b480      	push	{r7}
 8004032:	b089      	sub	sp, #36	; 0x24
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f003 0307 	and.w	r3, r3, #7
 8004042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f1c3 0307 	rsb	r3, r3, #7
 800404a:	2b04      	cmp	r3, #4
 800404c:	bf28      	it	cs
 800404e:	2304      	movcs	r3, #4
 8004050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	3304      	adds	r3, #4
 8004056:	2b06      	cmp	r3, #6
 8004058:	d902      	bls.n	8004060 <NVIC_EncodePriority+0x30>
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	3b03      	subs	r3, #3
 800405e:	e000      	b.n	8004062 <NVIC_EncodePriority+0x32>
 8004060:	2300      	movs	r3, #0
 8004062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004064:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	fa02 f303 	lsl.w	r3, r2, r3
 800406e:	43da      	mvns	r2, r3
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	401a      	ands	r2, r3
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004078:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	fa01 f303 	lsl.w	r3, r1, r3
 8004082:	43d9      	mvns	r1, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004088:	4313      	orrs	r3, r2
         );
}
 800408a:	4618      	mov	r0, r3
 800408c:	3724      	adds	r7, #36	; 0x24
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
	...

08004098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	3b01      	subs	r3, #1
 80040a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040a8:	d301      	bcc.n	80040ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040aa:	2301      	movs	r3, #1
 80040ac:	e00f      	b.n	80040ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040ae:	4a0a      	ldr	r2, [pc, #40]	; (80040d8 <SysTick_Config+0x40>)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	3b01      	subs	r3, #1
 80040b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040b6:	210f      	movs	r1, #15
 80040b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040bc:	f7ff ff8e 	bl	8003fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040c0:	4b05      	ldr	r3, [pc, #20]	; (80040d8 <SysTick_Config+0x40>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040c6:	4b04      	ldr	r3, [pc, #16]	; (80040d8 <SysTick_Config+0x40>)
 80040c8:	2207      	movs	r2, #7
 80040ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	e000e010 	.word	0xe000e010

080040dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7ff ff29 	bl	8003f3c <__NVIC_SetPriorityGrouping>
}
 80040ea:	bf00      	nop
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b086      	sub	sp, #24
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	4603      	mov	r3, r0
 80040fa:	60b9      	str	r1, [r7, #8]
 80040fc:	607a      	str	r2, [r7, #4]
 80040fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004100:	2300      	movs	r3, #0
 8004102:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004104:	f7ff ff3e 	bl	8003f84 <__NVIC_GetPriorityGrouping>
 8004108:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	68b9      	ldr	r1, [r7, #8]
 800410e:	6978      	ldr	r0, [r7, #20]
 8004110:	f7ff ff8e 	bl	8004030 <NVIC_EncodePriority>
 8004114:	4602      	mov	r2, r0
 8004116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800411a:	4611      	mov	r1, r2
 800411c:	4618      	mov	r0, r3
 800411e:	f7ff ff5d 	bl	8003fdc <__NVIC_SetPriority>
}
 8004122:	bf00      	nop
 8004124:	3718      	adds	r7, #24
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b082      	sub	sp, #8
 800412e:	af00      	add	r7, sp, #0
 8004130:	4603      	mov	r3, r0
 8004132:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004138:	4618      	mov	r0, r3
 800413a:	f7ff ff31 	bl	8003fa0 <__NVIC_EnableIRQ>
}
 800413e:	bf00      	nop
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b082      	sub	sp, #8
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7ff ffa2 	bl	8004098 <SysTick_Config>
 8004154:	4603      	mov	r3, r0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
	...

08004160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004160:	b480      	push	{r7}
 8004162:	b089      	sub	sp, #36	; 0x24
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800416a:	2300      	movs	r3, #0
 800416c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800416e:	2300      	movs	r3, #0
 8004170:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004172:	2300      	movs	r3, #0
 8004174:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004176:	2300      	movs	r3, #0
 8004178:	61fb      	str	r3, [r7, #28]
 800417a:	e165      	b.n	8004448 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800417c:	2201      	movs	r2, #1
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	fa02 f303 	lsl.w	r3, r2, r3
 8004184:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	4013      	ands	r3, r2
 800418e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	429a      	cmp	r2, r3
 8004196:	f040 8154 	bne.w	8004442 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f003 0303 	and.w	r3, r3, #3
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d005      	beq.n	80041b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d130      	bne.n	8004214 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	2203      	movs	r2, #3
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	43db      	mvns	r3, r3
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	4013      	ands	r3, r2
 80041c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	68da      	ldr	r2, [r3, #12]
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	fa02 f303 	lsl.w	r3, r2, r3
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	4313      	orrs	r3, r2
 80041da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041e8:	2201      	movs	r2, #1
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	43db      	mvns	r3, r3
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	4013      	ands	r3, r2
 80041f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	091b      	lsrs	r3, r3, #4
 80041fe:	f003 0201 	and.w	r2, r3, #1
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	fa02 f303 	lsl.w	r3, r2, r3
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	4313      	orrs	r3, r2
 800420c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f003 0303 	and.w	r3, r3, #3
 800421c:	2b03      	cmp	r3, #3
 800421e:	d017      	beq.n	8004250 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	2203      	movs	r2, #3
 800422c:	fa02 f303 	lsl.w	r3, r2, r3
 8004230:	43db      	mvns	r3, r3
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	4013      	ands	r3, r2
 8004236:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	fa02 f303 	lsl.w	r3, r2, r3
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	4313      	orrs	r3, r2
 8004248:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f003 0303 	and.w	r3, r3, #3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d123      	bne.n	80042a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	08da      	lsrs	r2, r3, #3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	3208      	adds	r2, #8
 8004264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004268:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	f003 0307 	and.w	r3, r3, #7
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	220f      	movs	r2, #15
 8004274:	fa02 f303 	lsl.w	r3, r2, r3
 8004278:	43db      	mvns	r3, r3
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	4013      	ands	r3, r2
 800427e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	691a      	ldr	r2, [r3, #16]
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f003 0307 	and.w	r3, r3, #7
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	fa02 f303 	lsl.w	r3, r2, r3
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	4313      	orrs	r3, r2
 8004294:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	08da      	lsrs	r2, r3, #3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	3208      	adds	r2, #8
 800429e:	69b9      	ldr	r1, [r7, #24]
 80042a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	2203      	movs	r2, #3
 80042b0:	fa02 f303 	lsl.w	r3, r2, r3
 80042b4:	43db      	mvns	r3, r3
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	4013      	ands	r3, r2
 80042ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f003 0203 	and.w	r2, r3, #3
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	fa02 f303 	lsl.w	r3, r2, r3
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	69ba      	ldr	r2, [r7, #24]
 80042d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 80ae 	beq.w	8004442 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042e6:	2300      	movs	r3, #0
 80042e8:	60fb      	str	r3, [r7, #12]
 80042ea:	4b5d      	ldr	r3, [pc, #372]	; (8004460 <HAL_GPIO_Init+0x300>)
 80042ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ee:	4a5c      	ldr	r2, [pc, #368]	; (8004460 <HAL_GPIO_Init+0x300>)
 80042f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042f4:	6453      	str	r3, [r2, #68]	; 0x44
 80042f6:	4b5a      	ldr	r3, [pc, #360]	; (8004460 <HAL_GPIO_Init+0x300>)
 80042f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042fe:	60fb      	str	r3, [r7, #12]
 8004300:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004302:	4a58      	ldr	r2, [pc, #352]	; (8004464 <HAL_GPIO_Init+0x304>)
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	089b      	lsrs	r3, r3, #2
 8004308:	3302      	adds	r3, #2
 800430a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800430e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	f003 0303 	and.w	r3, r3, #3
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	220f      	movs	r2, #15
 800431a:	fa02 f303 	lsl.w	r3, r2, r3
 800431e:	43db      	mvns	r3, r3
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	4013      	ands	r3, r2
 8004324:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a4f      	ldr	r2, [pc, #316]	; (8004468 <HAL_GPIO_Init+0x308>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d025      	beq.n	800437a <HAL_GPIO_Init+0x21a>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a4e      	ldr	r2, [pc, #312]	; (800446c <HAL_GPIO_Init+0x30c>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d01f      	beq.n	8004376 <HAL_GPIO_Init+0x216>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a4d      	ldr	r2, [pc, #308]	; (8004470 <HAL_GPIO_Init+0x310>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d019      	beq.n	8004372 <HAL_GPIO_Init+0x212>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a4c      	ldr	r2, [pc, #304]	; (8004474 <HAL_GPIO_Init+0x314>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d013      	beq.n	800436e <HAL_GPIO_Init+0x20e>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a4b      	ldr	r2, [pc, #300]	; (8004478 <HAL_GPIO_Init+0x318>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d00d      	beq.n	800436a <HAL_GPIO_Init+0x20a>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a4a      	ldr	r2, [pc, #296]	; (800447c <HAL_GPIO_Init+0x31c>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d007      	beq.n	8004366 <HAL_GPIO_Init+0x206>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a49      	ldr	r2, [pc, #292]	; (8004480 <HAL_GPIO_Init+0x320>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d101      	bne.n	8004362 <HAL_GPIO_Init+0x202>
 800435e:	2306      	movs	r3, #6
 8004360:	e00c      	b.n	800437c <HAL_GPIO_Init+0x21c>
 8004362:	2307      	movs	r3, #7
 8004364:	e00a      	b.n	800437c <HAL_GPIO_Init+0x21c>
 8004366:	2305      	movs	r3, #5
 8004368:	e008      	b.n	800437c <HAL_GPIO_Init+0x21c>
 800436a:	2304      	movs	r3, #4
 800436c:	e006      	b.n	800437c <HAL_GPIO_Init+0x21c>
 800436e:	2303      	movs	r3, #3
 8004370:	e004      	b.n	800437c <HAL_GPIO_Init+0x21c>
 8004372:	2302      	movs	r3, #2
 8004374:	e002      	b.n	800437c <HAL_GPIO_Init+0x21c>
 8004376:	2301      	movs	r3, #1
 8004378:	e000      	b.n	800437c <HAL_GPIO_Init+0x21c>
 800437a:	2300      	movs	r3, #0
 800437c:	69fa      	ldr	r2, [r7, #28]
 800437e:	f002 0203 	and.w	r2, r2, #3
 8004382:	0092      	lsls	r2, r2, #2
 8004384:	4093      	lsls	r3, r2
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	4313      	orrs	r3, r2
 800438a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800438c:	4935      	ldr	r1, [pc, #212]	; (8004464 <HAL_GPIO_Init+0x304>)
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	089b      	lsrs	r3, r3, #2
 8004392:	3302      	adds	r3, #2
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800439a:	4b3a      	ldr	r3, [pc, #232]	; (8004484 <HAL_GPIO_Init+0x324>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	43db      	mvns	r3, r3
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	4013      	ands	r3, r2
 80043a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80043b6:	69ba      	ldr	r2, [r7, #24]
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043be:	4a31      	ldr	r2, [pc, #196]	; (8004484 <HAL_GPIO_Init+0x324>)
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043c4:	4b2f      	ldr	r3, [pc, #188]	; (8004484 <HAL_GPIO_Init+0x324>)
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	43db      	mvns	r3, r3
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	4013      	ands	r3, r2
 80043d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043e8:	4a26      	ldr	r2, [pc, #152]	; (8004484 <HAL_GPIO_Init+0x324>)
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043ee:	4b25      	ldr	r3, [pc, #148]	; (8004484 <HAL_GPIO_Init+0x324>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	43db      	mvns	r3, r3
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	4013      	ands	r3, r2
 80043fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800440a:	69ba      	ldr	r2, [r7, #24]
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	4313      	orrs	r3, r2
 8004410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004412:	4a1c      	ldr	r2, [pc, #112]	; (8004484 <HAL_GPIO_Init+0x324>)
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004418:	4b1a      	ldr	r3, [pc, #104]	; (8004484 <HAL_GPIO_Init+0x324>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	43db      	mvns	r3, r3
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	4013      	ands	r3, r2
 8004426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d003      	beq.n	800443c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	4313      	orrs	r3, r2
 800443a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800443c:	4a11      	ldr	r2, [pc, #68]	; (8004484 <HAL_GPIO_Init+0x324>)
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	3301      	adds	r3, #1
 8004446:	61fb      	str	r3, [r7, #28]
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	2b0f      	cmp	r3, #15
 800444c:	f67f ae96 	bls.w	800417c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004450:	bf00      	nop
 8004452:	bf00      	nop
 8004454:	3724      	adds	r7, #36	; 0x24
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	40023800 	.word	0x40023800
 8004464:	40013800 	.word	0x40013800
 8004468:	40020000 	.word	0x40020000
 800446c:	40020400 	.word	0x40020400
 8004470:	40020800 	.word	0x40020800
 8004474:	40020c00 	.word	0x40020c00
 8004478:	40021000 	.word	0x40021000
 800447c:	40021400 	.word	0x40021400
 8004480:	40021800 	.word	0x40021800
 8004484:	40013c00 	.word	0x40013c00

08004488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	460b      	mov	r3, r1
 8004492:	807b      	strh	r3, [r7, #2]
 8004494:	4613      	mov	r3, r2
 8004496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004498:	787b      	ldrb	r3, [r7, #1]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800449e:	887a      	ldrh	r2, [r7, #2]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044a4:	e003      	b.n	80044ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044a6:	887b      	ldrh	r3, [r7, #2]
 80044a8:	041a      	lsls	r2, r3, #16
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	619a      	str	r2, [r3, #24]
}
 80044ae:	bf00      	nop
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
	...

080044bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e12b      	b.n	8004726 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d106      	bne.n	80044e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7fd ff8c 	bl	8002400 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2224      	movs	r2, #36	; 0x24
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0201 	bic.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800450e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800451e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004520:	f001 f9e4 	bl	80058ec <HAL_RCC_GetPCLK1Freq>
 8004524:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	4a81      	ldr	r2, [pc, #516]	; (8004730 <HAL_I2C_Init+0x274>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d807      	bhi.n	8004540 <HAL_I2C_Init+0x84>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4a80      	ldr	r2, [pc, #512]	; (8004734 <HAL_I2C_Init+0x278>)
 8004534:	4293      	cmp	r3, r2
 8004536:	bf94      	ite	ls
 8004538:	2301      	movls	r3, #1
 800453a:	2300      	movhi	r3, #0
 800453c:	b2db      	uxtb	r3, r3
 800453e:	e006      	b.n	800454e <HAL_I2C_Init+0x92>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	4a7d      	ldr	r2, [pc, #500]	; (8004738 <HAL_I2C_Init+0x27c>)
 8004544:	4293      	cmp	r3, r2
 8004546:	bf94      	ite	ls
 8004548:	2301      	movls	r3, #1
 800454a:	2300      	movhi	r3, #0
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e0e7      	b.n	8004726 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	4a78      	ldr	r2, [pc, #480]	; (800473c <HAL_I2C_Init+0x280>)
 800455a:	fba2 2303 	umull	r2, r3, r2, r3
 800455e:	0c9b      	lsrs	r3, r3, #18
 8004560:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	430a      	orrs	r2, r1
 8004574:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	4a6a      	ldr	r2, [pc, #424]	; (8004730 <HAL_I2C_Init+0x274>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d802      	bhi.n	8004590 <HAL_I2C_Init+0xd4>
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	3301      	adds	r3, #1
 800458e:	e009      	b.n	80045a4 <HAL_I2C_Init+0xe8>
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004596:	fb02 f303 	mul.w	r3, r2, r3
 800459a:	4a69      	ldr	r2, [pc, #420]	; (8004740 <HAL_I2C_Init+0x284>)
 800459c:	fba2 2303 	umull	r2, r3, r2, r3
 80045a0:	099b      	lsrs	r3, r3, #6
 80045a2:	3301      	adds	r3, #1
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6812      	ldr	r2, [r2, #0]
 80045a8:	430b      	orrs	r3, r1
 80045aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80045b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	495c      	ldr	r1, [pc, #368]	; (8004730 <HAL_I2C_Init+0x274>)
 80045c0:	428b      	cmp	r3, r1
 80045c2:	d819      	bhi.n	80045f8 <HAL_I2C_Init+0x13c>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	1e59      	subs	r1, r3, #1
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80045d2:	1c59      	adds	r1, r3, #1
 80045d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80045d8:	400b      	ands	r3, r1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00a      	beq.n	80045f4 <HAL_I2C_Init+0x138>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	1e59      	subs	r1, r3, #1
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80045ec:	3301      	adds	r3, #1
 80045ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045f2:	e051      	b.n	8004698 <HAL_I2C_Init+0x1dc>
 80045f4:	2304      	movs	r3, #4
 80045f6:	e04f      	b.n	8004698 <HAL_I2C_Init+0x1dc>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d111      	bne.n	8004624 <HAL_I2C_Init+0x168>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	1e58      	subs	r0, r3, #1
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6859      	ldr	r1, [r3, #4]
 8004608:	460b      	mov	r3, r1
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	440b      	add	r3, r1
 800460e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004612:	3301      	adds	r3, #1
 8004614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004618:	2b00      	cmp	r3, #0
 800461a:	bf0c      	ite	eq
 800461c:	2301      	moveq	r3, #1
 800461e:	2300      	movne	r3, #0
 8004620:	b2db      	uxtb	r3, r3
 8004622:	e012      	b.n	800464a <HAL_I2C_Init+0x18e>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	1e58      	subs	r0, r3, #1
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6859      	ldr	r1, [r3, #4]
 800462c:	460b      	mov	r3, r1
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	440b      	add	r3, r1
 8004632:	0099      	lsls	r1, r3, #2
 8004634:	440b      	add	r3, r1
 8004636:	fbb0 f3f3 	udiv	r3, r0, r3
 800463a:	3301      	adds	r3, #1
 800463c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004640:	2b00      	cmp	r3, #0
 8004642:	bf0c      	ite	eq
 8004644:	2301      	moveq	r3, #1
 8004646:	2300      	movne	r3, #0
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <HAL_I2C_Init+0x196>
 800464e:	2301      	movs	r3, #1
 8004650:	e022      	b.n	8004698 <HAL_I2C_Init+0x1dc>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10e      	bne.n	8004678 <HAL_I2C_Init+0x1bc>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	1e58      	subs	r0, r3, #1
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6859      	ldr	r1, [r3, #4]
 8004662:	460b      	mov	r3, r1
 8004664:	005b      	lsls	r3, r3, #1
 8004666:	440b      	add	r3, r1
 8004668:	fbb0 f3f3 	udiv	r3, r0, r3
 800466c:	3301      	adds	r3, #1
 800466e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004676:	e00f      	b.n	8004698 <HAL_I2C_Init+0x1dc>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	1e58      	subs	r0, r3, #1
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6859      	ldr	r1, [r3, #4]
 8004680:	460b      	mov	r3, r1
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	440b      	add	r3, r1
 8004686:	0099      	lsls	r1, r3, #2
 8004688:	440b      	add	r3, r1
 800468a:	fbb0 f3f3 	udiv	r3, r0, r3
 800468e:	3301      	adds	r3, #1
 8004690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004694:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004698:	6879      	ldr	r1, [r7, #4]
 800469a:	6809      	ldr	r1, [r1, #0]
 800469c:	4313      	orrs	r3, r2
 800469e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	69da      	ldr	r2, [r3, #28]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	430a      	orrs	r2, r1
 80046ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80046c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	6911      	ldr	r1, [r2, #16]
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	68d2      	ldr	r2, [r2, #12]
 80046d2:	4311      	orrs	r1, r2
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	6812      	ldr	r2, [r2, #0]
 80046d8:	430b      	orrs	r3, r1
 80046da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	695a      	ldr	r2, [r3, #20]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	431a      	orrs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0201 	orr.w	r2, r2, #1
 8004706:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2220      	movs	r2, #32
 8004712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	000186a0 	.word	0x000186a0
 8004734:	001e847f 	.word	0x001e847f
 8004738:	003d08ff 	.word	0x003d08ff
 800473c:	431bde83 	.word	0x431bde83
 8004740:	10624dd3 	.word	0x10624dd3

08004744 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b088      	sub	sp, #32
 8004748:	af02      	add	r7, sp, #8
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	607a      	str	r2, [r7, #4]
 800474e:	461a      	mov	r2, r3
 8004750:	460b      	mov	r3, r1
 8004752:	817b      	strh	r3, [r7, #10]
 8004754:	4613      	mov	r3, r2
 8004756:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004758:	f7fe f81a 	bl	8002790 <HAL_GetTick>
 800475c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b20      	cmp	r3, #32
 8004768:	f040 80e0 	bne.w	800492c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	9300      	str	r3, [sp, #0]
 8004770:	2319      	movs	r3, #25
 8004772:	2201      	movs	r2, #1
 8004774:	4970      	ldr	r1, [pc, #448]	; (8004938 <HAL_I2C_Master_Transmit+0x1f4>)
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f000 fde8 	bl	800534c <I2C_WaitOnFlagUntilTimeout>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004782:	2302      	movs	r3, #2
 8004784:	e0d3      	b.n	800492e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800478c:	2b01      	cmp	r3, #1
 800478e:	d101      	bne.n	8004794 <HAL_I2C_Master_Transmit+0x50>
 8004790:	2302      	movs	r3, #2
 8004792:	e0cc      	b.n	800492e <HAL_I2C_Master_Transmit+0x1ea>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d007      	beq.n	80047ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f042 0201 	orr.w	r2, r2, #1
 80047b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2221      	movs	r2, #33	; 0x21
 80047ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2210      	movs	r2, #16
 80047d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	893a      	ldrh	r2, [r7, #8]
 80047ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	4a50      	ldr	r2, [pc, #320]	; (800493c <HAL_I2C_Master_Transmit+0x1f8>)
 80047fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80047fc:	8979      	ldrh	r1, [r7, #10]
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	6a3a      	ldr	r2, [r7, #32]
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f000 fbbc 	bl	8004f80 <I2C_MasterRequestWrite>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e08d      	b.n	800492e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004812:	2300      	movs	r3, #0
 8004814:	613b      	str	r3, [r7, #16]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	695b      	ldr	r3, [r3, #20]
 800481c:	613b      	str	r3, [r7, #16]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	613b      	str	r3, [r7, #16]
 8004826:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004828:	e066      	b.n	80048f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	6a39      	ldr	r1, [r7, #32]
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 fe62 	bl	80054f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00d      	beq.n	8004856 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	2b04      	cmp	r3, #4
 8004840:	d107      	bne.n	8004852 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004850:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e06b      	b.n	800492e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	781a      	ldrb	r2, [r3, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	1c5a      	adds	r2, r3, #1
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004870:	b29b      	uxth	r3, r3
 8004872:	3b01      	subs	r3, #1
 8004874:	b29a      	uxth	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800487e:	3b01      	subs	r3, #1
 8004880:	b29a      	uxth	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	f003 0304 	and.w	r3, r3, #4
 8004890:	2b04      	cmp	r3, #4
 8004892:	d11b      	bne.n	80048cc <HAL_I2C_Master_Transmit+0x188>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004898:	2b00      	cmp	r3, #0
 800489a:	d017      	beq.n	80048cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a0:	781a      	ldrb	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	1c5a      	adds	r2, r3, #1
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	3b01      	subs	r3, #1
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c4:	3b01      	subs	r3, #1
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	6a39      	ldr	r1, [r7, #32]
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 fe52 	bl	800557a <I2C_WaitOnBTFFlagUntilTimeout>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00d      	beq.n	80048f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e0:	2b04      	cmp	r3, #4
 80048e2:	d107      	bne.n	80048f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e01a      	b.n	800492e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d194      	bne.n	800482a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800490e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2220      	movs	r2, #32
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004928:	2300      	movs	r3, #0
 800492a:	e000      	b.n	800492e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800492c:	2302      	movs	r3, #2
  }
}
 800492e:	4618      	mov	r0, r3
 8004930:	3718      	adds	r7, #24
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	00100002 	.word	0x00100002
 800493c:	ffff0000 	.word	0xffff0000

08004940 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b08c      	sub	sp, #48	; 0x30
 8004944:	af02      	add	r7, sp, #8
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	607a      	str	r2, [r7, #4]
 800494a:	461a      	mov	r2, r3
 800494c:	460b      	mov	r3, r1
 800494e:	817b      	strh	r3, [r7, #10]
 8004950:	4613      	mov	r3, r2
 8004952:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004954:	f7fd ff1c 	bl	8002790 <HAL_GetTick>
 8004958:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b20      	cmp	r3, #32
 8004964:	f040 820b 	bne.w	8004d7e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	9300      	str	r3, [sp, #0]
 800496c:	2319      	movs	r3, #25
 800496e:	2201      	movs	r2, #1
 8004970:	497c      	ldr	r1, [pc, #496]	; (8004b64 <HAL_I2C_Master_Receive+0x224>)
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 fcea 	bl	800534c <I2C_WaitOnFlagUntilTimeout>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800497e:	2302      	movs	r3, #2
 8004980:	e1fe      	b.n	8004d80 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004988:	2b01      	cmp	r3, #1
 800498a:	d101      	bne.n	8004990 <HAL_I2C_Master_Receive+0x50>
 800498c:	2302      	movs	r3, #2
 800498e:	e1f7      	b.n	8004d80 <HAL_I2C_Master_Receive+0x440>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d007      	beq.n	80049b6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f042 0201 	orr.w	r2, r2, #1
 80049b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2222      	movs	r2, #34	; 0x22
 80049ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2210      	movs	r2, #16
 80049d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	893a      	ldrh	r2, [r7, #8]
 80049e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	4a5c      	ldr	r2, [pc, #368]	; (8004b68 <HAL_I2C_Master_Receive+0x228>)
 80049f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80049f8:	8979      	ldrh	r1, [r7, #10]
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 fb40 	bl	8005084 <I2C_MasterRequestRead>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e1b8      	b.n	8004d80 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d113      	bne.n	8004a3e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a16:	2300      	movs	r3, #0
 8004a18:	623b      	str	r3, [r7, #32]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	623b      	str	r3, [r7, #32]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	623b      	str	r3, [r7, #32]
 8004a2a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	e18c      	b.n	8004d58 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d11b      	bne.n	8004a7e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a56:	2300      	movs	r3, #0
 8004a58:	61fb      	str	r3, [r7, #28]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	61fb      	str	r3, [r7, #28]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	61fb      	str	r3, [r7, #28]
 8004a6a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	e16c      	b.n	8004d58 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d11b      	bne.n	8004abe <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a94:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aa4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	61bb      	str	r3, [r7, #24]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	61bb      	str	r3, [r7, #24]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	61bb      	str	r3, [r7, #24]
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	e14c      	b.n	8004d58 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004acc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ace:	2300      	movs	r3, #0
 8004ad0:	617b      	str	r3, [r7, #20]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	617b      	str	r3, [r7, #20]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	617b      	str	r3, [r7, #20]
 8004ae2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004ae4:	e138      	b.n	8004d58 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aea:	2b03      	cmp	r3, #3
 8004aec:	f200 80f1 	bhi.w	8004cd2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d123      	bne.n	8004b40 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004afa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 fd7d 	bl	80055fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d001      	beq.n	8004b0c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e139      	b.n	8004d80 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	691a      	ldr	r2, [r3, #16]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	b2d2      	uxtb	r2, r2
 8004b18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1e:	1c5a      	adds	r2, r3, #1
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	3b01      	subs	r3, #1
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b3e:	e10b      	b.n	8004d58 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d14e      	bne.n	8004be6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4e:	2200      	movs	r2, #0
 8004b50:	4906      	ldr	r1, [pc, #24]	; (8004b6c <HAL_I2C_Master_Receive+0x22c>)
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f000 fbfa 	bl	800534c <I2C_WaitOnFlagUntilTimeout>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d008      	beq.n	8004b70 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e10e      	b.n	8004d80 <HAL_I2C_Master_Receive+0x440>
 8004b62:	bf00      	nop
 8004b64:	00100002 	.word	0x00100002
 8004b68:	ffff0000 	.word	0xffff0000
 8004b6c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	691a      	ldr	r2, [r3, #16]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8a:	b2d2      	uxtb	r2, r2
 8004b8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	1c5a      	adds	r2, r3, #1
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	3b01      	subs	r3, #1
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	691a      	ldr	r2, [r3, #16]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbc:	b2d2      	uxtb	r2, r2
 8004bbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc4:	1c5a      	adds	r2, r3, #1
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004be4:	e0b8      	b.n	8004d58 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bec:	2200      	movs	r2, #0
 8004bee:	4966      	ldr	r1, [pc, #408]	; (8004d88 <HAL_I2C_Master_Receive+0x448>)
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 fbab 	bl	800534c <I2C_WaitOnFlagUntilTimeout>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d001      	beq.n	8004c00 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e0bf      	b.n	8004d80 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	691a      	ldr	r2, [r3, #16]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	1c5a      	adds	r2, r3, #1
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c48:	2200      	movs	r2, #0
 8004c4a:	494f      	ldr	r1, [pc, #316]	; (8004d88 <HAL_I2C_Master_Receive+0x448>)
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 fb7d 	bl	800534c <I2C_WaitOnFlagUntilTimeout>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e091      	b.n	8004d80 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	691a      	ldr	r2, [r3, #16]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	b2d2      	uxtb	r2, r2
 8004c78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	1c5a      	adds	r2, r3, #1
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	3b01      	subs	r3, #1
 8004c98:	b29a      	uxth	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	691a      	ldr	r2, [r3, #16]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	b2d2      	uxtb	r2, r2
 8004caa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb0:	1c5a      	adds	r2, r3, #1
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cd0:	e042      	b.n	8004d58 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f000 fc90 	bl	80055fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e04c      	b.n	8004d80 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	691a      	ldr	r2, [r3, #16]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf0:	b2d2      	uxtb	r2, r2
 8004cf2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf8:	1c5a      	adds	r2, r3, #1
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d02:	3b01      	subs	r3, #1
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	3b01      	subs	r3, #1
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	f003 0304 	and.w	r3, r3, #4
 8004d22:	2b04      	cmp	r3, #4
 8004d24:	d118      	bne.n	8004d58 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	691a      	ldr	r2, [r3, #16]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	b2d2      	uxtb	r2, r2
 8004d32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	1c5a      	adds	r2, r3, #1
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d42:	3b01      	subs	r3, #1
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	3b01      	subs	r3, #1
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f47f aec2 	bne.w	8004ae6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2220      	movs	r2, #32
 8004d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	e000      	b.n	8004d80 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004d7e:	2302      	movs	r3, #2
  }
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3728      	adds	r7, #40	; 0x28
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	00010004 	.word	0x00010004

08004d8c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b088      	sub	sp, #32
 8004d90:	af02      	add	r7, sp, #8
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	4608      	mov	r0, r1
 8004d96:	4611      	mov	r1, r2
 8004d98:	461a      	mov	r2, r3
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	817b      	strh	r3, [r7, #10]
 8004d9e:	460b      	mov	r3, r1
 8004da0:	813b      	strh	r3, [r7, #8]
 8004da2:	4613      	mov	r3, r2
 8004da4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004da6:	f7fd fcf3 	bl	8002790 <HAL_GetTick>
 8004daa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b20      	cmp	r3, #32
 8004db6:	f040 80d9 	bne.w	8004f6c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	2319      	movs	r3, #25
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	496d      	ldr	r1, [pc, #436]	; (8004f78 <HAL_I2C_Mem_Write+0x1ec>)
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f000 fac1 	bl	800534c <I2C_WaitOnFlagUntilTimeout>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	e0cc      	b.n	8004f6e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d101      	bne.n	8004de2 <HAL_I2C_Mem_Write+0x56>
 8004dde:	2302      	movs	r3, #2
 8004de0:	e0c5      	b.n	8004f6e <HAL_I2C_Mem_Write+0x1e2>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d007      	beq.n	8004e08 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f042 0201 	orr.w	r2, r2, #1
 8004e06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2221      	movs	r2, #33	; 0x21
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2240      	movs	r2, #64	; 0x40
 8004e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6a3a      	ldr	r2, [r7, #32]
 8004e32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4a4d      	ldr	r2, [pc, #308]	; (8004f7c <HAL_I2C_Mem_Write+0x1f0>)
 8004e48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e4a:	88f8      	ldrh	r0, [r7, #6]
 8004e4c:	893a      	ldrh	r2, [r7, #8]
 8004e4e:	8979      	ldrh	r1, [r7, #10]
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	9301      	str	r3, [sp, #4]
 8004e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	4603      	mov	r3, r0
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 f9e0 	bl	8005220 <I2C_RequestMemoryWrite>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d052      	beq.n	8004f0c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e081      	b.n	8004f6e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 fb42 	bl	80054f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00d      	beq.n	8004e96 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	2b04      	cmp	r3, #4
 8004e80:	d107      	bne.n	8004e92 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e06b      	b.n	8004f6e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	781a      	ldrb	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	1c5a      	adds	r2, r3, #1
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	f003 0304 	and.w	r3, r3, #4
 8004ed0:	2b04      	cmp	r3, #4
 8004ed2:	d11b      	bne.n	8004f0c <HAL_I2C_Mem_Write+0x180>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d017      	beq.n	8004f0c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	781a      	ldrb	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eec:	1c5a      	adds	r2, r3, #1
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	3b01      	subs	r3, #1
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1aa      	bne.n	8004e6a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f000 fb2e 	bl	800557a <I2C_WaitOnBTFFlagUntilTimeout>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00d      	beq.n	8004f40 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f28:	2b04      	cmp	r3, #4
 8004f2a:	d107      	bne.n	8004f3c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f3a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e016      	b.n	8004f6e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	e000      	b.n	8004f6e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004f6c:	2302      	movs	r3, #2
  }
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3718      	adds	r7, #24
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	00100002 	.word	0x00100002
 8004f7c:	ffff0000 	.word	0xffff0000

08004f80 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b088      	sub	sp, #32
 8004f84:	af02      	add	r7, sp, #8
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	607a      	str	r2, [r7, #4]
 8004f8a:	603b      	str	r3, [r7, #0]
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f94:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	2b08      	cmp	r3, #8
 8004f9a:	d006      	beq.n	8004faa <I2C_MasterRequestWrite+0x2a>
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d003      	beq.n	8004faa <I2C_MasterRequestWrite+0x2a>
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fa8:	d108      	bne.n	8004fbc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	e00b      	b.n	8004fd4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc0:	2b12      	cmp	r3, #18
 8004fc2:	d107      	bne.n	8004fd4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fd2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	9300      	str	r3, [sp, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f000 f9b3 	bl	800534c <I2C_WaitOnFlagUntilTimeout>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00d      	beq.n	8005008 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ffa:	d103      	bne.n	8005004 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005002:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e035      	b.n	8005074 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005010:	d108      	bne.n	8005024 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005012:	897b      	ldrh	r3, [r7, #10]
 8005014:	b2db      	uxtb	r3, r3
 8005016:	461a      	mov	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005020:	611a      	str	r2, [r3, #16]
 8005022:	e01b      	b.n	800505c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005024:	897b      	ldrh	r3, [r7, #10]
 8005026:	11db      	asrs	r3, r3, #7
 8005028:	b2db      	uxtb	r3, r3
 800502a:	f003 0306 	and.w	r3, r3, #6
 800502e:	b2db      	uxtb	r3, r3
 8005030:	f063 030f 	orn	r3, r3, #15
 8005034:	b2da      	uxtb	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	490e      	ldr	r1, [pc, #56]	; (800507c <I2C_MasterRequestWrite+0xfc>)
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f000 f9d9 	bl	80053fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e010      	b.n	8005074 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005052:	897b      	ldrh	r3, [r7, #10]
 8005054:	b2da      	uxtb	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	4907      	ldr	r1, [pc, #28]	; (8005080 <I2C_MasterRequestWrite+0x100>)
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f000 f9c9 	bl	80053fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e000      	b.n	8005074 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3718      	adds	r7, #24
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	00010008 	.word	0x00010008
 8005080:	00010002 	.word	0x00010002

08005084 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b088      	sub	sp, #32
 8005088:	af02      	add	r7, sp, #8
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	607a      	str	r2, [r7, #4]
 800508e:	603b      	str	r3, [r7, #0]
 8005090:	460b      	mov	r3, r1
 8005092:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005098:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050a8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	2b08      	cmp	r3, #8
 80050ae:	d006      	beq.n	80050be <I2C_MasterRequestRead+0x3a>
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d003      	beq.n	80050be <I2C_MasterRequestRead+0x3a>
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050bc:	d108      	bne.n	80050d0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	e00b      	b.n	80050e8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d4:	2b11      	cmp	r3, #17
 80050d6:	d107      	bne.n	80050e8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f000 f929 	bl	800534c <I2C_WaitOnFlagUntilTimeout>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00d      	beq.n	800511c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800510e:	d103      	bne.n	8005118 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005116:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e079      	b.n	8005210 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005124:	d108      	bne.n	8005138 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005126:	897b      	ldrh	r3, [r7, #10]
 8005128:	b2db      	uxtb	r3, r3
 800512a:	f043 0301 	orr.w	r3, r3, #1
 800512e:	b2da      	uxtb	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	611a      	str	r2, [r3, #16]
 8005136:	e05f      	b.n	80051f8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005138:	897b      	ldrh	r3, [r7, #10]
 800513a:	11db      	asrs	r3, r3, #7
 800513c:	b2db      	uxtb	r3, r3
 800513e:	f003 0306 	and.w	r3, r3, #6
 8005142:	b2db      	uxtb	r3, r3
 8005144:	f063 030f 	orn	r3, r3, #15
 8005148:	b2da      	uxtb	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	4930      	ldr	r1, [pc, #192]	; (8005218 <I2C_MasterRequestRead+0x194>)
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 f94f 	bl	80053fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d001      	beq.n	8005166 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e054      	b.n	8005210 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005166:	897b      	ldrh	r3, [r7, #10]
 8005168:	b2da      	uxtb	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	4929      	ldr	r1, [pc, #164]	; (800521c <I2C_MasterRequestRead+0x198>)
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f000 f93f 	bl	80053fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d001      	beq.n	8005186 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e044      	b.n	8005210 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005186:	2300      	movs	r3, #0
 8005188:	613b      	str	r3, [r7, #16]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	613b      	str	r3, [r7, #16]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	613b      	str	r3, [r7, #16]
 800519a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051aa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	9300      	str	r3, [sp, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f000 f8c7 	bl	800534c <I2C_WaitOnFlagUntilTimeout>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00d      	beq.n	80051e0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051d2:	d103      	bne.n	80051dc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051da:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e017      	b.n	8005210 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80051e0:	897b      	ldrh	r3, [r7, #10]
 80051e2:	11db      	asrs	r3, r3, #7
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	f003 0306 	and.w	r3, r3, #6
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	f063 030e 	orn	r3, r3, #14
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	4907      	ldr	r1, [pc, #28]	; (800521c <I2C_MasterRequestRead+0x198>)
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f000 f8fb 	bl	80053fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e000      	b.n	8005210 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3718      	adds	r7, #24
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	00010008 	.word	0x00010008
 800521c:	00010002 	.word	0x00010002

08005220 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b088      	sub	sp, #32
 8005224:	af02      	add	r7, sp, #8
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	4608      	mov	r0, r1
 800522a:	4611      	mov	r1, r2
 800522c:	461a      	mov	r2, r3
 800522e:	4603      	mov	r3, r0
 8005230:	817b      	strh	r3, [r7, #10]
 8005232:	460b      	mov	r3, r1
 8005234:	813b      	strh	r3, [r7, #8]
 8005236:	4613      	mov	r3, r2
 8005238:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005248:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	2200      	movs	r2, #0
 8005252:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 f878 	bl	800534c <I2C_WaitOnFlagUntilTimeout>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00d      	beq.n	800527e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800526c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005270:	d103      	bne.n	800527a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005278:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e05f      	b.n	800533e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800527e:	897b      	ldrh	r3, [r7, #10]
 8005280:	b2db      	uxtb	r3, r3
 8005282:	461a      	mov	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800528c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	6a3a      	ldr	r2, [r7, #32]
 8005292:	492d      	ldr	r1, [pc, #180]	; (8005348 <I2C_RequestMemoryWrite+0x128>)
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f000 f8b0 	bl	80053fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d001      	beq.n	80052a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e04c      	b.n	800533e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052a4:	2300      	movs	r3, #0
 80052a6:	617b      	str	r3, [r7, #20]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	617b      	str	r3, [r7, #20]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	617b      	str	r3, [r7, #20]
 80052b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052bc:	6a39      	ldr	r1, [r7, #32]
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f000 f91a 	bl	80054f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00d      	beq.n	80052e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ce:	2b04      	cmp	r3, #4
 80052d0:	d107      	bne.n	80052e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e02b      	b.n	800533e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052e6:	88fb      	ldrh	r3, [r7, #6]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d105      	bne.n	80052f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052ec:	893b      	ldrh	r3, [r7, #8]
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	611a      	str	r2, [r3, #16]
 80052f6:	e021      	b.n	800533c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80052f8:	893b      	ldrh	r3, [r7, #8]
 80052fa:	0a1b      	lsrs	r3, r3, #8
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	b2da      	uxtb	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005308:	6a39      	ldr	r1, [r7, #32]
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 f8f4 	bl	80054f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00d      	beq.n	8005332 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531a:	2b04      	cmp	r3, #4
 800531c:	d107      	bne.n	800532e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800532c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e005      	b.n	800533e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005332:	893b      	ldrh	r3, [r7, #8]
 8005334:	b2da      	uxtb	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3718      	adds	r7, #24
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	00010002 	.word	0x00010002

0800534c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	603b      	str	r3, [r7, #0]
 8005358:	4613      	mov	r3, r2
 800535a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800535c:	e025      	b.n	80053aa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005364:	d021      	beq.n	80053aa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005366:	f7fd fa13 	bl	8002790 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	429a      	cmp	r2, r3
 8005374:	d302      	bcc.n	800537c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d116      	bne.n	80053aa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2220      	movs	r2, #32
 8005386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005396:	f043 0220 	orr.w	r2, r3, #32
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e023      	b.n	80053f2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	0c1b      	lsrs	r3, r3, #16
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d10d      	bne.n	80053d0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	43da      	mvns	r2, r3
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	4013      	ands	r3, r2
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	bf0c      	ite	eq
 80053c6:	2301      	moveq	r3, #1
 80053c8:	2300      	movne	r3, #0
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	461a      	mov	r2, r3
 80053ce:	e00c      	b.n	80053ea <I2C_WaitOnFlagUntilTimeout+0x9e>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	43da      	mvns	r2, r3
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	4013      	ands	r3, r2
 80053dc:	b29b      	uxth	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	bf0c      	ite	eq
 80053e2:	2301      	moveq	r3, #1
 80053e4:	2300      	movne	r3, #0
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	461a      	mov	r2, r3
 80053ea:	79fb      	ldrb	r3, [r7, #7]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d0b6      	beq.n	800535e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b084      	sub	sp, #16
 80053fe:	af00      	add	r7, sp, #0
 8005400:	60f8      	str	r0, [r7, #12]
 8005402:	60b9      	str	r1, [r7, #8]
 8005404:	607a      	str	r2, [r7, #4]
 8005406:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005408:	e051      	b.n	80054ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005418:	d123      	bne.n	8005462 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005428:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005432:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2220      	movs	r2, #32
 800543e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544e:	f043 0204 	orr.w	r2, r3, #4
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e046      	b.n	80054f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005468:	d021      	beq.n	80054ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800546a:	f7fd f991 	bl	8002790 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	429a      	cmp	r2, r3
 8005478:	d302      	bcc.n	8005480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d116      	bne.n	80054ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2220      	movs	r2, #32
 800548a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549a:	f043 0220 	orr.w	r2, r3, #32
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e020      	b.n	80054f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	0c1b      	lsrs	r3, r3, #16
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d10c      	bne.n	80054d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	43da      	mvns	r2, r3
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	4013      	ands	r3, r2
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	bf14      	ite	ne
 80054ca:	2301      	movne	r3, #1
 80054cc:	2300      	moveq	r3, #0
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	e00b      	b.n	80054ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	43da      	mvns	r2, r3
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	4013      	ands	r3, r2
 80054de:	b29b      	uxth	r3, r3
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	bf14      	ite	ne
 80054e4:	2301      	movne	r3, #1
 80054e6:	2300      	moveq	r3, #0
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d18d      	bne.n	800540a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005504:	e02d      	b.n	8005562 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f000 f8ce 	bl	80056a8 <I2C_IsAcknowledgeFailed>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e02d      	b.n	8005572 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800551c:	d021      	beq.n	8005562 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800551e:	f7fd f937 	bl	8002790 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	429a      	cmp	r2, r3
 800552c:	d302      	bcc.n	8005534 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d116      	bne.n	8005562 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2220      	movs	r2, #32
 800553e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554e:	f043 0220 	orr.w	r2, r3, #32
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e007      	b.n	8005572 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	695b      	ldr	r3, [r3, #20]
 8005568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800556c:	2b80      	cmp	r3, #128	; 0x80
 800556e:	d1ca      	bne.n	8005506 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b084      	sub	sp, #16
 800557e:	af00      	add	r7, sp, #0
 8005580:	60f8      	str	r0, [r7, #12]
 8005582:	60b9      	str	r1, [r7, #8]
 8005584:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005586:	e02d      	b.n	80055e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f000 f88d 	bl	80056a8 <I2C_IsAcknowledgeFailed>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d001      	beq.n	8005598 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e02d      	b.n	80055f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800559e:	d021      	beq.n	80055e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055a0:	f7fd f8f6 	bl	8002790 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d302      	bcc.n	80055b6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d116      	bne.n	80055e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2220      	movs	r2, #32
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d0:	f043 0220 	orr.w	r2, r3, #32
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e007      	b.n	80055f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	f003 0304 	and.w	r3, r3, #4
 80055ee:	2b04      	cmp	r3, #4
 80055f0:	d1ca      	bne.n	8005588 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005608:	e042      	b.n	8005690 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	f003 0310 	and.w	r3, r3, #16
 8005614:	2b10      	cmp	r3, #16
 8005616:	d119      	bne.n	800564c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f06f 0210 	mvn.w	r2, #16
 8005620:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2220      	movs	r2, #32
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e029      	b.n	80056a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800564c:	f7fd f8a0 	bl	8002790 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	429a      	cmp	r2, r3
 800565a:	d302      	bcc.n	8005662 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d116      	bne.n	8005690 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2220      	movs	r2, #32
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567c:	f043 0220 	orr.w	r2, r3, #32
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e007      	b.n	80056a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569a:	2b40      	cmp	r3, #64	; 0x40
 800569c:	d1b5      	bne.n	800560a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056be:	d11b      	bne.n	80056f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2220      	movs	r2, #32
 80056d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e4:	f043 0204 	orr.w	r2, r3, #4
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e000      	b.n	80056fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
	...

08005708 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e0cc      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800571c:	4b68      	ldr	r3, [pc, #416]	; (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 030f 	and.w	r3, r3, #15
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	429a      	cmp	r2, r3
 8005728:	d90c      	bls.n	8005744 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800572a:	4b65      	ldr	r3, [pc, #404]	; (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 800572c:	683a      	ldr	r2, [r7, #0]
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005732:	4b63      	ldr	r3, [pc, #396]	; (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 030f 	and.w	r3, r3, #15
 800573a:	683a      	ldr	r2, [r7, #0]
 800573c:	429a      	cmp	r2, r3
 800573e:	d001      	beq.n	8005744 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e0b8      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0302 	and.w	r3, r3, #2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d020      	beq.n	8005792 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0304 	and.w	r3, r3, #4
 8005758:	2b00      	cmp	r3, #0
 800575a:	d005      	beq.n	8005768 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800575c:	4b59      	ldr	r3, [pc, #356]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	4a58      	ldr	r2, [pc, #352]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005762:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005766:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0308 	and.w	r3, r3, #8
 8005770:	2b00      	cmp	r3, #0
 8005772:	d005      	beq.n	8005780 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005774:	4b53      	ldr	r3, [pc, #332]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	4a52      	ldr	r2, [pc, #328]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800577a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800577e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005780:	4b50      	ldr	r3, [pc, #320]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	494d      	ldr	r1, [pc, #308]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800578e:	4313      	orrs	r3, r2
 8005790:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b00      	cmp	r3, #0
 800579c:	d044      	beq.n	8005828 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d107      	bne.n	80057b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057a6:	4b47      	ldr	r3, [pc, #284]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d119      	bne.n	80057e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e07f      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d003      	beq.n	80057c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057c2:	2b03      	cmp	r3, #3
 80057c4:	d107      	bne.n	80057d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057c6:	4b3f      	ldr	r3, [pc, #252]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d109      	bne.n	80057e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e06f      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057d6:	4b3b      	ldr	r3, [pc, #236]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e067      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057e6:	4b37      	ldr	r3, [pc, #220]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f023 0203 	bic.w	r2, r3, #3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	4934      	ldr	r1, [pc, #208]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057f8:	f7fc ffca 	bl	8002790 <HAL_GetTick>
 80057fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057fe:	e00a      	b.n	8005816 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005800:	f7fc ffc6 	bl	8002790 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	f241 3288 	movw	r2, #5000	; 0x1388
 800580e:	4293      	cmp	r3, r2
 8005810:	d901      	bls.n	8005816 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e04f      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005816:	4b2b      	ldr	r3, [pc, #172]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f003 020c 	and.w	r2, r3, #12
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	429a      	cmp	r2, r3
 8005826:	d1eb      	bne.n	8005800 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005828:	4b25      	ldr	r3, [pc, #148]	; (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 030f 	and.w	r3, r3, #15
 8005830:	683a      	ldr	r2, [r7, #0]
 8005832:	429a      	cmp	r2, r3
 8005834:	d20c      	bcs.n	8005850 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005836:	4b22      	ldr	r3, [pc, #136]	; (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005838:	683a      	ldr	r2, [r7, #0]
 800583a:	b2d2      	uxtb	r2, r2
 800583c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800583e:	4b20      	ldr	r3, [pc, #128]	; (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 030f 	and.w	r3, r3, #15
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	429a      	cmp	r2, r3
 800584a:	d001      	beq.n	8005850 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e032      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0304 	and.w	r3, r3, #4
 8005858:	2b00      	cmp	r3, #0
 800585a:	d008      	beq.n	800586e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800585c:	4b19      	ldr	r3, [pc, #100]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	4916      	ldr	r1, [pc, #88]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800586a:	4313      	orrs	r3, r2
 800586c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0308 	and.w	r3, r3, #8
 8005876:	2b00      	cmp	r3, #0
 8005878:	d009      	beq.n	800588e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800587a:	4b12      	ldr	r3, [pc, #72]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	00db      	lsls	r3, r3, #3
 8005888:	490e      	ldr	r1, [pc, #56]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800588a:	4313      	orrs	r3, r2
 800588c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800588e:	f000 f855 	bl	800593c <HAL_RCC_GetSysClockFreq>
 8005892:	4602      	mov	r2, r0
 8005894:	4b0b      	ldr	r3, [pc, #44]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	091b      	lsrs	r3, r3, #4
 800589a:	f003 030f 	and.w	r3, r3, #15
 800589e:	490a      	ldr	r1, [pc, #40]	; (80058c8 <HAL_RCC_ClockConfig+0x1c0>)
 80058a0:	5ccb      	ldrb	r3, [r1, r3]
 80058a2:	fa22 f303 	lsr.w	r3, r2, r3
 80058a6:	4a09      	ldr	r2, [pc, #36]	; (80058cc <HAL_RCC_ClockConfig+0x1c4>)
 80058a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80058aa:	4b09      	ldr	r3, [pc, #36]	; (80058d0 <HAL_RCC_ClockConfig+0x1c8>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7fc ff2a 	bl	8002708 <HAL_InitTick>

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	40023c00 	.word	0x40023c00
 80058c4:	40023800 	.word	0x40023800
 80058c8:	08007a78 	.word	0x08007a78
 80058cc:	20000010 	.word	0x20000010
 80058d0:	20000014 	.word	0x20000014

080058d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058d4:	b480      	push	{r7}
 80058d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058d8:	4b03      	ldr	r3, [pc, #12]	; (80058e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80058da:	681b      	ldr	r3, [r3, #0]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	20000010 	.word	0x20000010

080058ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058f0:	f7ff fff0 	bl	80058d4 <HAL_RCC_GetHCLKFreq>
 80058f4:	4602      	mov	r2, r0
 80058f6:	4b05      	ldr	r3, [pc, #20]	; (800590c <HAL_RCC_GetPCLK1Freq+0x20>)
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	0a9b      	lsrs	r3, r3, #10
 80058fc:	f003 0307 	and.w	r3, r3, #7
 8005900:	4903      	ldr	r1, [pc, #12]	; (8005910 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005902:	5ccb      	ldrb	r3, [r1, r3]
 8005904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005908:	4618      	mov	r0, r3
 800590a:	bd80      	pop	{r7, pc}
 800590c:	40023800 	.word	0x40023800
 8005910:	08007a88 	.word	0x08007a88

08005914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005918:	f7ff ffdc 	bl	80058d4 <HAL_RCC_GetHCLKFreq>
 800591c:	4602      	mov	r2, r0
 800591e:	4b05      	ldr	r3, [pc, #20]	; (8005934 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	0b5b      	lsrs	r3, r3, #13
 8005924:	f003 0307 	and.w	r3, r3, #7
 8005928:	4903      	ldr	r1, [pc, #12]	; (8005938 <HAL_RCC_GetPCLK2Freq+0x24>)
 800592a:	5ccb      	ldrb	r3, [r1, r3]
 800592c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005930:	4618      	mov	r0, r3
 8005932:	bd80      	pop	{r7, pc}
 8005934:	40023800 	.word	0x40023800
 8005938:	08007a88 	.word	0x08007a88

0800593c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800593c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005940:	b0ae      	sub	sp, #184	; 0xb8
 8005942:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005944:	2300      	movs	r3, #0
 8005946:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800594a:	2300      	movs	r3, #0
 800594c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005950:	2300      	movs	r3, #0
 8005952:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8005956:	2300      	movs	r3, #0
 8005958:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800595c:	2300      	movs	r3, #0
 800595e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005962:	4bcb      	ldr	r3, [pc, #812]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x354>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f003 030c 	and.w	r3, r3, #12
 800596a:	2b0c      	cmp	r3, #12
 800596c:	f200 8206 	bhi.w	8005d7c <HAL_RCC_GetSysClockFreq+0x440>
 8005970:	a201      	add	r2, pc, #4	; (adr r2, 8005978 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005976:	bf00      	nop
 8005978:	080059ad 	.word	0x080059ad
 800597c:	08005d7d 	.word	0x08005d7d
 8005980:	08005d7d 	.word	0x08005d7d
 8005984:	08005d7d 	.word	0x08005d7d
 8005988:	080059b5 	.word	0x080059b5
 800598c:	08005d7d 	.word	0x08005d7d
 8005990:	08005d7d 	.word	0x08005d7d
 8005994:	08005d7d 	.word	0x08005d7d
 8005998:	080059bd 	.word	0x080059bd
 800599c:	08005d7d 	.word	0x08005d7d
 80059a0:	08005d7d 	.word	0x08005d7d
 80059a4:	08005d7d 	.word	0x08005d7d
 80059a8:	08005bad 	.word	0x08005bad
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059ac:	4bb9      	ldr	r3, [pc, #740]	; (8005c94 <HAL_RCC_GetSysClockFreq+0x358>)
 80059ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80059b2:	e1e7      	b.n	8005d84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059b4:	4bb8      	ldr	r3, [pc, #736]	; (8005c98 <HAL_RCC_GetSysClockFreq+0x35c>)
 80059b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80059ba:	e1e3      	b.n	8005d84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059bc:	4bb4      	ldr	r3, [pc, #720]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x354>)
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059c8:	4bb1      	ldr	r3, [pc, #708]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x354>)
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d071      	beq.n	8005ab8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059d4:	4bae      	ldr	r3, [pc, #696]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x354>)
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	099b      	lsrs	r3, r3, #6
 80059da:	2200      	movs	r2, #0
 80059dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80059e0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80059e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80059f0:	2300      	movs	r3, #0
 80059f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80059f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80059fa:	4622      	mov	r2, r4
 80059fc:	462b      	mov	r3, r5
 80059fe:	f04f 0000 	mov.w	r0, #0
 8005a02:	f04f 0100 	mov.w	r1, #0
 8005a06:	0159      	lsls	r1, r3, #5
 8005a08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a0c:	0150      	lsls	r0, r2, #5
 8005a0e:	4602      	mov	r2, r0
 8005a10:	460b      	mov	r3, r1
 8005a12:	4621      	mov	r1, r4
 8005a14:	1a51      	subs	r1, r2, r1
 8005a16:	6439      	str	r1, [r7, #64]	; 0x40
 8005a18:	4629      	mov	r1, r5
 8005a1a:	eb63 0301 	sbc.w	r3, r3, r1
 8005a1e:	647b      	str	r3, [r7, #68]	; 0x44
 8005a20:	f04f 0200 	mov.w	r2, #0
 8005a24:	f04f 0300 	mov.w	r3, #0
 8005a28:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005a2c:	4649      	mov	r1, r9
 8005a2e:	018b      	lsls	r3, r1, #6
 8005a30:	4641      	mov	r1, r8
 8005a32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a36:	4641      	mov	r1, r8
 8005a38:	018a      	lsls	r2, r1, #6
 8005a3a:	4641      	mov	r1, r8
 8005a3c:	1a51      	subs	r1, r2, r1
 8005a3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a40:	4649      	mov	r1, r9
 8005a42:	eb63 0301 	sbc.w	r3, r3, r1
 8005a46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a48:	f04f 0200 	mov.w	r2, #0
 8005a4c:	f04f 0300 	mov.w	r3, #0
 8005a50:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005a54:	4649      	mov	r1, r9
 8005a56:	00cb      	lsls	r3, r1, #3
 8005a58:	4641      	mov	r1, r8
 8005a5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a5e:	4641      	mov	r1, r8
 8005a60:	00ca      	lsls	r2, r1, #3
 8005a62:	4610      	mov	r0, r2
 8005a64:	4619      	mov	r1, r3
 8005a66:	4603      	mov	r3, r0
 8005a68:	4622      	mov	r2, r4
 8005a6a:	189b      	adds	r3, r3, r2
 8005a6c:	633b      	str	r3, [r7, #48]	; 0x30
 8005a6e:	462b      	mov	r3, r5
 8005a70:	460a      	mov	r2, r1
 8005a72:	eb42 0303 	adc.w	r3, r2, r3
 8005a76:	637b      	str	r3, [r7, #52]	; 0x34
 8005a78:	f04f 0200 	mov.w	r2, #0
 8005a7c:	f04f 0300 	mov.w	r3, #0
 8005a80:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005a84:	4629      	mov	r1, r5
 8005a86:	024b      	lsls	r3, r1, #9
 8005a88:	4621      	mov	r1, r4
 8005a8a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a8e:	4621      	mov	r1, r4
 8005a90:	024a      	lsls	r2, r1, #9
 8005a92:	4610      	mov	r0, r2
 8005a94:	4619      	mov	r1, r3
 8005a96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005aa0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005aa4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005aa8:	f7fb f8d0 	bl	8000c4c <__aeabi_uldivmod>
 8005aac:	4602      	mov	r2, r0
 8005aae:	460b      	mov	r3, r1
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ab6:	e067      	b.n	8005b88 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ab8:	4b75      	ldr	r3, [pc, #468]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x354>)
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	099b      	lsrs	r3, r3, #6
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ac4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005ac8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005acc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ad0:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ad6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8005ada:	4622      	mov	r2, r4
 8005adc:	462b      	mov	r3, r5
 8005ade:	f04f 0000 	mov.w	r0, #0
 8005ae2:	f04f 0100 	mov.w	r1, #0
 8005ae6:	0159      	lsls	r1, r3, #5
 8005ae8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005aec:	0150      	lsls	r0, r2, #5
 8005aee:	4602      	mov	r2, r0
 8005af0:	460b      	mov	r3, r1
 8005af2:	4621      	mov	r1, r4
 8005af4:	1a51      	subs	r1, r2, r1
 8005af6:	62b9      	str	r1, [r7, #40]	; 0x28
 8005af8:	4629      	mov	r1, r5
 8005afa:	eb63 0301 	sbc.w	r3, r3, r1
 8005afe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b00:	f04f 0200 	mov.w	r2, #0
 8005b04:	f04f 0300 	mov.w	r3, #0
 8005b08:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8005b0c:	4649      	mov	r1, r9
 8005b0e:	018b      	lsls	r3, r1, #6
 8005b10:	4641      	mov	r1, r8
 8005b12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b16:	4641      	mov	r1, r8
 8005b18:	018a      	lsls	r2, r1, #6
 8005b1a:	4641      	mov	r1, r8
 8005b1c:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b20:	4649      	mov	r1, r9
 8005b22:	eb63 0b01 	sbc.w	fp, r3, r1
 8005b26:	f04f 0200 	mov.w	r2, #0
 8005b2a:	f04f 0300 	mov.w	r3, #0
 8005b2e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b32:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b3a:	4692      	mov	sl, r2
 8005b3c:	469b      	mov	fp, r3
 8005b3e:	4623      	mov	r3, r4
 8005b40:	eb1a 0303 	adds.w	r3, sl, r3
 8005b44:	623b      	str	r3, [r7, #32]
 8005b46:	462b      	mov	r3, r5
 8005b48:	eb4b 0303 	adc.w	r3, fp, r3
 8005b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b4e:	f04f 0200 	mov.w	r2, #0
 8005b52:	f04f 0300 	mov.w	r3, #0
 8005b56:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005b5a:	4629      	mov	r1, r5
 8005b5c:	028b      	lsls	r3, r1, #10
 8005b5e:	4621      	mov	r1, r4
 8005b60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b64:	4621      	mov	r1, r4
 8005b66:	028a      	lsls	r2, r1, #10
 8005b68:	4610      	mov	r0, r2
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b70:	2200      	movs	r2, #0
 8005b72:	673b      	str	r3, [r7, #112]	; 0x70
 8005b74:	677a      	str	r2, [r7, #116]	; 0x74
 8005b76:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005b7a:	f7fb f867 	bl	8000c4c <__aeabi_uldivmod>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	460b      	mov	r3, r1
 8005b82:	4613      	mov	r3, r2
 8005b84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b88:	4b41      	ldr	r3, [pc, #260]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	0c1b      	lsrs	r3, r3, #16
 8005b8e:	f003 0303 	and.w	r3, r3, #3
 8005b92:	3301      	adds	r3, #1
 8005b94:	005b      	lsls	r3, r3, #1
 8005b96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8005b9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005baa:	e0eb      	b.n	8005d84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005bac:	4b38      	ldr	r3, [pc, #224]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x354>)
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005bb8:	4b35      	ldr	r3, [pc, #212]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x354>)
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d06b      	beq.n	8005c9c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bc4:	4b32      	ldr	r3, [pc, #200]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x354>)
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	099b      	lsrs	r3, r3, #6
 8005bca:	2200      	movs	r2, #0
 8005bcc:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bce:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005bd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bd6:	663b      	str	r3, [r7, #96]	; 0x60
 8005bd8:	2300      	movs	r3, #0
 8005bda:	667b      	str	r3, [r7, #100]	; 0x64
 8005bdc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005be0:	4622      	mov	r2, r4
 8005be2:	462b      	mov	r3, r5
 8005be4:	f04f 0000 	mov.w	r0, #0
 8005be8:	f04f 0100 	mov.w	r1, #0
 8005bec:	0159      	lsls	r1, r3, #5
 8005bee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bf2:	0150      	lsls	r0, r2, #5
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	4621      	mov	r1, r4
 8005bfa:	1a51      	subs	r1, r2, r1
 8005bfc:	61b9      	str	r1, [r7, #24]
 8005bfe:	4629      	mov	r1, r5
 8005c00:	eb63 0301 	sbc.w	r3, r3, r1
 8005c04:	61fb      	str	r3, [r7, #28]
 8005c06:	f04f 0200 	mov.w	r2, #0
 8005c0a:	f04f 0300 	mov.w	r3, #0
 8005c0e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005c12:	4659      	mov	r1, fp
 8005c14:	018b      	lsls	r3, r1, #6
 8005c16:	4651      	mov	r1, sl
 8005c18:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c1c:	4651      	mov	r1, sl
 8005c1e:	018a      	lsls	r2, r1, #6
 8005c20:	4651      	mov	r1, sl
 8005c22:	ebb2 0801 	subs.w	r8, r2, r1
 8005c26:	4659      	mov	r1, fp
 8005c28:	eb63 0901 	sbc.w	r9, r3, r1
 8005c2c:	f04f 0200 	mov.w	r2, #0
 8005c30:	f04f 0300 	mov.w	r3, #0
 8005c34:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c38:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c3c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c40:	4690      	mov	r8, r2
 8005c42:	4699      	mov	r9, r3
 8005c44:	4623      	mov	r3, r4
 8005c46:	eb18 0303 	adds.w	r3, r8, r3
 8005c4a:	613b      	str	r3, [r7, #16]
 8005c4c:	462b      	mov	r3, r5
 8005c4e:	eb49 0303 	adc.w	r3, r9, r3
 8005c52:	617b      	str	r3, [r7, #20]
 8005c54:	f04f 0200 	mov.w	r2, #0
 8005c58:	f04f 0300 	mov.w	r3, #0
 8005c5c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005c60:	4629      	mov	r1, r5
 8005c62:	024b      	lsls	r3, r1, #9
 8005c64:	4621      	mov	r1, r4
 8005c66:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c6a:	4621      	mov	r1, r4
 8005c6c:	024a      	lsls	r2, r1, #9
 8005c6e:	4610      	mov	r0, r2
 8005c70:	4619      	mov	r1, r3
 8005c72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c76:	2200      	movs	r2, #0
 8005c78:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c7a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005c7c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005c80:	f7fa ffe4 	bl	8000c4c <__aeabi_uldivmod>
 8005c84:	4602      	mov	r2, r0
 8005c86:	460b      	mov	r3, r1
 8005c88:	4613      	mov	r3, r2
 8005c8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c8e:	e065      	b.n	8005d5c <HAL_RCC_GetSysClockFreq+0x420>
 8005c90:	40023800 	.word	0x40023800
 8005c94:	00f42400 	.word	0x00f42400
 8005c98:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c9c:	4b3d      	ldr	r3, [pc, #244]	; (8005d94 <HAL_RCC_GetSysClockFreq+0x458>)
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	099b      	lsrs	r3, r3, #6
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	4611      	mov	r1, r2
 8005ca8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005cac:	653b      	str	r3, [r7, #80]	; 0x50
 8005cae:	2300      	movs	r3, #0
 8005cb0:	657b      	str	r3, [r7, #84]	; 0x54
 8005cb2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8005cb6:	4642      	mov	r2, r8
 8005cb8:	464b      	mov	r3, r9
 8005cba:	f04f 0000 	mov.w	r0, #0
 8005cbe:	f04f 0100 	mov.w	r1, #0
 8005cc2:	0159      	lsls	r1, r3, #5
 8005cc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cc8:	0150      	lsls	r0, r2, #5
 8005cca:	4602      	mov	r2, r0
 8005ccc:	460b      	mov	r3, r1
 8005cce:	4641      	mov	r1, r8
 8005cd0:	1a51      	subs	r1, r2, r1
 8005cd2:	60b9      	str	r1, [r7, #8]
 8005cd4:	4649      	mov	r1, r9
 8005cd6:	eb63 0301 	sbc.w	r3, r3, r1
 8005cda:	60fb      	str	r3, [r7, #12]
 8005cdc:	f04f 0200 	mov.w	r2, #0
 8005ce0:	f04f 0300 	mov.w	r3, #0
 8005ce4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005ce8:	4659      	mov	r1, fp
 8005cea:	018b      	lsls	r3, r1, #6
 8005cec:	4651      	mov	r1, sl
 8005cee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005cf2:	4651      	mov	r1, sl
 8005cf4:	018a      	lsls	r2, r1, #6
 8005cf6:	4651      	mov	r1, sl
 8005cf8:	1a54      	subs	r4, r2, r1
 8005cfa:	4659      	mov	r1, fp
 8005cfc:	eb63 0501 	sbc.w	r5, r3, r1
 8005d00:	f04f 0200 	mov.w	r2, #0
 8005d04:	f04f 0300 	mov.w	r3, #0
 8005d08:	00eb      	lsls	r3, r5, #3
 8005d0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d0e:	00e2      	lsls	r2, r4, #3
 8005d10:	4614      	mov	r4, r2
 8005d12:	461d      	mov	r5, r3
 8005d14:	4643      	mov	r3, r8
 8005d16:	18e3      	adds	r3, r4, r3
 8005d18:	603b      	str	r3, [r7, #0]
 8005d1a:	464b      	mov	r3, r9
 8005d1c:	eb45 0303 	adc.w	r3, r5, r3
 8005d20:	607b      	str	r3, [r7, #4]
 8005d22:	f04f 0200 	mov.w	r2, #0
 8005d26:	f04f 0300 	mov.w	r3, #0
 8005d2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d2e:	4629      	mov	r1, r5
 8005d30:	028b      	lsls	r3, r1, #10
 8005d32:	4621      	mov	r1, r4
 8005d34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d38:	4621      	mov	r1, r4
 8005d3a:	028a      	lsls	r2, r1, #10
 8005d3c:	4610      	mov	r0, r2
 8005d3e:	4619      	mov	r1, r3
 8005d40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d44:	2200      	movs	r2, #0
 8005d46:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d48:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005d4a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005d4e:	f7fa ff7d 	bl	8000c4c <__aeabi_uldivmod>
 8005d52:	4602      	mov	r2, r0
 8005d54:	460b      	mov	r3, r1
 8005d56:	4613      	mov	r3, r2
 8005d58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005d5c:	4b0d      	ldr	r3, [pc, #52]	; (8005d94 <HAL_RCC_GetSysClockFreq+0x458>)
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	0f1b      	lsrs	r3, r3, #28
 8005d62:	f003 0307 	and.w	r3, r3, #7
 8005d66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8005d6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005d6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005d7a:	e003      	b.n	8005d84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d7c:	4b06      	ldr	r3, [pc, #24]	; (8005d98 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005d7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005d82:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	37b8      	adds	r7, #184	; 0xb8
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d92:	bf00      	nop
 8005d94:	40023800 	.word	0x40023800
 8005d98:	00f42400 	.word	0x00f42400

08005d9c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d101      	bne.n	8005dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e28d      	b.n	80062ca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f000 8083 	beq.w	8005ec2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005dbc:	4b94      	ldr	r3, [pc, #592]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f003 030c 	and.w	r3, r3, #12
 8005dc4:	2b04      	cmp	r3, #4
 8005dc6:	d019      	beq.n	8005dfc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005dc8:	4b91      	ldr	r3, [pc, #580]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005dd0:	2b08      	cmp	r3, #8
 8005dd2:	d106      	bne.n	8005de2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005dd4:	4b8e      	ldr	r3, [pc, #568]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ddc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005de0:	d00c      	beq.n	8005dfc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005de2:	4b8b      	ldr	r3, [pc, #556]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005dea:	2b0c      	cmp	r3, #12
 8005dec:	d112      	bne.n	8005e14 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dee:	4b88      	ldr	r3, [pc, #544]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005df6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dfa:	d10b      	bne.n	8005e14 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dfc:	4b84      	ldr	r3, [pc, #528]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d05b      	beq.n	8005ec0 <HAL_RCC_OscConfig+0x124>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d157      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e25a      	b.n	80062ca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e1c:	d106      	bne.n	8005e2c <HAL_RCC_OscConfig+0x90>
 8005e1e:	4b7c      	ldr	r3, [pc, #496]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a7b      	ldr	r2, [pc, #492]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	e01d      	b.n	8005e68 <HAL_RCC_OscConfig+0xcc>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e34:	d10c      	bne.n	8005e50 <HAL_RCC_OscConfig+0xb4>
 8005e36:	4b76      	ldr	r3, [pc, #472]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a75      	ldr	r2, [pc, #468]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005e3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e40:	6013      	str	r3, [r2, #0]
 8005e42:	4b73      	ldr	r3, [pc, #460]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a72      	ldr	r2, [pc, #456]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e4c:	6013      	str	r3, [r2, #0]
 8005e4e:	e00b      	b.n	8005e68 <HAL_RCC_OscConfig+0xcc>
 8005e50:	4b6f      	ldr	r3, [pc, #444]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a6e      	ldr	r2, [pc, #440]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e5a:	6013      	str	r3, [r2, #0]
 8005e5c:	4b6c      	ldr	r3, [pc, #432]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a6b      	ldr	r2, [pc, #428]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d013      	beq.n	8005e98 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e70:	f7fc fc8e 	bl	8002790 <HAL_GetTick>
 8005e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e76:	e008      	b.n	8005e8a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e78:	f7fc fc8a 	bl	8002790 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	2b64      	cmp	r3, #100	; 0x64
 8005e84:	d901      	bls.n	8005e8a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e21f      	b.n	80062ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e8a:	4b61      	ldr	r3, [pc, #388]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d0f0      	beq.n	8005e78 <HAL_RCC_OscConfig+0xdc>
 8005e96:	e014      	b.n	8005ec2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e98:	f7fc fc7a 	bl	8002790 <HAL_GetTick>
 8005e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e9e:	e008      	b.n	8005eb2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ea0:	f7fc fc76 	bl	8002790 <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	2b64      	cmp	r3, #100	; 0x64
 8005eac:	d901      	bls.n	8005eb2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e20b      	b.n	80062ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eb2:	4b57      	ldr	r3, [pc, #348]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1f0      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x104>
 8005ebe:	e000      	b.n	8005ec2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d06f      	beq.n	8005fae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005ece:	4b50      	ldr	r3, [pc, #320]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f003 030c 	and.w	r3, r3, #12
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d017      	beq.n	8005f0a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005eda:	4b4d      	ldr	r3, [pc, #308]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005ee2:	2b08      	cmp	r3, #8
 8005ee4:	d105      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005ee6:	4b4a      	ldr	r3, [pc, #296]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00b      	beq.n	8005f0a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ef2:	4b47      	ldr	r3, [pc, #284]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005efa:	2b0c      	cmp	r3, #12
 8005efc:	d11c      	bne.n	8005f38 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005efe:	4b44      	ldr	r3, [pc, #272]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d116      	bne.n	8005f38 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f0a:	4b41      	ldr	r3, [pc, #260]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0302 	and.w	r3, r3, #2
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d005      	beq.n	8005f22 <HAL_RCC_OscConfig+0x186>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d001      	beq.n	8005f22 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e1d3      	b.n	80062ca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f22:	4b3b      	ldr	r3, [pc, #236]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	00db      	lsls	r3, r3, #3
 8005f30:	4937      	ldr	r1, [pc, #220]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f36:	e03a      	b.n	8005fae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d020      	beq.n	8005f82 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f40:	4b34      	ldr	r3, [pc, #208]	; (8006014 <HAL_RCC_OscConfig+0x278>)
 8005f42:	2201      	movs	r2, #1
 8005f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f46:	f7fc fc23 	bl	8002790 <HAL_GetTick>
 8005f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f4c:	e008      	b.n	8005f60 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f4e:	f7fc fc1f 	bl	8002790 <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d901      	bls.n	8005f60 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e1b4      	b.n	80062ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f60:	4b2b      	ldr	r3, [pc, #172]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0302 	and.w	r3, r3, #2
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d0f0      	beq.n	8005f4e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f6c:	4b28      	ldr	r3, [pc, #160]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	00db      	lsls	r3, r3, #3
 8005f7a:	4925      	ldr	r1, [pc, #148]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	600b      	str	r3, [r1, #0]
 8005f80:	e015      	b.n	8005fae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f82:	4b24      	ldr	r3, [pc, #144]	; (8006014 <HAL_RCC_OscConfig+0x278>)
 8005f84:	2200      	movs	r2, #0
 8005f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f88:	f7fc fc02 	bl	8002790 <HAL_GetTick>
 8005f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f8e:	e008      	b.n	8005fa2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f90:	f7fc fbfe 	bl	8002790 <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d901      	bls.n	8005fa2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e193      	b.n	80062ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fa2:	4b1b      	ldr	r3, [pc, #108]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0302 	and.w	r3, r3, #2
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1f0      	bne.n	8005f90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0308 	and.w	r3, r3, #8
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d036      	beq.n	8006028 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d016      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fc2:	4b15      	ldr	r3, [pc, #84]	; (8006018 <HAL_RCC_OscConfig+0x27c>)
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fc8:	f7fc fbe2 	bl	8002790 <HAL_GetTick>
 8005fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fce:	e008      	b.n	8005fe2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fd0:	f7fc fbde 	bl	8002790 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d901      	bls.n	8005fe2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e173      	b.n	80062ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fe2:	4b0b      	ldr	r3, [pc, #44]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fe6:	f003 0302 	and.w	r3, r3, #2
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d0f0      	beq.n	8005fd0 <HAL_RCC_OscConfig+0x234>
 8005fee:	e01b      	b.n	8006028 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ff0:	4b09      	ldr	r3, [pc, #36]	; (8006018 <HAL_RCC_OscConfig+0x27c>)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ff6:	f7fc fbcb 	bl	8002790 <HAL_GetTick>
 8005ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ffc:	e00e      	b.n	800601c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ffe:	f7fc fbc7 	bl	8002790 <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	2b02      	cmp	r3, #2
 800600a:	d907      	bls.n	800601c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e15c      	b.n	80062ca <HAL_RCC_OscConfig+0x52e>
 8006010:	40023800 	.word	0x40023800
 8006014:	42470000 	.word	0x42470000
 8006018:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800601c:	4b8a      	ldr	r3, [pc, #552]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 800601e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006020:	f003 0302 	and.w	r3, r3, #2
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1ea      	bne.n	8005ffe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0304 	and.w	r3, r3, #4
 8006030:	2b00      	cmp	r3, #0
 8006032:	f000 8097 	beq.w	8006164 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006036:	2300      	movs	r3, #0
 8006038:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800603a:	4b83      	ldr	r3, [pc, #524]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 800603c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10f      	bne.n	8006066 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006046:	2300      	movs	r3, #0
 8006048:	60bb      	str	r3, [r7, #8]
 800604a:	4b7f      	ldr	r3, [pc, #508]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 800604c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604e:	4a7e      	ldr	r2, [pc, #504]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 8006050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006054:	6413      	str	r3, [r2, #64]	; 0x40
 8006056:	4b7c      	ldr	r3, [pc, #496]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 8006058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800605e:	60bb      	str	r3, [r7, #8]
 8006060:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006062:	2301      	movs	r3, #1
 8006064:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006066:	4b79      	ldr	r3, [pc, #484]	; (800624c <HAL_RCC_OscConfig+0x4b0>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800606e:	2b00      	cmp	r3, #0
 8006070:	d118      	bne.n	80060a4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006072:	4b76      	ldr	r3, [pc, #472]	; (800624c <HAL_RCC_OscConfig+0x4b0>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a75      	ldr	r2, [pc, #468]	; (800624c <HAL_RCC_OscConfig+0x4b0>)
 8006078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800607c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800607e:	f7fc fb87 	bl	8002790 <HAL_GetTick>
 8006082:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006084:	e008      	b.n	8006098 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006086:	f7fc fb83 	bl	8002790 <HAL_GetTick>
 800608a:	4602      	mov	r2, r0
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	2b02      	cmp	r3, #2
 8006092:	d901      	bls.n	8006098 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e118      	b.n	80062ca <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006098:	4b6c      	ldr	r3, [pc, #432]	; (800624c <HAL_RCC_OscConfig+0x4b0>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d0f0      	beq.n	8006086 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d106      	bne.n	80060ba <HAL_RCC_OscConfig+0x31e>
 80060ac:	4b66      	ldr	r3, [pc, #408]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 80060ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b0:	4a65      	ldr	r2, [pc, #404]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 80060b2:	f043 0301 	orr.w	r3, r3, #1
 80060b6:	6713      	str	r3, [r2, #112]	; 0x70
 80060b8:	e01c      	b.n	80060f4 <HAL_RCC_OscConfig+0x358>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	2b05      	cmp	r3, #5
 80060c0:	d10c      	bne.n	80060dc <HAL_RCC_OscConfig+0x340>
 80060c2:	4b61      	ldr	r3, [pc, #388]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 80060c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c6:	4a60      	ldr	r2, [pc, #384]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 80060c8:	f043 0304 	orr.w	r3, r3, #4
 80060cc:	6713      	str	r3, [r2, #112]	; 0x70
 80060ce:	4b5e      	ldr	r3, [pc, #376]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 80060d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d2:	4a5d      	ldr	r2, [pc, #372]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 80060d4:	f043 0301 	orr.w	r3, r3, #1
 80060d8:	6713      	str	r3, [r2, #112]	; 0x70
 80060da:	e00b      	b.n	80060f4 <HAL_RCC_OscConfig+0x358>
 80060dc:	4b5a      	ldr	r3, [pc, #360]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 80060de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e0:	4a59      	ldr	r2, [pc, #356]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 80060e2:	f023 0301 	bic.w	r3, r3, #1
 80060e6:	6713      	str	r3, [r2, #112]	; 0x70
 80060e8:	4b57      	ldr	r3, [pc, #348]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 80060ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ec:	4a56      	ldr	r2, [pc, #344]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 80060ee:	f023 0304 	bic.w	r3, r3, #4
 80060f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d015      	beq.n	8006128 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060fc:	f7fc fb48 	bl	8002790 <HAL_GetTick>
 8006100:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006102:	e00a      	b.n	800611a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006104:	f7fc fb44 	bl	8002790 <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006112:	4293      	cmp	r3, r2
 8006114:	d901      	bls.n	800611a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e0d7      	b.n	80062ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800611a:	4b4b      	ldr	r3, [pc, #300]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 800611c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800611e:	f003 0302 	and.w	r3, r3, #2
 8006122:	2b00      	cmp	r3, #0
 8006124:	d0ee      	beq.n	8006104 <HAL_RCC_OscConfig+0x368>
 8006126:	e014      	b.n	8006152 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006128:	f7fc fb32 	bl	8002790 <HAL_GetTick>
 800612c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800612e:	e00a      	b.n	8006146 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006130:	f7fc fb2e 	bl	8002790 <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	f241 3288 	movw	r2, #5000	; 0x1388
 800613e:	4293      	cmp	r3, r2
 8006140:	d901      	bls.n	8006146 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e0c1      	b.n	80062ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006146:	4b40      	ldr	r3, [pc, #256]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 8006148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800614a:	f003 0302 	and.w	r3, r3, #2
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1ee      	bne.n	8006130 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006152:	7dfb      	ldrb	r3, [r7, #23]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d105      	bne.n	8006164 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006158:	4b3b      	ldr	r3, [pc, #236]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 800615a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615c:	4a3a      	ldr	r2, [pc, #232]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 800615e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006162:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 80ad 	beq.w	80062c8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800616e:	4b36      	ldr	r3, [pc, #216]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f003 030c 	and.w	r3, r3, #12
 8006176:	2b08      	cmp	r3, #8
 8006178:	d060      	beq.n	800623c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	2b02      	cmp	r3, #2
 8006180:	d145      	bne.n	800620e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006182:	4b33      	ldr	r3, [pc, #204]	; (8006250 <HAL_RCC_OscConfig+0x4b4>)
 8006184:	2200      	movs	r2, #0
 8006186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006188:	f7fc fb02 	bl	8002790 <HAL_GetTick>
 800618c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800618e:	e008      	b.n	80061a2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006190:	f7fc fafe 	bl	8002790 <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	2b02      	cmp	r3, #2
 800619c:	d901      	bls.n	80061a2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e093      	b.n	80062ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061a2:	4b29      	ldr	r3, [pc, #164]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1f0      	bne.n	8006190 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	69da      	ldr	r2, [r3, #28]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	431a      	orrs	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061bc:	019b      	lsls	r3, r3, #6
 80061be:	431a      	orrs	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c4:	085b      	lsrs	r3, r3, #1
 80061c6:	3b01      	subs	r3, #1
 80061c8:	041b      	lsls	r3, r3, #16
 80061ca:	431a      	orrs	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d0:	061b      	lsls	r3, r3, #24
 80061d2:	431a      	orrs	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d8:	071b      	lsls	r3, r3, #28
 80061da:	491b      	ldr	r1, [pc, #108]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 80061dc:	4313      	orrs	r3, r2
 80061de:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061e0:	4b1b      	ldr	r3, [pc, #108]	; (8006250 <HAL_RCC_OscConfig+0x4b4>)
 80061e2:	2201      	movs	r2, #1
 80061e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061e6:	f7fc fad3 	bl	8002790 <HAL_GetTick>
 80061ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061ec:	e008      	b.n	8006200 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061ee:	f7fc facf 	bl	8002790 <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d901      	bls.n	8006200 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e064      	b.n	80062ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006200:	4b11      	ldr	r3, [pc, #68]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d0f0      	beq.n	80061ee <HAL_RCC_OscConfig+0x452>
 800620c:	e05c      	b.n	80062c8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800620e:	4b10      	ldr	r3, [pc, #64]	; (8006250 <HAL_RCC_OscConfig+0x4b4>)
 8006210:	2200      	movs	r2, #0
 8006212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006214:	f7fc fabc 	bl	8002790 <HAL_GetTick>
 8006218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800621a:	e008      	b.n	800622e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800621c:	f7fc fab8 	bl	8002790 <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	2b02      	cmp	r3, #2
 8006228:	d901      	bls.n	800622e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e04d      	b.n	80062ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800622e:	4b06      	ldr	r3, [pc, #24]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1f0      	bne.n	800621c <HAL_RCC_OscConfig+0x480>
 800623a:	e045      	b.n	80062c8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	699b      	ldr	r3, [r3, #24]
 8006240:	2b01      	cmp	r3, #1
 8006242:	d107      	bne.n	8006254 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e040      	b.n	80062ca <HAL_RCC_OscConfig+0x52e>
 8006248:	40023800 	.word	0x40023800
 800624c:	40007000 	.word	0x40007000
 8006250:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006254:	4b1f      	ldr	r3, [pc, #124]	; (80062d4 <HAL_RCC_OscConfig+0x538>)
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	2b01      	cmp	r3, #1
 8006260:	d030      	beq.n	80062c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800626c:	429a      	cmp	r2, r3
 800626e:	d129      	bne.n	80062c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800627a:	429a      	cmp	r2, r3
 800627c:	d122      	bne.n	80062c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006284:	4013      	ands	r3, r2
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800628a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800628c:	4293      	cmp	r3, r2
 800628e:	d119      	bne.n	80062c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800629a:	085b      	lsrs	r3, r3, #1
 800629c:	3b01      	subs	r3, #1
 800629e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d10f      	bne.n	80062c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d107      	bne.n	80062c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062be:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d001      	beq.n	80062c8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e000      	b.n	80062ca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3718      	adds	r7, #24
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	40023800 	.word	0x40023800

080062d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e041      	b.n	800636e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d106      	bne.n	8006304 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f7fc f8c6 	bl	8002490 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2202      	movs	r2, #2
 8006308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	3304      	adds	r3, #4
 8006314:	4619      	mov	r1, r3
 8006316:	4610      	mov	r0, r2
 8006318:	f000 f95e 	bl	80065d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3708      	adds	r7, #8
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
	...

08006378 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006386:	b2db      	uxtb	r3, r3
 8006388:	2b01      	cmp	r3, #1
 800638a:	d001      	beq.n	8006390 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e046      	b.n	800641e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2202      	movs	r2, #2
 8006394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a23      	ldr	r2, [pc, #140]	; (800642c <HAL_TIM_Base_Start+0xb4>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d022      	beq.n	80063e8 <HAL_TIM_Base_Start+0x70>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063aa:	d01d      	beq.n	80063e8 <HAL_TIM_Base_Start+0x70>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a1f      	ldr	r2, [pc, #124]	; (8006430 <HAL_TIM_Base_Start+0xb8>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d018      	beq.n	80063e8 <HAL_TIM_Base_Start+0x70>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a1e      	ldr	r2, [pc, #120]	; (8006434 <HAL_TIM_Base_Start+0xbc>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d013      	beq.n	80063e8 <HAL_TIM_Base_Start+0x70>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a1c      	ldr	r2, [pc, #112]	; (8006438 <HAL_TIM_Base_Start+0xc0>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d00e      	beq.n	80063e8 <HAL_TIM_Base_Start+0x70>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a1b      	ldr	r2, [pc, #108]	; (800643c <HAL_TIM_Base_Start+0xc4>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d009      	beq.n	80063e8 <HAL_TIM_Base_Start+0x70>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a19      	ldr	r2, [pc, #100]	; (8006440 <HAL_TIM_Base_Start+0xc8>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d004      	beq.n	80063e8 <HAL_TIM_Base_Start+0x70>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a18      	ldr	r2, [pc, #96]	; (8006444 <HAL_TIM_Base_Start+0xcc>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d111      	bne.n	800640c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	f003 0307 	and.w	r3, r3, #7
 80063f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2b06      	cmp	r3, #6
 80063f8:	d010      	beq.n	800641c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f042 0201 	orr.w	r2, r2, #1
 8006408:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800640a:	e007      	b.n	800641c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f042 0201 	orr.w	r2, r2, #1
 800641a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	40010000 	.word	0x40010000
 8006430:	40000400 	.word	0x40000400
 8006434:	40000800 	.word	0x40000800
 8006438:	40000c00 	.word	0x40000c00
 800643c:	40010400 	.word	0x40010400
 8006440:	40014000 	.word	0x40014000
 8006444:	40001800 	.word	0x40001800

08006448 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006452:	2300      	movs	r3, #0
 8006454:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800645c:	2b01      	cmp	r3, #1
 800645e:	d101      	bne.n	8006464 <HAL_TIM_ConfigClockSource+0x1c>
 8006460:	2302      	movs	r3, #2
 8006462:	e0b4      	b.n	80065ce <HAL_TIM_ConfigClockSource+0x186>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2202      	movs	r2, #2
 8006470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006482:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800648a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800649c:	d03e      	beq.n	800651c <HAL_TIM_ConfigClockSource+0xd4>
 800649e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064a2:	f200 8087 	bhi.w	80065b4 <HAL_TIM_ConfigClockSource+0x16c>
 80064a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064aa:	f000 8086 	beq.w	80065ba <HAL_TIM_ConfigClockSource+0x172>
 80064ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064b2:	d87f      	bhi.n	80065b4 <HAL_TIM_ConfigClockSource+0x16c>
 80064b4:	2b70      	cmp	r3, #112	; 0x70
 80064b6:	d01a      	beq.n	80064ee <HAL_TIM_ConfigClockSource+0xa6>
 80064b8:	2b70      	cmp	r3, #112	; 0x70
 80064ba:	d87b      	bhi.n	80065b4 <HAL_TIM_ConfigClockSource+0x16c>
 80064bc:	2b60      	cmp	r3, #96	; 0x60
 80064be:	d050      	beq.n	8006562 <HAL_TIM_ConfigClockSource+0x11a>
 80064c0:	2b60      	cmp	r3, #96	; 0x60
 80064c2:	d877      	bhi.n	80065b4 <HAL_TIM_ConfigClockSource+0x16c>
 80064c4:	2b50      	cmp	r3, #80	; 0x50
 80064c6:	d03c      	beq.n	8006542 <HAL_TIM_ConfigClockSource+0xfa>
 80064c8:	2b50      	cmp	r3, #80	; 0x50
 80064ca:	d873      	bhi.n	80065b4 <HAL_TIM_ConfigClockSource+0x16c>
 80064cc:	2b40      	cmp	r3, #64	; 0x40
 80064ce:	d058      	beq.n	8006582 <HAL_TIM_ConfigClockSource+0x13a>
 80064d0:	2b40      	cmp	r3, #64	; 0x40
 80064d2:	d86f      	bhi.n	80065b4 <HAL_TIM_ConfigClockSource+0x16c>
 80064d4:	2b30      	cmp	r3, #48	; 0x30
 80064d6:	d064      	beq.n	80065a2 <HAL_TIM_ConfigClockSource+0x15a>
 80064d8:	2b30      	cmp	r3, #48	; 0x30
 80064da:	d86b      	bhi.n	80065b4 <HAL_TIM_ConfigClockSource+0x16c>
 80064dc:	2b20      	cmp	r3, #32
 80064de:	d060      	beq.n	80065a2 <HAL_TIM_ConfigClockSource+0x15a>
 80064e0:	2b20      	cmp	r3, #32
 80064e2:	d867      	bhi.n	80065b4 <HAL_TIM_ConfigClockSource+0x16c>
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d05c      	beq.n	80065a2 <HAL_TIM_ConfigClockSource+0x15a>
 80064e8:	2b10      	cmp	r3, #16
 80064ea:	d05a      	beq.n	80065a2 <HAL_TIM_ConfigClockSource+0x15a>
 80064ec:	e062      	b.n	80065b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6818      	ldr	r0, [r3, #0]
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	6899      	ldr	r1, [r3, #8]
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	685a      	ldr	r2, [r3, #4]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	f000 f985 	bl	800680c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006510:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68ba      	ldr	r2, [r7, #8]
 8006518:	609a      	str	r2, [r3, #8]
      break;
 800651a:	e04f      	b.n	80065bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6818      	ldr	r0, [r3, #0]
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	6899      	ldr	r1, [r3, #8]
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	f000 f96e 	bl	800680c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	689a      	ldr	r2, [r3, #8]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800653e:	609a      	str	r2, [r3, #8]
      break;
 8006540:	e03c      	b.n	80065bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6818      	ldr	r0, [r3, #0]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	6859      	ldr	r1, [r3, #4]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	461a      	mov	r2, r3
 8006550:	f000 f8e2 	bl	8006718 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2150      	movs	r1, #80	; 0x50
 800655a:	4618      	mov	r0, r3
 800655c:	f000 f93b 	bl	80067d6 <TIM_ITRx_SetConfig>
      break;
 8006560:	e02c      	b.n	80065bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6818      	ldr	r0, [r3, #0]
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	6859      	ldr	r1, [r3, #4]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	461a      	mov	r2, r3
 8006570:	f000 f901 	bl	8006776 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2160      	movs	r1, #96	; 0x60
 800657a:	4618      	mov	r0, r3
 800657c:	f000 f92b 	bl	80067d6 <TIM_ITRx_SetConfig>
      break;
 8006580:	e01c      	b.n	80065bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6818      	ldr	r0, [r3, #0]
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	6859      	ldr	r1, [r3, #4]
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	461a      	mov	r2, r3
 8006590:	f000 f8c2 	bl	8006718 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2140      	movs	r1, #64	; 0x40
 800659a:	4618      	mov	r0, r3
 800659c:	f000 f91b 	bl	80067d6 <TIM_ITRx_SetConfig>
      break;
 80065a0:	e00c      	b.n	80065bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4619      	mov	r1, r3
 80065ac:	4610      	mov	r0, r2
 80065ae:	f000 f912 	bl	80067d6 <TIM_ITRx_SetConfig>
      break;
 80065b2:	e003      	b.n	80065bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	73fb      	strb	r3, [r7, #15]
      break;
 80065b8:	e000      	b.n	80065bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80065ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
	...

080065d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a40      	ldr	r2, [pc, #256]	; (80066ec <TIM_Base_SetConfig+0x114>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d013      	beq.n	8006618 <TIM_Base_SetConfig+0x40>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065f6:	d00f      	beq.n	8006618 <TIM_Base_SetConfig+0x40>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a3d      	ldr	r2, [pc, #244]	; (80066f0 <TIM_Base_SetConfig+0x118>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d00b      	beq.n	8006618 <TIM_Base_SetConfig+0x40>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a3c      	ldr	r2, [pc, #240]	; (80066f4 <TIM_Base_SetConfig+0x11c>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d007      	beq.n	8006618 <TIM_Base_SetConfig+0x40>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a3b      	ldr	r2, [pc, #236]	; (80066f8 <TIM_Base_SetConfig+0x120>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d003      	beq.n	8006618 <TIM_Base_SetConfig+0x40>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a3a      	ldr	r2, [pc, #232]	; (80066fc <TIM_Base_SetConfig+0x124>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d108      	bne.n	800662a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800661e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	4313      	orrs	r3, r2
 8006628:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a2f      	ldr	r2, [pc, #188]	; (80066ec <TIM_Base_SetConfig+0x114>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d02b      	beq.n	800668a <TIM_Base_SetConfig+0xb2>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006638:	d027      	beq.n	800668a <TIM_Base_SetConfig+0xb2>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a2c      	ldr	r2, [pc, #176]	; (80066f0 <TIM_Base_SetConfig+0x118>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d023      	beq.n	800668a <TIM_Base_SetConfig+0xb2>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a2b      	ldr	r2, [pc, #172]	; (80066f4 <TIM_Base_SetConfig+0x11c>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d01f      	beq.n	800668a <TIM_Base_SetConfig+0xb2>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a2a      	ldr	r2, [pc, #168]	; (80066f8 <TIM_Base_SetConfig+0x120>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d01b      	beq.n	800668a <TIM_Base_SetConfig+0xb2>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a29      	ldr	r2, [pc, #164]	; (80066fc <TIM_Base_SetConfig+0x124>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d017      	beq.n	800668a <TIM_Base_SetConfig+0xb2>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a28      	ldr	r2, [pc, #160]	; (8006700 <TIM_Base_SetConfig+0x128>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d013      	beq.n	800668a <TIM_Base_SetConfig+0xb2>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a27      	ldr	r2, [pc, #156]	; (8006704 <TIM_Base_SetConfig+0x12c>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d00f      	beq.n	800668a <TIM_Base_SetConfig+0xb2>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a26      	ldr	r2, [pc, #152]	; (8006708 <TIM_Base_SetConfig+0x130>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d00b      	beq.n	800668a <TIM_Base_SetConfig+0xb2>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a25      	ldr	r2, [pc, #148]	; (800670c <TIM_Base_SetConfig+0x134>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d007      	beq.n	800668a <TIM_Base_SetConfig+0xb2>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a24      	ldr	r2, [pc, #144]	; (8006710 <TIM_Base_SetConfig+0x138>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d003      	beq.n	800668a <TIM_Base_SetConfig+0xb2>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a23      	ldr	r2, [pc, #140]	; (8006714 <TIM_Base_SetConfig+0x13c>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d108      	bne.n	800669c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006690:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	4313      	orrs	r3, r2
 800669a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	689a      	ldr	r2, [r3, #8]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a0a      	ldr	r2, [pc, #40]	; (80066ec <TIM_Base_SetConfig+0x114>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d003      	beq.n	80066d0 <TIM_Base_SetConfig+0xf8>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a0c      	ldr	r2, [pc, #48]	; (80066fc <TIM_Base_SetConfig+0x124>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d103      	bne.n	80066d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	691a      	ldr	r2, [r3, #16]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	615a      	str	r2, [r3, #20]
}
 80066de:	bf00      	nop
 80066e0:	3714      	adds	r7, #20
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	40010000 	.word	0x40010000
 80066f0:	40000400 	.word	0x40000400
 80066f4:	40000800 	.word	0x40000800
 80066f8:	40000c00 	.word	0x40000c00
 80066fc:	40010400 	.word	0x40010400
 8006700:	40014000 	.word	0x40014000
 8006704:	40014400 	.word	0x40014400
 8006708:	40014800 	.word	0x40014800
 800670c:	40001800 	.word	0x40001800
 8006710:	40001c00 	.word	0x40001c00
 8006714:	40002000 	.word	0x40002000

08006718 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006718:	b480      	push	{r7}
 800671a:	b087      	sub	sp, #28
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6a1b      	ldr	r3, [r3, #32]
 8006728:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	f023 0201 	bic.w	r2, r3, #1
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006742:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	011b      	lsls	r3, r3, #4
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	4313      	orrs	r3, r2
 800674c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f023 030a 	bic.w	r3, r3, #10
 8006754:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	4313      	orrs	r3, r2
 800675c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	621a      	str	r2, [r3, #32]
}
 800676a:	bf00      	nop
 800676c:	371c      	adds	r7, #28
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr

08006776 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006776:	b480      	push	{r7}
 8006778:	b087      	sub	sp, #28
 800677a:	af00      	add	r7, sp, #0
 800677c:	60f8      	str	r0, [r7, #12]
 800677e:	60b9      	str	r1, [r7, #8]
 8006780:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	f023 0210 	bic.w	r2, r3, #16
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	031b      	lsls	r3, r3, #12
 80067a6:	697a      	ldr	r2, [r7, #20]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	011b      	lsls	r3, r3, #4
 80067b8:	693a      	ldr	r2, [r7, #16]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	697a      	ldr	r2, [r7, #20]
 80067c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	621a      	str	r2, [r3, #32]
}
 80067ca:	bf00      	nop
 80067cc:	371c      	adds	r7, #28
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr

080067d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067d6:	b480      	push	{r7}
 80067d8:	b085      	sub	sp, #20
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
 80067de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	f043 0307 	orr.w	r3, r3, #7
 80067f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	609a      	str	r2, [r3, #8]
}
 8006800:	bf00      	nop
 8006802:	3714      	adds	r7, #20
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800680c:	b480      	push	{r7}
 800680e:	b087      	sub	sp, #28
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
 8006818:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006826:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	021a      	lsls	r2, r3, #8
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	431a      	orrs	r2, r3
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	4313      	orrs	r3, r2
 8006834:	697a      	ldr	r2, [r7, #20]
 8006836:	4313      	orrs	r3, r2
 8006838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	609a      	str	r2, [r3, #8]
}
 8006840:	bf00      	nop
 8006842:	371c      	adds	r7, #28
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800685c:	2b01      	cmp	r3, #1
 800685e:	d101      	bne.n	8006864 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006860:	2302      	movs	r3, #2
 8006862:	e05a      	b.n	800691a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2202      	movs	r2, #2
 8006870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800688a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	4313      	orrs	r3, r2
 8006894:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a21      	ldr	r2, [pc, #132]	; (8006928 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d022      	beq.n	80068ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068b0:	d01d      	beq.n	80068ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a1d      	ldr	r2, [pc, #116]	; (800692c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d018      	beq.n	80068ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a1b      	ldr	r2, [pc, #108]	; (8006930 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d013      	beq.n	80068ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a1a      	ldr	r2, [pc, #104]	; (8006934 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d00e      	beq.n	80068ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a18      	ldr	r2, [pc, #96]	; (8006938 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d009      	beq.n	80068ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a17      	ldr	r2, [pc, #92]	; (800693c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d004      	beq.n	80068ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a15      	ldr	r2, [pc, #84]	; (8006940 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d10c      	bne.n	8006908 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	68ba      	ldr	r2, [r7, #8]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68ba      	ldr	r2, [r7, #8]
 8006906:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3714      	adds	r7, #20
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	40010000 	.word	0x40010000
 800692c:	40000400 	.word	0x40000400
 8006930:	40000800 	.word	0x40000800
 8006934:	40000c00 	.word	0x40000c00
 8006938:	40010400 	.word	0x40010400
 800693c:	40014000 	.word	0x40014000
 8006940:	40001800 	.word	0x40001800

08006944 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d101      	bne.n	8006956 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e03f      	b.n	80069d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800695c:	b2db      	uxtb	r3, r3
 800695e:	2b00      	cmp	r3, #0
 8006960:	d106      	bne.n	8006970 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f7fb fdb2 	bl	80024d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2224      	movs	r2, #36	; 0x24
 8006974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68da      	ldr	r2, [r3, #12]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006986:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 f929 	bl	8006be0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	691a      	ldr	r2, [r3, #16]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800699c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	695a      	ldr	r2, [r3, #20]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68da      	ldr	r2, [r3, #12]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2220      	movs	r2, #32
 80069c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2220      	movs	r2, #32
 80069d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b08a      	sub	sp, #40	; 0x28
 80069e2:	af02      	add	r7, sp, #8
 80069e4:	60f8      	str	r0, [r7, #12]
 80069e6:	60b9      	str	r1, [r7, #8]
 80069e8:	603b      	str	r3, [r7, #0]
 80069ea:	4613      	mov	r3, r2
 80069ec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80069ee:	2300      	movs	r3, #0
 80069f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	2b20      	cmp	r3, #32
 80069fc:	d17c      	bne.n	8006af8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d002      	beq.n	8006a0a <HAL_UART_Transmit+0x2c>
 8006a04:	88fb      	ldrh	r3, [r7, #6]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e075      	b.n	8006afa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d101      	bne.n	8006a1c <HAL_UART_Transmit+0x3e>
 8006a18:	2302      	movs	r3, #2
 8006a1a:	e06e      	b.n	8006afa <HAL_UART_Transmit+0x11c>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2221      	movs	r2, #33	; 0x21
 8006a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a32:	f7fb fead 	bl	8002790 <HAL_GetTick>
 8006a36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	88fa      	ldrh	r2, [r7, #6]
 8006a3c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	88fa      	ldrh	r2, [r7, #6]
 8006a42:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a4c:	d108      	bne.n	8006a60 <HAL_UART_Transmit+0x82>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d104      	bne.n	8006a60 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006a56:	2300      	movs	r3, #0
 8006a58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	61bb      	str	r3, [r7, #24]
 8006a5e:	e003      	b.n	8006a68 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a64:	2300      	movs	r3, #0
 8006a66:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006a70:	e02a      	b.n	8006ac8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	2180      	movs	r1, #128	; 0x80
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f000 f840 	bl	8006b02 <UART_WaitOnFlagUntilTimeout>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d001      	beq.n	8006a8c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e036      	b.n	8006afa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10b      	bne.n	8006aaa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	881b      	ldrh	r3, [r3, #0]
 8006a96:	461a      	mov	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006aa0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	3302      	adds	r3, #2
 8006aa6:	61bb      	str	r3, [r7, #24]
 8006aa8:	e007      	b.n	8006aba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	781a      	ldrb	r2, [r3, #0]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1cf      	bne.n	8006a72 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	9300      	str	r3, [sp, #0]
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	2140      	movs	r1, #64	; 0x40
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f000 f810 	bl	8006b02 <UART_WaitOnFlagUntilTimeout>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d001      	beq.n	8006aec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	e006      	b.n	8006afa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2220      	movs	r2, #32
 8006af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006af4:	2300      	movs	r3, #0
 8006af6:	e000      	b.n	8006afa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006af8:	2302      	movs	r3, #2
  }
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3720      	adds	r7, #32
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b090      	sub	sp, #64	; 0x40
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	60f8      	str	r0, [r7, #12]
 8006b0a:	60b9      	str	r1, [r7, #8]
 8006b0c:	603b      	str	r3, [r7, #0]
 8006b0e:	4613      	mov	r3, r2
 8006b10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b12:	e050      	b.n	8006bb6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b1a:	d04c      	beq.n	8006bb6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006b1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d007      	beq.n	8006b32 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b22:	f7fb fe35 	bl	8002790 <HAL_GetTick>
 8006b26:	4602      	mov	r2, r0
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d241      	bcs.n	8006bb6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	330c      	adds	r3, #12
 8006b38:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3c:	e853 3f00 	ldrex	r3, [r3]
 8006b40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	330c      	adds	r3, #12
 8006b50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b52:	637a      	str	r2, [r7, #52]	; 0x34
 8006b54:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b5a:	e841 2300 	strex	r3, r2, [r1]
 8006b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1e5      	bne.n	8006b32 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	3314      	adds	r3, #20
 8006b6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	e853 3f00 	ldrex	r3, [r3]
 8006b74:	613b      	str	r3, [r7, #16]
   return(result);
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	f023 0301 	bic.w	r3, r3, #1
 8006b7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	3314      	adds	r3, #20
 8006b84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b86:	623a      	str	r2, [r7, #32]
 8006b88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8a:	69f9      	ldr	r1, [r7, #28]
 8006b8c:	6a3a      	ldr	r2, [r7, #32]
 8006b8e:	e841 2300 	strex	r3, r2, [r1]
 8006b92:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1e5      	bne.n	8006b66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2220      	movs	r2, #32
 8006b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2220      	movs	r2, #32
 8006ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e00f      	b.n	8006bd6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	68ba      	ldr	r2, [r7, #8]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	bf0c      	ite	eq
 8006bc6:	2301      	moveq	r3, #1
 8006bc8:	2300      	movne	r3, #0
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	461a      	mov	r2, r3
 8006bce:	79fb      	ldrb	r3, [r7, #7]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d09f      	beq.n	8006b14 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3740      	adds	r7, #64	; 0x40
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
	...

08006be0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006be0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006be4:	b0c0      	sub	sp, #256	; 0x100
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bfc:	68d9      	ldr	r1, [r3, #12]
 8006bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	ea40 0301 	orr.w	r3, r0, r1
 8006c08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c0e:	689a      	ldr	r2, [r3, #8]
 8006c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	431a      	orrs	r2, r3
 8006c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	431a      	orrs	r2, r3
 8006c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c24:	69db      	ldr	r3, [r3, #28]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006c38:	f021 010c 	bic.w	r1, r1, #12
 8006c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c46:	430b      	orrs	r3, r1
 8006c48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c5a:	6999      	ldr	r1, [r3, #24]
 8006c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	ea40 0301 	orr.w	r3, r0, r1
 8006c66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	4b8f      	ldr	r3, [pc, #572]	; (8006eac <UART_SetConfig+0x2cc>)
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d005      	beq.n	8006c80 <UART_SetConfig+0xa0>
 8006c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	4b8d      	ldr	r3, [pc, #564]	; (8006eb0 <UART_SetConfig+0x2d0>)
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d104      	bne.n	8006c8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c80:	f7fe fe48 	bl	8005914 <HAL_RCC_GetPCLK2Freq>
 8006c84:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006c88:	e003      	b.n	8006c92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c8a:	f7fe fe2f 	bl	80058ec <HAL_RCC_GetPCLK1Freq>
 8006c8e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c96:	69db      	ldr	r3, [r3, #28]
 8006c98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c9c:	f040 810c 	bne.w	8006eb8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ca0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006caa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006cae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006cb2:	4622      	mov	r2, r4
 8006cb4:	462b      	mov	r3, r5
 8006cb6:	1891      	adds	r1, r2, r2
 8006cb8:	65b9      	str	r1, [r7, #88]	; 0x58
 8006cba:	415b      	adcs	r3, r3
 8006cbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cbe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006cc2:	4621      	mov	r1, r4
 8006cc4:	eb12 0801 	adds.w	r8, r2, r1
 8006cc8:	4629      	mov	r1, r5
 8006cca:	eb43 0901 	adc.w	r9, r3, r1
 8006cce:	f04f 0200 	mov.w	r2, #0
 8006cd2:	f04f 0300 	mov.w	r3, #0
 8006cd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ce2:	4690      	mov	r8, r2
 8006ce4:	4699      	mov	r9, r3
 8006ce6:	4623      	mov	r3, r4
 8006ce8:	eb18 0303 	adds.w	r3, r8, r3
 8006cec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006cf0:	462b      	mov	r3, r5
 8006cf2:	eb49 0303 	adc.w	r3, r9, r3
 8006cf6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d06:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006d0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006d0e:	460b      	mov	r3, r1
 8006d10:	18db      	adds	r3, r3, r3
 8006d12:	653b      	str	r3, [r7, #80]	; 0x50
 8006d14:	4613      	mov	r3, r2
 8006d16:	eb42 0303 	adc.w	r3, r2, r3
 8006d1a:	657b      	str	r3, [r7, #84]	; 0x54
 8006d1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006d20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006d24:	f7f9 ff92 	bl	8000c4c <__aeabi_uldivmod>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	4b61      	ldr	r3, [pc, #388]	; (8006eb4 <UART_SetConfig+0x2d4>)
 8006d2e:	fba3 2302 	umull	r2, r3, r3, r2
 8006d32:	095b      	lsrs	r3, r3, #5
 8006d34:	011c      	lsls	r4, r3, #4
 8006d36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d40:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006d44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006d48:	4642      	mov	r2, r8
 8006d4a:	464b      	mov	r3, r9
 8006d4c:	1891      	adds	r1, r2, r2
 8006d4e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006d50:	415b      	adcs	r3, r3
 8006d52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006d58:	4641      	mov	r1, r8
 8006d5a:	eb12 0a01 	adds.w	sl, r2, r1
 8006d5e:	4649      	mov	r1, r9
 8006d60:	eb43 0b01 	adc.w	fp, r3, r1
 8006d64:	f04f 0200 	mov.w	r2, #0
 8006d68:	f04f 0300 	mov.w	r3, #0
 8006d6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d78:	4692      	mov	sl, r2
 8006d7a:	469b      	mov	fp, r3
 8006d7c:	4643      	mov	r3, r8
 8006d7e:	eb1a 0303 	adds.w	r3, sl, r3
 8006d82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d86:	464b      	mov	r3, r9
 8006d88:	eb4b 0303 	adc.w	r3, fp, r3
 8006d8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d9c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006da0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006da4:	460b      	mov	r3, r1
 8006da6:	18db      	adds	r3, r3, r3
 8006da8:	643b      	str	r3, [r7, #64]	; 0x40
 8006daa:	4613      	mov	r3, r2
 8006dac:	eb42 0303 	adc.w	r3, r2, r3
 8006db0:	647b      	str	r3, [r7, #68]	; 0x44
 8006db2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006db6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006dba:	f7f9 ff47 	bl	8000c4c <__aeabi_uldivmod>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	4611      	mov	r1, r2
 8006dc4:	4b3b      	ldr	r3, [pc, #236]	; (8006eb4 <UART_SetConfig+0x2d4>)
 8006dc6:	fba3 2301 	umull	r2, r3, r3, r1
 8006dca:	095b      	lsrs	r3, r3, #5
 8006dcc:	2264      	movs	r2, #100	; 0x64
 8006dce:	fb02 f303 	mul.w	r3, r2, r3
 8006dd2:	1acb      	subs	r3, r1, r3
 8006dd4:	00db      	lsls	r3, r3, #3
 8006dd6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006dda:	4b36      	ldr	r3, [pc, #216]	; (8006eb4 <UART_SetConfig+0x2d4>)
 8006ddc:	fba3 2302 	umull	r2, r3, r3, r2
 8006de0:	095b      	lsrs	r3, r3, #5
 8006de2:	005b      	lsls	r3, r3, #1
 8006de4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006de8:	441c      	add	r4, r3
 8006dea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dee:	2200      	movs	r2, #0
 8006df0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006df4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006df8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006dfc:	4642      	mov	r2, r8
 8006dfe:	464b      	mov	r3, r9
 8006e00:	1891      	adds	r1, r2, r2
 8006e02:	63b9      	str	r1, [r7, #56]	; 0x38
 8006e04:	415b      	adcs	r3, r3
 8006e06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006e0c:	4641      	mov	r1, r8
 8006e0e:	1851      	adds	r1, r2, r1
 8006e10:	6339      	str	r1, [r7, #48]	; 0x30
 8006e12:	4649      	mov	r1, r9
 8006e14:	414b      	adcs	r3, r1
 8006e16:	637b      	str	r3, [r7, #52]	; 0x34
 8006e18:	f04f 0200 	mov.w	r2, #0
 8006e1c:	f04f 0300 	mov.w	r3, #0
 8006e20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006e24:	4659      	mov	r1, fp
 8006e26:	00cb      	lsls	r3, r1, #3
 8006e28:	4651      	mov	r1, sl
 8006e2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e2e:	4651      	mov	r1, sl
 8006e30:	00ca      	lsls	r2, r1, #3
 8006e32:	4610      	mov	r0, r2
 8006e34:	4619      	mov	r1, r3
 8006e36:	4603      	mov	r3, r0
 8006e38:	4642      	mov	r2, r8
 8006e3a:	189b      	adds	r3, r3, r2
 8006e3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e40:	464b      	mov	r3, r9
 8006e42:	460a      	mov	r2, r1
 8006e44:	eb42 0303 	adc.w	r3, r2, r3
 8006e48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006e58:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006e5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006e60:	460b      	mov	r3, r1
 8006e62:	18db      	adds	r3, r3, r3
 8006e64:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e66:	4613      	mov	r3, r2
 8006e68:	eb42 0303 	adc.w	r3, r2, r3
 8006e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006e76:	f7f9 fee9 	bl	8000c4c <__aeabi_uldivmod>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	4b0d      	ldr	r3, [pc, #52]	; (8006eb4 <UART_SetConfig+0x2d4>)
 8006e80:	fba3 1302 	umull	r1, r3, r3, r2
 8006e84:	095b      	lsrs	r3, r3, #5
 8006e86:	2164      	movs	r1, #100	; 0x64
 8006e88:	fb01 f303 	mul.w	r3, r1, r3
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	00db      	lsls	r3, r3, #3
 8006e90:	3332      	adds	r3, #50	; 0x32
 8006e92:	4a08      	ldr	r2, [pc, #32]	; (8006eb4 <UART_SetConfig+0x2d4>)
 8006e94:	fba2 2303 	umull	r2, r3, r2, r3
 8006e98:	095b      	lsrs	r3, r3, #5
 8006e9a:	f003 0207 	and.w	r2, r3, #7
 8006e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4422      	add	r2, r4
 8006ea6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ea8:	e106      	b.n	80070b8 <UART_SetConfig+0x4d8>
 8006eaa:	bf00      	nop
 8006eac:	40011000 	.word	0x40011000
 8006eb0:	40011400 	.word	0x40011400
 8006eb4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006eb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006ec2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006ec6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006eca:	4642      	mov	r2, r8
 8006ecc:	464b      	mov	r3, r9
 8006ece:	1891      	adds	r1, r2, r2
 8006ed0:	6239      	str	r1, [r7, #32]
 8006ed2:	415b      	adcs	r3, r3
 8006ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ed6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006eda:	4641      	mov	r1, r8
 8006edc:	1854      	adds	r4, r2, r1
 8006ede:	4649      	mov	r1, r9
 8006ee0:	eb43 0501 	adc.w	r5, r3, r1
 8006ee4:	f04f 0200 	mov.w	r2, #0
 8006ee8:	f04f 0300 	mov.w	r3, #0
 8006eec:	00eb      	lsls	r3, r5, #3
 8006eee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ef2:	00e2      	lsls	r2, r4, #3
 8006ef4:	4614      	mov	r4, r2
 8006ef6:	461d      	mov	r5, r3
 8006ef8:	4643      	mov	r3, r8
 8006efa:	18e3      	adds	r3, r4, r3
 8006efc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006f00:	464b      	mov	r3, r9
 8006f02:	eb45 0303 	adc.w	r3, r5, r3
 8006f06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f1a:	f04f 0200 	mov.w	r2, #0
 8006f1e:	f04f 0300 	mov.w	r3, #0
 8006f22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006f26:	4629      	mov	r1, r5
 8006f28:	008b      	lsls	r3, r1, #2
 8006f2a:	4621      	mov	r1, r4
 8006f2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f30:	4621      	mov	r1, r4
 8006f32:	008a      	lsls	r2, r1, #2
 8006f34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006f38:	f7f9 fe88 	bl	8000c4c <__aeabi_uldivmod>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	460b      	mov	r3, r1
 8006f40:	4b60      	ldr	r3, [pc, #384]	; (80070c4 <UART_SetConfig+0x4e4>)
 8006f42:	fba3 2302 	umull	r2, r3, r3, r2
 8006f46:	095b      	lsrs	r3, r3, #5
 8006f48:	011c      	lsls	r4, r3, #4
 8006f4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006f58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006f5c:	4642      	mov	r2, r8
 8006f5e:	464b      	mov	r3, r9
 8006f60:	1891      	adds	r1, r2, r2
 8006f62:	61b9      	str	r1, [r7, #24]
 8006f64:	415b      	adcs	r3, r3
 8006f66:	61fb      	str	r3, [r7, #28]
 8006f68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f6c:	4641      	mov	r1, r8
 8006f6e:	1851      	adds	r1, r2, r1
 8006f70:	6139      	str	r1, [r7, #16]
 8006f72:	4649      	mov	r1, r9
 8006f74:	414b      	adcs	r3, r1
 8006f76:	617b      	str	r3, [r7, #20]
 8006f78:	f04f 0200 	mov.w	r2, #0
 8006f7c:	f04f 0300 	mov.w	r3, #0
 8006f80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f84:	4659      	mov	r1, fp
 8006f86:	00cb      	lsls	r3, r1, #3
 8006f88:	4651      	mov	r1, sl
 8006f8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f8e:	4651      	mov	r1, sl
 8006f90:	00ca      	lsls	r2, r1, #3
 8006f92:	4610      	mov	r0, r2
 8006f94:	4619      	mov	r1, r3
 8006f96:	4603      	mov	r3, r0
 8006f98:	4642      	mov	r2, r8
 8006f9a:	189b      	adds	r3, r3, r2
 8006f9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006fa0:	464b      	mov	r3, r9
 8006fa2:	460a      	mov	r2, r1
 8006fa4:	eb42 0303 	adc.w	r3, r2, r3
 8006fa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8006fb6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006fb8:	f04f 0200 	mov.w	r2, #0
 8006fbc:	f04f 0300 	mov.w	r3, #0
 8006fc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006fc4:	4649      	mov	r1, r9
 8006fc6:	008b      	lsls	r3, r1, #2
 8006fc8:	4641      	mov	r1, r8
 8006fca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fce:	4641      	mov	r1, r8
 8006fd0:	008a      	lsls	r2, r1, #2
 8006fd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006fd6:	f7f9 fe39 	bl	8000c4c <__aeabi_uldivmod>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	460b      	mov	r3, r1
 8006fde:	4611      	mov	r1, r2
 8006fe0:	4b38      	ldr	r3, [pc, #224]	; (80070c4 <UART_SetConfig+0x4e4>)
 8006fe2:	fba3 2301 	umull	r2, r3, r3, r1
 8006fe6:	095b      	lsrs	r3, r3, #5
 8006fe8:	2264      	movs	r2, #100	; 0x64
 8006fea:	fb02 f303 	mul.w	r3, r2, r3
 8006fee:	1acb      	subs	r3, r1, r3
 8006ff0:	011b      	lsls	r3, r3, #4
 8006ff2:	3332      	adds	r3, #50	; 0x32
 8006ff4:	4a33      	ldr	r2, [pc, #204]	; (80070c4 <UART_SetConfig+0x4e4>)
 8006ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8006ffa:	095b      	lsrs	r3, r3, #5
 8006ffc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007000:	441c      	add	r4, r3
 8007002:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007006:	2200      	movs	r2, #0
 8007008:	673b      	str	r3, [r7, #112]	; 0x70
 800700a:	677a      	str	r2, [r7, #116]	; 0x74
 800700c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007010:	4642      	mov	r2, r8
 8007012:	464b      	mov	r3, r9
 8007014:	1891      	adds	r1, r2, r2
 8007016:	60b9      	str	r1, [r7, #8]
 8007018:	415b      	adcs	r3, r3
 800701a:	60fb      	str	r3, [r7, #12]
 800701c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007020:	4641      	mov	r1, r8
 8007022:	1851      	adds	r1, r2, r1
 8007024:	6039      	str	r1, [r7, #0]
 8007026:	4649      	mov	r1, r9
 8007028:	414b      	adcs	r3, r1
 800702a:	607b      	str	r3, [r7, #4]
 800702c:	f04f 0200 	mov.w	r2, #0
 8007030:	f04f 0300 	mov.w	r3, #0
 8007034:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007038:	4659      	mov	r1, fp
 800703a:	00cb      	lsls	r3, r1, #3
 800703c:	4651      	mov	r1, sl
 800703e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007042:	4651      	mov	r1, sl
 8007044:	00ca      	lsls	r2, r1, #3
 8007046:	4610      	mov	r0, r2
 8007048:	4619      	mov	r1, r3
 800704a:	4603      	mov	r3, r0
 800704c:	4642      	mov	r2, r8
 800704e:	189b      	adds	r3, r3, r2
 8007050:	66bb      	str	r3, [r7, #104]	; 0x68
 8007052:	464b      	mov	r3, r9
 8007054:	460a      	mov	r2, r1
 8007056:	eb42 0303 	adc.w	r3, r2, r3
 800705a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800705c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	663b      	str	r3, [r7, #96]	; 0x60
 8007066:	667a      	str	r2, [r7, #100]	; 0x64
 8007068:	f04f 0200 	mov.w	r2, #0
 800706c:	f04f 0300 	mov.w	r3, #0
 8007070:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007074:	4649      	mov	r1, r9
 8007076:	008b      	lsls	r3, r1, #2
 8007078:	4641      	mov	r1, r8
 800707a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800707e:	4641      	mov	r1, r8
 8007080:	008a      	lsls	r2, r1, #2
 8007082:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007086:	f7f9 fde1 	bl	8000c4c <__aeabi_uldivmod>
 800708a:	4602      	mov	r2, r0
 800708c:	460b      	mov	r3, r1
 800708e:	4b0d      	ldr	r3, [pc, #52]	; (80070c4 <UART_SetConfig+0x4e4>)
 8007090:	fba3 1302 	umull	r1, r3, r3, r2
 8007094:	095b      	lsrs	r3, r3, #5
 8007096:	2164      	movs	r1, #100	; 0x64
 8007098:	fb01 f303 	mul.w	r3, r1, r3
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	011b      	lsls	r3, r3, #4
 80070a0:	3332      	adds	r3, #50	; 0x32
 80070a2:	4a08      	ldr	r2, [pc, #32]	; (80070c4 <UART_SetConfig+0x4e4>)
 80070a4:	fba2 2303 	umull	r2, r3, r2, r3
 80070a8:	095b      	lsrs	r3, r3, #5
 80070aa:	f003 020f 	and.w	r2, r3, #15
 80070ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4422      	add	r2, r4
 80070b6:	609a      	str	r2, [r3, #8]
}
 80070b8:	bf00      	nop
 80070ba:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80070be:	46bd      	mov	sp, r7
 80070c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070c4:	51eb851f 	.word	0x51eb851f

080070c8 <siprintf>:
 80070c8:	b40e      	push	{r1, r2, r3}
 80070ca:	b500      	push	{lr}
 80070cc:	b09c      	sub	sp, #112	; 0x70
 80070ce:	ab1d      	add	r3, sp, #116	; 0x74
 80070d0:	9002      	str	r0, [sp, #8]
 80070d2:	9006      	str	r0, [sp, #24]
 80070d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80070d8:	4809      	ldr	r0, [pc, #36]	; (8007100 <siprintf+0x38>)
 80070da:	9107      	str	r1, [sp, #28]
 80070dc:	9104      	str	r1, [sp, #16]
 80070de:	4909      	ldr	r1, [pc, #36]	; (8007104 <siprintf+0x3c>)
 80070e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80070e4:	9105      	str	r1, [sp, #20]
 80070e6:	6800      	ldr	r0, [r0, #0]
 80070e8:	9301      	str	r3, [sp, #4]
 80070ea:	a902      	add	r1, sp, #8
 80070ec:	f000 f89a 	bl	8007224 <_svfiprintf_r>
 80070f0:	9b02      	ldr	r3, [sp, #8]
 80070f2:	2200      	movs	r2, #0
 80070f4:	701a      	strb	r2, [r3, #0]
 80070f6:	b01c      	add	sp, #112	; 0x70
 80070f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80070fc:	b003      	add	sp, #12
 80070fe:	4770      	bx	lr
 8007100:	20000068 	.word	0x20000068
 8007104:	ffff0208 	.word	0xffff0208

08007108 <memset>:
 8007108:	4402      	add	r2, r0
 800710a:	4603      	mov	r3, r0
 800710c:	4293      	cmp	r3, r2
 800710e:	d100      	bne.n	8007112 <memset+0xa>
 8007110:	4770      	bx	lr
 8007112:	f803 1b01 	strb.w	r1, [r3], #1
 8007116:	e7f9      	b.n	800710c <memset+0x4>

08007118 <__errno>:
 8007118:	4b01      	ldr	r3, [pc, #4]	; (8007120 <__errno+0x8>)
 800711a:	6818      	ldr	r0, [r3, #0]
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	20000068 	.word	0x20000068

08007124 <__libc_init_array>:
 8007124:	b570      	push	{r4, r5, r6, lr}
 8007126:	4d0d      	ldr	r5, [pc, #52]	; (800715c <__libc_init_array+0x38>)
 8007128:	4c0d      	ldr	r4, [pc, #52]	; (8007160 <__libc_init_array+0x3c>)
 800712a:	1b64      	subs	r4, r4, r5
 800712c:	10a4      	asrs	r4, r4, #2
 800712e:	2600      	movs	r6, #0
 8007130:	42a6      	cmp	r6, r4
 8007132:	d109      	bne.n	8007148 <__libc_init_array+0x24>
 8007134:	4d0b      	ldr	r5, [pc, #44]	; (8007164 <__libc_init_array+0x40>)
 8007136:	4c0c      	ldr	r4, [pc, #48]	; (8007168 <__libc_init_array+0x44>)
 8007138:	f000 fc6a 	bl	8007a10 <_init>
 800713c:	1b64      	subs	r4, r4, r5
 800713e:	10a4      	asrs	r4, r4, #2
 8007140:	2600      	movs	r6, #0
 8007142:	42a6      	cmp	r6, r4
 8007144:	d105      	bne.n	8007152 <__libc_init_array+0x2e>
 8007146:	bd70      	pop	{r4, r5, r6, pc}
 8007148:	f855 3b04 	ldr.w	r3, [r5], #4
 800714c:	4798      	blx	r3
 800714e:	3601      	adds	r6, #1
 8007150:	e7ee      	b.n	8007130 <__libc_init_array+0xc>
 8007152:	f855 3b04 	ldr.w	r3, [r5], #4
 8007156:	4798      	blx	r3
 8007158:	3601      	adds	r6, #1
 800715a:	e7f2      	b.n	8007142 <__libc_init_array+0x1e>
 800715c:	08007acc 	.word	0x08007acc
 8007160:	08007acc 	.word	0x08007acc
 8007164:	08007acc 	.word	0x08007acc
 8007168:	08007ad0 	.word	0x08007ad0

0800716c <__retarget_lock_acquire_recursive>:
 800716c:	4770      	bx	lr

0800716e <__retarget_lock_release_recursive>:
 800716e:	4770      	bx	lr

08007170 <__ssputs_r>:
 8007170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007174:	688e      	ldr	r6, [r1, #8]
 8007176:	461f      	mov	r7, r3
 8007178:	42be      	cmp	r6, r7
 800717a:	680b      	ldr	r3, [r1, #0]
 800717c:	4682      	mov	sl, r0
 800717e:	460c      	mov	r4, r1
 8007180:	4690      	mov	r8, r2
 8007182:	d82c      	bhi.n	80071de <__ssputs_r+0x6e>
 8007184:	898a      	ldrh	r2, [r1, #12]
 8007186:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800718a:	d026      	beq.n	80071da <__ssputs_r+0x6a>
 800718c:	6965      	ldr	r5, [r4, #20]
 800718e:	6909      	ldr	r1, [r1, #16]
 8007190:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007194:	eba3 0901 	sub.w	r9, r3, r1
 8007198:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800719c:	1c7b      	adds	r3, r7, #1
 800719e:	444b      	add	r3, r9
 80071a0:	106d      	asrs	r5, r5, #1
 80071a2:	429d      	cmp	r5, r3
 80071a4:	bf38      	it	cc
 80071a6:	461d      	movcc	r5, r3
 80071a8:	0553      	lsls	r3, r2, #21
 80071aa:	d527      	bpl.n	80071fc <__ssputs_r+0x8c>
 80071ac:	4629      	mov	r1, r5
 80071ae:	f000 f957 	bl	8007460 <_malloc_r>
 80071b2:	4606      	mov	r6, r0
 80071b4:	b360      	cbz	r0, 8007210 <__ssputs_r+0xa0>
 80071b6:	6921      	ldr	r1, [r4, #16]
 80071b8:	464a      	mov	r2, r9
 80071ba:	f000 fbc7 	bl	800794c <memcpy>
 80071be:	89a3      	ldrh	r3, [r4, #12]
 80071c0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80071c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071c8:	81a3      	strh	r3, [r4, #12]
 80071ca:	6126      	str	r6, [r4, #16]
 80071cc:	6165      	str	r5, [r4, #20]
 80071ce:	444e      	add	r6, r9
 80071d0:	eba5 0509 	sub.w	r5, r5, r9
 80071d4:	6026      	str	r6, [r4, #0]
 80071d6:	60a5      	str	r5, [r4, #8]
 80071d8:	463e      	mov	r6, r7
 80071da:	42be      	cmp	r6, r7
 80071dc:	d900      	bls.n	80071e0 <__ssputs_r+0x70>
 80071de:	463e      	mov	r6, r7
 80071e0:	6820      	ldr	r0, [r4, #0]
 80071e2:	4632      	mov	r2, r6
 80071e4:	4641      	mov	r1, r8
 80071e6:	f000 fb86 	bl	80078f6 <memmove>
 80071ea:	68a3      	ldr	r3, [r4, #8]
 80071ec:	1b9b      	subs	r3, r3, r6
 80071ee:	60a3      	str	r3, [r4, #8]
 80071f0:	6823      	ldr	r3, [r4, #0]
 80071f2:	4433      	add	r3, r6
 80071f4:	6023      	str	r3, [r4, #0]
 80071f6:	2000      	movs	r0, #0
 80071f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071fc:	462a      	mov	r2, r5
 80071fe:	f000 fb4b 	bl	8007898 <_realloc_r>
 8007202:	4606      	mov	r6, r0
 8007204:	2800      	cmp	r0, #0
 8007206:	d1e0      	bne.n	80071ca <__ssputs_r+0x5a>
 8007208:	6921      	ldr	r1, [r4, #16]
 800720a:	4650      	mov	r0, sl
 800720c:	f000 fbac 	bl	8007968 <_free_r>
 8007210:	230c      	movs	r3, #12
 8007212:	f8ca 3000 	str.w	r3, [sl]
 8007216:	89a3      	ldrh	r3, [r4, #12]
 8007218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800721c:	81a3      	strh	r3, [r4, #12]
 800721e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007222:	e7e9      	b.n	80071f8 <__ssputs_r+0x88>

08007224 <_svfiprintf_r>:
 8007224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007228:	4698      	mov	r8, r3
 800722a:	898b      	ldrh	r3, [r1, #12]
 800722c:	061b      	lsls	r3, r3, #24
 800722e:	b09d      	sub	sp, #116	; 0x74
 8007230:	4607      	mov	r7, r0
 8007232:	460d      	mov	r5, r1
 8007234:	4614      	mov	r4, r2
 8007236:	d50e      	bpl.n	8007256 <_svfiprintf_r+0x32>
 8007238:	690b      	ldr	r3, [r1, #16]
 800723a:	b963      	cbnz	r3, 8007256 <_svfiprintf_r+0x32>
 800723c:	2140      	movs	r1, #64	; 0x40
 800723e:	f000 f90f 	bl	8007460 <_malloc_r>
 8007242:	6028      	str	r0, [r5, #0]
 8007244:	6128      	str	r0, [r5, #16]
 8007246:	b920      	cbnz	r0, 8007252 <_svfiprintf_r+0x2e>
 8007248:	230c      	movs	r3, #12
 800724a:	603b      	str	r3, [r7, #0]
 800724c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007250:	e0d0      	b.n	80073f4 <_svfiprintf_r+0x1d0>
 8007252:	2340      	movs	r3, #64	; 0x40
 8007254:	616b      	str	r3, [r5, #20]
 8007256:	2300      	movs	r3, #0
 8007258:	9309      	str	r3, [sp, #36]	; 0x24
 800725a:	2320      	movs	r3, #32
 800725c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007260:	f8cd 800c 	str.w	r8, [sp, #12]
 8007264:	2330      	movs	r3, #48	; 0x30
 8007266:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800740c <_svfiprintf_r+0x1e8>
 800726a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800726e:	f04f 0901 	mov.w	r9, #1
 8007272:	4623      	mov	r3, r4
 8007274:	469a      	mov	sl, r3
 8007276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800727a:	b10a      	cbz	r2, 8007280 <_svfiprintf_r+0x5c>
 800727c:	2a25      	cmp	r2, #37	; 0x25
 800727e:	d1f9      	bne.n	8007274 <_svfiprintf_r+0x50>
 8007280:	ebba 0b04 	subs.w	fp, sl, r4
 8007284:	d00b      	beq.n	800729e <_svfiprintf_r+0x7a>
 8007286:	465b      	mov	r3, fp
 8007288:	4622      	mov	r2, r4
 800728a:	4629      	mov	r1, r5
 800728c:	4638      	mov	r0, r7
 800728e:	f7ff ff6f 	bl	8007170 <__ssputs_r>
 8007292:	3001      	adds	r0, #1
 8007294:	f000 80a9 	beq.w	80073ea <_svfiprintf_r+0x1c6>
 8007298:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800729a:	445a      	add	r2, fp
 800729c:	9209      	str	r2, [sp, #36]	; 0x24
 800729e:	f89a 3000 	ldrb.w	r3, [sl]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	f000 80a1 	beq.w	80073ea <_svfiprintf_r+0x1c6>
 80072a8:	2300      	movs	r3, #0
 80072aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072b2:	f10a 0a01 	add.w	sl, sl, #1
 80072b6:	9304      	str	r3, [sp, #16]
 80072b8:	9307      	str	r3, [sp, #28]
 80072ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072be:	931a      	str	r3, [sp, #104]	; 0x68
 80072c0:	4654      	mov	r4, sl
 80072c2:	2205      	movs	r2, #5
 80072c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072c8:	4850      	ldr	r0, [pc, #320]	; (800740c <_svfiprintf_r+0x1e8>)
 80072ca:	f7f8 ffa1 	bl	8000210 <memchr>
 80072ce:	9a04      	ldr	r2, [sp, #16]
 80072d0:	b9d8      	cbnz	r0, 800730a <_svfiprintf_r+0xe6>
 80072d2:	06d0      	lsls	r0, r2, #27
 80072d4:	bf44      	itt	mi
 80072d6:	2320      	movmi	r3, #32
 80072d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072dc:	0711      	lsls	r1, r2, #28
 80072de:	bf44      	itt	mi
 80072e0:	232b      	movmi	r3, #43	; 0x2b
 80072e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072e6:	f89a 3000 	ldrb.w	r3, [sl]
 80072ea:	2b2a      	cmp	r3, #42	; 0x2a
 80072ec:	d015      	beq.n	800731a <_svfiprintf_r+0xf6>
 80072ee:	9a07      	ldr	r2, [sp, #28]
 80072f0:	4654      	mov	r4, sl
 80072f2:	2000      	movs	r0, #0
 80072f4:	f04f 0c0a 	mov.w	ip, #10
 80072f8:	4621      	mov	r1, r4
 80072fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072fe:	3b30      	subs	r3, #48	; 0x30
 8007300:	2b09      	cmp	r3, #9
 8007302:	d94d      	bls.n	80073a0 <_svfiprintf_r+0x17c>
 8007304:	b1b0      	cbz	r0, 8007334 <_svfiprintf_r+0x110>
 8007306:	9207      	str	r2, [sp, #28]
 8007308:	e014      	b.n	8007334 <_svfiprintf_r+0x110>
 800730a:	eba0 0308 	sub.w	r3, r0, r8
 800730e:	fa09 f303 	lsl.w	r3, r9, r3
 8007312:	4313      	orrs	r3, r2
 8007314:	9304      	str	r3, [sp, #16]
 8007316:	46a2      	mov	sl, r4
 8007318:	e7d2      	b.n	80072c0 <_svfiprintf_r+0x9c>
 800731a:	9b03      	ldr	r3, [sp, #12]
 800731c:	1d19      	adds	r1, r3, #4
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	9103      	str	r1, [sp, #12]
 8007322:	2b00      	cmp	r3, #0
 8007324:	bfbb      	ittet	lt
 8007326:	425b      	neglt	r3, r3
 8007328:	f042 0202 	orrlt.w	r2, r2, #2
 800732c:	9307      	strge	r3, [sp, #28]
 800732e:	9307      	strlt	r3, [sp, #28]
 8007330:	bfb8      	it	lt
 8007332:	9204      	strlt	r2, [sp, #16]
 8007334:	7823      	ldrb	r3, [r4, #0]
 8007336:	2b2e      	cmp	r3, #46	; 0x2e
 8007338:	d10c      	bne.n	8007354 <_svfiprintf_r+0x130>
 800733a:	7863      	ldrb	r3, [r4, #1]
 800733c:	2b2a      	cmp	r3, #42	; 0x2a
 800733e:	d134      	bne.n	80073aa <_svfiprintf_r+0x186>
 8007340:	9b03      	ldr	r3, [sp, #12]
 8007342:	1d1a      	adds	r2, r3, #4
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	9203      	str	r2, [sp, #12]
 8007348:	2b00      	cmp	r3, #0
 800734a:	bfb8      	it	lt
 800734c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007350:	3402      	adds	r4, #2
 8007352:	9305      	str	r3, [sp, #20]
 8007354:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800741c <_svfiprintf_r+0x1f8>
 8007358:	7821      	ldrb	r1, [r4, #0]
 800735a:	2203      	movs	r2, #3
 800735c:	4650      	mov	r0, sl
 800735e:	f7f8 ff57 	bl	8000210 <memchr>
 8007362:	b138      	cbz	r0, 8007374 <_svfiprintf_r+0x150>
 8007364:	9b04      	ldr	r3, [sp, #16]
 8007366:	eba0 000a 	sub.w	r0, r0, sl
 800736a:	2240      	movs	r2, #64	; 0x40
 800736c:	4082      	lsls	r2, r0
 800736e:	4313      	orrs	r3, r2
 8007370:	3401      	adds	r4, #1
 8007372:	9304      	str	r3, [sp, #16]
 8007374:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007378:	4825      	ldr	r0, [pc, #148]	; (8007410 <_svfiprintf_r+0x1ec>)
 800737a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800737e:	2206      	movs	r2, #6
 8007380:	f7f8 ff46 	bl	8000210 <memchr>
 8007384:	2800      	cmp	r0, #0
 8007386:	d038      	beq.n	80073fa <_svfiprintf_r+0x1d6>
 8007388:	4b22      	ldr	r3, [pc, #136]	; (8007414 <_svfiprintf_r+0x1f0>)
 800738a:	bb1b      	cbnz	r3, 80073d4 <_svfiprintf_r+0x1b0>
 800738c:	9b03      	ldr	r3, [sp, #12]
 800738e:	3307      	adds	r3, #7
 8007390:	f023 0307 	bic.w	r3, r3, #7
 8007394:	3308      	adds	r3, #8
 8007396:	9303      	str	r3, [sp, #12]
 8007398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800739a:	4433      	add	r3, r6
 800739c:	9309      	str	r3, [sp, #36]	; 0x24
 800739e:	e768      	b.n	8007272 <_svfiprintf_r+0x4e>
 80073a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80073a4:	460c      	mov	r4, r1
 80073a6:	2001      	movs	r0, #1
 80073a8:	e7a6      	b.n	80072f8 <_svfiprintf_r+0xd4>
 80073aa:	2300      	movs	r3, #0
 80073ac:	3401      	adds	r4, #1
 80073ae:	9305      	str	r3, [sp, #20]
 80073b0:	4619      	mov	r1, r3
 80073b2:	f04f 0c0a 	mov.w	ip, #10
 80073b6:	4620      	mov	r0, r4
 80073b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073bc:	3a30      	subs	r2, #48	; 0x30
 80073be:	2a09      	cmp	r2, #9
 80073c0:	d903      	bls.n	80073ca <_svfiprintf_r+0x1a6>
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d0c6      	beq.n	8007354 <_svfiprintf_r+0x130>
 80073c6:	9105      	str	r1, [sp, #20]
 80073c8:	e7c4      	b.n	8007354 <_svfiprintf_r+0x130>
 80073ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80073ce:	4604      	mov	r4, r0
 80073d0:	2301      	movs	r3, #1
 80073d2:	e7f0      	b.n	80073b6 <_svfiprintf_r+0x192>
 80073d4:	ab03      	add	r3, sp, #12
 80073d6:	9300      	str	r3, [sp, #0]
 80073d8:	462a      	mov	r2, r5
 80073da:	4b0f      	ldr	r3, [pc, #60]	; (8007418 <_svfiprintf_r+0x1f4>)
 80073dc:	a904      	add	r1, sp, #16
 80073de:	4638      	mov	r0, r7
 80073e0:	f3af 8000 	nop.w
 80073e4:	1c42      	adds	r2, r0, #1
 80073e6:	4606      	mov	r6, r0
 80073e8:	d1d6      	bne.n	8007398 <_svfiprintf_r+0x174>
 80073ea:	89ab      	ldrh	r3, [r5, #12]
 80073ec:	065b      	lsls	r3, r3, #25
 80073ee:	f53f af2d 	bmi.w	800724c <_svfiprintf_r+0x28>
 80073f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073f4:	b01d      	add	sp, #116	; 0x74
 80073f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073fa:	ab03      	add	r3, sp, #12
 80073fc:	9300      	str	r3, [sp, #0]
 80073fe:	462a      	mov	r2, r5
 8007400:	4b05      	ldr	r3, [pc, #20]	; (8007418 <_svfiprintf_r+0x1f4>)
 8007402:	a904      	add	r1, sp, #16
 8007404:	4638      	mov	r0, r7
 8007406:	f000 f919 	bl	800763c <_printf_i>
 800740a:	e7eb      	b.n	80073e4 <_svfiprintf_r+0x1c0>
 800740c:	08007a90 	.word	0x08007a90
 8007410:	08007a9a 	.word	0x08007a9a
 8007414:	00000000 	.word	0x00000000
 8007418:	08007171 	.word	0x08007171
 800741c:	08007a96 	.word	0x08007a96

08007420 <sbrk_aligned>:
 8007420:	b570      	push	{r4, r5, r6, lr}
 8007422:	4e0e      	ldr	r6, [pc, #56]	; (800745c <sbrk_aligned+0x3c>)
 8007424:	460c      	mov	r4, r1
 8007426:	6831      	ldr	r1, [r6, #0]
 8007428:	4605      	mov	r5, r0
 800742a:	b911      	cbnz	r1, 8007432 <sbrk_aligned+0x12>
 800742c:	f000 fa7e 	bl	800792c <_sbrk_r>
 8007430:	6030      	str	r0, [r6, #0]
 8007432:	4621      	mov	r1, r4
 8007434:	4628      	mov	r0, r5
 8007436:	f000 fa79 	bl	800792c <_sbrk_r>
 800743a:	1c43      	adds	r3, r0, #1
 800743c:	d00a      	beq.n	8007454 <sbrk_aligned+0x34>
 800743e:	1cc4      	adds	r4, r0, #3
 8007440:	f024 0403 	bic.w	r4, r4, #3
 8007444:	42a0      	cmp	r0, r4
 8007446:	d007      	beq.n	8007458 <sbrk_aligned+0x38>
 8007448:	1a21      	subs	r1, r4, r0
 800744a:	4628      	mov	r0, r5
 800744c:	f000 fa6e 	bl	800792c <_sbrk_r>
 8007450:	3001      	adds	r0, #1
 8007452:	d101      	bne.n	8007458 <sbrk_aligned+0x38>
 8007454:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007458:	4620      	mov	r0, r4
 800745a:	bd70      	pop	{r4, r5, r6, pc}
 800745c:	20000414 	.word	0x20000414

08007460 <_malloc_r>:
 8007460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007464:	1ccd      	adds	r5, r1, #3
 8007466:	f025 0503 	bic.w	r5, r5, #3
 800746a:	3508      	adds	r5, #8
 800746c:	2d0c      	cmp	r5, #12
 800746e:	bf38      	it	cc
 8007470:	250c      	movcc	r5, #12
 8007472:	2d00      	cmp	r5, #0
 8007474:	4607      	mov	r7, r0
 8007476:	db01      	blt.n	800747c <_malloc_r+0x1c>
 8007478:	42a9      	cmp	r1, r5
 800747a:	d905      	bls.n	8007488 <_malloc_r+0x28>
 800747c:	230c      	movs	r3, #12
 800747e:	603b      	str	r3, [r7, #0]
 8007480:	2600      	movs	r6, #0
 8007482:	4630      	mov	r0, r6
 8007484:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007488:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800755c <_malloc_r+0xfc>
 800748c:	f000 f9f8 	bl	8007880 <__malloc_lock>
 8007490:	f8d8 3000 	ldr.w	r3, [r8]
 8007494:	461c      	mov	r4, r3
 8007496:	bb5c      	cbnz	r4, 80074f0 <_malloc_r+0x90>
 8007498:	4629      	mov	r1, r5
 800749a:	4638      	mov	r0, r7
 800749c:	f7ff ffc0 	bl	8007420 <sbrk_aligned>
 80074a0:	1c43      	adds	r3, r0, #1
 80074a2:	4604      	mov	r4, r0
 80074a4:	d155      	bne.n	8007552 <_malloc_r+0xf2>
 80074a6:	f8d8 4000 	ldr.w	r4, [r8]
 80074aa:	4626      	mov	r6, r4
 80074ac:	2e00      	cmp	r6, #0
 80074ae:	d145      	bne.n	800753c <_malloc_r+0xdc>
 80074b0:	2c00      	cmp	r4, #0
 80074b2:	d048      	beq.n	8007546 <_malloc_r+0xe6>
 80074b4:	6823      	ldr	r3, [r4, #0]
 80074b6:	4631      	mov	r1, r6
 80074b8:	4638      	mov	r0, r7
 80074ba:	eb04 0903 	add.w	r9, r4, r3
 80074be:	f000 fa35 	bl	800792c <_sbrk_r>
 80074c2:	4581      	cmp	r9, r0
 80074c4:	d13f      	bne.n	8007546 <_malloc_r+0xe6>
 80074c6:	6821      	ldr	r1, [r4, #0]
 80074c8:	1a6d      	subs	r5, r5, r1
 80074ca:	4629      	mov	r1, r5
 80074cc:	4638      	mov	r0, r7
 80074ce:	f7ff ffa7 	bl	8007420 <sbrk_aligned>
 80074d2:	3001      	adds	r0, #1
 80074d4:	d037      	beq.n	8007546 <_malloc_r+0xe6>
 80074d6:	6823      	ldr	r3, [r4, #0]
 80074d8:	442b      	add	r3, r5
 80074da:	6023      	str	r3, [r4, #0]
 80074dc:	f8d8 3000 	ldr.w	r3, [r8]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d038      	beq.n	8007556 <_malloc_r+0xf6>
 80074e4:	685a      	ldr	r2, [r3, #4]
 80074e6:	42a2      	cmp	r2, r4
 80074e8:	d12b      	bne.n	8007542 <_malloc_r+0xe2>
 80074ea:	2200      	movs	r2, #0
 80074ec:	605a      	str	r2, [r3, #4]
 80074ee:	e00f      	b.n	8007510 <_malloc_r+0xb0>
 80074f0:	6822      	ldr	r2, [r4, #0]
 80074f2:	1b52      	subs	r2, r2, r5
 80074f4:	d41f      	bmi.n	8007536 <_malloc_r+0xd6>
 80074f6:	2a0b      	cmp	r2, #11
 80074f8:	d917      	bls.n	800752a <_malloc_r+0xca>
 80074fa:	1961      	adds	r1, r4, r5
 80074fc:	42a3      	cmp	r3, r4
 80074fe:	6025      	str	r5, [r4, #0]
 8007500:	bf18      	it	ne
 8007502:	6059      	strne	r1, [r3, #4]
 8007504:	6863      	ldr	r3, [r4, #4]
 8007506:	bf08      	it	eq
 8007508:	f8c8 1000 	streq.w	r1, [r8]
 800750c:	5162      	str	r2, [r4, r5]
 800750e:	604b      	str	r3, [r1, #4]
 8007510:	4638      	mov	r0, r7
 8007512:	f104 060b 	add.w	r6, r4, #11
 8007516:	f000 f9b9 	bl	800788c <__malloc_unlock>
 800751a:	f026 0607 	bic.w	r6, r6, #7
 800751e:	1d23      	adds	r3, r4, #4
 8007520:	1af2      	subs	r2, r6, r3
 8007522:	d0ae      	beq.n	8007482 <_malloc_r+0x22>
 8007524:	1b9b      	subs	r3, r3, r6
 8007526:	50a3      	str	r3, [r4, r2]
 8007528:	e7ab      	b.n	8007482 <_malloc_r+0x22>
 800752a:	42a3      	cmp	r3, r4
 800752c:	6862      	ldr	r2, [r4, #4]
 800752e:	d1dd      	bne.n	80074ec <_malloc_r+0x8c>
 8007530:	f8c8 2000 	str.w	r2, [r8]
 8007534:	e7ec      	b.n	8007510 <_malloc_r+0xb0>
 8007536:	4623      	mov	r3, r4
 8007538:	6864      	ldr	r4, [r4, #4]
 800753a:	e7ac      	b.n	8007496 <_malloc_r+0x36>
 800753c:	4634      	mov	r4, r6
 800753e:	6876      	ldr	r6, [r6, #4]
 8007540:	e7b4      	b.n	80074ac <_malloc_r+0x4c>
 8007542:	4613      	mov	r3, r2
 8007544:	e7cc      	b.n	80074e0 <_malloc_r+0x80>
 8007546:	230c      	movs	r3, #12
 8007548:	603b      	str	r3, [r7, #0]
 800754a:	4638      	mov	r0, r7
 800754c:	f000 f99e 	bl	800788c <__malloc_unlock>
 8007550:	e797      	b.n	8007482 <_malloc_r+0x22>
 8007552:	6025      	str	r5, [r4, #0]
 8007554:	e7dc      	b.n	8007510 <_malloc_r+0xb0>
 8007556:	605b      	str	r3, [r3, #4]
 8007558:	deff      	udf	#255	; 0xff
 800755a:	bf00      	nop
 800755c:	20000410 	.word	0x20000410

08007560 <_printf_common>:
 8007560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007564:	4616      	mov	r6, r2
 8007566:	4699      	mov	r9, r3
 8007568:	688a      	ldr	r2, [r1, #8]
 800756a:	690b      	ldr	r3, [r1, #16]
 800756c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007570:	4293      	cmp	r3, r2
 8007572:	bfb8      	it	lt
 8007574:	4613      	movlt	r3, r2
 8007576:	6033      	str	r3, [r6, #0]
 8007578:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800757c:	4607      	mov	r7, r0
 800757e:	460c      	mov	r4, r1
 8007580:	b10a      	cbz	r2, 8007586 <_printf_common+0x26>
 8007582:	3301      	adds	r3, #1
 8007584:	6033      	str	r3, [r6, #0]
 8007586:	6823      	ldr	r3, [r4, #0]
 8007588:	0699      	lsls	r1, r3, #26
 800758a:	bf42      	ittt	mi
 800758c:	6833      	ldrmi	r3, [r6, #0]
 800758e:	3302      	addmi	r3, #2
 8007590:	6033      	strmi	r3, [r6, #0]
 8007592:	6825      	ldr	r5, [r4, #0]
 8007594:	f015 0506 	ands.w	r5, r5, #6
 8007598:	d106      	bne.n	80075a8 <_printf_common+0x48>
 800759a:	f104 0a19 	add.w	sl, r4, #25
 800759e:	68e3      	ldr	r3, [r4, #12]
 80075a0:	6832      	ldr	r2, [r6, #0]
 80075a2:	1a9b      	subs	r3, r3, r2
 80075a4:	42ab      	cmp	r3, r5
 80075a6:	dc26      	bgt.n	80075f6 <_printf_common+0x96>
 80075a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80075ac:	1e13      	subs	r3, r2, #0
 80075ae:	6822      	ldr	r2, [r4, #0]
 80075b0:	bf18      	it	ne
 80075b2:	2301      	movne	r3, #1
 80075b4:	0692      	lsls	r2, r2, #26
 80075b6:	d42b      	bmi.n	8007610 <_printf_common+0xb0>
 80075b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075bc:	4649      	mov	r1, r9
 80075be:	4638      	mov	r0, r7
 80075c0:	47c0      	blx	r8
 80075c2:	3001      	adds	r0, #1
 80075c4:	d01e      	beq.n	8007604 <_printf_common+0xa4>
 80075c6:	6823      	ldr	r3, [r4, #0]
 80075c8:	6922      	ldr	r2, [r4, #16]
 80075ca:	f003 0306 	and.w	r3, r3, #6
 80075ce:	2b04      	cmp	r3, #4
 80075d0:	bf02      	ittt	eq
 80075d2:	68e5      	ldreq	r5, [r4, #12]
 80075d4:	6833      	ldreq	r3, [r6, #0]
 80075d6:	1aed      	subeq	r5, r5, r3
 80075d8:	68a3      	ldr	r3, [r4, #8]
 80075da:	bf0c      	ite	eq
 80075dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075e0:	2500      	movne	r5, #0
 80075e2:	4293      	cmp	r3, r2
 80075e4:	bfc4      	itt	gt
 80075e6:	1a9b      	subgt	r3, r3, r2
 80075e8:	18ed      	addgt	r5, r5, r3
 80075ea:	2600      	movs	r6, #0
 80075ec:	341a      	adds	r4, #26
 80075ee:	42b5      	cmp	r5, r6
 80075f0:	d11a      	bne.n	8007628 <_printf_common+0xc8>
 80075f2:	2000      	movs	r0, #0
 80075f4:	e008      	b.n	8007608 <_printf_common+0xa8>
 80075f6:	2301      	movs	r3, #1
 80075f8:	4652      	mov	r2, sl
 80075fa:	4649      	mov	r1, r9
 80075fc:	4638      	mov	r0, r7
 80075fe:	47c0      	blx	r8
 8007600:	3001      	adds	r0, #1
 8007602:	d103      	bne.n	800760c <_printf_common+0xac>
 8007604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800760c:	3501      	adds	r5, #1
 800760e:	e7c6      	b.n	800759e <_printf_common+0x3e>
 8007610:	18e1      	adds	r1, r4, r3
 8007612:	1c5a      	adds	r2, r3, #1
 8007614:	2030      	movs	r0, #48	; 0x30
 8007616:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800761a:	4422      	add	r2, r4
 800761c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007620:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007624:	3302      	adds	r3, #2
 8007626:	e7c7      	b.n	80075b8 <_printf_common+0x58>
 8007628:	2301      	movs	r3, #1
 800762a:	4622      	mov	r2, r4
 800762c:	4649      	mov	r1, r9
 800762e:	4638      	mov	r0, r7
 8007630:	47c0      	blx	r8
 8007632:	3001      	adds	r0, #1
 8007634:	d0e6      	beq.n	8007604 <_printf_common+0xa4>
 8007636:	3601      	adds	r6, #1
 8007638:	e7d9      	b.n	80075ee <_printf_common+0x8e>
	...

0800763c <_printf_i>:
 800763c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007640:	7e0f      	ldrb	r7, [r1, #24]
 8007642:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007644:	2f78      	cmp	r7, #120	; 0x78
 8007646:	4691      	mov	r9, r2
 8007648:	4680      	mov	r8, r0
 800764a:	460c      	mov	r4, r1
 800764c:	469a      	mov	sl, r3
 800764e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007652:	d807      	bhi.n	8007664 <_printf_i+0x28>
 8007654:	2f62      	cmp	r7, #98	; 0x62
 8007656:	d80a      	bhi.n	800766e <_printf_i+0x32>
 8007658:	2f00      	cmp	r7, #0
 800765a:	f000 80d4 	beq.w	8007806 <_printf_i+0x1ca>
 800765e:	2f58      	cmp	r7, #88	; 0x58
 8007660:	f000 80c0 	beq.w	80077e4 <_printf_i+0x1a8>
 8007664:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007668:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800766c:	e03a      	b.n	80076e4 <_printf_i+0xa8>
 800766e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007672:	2b15      	cmp	r3, #21
 8007674:	d8f6      	bhi.n	8007664 <_printf_i+0x28>
 8007676:	a101      	add	r1, pc, #4	; (adr r1, 800767c <_printf_i+0x40>)
 8007678:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800767c:	080076d5 	.word	0x080076d5
 8007680:	080076e9 	.word	0x080076e9
 8007684:	08007665 	.word	0x08007665
 8007688:	08007665 	.word	0x08007665
 800768c:	08007665 	.word	0x08007665
 8007690:	08007665 	.word	0x08007665
 8007694:	080076e9 	.word	0x080076e9
 8007698:	08007665 	.word	0x08007665
 800769c:	08007665 	.word	0x08007665
 80076a0:	08007665 	.word	0x08007665
 80076a4:	08007665 	.word	0x08007665
 80076a8:	080077ed 	.word	0x080077ed
 80076ac:	08007715 	.word	0x08007715
 80076b0:	080077a7 	.word	0x080077a7
 80076b4:	08007665 	.word	0x08007665
 80076b8:	08007665 	.word	0x08007665
 80076bc:	0800780f 	.word	0x0800780f
 80076c0:	08007665 	.word	0x08007665
 80076c4:	08007715 	.word	0x08007715
 80076c8:	08007665 	.word	0x08007665
 80076cc:	08007665 	.word	0x08007665
 80076d0:	080077af 	.word	0x080077af
 80076d4:	682b      	ldr	r3, [r5, #0]
 80076d6:	1d1a      	adds	r2, r3, #4
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	602a      	str	r2, [r5, #0]
 80076dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076e4:	2301      	movs	r3, #1
 80076e6:	e09f      	b.n	8007828 <_printf_i+0x1ec>
 80076e8:	6820      	ldr	r0, [r4, #0]
 80076ea:	682b      	ldr	r3, [r5, #0]
 80076ec:	0607      	lsls	r7, r0, #24
 80076ee:	f103 0104 	add.w	r1, r3, #4
 80076f2:	6029      	str	r1, [r5, #0]
 80076f4:	d501      	bpl.n	80076fa <_printf_i+0xbe>
 80076f6:	681e      	ldr	r6, [r3, #0]
 80076f8:	e003      	b.n	8007702 <_printf_i+0xc6>
 80076fa:	0646      	lsls	r6, r0, #25
 80076fc:	d5fb      	bpl.n	80076f6 <_printf_i+0xba>
 80076fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007702:	2e00      	cmp	r6, #0
 8007704:	da03      	bge.n	800770e <_printf_i+0xd2>
 8007706:	232d      	movs	r3, #45	; 0x2d
 8007708:	4276      	negs	r6, r6
 800770a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800770e:	485a      	ldr	r0, [pc, #360]	; (8007878 <_printf_i+0x23c>)
 8007710:	230a      	movs	r3, #10
 8007712:	e012      	b.n	800773a <_printf_i+0xfe>
 8007714:	682b      	ldr	r3, [r5, #0]
 8007716:	6820      	ldr	r0, [r4, #0]
 8007718:	1d19      	adds	r1, r3, #4
 800771a:	6029      	str	r1, [r5, #0]
 800771c:	0605      	lsls	r5, r0, #24
 800771e:	d501      	bpl.n	8007724 <_printf_i+0xe8>
 8007720:	681e      	ldr	r6, [r3, #0]
 8007722:	e002      	b.n	800772a <_printf_i+0xee>
 8007724:	0641      	lsls	r1, r0, #25
 8007726:	d5fb      	bpl.n	8007720 <_printf_i+0xe4>
 8007728:	881e      	ldrh	r6, [r3, #0]
 800772a:	4853      	ldr	r0, [pc, #332]	; (8007878 <_printf_i+0x23c>)
 800772c:	2f6f      	cmp	r7, #111	; 0x6f
 800772e:	bf0c      	ite	eq
 8007730:	2308      	moveq	r3, #8
 8007732:	230a      	movne	r3, #10
 8007734:	2100      	movs	r1, #0
 8007736:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800773a:	6865      	ldr	r5, [r4, #4]
 800773c:	60a5      	str	r5, [r4, #8]
 800773e:	2d00      	cmp	r5, #0
 8007740:	bfa2      	ittt	ge
 8007742:	6821      	ldrge	r1, [r4, #0]
 8007744:	f021 0104 	bicge.w	r1, r1, #4
 8007748:	6021      	strge	r1, [r4, #0]
 800774a:	b90e      	cbnz	r6, 8007750 <_printf_i+0x114>
 800774c:	2d00      	cmp	r5, #0
 800774e:	d04b      	beq.n	80077e8 <_printf_i+0x1ac>
 8007750:	4615      	mov	r5, r2
 8007752:	fbb6 f1f3 	udiv	r1, r6, r3
 8007756:	fb03 6711 	mls	r7, r3, r1, r6
 800775a:	5dc7      	ldrb	r7, [r0, r7]
 800775c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007760:	4637      	mov	r7, r6
 8007762:	42bb      	cmp	r3, r7
 8007764:	460e      	mov	r6, r1
 8007766:	d9f4      	bls.n	8007752 <_printf_i+0x116>
 8007768:	2b08      	cmp	r3, #8
 800776a:	d10b      	bne.n	8007784 <_printf_i+0x148>
 800776c:	6823      	ldr	r3, [r4, #0]
 800776e:	07de      	lsls	r6, r3, #31
 8007770:	d508      	bpl.n	8007784 <_printf_i+0x148>
 8007772:	6923      	ldr	r3, [r4, #16]
 8007774:	6861      	ldr	r1, [r4, #4]
 8007776:	4299      	cmp	r1, r3
 8007778:	bfde      	ittt	le
 800777a:	2330      	movle	r3, #48	; 0x30
 800777c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007780:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007784:	1b52      	subs	r2, r2, r5
 8007786:	6122      	str	r2, [r4, #16]
 8007788:	f8cd a000 	str.w	sl, [sp]
 800778c:	464b      	mov	r3, r9
 800778e:	aa03      	add	r2, sp, #12
 8007790:	4621      	mov	r1, r4
 8007792:	4640      	mov	r0, r8
 8007794:	f7ff fee4 	bl	8007560 <_printf_common>
 8007798:	3001      	adds	r0, #1
 800779a:	d14a      	bne.n	8007832 <_printf_i+0x1f6>
 800779c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077a0:	b004      	add	sp, #16
 80077a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077a6:	6823      	ldr	r3, [r4, #0]
 80077a8:	f043 0320 	orr.w	r3, r3, #32
 80077ac:	6023      	str	r3, [r4, #0]
 80077ae:	4833      	ldr	r0, [pc, #204]	; (800787c <_printf_i+0x240>)
 80077b0:	2778      	movs	r7, #120	; 0x78
 80077b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80077b6:	6823      	ldr	r3, [r4, #0]
 80077b8:	6829      	ldr	r1, [r5, #0]
 80077ba:	061f      	lsls	r7, r3, #24
 80077bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80077c0:	d402      	bmi.n	80077c8 <_printf_i+0x18c>
 80077c2:	065f      	lsls	r7, r3, #25
 80077c4:	bf48      	it	mi
 80077c6:	b2b6      	uxthmi	r6, r6
 80077c8:	07df      	lsls	r7, r3, #31
 80077ca:	bf48      	it	mi
 80077cc:	f043 0320 	orrmi.w	r3, r3, #32
 80077d0:	6029      	str	r1, [r5, #0]
 80077d2:	bf48      	it	mi
 80077d4:	6023      	strmi	r3, [r4, #0]
 80077d6:	b91e      	cbnz	r6, 80077e0 <_printf_i+0x1a4>
 80077d8:	6823      	ldr	r3, [r4, #0]
 80077da:	f023 0320 	bic.w	r3, r3, #32
 80077de:	6023      	str	r3, [r4, #0]
 80077e0:	2310      	movs	r3, #16
 80077e2:	e7a7      	b.n	8007734 <_printf_i+0xf8>
 80077e4:	4824      	ldr	r0, [pc, #144]	; (8007878 <_printf_i+0x23c>)
 80077e6:	e7e4      	b.n	80077b2 <_printf_i+0x176>
 80077e8:	4615      	mov	r5, r2
 80077ea:	e7bd      	b.n	8007768 <_printf_i+0x12c>
 80077ec:	682b      	ldr	r3, [r5, #0]
 80077ee:	6826      	ldr	r6, [r4, #0]
 80077f0:	6961      	ldr	r1, [r4, #20]
 80077f2:	1d18      	adds	r0, r3, #4
 80077f4:	6028      	str	r0, [r5, #0]
 80077f6:	0635      	lsls	r5, r6, #24
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	d501      	bpl.n	8007800 <_printf_i+0x1c4>
 80077fc:	6019      	str	r1, [r3, #0]
 80077fe:	e002      	b.n	8007806 <_printf_i+0x1ca>
 8007800:	0670      	lsls	r0, r6, #25
 8007802:	d5fb      	bpl.n	80077fc <_printf_i+0x1c0>
 8007804:	8019      	strh	r1, [r3, #0]
 8007806:	2300      	movs	r3, #0
 8007808:	6123      	str	r3, [r4, #16]
 800780a:	4615      	mov	r5, r2
 800780c:	e7bc      	b.n	8007788 <_printf_i+0x14c>
 800780e:	682b      	ldr	r3, [r5, #0]
 8007810:	1d1a      	adds	r2, r3, #4
 8007812:	602a      	str	r2, [r5, #0]
 8007814:	681d      	ldr	r5, [r3, #0]
 8007816:	6862      	ldr	r2, [r4, #4]
 8007818:	2100      	movs	r1, #0
 800781a:	4628      	mov	r0, r5
 800781c:	f7f8 fcf8 	bl	8000210 <memchr>
 8007820:	b108      	cbz	r0, 8007826 <_printf_i+0x1ea>
 8007822:	1b40      	subs	r0, r0, r5
 8007824:	6060      	str	r0, [r4, #4]
 8007826:	6863      	ldr	r3, [r4, #4]
 8007828:	6123      	str	r3, [r4, #16]
 800782a:	2300      	movs	r3, #0
 800782c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007830:	e7aa      	b.n	8007788 <_printf_i+0x14c>
 8007832:	6923      	ldr	r3, [r4, #16]
 8007834:	462a      	mov	r2, r5
 8007836:	4649      	mov	r1, r9
 8007838:	4640      	mov	r0, r8
 800783a:	47d0      	blx	sl
 800783c:	3001      	adds	r0, #1
 800783e:	d0ad      	beq.n	800779c <_printf_i+0x160>
 8007840:	6823      	ldr	r3, [r4, #0]
 8007842:	079b      	lsls	r3, r3, #30
 8007844:	d413      	bmi.n	800786e <_printf_i+0x232>
 8007846:	68e0      	ldr	r0, [r4, #12]
 8007848:	9b03      	ldr	r3, [sp, #12]
 800784a:	4298      	cmp	r0, r3
 800784c:	bfb8      	it	lt
 800784e:	4618      	movlt	r0, r3
 8007850:	e7a6      	b.n	80077a0 <_printf_i+0x164>
 8007852:	2301      	movs	r3, #1
 8007854:	4632      	mov	r2, r6
 8007856:	4649      	mov	r1, r9
 8007858:	4640      	mov	r0, r8
 800785a:	47d0      	blx	sl
 800785c:	3001      	adds	r0, #1
 800785e:	d09d      	beq.n	800779c <_printf_i+0x160>
 8007860:	3501      	adds	r5, #1
 8007862:	68e3      	ldr	r3, [r4, #12]
 8007864:	9903      	ldr	r1, [sp, #12]
 8007866:	1a5b      	subs	r3, r3, r1
 8007868:	42ab      	cmp	r3, r5
 800786a:	dcf2      	bgt.n	8007852 <_printf_i+0x216>
 800786c:	e7eb      	b.n	8007846 <_printf_i+0x20a>
 800786e:	2500      	movs	r5, #0
 8007870:	f104 0619 	add.w	r6, r4, #25
 8007874:	e7f5      	b.n	8007862 <_printf_i+0x226>
 8007876:	bf00      	nop
 8007878:	08007aa1 	.word	0x08007aa1
 800787c:	08007ab2 	.word	0x08007ab2

08007880 <__malloc_lock>:
 8007880:	4801      	ldr	r0, [pc, #4]	; (8007888 <__malloc_lock+0x8>)
 8007882:	f7ff bc73 	b.w	800716c <__retarget_lock_acquire_recursive>
 8007886:	bf00      	nop
 8007888:	2000040c 	.word	0x2000040c

0800788c <__malloc_unlock>:
 800788c:	4801      	ldr	r0, [pc, #4]	; (8007894 <__malloc_unlock+0x8>)
 800788e:	f7ff bc6e 	b.w	800716e <__retarget_lock_release_recursive>
 8007892:	bf00      	nop
 8007894:	2000040c 	.word	0x2000040c

08007898 <_realloc_r>:
 8007898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800789c:	4680      	mov	r8, r0
 800789e:	4614      	mov	r4, r2
 80078a0:	460e      	mov	r6, r1
 80078a2:	b921      	cbnz	r1, 80078ae <_realloc_r+0x16>
 80078a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078a8:	4611      	mov	r1, r2
 80078aa:	f7ff bdd9 	b.w	8007460 <_malloc_r>
 80078ae:	b92a      	cbnz	r2, 80078bc <_realloc_r+0x24>
 80078b0:	f000 f85a 	bl	8007968 <_free_r>
 80078b4:	4625      	mov	r5, r4
 80078b6:	4628      	mov	r0, r5
 80078b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078bc:	f000 f8a0 	bl	8007a00 <_malloc_usable_size_r>
 80078c0:	4284      	cmp	r4, r0
 80078c2:	4607      	mov	r7, r0
 80078c4:	d802      	bhi.n	80078cc <_realloc_r+0x34>
 80078c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80078ca:	d812      	bhi.n	80078f2 <_realloc_r+0x5a>
 80078cc:	4621      	mov	r1, r4
 80078ce:	4640      	mov	r0, r8
 80078d0:	f7ff fdc6 	bl	8007460 <_malloc_r>
 80078d4:	4605      	mov	r5, r0
 80078d6:	2800      	cmp	r0, #0
 80078d8:	d0ed      	beq.n	80078b6 <_realloc_r+0x1e>
 80078da:	42bc      	cmp	r4, r7
 80078dc:	4622      	mov	r2, r4
 80078de:	4631      	mov	r1, r6
 80078e0:	bf28      	it	cs
 80078e2:	463a      	movcs	r2, r7
 80078e4:	f000 f832 	bl	800794c <memcpy>
 80078e8:	4631      	mov	r1, r6
 80078ea:	4640      	mov	r0, r8
 80078ec:	f000 f83c 	bl	8007968 <_free_r>
 80078f0:	e7e1      	b.n	80078b6 <_realloc_r+0x1e>
 80078f2:	4635      	mov	r5, r6
 80078f4:	e7df      	b.n	80078b6 <_realloc_r+0x1e>

080078f6 <memmove>:
 80078f6:	4288      	cmp	r0, r1
 80078f8:	b510      	push	{r4, lr}
 80078fa:	eb01 0402 	add.w	r4, r1, r2
 80078fe:	d902      	bls.n	8007906 <memmove+0x10>
 8007900:	4284      	cmp	r4, r0
 8007902:	4623      	mov	r3, r4
 8007904:	d807      	bhi.n	8007916 <memmove+0x20>
 8007906:	1e43      	subs	r3, r0, #1
 8007908:	42a1      	cmp	r1, r4
 800790a:	d008      	beq.n	800791e <memmove+0x28>
 800790c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007910:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007914:	e7f8      	b.n	8007908 <memmove+0x12>
 8007916:	4402      	add	r2, r0
 8007918:	4601      	mov	r1, r0
 800791a:	428a      	cmp	r2, r1
 800791c:	d100      	bne.n	8007920 <memmove+0x2a>
 800791e:	bd10      	pop	{r4, pc}
 8007920:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007924:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007928:	e7f7      	b.n	800791a <memmove+0x24>
	...

0800792c <_sbrk_r>:
 800792c:	b538      	push	{r3, r4, r5, lr}
 800792e:	4d06      	ldr	r5, [pc, #24]	; (8007948 <_sbrk_r+0x1c>)
 8007930:	2300      	movs	r3, #0
 8007932:	4604      	mov	r4, r0
 8007934:	4608      	mov	r0, r1
 8007936:	602b      	str	r3, [r5, #0]
 8007938:	f7fa fe52 	bl	80025e0 <_sbrk>
 800793c:	1c43      	adds	r3, r0, #1
 800793e:	d102      	bne.n	8007946 <_sbrk_r+0x1a>
 8007940:	682b      	ldr	r3, [r5, #0]
 8007942:	b103      	cbz	r3, 8007946 <_sbrk_r+0x1a>
 8007944:	6023      	str	r3, [r4, #0]
 8007946:	bd38      	pop	{r3, r4, r5, pc}
 8007948:	20000418 	.word	0x20000418

0800794c <memcpy>:
 800794c:	440a      	add	r2, r1
 800794e:	4291      	cmp	r1, r2
 8007950:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007954:	d100      	bne.n	8007958 <memcpy+0xc>
 8007956:	4770      	bx	lr
 8007958:	b510      	push	{r4, lr}
 800795a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800795e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007962:	4291      	cmp	r1, r2
 8007964:	d1f9      	bne.n	800795a <memcpy+0xe>
 8007966:	bd10      	pop	{r4, pc}

08007968 <_free_r>:
 8007968:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800796a:	2900      	cmp	r1, #0
 800796c:	d044      	beq.n	80079f8 <_free_r+0x90>
 800796e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007972:	9001      	str	r0, [sp, #4]
 8007974:	2b00      	cmp	r3, #0
 8007976:	f1a1 0404 	sub.w	r4, r1, #4
 800797a:	bfb8      	it	lt
 800797c:	18e4      	addlt	r4, r4, r3
 800797e:	f7ff ff7f 	bl	8007880 <__malloc_lock>
 8007982:	4a1e      	ldr	r2, [pc, #120]	; (80079fc <_free_r+0x94>)
 8007984:	9801      	ldr	r0, [sp, #4]
 8007986:	6813      	ldr	r3, [r2, #0]
 8007988:	b933      	cbnz	r3, 8007998 <_free_r+0x30>
 800798a:	6063      	str	r3, [r4, #4]
 800798c:	6014      	str	r4, [r2, #0]
 800798e:	b003      	add	sp, #12
 8007990:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007994:	f7ff bf7a 	b.w	800788c <__malloc_unlock>
 8007998:	42a3      	cmp	r3, r4
 800799a:	d908      	bls.n	80079ae <_free_r+0x46>
 800799c:	6825      	ldr	r5, [r4, #0]
 800799e:	1961      	adds	r1, r4, r5
 80079a0:	428b      	cmp	r3, r1
 80079a2:	bf01      	itttt	eq
 80079a4:	6819      	ldreq	r1, [r3, #0]
 80079a6:	685b      	ldreq	r3, [r3, #4]
 80079a8:	1949      	addeq	r1, r1, r5
 80079aa:	6021      	streq	r1, [r4, #0]
 80079ac:	e7ed      	b.n	800798a <_free_r+0x22>
 80079ae:	461a      	mov	r2, r3
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	b10b      	cbz	r3, 80079b8 <_free_r+0x50>
 80079b4:	42a3      	cmp	r3, r4
 80079b6:	d9fa      	bls.n	80079ae <_free_r+0x46>
 80079b8:	6811      	ldr	r1, [r2, #0]
 80079ba:	1855      	adds	r5, r2, r1
 80079bc:	42a5      	cmp	r5, r4
 80079be:	d10b      	bne.n	80079d8 <_free_r+0x70>
 80079c0:	6824      	ldr	r4, [r4, #0]
 80079c2:	4421      	add	r1, r4
 80079c4:	1854      	adds	r4, r2, r1
 80079c6:	42a3      	cmp	r3, r4
 80079c8:	6011      	str	r1, [r2, #0]
 80079ca:	d1e0      	bne.n	800798e <_free_r+0x26>
 80079cc:	681c      	ldr	r4, [r3, #0]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	6053      	str	r3, [r2, #4]
 80079d2:	440c      	add	r4, r1
 80079d4:	6014      	str	r4, [r2, #0]
 80079d6:	e7da      	b.n	800798e <_free_r+0x26>
 80079d8:	d902      	bls.n	80079e0 <_free_r+0x78>
 80079da:	230c      	movs	r3, #12
 80079dc:	6003      	str	r3, [r0, #0]
 80079de:	e7d6      	b.n	800798e <_free_r+0x26>
 80079e0:	6825      	ldr	r5, [r4, #0]
 80079e2:	1961      	adds	r1, r4, r5
 80079e4:	428b      	cmp	r3, r1
 80079e6:	bf04      	itt	eq
 80079e8:	6819      	ldreq	r1, [r3, #0]
 80079ea:	685b      	ldreq	r3, [r3, #4]
 80079ec:	6063      	str	r3, [r4, #4]
 80079ee:	bf04      	itt	eq
 80079f0:	1949      	addeq	r1, r1, r5
 80079f2:	6021      	streq	r1, [r4, #0]
 80079f4:	6054      	str	r4, [r2, #4]
 80079f6:	e7ca      	b.n	800798e <_free_r+0x26>
 80079f8:	b003      	add	sp, #12
 80079fa:	bd30      	pop	{r4, r5, pc}
 80079fc:	20000410 	.word	0x20000410

08007a00 <_malloc_usable_size_r>:
 8007a00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a04:	1f18      	subs	r0, r3, #4
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	bfbc      	itt	lt
 8007a0a:	580b      	ldrlt	r3, [r1, r0]
 8007a0c:	18c0      	addlt	r0, r0, r3
 8007a0e:	4770      	bx	lr

08007a10 <_init>:
 8007a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a12:	bf00      	nop
 8007a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a16:	bc08      	pop	{r3}
 8007a18:	469e      	mov	lr, r3
 8007a1a:	4770      	bx	lr

08007a1c <_fini>:
 8007a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a1e:	bf00      	nop
 8007a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a22:	bc08      	pop	{r3}
 8007a24:	469e      	mov	lr, r3
 8007a26:	4770      	bx	lr
