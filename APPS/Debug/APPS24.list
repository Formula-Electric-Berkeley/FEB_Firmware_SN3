
APPS24.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000587c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08005a4c  08005a4c  00015a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ad8  08005ad8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ad8  08005ad8  00015ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ae0  08005ae0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ae0  08005ae0  00015ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ae4  08005ae4  00015ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005ae8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  2000005c  08005b44  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  08005b44  000203a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012b5c  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d92  00000000  00000000  00032c2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff0  00000000  00000000  000359c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c5f  00000000  00000000  000369b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002530b  00000000  00000000  0003760f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014ea0  00000000  00000000  0005c91a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e05be  00000000  00000000  000717ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004958  00000000  00000000  00151d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001566d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005a34 	.word	0x08005a34

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08005a34 	.word	0x08005a34

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c60:	f000 b970 	b.w	8000f44 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f806 	bl	8000c7c <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__udivmoddi4>:
 8000c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c80:	9e08      	ldr	r6, [sp, #32]
 8000c82:	460d      	mov	r5, r1
 8000c84:	4604      	mov	r4, r0
 8000c86:	460f      	mov	r7, r1
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d14a      	bne.n	8000d22 <__udivmoddi4+0xa6>
 8000c8c:	428a      	cmp	r2, r1
 8000c8e:	4694      	mov	ip, r2
 8000c90:	d965      	bls.n	8000d5e <__udivmoddi4+0xe2>
 8000c92:	fab2 f382 	clz	r3, r2
 8000c96:	b143      	cbz	r3, 8000caa <__udivmoddi4+0x2e>
 8000c98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c9c:	f1c3 0220 	rsb	r2, r3, #32
 8000ca0:	409f      	lsls	r7, r3
 8000ca2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca6:	4317      	orrs	r7, r2
 8000ca8:	409c      	lsls	r4, r3
 8000caa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cae:	fa1f f58c 	uxth.w	r5, ip
 8000cb2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb6:	0c22      	lsrs	r2, r4, #16
 8000cb8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cbc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cc0:	fb01 f005 	mul.w	r0, r1, r5
 8000cc4:	4290      	cmp	r0, r2
 8000cc6:	d90a      	bls.n	8000cde <__udivmoddi4+0x62>
 8000cc8:	eb1c 0202 	adds.w	r2, ip, r2
 8000ccc:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000cd0:	f080 811c 	bcs.w	8000f0c <__udivmoddi4+0x290>
 8000cd4:	4290      	cmp	r0, r2
 8000cd6:	f240 8119 	bls.w	8000f0c <__udivmoddi4+0x290>
 8000cda:	3902      	subs	r1, #2
 8000cdc:	4462      	add	r2, ip
 8000cde:	1a12      	subs	r2, r2, r0
 8000ce0:	b2a4      	uxth	r4, r4
 8000ce2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cee:	fb00 f505 	mul.w	r5, r0, r5
 8000cf2:	42a5      	cmp	r5, r4
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x90>
 8000cf6:	eb1c 0404 	adds.w	r4, ip, r4
 8000cfa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cfe:	f080 8107 	bcs.w	8000f10 <__udivmoddi4+0x294>
 8000d02:	42a5      	cmp	r5, r4
 8000d04:	f240 8104 	bls.w	8000f10 <__udivmoddi4+0x294>
 8000d08:	4464      	add	r4, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d10:	1b64      	subs	r4, r4, r5
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11e      	cbz	r6, 8000d1e <__udivmoddi4+0xa2>
 8000d16:	40dc      	lsrs	r4, r3
 8000d18:	2300      	movs	r3, #0
 8000d1a:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0xbc>
 8000d26:	2e00      	cmp	r6, #0
 8000d28:	f000 80ed 	beq.w	8000f06 <__udivmoddi4+0x28a>
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	e9c6 0500 	strd	r0, r5, [r6]
 8000d32:	4608      	mov	r0, r1
 8000d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d38:	fab3 f183 	clz	r1, r3
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	d149      	bne.n	8000dd4 <__udivmoddi4+0x158>
 8000d40:	42ab      	cmp	r3, r5
 8000d42:	d302      	bcc.n	8000d4a <__udivmoddi4+0xce>
 8000d44:	4282      	cmp	r2, r0
 8000d46:	f200 80f8 	bhi.w	8000f3a <__udivmoddi4+0x2be>
 8000d4a:	1a84      	subs	r4, r0, r2
 8000d4c:	eb65 0203 	sbc.w	r2, r5, r3
 8000d50:	2001      	movs	r0, #1
 8000d52:	4617      	mov	r7, r2
 8000d54:	2e00      	cmp	r6, #0
 8000d56:	d0e2      	beq.n	8000d1e <__udivmoddi4+0xa2>
 8000d58:	e9c6 4700 	strd	r4, r7, [r6]
 8000d5c:	e7df      	b.n	8000d1e <__udivmoddi4+0xa2>
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xe6>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f382 	clz	r3, r2
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x210>
 8000d6c:	1a8a      	subs	r2, r1, r2
 8000d6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d72:	fa1f fe8c 	uxth.w	lr, ip
 8000d76:	2101      	movs	r1, #1
 8000d78:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d7c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d80:	0c22      	lsrs	r2, r4, #16
 8000d82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d86:	fb0e f005 	mul.w	r0, lr, r5
 8000d8a:	4290      	cmp	r0, r2
 8000d8c:	d908      	bls.n	8000da0 <__udivmoddi4+0x124>
 8000d8e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d92:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d96:	d202      	bcs.n	8000d9e <__udivmoddi4+0x122>
 8000d98:	4290      	cmp	r0, r2
 8000d9a:	f200 80cb 	bhi.w	8000f34 <__udivmoddi4+0x2b8>
 8000d9e:	4645      	mov	r5, r8
 8000da0:	1a12      	subs	r2, r2, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da8:	fb07 2210 	mls	r2, r7, r0, r2
 8000dac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db0:	fb0e fe00 	mul.w	lr, lr, r0
 8000db4:	45a6      	cmp	lr, r4
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x14e>
 8000db8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dbc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dc0:	d202      	bcs.n	8000dc8 <__udivmoddi4+0x14c>
 8000dc2:	45a6      	cmp	lr, r4
 8000dc4:	f200 80bb 	bhi.w	8000f3e <__udivmoddi4+0x2c2>
 8000dc8:	4610      	mov	r0, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dd2:	e79f      	b.n	8000d14 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0720 	rsb	r7, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de2:	fa05 f401 	lsl.w	r4, r5, r1
 8000de6:	fa20 f307 	lsr.w	r3, r0, r7
 8000dea:	40fd      	lsrs	r5, r7
 8000dec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e04:	fb08 f50e 	mul.w	r5, r8, lr
 8000e08:	42a5      	cmp	r5, r4
 8000e0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0e:	fa00 f001 	lsl.w	r0, r0, r1
 8000e12:	d90b      	bls.n	8000e2c <__udivmoddi4+0x1b0>
 8000e14:	eb1c 0404 	adds.w	r4, ip, r4
 8000e18:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e1c:	f080 8088 	bcs.w	8000f30 <__udivmoddi4+0x2b4>
 8000e20:	42a5      	cmp	r5, r4
 8000e22:	f240 8085 	bls.w	8000f30 <__udivmoddi4+0x2b4>
 8000e26:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2a:	4464      	add	r4, ip
 8000e2c:	1b64      	subs	r4, r4, r5
 8000e2e:	b29d      	uxth	r5, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e3c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e40:	45a6      	cmp	lr, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1da>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e4c:	d26c      	bcs.n	8000f28 <__udivmoddi4+0x2ac>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	d96a      	bls.n	8000f28 <__udivmoddi4+0x2ac>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	4464      	add	r4, ip
 8000e56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e5a:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5e:	eba4 040e 	sub.w	r4, r4, lr
 8000e62:	42ac      	cmp	r4, r5
 8000e64:	46c8      	mov	r8, r9
 8000e66:	46ae      	mov	lr, r5
 8000e68:	d356      	bcc.n	8000f18 <__udivmoddi4+0x29c>
 8000e6a:	d053      	beq.n	8000f14 <__udivmoddi4+0x298>
 8000e6c:	b156      	cbz	r6, 8000e84 <__udivmoddi4+0x208>
 8000e6e:	ebb0 0208 	subs.w	r2, r0, r8
 8000e72:	eb64 040e 	sbc.w	r4, r4, lr
 8000e76:	fa04 f707 	lsl.w	r7, r4, r7
 8000e7a:	40ca      	lsrs	r2, r1
 8000e7c:	40cc      	lsrs	r4, r1
 8000e7e:	4317      	orrs	r7, r2
 8000e80:	e9c6 7400 	strd	r7, r4, [r6]
 8000e84:	4618      	mov	r0, r3
 8000e86:	2100      	movs	r1, #0
 8000e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8c:	f1c3 0120 	rsb	r1, r3, #32
 8000e90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e94:	fa20 f201 	lsr.w	r2, r0, r1
 8000e98:	fa25 f101 	lsr.w	r1, r5, r1
 8000e9c:	409d      	lsls	r5, r3
 8000e9e:	432a      	orrs	r2, r5
 8000ea0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea4:	fa1f fe8c 	uxth.w	lr, ip
 8000ea8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eac:	fb07 1510 	mls	r5, r7, r0, r1
 8000eb0:	0c11      	lsrs	r1, r2, #16
 8000eb2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb6:	fb00 f50e 	mul.w	r5, r0, lr
 8000eba:	428d      	cmp	r5, r1
 8000ebc:	fa04 f403 	lsl.w	r4, r4, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x258>
 8000ec2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000eca:	d22f      	bcs.n	8000f2c <__udivmoddi4+0x2b0>
 8000ecc:	428d      	cmp	r5, r1
 8000ece:	d92d      	bls.n	8000f2c <__udivmoddi4+0x2b0>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4461      	add	r1, ip
 8000ed4:	1b49      	subs	r1, r1, r5
 8000ed6:	b292      	uxth	r2, r2
 8000ed8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000edc:	fb07 1115 	mls	r1, r7, r5, r1
 8000ee0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee8:	4291      	cmp	r1, r2
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x282>
 8000eec:	eb1c 0202 	adds.w	r2, ip, r2
 8000ef0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ef4:	d216      	bcs.n	8000f24 <__udivmoddi4+0x2a8>
 8000ef6:	4291      	cmp	r1, r2
 8000ef8:	d914      	bls.n	8000f24 <__udivmoddi4+0x2a8>
 8000efa:	3d02      	subs	r5, #2
 8000efc:	4462      	add	r2, ip
 8000efe:	1a52      	subs	r2, r2, r1
 8000f00:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f04:	e738      	b.n	8000d78 <__udivmoddi4+0xfc>
 8000f06:	4631      	mov	r1, r6
 8000f08:	4630      	mov	r0, r6
 8000f0a:	e708      	b.n	8000d1e <__udivmoddi4+0xa2>
 8000f0c:	4639      	mov	r1, r7
 8000f0e:	e6e6      	b.n	8000cde <__udivmoddi4+0x62>
 8000f10:	4610      	mov	r0, r2
 8000f12:	e6fb      	b.n	8000d0c <__udivmoddi4+0x90>
 8000f14:	4548      	cmp	r0, r9
 8000f16:	d2a9      	bcs.n	8000e6c <__udivmoddi4+0x1f0>
 8000f18:	ebb9 0802 	subs.w	r8, r9, r2
 8000f1c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f20:	3b01      	subs	r3, #1
 8000f22:	e7a3      	b.n	8000e6c <__udivmoddi4+0x1f0>
 8000f24:	4645      	mov	r5, r8
 8000f26:	e7ea      	b.n	8000efe <__udivmoddi4+0x282>
 8000f28:	462b      	mov	r3, r5
 8000f2a:	e794      	b.n	8000e56 <__udivmoddi4+0x1da>
 8000f2c:	4640      	mov	r0, r8
 8000f2e:	e7d1      	b.n	8000ed4 <__udivmoddi4+0x258>
 8000f30:	46d0      	mov	r8, sl
 8000f32:	e77b      	b.n	8000e2c <__udivmoddi4+0x1b0>
 8000f34:	3d02      	subs	r5, #2
 8000f36:	4462      	add	r2, ip
 8000f38:	e732      	b.n	8000da0 <__udivmoddi4+0x124>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e70a      	b.n	8000d54 <__udivmoddi4+0xd8>
 8000f3e:	4464      	add	r4, ip
 8000f40:	3802      	subs	r0, #2
 8000f42:	e742      	b.n	8000dca <__udivmoddi4+0x14e>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <FEB_CAN_Init>:

uint32_t FEB_CAN_Tx_Mailbox;

// **************************************** Functions ****************************************

void FEB_CAN_Init(void) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	FEB_CAN_Filter_Config();
 8000f4c:	f000 f80c 	bl	8000f68 <FEB_CAN_Filter_Config>
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8000f50:	4804      	ldr	r0, [pc, #16]	; (8000f64 <FEB_CAN_Init+0x1c>)
 8000f52:	f001 fc70 	bl	8002836 <HAL_CAN_Start>
        // Code Error - Shutdown
	}
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000f56:	2102      	movs	r1, #2
 8000f58:	4802      	ldr	r0, [pc, #8]	; (8000f64 <FEB_CAN_Init+0x1c>)
 8000f5a:	f001 fed2 	bl	8002d02 <HAL_CAN_ActivateNotification>
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200001a0 	.word	0x200001a0

08000f68 <FEB_CAN_Filter_Config>:

void FEB_CAN_Filter_Config(void) {
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
	uint8_t filter_bank = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	71fb      	strb	r3, [r7, #7]
	// Assign Filter
    // filter_bank = Function(&hcan1, CAN_RX_FIFO0, filter_bank);
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
	...

08000f80 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &FEB_CAN_Rx_Header, FEB_CAN_Rx_Data) == HAL_OK) {
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 8000f8a:	4a05      	ldr	r2, [pc, #20]	; (8000fa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f001 fda5 	bl	8002ade <HAL_CAN_GetRxMessage>
		// Store Message
        // Function(&FEB_CAN_Rx_Header, FEB_CAN_Rx_Data);
	}
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	200000b4 	.word	0x200000b4
 8000fa0:	20000090 	.word	0x20000090

08000fa4 <FEB_CAN_Transmit>:
	}

	return filter_bank;
}

void FEB_CAN_Transmit(CAN_HandleTypeDef* hcan) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

	// Configure FEB_CAN_Tx_Data
    // Write Code Here

	// Delay until mailbox available
	while (HAL_CAN_GetTxMailboxesFreeLevel(hcan) == 0) {}
 8000fac:	bf00      	nop
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f001 fd60 	bl	8002a74 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d0f9      	beq.n	8000fae <FEB_CAN_Transmit+0xa>

	// Add Tx data to mailbox
	if (HAL_CAN_AddTxMessage(hcan, &FEB_CAN_Tx_Header, FEB_CAN_Tx_Data, &FEB_CAN_Tx_Mailbox) != HAL_OK) {
 8000fba:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <FEB_CAN_Transmit+0x2c>)
 8000fbc:	4a05      	ldr	r2, [pc, #20]	; (8000fd4 <FEB_CAN_Transmit+0x30>)
 8000fbe:	4906      	ldr	r1, [pc, #24]	; (8000fd8 <FEB_CAN_Transmit+0x34>)
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f001 fc7c 	bl	80028be <HAL_CAN_AddTxMessage>
		// Code Error - Shutdown
	}
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200000bc 	.word	0x200000bc
 8000fd4:	200000ac 	.word	0x200000ac
 8000fd8:	20000078 	.word	0x20000078

08000fdc <FEB_APPS_sendBrake>:
static uint8_t buf_len;

//******************  FUNCTIONS ****************************

//this is a homeless function that i think needs to live here
void FEB_APPS_sendBrake(){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	FEB_CAN_Transmit(&hcan1);
 8000fe0:	4802      	ldr	r0, [pc, #8]	; (8000fec <FEB_APPS_sendBrake+0x10>)
 8000fe2:	f7ff ffdf 	bl	8000fa4 <FEB_CAN_Transmit>
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200001a0 	.word	0x200001a0

08000ff0 <FEB_Main_User2>:


void FEB_Main_User2(void){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b0a0      	sub	sp, #128	; 0x80
 8000ff4:	af00      	add	r7, sp, #0
	HAL_ADCEx_InjectedStart(&hadc1);
 8000ff6:	4809      	ldr	r0, [pc, #36]	; (800101c <FEB_Main_User2+0x2c>)
 8000ff8:	f001 fa20 	bl	800243c <HAL_ADCEx_InjectedStart>
	HAL_TIM_Base_Start(&htim5);
 8000ffc:	4808      	ldr	r0, [pc, #32]	; (8001020 <FEB_Main_User2+0x30>)
 8000ffe:	f003 f9cd 	bl	800439c <HAL_TIM_Base_Start>


	char buf[128];
	uint8_t buf_len;

	FEB_CAN_Init(); // The transceiver must be connected otherwise you get sent into an infinite loop
 8001002:	f7ff ffa1 	bl	8000f48 <FEB_CAN_Init>
	RMSControl.enabled = 0;
 8001006:	4b07      	ldr	r3, [pc, #28]	; (8001024 <FEB_Main_User2+0x34>)
 8001008:	2200      	movs	r2, #0
 800100a:	709a      	strb	r2, [r3, #2]
	RMSControl.torque= 0.0;
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <FEB_Main_User2+0x34>)
 800100e:	2200      	movs	r2, #0
 8001010:	801a      	strh	r2, [r3, #0]
}
 8001012:	bf00      	nop
 8001014:	3780      	adds	r7, #128	; 0x80
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000158 	.word	0x20000158
 8001020:	200001c8 	.word	0x200001c8
 8001024:	2000014c 	.word	0x2000014c

08001028 <FEB_Main_User3>:

void FEB_Main_User3(void){
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
	  //ready to drive
	  if (SW_MESSAGE.ready_to_drive == 1) {
 800102e:	4b36      	ldr	r3, [pc, #216]	; (8001108 <FEB_Main_User3+0xe0>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d110      	bne.n	8001058 <FEB_Main_User3+0x30>
		  normalized_acc = FEB_Normalized_Acc_Pedals();
 8001036:	f000 f87b 	bl	8001130 <FEB_Normalized_Acc_Pedals>
 800103a:	eef0 7a40 	vmov.f32	s15, s0
 800103e:	4b33      	ldr	r3, [pc, #204]	; (800110c <FEB_Main_User3+0xe4>)
 8001040:	edc3 7a00 	vstr	s15, [r3]
		  if (!RMSControl.enabled) {  // when the car just powered on, driver commands ready to drive but rms is not enabled
 8001044:	4b32      	ldr	r3, [pc, #200]	; (8001110 <FEB_Main_User3+0xe8>)
 8001046:	789b      	ldrb	r3, [r3, #2]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d113      	bne.n	8001074 <FEB_Main_User3+0x4c>
			  FEB_RMS_Init();
 800104c:	f000 fa5e 	bl	800150c <FEB_RMS_Init>
			  RMSControl.enabled = 1;
 8001050:	4b2f      	ldr	r3, [pc, #188]	; (8001110 <FEB_Main_User3+0xe8>)
 8001052:	2201      	movs	r2, #1
 8001054:	709a      	strb	r2, [r3, #2]
 8001056:	e00d      	b.n	8001074 <FEB_Main_User3+0x4c>
		  }
	  } else {
		  normalized_acc = FEB_Normalized_Acc_Pedals();
 8001058:	f000 f86a 	bl	8001130 <FEB_Normalized_Acc_Pedals>
 800105c:	eef0 7a40 	vmov.f32	s15, s0
 8001060:	4b2a      	ldr	r3, [pc, #168]	; (800110c <FEB_Main_User3+0xe4>)
 8001062:	edc3 7a00 	vstr	s15, [r3]
		  normalized_acc = 0.0;
 8001066:	4b29      	ldr	r3, [pc, #164]	; (800110c <FEB_Main_User3+0xe4>)
 8001068:	f04f 0200 	mov.w	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
		  RMSControl.enabled = 0;
 800106e:	4b28      	ldr	r3, [pc, #160]	; (8001110 <FEB_Main_User3+0xe8>)
 8001070:	2200      	movs	r2, #0
 8001072:	709a      	strb	r2, [r3, #2]
	  }
	  // Top line is Evan's new function, Bottom line is old APPS function
	  uint16_t torque = normalized_acc * FEB_getMaxTorque(RMS_MESSAGE.HV_Bus_Voltage, RMS_MESSAGE.Motor_Speed);
 8001074:	4b27      	ldr	r3, [pc, #156]	; (8001114 <FEB_Main_User3+0xec>)
 8001076:	f9b3 3000 	ldrsh.w	r3, [r3]
 800107a:	4a26      	ldr	r2, [pc, #152]	; (8001114 <FEB_Main_User3+0xec>)
 800107c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001080:	4611      	mov	r1, r2
 8001082:	4618      	mov	r0, r3
 8001084:	f000 fac0 	bl	8001608 <FEB_getMaxTorque>
 8001088:	4603      	mov	r3, r0
 800108a:	ee07 3a90 	vmov	s15, r3
 800108e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001092:	4b1e      	ldr	r3, [pc, #120]	; (800110c <FEB_Main_User3+0xe4>)
 8001094:	edd3 7a00 	vldr	s15, [r3]
 8001098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800109c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010a0:	ee17 3a90 	vmov	r3, s15
 80010a4:	80fb      	strh	r3, [r7, #6]
//	  uint16_t torque = normalized_acc * 130;
	  normalized_brake = FEB_Normalized_Brake_Pedals();
 80010a6:	f000 f96f 	bl	8001388 <FEB_Normalized_Brake_Pedals>
 80010aa:	eef0 7a40 	vmov.f32	s15, s0
 80010ae:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <FEB_Main_User3+0xf0>)
 80010b0:	edc3 7a00 	vstr	s15, [r3]
	  FEB_RMS_setTorque(torque);
 80010b4:	88fb      	ldrh	r3, [r7, #6]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 fa12 	bl	80014e0 <FEB_RMS_setTorque>
	  FEB_APPS_sendBrake();
 80010bc:	f7ff ff8e 	bl	8000fdc <FEB_APPS_sendBrake>

//	  buf_len = sprintf(buf, "rtd:%d, enable:%d lockout:%d impl:%d acc: %.3f brake: %.3f Bus Voltage: %d Motor Speed: %d\n", SW_MESSAGE.ready_to_drive, Inverter_enable, Inverter_enable_lockout, isImpl, normalized_acc, normalized_brake, RMS_MESSAGE.HV_Bus_Voltage, RMS_MESSAGE.Motor_Speed);

	  buf_len = sprintf(buf, "Evan's Max Torque: %d\n", FEB_getMaxTorque(RMS_MESSAGE.HV_Bus_Voltage, RMS_MESSAGE.Motor_Speed));
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <FEB_Main_User3+0xec>)
 80010c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c6:	4a13      	ldr	r2, [pc, #76]	; (8001114 <FEB_Main_User3+0xec>)
 80010c8:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80010cc:	4611      	mov	r1, r2
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 fa9a 	bl	8001608 <FEB_getMaxTorque>
 80010d4:	4603      	mov	r3, r0
 80010d6:	461a      	mov	r2, r3
 80010d8:	4910      	ldr	r1, [pc, #64]	; (800111c <FEB_Main_User3+0xf4>)
 80010da:	4811      	ldr	r0, [pc, #68]	; (8001120 <FEB_Main_User3+0xf8>)
 80010dc:	f004 f806 	bl	80050ec <siprintf>
 80010e0:	4603      	mov	r3, r0
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <FEB_Main_User3+0xfc>)
 80010e6:	701a      	strb	r2, [r3, #0]

	  HAL_UART_Transmit(&huart2,(uint8_t *)buf, buf_len, 1000);
 80010e8:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <FEB_Main_User3+0xfc>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f2:	490b      	ldr	r1, [pc, #44]	; (8001120 <FEB_Main_User3+0xf8>)
 80010f4:	480c      	ldr	r0, [pc, #48]	; (8001128 <FEB_Main_User3+0x100>)
 80010f6:	f003 fc84 	bl	8004a02 <HAL_UART_Transmit>

	  HAL_Delay(SLEEP_TIME);
 80010fa:	200a      	movs	r0, #10
 80010fc:	f000 ff08 	bl	8001f10 <HAL_Delay>
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000150 	.word	0x20000150
 800110c:	200000c0 	.word	0x200000c0
 8001110:	2000014c 	.word	0x2000014c
 8001114:	20000154 	.word	0x20000154
 8001118:	200000c4 	.word	0x200000c4
 800111c:	08005a4c 	.word	0x08005a4c
 8001120:	200000c8 	.word	0x200000c8
 8001124:	20000148 	.word	0x20000148
 8001128:	20000210 	.word	0x20000210
 800112c:	00000000 	.word	0x00000000

08001130 <FEB_Normalized_Acc_Pedals>:

// *********************** FUNCTIONS *********************



float FEB_Normalized_Acc_Pedals(){
 8001130:	b580      	push	{r7, lr}
 8001132:	b0a6      	sub	sp, #152	; 0x98
 8001134:	af00      	add	r7, sp, #0
	// raw ADC readings of the two acc pedal sensors
	uint16_t acc_pedal_1 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8001136:	2102      	movs	r1, #2
 8001138:	488b      	ldr	r0, [pc, #556]	; (8001368 <FEB_Normalized_Acc_Pedals+0x238>)
 800113a:	f001 fa49 	bl	80025d0 <HAL_ADCEx_InjectedGetValue>
 800113e:	4603      	mov	r3, r0
 8001140:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	uint16_t acc_pedal_2 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 8001144:	2103      	movs	r1, #3
 8001146:	4888      	ldr	r0, [pc, #544]	; (8001368 <FEB_Normalized_Acc_Pedals+0x238>)
 8001148:	f001 fa42 	bl	80025d0 <HAL_ADCEx_InjectedGetValue>
 800114c:	4603      	mov	r3, r0
 800114e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
	char buf[128];
	uint8_t buf_len;
	buf_len = sprintf(buf, "acc1:%d acc2:%d\n", acc_pedal_1, acc_pedal_2);
 8001152:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8001156:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800115a:	1d38      	adds	r0, r7, #4
 800115c:	4983      	ldr	r1, [pc, #524]	; (800136c <FEB_Normalized_Acc_Pedals+0x23c>)
 800115e:	f003 ffc5 	bl	80050ec <siprintf>
 8001162:	4603      	mov	r3, r0
 8001164:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	//HAL_UART_Transmit(&huart2,(uint8_t *)buf, buf_len, HAL_MAX_DELAY);


	// check implausibility for shorting
	if (acc_pedal_1 < Sensor_Min || acc_pedal_1 > Sensor_Max
 8001168:	f240 1299 	movw	r2, #409	; 0x199
 800116c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8001170:	4293      	cmp	r3, r2
 8001172:	d320      	bcc.n	80011b6 <FEB_Normalized_Acc_Pedals+0x86>
 8001174:	f640 6265 	movw	r2, #3685	; 0xe65
 8001178:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800117c:	4293      	cmp	r3, r2
 800117e:	d81a      	bhi.n	80011b6 <FEB_Normalized_Acc_Pedals+0x86>
			|| acc_pedal_2 < Sensor_Min || acc_pedal_2 > Sensor_Max
 8001180:	f240 1299 	movw	r2, #409	; 0x199
 8001184:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8001188:	4293      	cmp	r3, r2
 800118a:	d314      	bcc.n	80011b6 <FEB_Normalized_Acc_Pedals+0x86>
 800118c:	f640 6265 	movw	r2, #3685	; 0xe65
 8001190:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8001194:	4293      	cmp	r3, r2
 8001196:	d80e      	bhi.n	80011b6 <FEB_Normalized_Acc_Pedals+0x86>
			|| abs(acc_pedal_1 - acc_pedal_2) < 100) {
 8001198:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800119c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80011a6:	db0c      	blt.n	80011c2 <FEB_Normalized_Acc_Pedals+0x92>
 80011a8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80011ac:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b63      	cmp	r3, #99	; 0x63
 80011b4:	dc05      	bgt.n	80011c2 <FEB_Normalized_Acc_Pedals+0x92>
		isImpl = true;
 80011b6:	4b6e      	ldr	r3, [pc, #440]	; (8001370 <FEB_Normalized_Acc_Pedals+0x240>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	701a      	strb	r2, [r3, #0]
		return 0.0;
 80011bc:	f04f 0300 	mov.w	r3, #0
 80011c0:	e0b7      	b.n	8001332 <FEB_Normalized_Acc_Pedals+0x202>
	}

	//convert to % travel
	// sensor 1 has positive slope
	float ped1_normalized = (acc_pedal_1 - ACC_PEDAL_1_START)/ (ACC_PEDAL_1_END - ACC_PEDAL_1_START);
 80011c2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff f9c4 	bl	8000554 <__aeabi_i2d>
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	4b68      	ldr	r3, [pc, #416]	; (8001374 <FEB_Normalized_Acc_Pedals+0x244>)
 80011d2:	f7ff f871 	bl	80002b8 <__aeabi_dsub>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4610      	mov	r0, r2
 80011dc:	4619      	mov	r1, r3
 80011de:	f04f 0200 	mov.w	r2, #0
 80011e2:	4b65      	ldr	r3, [pc, #404]	; (8001378 <FEB_Normalized_Acc_Pedals+0x248>)
 80011e4:	f7ff fb4a 	bl	800087c <__aeabi_ddiv>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	f7ff fcdc 	bl	8000bac <__aeabi_d2f>
 80011f4:	4603      	mov	r3, r0
 80011f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	// sensor 2 has negative slope
	float ped2_normalized = (acc_pedal_2 - ACC_PEDAL_2_START) / (ACC_PEDAL_2_END - ACC_PEDAL_2_START);
 80011fa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f9a8 	bl	8000554 <__aeabi_i2d>
 8001204:	a34e      	add	r3, pc, #312	; (adr r3, 8001340 <FEB_Normalized_Acc_Pedals+0x210>)
 8001206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120a:	f7ff f855 	bl	80002b8 <__aeabi_dsub>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4610      	mov	r0, r2
 8001214:	4619      	mov	r1, r3
 8001216:	a34c      	add	r3, pc, #304	; (adr r3, 8001348 <FEB_Normalized_Acc_Pedals+0x218>)
 8001218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121c:	f7ff fb2e 	bl	800087c <__aeabi_ddiv>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	f7ff fcc0 	bl	8000bac <__aeabi_d2f>
 800122c:	4603      	mov	r3, r0
 800122e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

	// sensor measurements mismatch by more than 10%
	if(abs(ped1_normalized - ped2_normalized) > 0.1 ){
 8001232:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8001236:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800123a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800123e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001242:	ee17 3a90 	vmov	r3, s15
 8001246:	2b00      	cmp	r3, #0
 8001248:	bfb8      	it	lt
 800124a:	425b      	neglt	r3, r3
 800124c:	2b00      	cmp	r3, #0
 800124e:	dd05      	ble.n	800125c <FEB_Normalized_Acc_Pedals+0x12c>
		isImpl = true;
 8001250:	4b47      	ldr	r3, [pc, #284]	; (8001370 <FEB_Normalized_Acc_Pedals+0x240>)
 8001252:	2201      	movs	r2, #1
 8001254:	701a      	strb	r2, [r3, #0]
		return 0.0;
 8001256:	f04f 0300 	mov.w	r3, #0
 800125a:	e06a      	b.n	8001332 <FEB_Normalized_Acc_Pedals+0x202>
	}

	float final_normalized = 0.5*(ped1_normalized + ped2_normalized);
 800125c:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8001260:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001264:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001268:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800126c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001270:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84

	// Implausiblity check if both pedals are stepped
	if (normalized_brake > 0.2 && normalized_acc > 0.1) {
 8001274:	4b41      	ldr	r3, [pc, #260]	; (800137c <FEB_Normalized_Acc_Pedals+0x24c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff f97d 	bl	8000578 <__aeabi_f2d>
 800127e:	a334      	add	r3, pc, #208	; (adr r3, 8001350 <FEB_Normalized_Acc_Pedals+0x220>)
 8001280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001284:	f7ff fc60 	bl	8000b48 <__aeabi_dcmpgt>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d00f      	beq.n	80012ae <FEB_Normalized_Acc_Pedals+0x17e>
 800128e:	4b3c      	ldr	r3, [pc, #240]	; (8001380 <FEB_Normalized_Acc_Pedals+0x250>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff f970 	bl	8000578 <__aeabi_f2d>
 8001298:	a32f      	add	r3, pc, #188	; (adr r3, 8001358 <FEB_Normalized_Acc_Pedals+0x228>)
 800129a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129e:	f7ff fc53 	bl	8000b48 <__aeabi_dcmpgt>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d002      	beq.n	80012ae <FEB_Normalized_Acc_Pedals+0x17e>
		isImpl = true;
 80012a8:	4b31      	ldr	r3, [pc, #196]	; (8001370 <FEB_Normalized_Acc_Pedals+0x240>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	701a      	strb	r2, [r3, #0]
	}

	// recover from implausibility if acc pedal is not 5% less
	if (final_normalized < 0.05 && isImpl) {
 80012ae:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80012b2:	f7ff f961 	bl	8000578 <__aeabi_f2d>
 80012b6:	a32a      	add	r3, pc, #168	; (adr r3, 8001360 <FEB_Normalized_Acc_Pedals+0x230>)
 80012b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012bc:	f7ff fc26 	bl	8000b0c <__aeabi_dcmplt>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d006      	beq.n	80012d4 <FEB_Normalized_Acc_Pedals+0x1a4>
 80012c6:	4b2a      	ldr	r3, [pc, #168]	; (8001370 <FEB_Normalized_Acc_Pedals+0x240>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d002      	beq.n	80012d4 <FEB_Normalized_Acc_Pedals+0x1a4>
		isImpl = false;
 80012ce:	4b28      	ldr	r3, [pc, #160]	; (8001370 <FEB_Normalized_Acc_Pedals+0x240>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
	}

	if (!isImpl) {
 80012d4:	4b26      	ldr	r3, [pc, #152]	; (8001370 <FEB_Normalized_Acc_Pedals+0x240>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	f083 0301 	eor.w	r3, r3, #1
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d025      	beq.n	800132e <FEB_Normalized_Acc_Pedals+0x1fe>
		final_normalized = final_normalized > 1 ? 1 : final_normalized;
 80012e2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80012e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f2:	dd02      	ble.n	80012fa <FEB_Normalized_Acc_Pedals+0x1ca>
 80012f4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012f8:	e001      	b.n	80012fe <FEB_Normalized_Acc_Pedals+0x1ce>
 80012fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		final_normalized = final_normalized < 0.05 ? 0 : final_normalized;
 8001302:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001306:	f7ff f937 	bl	8000578 <__aeabi_f2d>
 800130a:	a315      	add	r3, pc, #84	; (adr r3, 8001360 <FEB_Normalized_Acc_Pedals+0x230>)
 800130c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001310:	f7ff fbfc 	bl	8000b0c <__aeabi_dcmplt>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d002      	beq.n	8001320 <FEB_Normalized_Acc_Pedals+0x1f0>
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	e001      	b.n	8001324 <FEB_Normalized_Acc_Pedals+0x1f4>
 8001320:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001324:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		return final_normalized;
 8001328:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800132c:	e001      	b.n	8001332 <FEB_Normalized_Acc_Pedals+0x202>
	} else {
		return 0.0;
 800132e:	f04f 0300 	mov.w	r3, #0
	}
}
 8001332:	ee07 3a90 	vmov	s15, r3
 8001336:	eeb0 0a67 	vmov.f32	s0, s15
 800133a:	3798      	adds	r7, #152	; 0x98
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	00000000 	.word	0x00000000
 8001344:	40a95a00 	.word	0x40a95a00
 8001348:	00000000 	.word	0x00000000
 800134c:	c06f4000 	.word	0xc06f4000
 8001350:	9999999a 	.word	0x9999999a
 8001354:	3fc99999 	.word	0x3fc99999
 8001358:	9999999a 	.word	0x9999999a
 800135c:	3fb99999 	.word	0x3fb99999
 8001360:	9999999a 	.word	0x9999999a
 8001364:	3fa99999 	.word	0x3fa99999
 8001368:	20000158 	.word	0x20000158
 800136c:	08005a64 	.word	0x08005a64
 8001370:	20000149 	.word	0x20000149
 8001374:	408ae000 	.word	0x408ae000
 8001378:	406f4000 	.word	0x406f4000
 800137c:	200000c4 	.word	0x200000c4
 8001380:	200000c0 	.word	0x200000c0
 8001384:	00000000 	.word	0x00000000

08001388 <FEB_Normalized_Brake_Pedals>:

float FEB_Normalized_Brake_Pedals(){
 8001388:	b580      	push	{r7, lr}
 800138a:	b0a2      	sub	sp, #136	; 0x88
 800138c:	af00      	add	r7, sp, #0
	uint16_t brake_pedal_1 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 800138e:	2101      	movs	r1, #1
 8001390:	483b      	ldr	r0, [pc, #236]	; (8001480 <FEB_Normalized_Brake_Pedals+0xf8>)
 8001392:	f001 f91d 	bl	80025d0 <HAL_ADCEx_InjectedGetValue>
 8001396:	4603      	mov	r3, r0
 8001398:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	char buf[128];
		uint8_t buf_len;
		buf_len = sprintf(buf, "brake%d\n", brake_pedal_1);
 800139c:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 80013a0:	463b      	mov	r3, r7
 80013a2:	4938      	ldr	r1, [pc, #224]	; (8001484 <FEB_Normalized_Brake_Pedals+0xfc>)
 80013a4:	4618      	mov	r0, r3
 80013a6:	f003 fea1 	bl	80050ec <siprintf>
 80013aa:	4603      	mov	r3, r0
 80013ac:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		HAL_UART_Transmit(&huart2,(uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 80013b0:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	4639      	mov	r1, r7
 80013b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013bc:	4832      	ldr	r0, [pc, #200]	; (8001488 <FEB_Normalized_Brake_Pedals+0x100>)
 80013be:	f003 fb20 	bl	8004a02 <HAL_UART_Transmit>

	float final_normalized = (brake_pedal_1 - BRAKE_PEDAL_1_START)/ (BRAKE_PEDAL_1_END - BRAKE_PEDAL_1_START);
 80013c2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff f8c4 	bl	8000554 <__aeabi_i2d>
 80013cc:	a328      	add	r3, pc, #160	; (adr r3, 8001470 <FEB_Normalized_Brake_Pedals+0xe8>)
 80013ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d2:	f7fe ff71 	bl	80002b8 <__aeabi_dsub>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4610      	mov	r0, r2
 80013dc:	4619      	mov	r1, r3
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	4b2a      	ldr	r3, [pc, #168]	; (800148c <FEB_Normalized_Brake_Pedals+0x104>)
 80013e4:	f7ff fa4a 	bl	800087c <__aeabi_ddiv>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4610      	mov	r0, r2
 80013ee:	4619      	mov	r1, r3
 80013f0:	f7ff fbdc 	bl	8000bac <__aeabi_d2f>
 80013f4:	4603      	mov	r3, r0
 80013f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	final_normalized = final_normalized > 1 ? 1 : final_normalized;
 80013fa:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80013fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001402:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800140a:	dd02      	ble.n	8001412 <FEB_Normalized_Brake_Pedals+0x8a>
 800140c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001410:	e001      	b.n	8001416 <FEB_Normalized_Brake_Pedals+0x8e>
 8001412:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001416:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	final_normalized = final_normalized < 0.05 ? 0 : final_normalized;
 800141a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800141e:	f7ff f8ab 	bl	8000578 <__aeabi_f2d>
 8001422:	a315      	add	r3, pc, #84	; (adr r3, 8001478 <FEB_Normalized_Brake_Pedals+0xf0>)
 8001424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001428:	f7ff fb70 	bl	8000b0c <__aeabi_dcmplt>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d002      	beq.n	8001438 <FEB_Normalized_Brake_Pedals+0xb0>
 8001432:	f04f 0300 	mov.w	r3, #0
 8001436:	e001      	b.n	800143c <FEB_Normalized_Brake_Pedals+0xb4>
 8001438:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800143c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

	if (brake_pedal_1 < 10 || brake_pedal_1 > 4085) {
 8001440:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001444:	2b09      	cmp	r3, #9
 8001446:	d905      	bls.n	8001454 <FEB_Normalized_Brake_Pedals+0xcc>
 8001448:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800144c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8001450:	4293      	cmp	r3, r2
 8001452:	d902      	bls.n	800145a <FEB_Normalized_Brake_Pedals+0xd2>
		return 0.0;
 8001454:	f04f 0300 	mov.w	r3, #0
 8001458:	e001      	b.n	800145e <FEB_Normalized_Brake_Pedals+0xd6>
	}

	return final_normalized;
 800145a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
}
 800145e:	ee07 3a90 	vmov	s15, r3
 8001462:	eeb0 0a67 	vmov.f32	s0, s15
 8001466:	3788      	adds	r7, #136	; 0x88
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	f3af 8000 	nop.w
 8001470:	00000000 	.word	0x00000000
 8001474:	40781000 	.word	0x40781000
 8001478:	9999999a 	.word	0x9999999a
 800147c:	3fa99999 	.word	0x3fa99999
 8001480:	20000158 	.word	0x20000158
 8001484:	08005a78 	.word	0x08005a78
 8001488:	20000210 	.word	0x20000210
 800148c:	40668000 	.word	0x40668000

08001490 <FEB_RMS_updateTorque>:

RMSControlType RMSControl;

// *********************** FUNCTIONS *********************

void FEB_RMS_updateTorque() {
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
  uint8_t message_data[8] = {RMSControl.torque & 0xFF, RMSControl.torque >> 8, 0, 0, 0, RMSControl.enabled, 0, 0};
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <FEB_RMS_updateTorque+0x48>)
 8001498:	881b      	ldrh	r3, [r3, #0]
 800149a:	b2db      	uxtb	r3, r3
 800149c:	703b      	strb	r3, [r7, #0]
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <FEB_RMS_updateTorque+0x48>)
 80014a0:	881b      	ldrh	r3, [r3, #0]
 80014a2:	0a1b      	lsrs	r3, r3, #8
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	707b      	strb	r3, [r7, #1]
 80014aa:	2300      	movs	r3, #0
 80014ac:	70bb      	strb	r3, [r7, #2]
 80014ae:	2300      	movs	r3, #0
 80014b0:	70fb      	strb	r3, [r7, #3]
 80014b2:	2300      	movs	r3, #0
 80014b4:	713b      	strb	r3, [r7, #4]
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <FEB_RMS_updateTorque+0x48>)
 80014b8:	789b      	ldrb	r3, [r3, #2]
 80014ba:	717b      	strb	r3, [r7, #5]
 80014bc:	2300      	movs	r3, #0
 80014be:	71bb      	strb	r3, [r7, #6]
 80014c0:	2300      	movs	r3, #0
 80014c2:	71fb      	strb	r3, [r7, #7]
  FEB_CAN_Transmit(&hcan1, 0x0C0, message_data, 8);
 80014c4:	463a      	mov	r2, r7
 80014c6:	2308      	movs	r3, #8
 80014c8:	21c0      	movs	r1, #192	; 0xc0
 80014ca:	4804      	ldr	r0, [pc, #16]	; (80014dc <FEB_RMS_updateTorque+0x4c>)
 80014cc:	f7ff fd6a 	bl	8000fa4 <FEB_CAN_Transmit>
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	2000014c 	.word	0x2000014c
 80014dc:	200001a0 	.word	0x200001a0

080014e0 <FEB_RMS_setTorque>:

void FEB_RMS_setTorque(uint16_t torque) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	80fb      	strh	r3, [r7, #6]
  RMSControl.torque = torque * 10;
 80014ea:	88fb      	ldrh	r3, [r7, #6]
 80014ec:	461a      	mov	r2, r3
 80014ee:	0092      	lsls	r2, r2, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	4b04      	ldr	r3, [pc, #16]	; (8001508 <FEB_RMS_setTorque+0x28>)
 80014f8:	801a      	strh	r2, [r3, #0]
  FEB_RMS_updateTorque();
 80014fa:	f7ff ffc9 	bl	8001490 <FEB_RMS_updateTorque>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	2000014c 	.word	0x2000014c

0800150c <FEB_RMS_Init>:
void FEB_RMS_disable() {
  RMSControl.enabled = 0;
  FEB_RMS_updateTorque();
}

void FEB_RMS_Init(){
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	; 0x28
 8001510:	af00      	add	r7, sp, #0
	// Clear fault in case inverter is powered up before disable command is sent
	uint8_t fault_clear_addr = 20;
 8001512:	2314      	movs	r3, #20
 8001514:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t fault_clear_data = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	// 0,1: param addr
	// 2: r/w cmd
	// 3: NA
	// 4,5: data
	// 6,7: NA
	uint8_t param_msg[8] = {fault_clear_addr, 0, 1, 0, fault_clear_data, 0, 0, 0};
 800151e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001522:	753b      	strb	r3, [r7, #20]
 8001524:	2300      	movs	r3, #0
 8001526:	757b      	strb	r3, [r7, #21]
 8001528:	2301      	movs	r3, #1
 800152a:	75bb      	strb	r3, [r7, #22]
 800152c:	2300      	movs	r3, #0
 800152e:	75fb      	strb	r3, [r7, #23]
 8001530:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001534:	763b      	strb	r3, [r7, #24]
 8001536:	2300      	movs	r3, #0
 8001538:	767b      	strb	r3, [r7, #25]
 800153a:	2300      	movs	r3, #0
 800153c:	76bb      	strb	r3, [r7, #26]
 800153e:	2300      	movs	r3, #0
 8001540:	76fb      	strb	r3, [r7, #27]
	FEB_CAN_Transmit(&hcan1, 0x0C1, param_msg, 8);
 8001542:	f107 0214 	add.w	r2, r7, #20
 8001546:	2308      	movs	r3, #8
 8001548:	21c1      	movs	r1, #193	; 0xc1
 800154a:	4820      	ldr	r0, [pc, #128]	; (80015cc <FEB_RMS_Init+0xc0>)
 800154c:	f7ff fd2a 	bl	8000fa4 <FEB_CAN_Transmit>

	// send disable command to remove lockout
	uint8_t message_data[8] = {0,0,0,0,0,0,0};
 8001550:	4a1f      	ldr	r2, [pc, #124]	; (80015d0 <FEB_RMS_Init+0xc4>)
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	e892 0003 	ldmia.w	r2, {r0, r1}
 800155a:	e883 0003 	stmia.w	r3, {r0, r1}
	for (int i = 0; i < 10; i++) {
 800155e:	2300      	movs	r3, #0
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
 8001562:	e00c      	b.n	800157e <FEB_RMS_Init+0x72>
		FEB_CAN_Transmit(&hcan1, 0x0C0, message_data, 8);
 8001564:	f107 020c 	add.w	r2, r7, #12
 8001568:	2308      	movs	r3, #8
 800156a:	21c0      	movs	r1, #192	; 0xc0
 800156c:	4817      	ldr	r0, [pc, #92]	; (80015cc <FEB_RMS_Init+0xc0>)
 800156e:	f7ff fd19 	bl	8000fa4 <FEB_CAN_Transmit>
		HAL_Delay(10);
 8001572:	200a      	movs	r0, #10
 8001574:	f000 fccc 	bl	8001f10 <HAL_Delay>
	for (int i = 0; i < 10; i++) {
 8001578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157a:	3301      	adds	r3, #1
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	2b09      	cmp	r3, #9
 8001582:	ddef      	ble.n	8001564 <FEB_RMS_Init+0x58>
	}

	// Select CAN msg to broadcast
	uint8_t param_addr = 148;
 8001584:	2394      	movs	r3, #148	; 0x94
 8001586:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
//	uint8_t CAN_active_msg_byte4 = 0b10100000; // motor position, input voltage
//	uint8_t CAN_active_msg_byte5 = 0b00010101; // flux info (dq axes), torque/timer info, internal states
	uint8_t CAN_active_msg_byte4 = 0xff; // literally log everything
 800158a:	23ff      	movs	r3, #255	; 0xff
 800158c:	f887 3020 	strb.w	r3, [r7, #32]
	uint8_t CAN_active_msg_byte5 = 0xff;
 8001590:	23ff      	movs	r3, #255	; 0xff
 8001592:	77fb      	strb	r3, [r7, #31]
	uint8_t broadcast_msg[8] = {param_addr, 0, 1, 0, CAN_active_msg_byte4, CAN_active_msg_byte5, 0, 0};
 8001594:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001598:	713b      	strb	r3, [r7, #4]
 800159a:	2300      	movs	r3, #0
 800159c:	717b      	strb	r3, [r7, #5]
 800159e:	2301      	movs	r3, #1
 80015a0:	71bb      	strb	r3, [r7, #6]
 80015a2:	2300      	movs	r3, #0
 80015a4:	71fb      	strb	r3, [r7, #7]
 80015a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015aa:	723b      	strb	r3, [r7, #8]
 80015ac:	7ffb      	ldrb	r3, [r7, #31]
 80015ae:	727b      	strb	r3, [r7, #9]
 80015b0:	2300      	movs	r3, #0
 80015b2:	72bb      	strb	r3, [r7, #10]
 80015b4:	2300      	movs	r3, #0
 80015b6:	72fb      	strb	r3, [r7, #11]
	FEB_CAN_Transmit(&hcan1, 0x0C1, broadcast_msg, 8);
 80015b8:	1d3a      	adds	r2, r7, #4
 80015ba:	2308      	movs	r3, #8
 80015bc:	21c1      	movs	r1, #193	; 0xc1
 80015be:	4803      	ldr	r0, [pc, #12]	; (80015cc <FEB_RMS_Init+0xc0>)
 80015c0:	f7ff fcf0 	bl	8000fa4 <FEB_CAN_Transmit>
}
 80015c4:	bf00      	nop
 80015c6:	3728      	adds	r7, #40	; 0x28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	200001a0 	.word	0x200001a0
 80015d0:	08005a84 	.word	0x08005a84

080015d4 <FEB_min>:

int16_t FEB_min(int16_t x1, int16_t x2) {
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	460a      	mov	r2, r1
 80015de:	80fb      	strh	r3, [r7, #6]
 80015e0:	4613      	mov	r3, r2
 80015e2:	80bb      	strh	r3, [r7, #4]
	if (x1 < x2) {
 80015e4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80015e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	da02      	bge.n	80015f6 <FEB_min+0x22>
		return x1;
 80015f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015f4:	e001      	b.n	80015fa <FEB_min+0x26>
	}
	return x2;
 80015f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
	...

08001608 <FEB_getMaxTorque>:
// returns a maximum torque that can be given from the motor at a given RPM and voltage
uint16_t FEB_getMaxTorque(int16_t voltage, int16_t RPM) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	460a      	mov	r2, r1
 8001612:	80fb      	strh	r3, [r7, #6]
 8001614:	4613      	mov	r3, r2
 8001616:	80bb      	strh	r3, [r7, #4]
	int16_t accumulator_voltage = FEB_min(INIT_VOLTAGE, (voltage-50) / 10);
 8001618:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800161c:	3b32      	subs	r3, #50	; 0x32
 800161e:	4a20      	ldr	r2, [pc, #128]	; (80016a0 <FEB_getMaxTorque+0x98>)
 8001620:	fb82 1203 	smull	r1, r2, r2, r3
 8001624:	1092      	asrs	r2, r2, #2
 8001626:	17db      	asrs	r3, r3, #31
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	b21b      	sxth	r3, r3
 800162c:	4619      	mov	r1, r3
 800162e:	20f2      	movs	r0, #242	; 0xf2
 8001630:	f7ff ffd0 	bl	80015d4 <FEB_min>
 8001634:	4603      	mov	r3, r0
 8001636:	81fb      	strh	r3, [r7, #14]
	int16_t motor_speed = -1 * RPM * RPM_TO_RAD_S;
 8001638:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800163c:	425b      	negs	r3, r3
 800163e:	4618      	mov	r0, r3
 8001640:	f7fe ff88 	bl	8000554 <__aeabi_i2d>
 8001644:	a314      	add	r3, pc, #80	; (adr r3, 8001698 <FEB_getMaxTorque+0x90>)
 8001646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164a:	f7fe ffed 	bl	8000628 <__aeabi_dmul>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	4610      	mov	r0, r2
 8001654:	4619      	mov	r1, r3
 8001656:	f7ff fa81 	bl	8000b5c <__aeabi_d2iz>
 800165a:	4603      	mov	r3, r0
 800165c:	81bb      	strh	r3, [r7, #12]
  // If speed is less than 15, we should command max torque
  // This catches divide by 0 errors and also negative speeds (which may create very high negative torque values)
	if (motor_speed < 15) {
 800165e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001662:	2b0e      	cmp	r3, #14
 8001664:	dc01      	bgt.n	800166a <FEB_getMaxTorque+0x62>
		return MAX_TORQUE;
 8001666:	23e6      	movs	r3, #230	; 0xe6
 8001668:	e012      	b.n	8001690 <FEB_getMaxTorque+0x88>
	}
	uint16_t maxTorque = FEB_min(MAX_TORQUE, (accumulator_voltage * PEAK_CURRENT) / motor_speed);
 800166a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800166e:	4613      	mov	r3, r2
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	4413      	add	r3, r2
 8001674:	015b      	lsls	r3, r3, #5
 8001676:	1a9a      	subs	r2, r3, r2
 8001678:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800167c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001680:	b21b      	sxth	r3, r3
 8001682:	4619      	mov	r1, r3
 8001684:	20e6      	movs	r0, #230	; 0xe6
 8001686:	f7ff ffa5 	bl	80015d4 <FEB_min>
 800168a:	4603      	mov	r3, r0
 800168c:	817b      	strh	r3, [r7, #10]
	return maxTorque;
 800168e:	897b      	ldrh	r3, [r7, #10]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	0f3cb3e5 	.word	0x0f3cb3e5
 800169c:	3fbaceee 	.word	0x3fbaceee
 80016a0:	66666667 	.word	0x66666667

080016a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016a8:	f000 fbc0 	bl	8001e2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016ac:	f000 f810 	bl	80016d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016b0:	f000 f97a 	bl	80019a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80016b4:	f000 f94e 	bl	8001954 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80016b8:	f000 f8c8 	bl	800184c <MX_CAN1_Init>
  MX_ADC1_Init();
 80016bc:	f000 f874 	bl	80017a8 <MX_ADC1_Init>
  MX_TIM5_Init();
 80016c0:	f000 f8fa 	bl	80018b8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  FEB_Main_User2();
 80016c4:	f7ff fc94 	bl	8000ff0 <FEB_Main_User2>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//ready to drive
	FEB_Main_User3();
 80016c8:	f7ff fcae 	bl	8001028 <FEB_Main_User3>
 80016cc:	e7fc      	b.n	80016c8 <main+0x24>
	...

080016d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b094      	sub	sp, #80	; 0x50
 80016d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016d6:	f107 031c 	add.w	r3, r7, #28
 80016da:	2234      	movs	r2, #52	; 0x34
 80016dc:	2100      	movs	r1, #0
 80016de:	4618      	mov	r0, r3
 80016e0:	f003 fd24 	bl	800512c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e4:	f107 0308 	add.w	r3, r7, #8
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f4:	2300      	movs	r3, #0
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	4b29      	ldr	r3, [pc, #164]	; (80017a0 <SystemClock_Config+0xd0>)
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	4a28      	ldr	r2, [pc, #160]	; (80017a0 <SystemClock_Config+0xd0>)
 80016fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001702:	6413      	str	r3, [r2, #64]	; 0x40
 8001704:	4b26      	ldr	r3, [pc, #152]	; (80017a0 <SystemClock_Config+0xd0>)
 8001706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001710:	2300      	movs	r3, #0
 8001712:	603b      	str	r3, [r7, #0]
 8001714:	4b23      	ldr	r3, [pc, #140]	; (80017a4 <SystemClock_Config+0xd4>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a22      	ldr	r2, [pc, #136]	; (80017a4 <SystemClock_Config+0xd4>)
 800171a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <SystemClock_Config+0xd4>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001728:	603b      	str	r3, [r7, #0]
 800172a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800172c:	2301      	movs	r3, #1
 800172e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001730:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001734:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001736:	2302      	movs	r3, #2
 8001738:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800173a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800173e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001740:	2304      	movs	r3, #4
 8001742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001744:	23a0      	movs	r3, #160	; 0xa0
 8001746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001748:	2302      	movs	r3, #2
 800174a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800174c:	2302      	movs	r3, #2
 800174e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001750:	2302      	movs	r3, #2
 8001752:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001754:	f107 031c 	add.w	r3, r7, #28
 8001758:	4618      	mov	r0, r3
 800175a:	f002 fb31 	bl	8003dc0 <HAL_RCC_OscConfig>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001764:	f000 f97e 	bl	8001a64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001768:	230f      	movs	r3, #15
 800176a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800176c:	2302      	movs	r3, #2
 800176e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001770:	2300      	movs	r3, #0
 8001772:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001774:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001778:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800177a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800177e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001780:	f107 0308 	add.w	r3, r7, #8
 8001784:	2105      	movs	r1, #5
 8001786:	4618      	mov	r0, r3
 8001788:	f001 ffd0 	bl	800372c <HAL_RCC_ClockConfig>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001792:	f000 f967 	bl	8001a64 <Error_Handler>
  }
}
 8001796:	bf00      	nop
 8001798:	3750      	adds	r7, #80	; 0x50
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40007000 	.word	0x40007000

080017a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017ae:	463b      	mov	r3, r7
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80017ba:	4b21      	ldr	r3, [pc, #132]	; (8001840 <MX_ADC1_Init+0x98>)
 80017bc:	4a21      	ldr	r2, [pc, #132]	; (8001844 <MX_ADC1_Init+0x9c>)
 80017be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80017c0:	4b1f      	ldr	r3, [pc, #124]	; (8001840 <MX_ADC1_Init+0x98>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017c6:	4b1e      	ldr	r3, [pc, #120]	; (8001840 <MX_ADC1_Init+0x98>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80017cc:	4b1c      	ldr	r3, [pc, #112]	; (8001840 <MX_ADC1_Init+0x98>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017d2:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <MX_ADC1_Init+0x98>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017d8:	4b19      	ldr	r3, [pc, #100]	; (8001840 <MX_ADC1_Init+0x98>)
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017e0:	4b17      	ldr	r3, [pc, #92]	; (8001840 <MX_ADC1_Init+0x98>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017e6:	4b16      	ldr	r3, [pc, #88]	; (8001840 <MX_ADC1_Init+0x98>)
 80017e8:	4a17      	ldr	r2, [pc, #92]	; (8001848 <MX_ADC1_Init+0xa0>)
 80017ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017ec:	4b14      	ldr	r3, [pc, #80]	; (8001840 <MX_ADC1_Init+0x98>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017f2:	4b13      	ldr	r3, [pc, #76]	; (8001840 <MX_ADC1_Init+0x98>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017f8:	4b11      	ldr	r3, [pc, #68]	; (8001840 <MX_ADC1_Init+0x98>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001800:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <MX_ADC1_Init+0x98>)
 8001802:	2201      	movs	r2, #1
 8001804:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001806:	480e      	ldr	r0, [pc, #56]	; (8001840 <MX_ADC1_Init+0x98>)
 8001808:	f000 fba6 	bl	8001f58 <HAL_ADC_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001812:	f000 f927 	bl	8001a64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001816:	2301      	movs	r3, #1
 8001818:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800181a:	2301      	movs	r3, #1
 800181c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800181e:	2300      	movs	r3, #0
 8001820:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001822:	463b      	mov	r3, r7
 8001824:	4619      	mov	r1, r3
 8001826:	4806      	ldr	r0, [pc, #24]	; (8001840 <MX_ADC1_Init+0x98>)
 8001828:	f000 fbda 	bl	8001fe0 <HAL_ADC_ConfigChannel>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001832:	f000 f917 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001836:	bf00      	nop
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000158 	.word	0x20000158
 8001844:	40012000 	.word	0x40012000
 8001848:	0f000001 	.word	0x0f000001

0800184c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001850:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <MX_CAN1_Init+0x64>)
 8001852:	4a18      	ldr	r2, [pc, #96]	; (80018b4 <MX_CAN1_Init+0x68>)
 8001854:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001856:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <MX_CAN1_Init+0x64>)
 8001858:	2210      	movs	r2, #16
 800185a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800185c:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <MX_CAN1_Init+0x64>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001862:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <MX_CAN1_Init+0x64>)
 8001864:	2200      	movs	r2, #0
 8001866:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001868:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <MX_CAN1_Init+0x64>)
 800186a:	2200      	movs	r2, #0
 800186c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800186e:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <MX_CAN1_Init+0x64>)
 8001870:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001874:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001876:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <MX_CAN1_Init+0x64>)
 8001878:	2200      	movs	r2, #0
 800187a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <MX_CAN1_Init+0x64>)
 800187e:	2200      	movs	r2, #0
 8001880:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001882:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <MX_CAN1_Init+0x64>)
 8001884:	2200      	movs	r2, #0
 8001886:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001888:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <MX_CAN1_Init+0x64>)
 800188a:	2200      	movs	r2, #0
 800188c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800188e:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <MX_CAN1_Init+0x64>)
 8001890:	2200      	movs	r2, #0
 8001892:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <MX_CAN1_Init+0x64>)
 8001896:	2200      	movs	r2, #0
 8001898:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800189a:	4805      	ldr	r0, [pc, #20]	; (80018b0 <MX_CAN1_Init+0x64>)
 800189c:	f000 fed0 	bl	8002640 <HAL_CAN_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80018a6:	f000 f8dd 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	200001a0 	.word	0x200001a0
 80018b4:	40006400 	.word	0x40006400

080018b8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018be:	f107 0308 	add.w	r3, r7, #8
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018cc:	463b      	mov	r3, r7
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80018d4:	4b1d      	ldr	r3, [pc, #116]	; (800194c <MX_TIM5_Init+0x94>)
 80018d6:	4a1e      	ldr	r2, [pc, #120]	; (8001950 <MX_TIM5_Init+0x98>)
 80018d8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80018da:	4b1c      	ldr	r3, [pc, #112]	; (800194c <MX_TIM5_Init+0x94>)
 80018dc:	2200      	movs	r2, #0
 80018de:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e0:	4b1a      	ldr	r3, [pc, #104]	; (800194c <MX_TIM5_Init+0x94>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80018e6:	4b19      	ldr	r3, [pc, #100]	; (800194c <MX_TIM5_Init+0x94>)
 80018e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018ec:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ee:	4b17      	ldr	r3, [pc, #92]	; (800194c <MX_TIM5_Init+0x94>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f4:	4b15      	ldr	r3, [pc, #84]	; (800194c <MX_TIM5_Init+0x94>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80018fa:	4814      	ldr	r0, [pc, #80]	; (800194c <MX_TIM5_Init+0x94>)
 80018fc:	f002 fcfe 	bl	80042fc <HAL_TIM_Base_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001906:	f000 f8ad 	bl	8001a64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800190a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800190e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001910:	f107 0308 	add.w	r3, r7, #8
 8001914:	4619      	mov	r1, r3
 8001916:	480d      	ldr	r0, [pc, #52]	; (800194c <MX_TIM5_Init+0x94>)
 8001918:	f002 fda8 	bl	800446c <HAL_TIM_ConfigClockSource>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001922:	f000 f89f 	bl	8001a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001926:	2300      	movs	r3, #0
 8001928:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192a:	2300      	movs	r3, #0
 800192c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800192e:	463b      	mov	r3, r7
 8001930:	4619      	mov	r1, r3
 8001932:	4806      	ldr	r0, [pc, #24]	; (800194c <MX_TIM5_Init+0x94>)
 8001934:	f002 ff9c 	bl	8004870 <HAL_TIMEx_MasterConfigSynchronization>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800193e:	f000 f891 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001942:	bf00      	nop
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	200001c8 	.word	0x200001c8
 8001950:	40000c00 	.word	0x40000c00

08001954 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 800195a:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <MX_USART2_UART_Init+0x50>)
 800195c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 8001960:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001964:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001966:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 800196e:	2200      	movs	r2, #0
 8001970:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001972:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 8001974:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001978:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 800197c:	2208      	movs	r2, #8
 800197e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001980:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 8001982:	2200      	movs	r2, #0
 8001984:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 8001988:	2200      	movs	r2, #0
 800198a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800198c:	4804      	ldr	r0, [pc, #16]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 800198e:	f002 ffeb 	bl	8004968 <HAL_UART_Init>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8001998:	f000 f864 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000210 	.word	0x20000210
 80019a4:	40004400 	.word	0x40004400

080019a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b088      	sub	sp, #32
 80019ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ae:	f107 030c 	add.w	r3, r7, #12
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]
 80019b8:	609a      	str	r2, [r3, #8]
 80019ba:	60da      	str	r2, [r3, #12]
 80019bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	4b26      	ldr	r3, [pc, #152]	; (8001a5c <MX_GPIO_Init+0xb4>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	4a25      	ldr	r2, [pc, #148]	; (8001a5c <MX_GPIO_Init+0xb4>)
 80019c8:	f043 0304 	orr.w	r3, r3, #4
 80019cc:	6313      	str	r3, [r2, #48]	; 0x30
 80019ce:	4b23      	ldr	r3, [pc, #140]	; (8001a5c <MX_GPIO_Init+0xb4>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	f003 0304 	and.w	r3, r3, #4
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	607b      	str	r3, [r7, #4]
 80019de:	4b1f      	ldr	r3, [pc, #124]	; (8001a5c <MX_GPIO_Init+0xb4>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	4a1e      	ldr	r2, [pc, #120]	; (8001a5c <MX_GPIO_Init+0xb4>)
 80019e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019e8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ea:	4b1c      	ldr	r3, [pc, #112]	; (8001a5c <MX_GPIO_Init+0xb4>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	603b      	str	r3, [r7, #0]
 80019fa:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <MX_GPIO_Init+0xb4>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	4a17      	ldr	r2, [pc, #92]	; (8001a5c <MX_GPIO_Init+0xb4>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <MX_GPIO_Init+0xb4>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	603b      	str	r3, [r7, #0]
 8001a10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2106      	movs	r1, #6
 8001a16:	4812      	ldr	r0, [pc, #72]	; (8001a60 <MX_GPIO_Init+0xb8>)
 8001a18:	f001 fe6e 	bl	80036f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a22:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a2c:	f107 030c 	add.w	r3, r7, #12
 8001a30:	4619      	mov	r1, r3
 8001a32:	480b      	ldr	r0, [pc, #44]	; (8001a60 <MX_GPIO_Init+0xb8>)
 8001a34:	f001 fccc 	bl	80033d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001a38:	2306      	movs	r3, #6
 8001a3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a48:	f107 030c 	add.w	r3, r7, #12
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4804      	ldr	r0, [pc, #16]	; (8001a60 <MX_GPIO_Init+0xb8>)
 8001a50:	f001 fcbe 	bl	80033d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a54:	bf00      	nop
 8001a56:	3720      	adds	r7, #32
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40020800 	.word	0x40020800

08001a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a68:	b672      	cpsid	i
}
 8001a6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <Error_Handler+0x8>
	...

08001a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	607b      	str	r3, [r7, #4]
 8001a7a:	4b10      	ldr	r3, [pc, #64]	; (8001abc <HAL_MspInit+0x4c>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	4a0f      	ldr	r2, [pc, #60]	; (8001abc <HAL_MspInit+0x4c>)
 8001a80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a84:	6453      	str	r3, [r2, #68]	; 0x44
 8001a86:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <HAL_MspInit+0x4c>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a8e:	607b      	str	r3, [r7, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	603b      	str	r3, [r7, #0]
 8001a96:	4b09      	ldr	r3, [pc, #36]	; (8001abc <HAL_MspInit+0x4c>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	4a08      	ldr	r2, [pc, #32]	; (8001abc <HAL_MspInit+0x4c>)
 8001a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa2:	4b06      	ldr	r3, [pc, #24]	; (8001abc <HAL_MspInit+0x4c>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aaa:	603b      	str	r3, [r7, #0]
 8001aac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	40023800 	.word	0x40023800

08001ac0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08a      	sub	sp, #40	; 0x28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a17      	ldr	r2, [pc, #92]	; (8001b3c <HAL_ADC_MspInit+0x7c>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d127      	bne.n	8001b32 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
 8001ae6:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <HAL_ADC_MspInit+0x80>)
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aea:	4a15      	ldr	r2, [pc, #84]	; (8001b40 <HAL_ADC_MspInit+0x80>)
 8001aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af0:	6453      	str	r3, [r2, #68]	; 0x44
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <HAL_ADC_MspInit+0x80>)
 8001af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afa:	613b      	str	r3, [r7, #16]
 8001afc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <HAL_ADC_MspInit+0x80>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	4a0e      	ldr	r2, [pc, #56]	; (8001b40 <HAL_ADC_MspInit+0x80>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0e:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <HAL_ADC_MspInit+0x80>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001b1a:	2332      	movs	r3, #50	; 0x32
 8001b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4805      	ldr	r0, [pc, #20]	; (8001b44 <HAL_ADC_MspInit+0x84>)
 8001b2e:	f001 fc4f 	bl	80033d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b32:	bf00      	nop
 8001b34:	3728      	adds	r7, #40	; 0x28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40012000 	.word	0x40012000
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40020000 	.word	0x40020000

08001b48 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08a      	sub	sp, #40	; 0x28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a21      	ldr	r2, [pc, #132]	; (8001bec <HAL_CAN_MspInit+0xa4>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d13c      	bne.n	8001be4 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	4b20      	ldr	r3, [pc, #128]	; (8001bf0 <HAL_CAN_MspInit+0xa8>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	4a1f      	ldr	r2, [pc, #124]	; (8001bf0 <HAL_CAN_MspInit+0xa8>)
 8001b74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b78:	6413      	str	r3, [r2, #64]	; 0x40
 8001b7a:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <HAL_CAN_MspInit+0xa8>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	4b19      	ldr	r3, [pc, #100]	; (8001bf0 <HAL_CAN_MspInit+0xa8>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a18      	ldr	r2, [pc, #96]	; (8001bf0 <HAL_CAN_MspInit+0xa8>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <HAL_CAN_MspInit+0xa8>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001ba2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001bb4:	2309      	movs	r3, #9
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	480d      	ldr	r0, [pc, #52]	; (8001bf4 <HAL_CAN_MspInit+0xac>)
 8001bc0:	f001 fc06 	bl	80033d0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	2014      	movs	r0, #20
 8001bca:	f001 fbca 	bl	8003362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001bce:	2014      	movs	r0, #20
 8001bd0:	f001 fbe3 	bl	800339a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	2015      	movs	r0, #21
 8001bda:	f001 fbc2 	bl	8003362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001bde:	2015      	movs	r0, #21
 8001be0:	f001 fbdb 	bl	800339a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001be4:	bf00      	nop
 8001be6:	3728      	adds	r7, #40	; 0x28
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40006400 	.word	0x40006400
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40020000 	.word	0x40020000

08001bf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a0b      	ldr	r2, [pc, #44]	; (8001c34 <HAL_TIM_Base_MspInit+0x3c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d10d      	bne.n	8001c26 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <HAL_TIM_Base_MspInit+0x40>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	4a09      	ldr	r2, [pc, #36]	; (8001c38 <HAL_TIM_Base_MspInit+0x40>)
 8001c14:	f043 0308 	orr.w	r3, r3, #8
 8001c18:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1a:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <HAL_TIM_Base_MspInit+0x40>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001c26:	bf00      	nop
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40000c00 	.word	0x40000c00
 8001c38:	40023800 	.word	0x40023800

08001c3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08a      	sub	sp, #40	; 0x28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a19      	ldr	r2, [pc, #100]	; (8001cc0 <HAL_UART_MspInit+0x84>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d12b      	bne.n	8001cb6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <HAL_UART_MspInit+0x88>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	4a17      	ldr	r2, [pc, #92]	; (8001cc4 <HAL_UART_MspInit+0x88>)
 8001c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6e:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <HAL_UART_MspInit+0x88>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <HAL_UART_MspInit+0x88>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	4a10      	ldr	r2, [pc, #64]	; (8001cc4 <HAL_UART_MspInit+0x88>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <HAL_UART_MspInit+0x88>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c96:	230c      	movs	r3, #12
 8001c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ca6:	2307      	movs	r3, #7
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4805      	ldr	r0, [pc, #20]	; (8001cc8 <HAL_UART_MspInit+0x8c>)
 8001cb2:	f001 fb8d 	bl	80033d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cb6:	bf00      	nop
 8001cb8:	3728      	adds	r7, #40	; 0x28
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40004400 	.word	0x40004400
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40020000 	.word	0x40020000

08001ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <NMI_Handler+0x4>

08001cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cd6:	e7fe      	b.n	8001cd6 <HardFault_Handler+0x4>

08001cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cdc:	e7fe      	b.n	8001cdc <MemManage_Handler+0x4>

08001cde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ce2:	e7fe      	b.n	8001ce2 <BusFault_Handler+0x4>

08001ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce8:	e7fe      	b.n	8001ce8 <UsageFault_Handler+0x4>

08001cea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d18:	f000 f8da 	bl	8001ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d1c:	bf00      	nop
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d24:	4802      	ldr	r0, [pc, #8]	; (8001d30 <CAN1_RX0_IRQHandler+0x10>)
 8001d26:	f001 f812 	bl	8002d4e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	200001a0 	.word	0x200001a0

08001d34 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d38:	4802      	ldr	r0, [pc, #8]	; (8001d44 <CAN1_RX1_IRQHandler+0x10>)
 8001d3a:	f001 f808 	bl	8002d4e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	200001a0 	.word	0x200001a0

08001d48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d50:	4a14      	ldr	r2, [pc, #80]	; (8001da4 <_sbrk+0x5c>)
 8001d52:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <_sbrk+0x60>)
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d5c:	4b13      	ldr	r3, [pc, #76]	; (8001dac <_sbrk+0x64>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d102      	bne.n	8001d6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d64:	4b11      	ldr	r3, [pc, #68]	; (8001dac <_sbrk+0x64>)
 8001d66:	4a12      	ldr	r2, [pc, #72]	; (8001db0 <_sbrk+0x68>)
 8001d68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <_sbrk+0x64>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d207      	bcs.n	8001d88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d78:	f003 f9e0 	bl	800513c <__errno>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	220c      	movs	r2, #12
 8001d80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d86:	e009      	b.n	8001d9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d88:	4b08      	ldr	r3, [pc, #32]	; (8001dac <_sbrk+0x64>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d8e:	4b07      	ldr	r3, [pc, #28]	; (8001dac <_sbrk+0x64>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4413      	add	r3, r2
 8001d96:	4a05      	ldr	r2, [pc, #20]	; (8001dac <_sbrk+0x64>)
 8001d98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20020000 	.word	0x20020000
 8001da8:	00000400 	.word	0x00000400
 8001dac:	20000254 	.word	0x20000254
 8001db0:	200003a8 	.word	0x200003a8

08001db4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <SystemInit+0x20>)
 8001dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dbe:	4a05      	ldr	r2, [pc, #20]	; (8001dd4 <SystemInit+0x20>)
 8001dc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dc8:	bf00      	nop
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001dd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ddc:	480d      	ldr	r0, [pc, #52]	; (8001e14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dde:	490e      	ldr	r1, [pc, #56]	; (8001e18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001de0:	4a0e      	ldr	r2, [pc, #56]	; (8001e1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001de4:	e002      	b.n	8001dec <LoopCopyDataInit>

08001de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dea:	3304      	adds	r3, #4

08001dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001df0:	d3f9      	bcc.n	8001de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001df2:	4a0b      	ldr	r2, [pc, #44]	; (8001e20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001df4:	4c0b      	ldr	r4, [pc, #44]	; (8001e24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001df8:	e001      	b.n	8001dfe <LoopFillZerobss>

08001dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dfc:	3204      	adds	r2, #4

08001dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e00:	d3fb      	bcc.n	8001dfa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e02:	f7ff ffd7 	bl	8001db4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e06:	f003 f99f 	bl	8005148 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e0a:	f7ff fc4b 	bl	80016a4 <main>
  bx  lr    
 8001e0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e18:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001e1c:	08005ae8 	.word	0x08005ae8
  ldr r2, =_sbss
 8001e20:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001e24:	200003a4 	.word	0x200003a4

08001e28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e28:	e7fe      	b.n	8001e28 <ADC_IRQHandler>
	...

08001e2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e30:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <HAL_Init+0x40>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a0d      	ldr	r2, [pc, #52]	; (8001e6c <HAL_Init+0x40>)
 8001e36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e3c:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <HAL_Init+0x40>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a0a      	ldr	r2, [pc, #40]	; (8001e6c <HAL_Init+0x40>)
 8001e42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e48:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <HAL_Init+0x40>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a07      	ldr	r2, [pc, #28]	; (8001e6c <HAL_Init+0x40>)
 8001e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e54:	2003      	movs	r0, #3
 8001e56:	f001 fa79 	bl	800334c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e5a:	200f      	movs	r0, #15
 8001e5c:	f000 f808 	bl	8001e70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e60:	f7ff fe06 	bl	8001a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40023c00 	.word	0x40023c00

08001e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e78:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <HAL_InitTick+0x54>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <HAL_InitTick+0x58>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	4619      	mov	r1, r3
 8001e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f001 fa91 	bl	80033b6 <HAL_SYSTICK_Config>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e00e      	b.n	8001ebc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b0f      	cmp	r3, #15
 8001ea2:	d80a      	bhi.n	8001eba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001eac:	f001 fa59 	bl	8003362 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eb0:	4a06      	ldr	r2, [pc, #24]	; (8001ecc <HAL_InitTick+0x5c>)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	e000      	b.n	8001ebc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20000000 	.word	0x20000000
 8001ec8:	20000008 	.word	0x20000008
 8001ecc:	20000004 	.word	0x20000004

08001ed0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_IncTick+0x20>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <HAL_IncTick+0x24>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4413      	add	r3, r2
 8001ee0:	4a04      	ldr	r2, [pc, #16]	; (8001ef4 <HAL_IncTick+0x24>)
 8001ee2:	6013      	str	r3, [r2, #0]
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20000008 	.word	0x20000008
 8001ef4:	20000258 	.word	0x20000258

08001ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return uwTick;
 8001efc:	4b03      	ldr	r3, [pc, #12]	; (8001f0c <HAL_GetTick+0x14>)
 8001efe:	681b      	ldr	r3, [r3, #0]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	20000258 	.word	0x20000258

08001f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f18:	f7ff ffee 	bl	8001ef8 <HAL_GetTick>
 8001f1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f28:	d005      	beq.n	8001f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <HAL_Delay+0x44>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4413      	add	r3, r2
 8001f34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f36:	bf00      	nop
 8001f38:	f7ff ffde 	bl	8001ef8 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d8f7      	bhi.n	8001f38 <HAL_Delay+0x28>
  {
  }
}
 8001f48:	bf00      	nop
 8001f4a:	bf00      	nop
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000008 	.word	0x20000008

08001f58 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f60:	2300      	movs	r3, #0
 8001f62:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e033      	b.n	8001fd6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d109      	bne.n	8001f8a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7ff fda2 	bl	8001ac0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	f003 0310 	and.w	r3, r3, #16
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d118      	bne.n	8001fc8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f9e:	f023 0302 	bic.w	r3, r3, #2
 8001fa2:	f043 0202 	orr.w	r2, r3, #2
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f94a 	bl	8002244 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	f023 0303 	bic.w	r3, r3, #3
 8001fbe:	f043 0201 	orr.w	r2, r3, #1
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	641a      	str	r2, [r3, #64]	; 0x40
 8001fc6:	e001      	b.n	8001fcc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
	...

08001fe0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d101      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x1c>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e113      	b.n	8002224 <HAL_ADC_ConfigChannel+0x244>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b09      	cmp	r3, #9
 800200a:	d925      	bls.n	8002058 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68d9      	ldr	r1, [r3, #12]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	b29b      	uxth	r3, r3
 8002018:	461a      	mov	r2, r3
 800201a:	4613      	mov	r3, r2
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	4413      	add	r3, r2
 8002020:	3b1e      	subs	r3, #30
 8002022:	2207      	movs	r2, #7
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43da      	mvns	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	400a      	ands	r2, r1
 8002030:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68d9      	ldr	r1, [r3, #12]
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	b29b      	uxth	r3, r3
 8002042:	4618      	mov	r0, r3
 8002044:	4603      	mov	r3, r0
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	4403      	add	r3, r0
 800204a:	3b1e      	subs	r3, #30
 800204c:	409a      	lsls	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	430a      	orrs	r2, r1
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	e022      	b.n	800209e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6919      	ldr	r1, [r3, #16]
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	b29b      	uxth	r3, r3
 8002064:	461a      	mov	r2, r3
 8002066:	4613      	mov	r3, r2
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	4413      	add	r3, r2
 800206c:	2207      	movs	r2, #7
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43da      	mvns	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	400a      	ands	r2, r1
 800207a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6919      	ldr	r1, [r3, #16]
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	b29b      	uxth	r3, r3
 800208c:	4618      	mov	r0, r3
 800208e:	4603      	mov	r3, r0
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	4403      	add	r3, r0
 8002094:	409a      	lsls	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	430a      	orrs	r2, r1
 800209c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b06      	cmp	r3, #6
 80020a4:	d824      	bhi.n	80020f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	4613      	mov	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	3b05      	subs	r3, #5
 80020b8:	221f      	movs	r2, #31
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43da      	mvns	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	400a      	ands	r2, r1
 80020c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	4618      	mov	r0, r3
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	3b05      	subs	r3, #5
 80020e2:	fa00 f203 	lsl.w	r2, r0, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	635a      	str	r2, [r3, #52]	; 0x34
 80020ee:	e04c      	b.n	800218a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b0c      	cmp	r3, #12
 80020f6:	d824      	bhi.n	8002142 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	3b23      	subs	r3, #35	; 0x23
 800210a:	221f      	movs	r2, #31
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	43da      	mvns	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	400a      	ands	r2, r1
 8002118:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	b29b      	uxth	r3, r3
 8002126:	4618      	mov	r0, r3
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	3b23      	subs	r3, #35	; 0x23
 8002134:	fa00 f203 	lsl.w	r2, r0, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	430a      	orrs	r2, r1
 800213e:	631a      	str	r2, [r3, #48]	; 0x30
 8002140:	e023      	b.n	800218a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	4613      	mov	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	3b41      	subs	r3, #65	; 0x41
 8002154:	221f      	movs	r2, #31
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43da      	mvns	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	400a      	ands	r2, r1
 8002162:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	b29b      	uxth	r3, r3
 8002170:	4618      	mov	r0, r3
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	4613      	mov	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	3b41      	subs	r3, #65	; 0x41
 800217e:	fa00 f203 	lsl.w	r2, r0, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800218a:	4b29      	ldr	r3, [pc, #164]	; (8002230 <HAL_ADC_ConfigChannel+0x250>)
 800218c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a28      	ldr	r2, [pc, #160]	; (8002234 <HAL_ADC_ConfigChannel+0x254>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d10f      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x1d8>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2b12      	cmp	r3, #18
 800219e:	d10b      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a1d      	ldr	r2, [pc, #116]	; (8002234 <HAL_ADC_ConfigChannel+0x254>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d12b      	bne.n	800221a <HAL_ADC_ConfigChannel+0x23a>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a1c      	ldr	r2, [pc, #112]	; (8002238 <HAL_ADC_ConfigChannel+0x258>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d003      	beq.n	80021d4 <HAL_ADC_ConfigChannel+0x1f4>
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b11      	cmp	r3, #17
 80021d2:	d122      	bne.n	800221a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a11      	ldr	r2, [pc, #68]	; (8002238 <HAL_ADC_ConfigChannel+0x258>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d111      	bne.n	800221a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021f6:	4b11      	ldr	r3, [pc, #68]	; (800223c <HAL_ADC_ConfigChannel+0x25c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a11      	ldr	r2, [pc, #68]	; (8002240 <HAL_ADC_ConfigChannel+0x260>)
 80021fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002200:	0c9a      	lsrs	r2, r3, #18
 8002202:	4613      	mov	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800220c:	e002      	b.n	8002214 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	3b01      	subs	r3, #1
 8002212:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f9      	bne.n	800220e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	40012300 	.word	0x40012300
 8002234:	40012000 	.word	0x40012000
 8002238:	10000012 	.word	0x10000012
 800223c:	20000000 	.word	0x20000000
 8002240:	431bde83 	.word	0x431bde83

08002244 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800224c:	4b79      	ldr	r3, [pc, #484]	; (8002434 <ADC_Init+0x1f0>)
 800224e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	431a      	orrs	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002278:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6859      	ldr	r1, [r3, #4]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	021a      	lsls	r2, r3, #8
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800229c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6859      	ldr	r1, [r3, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	689a      	ldr	r2, [r3, #8]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6899      	ldr	r1, [r3, #8]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d6:	4a58      	ldr	r2, [pc, #352]	; (8002438 <ADC_Init+0x1f4>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d022      	beq.n	8002322 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6899      	ldr	r1, [r3, #8]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800230c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6899      	ldr	r1, [r3, #8]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	e00f      	b.n	8002342 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002330:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002340:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0202 	bic.w	r2, r2, #2
 8002350:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6899      	ldr	r1, [r3, #8]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	7e1b      	ldrb	r3, [r3, #24]
 800235c:	005a      	lsls	r2, r3, #1
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 3020 	ldrb.w	r3, [r3, #32]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d01b      	beq.n	80023a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800237e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800238e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6859      	ldr	r1, [r3, #4]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	3b01      	subs	r3, #1
 800239c:	035a      	lsls	r2, r3, #13
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	e007      	b.n	80023b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80023c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	051a      	lsls	r2, r3, #20
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6899      	ldr	r1, [r3, #8]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023fa:	025a      	lsls	r2, r3, #9
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002412:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6899      	ldr	r1, [r3, #8]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	029a      	lsls	r2, r3, #10
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	430a      	orrs	r2, r1
 8002426:	609a      	str	r2, [r3, #8]
}
 8002428:	bf00      	nop
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	40012300 	.word	0x40012300
 8002438:	0f000001 	.word	0x0f000001

0800243c <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 800243c:	b480      	push	{r7}
 800243e:	b087      	sub	sp, #28
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002444:	2300      	movs	r3, #0
 8002446:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]
 800244c:	2300      	movs	r3, #0
 800244e:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002456:	2b01      	cmp	r3, #1
 8002458:	d101      	bne.n	800245e <HAL_ADCEx_InjectedStart+0x22>
 800245a:	2302      	movs	r3, #2
 800245c:	e0aa      	b.n	80025b4 <HAL_ADCEx_InjectedStart+0x178>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b01      	cmp	r3, #1
 8002472:	d018      	beq.n	80024a6 <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0201 	orr.w	r2, r2, #1
 8002482:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002484:	4b4e      	ldr	r3, [pc, #312]	; (80025c0 <HAL_ADCEx_InjectedStart+0x184>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a4e      	ldr	r2, [pc, #312]	; (80025c4 <HAL_ADCEx_InjectedStart+0x188>)
 800248a:	fba2 2303 	umull	r2, r3, r2, r3
 800248e:	0c9a      	lsrs	r2, r3, #18
 8002490:	4613      	mov	r3, r2
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	4413      	add	r3, r2
 8002496:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002498:	e002      	b.n	80024a0 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	3b01      	subs	r3, #1
 800249e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f9      	bne.n	800249a <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d172      	bne.n	800259a <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024bc:	f023 0301 	bic.w	r3, r3, #1
 80024c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d102      	bne.n	80024da <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f06f 0204 	mvn.w	r2, #4
 80024ea:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024ec:	4b36      	ldr	r3, [pc, #216]	; (80025c8 <HAL_ADCEx_InjectedStart+0x18c>)
 80024ee:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 031f 	and.w	r3, r3, #31
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d124      	bne.n	8002546 <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002506:	2b00      	cmp	r3, #0
 8002508:	bf0c      	ite	eq
 800250a:	2301      	moveq	r3, #1
 800250c:	2300      	movne	r3, #0
 800250e:	b2db      	uxtb	r3, r3
 8002510:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800251c:	2b00      	cmp	r3, #0
 800251e:	bf0c      	ite	eq
 8002520:	2301      	moveq	r3, #1
 8002522:	2300      	movne	r3, #0
 8002524:	b2db      	uxtb	r3, r3
 8002526:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d041      	beq.n	80025b2 <HAL_ADCEx_InjectedStart+0x176>
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d03e      	beq.n	80025b2 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	e035      	b.n	80025b2 <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002550:	2b00      	cmp	r3, #0
 8002552:	bf0c      	ite	eq
 8002554:	2301      	moveq	r3, #1
 8002556:	2300      	movne	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002566:	2b00      	cmp	r3, #0
 8002568:	bf0c      	ite	eq
 800256a:	2301      	moveq	r3, #1
 800256c:	2300      	movne	r3, #0
 800256e:	b2db      	uxtb	r3, r3
 8002570:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a15      	ldr	r2, [pc, #84]	; (80025cc <HAL_ADCEx_InjectedStart+0x190>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d11a      	bne.n	80025b2 <HAL_ADCEx_InjectedStart+0x176>
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d017      	beq.n	80025b2 <HAL_ADCEx_InjectedStart+0x176>
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d014      	beq.n	80025b2 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	e00b      	b.n	80025b2 <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	f043 0210 	orr.w	r2, r3, #16
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	f043 0201 	orr.w	r2, r3, #1
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	371c      	adds	r7, #28
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	20000000 	.word	0x20000000
 80025c4:	431bde83 	.word	0x431bde83
 80025c8:	40012300 	.word	0x40012300
 80025cc:	40012000 	.word	0x40012000

080025d0 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 80025da:	2300      	movs	r3, #0
 80025dc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f06f 0204 	mvn.w	r2, #4
 80025e6:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	3b01      	subs	r3, #1
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d81f      	bhi.n	8002630 <HAL_ADCEx_InjectedGetValue+0x60>
 80025f0:	a201      	add	r2, pc, #4	; (adr r2, 80025f8 <HAL_ADCEx_InjectedGetValue+0x28>)
 80025f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f6:	bf00      	nop
 80025f8:	08002627 	.word	0x08002627
 80025fc:	0800261d 	.word	0x0800261d
 8002600:	08002613 	.word	0x08002613
 8002604:	08002609 	.word	0x08002609
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800260e:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8002610:	e00f      	b.n	8002632 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002618:	60fb      	str	r3, [r7, #12]
    }  
    break;
 800261a:	e00a      	b.n	8002632 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	60fb      	str	r3, [r7, #12]
    }
    break;
 8002624:	e005      	b.n	8002632 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262c:	60fb      	str	r3, [r7, #12]
    }
    break;
 800262e:	e000      	b.n	8002632 <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8002630:	bf00      	nop
  }
  return tmp;
 8002632:	68fb      	ldr	r3, [r7, #12]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e0ed      	b.n	800282e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d102      	bne.n	8002664 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff fa72 	bl	8001b48 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0201 	orr.w	r2, r2, #1
 8002672:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002674:	f7ff fc40 	bl	8001ef8 <HAL_GetTick>
 8002678:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800267a:	e012      	b.n	80026a2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800267c:	f7ff fc3c 	bl	8001ef8 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b0a      	cmp	r3, #10
 8002688:	d90b      	bls.n	80026a2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2205      	movs	r2, #5
 800269a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e0c5      	b.n	800282e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0e5      	beq.n	800267c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 0202 	bic.w	r2, r2, #2
 80026be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026c0:	f7ff fc1a 	bl	8001ef8 <HAL_GetTick>
 80026c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80026c6:	e012      	b.n	80026ee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026c8:	f7ff fc16 	bl	8001ef8 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b0a      	cmp	r3, #10
 80026d4:	d90b      	bls.n	80026ee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2205      	movs	r2, #5
 80026e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e09f      	b.n	800282e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1e5      	bne.n	80026c8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	7e1b      	ldrb	r3, [r3, #24]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d108      	bne.n	8002716 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	e007      	b.n	8002726 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002724:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	7e5b      	ldrb	r3, [r3, #25]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d108      	bne.n	8002740 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	e007      	b.n	8002750 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800274e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	7e9b      	ldrb	r3, [r3, #26]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d108      	bne.n	800276a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f042 0220 	orr.w	r2, r2, #32
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	e007      	b.n	800277a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0220 	bic.w	r2, r2, #32
 8002778:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	7edb      	ldrb	r3, [r3, #27]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d108      	bne.n	8002794 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0210 	bic.w	r2, r2, #16
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	e007      	b.n	80027a4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f042 0210 	orr.w	r2, r2, #16
 80027a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	7f1b      	ldrb	r3, [r3, #28]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d108      	bne.n	80027be <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 0208 	orr.w	r2, r2, #8
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	e007      	b.n	80027ce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0208 	bic.w	r2, r2, #8
 80027cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	7f5b      	ldrb	r3, [r3, #29]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d108      	bne.n	80027e8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f042 0204 	orr.w	r2, r2, #4
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	e007      	b.n	80027f8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0204 	bic.w	r2, r2, #4
 80027f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	431a      	orrs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	ea42 0103 	orr.w	r1, r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	1e5a      	subs	r2, r3, #1
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b084      	sub	sp, #16
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b01      	cmp	r3, #1
 8002848:	d12e      	bne.n	80028a8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2202      	movs	r2, #2
 800284e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0201 	bic.w	r2, r2, #1
 8002860:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002862:	f7ff fb49 	bl	8001ef8 <HAL_GetTick>
 8002866:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002868:	e012      	b.n	8002890 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800286a:	f7ff fb45 	bl	8001ef8 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b0a      	cmp	r3, #10
 8002876:	d90b      	bls.n	8002890 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2205      	movs	r2, #5
 8002888:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e012      	b.n	80028b6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1e5      	bne.n	800286a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80028a4:	2300      	movs	r3, #0
 80028a6:	e006      	b.n	80028b6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
  }
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80028be:	b480      	push	{r7}
 80028c0:	b089      	sub	sp, #36	; 0x24
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	60f8      	str	r0, [r7, #12]
 80028c6:	60b9      	str	r1, [r7, #8]
 80028c8:	607a      	str	r2, [r7, #4]
 80028ca:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80028dc:	7ffb      	ldrb	r3, [r7, #31]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d003      	beq.n	80028ea <HAL_CAN_AddTxMessage+0x2c>
 80028e2:	7ffb      	ldrb	r3, [r7, #31]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	f040 80b8 	bne.w	8002a5a <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10a      	bne.n	800290a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d105      	bne.n	800290a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 80a0 	beq.w	8002a4a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	0e1b      	lsrs	r3, r3, #24
 800290e:	f003 0303 	and.w	r3, r3, #3
 8002912:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	2b02      	cmp	r3, #2
 8002918:	d907      	bls.n	800292a <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e09e      	b.n	8002a68 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800292a:	2201      	movs	r2, #1
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	409a      	lsls	r2, r3
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10d      	bne.n	8002958 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002946:	68f9      	ldr	r1, [r7, #12]
 8002948:	6809      	ldr	r1, [r1, #0]
 800294a:	431a      	orrs	r2, r3
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	3318      	adds	r3, #24
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	440b      	add	r3, r1
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	e00f      	b.n	8002978 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002962:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002968:	68f9      	ldr	r1, [r7, #12]
 800296a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800296c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	3318      	adds	r3, #24
 8002972:	011b      	lsls	r3, r3, #4
 8002974:	440b      	add	r3, r1
 8002976:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6819      	ldr	r1, [r3, #0]
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	691a      	ldr	r2, [r3, #16]
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	3318      	adds	r3, #24
 8002984:	011b      	lsls	r3, r3, #4
 8002986:	440b      	add	r3, r1
 8002988:	3304      	adds	r3, #4
 800298a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	7d1b      	ldrb	r3, [r3, #20]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d111      	bne.n	80029b8 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	3318      	adds	r3, #24
 800299c:	011b      	lsls	r3, r3, #4
 800299e:	4413      	add	r3, r2
 80029a0:	3304      	adds	r3, #4
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	6811      	ldr	r1, [r2, #0]
 80029a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	3318      	adds	r3, #24
 80029b0:	011b      	lsls	r3, r3, #4
 80029b2:	440b      	add	r3, r1
 80029b4:	3304      	adds	r3, #4
 80029b6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3307      	adds	r3, #7
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	061a      	lsls	r2, r3, #24
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3306      	adds	r3, #6
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	041b      	lsls	r3, r3, #16
 80029c8:	431a      	orrs	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	3305      	adds	r3, #5
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	021b      	lsls	r3, r3, #8
 80029d2:	4313      	orrs	r3, r2
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	3204      	adds	r2, #4
 80029d8:	7812      	ldrb	r2, [r2, #0]
 80029da:	4610      	mov	r0, r2
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	6811      	ldr	r1, [r2, #0]
 80029e0:	ea43 0200 	orr.w	r2, r3, r0
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	011b      	lsls	r3, r3, #4
 80029e8:	440b      	add	r3, r1
 80029ea:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80029ee:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3303      	adds	r3, #3
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	061a      	lsls	r2, r3, #24
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3302      	adds	r3, #2
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	041b      	lsls	r3, r3, #16
 8002a00:	431a      	orrs	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	3301      	adds	r3, #1
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	021b      	lsls	r3, r3, #8
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	7812      	ldrb	r2, [r2, #0]
 8002a10:	4610      	mov	r0, r2
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	6811      	ldr	r1, [r2, #0]
 8002a16:	ea43 0200 	orr.w	r2, r3, r0
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	011b      	lsls	r3, r3, #4
 8002a1e:	440b      	add	r3, r1
 8002a20:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002a24:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	3318      	adds	r3, #24
 8002a2e:	011b      	lsls	r3, r3, #4
 8002a30:	4413      	add	r3, r2
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	6811      	ldr	r1, [r2, #0]
 8002a38:	f043 0201 	orr.w	r2, r3, #1
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	3318      	adds	r3, #24
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	440b      	add	r3, r1
 8002a44:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002a46:	2300      	movs	r3, #0
 8002a48:	e00e      	b.n	8002a68 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e006      	b.n	8002a68 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
  }
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3724      	adds	r7, #36	; 0x24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a86:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002a88:	7afb      	ldrb	r3, [r7, #11]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d002      	beq.n	8002a94 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002a8e:	7afb      	ldrb	r3, [r7, #11]
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d11d      	bne.n	8002ad0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d002      	beq.n	8002aa8 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d002      	beq.n	8002abc <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	3301      	adds	r3, #1
 8002ace:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b087      	sub	sp, #28
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	60f8      	str	r0, [r7, #12]
 8002ae6:	60b9      	str	r1, [r7, #8]
 8002ae8:	607a      	str	r2, [r7, #4]
 8002aea:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002af2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002af4:	7dfb      	ldrb	r3, [r7, #23]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d003      	beq.n	8002b02 <HAL_CAN_GetRxMessage+0x24>
 8002afa:	7dfb      	ldrb	r3, [r7, #23]
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	f040 80f3 	bne.w	8002ce8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10e      	bne.n	8002b26 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d116      	bne.n	8002b44 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e0e7      	b.n	8002cf6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	f003 0303 	and.w	r3, r3, #3
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d107      	bne.n	8002b44 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e0d8      	b.n	8002cf6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	331b      	adds	r3, #27
 8002b4c:	011b      	lsls	r3, r3, #4
 8002b4e:	4413      	add	r3, r2
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0204 	and.w	r2, r3, #4
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10c      	bne.n	8002b7c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	331b      	adds	r3, #27
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	4413      	add	r3, r2
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	0d5b      	lsrs	r3, r3, #21
 8002b72:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	e00b      	b.n	8002b94 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	331b      	adds	r3, #27
 8002b84:	011b      	lsls	r3, r3, #4
 8002b86:	4413      	add	r3, r2
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	08db      	lsrs	r3, r3, #3
 8002b8c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	331b      	adds	r3, #27
 8002b9c:	011b      	lsls	r3, r3, #4
 8002b9e:	4413      	add	r3, r2
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0202 	and.w	r2, r3, #2
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	331b      	adds	r3, #27
 8002bb2:	011b      	lsls	r3, r3, #4
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3304      	adds	r3, #4
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 020f 	and.w	r2, r3, #15
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	331b      	adds	r3, #27
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	4413      	add	r3, r2
 8002bce:	3304      	adds	r3, #4
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	0a1b      	lsrs	r3, r3, #8
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	331b      	adds	r3, #27
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	4413      	add	r3, r2
 8002be6:	3304      	adds	r3, #4
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	0c1b      	lsrs	r3, r3, #16
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	011b      	lsls	r3, r3, #4
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	011b      	lsls	r3, r3, #4
 8002c10:	4413      	add	r3, r2
 8002c12:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	0a1a      	lsrs	r2, r3, #8
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	4413      	add	r3, r2
 8002c2c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	0c1a      	lsrs	r2, r3, #16
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	3302      	adds	r3, #2
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	4413      	add	r3, r2
 8002c46:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	0e1a      	lsrs	r2, r3, #24
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	3303      	adds	r3, #3
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	4413      	add	r3, r2
 8002c60:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	3304      	adds	r3, #4
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	011b      	lsls	r3, r3, #4
 8002c76:	4413      	add	r3, r2
 8002c78:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	0a1a      	lsrs	r2, r3, #8
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	3305      	adds	r3, #5
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	011b      	lsls	r3, r3, #4
 8002c90:	4413      	add	r3, r2
 8002c92:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	0c1a      	lsrs	r2, r3, #16
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	3306      	adds	r3, #6
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	011b      	lsls	r3, r3, #4
 8002caa:	4413      	add	r3, r2
 8002cac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	0e1a      	lsrs	r2, r3, #24
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	3307      	adds	r3, #7
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d108      	bne.n	8002cd4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68da      	ldr	r2, [r3, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f042 0220 	orr.w	r2, r2, #32
 8002cd0:	60da      	str	r2, [r3, #12]
 8002cd2:	e007      	b.n	8002ce4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	691a      	ldr	r2, [r3, #16]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0220 	orr.w	r2, r2, #32
 8002ce2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	e006      	b.n	8002cf6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
  }
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	371c      	adds	r7, #28
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b085      	sub	sp, #20
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
 8002d0a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d12:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d14:	7bfb      	ldrb	r3, [r7, #15]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d002      	beq.n	8002d20 <HAL_CAN_ActivateNotification+0x1e>
 8002d1a:	7bfb      	ldrb	r3, [r7, #15]
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d109      	bne.n	8002d34 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6959      	ldr	r1, [r3, #20]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	e006      	b.n	8002d42 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
  }
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3714      	adds	r7, #20
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b08a      	sub	sp, #40	; 0x28
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002d56:	2300      	movs	r3, #0
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d07c      	beq.n	8002e8e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d023      	beq.n	8002de6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2201      	movs	r2, #1
 8002da4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f983 	bl	80030bc <HAL_CAN_TxMailbox0CompleteCallback>
 8002db6:	e016      	b.n	8002de6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	f003 0304 	and.w	r3, r3, #4
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d004      	beq.n	8002dcc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dca:	e00c      	b.n	8002de6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d004      	beq.n	8002de0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dde:	e002      	b.n	8002de6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 f989 	bl	80030f8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d024      	beq.n	8002e3a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002df8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 f963 	bl	80030d0 <HAL_CAN_TxMailbox1CompleteCallback>
 8002e0a:	e016      	b.n	8002e3a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d004      	beq.n	8002e20 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e1e:	e00c      	b.n	8002e3a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d004      	beq.n	8002e34 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e30:	627b      	str	r3, [r7, #36]	; 0x24
 8002e32:	e002      	b.n	8002e3a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f969 	bl	800310c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d024      	beq.n	8002e8e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e4c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d003      	beq.n	8002e60 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 f943 	bl	80030e4 <HAL_CAN_TxMailbox2CompleteCallback>
 8002e5e:	e016      	b.n	8002e8e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d004      	beq.n	8002e74 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
 8002e72:	e00c      	b.n	8002e8e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d004      	beq.n	8002e88 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24
 8002e86:	e002      	b.n	8002e8e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 f949 	bl	8003120 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00c      	beq.n	8002eb2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	f003 0310 	and.w	r3, r3, #16
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d007      	beq.n	8002eb2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ea8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2210      	movs	r2, #16
 8002eb0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00b      	beq.n	8002ed4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	f003 0308 	and.w	r3, r3, #8
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d006      	beq.n	8002ed4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2208      	movs	r2, #8
 8002ecc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f930 	bl	8003134 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d009      	beq.n	8002ef2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f003 0303 	and.w	r3, r3, #3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d002      	beq.n	8002ef2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f7fe f847 	bl	8000f80 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00c      	beq.n	8002f16 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	f003 0310 	and.w	r3, r3, #16
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d007      	beq.n	8002f16 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2210      	movs	r2, #16
 8002f14:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	f003 0320 	and.w	r3, r3, #32
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00b      	beq.n	8002f38 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d006      	beq.n	8002f38 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2208      	movs	r2, #8
 8002f30:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f912 	bl	800315c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	f003 0310 	and.w	r3, r3, #16
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d009      	beq.n	8002f56 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	f003 0303 	and.w	r3, r3, #3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d002      	beq.n	8002f56 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 f8f9 	bl	8003148 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002f56:	6a3b      	ldr	r3, [r7, #32]
 8002f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00b      	beq.n	8002f78 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	f003 0310 	and.w	r3, r3, #16
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d006      	beq.n	8002f78 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2210      	movs	r2, #16
 8002f70:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f8fc 	bl	8003170 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002f78:	6a3b      	ldr	r3, [r7, #32]
 8002f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00b      	beq.n	8002f9a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	f003 0308 	and.w	r3, r3, #8
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d006      	beq.n	8002f9a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2208      	movs	r2, #8
 8002f92:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f8f5 	bl	8003184 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d07b      	beq.n	800309c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	f003 0304 	and.w	r3, r3, #4
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d072      	beq.n	8003094 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d008      	beq.n	8002fca <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d008      	beq.n	8002fe6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	f043 0302 	orr.w	r3, r3, #2
 8002fe4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d008      	beq.n	8003002 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	f043 0304 	orr.w	r3, r3, #4
 8003000:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003008:	2b00      	cmp	r3, #0
 800300a:	d043      	beq.n	8003094 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003012:	2b00      	cmp	r3, #0
 8003014:	d03e      	beq.n	8003094 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800301c:	2b60      	cmp	r3, #96	; 0x60
 800301e:	d02b      	beq.n	8003078 <HAL_CAN_IRQHandler+0x32a>
 8003020:	2b60      	cmp	r3, #96	; 0x60
 8003022:	d82e      	bhi.n	8003082 <HAL_CAN_IRQHandler+0x334>
 8003024:	2b50      	cmp	r3, #80	; 0x50
 8003026:	d022      	beq.n	800306e <HAL_CAN_IRQHandler+0x320>
 8003028:	2b50      	cmp	r3, #80	; 0x50
 800302a:	d82a      	bhi.n	8003082 <HAL_CAN_IRQHandler+0x334>
 800302c:	2b40      	cmp	r3, #64	; 0x40
 800302e:	d019      	beq.n	8003064 <HAL_CAN_IRQHandler+0x316>
 8003030:	2b40      	cmp	r3, #64	; 0x40
 8003032:	d826      	bhi.n	8003082 <HAL_CAN_IRQHandler+0x334>
 8003034:	2b30      	cmp	r3, #48	; 0x30
 8003036:	d010      	beq.n	800305a <HAL_CAN_IRQHandler+0x30c>
 8003038:	2b30      	cmp	r3, #48	; 0x30
 800303a:	d822      	bhi.n	8003082 <HAL_CAN_IRQHandler+0x334>
 800303c:	2b10      	cmp	r3, #16
 800303e:	d002      	beq.n	8003046 <HAL_CAN_IRQHandler+0x2f8>
 8003040:	2b20      	cmp	r3, #32
 8003042:	d005      	beq.n	8003050 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003044:	e01d      	b.n	8003082 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	f043 0308 	orr.w	r3, r3, #8
 800304c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800304e:	e019      	b.n	8003084 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	f043 0310 	orr.w	r3, r3, #16
 8003056:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003058:	e014      	b.n	8003084 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	f043 0320 	orr.w	r3, r3, #32
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003062:	e00f      	b.n	8003084 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800306a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800306c:	e00a      	b.n	8003084 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003074:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003076:	e005      	b.n	8003084 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800307e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003080:	e000      	b.n	8003084 <HAL_CAN_IRQHandler+0x336>
            break;
 8003082:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699a      	ldr	r2, [r3, #24]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003092:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2204      	movs	r2, #4
 800309a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d008      	beq.n	80030b4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	431a      	orrs	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f872 	bl	8003198 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80030b4:	bf00      	nop
 80030b6:	3728      	adds	r7, #40	; 0x28
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031bc:	4b0c      	ldr	r3, [pc, #48]	; (80031f0 <__NVIC_SetPriorityGrouping+0x44>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031c8:	4013      	ands	r3, r2
 80031ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031de:	4a04      	ldr	r2, [pc, #16]	; (80031f0 <__NVIC_SetPriorityGrouping+0x44>)
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	60d3      	str	r3, [r2, #12]
}
 80031e4:	bf00      	nop
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	e000ed00 	.word	0xe000ed00

080031f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031f8:	4b04      	ldr	r3, [pc, #16]	; (800320c <__NVIC_GetPriorityGrouping+0x18>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	0a1b      	lsrs	r3, r3, #8
 80031fe:	f003 0307 	and.w	r3, r3, #7
}
 8003202:	4618      	mov	r0, r3
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	e000ed00 	.word	0xe000ed00

08003210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	4603      	mov	r3, r0
 8003218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800321a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321e:	2b00      	cmp	r3, #0
 8003220:	db0b      	blt.n	800323a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003222:	79fb      	ldrb	r3, [r7, #7]
 8003224:	f003 021f 	and.w	r2, r3, #31
 8003228:	4907      	ldr	r1, [pc, #28]	; (8003248 <__NVIC_EnableIRQ+0x38>)
 800322a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322e:	095b      	lsrs	r3, r3, #5
 8003230:	2001      	movs	r0, #1
 8003232:	fa00 f202 	lsl.w	r2, r0, r2
 8003236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	e000e100 	.word	0xe000e100

0800324c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	4603      	mov	r3, r0
 8003254:	6039      	str	r1, [r7, #0]
 8003256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325c:	2b00      	cmp	r3, #0
 800325e:	db0a      	blt.n	8003276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	b2da      	uxtb	r2, r3
 8003264:	490c      	ldr	r1, [pc, #48]	; (8003298 <__NVIC_SetPriority+0x4c>)
 8003266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326a:	0112      	lsls	r2, r2, #4
 800326c:	b2d2      	uxtb	r2, r2
 800326e:	440b      	add	r3, r1
 8003270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003274:	e00a      	b.n	800328c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	b2da      	uxtb	r2, r3
 800327a:	4908      	ldr	r1, [pc, #32]	; (800329c <__NVIC_SetPriority+0x50>)
 800327c:	79fb      	ldrb	r3, [r7, #7]
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	3b04      	subs	r3, #4
 8003284:	0112      	lsls	r2, r2, #4
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	440b      	add	r3, r1
 800328a:	761a      	strb	r2, [r3, #24]
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	e000e100 	.word	0xe000e100
 800329c:	e000ed00 	.word	0xe000ed00

080032a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b089      	sub	sp, #36	; 0x24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	f1c3 0307 	rsb	r3, r3, #7
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	bf28      	it	cs
 80032be:	2304      	movcs	r3, #4
 80032c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	3304      	adds	r3, #4
 80032c6:	2b06      	cmp	r3, #6
 80032c8:	d902      	bls.n	80032d0 <NVIC_EncodePriority+0x30>
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	3b03      	subs	r3, #3
 80032ce:	e000      	b.n	80032d2 <NVIC_EncodePriority+0x32>
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	43da      	mvns	r2, r3
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	401a      	ands	r2, r3
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	fa01 f303 	lsl.w	r3, r1, r3
 80032f2:	43d9      	mvns	r1, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f8:	4313      	orrs	r3, r2
         );
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3724      	adds	r7, #36	; 0x24
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
	...

08003308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3b01      	subs	r3, #1
 8003314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003318:	d301      	bcc.n	800331e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800331a:	2301      	movs	r3, #1
 800331c:	e00f      	b.n	800333e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800331e:	4a0a      	ldr	r2, [pc, #40]	; (8003348 <SysTick_Config+0x40>)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3b01      	subs	r3, #1
 8003324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003326:	210f      	movs	r1, #15
 8003328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800332c:	f7ff ff8e 	bl	800324c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003330:	4b05      	ldr	r3, [pc, #20]	; (8003348 <SysTick_Config+0x40>)
 8003332:	2200      	movs	r2, #0
 8003334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003336:	4b04      	ldr	r3, [pc, #16]	; (8003348 <SysTick_Config+0x40>)
 8003338:	2207      	movs	r2, #7
 800333a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	e000e010 	.word	0xe000e010

0800334c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff ff29 	bl	80031ac <__NVIC_SetPriorityGrouping>
}
 800335a:	bf00      	nop
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003362:	b580      	push	{r7, lr}
 8003364:	b086      	sub	sp, #24
 8003366:	af00      	add	r7, sp, #0
 8003368:	4603      	mov	r3, r0
 800336a:	60b9      	str	r1, [r7, #8]
 800336c:	607a      	str	r2, [r7, #4]
 800336e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003374:	f7ff ff3e 	bl	80031f4 <__NVIC_GetPriorityGrouping>
 8003378:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	68b9      	ldr	r1, [r7, #8]
 800337e:	6978      	ldr	r0, [r7, #20]
 8003380:	f7ff ff8e 	bl	80032a0 <NVIC_EncodePriority>
 8003384:	4602      	mov	r2, r0
 8003386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800338a:	4611      	mov	r1, r2
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff ff5d 	bl	800324c <__NVIC_SetPriority>
}
 8003392:	bf00      	nop
 8003394:	3718      	adds	r7, #24
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b082      	sub	sp, #8
 800339e:	af00      	add	r7, sp, #0
 80033a0:	4603      	mov	r3, r0
 80033a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff ff31 	bl	8003210 <__NVIC_EnableIRQ>
}
 80033ae:	bf00      	nop
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b082      	sub	sp, #8
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7ff ffa2 	bl	8003308 <SysTick_Config>
 80033c4:	4603      	mov	r3, r0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
	...

080033d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b089      	sub	sp, #36	; 0x24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033da:	2300      	movs	r3, #0
 80033dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033de:	2300      	movs	r3, #0
 80033e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033e6:	2300      	movs	r3, #0
 80033e8:	61fb      	str	r3, [r7, #28]
 80033ea:	e165      	b.n	80036b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033ec:	2201      	movs	r2, #1
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	4013      	ands	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	429a      	cmp	r2, r3
 8003406:	f040 8154 	bne.w	80036b2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	2b01      	cmp	r3, #1
 8003414:	d005      	beq.n	8003422 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800341e:	2b02      	cmp	r3, #2
 8003420:	d130      	bne.n	8003484 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	2203      	movs	r2, #3
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	43db      	mvns	r3, r3
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	4013      	ands	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	4313      	orrs	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003458:	2201      	movs	r2, #1
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	43db      	mvns	r3, r3
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	4013      	ands	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	091b      	lsrs	r3, r3, #4
 800346e:	f003 0201 	and.w	r2, r3, #1
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4313      	orrs	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f003 0303 	and.w	r3, r3, #3
 800348c:	2b03      	cmp	r3, #3
 800348e:	d017      	beq.n	80034c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	2203      	movs	r2, #3
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	43db      	mvns	r3, r3
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	4013      	ands	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f003 0303 	and.w	r3, r3, #3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d123      	bne.n	8003514 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	08da      	lsrs	r2, r3, #3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3208      	adds	r2, #8
 80034d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	220f      	movs	r2, #15
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	43db      	mvns	r3, r3
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	4013      	ands	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	691a      	ldr	r2, [r3, #16]
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	4313      	orrs	r3, r2
 8003504:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	08da      	lsrs	r2, r3, #3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3208      	adds	r2, #8
 800350e:	69b9      	ldr	r1, [r7, #24]
 8003510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	2203      	movs	r2, #3
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	43db      	mvns	r3, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	4013      	ands	r3, r2
 800352a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f003 0203 	and.w	r2, r3, #3
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	4313      	orrs	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003550:	2b00      	cmp	r3, #0
 8003552:	f000 80ae 	beq.w	80036b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003556:	2300      	movs	r3, #0
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	4b5d      	ldr	r3, [pc, #372]	; (80036d0 <HAL_GPIO_Init+0x300>)
 800355c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355e:	4a5c      	ldr	r2, [pc, #368]	; (80036d0 <HAL_GPIO_Init+0x300>)
 8003560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003564:	6453      	str	r3, [r2, #68]	; 0x44
 8003566:	4b5a      	ldr	r3, [pc, #360]	; (80036d0 <HAL_GPIO_Init+0x300>)
 8003568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003572:	4a58      	ldr	r2, [pc, #352]	; (80036d4 <HAL_GPIO_Init+0x304>)
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	089b      	lsrs	r3, r3, #2
 8003578:	3302      	adds	r3, #2
 800357a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800357e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	f003 0303 	and.w	r3, r3, #3
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	220f      	movs	r2, #15
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	43db      	mvns	r3, r3
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	4013      	ands	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a4f      	ldr	r2, [pc, #316]	; (80036d8 <HAL_GPIO_Init+0x308>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d025      	beq.n	80035ea <HAL_GPIO_Init+0x21a>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a4e      	ldr	r2, [pc, #312]	; (80036dc <HAL_GPIO_Init+0x30c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d01f      	beq.n	80035e6 <HAL_GPIO_Init+0x216>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a4d      	ldr	r2, [pc, #308]	; (80036e0 <HAL_GPIO_Init+0x310>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d019      	beq.n	80035e2 <HAL_GPIO_Init+0x212>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a4c      	ldr	r2, [pc, #304]	; (80036e4 <HAL_GPIO_Init+0x314>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d013      	beq.n	80035de <HAL_GPIO_Init+0x20e>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a4b      	ldr	r2, [pc, #300]	; (80036e8 <HAL_GPIO_Init+0x318>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d00d      	beq.n	80035da <HAL_GPIO_Init+0x20a>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a4a      	ldr	r2, [pc, #296]	; (80036ec <HAL_GPIO_Init+0x31c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d007      	beq.n	80035d6 <HAL_GPIO_Init+0x206>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a49      	ldr	r2, [pc, #292]	; (80036f0 <HAL_GPIO_Init+0x320>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d101      	bne.n	80035d2 <HAL_GPIO_Init+0x202>
 80035ce:	2306      	movs	r3, #6
 80035d0:	e00c      	b.n	80035ec <HAL_GPIO_Init+0x21c>
 80035d2:	2307      	movs	r3, #7
 80035d4:	e00a      	b.n	80035ec <HAL_GPIO_Init+0x21c>
 80035d6:	2305      	movs	r3, #5
 80035d8:	e008      	b.n	80035ec <HAL_GPIO_Init+0x21c>
 80035da:	2304      	movs	r3, #4
 80035dc:	e006      	b.n	80035ec <HAL_GPIO_Init+0x21c>
 80035de:	2303      	movs	r3, #3
 80035e0:	e004      	b.n	80035ec <HAL_GPIO_Init+0x21c>
 80035e2:	2302      	movs	r3, #2
 80035e4:	e002      	b.n	80035ec <HAL_GPIO_Init+0x21c>
 80035e6:	2301      	movs	r3, #1
 80035e8:	e000      	b.n	80035ec <HAL_GPIO_Init+0x21c>
 80035ea:	2300      	movs	r3, #0
 80035ec:	69fa      	ldr	r2, [r7, #28]
 80035ee:	f002 0203 	and.w	r2, r2, #3
 80035f2:	0092      	lsls	r2, r2, #2
 80035f4:	4093      	lsls	r3, r2
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035fc:	4935      	ldr	r1, [pc, #212]	; (80036d4 <HAL_GPIO_Init+0x304>)
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	089b      	lsrs	r3, r3, #2
 8003602:	3302      	adds	r3, #2
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800360a:	4b3a      	ldr	r3, [pc, #232]	; (80036f4 <HAL_GPIO_Init+0x324>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	43db      	mvns	r3, r3
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	4013      	ands	r3, r2
 8003618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	4313      	orrs	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800362e:	4a31      	ldr	r2, [pc, #196]	; (80036f4 <HAL_GPIO_Init+0x324>)
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003634:	4b2f      	ldr	r3, [pc, #188]	; (80036f4 <HAL_GPIO_Init+0x324>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	43db      	mvns	r3, r3
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	4013      	ands	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d003      	beq.n	8003658 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	4313      	orrs	r3, r2
 8003656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003658:	4a26      	ldr	r2, [pc, #152]	; (80036f4 <HAL_GPIO_Init+0x324>)
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800365e:	4b25      	ldr	r3, [pc, #148]	; (80036f4 <HAL_GPIO_Init+0x324>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	43db      	mvns	r3, r3
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	4013      	ands	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	4313      	orrs	r3, r2
 8003680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003682:	4a1c      	ldr	r2, [pc, #112]	; (80036f4 <HAL_GPIO_Init+0x324>)
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003688:	4b1a      	ldr	r3, [pc, #104]	; (80036f4 <HAL_GPIO_Init+0x324>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	43db      	mvns	r3, r3
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	4013      	ands	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036ac:	4a11      	ldr	r2, [pc, #68]	; (80036f4 <HAL_GPIO_Init+0x324>)
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	3301      	adds	r3, #1
 80036b6:	61fb      	str	r3, [r7, #28]
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	2b0f      	cmp	r3, #15
 80036bc:	f67f ae96 	bls.w	80033ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036c0:	bf00      	nop
 80036c2:	bf00      	nop
 80036c4:	3724      	adds	r7, #36	; 0x24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	40023800 	.word	0x40023800
 80036d4:	40013800 	.word	0x40013800
 80036d8:	40020000 	.word	0x40020000
 80036dc:	40020400 	.word	0x40020400
 80036e0:	40020800 	.word	0x40020800
 80036e4:	40020c00 	.word	0x40020c00
 80036e8:	40021000 	.word	0x40021000
 80036ec:	40021400 	.word	0x40021400
 80036f0:	40021800 	.word	0x40021800
 80036f4:	40013c00 	.word	0x40013c00

080036f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	807b      	strh	r3, [r7, #2]
 8003704:	4613      	mov	r3, r2
 8003706:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003708:	787b      	ldrb	r3, [r7, #1]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800370e:	887a      	ldrh	r2, [r7, #2]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003714:	e003      	b.n	800371e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003716:	887b      	ldrh	r3, [r7, #2]
 8003718:	041a      	lsls	r2, r3, #16
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	619a      	str	r2, [r3, #24]
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
	...

0800372c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d101      	bne.n	8003740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e0cc      	b.n	80038da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003740:	4b68      	ldr	r3, [pc, #416]	; (80038e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 030f 	and.w	r3, r3, #15
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	429a      	cmp	r2, r3
 800374c:	d90c      	bls.n	8003768 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800374e:	4b65      	ldr	r3, [pc, #404]	; (80038e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003756:	4b63      	ldr	r3, [pc, #396]	; (80038e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 030f 	and.w	r3, r3, #15
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	429a      	cmp	r2, r3
 8003762:	d001      	beq.n	8003768 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e0b8      	b.n	80038da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d020      	beq.n	80037b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	d005      	beq.n	800378c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003780:	4b59      	ldr	r3, [pc, #356]	; (80038e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	4a58      	ldr	r2, [pc, #352]	; (80038e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003786:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800378a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0308 	and.w	r3, r3, #8
 8003794:	2b00      	cmp	r3, #0
 8003796:	d005      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003798:	4b53      	ldr	r3, [pc, #332]	; (80038e8 <HAL_RCC_ClockConfig+0x1bc>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	4a52      	ldr	r2, [pc, #328]	; (80038e8 <HAL_RCC_ClockConfig+0x1bc>)
 800379e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037a4:	4b50      	ldr	r3, [pc, #320]	; (80038e8 <HAL_RCC_ClockConfig+0x1bc>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	494d      	ldr	r1, [pc, #308]	; (80038e8 <HAL_RCC_ClockConfig+0x1bc>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d044      	beq.n	800384c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d107      	bne.n	80037da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ca:	4b47      	ldr	r3, [pc, #284]	; (80038e8 <HAL_RCC_ClockConfig+0x1bc>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d119      	bne.n	800380a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e07f      	b.n	80038da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d003      	beq.n	80037ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037e6:	2b03      	cmp	r3, #3
 80037e8:	d107      	bne.n	80037fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ea:	4b3f      	ldr	r3, [pc, #252]	; (80038e8 <HAL_RCC_ClockConfig+0x1bc>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d109      	bne.n	800380a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e06f      	b.n	80038da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037fa:	4b3b      	ldr	r3, [pc, #236]	; (80038e8 <HAL_RCC_ClockConfig+0x1bc>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e067      	b.n	80038da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800380a:	4b37      	ldr	r3, [pc, #220]	; (80038e8 <HAL_RCC_ClockConfig+0x1bc>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f023 0203 	bic.w	r2, r3, #3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	4934      	ldr	r1, [pc, #208]	; (80038e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003818:	4313      	orrs	r3, r2
 800381a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800381c:	f7fe fb6c 	bl	8001ef8 <HAL_GetTick>
 8003820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003822:	e00a      	b.n	800383a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003824:	f7fe fb68 	bl	8001ef8 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003832:	4293      	cmp	r3, r2
 8003834:	d901      	bls.n	800383a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e04f      	b.n	80038da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800383a:	4b2b      	ldr	r3, [pc, #172]	; (80038e8 <HAL_RCC_ClockConfig+0x1bc>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 020c 	and.w	r2, r3, #12
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	429a      	cmp	r2, r3
 800384a:	d1eb      	bne.n	8003824 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800384c:	4b25      	ldr	r3, [pc, #148]	; (80038e4 <HAL_RCC_ClockConfig+0x1b8>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 030f 	and.w	r3, r3, #15
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d20c      	bcs.n	8003874 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385a:	4b22      	ldr	r3, [pc, #136]	; (80038e4 <HAL_RCC_ClockConfig+0x1b8>)
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003862:	4b20      	ldr	r3, [pc, #128]	; (80038e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 030f 	and.w	r3, r3, #15
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	429a      	cmp	r2, r3
 800386e:	d001      	beq.n	8003874 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e032      	b.n	80038da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	d008      	beq.n	8003892 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003880:	4b19      	ldr	r3, [pc, #100]	; (80038e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	4916      	ldr	r1, [pc, #88]	; (80038e8 <HAL_RCC_ClockConfig+0x1bc>)
 800388e:	4313      	orrs	r3, r2
 8003890:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0308 	and.w	r3, r3, #8
 800389a:	2b00      	cmp	r3, #0
 800389c:	d009      	beq.n	80038b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800389e:	4b12      	ldr	r3, [pc, #72]	; (80038e8 <HAL_RCC_ClockConfig+0x1bc>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	490e      	ldr	r1, [pc, #56]	; (80038e8 <HAL_RCC_ClockConfig+0x1bc>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038b2:	f000 f855 	bl	8003960 <HAL_RCC_GetSysClockFreq>
 80038b6:	4602      	mov	r2, r0
 80038b8:	4b0b      	ldr	r3, [pc, #44]	; (80038e8 <HAL_RCC_ClockConfig+0x1bc>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	091b      	lsrs	r3, r3, #4
 80038be:	f003 030f 	and.w	r3, r3, #15
 80038c2:	490a      	ldr	r1, [pc, #40]	; (80038ec <HAL_RCC_ClockConfig+0x1c0>)
 80038c4:	5ccb      	ldrb	r3, [r1, r3]
 80038c6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ca:	4a09      	ldr	r2, [pc, #36]	; (80038f0 <HAL_RCC_ClockConfig+0x1c4>)
 80038cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038ce:	4b09      	ldr	r3, [pc, #36]	; (80038f4 <HAL_RCC_ClockConfig+0x1c8>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fe facc 	bl	8001e70 <HAL_InitTick>

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	40023c00 	.word	0x40023c00
 80038e8:	40023800 	.word	0x40023800
 80038ec:	08005a8c 	.word	0x08005a8c
 80038f0:	20000000 	.word	0x20000000
 80038f4:	20000004 	.word	0x20000004

080038f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038fc:	4b03      	ldr	r3, [pc, #12]	; (800390c <HAL_RCC_GetHCLKFreq+0x14>)
 80038fe:	681b      	ldr	r3, [r3, #0]
}
 8003900:	4618      	mov	r0, r3
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	20000000 	.word	0x20000000

08003910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003914:	f7ff fff0 	bl	80038f8 <HAL_RCC_GetHCLKFreq>
 8003918:	4602      	mov	r2, r0
 800391a:	4b05      	ldr	r3, [pc, #20]	; (8003930 <HAL_RCC_GetPCLK1Freq+0x20>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	0a9b      	lsrs	r3, r3, #10
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	4903      	ldr	r1, [pc, #12]	; (8003934 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003926:	5ccb      	ldrb	r3, [r1, r3]
 8003928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800392c:	4618      	mov	r0, r3
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40023800 	.word	0x40023800
 8003934:	08005a9c 	.word	0x08005a9c

08003938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800393c:	f7ff ffdc 	bl	80038f8 <HAL_RCC_GetHCLKFreq>
 8003940:	4602      	mov	r2, r0
 8003942:	4b05      	ldr	r3, [pc, #20]	; (8003958 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	0b5b      	lsrs	r3, r3, #13
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	4903      	ldr	r1, [pc, #12]	; (800395c <HAL_RCC_GetPCLK2Freq+0x24>)
 800394e:	5ccb      	ldrb	r3, [r1, r3]
 8003950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003954:	4618      	mov	r0, r3
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40023800 	.word	0x40023800
 800395c:	08005a9c 	.word	0x08005a9c

08003960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003964:	b0ae      	sub	sp, #184	; 0xb8
 8003966:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003968:	2300      	movs	r3, #0
 800396a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800396e:	2300      	movs	r3, #0
 8003970:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800397a:	2300      	movs	r3, #0
 800397c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003980:	2300      	movs	r3, #0
 8003982:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003986:	4bcb      	ldr	r3, [pc, #812]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 030c 	and.w	r3, r3, #12
 800398e:	2b0c      	cmp	r3, #12
 8003990:	f200 8206 	bhi.w	8003da0 <HAL_RCC_GetSysClockFreq+0x440>
 8003994:	a201      	add	r2, pc, #4	; (adr r2, 800399c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399a:	bf00      	nop
 800399c:	080039d1 	.word	0x080039d1
 80039a0:	08003da1 	.word	0x08003da1
 80039a4:	08003da1 	.word	0x08003da1
 80039a8:	08003da1 	.word	0x08003da1
 80039ac:	080039d9 	.word	0x080039d9
 80039b0:	08003da1 	.word	0x08003da1
 80039b4:	08003da1 	.word	0x08003da1
 80039b8:	08003da1 	.word	0x08003da1
 80039bc:	080039e1 	.word	0x080039e1
 80039c0:	08003da1 	.word	0x08003da1
 80039c4:	08003da1 	.word	0x08003da1
 80039c8:	08003da1 	.word	0x08003da1
 80039cc:	08003bd1 	.word	0x08003bd1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039d0:	4bb9      	ldr	r3, [pc, #740]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0x358>)
 80039d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80039d6:	e1e7      	b.n	8003da8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039d8:	4bb8      	ldr	r3, [pc, #736]	; (8003cbc <HAL_RCC_GetSysClockFreq+0x35c>)
 80039da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80039de:	e1e3      	b.n	8003da8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039e0:	4bb4      	ldr	r3, [pc, #720]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x354>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039ec:	4bb1      	ldr	r3, [pc, #708]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x354>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d071      	beq.n	8003adc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039f8:	4bae      	ldr	r3, [pc, #696]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x354>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	099b      	lsrs	r3, r3, #6
 80039fe:	2200      	movs	r2, #0
 8003a00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a04:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003a08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a14:	2300      	movs	r3, #0
 8003a16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003a1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a1e:	4622      	mov	r2, r4
 8003a20:	462b      	mov	r3, r5
 8003a22:	f04f 0000 	mov.w	r0, #0
 8003a26:	f04f 0100 	mov.w	r1, #0
 8003a2a:	0159      	lsls	r1, r3, #5
 8003a2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a30:	0150      	lsls	r0, r2, #5
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	4621      	mov	r1, r4
 8003a38:	1a51      	subs	r1, r2, r1
 8003a3a:	6439      	str	r1, [r7, #64]	; 0x40
 8003a3c:	4629      	mov	r1, r5
 8003a3e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a42:	647b      	str	r3, [r7, #68]	; 0x44
 8003a44:	f04f 0200 	mov.w	r2, #0
 8003a48:	f04f 0300 	mov.w	r3, #0
 8003a4c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003a50:	4649      	mov	r1, r9
 8003a52:	018b      	lsls	r3, r1, #6
 8003a54:	4641      	mov	r1, r8
 8003a56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a5a:	4641      	mov	r1, r8
 8003a5c:	018a      	lsls	r2, r1, #6
 8003a5e:	4641      	mov	r1, r8
 8003a60:	1a51      	subs	r1, r2, r1
 8003a62:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a64:	4649      	mov	r1, r9
 8003a66:	eb63 0301 	sbc.w	r3, r3, r1
 8003a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	f04f 0300 	mov.w	r3, #0
 8003a74:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003a78:	4649      	mov	r1, r9
 8003a7a:	00cb      	lsls	r3, r1, #3
 8003a7c:	4641      	mov	r1, r8
 8003a7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a82:	4641      	mov	r1, r8
 8003a84:	00ca      	lsls	r2, r1, #3
 8003a86:	4610      	mov	r0, r2
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	4622      	mov	r2, r4
 8003a8e:	189b      	adds	r3, r3, r2
 8003a90:	633b      	str	r3, [r7, #48]	; 0x30
 8003a92:	462b      	mov	r3, r5
 8003a94:	460a      	mov	r2, r1
 8003a96:	eb42 0303 	adc.w	r3, r2, r3
 8003a9a:	637b      	str	r3, [r7, #52]	; 0x34
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003aa8:	4629      	mov	r1, r5
 8003aaa:	024b      	lsls	r3, r1, #9
 8003aac:	4621      	mov	r1, r4
 8003aae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ab2:	4621      	mov	r1, r4
 8003ab4:	024a      	lsls	r2, r1, #9
 8003ab6:	4610      	mov	r0, r2
 8003ab8:	4619      	mov	r1, r3
 8003aba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ac4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ac8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003acc:	f7fd f8be 	bl	8000c4c <__aeabi_uldivmod>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ada:	e067      	b.n	8003bac <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003adc:	4b75      	ldr	r3, [pc, #468]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	099b      	lsrs	r3, r3, #6
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ae8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003aec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003af4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003af6:	2300      	movs	r3, #0
 8003af8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003afa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003afe:	4622      	mov	r2, r4
 8003b00:	462b      	mov	r3, r5
 8003b02:	f04f 0000 	mov.w	r0, #0
 8003b06:	f04f 0100 	mov.w	r1, #0
 8003b0a:	0159      	lsls	r1, r3, #5
 8003b0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b10:	0150      	lsls	r0, r2, #5
 8003b12:	4602      	mov	r2, r0
 8003b14:	460b      	mov	r3, r1
 8003b16:	4621      	mov	r1, r4
 8003b18:	1a51      	subs	r1, r2, r1
 8003b1a:	62b9      	str	r1, [r7, #40]	; 0x28
 8003b1c:	4629      	mov	r1, r5
 8003b1e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b24:	f04f 0200 	mov.w	r2, #0
 8003b28:	f04f 0300 	mov.w	r3, #0
 8003b2c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003b30:	4649      	mov	r1, r9
 8003b32:	018b      	lsls	r3, r1, #6
 8003b34:	4641      	mov	r1, r8
 8003b36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b3a:	4641      	mov	r1, r8
 8003b3c:	018a      	lsls	r2, r1, #6
 8003b3e:	4641      	mov	r1, r8
 8003b40:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b44:	4649      	mov	r1, r9
 8003b46:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b4a:	f04f 0200 	mov.w	r2, #0
 8003b4e:	f04f 0300 	mov.w	r3, #0
 8003b52:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b56:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b5e:	4692      	mov	sl, r2
 8003b60:	469b      	mov	fp, r3
 8003b62:	4623      	mov	r3, r4
 8003b64:	eb1a 0303 	adds.w	r3, sl, r3
 8003b68:	623b      	str	r3, [r7, #32]
 8003b6a:	462b      	mov	r3, r5
 8003b6c:	eb4b 0303 	adc.w	r3, fp, r3
 8003b70:	627b      	str	r3, [r7, #36]	; 0x24
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	f04f 0300 	mov.w	r3, #0
 8003b7a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003b7e:	4629      	mov	r1, r5
 8003b80:	028b      	lsls	r3, r1, #10
 8003b82:	4621      	mov	r1, r4
 8003b84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b88:	4621      	mov	r1, r4
 8003b8a:	028a      	lsls	r2, r1, #10
 8003b8c:	4610      	mov	r0, r2
 8003b8e:	4619      	mov	r1, r3
 8003b90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b94:	2200      	movs	r2, #0
 8003b96:	673b      	str	r3, [r7, #112]	; 0x70
 8003b98:	677a      	str	r2, [r7, #116]	; 0x74
 8003b9a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003b9e:	f7fd f855 	bl	8000c4c <__aeabi_uldivmod>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bac:	4b41      	ldr	r3, [pc, #260]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	0c1b      	lsrs	r3, r3, #16
 8003bb2:	f003 0303 	and.w	r3, r3, #3
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003bbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003bc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003bce:	e0eb      	b.n	8003da8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bd0:	4b38      	ldr	r3, [pc, #224]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bdc:	4b35      	ldr	r3, [pc, #212]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d06b      	beq.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003be8:	4b32      	ldr	r3, [pc, #200]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	099b      	lsrs	r3, r3, #6
 8003bee:	2200      	movs	r2, #0
 8003bf0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bf2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003bf4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bfa:	663b      	str	r3, [r7, #96]	; 0x60
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	667b      	str	r3, [r7, #100]	; 0x64
 8003c00:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003c04:	4622      	mov	r2, r4
 8003c06:	462b      	mov	r3, r5
 8003c08:	f04f 0000 	mov.w	r0, #0
 8003c0c:	f04f 0100 	mov.w	r1, #0
 8003c10:	0159      	lsls	r1, r3, #5
 8003c12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c16:	0150      	lsls	r0, r2, #5
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4621      	mov	r1, r4
 8003c1e:	1a51      	subs	r1, r2, r1
 8003c20:	61b9      	str	r1, [r7, #24]
 8003c22:	4629      	mov	r1, r5
 8003c24:	eb63 0301 	sbc.w	r3, r3, r1
 8003c28:	61fb      	str	r3, [r7, #28]
 8003c2a:	f04f 0200 	mov.w	r2, #0
 8003c2e:	f04f 0300 	mov.w	r3, #0
 8003c32:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003c36:	4659      	mov	r1, fp
 8003c38:	018b      	lsls	r3, r1, #6
 8003c3a:	4651      	mov	r1, sl
 8003c3c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c40:	4651      	mov	r1, sl
 8003c42:	018a      	lsls	r2, r1, #6
 8003c44:	4651      	mov	r1, sl
 8003c46:	ebb2 0801 	subs.w	r8, r2, r1
 8003c4a:	4659      	mov	r1, fp
 8003c4c:	eb63 0901 	sbc.w	r9, r3, r1
 8003c50:	f04f 0200 	mov.w	r2, #0
 8003c54:	f04f 0300 	mov.w	r3, #0
 8003c58:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c5c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c60:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c64:	4690      	mov	r8, r2
 8003c66:	4699      	mov	r9, r3
 8003c68:	4623      	mov	r3, r4
 8003c6a:	eb18 0303 	adds.w	r3, r8, r3
 8003c6e:	613b      	str	r3, [r7, #16]
 8003c70:	462b      	mov	r3, r5
 8003c72:	eb49 0303 	adc.w	r3, r9, r3
 8003c76:	617b      	str	r3, [r7, #20]
 8003c78:	f04f 0200 	mov.w	r2, #0
 8003c7c:	f04f 0300 	mov.w	r3, #0
 8003c80:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003c84:	4629      	mov	r1, r5
 8003c86:	024b      	lsls	r3, r1, #9
 8003c88:	4621      	mov	r1, r4
 8003c8a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c8e:	4621      	mov	r1, r4
 8003c90:	024a      	lsls	r2, r1, #9
 8003c92:	4610      	mov	r0, r2
 8003c94:	4619      	mov	r1, r3
 8003c96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c9e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003ca0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003ca4:	f7fc ffd2 	bl	8000c4c <__aeabi_uldivmod>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	460b      	mov	r3, r1
 8003cac:	4613      	mov	r3, r2
 8003cae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cb2:	e065      	b.n	8003d80 <HAL_RCC_GetSysClockFreq+0x420>
 8003cb4:	40023800 	.word	0x40023800
 8003cb8:	00f42400 	.word	0x00f42400
 8003cbc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cc0:	4b3d      	ldr	r3, [pc, #244]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	099b      	lsrs	r3, r3, #6
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	4618      	mov	r0, r3
 8003cca:	4611      	mov	r1, r2
 8003ccc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cd0:	653b      	str	r3, [r7, #80]	; 0x50
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	657b      	str	r3, [r7, #84]	; 0x54
 8003cd6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003cda:	4642      	mov	r2, r8
 8003cdc:	464b      	mov	r3, r9
 8003cde:	f04f 0000 	mov.w	r0, #0
 8003ce2:	f04f 0100 	mov.w	r1, #0
 8003ce6:	0159      	lsls	r1, r3, #5
 8003ce8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cec:	0150      	lsls	r0, r2, #5
 8003cee:	4602      	mov	r2, r0
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	4641      	mov	r1, r8
 8003cf4:	1a51      	subs	r1, r2, r1
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	4649      	mov	r1, r9
 8003cfa:	eb63 0301 	sbc.w	r3, r3, r1
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	f04f 0200 	mov.w	r2, #0
 8003d04:	f04f 0300 	mov.w	r3, #0
 8003d08:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003d0c:	4659      	mov	r1, fp
 8003d0e:	018b      	lsls	r3, r1, #6
 8003d10:	4651      	mov	r1, sl
 8003d12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d16:	4651      	mov	r1, sl
 8003d18:	018a      	lsls	r2, r1, #6
 8003d1a:	4651      	mov	r1, sl
 8003d1c:	1a54      	subs	r4, r2, r1
 8003d1e:	4659      	mov	r1, fp
 8003d20:	eb63 0501 	sbc.w	r5, r3, r1
 8003d24:	f04f 0200 	mov.w	r2, #0
 8003d28:	f04f 0300 	mov.w	r3, #0
 8003d2c:	00eb      	lsls	r3, r5, #3
 8003d2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d32:	00e2      	lsls	r2, r4, #3
 8003d34:	4614      	mov	r4, r2
 8003d36:	461d      	mov	r5, r3
 8003d38:	4643      	mov	r3, r8
 8003d3a:	18e3      	adds	r3, r4, r3
 8003d3c:	603b      	str	r3, [r7, #0]
 8003d3e:	464b      	mov	r3, r9
 8003d40:	eb45 0303 	adc.w	r3, r5, r3
 8003d44:	607b      	str	r3, [r7, #4]
 8003d46:	f04f 0200 	mov.w	r2, #0
 8003d4a:	f04f 0300 	mov.w	r3, #0
 8003d4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d52:	4629      	mov	r1, r5
 8003d54:	028b      	lsls	r3, r1, #10
 8003d56:	4621      	mov	r1, r4
 8003d58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d5c:	4621      	mov	r1, r4
 8003d5e:	028a      	lsls	r2, r1, #10
 8003d60:	4610      	mov	r0, r2
 8003d62:	4619      	mov	r1, r3
 8003d64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d68:	2200      	movs	r2, #0
 8003d6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d6c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003d6e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d72:	f7fc ff6b 	bl	8000c4c <__aeabi_uldivmod>
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003d80:	4b0d      	ldr	r3, [pc, #52]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	0f1b      	lsrs	r3, r3, #28
 8003d86:	f003 0307 	and.w	r3, r3, #7
 8003d8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003d8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d9e:	e003      	b.n	8003da8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003da0:	4b06      	ldr	r3, [pc, #24]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x45c>)
 8003da2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003da6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003da8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	37b8      	adds	r7, #184	; 0xb8
 8003db0:	46bd      	mov	sp, r7
 8003db2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003db6:	bf00      	nop
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	00f42400 	.word	0x00f42400

08003dc0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e28d      	b.n	80042ee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 8083 	beq.w	8003ee6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003de0:	4b94      	ldr	r3, [pc, #592]	; (8004034 <HAL_RCC_OscConfig+0x274>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f003 030c 	and.w	r3, r3, #12
 8003de8:	2b04      	cmp	r3, #4
 8003dea:	d019      	beq.n	8003e20 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003dec:	4b91      	ldr	r3, [pc, #580]	; (8004034 <HAL_RCC_OscConfig+0x274>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d106      	bne.n	8003e06 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003df8:	4b8e      	ldr	r3, [pc, #568]	; (8004034 <HAL_RCC_OscConfig+0x274>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e04:	d00c      	beq.n	8003e20 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e06:	4b8b      	ldr	r3, [pc, #556]	; (8004034 <HAL_RCC_OscConfig+0x274>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e0e:	2b0c      	cmp	r3, #12
 8003e10:	d112      	bne.n	8003e38 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e12:	4b88      	ldr	r3, [pc, #544]	; (8004034 <HAL_RCC_OscConfig+0x274>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e1e:	d10b      	bne.n	8003e38 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e20:	4b84      	ldr	r3, [pc, #528]	; (8004034 <HAL_RCC_OscConfig+0x274>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d05b      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x124>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d157      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e25a      	b.n	80042ee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e40:	d106      	bne.n	8003e50 <HAL_RCC_OscConfig+0x90>
 8003e42:	4b7c      	ldr	r3, [pc, #496]	; (8004034 <HAL_RCC_OscConfig+0x274>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a7b      	ldr	r2, [pc, #492]	; (8004034 <HAL_RCC_OscConfig+0x274>)
 8003e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	e01d      	b.n	8003e8c <HAL_RCC_OscConfig+0xcc>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e58:	d10c      	bne.n	8003e74 <HAL_RCC_OscConfig+0xb4>
 8003e5a:	4b76      	ldr	r3, [pc, #472]	; (8004034 <HAL_RCC_OscConfig+0x274>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a75      	ldr	r2, [pc, #468]	; (8004034 <HAL_RCC_OscConfig+0x274>)
 8003e60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e64:	6013      	str	r3, [r2, #0]
 8003e66:	4b73      	ldr	r3, [pc, #460]	; (8004034 <HAL_RCC_OscConfig+0x274>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a72      	ldr	r2, [pc, #456]	; (8004034 <HAL_RCC_OscConfig+0x274>)
 8003e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e70:	6013      	str	r3, [r2, #0]
 8003e72:	e00b      	b.n	8003e8c <HAL_RCC_OscConfig+0xcc>
 8003e74:	4b6f      	ldr	r3, [pc, #444]	; (8004034 <HAL_RCC_OscConfig+0x274>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a6e      	ldr	r2, [pc, #440]	; (8004034 <HAL_RCC_OscConfig+0x274>)
 8003e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e7e:	6013      	str	r3, [r2, #0]
 8003e80:	4b6c      	ldr	r3, [pc, #432]	; (8004034 <HAL_RCC_OscConfig+0x274>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a6b      	ldr	r2, [pc, #428]	; (8004034 <HAL_RCC_OscConfig+0x274>)
 8003e86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d013      	beq.n	8003ebc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e94:	f7fe f830 	bl	8001ef8 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e9c:	f7fe f82c 	bl	8001ef8 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b64      	cmp	r3, #100	; 0x64
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e21f      	b.n	80042ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eae:	4b61      	ldr	r3, [pc, #388]	; (8004034 <HAL_RCC_OscConfig+0x274>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0f0      	beq.n	8003e9c <HAL_RCC_OscConfig+0xdc>
 8003eba:	e014      	b.n	8003ee6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ebc:	f7fe f81c 	bl	8001ef8 <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ec4:	f7fe f818 	bl	8001ef8 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b64      	cmp	r3, #100	; 0x64
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e20b      	b.n	80042ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ed6:	4b57      	ldr	r3, [pc, #348]	; (8004034 <HAL_RCC_OscConfig+0x274>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1f0      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x104>
 8003ee2:	e000      	b.n	8003ee6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d06f      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003ef2:	4b50      	ldr	r3, [pc, #320]	; (8004034 <HAL_RCC_OscConfig+0x274>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 030c 	and.w	r3, r3, #12
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d017      	beq.n	8003f2e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003efe:	4b4d      	ldr	r3, [pc, #308]	; (8004034 <HAL_RCC_OscConfig+0x274>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f06:	2b08      	cmp	r3, #8
 8003f08:	d105      	bne.n	8003f16 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f0a:	4b4a      	ldr	r3, [pc, #296]	; (8004034 <HAL_RCC_OscConfig+0x274>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00b      	beq.n	8003f2e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f16:	4b47      	ldr	r3, [pc, #284]	; (8004034 <HAL_RCC_OscConfig+0x274>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f1e:	2b0c      	cmp	r3, #12
 8003f20:	d11c      	bne.n	8003f5c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f22:	4b44      	ldr	r3, [pc, #272]	; (8004034 <HAL_RCC_OscConfig+0x274>)
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d116      	bne.n	8003f5c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f2e:	4b41      	ldr	r3, [pc, #260]	; (8004034 <HAL_RCC_OscConfig+0x274>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d005      	beq.n	8003f46 <HAL_RCC_OscConfig+0x186>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d001      	beq.n	8003f46 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e1d3      	b.n	80042ee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f46:	4b3b      	ldr	r3, [pc, #236]	; (8004034 <HAL_RCC_OscConfig+0x274>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	4937      	ldr	r1, [pc, #220]	; (8004034 <HAL_RCC_OscConfig+0x274>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f5a:	e03a      	b.n	8003fd2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d020      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f64:	4b34      	ldr	r3, [pc, #208]	; (8004038 <HAL_RCC_OscConfig+0x278>)
 8003f66:	2201      	movs	r2, #1
 8003f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6a:	f7fd ffc5 	bl	8001ef8 <HAL_GetTick>
 8003f6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f70:	e008      	b.n	8003f84 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f72:	f7fd ffc1 	bl	8001ef8 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e1b4      	b.n	80042ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f84:	4b2b      	ldr	r3, [pc, #172]	; (8004034 <HAL_RCC_OscConfig+0x274>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d0f0      	beq.n	8003f72 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f90:	4b28      	ldr	r3, [pc, #160]	; (8004034 <HAL_RCC_OscConfig+0x274>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	00db      	lsls	r3, r3, #3
 8003f9e:	4925      	ldr	r1, [pc, #148]	; (8004034 <HAL_RCC_OscConfig+0x274>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	600b      	str	r3, [r1, #0]
 8003fa4:	e015      	b.n	8003fd2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fa6:	4b24      	ldr	r3, [pc, #144]	; (8004038 <HAL_RCC_OscConfig+0x278>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fac:	f7fd ffa4 	bl	8001ef8 <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fb4:	f7fd ffa0 	bl	8001ef8 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e193      	b.n	80042ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fc6:	4b1b      	ldr	r3, [pc, #108]	; (8004034 <HAL_RCC_OscConfig+0x274>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1f0      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0308 	and.w	r3, r3, #8
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d036      	beq.n	800404c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d016      	beq.n	8004014 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fe6:	4b15      	ldr	r3, [pc, #84]	; (800403c <HAL_RCC_OscConfig+0x27c>)
 8003fe8:	2201      	movs	r2, #1
 8003fea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fec:	f7fd ff84 	bl	8001ef8 <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ff4:	f7fd ff80 	bl	8001ef8 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e173      	b.n	80042ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004006:	4b0b      	ldr	r3, [pc, #44]	; (8004034 <HAL_RCC_OscConfig+0x274>)
 8004008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0f0      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x234>
 8004012:	e01b      	b.n	800404c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004014:	4b09      	ldr	r3, [pc, #36]	; (800403c <HAL_RCC_OscConfig+0x27c>)
 8004016:	2200      	movs	r2, #0
 8004018:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800401a:	f7fd ff6d 	bl	8001ef8 <HAL_GetTick>
 800401e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004020:	e00e      	b.n	8004040 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004022:	f7fd ff69 	bl	8001ef8 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d907      	bls.n	8004040 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e15c      	b.n	80042ee <HAL_RCC_OscConfig+0x52e>
 8004034:	40023800 	.word	0x40023800
 8004038:	42470000 	.word	0x42470000
 800403c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004040:	4b8a      	ldr	r3, [pc, #552]	; (800426c <HAL_RCC_OscConfig+0x4ac>)
 8004042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1ea      	bne.n	8004022 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0304 	and.w	r3, r3, #4
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 8097 	beq.w	8004188 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800405a:	2300      	movs	r3, #0
 800405c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800405e:	4b83      	ldr	r3, [pc, #524]	; (800426c <HAL_RCC_OscConfig+0x4ac>)
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10f      	bne.n	800408a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800406a:	2300      	movs	r3, #0
 800406c:	60bb      	str	r3, [r7, #8]
 800406e:	4b7f      	ldr	r3, [pc, #508]	; (800426c <HAL_RCC_OscConfig+0x4ac>)
 8004070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004072:	4a7e      	ldr	r2, [pc, #504]	; (800426c <HAL_RCC_OscConfig+0x4ac>)
 8004074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004078:	6413      	str	r3, [r2, #64]	; 0x40
 800407a:	4b7c      	ldr	r3, [pc, #496]	; (800426c <HAL_RCC_OscConfig+0x4ac>)
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004082:	60bb      	str	r3, [r7, #8]
 8004084:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004086:	2301      	movs	r3, #1
 8004088:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800408a:	4b79      	ldr	r3, [pc, #484]	; (8004270 <HAL_RCC_OscConfig+0x4b0>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004092:	2b00      	cmp	r3, #0
 8004094:	d118      	bne.n	80040c8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004096:	4b76      	ldr	r3, [pc, #472]	; (8004270 <HAL_RCC_OscConfig+0x4b0>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a75      	ldr	r2, [pc, #468]	; (8004270 <HAL_RCC_OscConfig+0x4b0>)
 800409c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040a2:	f7fd ff29 	bl	8001ef8 <HAL_GetTick>
 80040a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a8:	e008      	b.n	80040bc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040aa:	f7fd ff25 	bl	8001ef8 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e118      	b.n	80042ee <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040bc:	4b6c      	ldr	r3, [pc, #432]	; (8004270 <HAL_RCC_OscConfig+0x4b0>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d0f0      	beq.n	80040aa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d106      	bne.n	80040de <HAL_RCC_OscConfig+0x31e>
 80040d0:	4b66      	ldr	r3, [pc, #408]	; (800426c <HAL_RCC_OscConfig+0x4ac>)
 80040d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d4:	4a65      	ldr	r2, [pc, #404]	; (800426c <HAL_RCC_OscConfig+0x4ac>)
 80040d6:	f043 0301 	orr.w	r3, r3, #1
 80040da:	6713      	str	r3, [r2, #112]	; 0x70
 80040dc:	e01c      	b.n	8004118 <HAL_RCC_OscConfig+0x358>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	2b05      	cmp	r3, #5
 80040e4:	d10c      	bne.n	8004100 <HAL_RCC_OscConfig+0x340>
 80040e6:	4b61      	ldr	r3, [pc, #388]	; (800426c <HAL_RCC_OscConfig+0x4ac>)
 80040e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ea:	4a60      	ldr	r2, [pc, #384]	; (800426c <HAL_RCC_OscConfig+0x4ac>)
 80040ec:	f043 0304 	orr.w	r3, r3, #4
 80040f0:	6713      	str	r3, [r2, #112]	; 0x70
 80040f2:	4b5e      	ldr	r3, [pc, #376]	; (800426c <HAL_RCC_OscConfig+0x4ac>)
 80040f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f6:	4a5d      	ldr	r2, [pc, #372]	; (800426c <HAL_RCC_OscConfig+0x4ac>)
 80040f8:	f043 0301 	orr.w	r3, r3, #1
 80040fc:	6713      	str	r3, [r2, #112]	; 0x70
 80040fe:	e00b      	b.n	8004118 <HAL_RCC_OscConfig+0x358>
 8004100:	4b5a      	ldr	r3, [pc, #360]	; (800426c <HAL_RCC_OscConfig+0x4ac>)
 8004102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004104:	4a59      	ldr	r2, [pc, #356]	; (800426c <HAL_RCC_OscConfig+0x4ac>)
 8004106:	f023 0301 	bic.w	r3, r3, #1
 800410a:	6713      	str	r3, [r2, #112]	; 0x70
 800410c:	4b57      	ldr	r3, [pc, #348]	; (800426c <HAL_RCC_OscConfig+0x4ac>)
 800410e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004110:	4a56      	ldr	r2, [pc, #344]	; (800426c <HAL_RCC_OscConfig+0x4ac>)
 8004112:	f023 0304 	bic.w	r3, r3, #4
 8004116:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d015      	beq.n	800414c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004120:	f7fd feea 	bl	8001ef8 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004126:	e00a      	b.n	800413e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004128:	f7fd fee6 	bl	8001ef8 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	f241 3288 	movw	r2, #5000	; 0x1388
 8004136:	4293      	cmp	r3, r2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e0d7      	b.n	80042ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800413e:	4b4b      	ldr	r3, [pc, #300]	; (800426c <HAL_RCC_OscConfig+0x4ac>)
 8004140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d0ee      	beq.n	8004128 <HAL_RCC_OscConfig+0x368>
 800414a:	e014      	b.n	8004176 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800414c:	f7fd fed4 	bl	8001ef8 <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004152:	e00a      	b.n	800416a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004154:	f7fd fed0 	bl	8001ef8 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004162:	4293      	cmp	r3, r2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e0c1      	b.n	80042ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800416a:	4b40      	ldr	r3, [pc, #256]	; (800426c <HAL_RCC_OscConfig+0x4ac>)
 800416c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1ee      	bne.n	8004154 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004176:	7dfb      	ldrb	r3, [r7, #23]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d105      	bne.n	8004188 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800417c:	4b3b      	ldr	r3, [pc, #236]	; (800426c <HAL_RCC_OscConfig+0x4ac>)
 800417e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004180:	4a3a      	ldr	r2, [pc, #232]	; (800426c <HAL_RCC_OscConfig+0x4ac>)
 8004182:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004186:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	2b00      	cmp	r3, #0
 800418e:	f000 80ad 	beq.w	80042ec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004192:	4b36      	ldr	r3, [pc, #216]	; (800426c <HAL_RCC_OscConfig+0x4ac>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 030c 	and.w	r3, r3, #12
 800419a:	2b08      	cmp	r3, #8
 800419c:	d060      	beq.n	8004260 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d145      	bne.n	8004232 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041a6:	4b33      	ldr	r3, [pc, #204]	; (8004274 <HAL_RCC_OscConfig+0x4b4>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ac:	f7fd fea4 	bl	8001ef8 <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041b4:	f7fd fea0 	bl	8001ef8 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e093      	b.n	80042ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041c6:	4b29      	ldr	r3, [pc, #164]	; (800426c <HAL_RCC_OscConfig+0x4ac>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1f0      	bne.n	80041b4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	69da      	ldr	r2, [r3, #28]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	019b      	lsls	r3, r3, #6
 80041e2:	431a      	orrs	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e8:	085b      	lsrs	r3, r3, #1
 80041ea:	3b01      	subs	r3, #1
 80041ec:	041b      	lsls	r3, r3, #16
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f4:	061b      	lsls	r3, r3, #24
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fc:	071b      	lsls	r3, r3, #28
 80041fe:	491b      	ldr	r1, [pc, #108]	; (800426c <HAL_RCC_OscConfig+0x4ac>)
 8004200:	4313      	orrs	r3, r2
 8004202:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004204:	4b1b      	ldr	r3, [pc, #108]	; (8004274 <HAL_RCC_OscConfig+0x4b4>)
 8004206:	2201      	movs	r2, #1
 8004208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800420a:	f7fd fe75 	bl	8001ef8 <HAL_GetTick>
 800420e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004210:	e008      	b.n	8004224 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004212:	f7fd fe71 	bl	8001ef8 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e064      	b.n	80042ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004224:	4b11      	ldr	r3, [pc, #68]	; (800426c <HAL_RCC_OscConfig+0x4ac>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d0f0      	beq.n	8004212 <HAL_RCC_OscConfig+0x452>
 8004230:	e05c      	b.n	80042ec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004232:	4b10      	ldr	r3, [pc, #64]	; (8004274 <HAL_RCC_OscConfig+0x4b4>)
 8004234:	2200      	movs	r2, #0
 8004236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004238:	f7fd fe5e 	bl	8001ef8 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004240:	f7fd fe5a 	bl	8001ef8 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e04d      	b.n	80042ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004252:	4b06      	ldr	r3, [pc, #24]	; (800426c <HAL_RCC_OscConfig+0x4ac>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1f0      	bne.n	8004240 <HAL_RCC_OscConfig+0x480>
 800425e:	e045      	b.n	80042ec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d107      	bne.n	8004278 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e040      	b.n	80042ee <HAL_RCC_OscConfig+0x52e>
 800426c:	40023800 	.word	0x40023800
 8004270:	40007000 	.word	0x40007000
 8004274:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004278:	4b1f      	ldr	r3, [pc, #124]	; (80042f8 <HAL_RCC_OscConfig+0x538>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d030      	beq.n	80042e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004290:	429a      	cmp	r2, r3
 8004292:	d129      	bne.n	80042e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800429e:	429a      	cmp	r2, r3
 80042a0:	d122      	bne.n	80042e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042a8:	4013      	ands	r3, r2
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d119      	bne.n	80042e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042be:	085b      	lsrs	r3, r3, #1
 80042c0:	3b01      	subs	r3, #1
 80042c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d10f      	bne.n	80042e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d107      	bne.n	80042e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d001      	beq.n	80042ec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e000      	b.n	80042ee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3718      	adds	r7, #24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	40023800 	.word	0x40023800

080042fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e041      	b.n	8004392 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d106      	bne.n	8004328 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7fd fc68 	bl	8001bf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2202      	movs	r2, #2
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3304      	adds	r3, #4
 8004338:	4619      	mov	r1, r3
 800433a:	4610      	mov	r0, r2
 800433c:	f000 f95e 	bl	80045fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
	...

0800439c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d001      	beq.n	80043b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e046      	b.n	8004442 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2202      	movs	r2, #2
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a23      	ldr	r2, [pc, #140]	; (8004450 <HAL_TIM_Base_Start+0xb4>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d022      	beq.n	800440c <HAL_TIM_Base_Start+0x70>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ce:	d01d      	beq.n	800440c <HAL_TIM_Base_Start+0x70>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a1f      	ldr	r2, [pc, #124]	; (8004454 <HAL_TIM_Base_Start+0xb8>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d018      	beq.n	800440c <HAL_TIM_Base_Start+0x70>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a1e      	ldr	r2, [pc, #120]	; (8004458 <HAL_TIM_Base_Start+0xbc>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d013      	beq.n	800440c <HAL_TIM_Base_Start+0x70>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a1c      	ldr	r2, [pc, #112]	; (800445c <HAL_TIM_Base_Start+0xc0>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d00e      	beq.n	800440c <HAL_TIM_Base_Start+0x70>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a1b      	ldr	r2, [pc, #108]	; (8004460 <HAL_TIM_Base_Start+0xc4>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d009      	beq.n	800440c <HAL_TIM_Base_Start+0x70>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a19      	ldr	r2, [pc, #100]	; (8004464 <HAL_TIM_Base_Start+0xc8>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d004      	beq.n	800440c <HAL_TIM_Base_Start+0x70>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a18      	ldr	r2, [pc, #96]	; (8004468 <HAL_TIM_Base_Start+0xcc>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d111      	bne.n	8004430 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 0307 	and.w	r3, r3, #7
 8004416:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2b06      	cmp	r3, #6
 800441c:	d010      	beq.n	8004440 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f042 0201 	orr.w	r2, r2, #1
 800442c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800442e:	e007      	b.n	8004440 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 0201 	orr.w	r2, r2, #1
 800443e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	40010000 	.word	0x40010000
 8004454:	40000400 	.word	0x40000400
 8004458:	40000800 	.word	0x40000800
 800445c:	40000c00 	.word	0x40000c00
 8004460:	40010400 	.word	0x40010400
 8004464:	40014000 	.word	0x40014000
 8004468:	40001800 	.word	0x40001800

0800446c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004476:	2300      	movs	r3, #0
 8004478:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004480:	2b01      	cmp	r3, #1
 8004482:	d101      	bne.n	8004488 <HAL_TIM_ConfigClockSource+0x1c>
 8004484:	2302      	movs	r3, #2
 8004486:	e0b4      	b.n	80045f2 <HAL_TIM_ConfigClockSource+0x186>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2202      	movs	r2, #2
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80044a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044c0:	d03e      	beq.n	8004540 <HAL_TIM_ConfigClockSource+0xd4>
 80044c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044c6:	f200 8087 	bhi.w	80045d8 <HAL_TIM_ConfigClockSource+0x16c>
 80044ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ce:	f000 8086 	beq.w	80045de <HAL_TIM_ConfigClockSource+0x172>
 80044d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d6:	d87f      	bhi.n	80045d8 <HAL_TIM_ConfigClockSource+0x16c>
 80044d8:	2b70      	cmp	r3, #112	; 0x70
 80044da:	d01a      	beq.n	8004512 <HAL_TIM_ConfigClockSource+0xa6>
 80044dc:	2b70      	cmp	r3, #112	; 0x70
 80044de:	d87b      	bhi.n	80045d8 <HAL_TIM_ConfigClockSource+0x16c>
 80044e0:	2b60      	cmp	r3, #96	; 0x60
 80044e2:	d050      	beq.n	8004586 <HAL_TIM_ConfigClockSource+0x11a>
 80044e4:	2b60      	cmp	r3, #96	; 0x60
 80044e6:	d877      	bhi.n	80045d8 <HAL_TIM_ConfigClockSource+0x16c>
 80044e8:	2b50      	cmp	r3, #80	; 0x50
 80044ea:	d03c      	beq.n	8004566 <HAL_TIM_ConfigClockSource+0xfa>
 80044ec:	2b50      	cmp	r3, #80	; 0x50
 80044ee:	d873      	bhi.n	80045d8 <HAL_TIM_ConfigClockSource+0x16c>
 80044f0:	2b40      	cmp	r3, #64	; 0x40
 80044f2:	d058      	beq.n	80045a6 <HAL_TIM_ConfigClockSource+0x13a>
 80044f4:	2b40      	cmp	r3, #64	; 0x40
 80044f6:	d86f      	bhi.n	80045d8 <HAL_TIM_ConfigClockSource+0x16c>
 80044f8:	2b30      	cmp	r3, #48	; 0x30
 80044fa:	d064      	beq.n	80045c6 <HAL_TIM_ConfigClockSource+0x15a>
 80044fc:	2b30      	cmp	r3, #48	; 0x30
 80044fe:	d86b      	bhi.n	80045d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004500:	2b20      	cmp	r3, #32
 8004502:	d060      	beq.n	80045c6 <HAL_TIM_ConfigClockSource+0x15a>
 8004504:	2b20      	cmp	r3, #32
 8004506:	d867      	bhi.n	80045d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004508:	2b00      	cmp	r3, #0
 800450a:	d05c      	beq.n	80045c6 <HAL_TIM_ConfigClockSource+0x15a>
 800450c:	2b10      	cmp	r3, #16
 800450e:	d05a      	beq.n	80045c6 <HAL_TIM_ConfigClockSource+0x15a>
 8004510:	e062      	b.n	80045d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6818      	ldr	r0, [r3, #0]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	6899      	ldr	r1, [r3, #8]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f000 f985 	bl	8004830 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004534:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	609a      	str	r2, [r3, #8]
      break;
 800453e:	e04f      	b.n	80045e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6818      	ldr	r0, [r3, #0]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	6899      	ldr	r1, [r3, #8]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f000 f96e 	bl	8004830 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689a      	ldr	r2, [r3, #8]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004562:	609a      	str	r2, [r3, #8]
      break;
 8004564:	e03c      	b.n	80045e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6818      	ldr	r0, [r3, #0]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	6859      	ldr	r1, [r3, #4]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	461a      	mov	r2, r3
 8004574:	f000 f8e2 	bl	800473c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2150      	movs	r1, #80	; 0x50
 800457e:	4618      	mov	r0, r3
 8004580:	f000 f93b 	bl	80047fa <TIM_ITRx_SetConfig>
      break;
 8004584:	e02c      	b.n	80045e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6818      	ldr	r0, [r3, #0]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	6859      	ldr	r1, [r3, #4]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	461a      	mov	r2, r3
 8004594:	f000 f901 	bl	800479a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2160      	movs	r1, #96	; 0x60
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 f92b 	bl	80047fa <TIM_ITRx_SetConfig>
      break;
 80045a4:	e01c      	b.n	80045e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6818      	ldr	r0, [r3, #0]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	6859      	ldr	r1, [r3, #4]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	461a      	mov	r2, r3
 80045b4:	f000 f8c2 	bl	800473c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2140      	movs	r1, #64	; 0x40
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 f91b 	bl	80047fa <TIM_ITRx_SetConfig>
      break;
 80045c4:	e00c      	b.n	80045e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4619      	mov	r1, r3
 80045d0:	4610      	mov	r0, r2
 80045d2:	f000 f912 	bl	80047fa <TIM_ITRx_SetConfig>
      break;
 80045d6:	e003      	b.n	80045e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	73fb      	strb	r3, [r7, #15]
      break;
 80045dc:	e000      	b.n	80045e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80045de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
	...

080045fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a40      	ldr	r2, [pc, #256]	; (8004710 <TIM_Base_SetConfig+0x114>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d013      	beq.n	800463c <TIM_Base_SetConfig+0x40>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800461a:	d00f      	beq.n	800463c <TIM_Base_SetConfig+0x40>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a3d      	ldr	r2, [pc, #244]	; (8004714 <TIM_Base_SetConfig+0x118>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d00b      	beq.n	800463c <TIM_Base_SetConfig+0x40>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a3c      	ldr	r2, [pc, #240]	; (8004718 <TIM_Base_SetConfig+0x11c>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d007      	beq.n	800463c <TIM_Base_SetConfig+0x40>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a3b      	ldr	r2, [pc, #236]	; (800471c <TIM_Base_SetConfig+0x120>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d003      	beq.n	800463c <TIM_Base_SetConfig+0x40>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a3a      	ldr	r2, [pc, #232]	; (8004720 <TIM_Base_SetConfig+0x124>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d108      	bne.n	800464e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004642:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	4313      	orrs	r3, r2
 800464c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a2f      	ldr	r2, [pc, #188]	; (8004710 <TIM_Base_SetConfig+0x114>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d02b      	beq.n	80046ae <TIM_Base_SetConfig+0xb2>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800465c:	d027      	beq.n	80046ae <TIM_Base_SetConfig+0xb2>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a2c      	ldr	r2, [pc, #176]	; (8004714 <TIM_Base_SetConfig+0x118>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d023      	beq.n	80046ae <TIM_Base_SetConfig+0xb2>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a2b      	ldr	r2, [pc, #172]	; (8004718 <TIM_Base_SetConfig+0x11c>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d01f      	beq.n	80046ae <TIM_Base_SetConfig+0xb2>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a2a      	ldr	r2, [pc, #168]	; (800471c <TIM_Base_SetConfig+0x120>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d01b      	beq.n	80046ae <TIM_Base_SetConfig+0xb2>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a29      	ldr	r2, [pc, #164]	; (8004720 <TIM_Base_SetConfig+0x124>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d017      	beq.n	80046ae <TIM_Base_SetConfig+0xb2>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a28      	ldr	r2, [pc, #160]	; (8004724 <TIM_Base_SetConfig+0x128>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d013      	beq.n	80046ae <TIM_Base_SetConfig+0xb2>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a27      	ldr	r2, [pc, #156]	; (8004728 <TIM_Base_SetConfig+0x12c>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00f      	beq.n	80046ae <TIM_Base_SetConfig+0xb2>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a26      	ldr	r2, [pc, #152]	; (800472c <TIM_Base_SetConfig+0x130>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d00b      	beq.n	80046ae <TIM_Base_SetConfig+0xb2>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a25      	ldr	r2, [pc, #148]	; (8004730 <TIM_Base_SetConfig+0x134>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d007      	beq.n	80046ae <TIM_Base_SetConfig+0xb2>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a24      	ldr	r2, [pc, #144]	; (8004734 <TIM_Base_SetConfig+0x138>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d003      	beq.n	80046ae <TIM_Base_SetConfig+0xb2>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a23      	ldr	r2, [pc, #140]	; (8004738 <TIM_Base_SetConfig+0x13c>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d108      	bne.n	80046c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	4313      	orrs	r3, r2
 80046be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	689a      	ldr	r2, [r3, #8]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a0a      	ldr	r2, [pc, #40]	; (8004710 <TIM_Base_SetConfig+0x114>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d003      	beq.n	80046f4 <TIM_Base_SetConfig+0xf8>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a0c      	ldr	r2, [pc, #48]	; (8004720 <TIM_Base_SetConfig+0x124>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d103      	bne.n	80046fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	691a      	ldr	r2, [r3, #16]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	615a      	str	r2, [r3, #20]
}
 8004702:	bf00      	nop
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	40010000 	.word	0x40010000
 8004714:	40000400 	.word	0x40000400
 8004718:	40000800 	.word	0x40000800
 800471c:	40000c00 	.word	0x40000c00
 8004720:	40010400 	.word	0x40010400
 8004724:	40014000 	.word	0x40014000
 8004728:	40014400 	.word	0x40014400
 800472c:	40014800 	.word	0x40014800
 8004730:	40001800 	.word	0x40001800
 8004734:	40001c00 	.word	0x40001c00
 8004738:	40002000 	.word	0x40002000

0800473c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	f023 0201 	bic.w	r2, r3, #1
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004766:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	011b      	lsls	r3, r3, #4
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	4313      	orrs	r3, r2
 8004770:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f023 030a 	bic.w	r3, r3, #10
 8004778:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	4313      	orrs	r3, r2
 8004780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	621a      	str	r2, [r3, #32]
}
 800478e:	bf00      	nop
 8004790:	371c      	adds	r7, #28
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800479a:	b480      	push	{r7}
 800479c:	b087      	sub	sp, #28
 800479e:	af00      	add	r7, sp, #0
 80047a0:	60f8      	str	r0, [r7, #12]
 80047a2:	60b9      	str	r1, [r7, #8]
 80047a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	f023 0210 	bic.w	r2, r3, #16
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	031b      	lsls	r3, r3, #12
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	011b      	lsls	r3, r3, #4
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	4313      	orrs	r3, r2
 80047e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	621a      	str	r2, [r3, #32]
}
 80047ee:	bf00      	nop
 80047f0:	371c      	adds	r7, #28
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b085      	sub	sp, #20
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
 8004802:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004810:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004812:	683a      	ldr	r2, [r7, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4313      	orrs	r3, r2
 8004818:	f043 0307 	orr.w	r3, r3, #7
 800481c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	609a      	str	r2, [r3, #8]
}
 8004824:	bf00      	nop
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004830:	b480      	push	{r7}
 8004832:	b087      	sub	sp, #28
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
 800483c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800484a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	021a      	lsls	r2, r3, #8
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	431a      	orrs	r2, r3
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	4313      	orrs	r3, r2
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	4313      	orrs	r3, r2
 800485c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	609a      	str	r2, [r3, #8]
}
 8004864:	bf00      	nop
 8004866:	371c      	adds	r7, #28
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004880:	2b01      	cmp	r3, #1
 8004882:	d101      	bne.n	8004888 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004884:	2302      	movs	r3, #2
 8004886:	e05a      	b.n	800493e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2202      	movs	r2, #2
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a21      	ldr	r2, [pc, #132]	; (800494c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d022      	beq.n	8004912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048d4:	d01d      	beq.n	8004912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a1d      	ldr	r2, [pc, #116]	; (8004950 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d018      	beq.n	8004912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a1b      	ldr	r2, [pc, #108]	; (8004954 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d013      	beq.n	8004912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a1a      	ldr	r2, [pc, #104]	; (8004958 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d00e      	beq.n	8004912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a18      	ldr	r2, [pc, #96]	; (800495c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d009      	beq.n	8004912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a17      	ldr	r2, [pc, #92]	; (8004960 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d004      	beq.n	8004912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a15      	ldr	r2, [pc, #84]	; (8004964 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d10c      	bne.n	800492c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004918:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	4313      	orrs	r3, r2
 8004922:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	40010000 	.word	0x40010000
 8004950:	40000400 	.word	0x40000400
 8004954:	40000800 	.word	0x40000800
 8004958:	40000c00 	.word	0x40000c00
 800495c:	40010400 	.word	0x40010400
 8004960:	40014000 	.word	0x40014000
 8004964:	40001800 	.word	0x40001800

08004968 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e03f      	b.n	80049fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d106      	bne.n	8004994 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7fd f954 	bl	8001c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2224      	movs	r2, #36	; 0x24
 8004998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68da      	ldr	r2, [r3, #12]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 f929 	bl	8004c04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	691a      	ldr	r2, [r3, #16]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	695a      	ldr	r2, [r3, #20]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68da      	ldr	r2, [r3, #12]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2220      	movs	r2, #32
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2220      	movs	r2, #32
 80049f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b08a      	sub	sp, #40	; 0x28
 8004a06:	af02      	add	r7, sp, #8
 8004a08:	60f8      	str	r0, [r7, #12]
 8004a0a:	60b9      	str	r1, [r7, #8]
 8004a0c:	603b      	str	r3, [r7, #0]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a12:	2300      	movs	r3, #0
 8004a14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b20      	cmp	r3, #32
 8004a20:	d17c      	bne.n	8004b1c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d002      	beq.n	8004a2e <HAL_UART_Transmit+0x2c>
 8004a28:	88fb      	ldrh	r3, [r7, #6]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e075      	b.n	8004b1e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d101      	bne.n	8004a40 <HAL_UART_Transmit+0x3e>
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	e06e      	b.n	8004b1e <HAL_UART_Transmit+0x11c>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2221      	movs	r2, #33	; 0x21
 8004a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a56:	f7fd fa4f 	bl	8001ef8 <HAL_GetTick>
 8004a5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	88fa      	ldrh	r2, [r7, #6]
 8004a60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	88fa      	ldrh	r2, [r7, #6]
 8004a66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a70:	d108      	bne.n	8004a84 <HAL_UART_Transmit+0x82>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d104      	bne.n	8004a84 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	61bb      	str	r3, [r7, #24]
 8004a82:	e003      	b.n	8004a8c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004a94:	e02a      	b.n	8004aec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	2180      	movs	r1, #128	; 0x80
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f000 f840 	bl	8004b26 <UART_WaitOnFlagUntilTimeout>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d001      	beq.n	8004ab0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e036      	b.n	8004b1e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10b      	bne.n	8004ace <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	881b      	ldrh	r3, [r3, #0]
 8004aba:	461a      	mov	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ac4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	3302      	adds	r3, #2
 8004aca:	61bb      	str	r3, [r7, #24]
 8004acc:	e007      	b.n	8004ade <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	781a      	ldrb	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	3301      	adds	r3, #1
 8004adc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1cf      	bne.n	8004a96 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	2200      	movs	r2, #0
 8004afe:	2140      	movs	r1, #64	; 0x40
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f000 f810 	bl	8004b26 <UART_WaitOnFlagUntilTimeout>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d001      	beq.n	8004b10 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e006      	b.n	8004b1e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	e000      	b.n	8004b1e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004b1c:	2302      	movs	r3, #2
  }
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3720      	adds	r7, #32
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b090      	sub	sp, #64	; 0x40
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	60f8      	str	r0, [r7, #12]
 8004b2e:	60b9      	str	r1, [r7, #8]
 8004b30:	603b      	str	r3, [r7, #0]
 8004b32:	4613      	mov	r3, r2
 8004b34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b36:	e050      	b.n	8004bda <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b3e:	d04c      	beq.n	8004bda <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d007      	beq.n	8004b56 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b46:	f7fd f9d7 	bl	8001ef8 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d241      	bcs.n	8004bda <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	330c      	adds	r3, #12
 8004b5c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b60:	e853 3f00 	ldrex	r3, [r3]
 8004b64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b68:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	330c      	adds	r3, #12
 8004b74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b76:	637a      	str	r2, [r7, #52]	; 0x34
 8004b78:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b7e:	e841 2300 	strex	r3, r2, [r1]
 8004b82:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1e5      	bne.n	8004b56 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	3314      	adds	r3, #20
 8004b90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	e853 3f00 	ldrex	r3, [r3]
 8004b98:	613b      	str	r3, [r7, #16]
   return(result);
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	f023 0301 	bic.w	r3, r3, #1
 8004ba0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	3314      	adds	r3, #20
 8004ba8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004baa:	623a      	str	r2, [r7, #32]
 8004bac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bae:	69f9      	ldr	r1, [r7, #28]
 8004bb0:	6a3a      	ldr	r2, [r7, #32]
 8004bb2:	e841 2300 	strex	r3, r2, [r1]
 8004bb6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1e5      	bne.n	8004b8a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e00f      	b.n	8004bfa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	4013      	ands	r3, r2
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	bf0c      	ite	eq
 8004bea:	2301      	moveq	r3, #1
 8004bec:	2300      	movne	r3, #0
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	79fb      	ldrb	r3, [r7, #7]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d09f      	beq.n	8004b38 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3740      	adds	r7, #64	; 0x40
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
	...

08004c04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c08:	b0c0      	sub	sp, #256	; 0x100
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c20:	68d9      	ldr	r1, [r3, #12]
 8004c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	ea40 0301 	orr.w	r3, r0, r1
 8004c2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c32:	689a      	ldr	r2, [r3, #8]
 8004c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	431a      	orrs	r2, r3
 8004c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c5c:	f021 010c 	bic.w	r1, r1, #12
 8004c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c6a:	430b      	orrs	r3, r1
 8004c6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c7e:	6999      	ldr	r1, [r3, #24]
 8004c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	ea40 0301 	orr.w	r3, r0, r1
 8004c8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	4b8f      	ldr	r3, [pc, #572]	; (8004ed0 <UART_SetConfig+0x2cc>)
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d005      	beq.n	8004ca4 <UART_SetConfig+0xa0>
 8004c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	4b8d      	ldr	r3, [pc, #564]	; (8004ed4 <UART_SetConfig+0x2d0>)
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d104      	bne.n	8004cae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ca4:	f7fe fe48 	bl	8003938 <HAL_RCC_GetPCLK2Freq>
 8004ca8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004cac:	e003      	b.n	8004cb6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004cae:	f7fe fe2f 	bl	8003910 <HAL_RCC_GetPCLK1Freq>
 8004cb2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cba:	69db      	ldr	r3, [r3, #28]
 8004cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cc0:	f040 810c 	bne.w	8004edc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004cc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004cce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004cd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004cd6:	4622      	mov	r2, r4
 8004cd8:	462b      	mov	r3, r5
 8004cda:	1891      	adds	r1, r2, r2
 8004cdc:	65b9      	str	r1, [r7, #88]	; 0x58
 8004cde:	415b      	adcs	r3, r3
 8004ce0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ce2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ce6:	4621      	mov	r1, r4
 8004ce8:	eb12 0801 	adds.w	r8, r2, r1
 8004cec:	4629      	mov	r1, r5
 8004cee:	eb43 0901 	adc.w	r9, r3, r1
 8004cf2:	f04f 0200 	mov.w	r2, #0
 8004cf6:	f04f 0300 	mov.w	r3, #0
 8004cfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d06:	4690      	mov	r8, r2
 8004d08:	4699      	mov	r9, r3
 8004d0a:	4623      	mov	r3, r4
 8004d0c:	eb18 0303 	adds.w	r3, r8, r3
 8004d10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d14:	462b      	mov	r3, r5
 8004d16:	eb49 0303 	adc.w	r3, r9, r3
 8004d1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d2a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004d2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004d32:	460b      	mov	r3, r1
 8004d34:	18db      	adds	r3, r3, r3
 8004d36:	653b      	str	r3, [r7, #80]	; 0x50
 8004d38:	4613      	mov	r3, r2
 8004d3a:	eb42 0303 	adc.w	r3, r2, r3
 8004d3e:	657b      	str	r3, [r7, #84]	; 0x54
 8004d40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004d44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004d48:	f7fb ff80 	bl	8000c4c <__aeabi_uldivmod>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	4b61      	ldr	r3, [pc, #388]	; (8004ed8 <UART_SetConfig+0x2d4>)
 8004d52:	fba3 2302 	umull	r2, r3, r3, r2
 8004d56:	095b      	lsrs	r3, r3, #5
 8004d58:	011c      	lsls	r4, r3, #4
 8004d5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d64:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004d68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004d6c:	4642      	mov	r2, r8
 8004d6e:	464b      	mov	r3, r9
 8004d70:	1891      	adds	r1, r2, r2
 8004d72:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d74:	415b      	adcs	r3, r3
 8004d76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d7c:	4641      	mov	r1, r8
 8004d7e:	eb12 0a01 	adds.w	sl, r2, r1
 8004d82:	4649      	mov	r1, r9
 8004d84:	eb43 0b01 	adc.w	fp, r3, r1
 8004d88:	f04f 0200 	mov.w	r2, #0
 8004d8c:	f04f 0300 	mov.w	r3, #0
 8004d90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d9c:	4692      	mov	sl, r2
 8004d9e:	469b      	mov	fp, r3
 8004da0:	4643      	mov	r3, r8
 8004da2:	eb1a 0303 	adds.w	r3, sl, r3
 8004da6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004daa:	464b      	mov	r3, r9
 8004dac:	eb4b 0303 	adc.w	r3, fp, r3
 8004db0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004dc0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004dc4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004dc8:	460b      	mov	r3, r1
 8004dca:	18db      	adds	r3, r3, r3
 8004dcc:	643b      	str	r3, [r7, #64]	; 0x40
 8004dce:	4613      	mov	r3, r2
 8004dd0:	eb42 0303 	adc.w	r3, r2, r3
 8004dd4:	647b      	str	r3, [r7, #68]	; 0x44
 8004dd6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004dda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004dde:	f7fb ff35 	bl	8000c4c <__aeabi_uldivmod>
 8004de2:	4602      	mov	r2, r0
 8004de4:	460b      	mov	r3, r1
 8004de6:	4611      	mov	r1, r2
 8004de8:	4b3b      	ldr	r3, [pc, #236]	; (8004ed8 <UART_SetConfig+0x2d4>)
 8004dea:	fba3 2301 	umull	r2, r3, r3, r1
 8004dee:	095b      	lsrs	r3, r3, #5
 8004df0:	2264      	movs	r2, #100	; 0x64
 8004df2:	fb02 f303 	mul.w	r3, r2, r3
 8004df6:	1acb      	subs	r3, r1, r3
 8004df8:	00db      	lsls	r3, r3, #3
 8004dfa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004dfe:	4b36      	ldr	r3, [pc, #216]	; (8004ed8 <UART_SetConfig+0x2d4>)
 8004e00:	fba3 2302 	umull	r2, r3, r3, r2
 8004e04:	095b      	lsrs	r3, r3, #5
 8004e06:	005b      	lsls	r3, r3, #1
 8004e08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e0c:	441c      	add	r4, r3
 8004e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e12:	2200      	movs	r2, #0
 8004e14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e18:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004e1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004e20:	4642      	mov	r2, r8
 8004e22:	464b      	mov	r3, r9
 8004e24:	1891      	adds	r1, r2, r2
 8004e26:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e28:	415b      	adcs	r3, r3
 8004e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e30:	4641      	mov	r1, r8
 8004e32:	1851      	adds	r1, r2, r1
 8004e34:	6339      	str	r1, [r7, #48]	; 0x30
 8004e36:	4649      	mov	r1, r9
 8004e38:	414b      	adcs	r3, r1
 8004e3a:	637b      	str	r3, [r7, #52]	; 0x34
 8004e3c:	f04f 0200 	mov.w	r2, #0
 8004e40:	f04f 0300 	mov.w	r3, #0
 8004e44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004e48:	4659      	mov	r1, fp
 8004e4a:	00cb      	lsls	r3, r1, #3
 8004e4c:	4651      	mov	r1, sl
 8004e4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e52:	4651      	mov	r1, sl
 8004e54:	00ca      	lsls	r2, r1, #3
 8004e56:	4610      	mov	r0, r2
 8004e58:	4619      	mov	r1, r3
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	4642      	mov	r2, r8
 8004e5e:	189b      	adds	r3, r3, r2
 8004e60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e64:	464b      	mov	r3, r9
 8004e66:	460a      	mov	r2, r1
 8004e68:	eb42 0303 	adc.w	r3, r2, r3
 8004e6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004e7c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004e80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004e84:	460b      	mov	r3, r1
 8004e86:	18db      	adds	r3, r3, r3
 8004e88:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	eb42 0303 	adc.w	r3, r2, r3
 8004e90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004e9a:	f7fb fed7 	bl	8000c4c <__aeabi_uldivmod>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	4b0d      	ldr	r3, [pc, #52]	; (8004ed8 <UART_SetConfig+0x2d4>)
 8004ea4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ea8:	095b      	lsrs	r3, r3, #5
 8004eaa:	2164      	movs	r1, #100	; 0x64
 8004eac:	fb01 f303 	mul.w	r3, r1, r3
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	3332      	adds	r3, #50	; 0x32
 8004eb6:	4a08      	ldr	r2, [pc, #32]	; (8004ed8 <UART_SetConfig+0x2d4>)
 8004eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ebc:	095b      	lsrs	r3, r3, #5
 8004ebe:	f003 0207 	and.w	r2, r3, #7
 8004ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4422      	add	r2, r4
 8004eca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ecc:	e106      	b.n	80050dc <UART_SetConfig+0x4d8>
 8004ece:	bf00      	nop
 8004ed0:	40011000 	.word	0x40011000
 8004ed4:	40011400 	.word	0x40011400
 8004ed8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004edc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ee6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004eea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004eee:	4642      	mov	r2, r8
 8004ef0:	464b      	mov	r3, r9
 8004ef2:	1891      	adds	r1, r2, r2
 8004ef4:	6239      	str	r1, [r7, #32]
 8004ef6:	415b      	adcs	r3, r3
 8004ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8004efa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004efe:	4641      	mov	r1, r8
 8004f00:	1854      	adds	r4, r2, r1
 8004f02:	4649      	mov	r1, r9
 8004f04:	eb43 0501 	adc.w	r5, r3, r1
 8004f08:	f04f 0200 	mov.w	r2, #0
 8004f0c:	f04f 0300 	mov.w	r3, #0
 8004f10:	00eb      	lsls	r3, r5, #3
 8004f12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f16:	00e2      	lsls	r2, r4, #3
 8004f18:	4614      	mov	r4, r2
 8004f1a:	461d      	mov	r5, r3
 8004f1c:	4643      	mov	r3, r8
 8004f1e:	18e3      	adds	r3, r4, r3
 8004f20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f24:	464b      	mov	r3, r9
 8004f26:	eb45 0303 	adc.w	r3, r5, r3
 8004f2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f3e:	f04f 0200 	mov.w	r2, #0
 8004f42:	f04f 0300 	mov.w	r3, #0
 8004f46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004f4a:	4629      	mov	r1, r5
 8004f4c:	008b      	lsls	r3, r1, #2
 8004f4e:	4621      	mov	r1, r4
 8004f50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f54:	4621      	mov	r1, r4
 8004f56:	008a      	lsls	r2, r1, #2
 8004f58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004f5c:	f7fb fe76 	bl	8000c4c <__aeabi_uldivmod>
 8004f60:	4602      	mov	r2, r0
 8004f62:	460b      	mov	r3, r1
 8004f64:	4b60      	ldr	r3, [pc, #384]	; (80050e8 <UART_SetConfig+0x4e4>)
 8004f66:	fba3 2302 	umull	r2, r3, r3, r2
 8004f6a:	095b      	lsrs	r3, r3, #5
 8004f6c:	011c      	lsls	r4, r3, #4
 8004f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f72:	2200      	movs	r2, #0
 8004f74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f78:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004f80:	4642      	mov	r2, r8
 8004f82:	464b      	mov	r3, r9
 8004f84:	1891      	adds	r1, r2, r2
 8004f86:	61b9      	str	r1, [r7, #24]
 8004f88:	415b      	adcs	r3, r3
 8004f8a:	61fb      	str	r3, [r7, #28]
 8004f8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f90:	4641      	mov	r1, r8
 8004f92:	1851      	adds	r1, r2, r1
 8004f94:	6139      	str	r1, [r7, #16]
 8004f96:	4649      	mov	r1, r9
 8004f98:	414b      	adcs	r3, r1
 8004f9a:	617b      	str	r3, [r7, #20]
 8004f9c:	f04f 0200 	mov.w	r2, #0
 8004fa0:	f04f 0300 	mov.w	r3, #0
 8004fa4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fa8:	4659      	mov	r1, fp
 8004faa:	00cb      	lsls	r3, r1, #3
 8004fac:	4651      	mov	r1, sl
 8004fae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fb2:	4651      	mov	r1, sl
 8004fb4:	00ca      	lsls	r2, r1, #3
 8004fb6:	4610      	mov	r0, r2
 8004fb8:	4619      	mov	r1, r3
 8004fba:	4603      	mov	r3, r0
 8004fbc:	4642      	mov	r2, r8
 8004fbe:	189b      	adds	r3, r3, r2
 8004fc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fc4:	464b      	mov	r3, r9
 8004fc6:	460a      	mov	r2, r1
 8004fc8:	eb42 0303 	adc.w	r3, r2, r3
 8004fcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fda:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004fdc:	f04f 0200 	mov.w	r2, #0
 8004fe0:	f04f 0300 	mov.w	r3, #0
 8004fe4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004fe8:	4649      	mov	r1, r9
 8004fea:	008b      	lsls	r3, r1, #2
 8004fec:	4641      	mov	r1, r8
 8004fee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ff2:	4641      	mov	r1, r8
 8004ff4:	008a      	lsls	r2, r1, #2
 8004ff6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ffa:	f7fb fe27 	bl	8000c4c <__aeabi_uldivmod>
 8004ffe:	4602      	mov	r2, r0
 8005000:	460b      	mov	r3, r1
 8005002:	4611      	mov	r1, r2
 8005004:	4b38      	ldr	r3, [pc, #224]	; (80050e8 <UART_SetConfig+0x4e4>)
 8005006:	fba3 2301 	umull	r2, r3, r3, r1
 800500a:	095b      	lsrs	r3, r3, #5
 800500c:	2264      	movs	r2, #100	; 0x64
 800500e:	fb02 f303 	mul.w	r3, r2, r3
 8005012:	1acb      	subs	r3, r1, r3
 8005014:	011b      	lsls	r3, r3, #4
 8005016:	3332      	adds	r3, #50	; 0x32
 8005018:	4a33      	ldr	r2, [pc, #204]	; (80050e8 <UART_SetConfig+0x4e4>)
 800501a:	fba2 2303 	umull	r2, r3, r2, r3
 800501e:	095b      	lsrs	r3, r3, #5
 8005020:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005024:	441c      	add	r4, r3
 8005026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800502a:	2200      	movs	r2, #0
 800502c:	673b      	str	r3, [r7, #112]	; 0x70
 800502e:	677a      	str	r2, [r7, #116]	; 0x74
 8005030:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005034:	4642      	mov	r2, r8
 8005036:	464b      	mov	r3, r9
 8005038:	1891      	adds	r1, r2, r2
 800503a:	60b9      	str	r1, [r7, #8]
 800503c:	415b      	adcs	r3, r3
 800503e:	60fb      	str	r3, [r7, #12]
 8005040:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005044:	4641      	mov	r1, r8
 8005046:	1851      	adds	r1, r2, r1
 8005048:	6039      	str	r1, [r7, #0]
 800504a:	4649      	mov	r1, r9
 800504c:	414b      	adcs	r3, r1
 800504e:	607b      	str	r3, [r7, #4]
 8005050:	f04f 0200 	mov.w	r2, #0
 8005054:	f04f 0300 	mov.w	r3, #0
 8005058:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800505c:	4659      	mov	r1, fp
 800505e:	00cb      	lsls	r3, r1, #3
 8005060:	4651      	mov	r1, sl
 8005062:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005066:	4651      	mov	r1, sl
 8005068:	00ca      	lsls	r2, r1, #3
 800506a:	4610      	mov	r0, r2
 800506c:	4619      	mov	r1, r3
 800506e:	4603      	mov	r3, r0
 8005070:	4642      	mov	r2, r8
 8005072:	189b      	adds	r3, r3, r2
 8005074:	66bb      	str	r3, [r7, #104]	; 0x68
 8005076:	464b      	mov	r3, r9
 8005078:	460a      	mov	r2, r1
 800507a:	eb42 0303 	adc.w	r3, r2, r3
 800507e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	663b      	str	r3, [r7, #96]	; 0x60
 800508a:	667a      	str	r2, [r7, #100]	; 0x64
 800508c:	f04f 0200 	mov.w	r2, #0
 8005090:	f04f 0300 	mov.w	r3, #0
 8005094:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005098:	4649      	mov	r1, r9
 800509a:	008b      	lsls	r3, r1, #2
 800509c:	4641      	mov	r1, r8
 800509e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050a2:	4641      	mov	r1, r8
 80050a4:	008a      	lsls	r2, r1, #2
 80050a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80050aa:	f7fb fdcf 	bl	8000c4c <__aeabi_uldivmod>
 80050ae:	4602      	mov	r2, r0
 80050b0:	460b      	mov	r3, r1
 80050b2:	4b0d      	ldr	r3, [pc, #52]	; (80050e8 <UART_SetConfig+0x4e4>)
 80050b4:	fba3 1302 	umull	r1, r3, r3, r2
 80050b8:	095b      	lsrs	r3, r3, #5
 80050ba:	2164      	movs	r1, #100	; 0x64
 80050bc:	fb01 f303 	mul.w	r3, r1, r3
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	011b      	lsls	r3, r3, #4
 80050c4:	3332      	adds	r3, #50	; 0x32
 80050c6:	4a08      	ldr	r2, [pc, #32]	; (80050e8 <UART_SetConfig+0x4e4>)
 80050c8:	fba2 2303 	umull	r2, r3, r2, r3
 80050cc:	095b      	lsrs	r3, r3, #5
 80050ce:	f003 020f 	and.w	r2, r3, #15
 80050d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4422      	add	r2, r4
 80050da:	609a      	str	r2, [r3, #8]
}
 80050dc:	bf00      	nop
 80050de:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80050e2:	46bd      	mov	sp, r7
 80050e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050e8:	51eb851f 	.word	0x51eb851f

080050ec <siprintf>:
 80050ec:	b40e      	push	{r1, r2, r3}
 80050ee:	b500      	push	{lr}
 80050f0:	b09c      	sub	sp, #112	; 0x70
 80050f2:	ab1d      	add	r3, sp, #116	; 0x74
 80050f4:	9002      	str	r0, [sp, #8]
 80050f6:	9006      	str	r0, [sp, #24]
 80050f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80050fc:	4809      	ldr	r0, [pc, #36]	; (8005124 <siprintf+0x38>)
 80050fe:	9107      	str	r1, [sp, #28]
 8005100:	9104      	str	r1, [sp, #16]
 8005102:	4909      	ldr	r1, [pc, #36]	; (8005128 <siprintf+0x3c>)
 8005104:	f853 2b04 	ldr.w	r2, [r3], #4
 8005108:	9105      	str	r1, [sp, #20]
 800510a:	6800      	ldr	r0, [r0, #0]
 800510c:	9301      	str	r3, [sp, #4]
 800510e:	a902      	add	r1, sp, #8
 8005110:	f000 f8a8 	bl	8005264 <_svfiprintf_r>
 8005114:	9b02      	ldr	r3, [sp, #8]
 8005116:	2200      	movs	r2, #0
 8005118:	701a      	strb	r2, [r3, #0]
 800511a:	b01c      	add	sp, #112	; 0x70
 800511c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005120:	b003      	add	sp, #12
 8005122:	4770      	bx	lr
 8005124:	20000058 	.word	0x20000058
 8005128:	ffff0208 	.word	0xffff0208

0800512c <memset>:
 800512c:	4402      	add	r2, r0
 800512e:	4603      	mov	r3, r0
 8005130:	4293      	cmp	r3, r2
 8005132:	d100      	bne.n	8005136 <memset+0xa>
 8005134:	4770      	bx	lr
 8005136:	f803 1b01 	strb.w	r1, [r3], #1
 800513a:	e7f9      	b.n	8005130 <memset+0x4>

0800513c <__errno>:
 800513c:	4b01      	ldr	r3, [pc, #4]	; (8005144 <__errno+0x8>)
 800513e:	6818      	ldr	r0, [r3, #0]
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	20000058 	.word	0x20000058

08005148 <__libc_init_array>:
 8005148:	b570      	push	{r4, r5, r6, lr}
 800514a:	4d0d      	ldr	r5, [pc, #52]	; (8005180 <__libc_init_array+0x38>)
 800514c:	4c0d      	ldr	r4, [pc, #52]	; (8005184 <__libc_init_array+0x3c>)
 800514e:	1b64      	subs	r4, r4, r5
 8005150:	10a4      	asrs	r4, r4, #2
 8005152:	2600      	movs	r6, #0
 8005154:	42a6      	cmp	r6, r4
 8005156:	d109      	bne.n	800516c <__libc_init_array+0x24>
 8005158:	4d0b      	ldr	r5, [pc, #44]	; (8005188 <__libc_init_array+0x40>)
 800515a:	4c0c      	ldr	r4, [pc, #48]	; (800518c <__libc_init_array+0x44>)
 800515c:	f000 fc6a 	bl	8005a34 <_init>
 8005160:	1b64      	subs	r4, r4, r5
 8005162:	10a4      	asrs	r4, r4, #2
 8005164:	2600      	movs	r6, #0
 8005166:	42a6      	cmp	r6, r4
 8005168:	d105      	bne.n	8005176 <__libc_init_array+0x2e>
 800516a:	bd70      	pop	{r4, r5, r6, pc}
 800516c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005170:	4798      	blx	r3
 8005172:	3601      	adds	r6, #1
 8005174:	e7ee      	b.n	8005154 <__libc_init_array+0xc>
 8005176:	f855 3b04 	ldr.w	r3, [r5], #4
 800517a:	4798      	blx	r3
 800517c:	3601      	adds	r6, #1
 800517e:	e7f2      	b.n	8005166 <__libc_init_array+0x1e>
 8005180:	08005ae0 	.word	0x08005ae0
 8005184:	08005ae0 	.word	0x08005ae0
 8005188:	08005ae0 	.word	0x08005ae0
 800518c:	08005ae4 	.word	0x08005ae4

08005190 <__retarget_lock_acquire_recursive>:
 8005190:	4770      	bx	lr

08005192 <__retarget_lock_release_recursive>:
 8005192:	4770      	bx	lr

08005194 <memcpy>:
 8005194:	440a      	add	r2, r1
 8005196:	4291      	cmp	r1, r2
 8005198:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800519c:	d100      	bne.n	80051a0 <memcpy+0xc>
 800519e:	4770      	bx	lr
 80051a0:	b510      	push	{r4, lr}
 80051a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051aa:	4291      	cmp	r1, r2
 80051ac:	d1f9      	bne.n	80051a2 <memcpy+0xe>
 80051ae:	bd10      	pop	{r4, pc}

080051b0 <__ssputs_r>:
 80051b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051b4:	688e      	ldr	r6, [r1, #8]
 80051b6:	461f      	mov	r7, r3
 80051b8:	42be      	cmp	r6, r7
 80051ba:	680b      	ldr	r3, [r1, #0]
 80051bc:	4682      	mov	sl, r0
 80051be:	460c      	mov	r4, r1
 80051c0:	4690      	mov	r8, r2
 80051c2:	d82c      	bhi.n	800521e <__ssputs_r+0x6e>
 80051c4:	898a      	ldrh	r2, [r1, #12]
 80051c6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80051ca:	d026      	beq.n	800521a <__ssputs_r+0x6a>
 80051cc:	6965      	ldr	r5, [r4, #20]
 80051ce:	6909      	ldr	r1, [r1, #16]
 80051d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80051d4:	eba3 0901 	sub.w	r9, r3, r1
 80051d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80051dc:	1c7b      	adds	r3, r7, #1
 80051de:	444b      	add	r3, r9
 80051e0:	106d      	asrs	r5, r5, #1
 80051e2:	429d      	cmp	r5, r3
 80051e4:	bf38      	it	cc
 80051e6:	461d      	movcc	r5, r3
 80051e8:	0553      	lsls	r3, r2, #21
 80051ea:	d527      	bpl.n	800523c <__ssputs_r+0x8c>
 80051ec:	4629      	mov	r1, r5
 80051ee:	f000 f957 	bl	80054a0 <_malloc_r>
 80051f2:	4606      	mov	r6, r0
 80051f4:	b360      	cbz	r0, 8005250 <__ssputs_r+0xa0>
 80051f6:	6921      	ldr	r1, [r4, #16]
 80051f8:	464a      	mov	r2, r9
 80051fa:	f7ff ffcb 	bl	8005194 <memcpy>
 80051fe:	89a3      	ldrh	r3, [r4, #12]
 8005200:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005208:	81a3      	strh	r3, [r4, #12]
 800520a:	6126      	str	r6, [r4, #16]
 800520c:	6165      	str	r5, [r4, #20]
 800520e:	444e      	add	r6, r9
 8005210:	eba5 0509 	sub.w	r5, r5, r9
 8005214:	6026      	str	r6, [r4, #0]
 8005216:	60a5      	str	r5, [r4, #8]
 8005218:	463e      	mov	r6, r7
 800521a:	42be      	cmp	r6, r7
 800521c:	d900      	bls.n	8005220 <__ssputs_r+0x70>
 800521e:	463e      	mov	r6, r7
 8005220:	6820      	ldr	r0, [r4, #0]
 8005222:	4632      	mov	r2, r6
 8005224:	4641      	mov	r1, r8
 8005226:	f000 fb86 	bl	8005936 <memmove>
 800522a:	68a3      	ldr	r3, [r4, #8]
 800522c:	1b9b      	subs	r3, r3, r6
 800522e:	60a3      	str	r3, [r4, #8]
 8005230:	6823      	ldr	r3, [r4, #0]
 8005232:	4433      	add	r3, r6
 8005234:	6023      	str	r3, [r4, #0]
 8005236:	2000      	movs	r0, #0
 8005238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800523c:	462a      	mov	r2, r5
 800523e:	f000 fb4b 	bl	80058d8 <_realloc_r>
 8005242:	4606      	mov	r6, r0
 8005244:	2800      	cmp	r0, #0
 8005246:	d1e0      	bne.n	800520a <__ssputs_r+0x5a>
 8005248:	6921      	ldr	r1, [r4, #16]
 800524a:	4650      	mov	r0, sl
 800524c:	f000 fb9e 	bl	800598c <_free_r>
 8005250:	230c      	movs	r3, #12
 8005252:	f8ca 3000 	str.w	r3, [sl]
 8005256:	89a3      	ldrh	r3, [r4, #12]
 8005258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800525c:	81a3      	strh	r3, [r4, #12]
 800525e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005262:	e7e9      	b.n	8005238 <__ssputs_r+0x88>

08005264 <_svfiprintf_r>:
 8005264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005268:	4698      	mov	r8, r3
 800526a:	898b      	ldrh	r3, [r1, #12]
 800526c:	061b      	lsls	r3, r3, #24
 800526e:	b09d      	sub	sp, #116	; 0x74
 8005270:	4607      	mov	r7, r0
 8005272:	460d      	mov	r5, r1
 8005274:	4614      	mov	r4, r2
 8005276:	d50e      	bpl.n	8005296 <_svfiprintf_r+0x32>
 8005278:	690b      	ldr	r3, [r1, #16]
 800527a:	b963      	cbnz	r3, 8005296 <_svfiprintf_r+0x32>
 800527c:	2140      	movs	r1, #64	; 0x40
 800527e:	f000 f90f 	bl	80054a0 <_malloc_r>
 8005282:	6028      	str	r0, [r5, #0]
 8005284:	6128      	str	r0, [r5, #16]
 8005286:	b920      	cbnz	r0, 8005292 <_svfiprintf_r+0x2e>
 8005288:	230c      	movs	r3, #12
 800528a:	603b      	str	r3, [r7, #0]
 800528c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005290:	e0d0      	b.n	8005434 <_svfiprintf_r+0x1d0>
 8005292:	2340      	movs	r3, #64	; 0x40
 8005294:	616b      	str	r3, [r5, #20]
 8005296:	2300      	movs	r3, #0
 8005298:	9309      	str	r3, [sp, #36]	; 0x24
 800529a:	2320      	movs	r3, #32
 800529c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80052a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80052a4:	2330      	movs	r3, #48	; 0x30
 80052a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800544c <_svfiprintf_r+0x1e8>
 80052aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80052ae:	f04f 0901 	mov.w	r9, #1
 80052b2:	4623      	mov	r3, r4
 80052b4:	469a      	mov	sl, r3
 80052b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052ba:	b10a      	cbz	r2, 80052c0 <_svfiprintf_r+0x5c>
 80052bc:	2a25      	cmp	r2, #37	; 0x25
 80052be:	d1f9      	bne.n	80052b4 <_svfiprintf_r+0x50>
 80052c0:	ebba 0b04 	subs.w	fp, sl, r4
 80052c4:	d00b      	beq.n	80052de <_svfiprintf_r+0x7a>
 80052c6:	465b      	mov	r3, fp
 80052c8:	4622      	mov	r2, r4
 80052ca:	4629      	mov	r1, r5
 80052cc:	4638      	mov	r0, r7
 80052ce:	f7ff ff6f 	bl	80051b0 <__ssputs_r>
 80052d2:	3001      	adds	r0, #1
 80052d4:	f000 80a9 	beq.w	800542a <_svfiprintf_r+0x1c6>
 80052d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052da:	445a      	add	r2, fp
 80052dc:	9209      	str	r2, [sp, #36]	; 0x24
 80052de:	f89a 3000 	ldrb.w	r3, [sl]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f000 80a1 	beq.w	800542a <_svfiprintf_r+0x1c6>
 80052e8:	2300      	movs	r3, #0
 80052ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052f2:	f10a 0a01 	add.w	sl, sl, #1
 80052f6:	9304      	str	r3, [sp, #16]
 80052f8:	9307      	str	r3, [sp, #28]
 80052fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052fe:	931a      	str	r3, [sp, #104]	; 0x68
 8005300:	4654      	mov	r4, sl
 8005302:	2205      	movs	r2, #5
 8005304:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005308:	4850      	ldr	r0, [pc, #320]	; (800544c <_svfiprintf_r+0x1e8>)
 800530a:	f7fa ff81 	bl	8000210 <memchr>
 800530e:	9a04      	ldr	r2, [sp, #16]
 8005310:	b9d8      	cbnz	r0, 800534a <_svfiprintf_r+0xe6>
 8005312:	06d0      	lsls	r0, r2, #27
 8005314:	bf44      	itt	mi
 8005316:	2320      	movmi	r3, #32
 8005318:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800531c:	0711      	lsls	r1, r2, #28
 800531e:	bf44      	itt	mi
 8005320:	232b      	movmi	r3, #43	; 0x2b
 8005322:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005326:	f89a 3000 	ldrb.w	r3, [sl]
 800532a:	2b2a      	cmp	r3, #42	; 0x2a
 800532c:	d015      	beq.n	800535a <_svfiprintf_r+0xf6>
 800532e:	9a07      	ldr	r2, [sp, #28]
 8005330:	4654      	mov	r4, sl
 8005332:	2000      	movs	r0, #0
 8005334:	f04f 0c0a 	mov.w	ip, #10
 8005338:	4621      	mov	r1, r4
 800533a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800533e:	3b30      	subs	r3, #48	; 0x30
 8005340:	2b09      	cmp	r3, #9
 8005342:	d94d      	bls.n	80053e0 <_svfiprintf_r+0x17c>
 8005344:	b1b0      	cbz	r0, 8005374 <_svfiprintf_r+0x110>
 8005346:	9207      	str	r2, [sp, #28]
 8005348:	e014      	b.n	8005374 <_svfiprintf_r+0x110>
 800534a:	eba0 0308 	sub.w	r3, r0, r8
 800534e:	fa09 f303 	lsl.w	r3, r9, r3
 8005352:	4313      	orrs	r3, r2
 8005354:	9304      	str	r3, [sp, #16]
 8005356:	46a2      	mov	sl, r4
 8005358:	e7d2      	b.n	8005300 <_svfiprintf_r+0x9c>
 800535a:	9b03      	ldr	r3, [sp, #12]
 800535c:	1d19      	adds	r1, r3, #4
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	9103      	str	r1, [sp, #12]
 8005362:	2b00      	cmp	r3, #0
 8005364:	bfbb      	ittet	lt
 8005366:	425b      	neglt	r3, r3
 8005368:	f042 0202 	orrlt.w	r2, r2, #2
 800536c:	9307      	strge	r3, [sp, #28]
 800536e:	9307      	strlt	r3, [sp, #28]
 8005370:	bfb8      	it	lt
 8005372:	9204      	strlt	r2, [sp, #16]
 8005374:	7823      	ldrb	r3, [r4, #0]
 8005376:	2b2e      	cmp	r3, #46	; 0x2e
 8005378:	d10c      	bne.n	8005394 <_svfiprintf_r+0x130>
 800537a:	7863      	ldrb	r3, [r4, #1]
 800537c:	2b2a      	cmp	r3, #42	; 0x2a
 800537e:	d134      	bne.n	80053ea <_svfiprintf_r+0x186>
 8005380:	9b03      	ldr	r3, [sp, #12]
 8005382:	1d1a      	adds	r2, r3, #4
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	9203      	str	r2, [sp, #12]
 8005388:	2b00      	cmp	r3, #0
 800538a:	bfb8      	it	lt
 800538c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005390:	3402      	adds	r4, #2
 8005392:	9305      	str	r3, [sp, #20]
 8005394:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800545c <_svfiprintf_r+0x1f8>
 8005398:	7821      	ldrb	r1, [r4, #0]
 800539a:	2203      	movs	r2, #3
 800539c:	4650      	mov	r0, sl
 800539e:	f7fa ff37 	bl	8000210 <memchr>
 80053a2:	b138      	cbz	r0, 80053b4 <_svfiprintf_r+0x150>
 80053a4:	9b04      	ldr	r3, [sp, #16]
 80053a6:	eba0 000a 	sub.w	r0, r0, sl
 80053aa:	2240      	movs	r2, #64	; 0x40
 80053ac:	4082      	lsls	r2, r0
 80053ae:	4313      	orrs	r3, r2
 80053b0:	3401      	adds	r4, #1
 80053b2:	9304      	str	r3, [sp, #16]
 80053b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053b8:	4825      	ldr	r0, [pc, #148]	; (8005450 <_svfiprintf_r+0x1ec>)
 80053ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053be:	2206      	movs	r2, #6
 80053c0:	f7fa ff26 	bl	8000210 <memchr>
 80053c4:	2800      	cmp	r0, #0
 80053c6:	d038      	beq.n	800543a <_svfiprintf_r+0x1d6>
 80053c8:	4b22      	ldr	r3, [pc, #136]	; (8005454 <_svfiprintf_r+0x1f0>)
 80053ca:	bb1b      	cbnz	r3, 8005414 <_svfiprintf_r+0x1b0>
 80053cc:	9b03      	ldr	r3, [sp, #12]
 80053ce:	3307      	adds	r3, #7
 80053d0:	f023 0307 	bic.w	r3, r3, #7
 80053d4:	3308      	adds	r3, #8
 80053d6:	9303      	str	r3, [sp, #12]
 80053d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053da:	4433      	add	r3, r6
 80053dc:	9309      	str	r3, [sp, #36]	; 0x24
 80053de:	e768      	b.n	80052b2 <_svfiprintf_r+0x4e>
 80053e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80053e4:	460c      	mov	r4, r1
 80053e6:	2001      	movs	r0, #1
 80053e8:	e7a6      	b.n	8005338 <_svfiprintf_r+0xd4>
 80053ea:	2300      	movs	r3, #0
 80053ec:	3401      	adds	r4, #1
 80053ee:	9305      	str	r3, [sp, #20]
 80053f0:	4619      	mov	r1, r3
 80053f2:	f04f 0c0a 	mov.w	ip, #10
 80053f6:	4620      	mov	r0, r4
 80053f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053fc:	3a30      	subs	r2, #48	; 0x30
 80053fe:	2a09      	cmp	r2, #9
 8005400:	d903      	bls.n	800540a <_svfiprintf_r+0x1a6>
 8005402:	2b00      	cmp	r3, #0
 8005404:	d0c6      	beq.n	8005394 <_svfiprintf_r+0x130>
 8005406:	9105      	str	r1, [sp, #20]
 8005408:	e7c4      	b.n	8005394 <_svfiprintf_r+0x130>
 800540a:	fb0c 2101 	mla	r1, ip, r1, r2
 800540e:	4604      	mov	r4, r0
 8005410:	2301      	movs	r3, #1
 8005412:	e7f0      	b.n	80053f6 <_svfiprintf_r+0x192>
 8005414:	ab03      	add	r3, sp, #12
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	462a      	mov	r2, r5
 800541a:	4b0f      	ldr	r3, [pc, #60]	; (8005458 <_svfiprintf_r+0x1f4>)
 800541c:	a904      	add	r1, sp, #16
 800541e:	4638      	mov	r0, r7
 8005420:	f3af 8000 	nop.w
 8005424:	1c42      	adds	r2, r0, #1
 8005426:	4606      	mov	r6, r0
 8005428:	d1d6      	bne.n	80053d8 <_svfiprintf_r+0x174>
 800542a:	89ab      	ldrh	r3, [r5, #12]
 800542c:	065b      	lsls	r3, r3, #25
 800542e:	f53f af2d 	bmi.w	800528c <_svfiprintf_r+0x28>
 8005432:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005434:	b01d      	add	sp, #116	; 0x74
 8005436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800543a:	ab03      	add	r3, sp, #12
 800543c:	9300      	str	r3, [sp, #0]
 800543e:	462a      	mov	r2, r5
 8005440:	4b05      	ldr	r3, [pc, #20]	; (8005458 <_svfiprintf_r+0x1f4>)
 8005442:	a904      	add	r1, sp, #16
 8005444:	4638      	mov	r0, r7
 8005446:	f000 f919 	bl	800567c <_printf_i>
 800544a:	e7eb      	b.n	8005424 <_svfiprintf_r+0x1c0>
 800544c:	08005aa4 	.word	0x08005aa4
 8005450:	08005aae 	.word	0x08005aae
 8005454:	00000000 	.word	0x00000000
 8005458:	080051b1 	.word	0x080051b1
 800545c:	08005aaa 	.word	0x08005aaa

08005460 <sbrk_aligned>:
 8005460:	b570      	push	{r4, r5, r6, lr}
 8005462:	4e0e      	ldr	r6, [pc, #56]	; (800549c <sbrk_aligned+0x3c>)
 8005464:	460c      	mov	r4, r1
 8005466:	6831      	ldr	r1, [r6, #0]
 8005468:	4605      	mov	r5, r0
 800546a:	b911      	cbnz	r1, 8005472 <sbrk_aligned+0x12>
 800546c:	f000 fa7e 	bl	800596c <_sbrk_r>
 8005470:	6030      	str	r0, [r6, #0]
 8005472:	4621      	mov	r1, r4
 8005474:	4628      	mov	r0, r5
 8005476:	f000 fa79 	bl	800596c <_sbrk_r>
 800547a:	1c43      	adds	r3, r0, #1
 800547c:	d00a      	beq.n	8005494 <sbrk_aligned+0x34>
 800547e:	1cc4      	adds	r4, r0, #3
 8005480:	f024 0403 	bic.w	r4, r4, #3
 8005484:	42a0      	cmp	r0, r4
 8005486:	d007      	beq.n	8005498 <sbrk_aligned+0x38>
 8005488:	1a21      	subs	r1, r4, r0
 800548a:	4628      	mov	r0, r5
 800548c:	f000 fa6e 	bl	800596c <_sbrk_r>
 8005490:	3001      	adds	r0, #1
 8005492:	d101      	bne.n	8005498 <sbrk_aligned+0x38>
 8005494:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005498:	4620      	mov	r0, r4
 800549a:	bd70      	pop	{r4, r5, r6, pc}
 800549c:	2000039c 	.word	0x2000039c

080054a0 <_malloc_r>:
 80054a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054a4:	1ccd      	adds	r5, r1, #3
 80054a6:	f025 0503 	bic.w	r5, r5, #3
 80054aa:	3508      	adds	r5, #8
 80054ac:	2d0c      	cmp	r5, #12
 80054ae:	bf38      	it	cc
 80054b0:	250c      	movcc	r5, #12
 80054b2:	2d00      	cmp	r5, #0
 80054b4:	4607      	mov	r7, r0
 80054b6:	db01      	blt.n	80054bc <_malloc_r+0x1c>
 80054b8:	42a9      	cmp	r1, r5
 80054ba:	d905      	bls.n	80054c8 <_malloc_r+0x28>
 80054bc:	230c      	movs	r3, #12
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	2600      	movs	r6, #0
 80054c2:	4630      	mov	r0, r6
 80054c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800559c <_malloc_r+0xfc>
 80054cc:	f000 f9f8 	bl	80058c0 <__malloc_lock>
 80054d0:	f8d8 3000 	ldr.w	r3, [r8]
 80054d4:	461c      	mov	r4, r3
 80054d6:	bb5c      	cbnz	r4, 8005530 <_malloc_r+0x90>
 80054d8:	4629      	mov	r1, r5
 80054da:	4638      	mov	r0, r7
 80054dc:	f7ff ffc0 	bl	8005460 <sbrk_aligned>
 80054e0:	1c43      	adds	r3, r0, #1
 80054e2:	4604      	mov	r4, r0
 80054e4:	d155      	bne.n	8005592 <_malloc_r+0xf2>
 80054e6:	f8d8 4000 	ldr.w	r4, [r8]
 80054ea:	4626      	mov	r6, r4
 80054ec:	2e00      	cmp	r6, #0
 80054ee:	d145      	bne.n	800557c <_malloc_r+0xdc>
 80054f0:	2c00      	cmp	r4, #0
 80054f2:	d048      	beq.n	8005586 <_malloc_r+0xe6>
 80054f4:	6823      	ldr	r3, [r4, #0]
 80054f6:	4631      	mov	r1, r6
 80054f8:	4638      	mov	r0, r7
 80054fa:	eb04 0903 	add.w	r9, r4, r3
 80054fe:	f000 fa35 	bl	800596c <_sbrk_r>
 8005502:	4581      	cmp	r9, r0
 8005504:	d13f      	bne.n	8005586 <_malloc_r+0xe6>
 8005506:	6821      	ldr	r1, [r4, #0]
 8005508:	1a6d      	subs	r5, r5, r1
 800550a:	4629      	mov	r1, r5
 800550c:	4638      	mov	r0, r7
 800550e:	f7ff ffa7 	bl	8005460 <sbrk_aligned>
 8005512:	3001      	adds	r0, #1
 8005514:	d037      	beq.n	8005586 <_malloc_r+0xe6>
 8005516:	6823      	ldr	r3, [r4, #0]
 8005518:	442b      	add	r3, r5
 800551a:	6023      	str	r3, [r4, #0]
 800551c:	f8d8 3000 	ldr.w	r3, [r8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d038      	beq.n	8005596 <_malloc_r+0xf6>
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	42a2      	cmp	r2, r4
 8005528:	d12b      	bne.n	8005582 <_malloc_r+0xe2>
 800552a:	2200      	movs	r2, #0
 800552c:	605a      	str	r2, [r3, #4]
 800552e:	e00f      	b.n	8005550 <_malloc_r+0xb0>
 8005530:	6822      	ldr	r2, [r4, #0]
 8005532:	1b52      	subs	r2, r2, r5
 8005534:	d41f      	bmi.n	8005576 <_malloc_r+0xd6>
 8005536:	2a0b      	cmp	r2, #11
 8005538:	d917      	bls.n	800556a <_malloc_r+0xca>
 800553a:	1961      	adds	r1, r4, r5
 800553c:	42a3      	cmp	r3, r4
 800553e:	6025      	str	r5, [r4, #0]
 8005540:	bf18      	it	ne
 8005542:	6059      	strne	r1, [r3, #4]
 8005544:	6863      	ldr	r3, [r4, #4]
 8005546:	bf08      	it	eq
 8005548:	f8c8 1000 	streq.w	r1, [r8]
 800554c:	5162      	str	r2, [r4, r5]
 800554e:	604b      	str	r3, [r1, #4]
 8005550:	4638      	mov	r0, r7
 8005552:	f104 060b 	add.w	r6, r4, #11
 8005556:	f000 f9b9 	bl	80058cc <__malloc_unlock>
 800555a:	f026 0607 	bic.w	r6, r6, #7
 800555e:	1d23      	adds	r3, r4, #4
 8005560:	1af2      	subs	r2, r6, r3
 8005562:	d0ae      	beq.n	80054c2 <_malloc_r+0x22>
 8005564:	1b9b      	subs	r3, r3, r6
 8005566:	50a3      	str	r3, [r4, r2]
 8005568:	e7ab      	b.n	80054c2 <_malloc_r+0x22>
 800556a:	42a3      	cmp	r3, r4
 800556c:	6862      	ldr	r2, [r4, #4]
 800556e:	d1dd      	bne.n	800552c <_malloc_r+0x8c>
 8005570:	f8c8 2000 	str.w	r2, [r8]
 8005574:	e7ec      	b.n	8005550 <_malloc_r+0xb0>
 8005576:	4623      	mov	r3, r4
 8005578:	6864      	ldr	r4, [r4, #4]
 800557a:	e7ac      	b.n	80054d6 <_malloc_r+0x36>
 800557c:	4634      	mov	r4, r6
 800557e:	6876      	ldr	r6, [r6, #4]
 8005580:	e7b4      	b.n	80054ec <_malloc_r+0x4c>
 8005582:	4613      	mov	r3, r2
 8005584:	e7cc      	b.n	8005520 <_malloc_r+0x80>
 8005586:	230c      	movs	r3, #12
 8005588:	603b      	str	r3, [r7, #0]
 800558a:	4638      	mov	r0, r7
 800558c:	f000 f99e 	bl	80058cc <__malloc_unlock>
 8005590:	e797      	b.n	80054c2 <_malloc_r+0x22>
 8005592:	6025      	str	r5, [r4, #0]
 8005594:	e7dc      	b.n	8005550 <_malloc_r+0xb0>
 8005596:	605b      	str	r3, [r3, #4]
 8005598:	deff      	udf	#255	; 0xff
 800559a:	bf00      	nop
 800559c:	20000398 	.word	0x20000398

080055a0 <_printf_common>:
 80055a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055a4:	4616      	mov	r6, r2
 80055a6:	4699      	mov	r9, r3
 80055a8:	688a      	ldr	r2, [r1, #8]
 80055aa:	690b      	ldr	r3, [r1, #16]
 80055ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055b0:	4293      	cmp	r3, r2
 80055b2:	bfb8      	it	lt
 80055b4:	4613      	movlt	r3, r2
 80055b6:	6033      	str	r3, [r6, #0]
 80055b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055bc:	4607      	mov	r7, r0
 80055be:	460c      	mov	r4, r1
 80055c0:	b10a      	cbz	r2, 80055c6 <_printf_common+0x26>
 80055c2:	3301      	adds	r3, #1
 80055c4:	6033      	str	r3, [r6, #0]
 80055c6:	6823      	ldr	r3, [r4, #0]
 80055c8:	0699      	lsls	r1, r3, #26
 80055ca:	bf42      	ittt	mi
 80055cc:	6833      	ldrmi	r3, [r6, #0]
 80055ce:	3302      	addmi	r3, #2
 80055d0:	6033      	strmi	r3, [r6, #0]
 80055d2:	6825      	ldr	r5, [r4, #0]
 80055d4:	f015 0506 	ands.w	r5, r5, #6
 80055d8:	d106      	bne.n	80055e8 <_printf_common+0x48>
 80055da:	f104 0a19 	add.w	sl, r4, #25
 80055de:	68e3      	ldr	r3, [r4, #12]
 80055e0:	6832      	ldr	r2, [r6, #0]
 80055e2:	1a9b      	subs	r3, r3, r2
 80055e4:	42ab      	cmp	r3, r5
 80055e6:	dc26      	bgt.n	8005636 <_printf_common+0x96>
 80055e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055ec:	1e13      	subs	r3, r2, #0
 80055ee:	6822      	ldr	r2, [r4, #0]
 80055f0:	bf18      	it	ne
 80055f2:	2301      	movne	r3, #1
 80055f4:	0692      	lsls	r2, r2, #26
 80055f6:	d42b      	bmi.n	8005650 <_printf_common+0xb0>
 80055f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055fc:	4649      	mov	r1, r9
 80055fe:	4638      	mov	r0, r7
 8005600:	47c0      	blx	r8
 8005602:	3001      	adds	r0, #1
 8005604:	d01e      	beq.n	8005644 <_printf_common+0xa4>
 8005606:	6823      	ldr	r3, [r4, #0]
 8005608:	6922      	ldr	r2, [r4, #16]
 800560a:	f003 0306 	and.w	r3, r3, #6
 800560e:	2b04      	cmp	r3, #4
 8005610:	bf02      	ittt	eq
 8005612:	68e5      	ldreq	r5, [r4, #12]
 8005614:	6833      	ldreq	r3, [r6, #0]
 8005616:	1aed      	subeq	r5, r5, r3
 8005618:	68a3      	ldr	r3, [r4, #8]
 800561a:	bf0c      	ite	eq
 800561c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005620:	2500      	movne	r5, #0
 8005622:	4293      	cmp	r3, r2
 8005624:	bfc4      	itt	gt
 8005626:	1a9b      	subgt	r3, r3, r2
 8005628:	18ed      	addgt	r5, r5, r3
 800562a:	2600      	movs	r6, #0
 800562c:	341a      	adds	r4, #26
 800562e:	42b5      	cmp	r5, r6
 8005630:	d11a      	bne.n	8005668 <_printf_common+0xc8>
 8005632:	2000      	movs	r0, #0
 8005634:	e008      	b.n	8005648 <_printf_common+0xa8>
 8005636:	2301      	movs	r3, #1
 8005638:	4652      	mov	r2, sl
 800563a:	4649      	mov	r1, r9
 800563c:	4638      	mov	r0, r7
 800563e:	47c0      	blx	r8
 8005640:	3001      	adds	r0, #1
 8005642:	d103      	bne.n	800564c <_printf_common+0xac>
 8005644:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800564c:	3501      	adds	r5, #1
 800564e:	e7c6      	b.n	80055de <_printf_common+0x3e>
 8005650:	18e1      	adds	r1, r4, r3
 8005652:	1c5a      	adds	r2, r3, #1
 8005654:	2030      	movs	r0, #48	; 0x30
 8005656:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800565a:	4422      	add	r2, r4
 800565c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005660:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005664:	3302      	adds	r3, #2
 8005666:	e7c7      	b.n	80055f8 <_printf_common+0x58>
 8005668:	2301      	movs	r3, #1
 800566a:	4622      	mov	r2, r4
 800566c:	4649      	mov	r1, r9
 800566e:	4638      	mov	r0, r7
 8005670:	47c0      	blx	r8
 8005672:	3001      	adds	r0, #1
 8005674:	d0e6      	beq.n	8005644 <_printf_common+0xa4>
 8005676:	3601      	adds	r6, #1
 8005678:	e7d9      	b.n	800562e <_printf_common+0x8e>
	...

0800567c <_printf_i>:
 800567c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005680:	7e0f      	ldrb	r7, [r1, #24]
 8005682:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005684:	2f78      	cmp	r7, #120	; 0x78
 8005686:	4691      	mov	r9, r2
 8005688:	4680      	mov	r8, r0
 800568a:	460c      	mov	r4, r1
 800568c:	469a      	mov	sl, r3
 800568e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005692:	d807      	bhi.n	80056a4 <_printf_i+0x28>
 8005694:	2f62      	cmp	r7, #98	; 0x62
 8005696:	d80a      	bhi.n	80056ae <_printf_i+0x32>
 8005698:	2f00      	cmp	r7, #0
 800569a:	f000 80d4 	beq.w	8005846 <_printf_i+0x1ca>
 800569e:	2f58      	cmp	r7, #88	; 0x58
 80056a0:	f000 80c0 	beq.w	8005824 <_printf_i+0x1a8>
 80056a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056ac:	e03a      	b.n	8005724 <_printf_i+0xa8>
 80056ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056b2:	2b15      	cmp	r3, #21
 80056b4:	d8f6      	bhi.n	80056a4 <_printf_i+0x28>
 80056b6:	a101      	add	r1, pc, #4	; (adr r1, 80056bc <_printf_i+0x40>)
 80056b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056bc:	08005715 	.word	0x08005715
 80056c0:	08005729 	.word	0x08005729
 80056c4:	080056a5 	.word	0x080056a5
 80056c8:	080056a5 	.word	0x080056a5
 80056cc:	080056a5 	.word	0x080056a5
 80056d0:	080056a5 	.word	0x080056a5
 80056d4:	08005729 	.word	0x08005729
 80056d8:	080056a5 	.word	0x080056a5
 80056dc:	080056a5 	.word	0x080056a5
 80056e0:	080056a5 	.word	0x080056a5
 80056e4:	080056a5 	.word	0x080056a5
 80056e8:	0800582d 	.word	0x0800582d
 80056ec:	08005755 	.word	0x08005755
 80056f0:	080057e7 	.word	0x080057e7
 80056f4:	080056a5 	.word	0x080056a5
 80056f8:	080056a5 	.word	0x080056a5
 80056fc:	0800584f 	.word	0x0800584f
 8005700:	080056a5 	.word	0x080056a5
 8005704:	08005755 	.word	0x08005755
 8005708:	080056a5 	.word	0x080056a5
 800570c:	080056a5 	.word	0x080056a5
 8005710:	080057ef 	.word	0x080057ef
 8005714:	682b      	ldr	r3, [r5, #0]
 8005716:	1d1a      	adds	r2, r3, #4
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	602a      	str	r2, [r5, #0]
 800571c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005720:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005724:	2301      	movs	r3, #1
 8005726:	e09f      	b.n	8005868 <_printf_i+0x1ec>
 8005728:	6820      	ldr	r0, [r4, #0]
 800572a:	682b      	ldr	r3, [r5, #0]
 800572c:	0607      	lsls	r7, r0, #24
 800572e:	f103 0104 	add.w	r1, r3, #4
 8005732:	6029      	str	r1, [r5, #0]
 8005734:	d501      	bpl.n	800573a <_printf_i+0xbe>
 8005736:	681e      	ldr	r6, [r3, #0]
 8005738:	e003      	b.n	8005742 <_printf_i+0xc6>
 800573a:	0646      	lsls	r6, r0, #25
 800573c:	d5fb      	bpl.n	8005736 <_printf_i+0xba>
 800573e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005742:	2e00      	cmp	r6, #0
 8005744:	da03      	bge.n	800574e <_printf_i+0xd2>
 8005746:	232d      	movs	r3, #45	; 0x2d
 8005748:	4276      	negs	r6, r6
 800574a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800574e:	485a      	ldr	r0, [pc, #360]	; (80058b8 <_printf_i+0x23c>)
 8005750:	230a      	movs	r3, #10
 8005752:	e012      	b.n	800577a <_printf_i+0xfe>
 8005754:	682b      	ldr	r3, [r5, #0]
 8005756:	6820      	ldr	r0, [r4, #0]
 8005758:	1d19      	adds	r1, r3, #4
 800575a:	6029      	str	r1, [r5, #0]
 800575c:	0605      	lsls	r5, r0, #24
 800575e:	d501      	bpl.n	8005764 <_printf_i+0xe8>
 8005760:	681e      	ldr	r6, [r3, #0]
 8005762:	e002      	b.n	800576a <_printf_i+0xee>
 8005764:	0641      	lsls	r1, r0, #25
 8005766:	d5fb      	bpl.n	8005760 <_printf_i+0xe4>
 8005768:	881e      	ldrh	r6, [r3, #0]
 800576a:	4853      	ldr	r0, [pc, #332]	; (80058b8 <_printf_i+0x23c>)
 800576c:	2f6f      	cmp	r7, #111	; 0x6f
 800576e:	bf0c      	ite	eq
 8005770:	2308      	moveq	r3, #8
 8005772:	230a      	movne	r3, #10
 8005774:	2100      	movs	r1, #0
 8005776:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800577a:	6865      	ldr	r5, [r4, #4]
 800577c:	60a5      	str	r5, [r4, #8]
 800577e:	2d00      	cmp	r5, #0
 8005780:	bfa2      	ittt	ge
 8005782:	6821      	ldrge	r1, [r4, #0]
 8005784:	f021 0104 	bicge.w	r1, r1, #4
 8005788:	6021      	strge	r1, [r4, #0]
 800578a:	b90e      	cbnz	r6, 8005790 <_printf_i+0x114>
 800578c:	2d00      	cmp	r5, #0
 800578e:	d04b      	beq.n	8005828 <_printf_i+0x1ac>
 8005790:	4615      	mov	r5, r2
 8005792:	fbb6 f1f3 	udiv	r1, r6, r3
 8005796:	fb03 6711 	mls	r7, r3, r1, r6
 800579a:	5dc7      	ldrb	r7, [r0, r7]
 800579c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80057a0:	4637      	mov	r7, r6
 80057a2:	42bb      	cmp	r3, r7
 80057a4:	460e      	mov	r6, r1
 80057a6:	d9f4      	bls.n	8005792 <_printf_i+0x116>
 80057a8:	2b08      	cmp	r3, #8
 80057aa:	d10b      	bne.n	80057c4 <_printf_i+0x148>
 80057ac:	6823      	ldr	r3, [r4, #0]
 80057ae:	07de      	lsls	r6, r3, #31
 80057b0:	d508      	bpl.n	80057c4 <_printf_i+0x148>
 80057b2:	6923      	ldr	r3, [r4, #16]
 80057b4:	6861      	ldr	r1, [r4, #4]
 80057b6:	4299      	cmp	r1, r3
 80057b8:	bfde      	ittt	le
 80057ba:	2330      	movle	r3, #48	; 0x30
 80057bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057c0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80057c4:	1b52      	subs	r2, r2, r5
 80057c6:	6122      	str	r2, [r4, #16]
 80057c8:	f8cd a000 	str.w	sl, [sp]
 80057cc:	464b      	mov	r3, r9
 80057ce:	aa03      	add	r2, sp, #12
 80057d0:	4621      	mov	r1, r4
 80057d2:	4640      	mov	r0, r8
 80057d4:	f7ff fee4 	bl	80055a0 <_printf_common>
 80057d8:	3001      	adds	r0, #1
 80057da:	d14a      	bne.n	8005872 <_printf_i+0x1f6>
 80057dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057e0:	b004      	add	sp, #16
 80057e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057e6:	6823      	ldr	r3, [r4, #0]
 80057e8:	f043 0320 	orr.w	r3, r3, #32
 80057ec:	6023      	str	r3, [r4, #0]
 80057ee:	4833      	ldr	r0, [pc, #204]	; (80058bc <_printf_i+0x240>)
 80057f0:	2778      	movs	r7, #120	; 0x78
 80057f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80057f6:	6823      	ldr	r3, [r4, #0]
 80057f8:	6829      	ldr	r1, [r5, #0]
 80057fa:	061f      	lsls	r7, r3, #24
 80057fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8005800:	d402      	bmi.n	8005808 <_printf_i+0x18c>
 8005802:	065f      	lsls	r7, r3, #25
 8005804:	bf48      	it	mi
 8005806:	b2b6      	uxthmi	r6, r6
 8005808:	07df      	lsls	r7, r3, #31
 800580a:	bf48      	it	mi
 800580c:	f043 0320 	orrmi.w	r3, r3, #32
 8005810:	6029      	str	r1, [r5, #0]
 8005812:	bf48      	it	mi
 8005814:	6023      	strmi	r3, [r4, #0]
 8005816:	b91e      	cbnz	r6, 8005820 <_printf_i+0x1a4>
 8005818:	6823      	ldr	r3, [r4, #0]
 800581a:	f023 0320 	bic.w	r3, r3, #32
 800581e:	6023      	str	r3, [r4, #0]
 8005820:	2310      	movs	r3, #16
 8005822:	e7a7      	b.n	8005774 <_printf_i+0xf8>
 8005824:	4824      	ldr	r0, [pc, #144]	; (80058b8 <_printf_i+0x23c>)
 8005826:	e7e4      	b.n	80057f2 <_printf_i+0x176>
 8005828:	4615      	mov	r5, r2
 800582a:	e7bd      	b.n	80057a8 <_printf_i+0x12c>
 800582c:	682b      	ldr	r3, [r5, #0]
 800582e:	6826      	ldr	r6, [r4, #0]
 8005830:	6961      	ldr	r1, [r4, #20]
 8005832:	1d18      	adds	r0, r3, #4
 8005834:	6028      	str	r0, [r5, #0]
 8005836:	0635      	lsls	r5, r6, #24
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	d501      	bpl.n	8005840 <_printf_i+0x1c4>
 800583c:	6019      	str	r1, [r3, #0]
 800583e:	e002      	b.n	8005846 <_printf_i+0x1ca>
 8005840:	0670      	lsls	r0, r6, #25
 8005842:	d5fb      	bpl.n	800583c <_printf_i+0x1c0>
 8005844:	8019      	strh	r1, [r3, #0]
 8005846:	2300      	movs	r3, #0
 8005848:	6123      	str	r3, [r4, #16]
 800584a:	4615      	mov	r5, r2
 800584c:	e7bc      	b.n	80057c8 <_printf_i+0x14c>
 800584e:	682b      	ldr	r3, [r5, #0]
 8005850:	1d1a      	adds	r2, r3, #4
 8005852:	602a      	str	r2, [r5, #0]
 8005854:	681d      	ldr	r5, [r3, #0]
 8005856:	6862      	ldr	r2, [r4, #4]
 8005858:	2100      	movs	r1, #0
 800585a:	4628      	mov	r0, r5
 800585c:	f7fa fcd8 	bl	8000210 <memchr>
 8005860:	b108      	cbz	r0, 8005866 <_printf_i+0x1ea>
 8005862:	1b40      	subs	r0, r0, r5
 8005864:	6060      	str	r0, [r4, #4]
 8005866:	6863      	ldr	r3, [r4, #4]
 8005868:	6123      	str	r3, [r4, #16]
 800586a:	2300      	movs	r3, #0
 800586c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005870:	e7aa      	b.n	80057c8 <_printf_i+0x14c>
 8005872:	6923      	ldr	r3, [r4, #16]
 8005874:	462a      	mov	r2, r5
 8005876:	4649      	mov	r1, r9
 8005878:	4640      	mov	r0, r8
 800587a:	47d0      	blx	sl
 800587c:	3001      	adds	r0, #1
 800587e:	d0ad      	beq.n	80057dc <_printf_i+0x160>
 8005880:	6823      	ldr	r3, [r4, #0]
 8005882:	079b      	lsls	r3, r3, #30
 8005884:	d413      	bmi.n	80058ae <_printf_i+0x232>
 8005886:	68e0      	ldr	r0, [r4, #12]
 8005888:	9b03      	ldr	r3, [sp, #12]
 800588a:	4298      	cmp	r0, r3
 800588c:	bfb8      	it	lt
 800588e:	4618      	movlt	r0, r3
 8005890:	e7a6      	b.n	80057e0 <_printf_i+0x164>
 8005892:	2301      	movs	r3, #1
 8005894:	4632      	mov	r2, r6
 8005896:	4649      	mov	r1, r9
 8005898:	4640      	mov	r0, r8
 800589a:	47d0      	blx	sl
 800589c:	3001      	adds	r0, #1
 800589e:	d09d      	beq.n	80057dc <_printf_i+0x160>
 80058a0:	3501      	adds	r5, #1
 80058a2:	68e3      	ldr	r3, [r4, #12]
 80058a4:	9903      	ldr	r1, [sp, #12]
 80058a6:	1a5b      	subs	r3, r3, r1
 80058a8:	42ab      	cmp	r3, r5
 80058aa:	dcf2      	bgt.n	8005892 <_printf_i+0x216>
 80058ac:	e7eb      	b.n	8005886 <_printf_i+0x20a>
 80058ae:	2500      	movs	r5, #0
 80058b0:	f104 0619 	add.w	r6, r4, #25
 80058b4:	e7f5      	b.n	80058a2 <_printf_i+0x226>
 80058b6:	bf00      	nop
 80058b8:	08005ab5 	.word	0x08005ab5
 80058bc:	08005ac6 	.word	0x08005ac6

080058c0 <__malloc_lock>:
 80058c0:	4801      	ldr	r0, [pc, #4]	; (80058c8 <__malloc_lock+0x8>)
 80058c2:	f7ff bc65 	b.w	8005190 <__retarget_lock_acquire_recursive>
 80058c6:	bf00      	nop
 80058c8:	20000394 	.word	0x20000394

080058cc <__malloc_unlock>:
 80058cc:	4801      	ldr	r0, [pc, #4]	; (80058d4 <__malloc_unlock+0x8>)
 80058ce:	f7ff bc60 	b.w	8005192 <__retarget_lock_release_recursive>
 80058d2:	bf00      	nop
 80058d4:	20000394 	.word	0x20000394

080058d8 <_realloc_r>:
 80058d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058dc:	4680      	mov	r8, r0
 80058de:	4614      	mov	r4, r2
 80058e0:	460e      	mov	r6, r1
 80058e2:	b921      	cbnz	r1, 80058ee <_realloc_r+0x16>
 80058e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058e8:	4611      	mov	r1, r2
 80058ea:	f7ff bdd9 	b.w	80054a0 <_malloc_r>
 80058ee:	b92a      	cbnz	r2, 80058fc <_realloc_r+0x24>
 80058f0:	f000 f84c 	bl	800598c <_free_r>
 80058f4:	4625      	mov	r5, r4
 80058f6:	4628      	mov	r0, r5
 80058f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058fc:	f000 f892 	bl	8005a24 <_malloc_usable_size_r>
 8005900:	4284      	cmp	r4, r0
 8005902:	4607      	mov	r7, r0
 8005904:	d802      	bhi.n	800590c <_realloc_r+0x34>
 8005906:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800590a:	d812      	bhi.n	8005932 <_realloc_r+0x5a>
 800590c:	4621      	mov	r1, r4
 800590e:	4640      	mov	r0, r8
 8005910:	f7ff fdc6 	bl	80054a0 <_malloc_r>
 8005914:	4605      	mov	r5, r0
 8005916:	2800      	cmp	r0, #0
 8005918:	d0ed      	beq.n	80058f6 <_realloc_r+0x1e>
 800591a:	42bc      	cmp	r4, r7
 800591c:	4622      	mov	r2, r4
 800591e:	4631      	mov	r1, r6
 8005920:	bf28      	it	cs
 8005922:	463a      	movcs	r2, r7
 8005924:	f7ff fc36 	bl	8005194 <memcpy>
 8005928:	4631      	mov	r1, r6
 800592a:	4640      	mov	r0, r8
 800592c:	f000 f82e 	bl	800598c <_free_r>
 8005930:	e7e1      	b.n	80058f6 <_realloc_r+0x1e>
 8005932:	4635      	mov	r5, r6
 8005934:	e7df      	b.n	80058f6 <_realloc_r+0x1e>

08005936 <memmove>:
 8005936:	4288      	cmp	r0, r1
 8005938:	b510      	push	{r4, lr}
 800593a:	eb01 0402 	add.w	r4, r1, r2
 800593e:	d902      	bls.n	8005946 <memmove+0x10>
 8005940:	4284      	cmp	r4, r0
 8005942:	4623      	mov	r3, r4
 8005944:	d807      	bhi.n	8005956 <memmove+0x20>
 8005946:	1e43      	subs	r3, r0, #1
 8005948:	42a1      	cmp	r1, r4
 800594a:	d008      	beq.n	800595e <memmove+0x28>
 800594c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005950:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005954:	e7f8      	b.n	8005948 <memmove+0x12>
 8005956:	4402      	add	r2, r0
 8005958:	4601      	mov	r1, r0
 800595a:	428a      	cmp	r2, r1
 800595c:	d100      	bne.n	8005960 <memmove+0x2a>
 800595e:	bd10      	pop	{r4, pc}
 8005960:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005964:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005968:	e7f7      	b.n	800595a <memmove+0x24>
	...

0800596c <_sbrk_r>:
 800596c:	b538      	push	{r3, r4, r5, lr}
 800596e:	4d06      	ldr	r5, [pc, #24]	; (8005988 <_sbrk_r+0x1c>)
 8005970:	2300      	movs	r3, #0
 8005972:	4604      	mov	r4, r0
 8005974:	4608      	mov	r0, r1
 8005976:	602b      	str	r3, [r5, #0]
 8005978:	f7fc f9e6 	bl	8001d48 <_sbrk>
 800597c:	1c43      	adds	r3, r0, #1
 800597e:	d102      	bne.n	8005986 <_sbrk_r+0x1a>
 8005980:	682b      	ldr	r3, [r5, #0]
 8005982:	b103      	cbz	r3, 8005986 <_sbrk_r+0x1a>
 8005984:	6023      	str	r3, [r4, #0]
 8005986:	bd38      	pop	{r3, r4, r5, pc}
 8005988:	200003a0 	.word	0x200003a0

0800598c <_free_r>:
 800598c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800598e:	2900      	cmp	r1, #0
 8005990:	d044      	beq.n	8005a1c <_free_r+0x90>
 8005992:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005996:	9001      	str	r0, [sp, #4]
 8005998:	2b00      	cmp	r3, #0
 800599a:	f1a1 0404 	sub.w	r4, r1, #4
 800599e:	bfb8      	it	lt
 80059a0:	18e4      	addlt	r4, r4, r3
 80059a2:	f7ff ff8d 	bl	80058c0 <__malloc_lock>
 80059a6:	4a1e      	ldr	r2, [pc, #120]	; (8005a20 <_free_r+0x94>)
 80059a8:	9801      	ldr	r0, [sp, #4]
 80059aa:	6813      	ldr	r3, [r2, #0]
 80059ac:	b933      	cbnz	r3, 80059bc <_free_r+0x30>
 80059ae:	6063      	str	r3, [r4, #4]
 80059b0:	6014      	str	r4, [r2, #0]
 80059b2:	b003      	add	sp, #12
 80059b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059b8:	f7ff bf88 	b.w	80058cc <__malloc_unlock>
 80059bc:	42a3      	cmp	r3, r4
 80059be:	d908      	bls.n	80059d2 <_free_r+0x46>
 80059c0:	6825      	ldr	r5, [r4, #0]
 80059c2:	1961      	adds	r1, r4, r5
 80059c4:	428b      	cmp	r3, r1
 80059c6:	bf01      	itttt	eq
 80059c8:	6819      	ldreq	r1, [r3, #0]
 80059ca:	685b      	ldreq	r3, [r3, #4]
 80059cc:	1949      	addeq	r1, r1, r5
 80059ce:	6021      	streq	r1, [r4, #0]
 80059d0:	e7ed      	b.n	80059ae <_free_r+0x22>
 80059d2:	461a      	mov	r2, r3
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	b10b      	cbz	r3, 80059dc <_free_r+0x50>
 80059d8:	42a3      	cmp	r3, r4
 80059da:	d9fa      	bls.n	80059d2 <_free_r+0x46>
 80059dc:	6811      	ldr	r1, [r2, #0]
 80059de:	1855      	adds	r5, r2, r1
 80059e0:	42a5      	cmp	r5, r4
 80059e2:	d10b      	bne.n	80059fc <_free_r+0x70>
 80059e4:	6824      	ldr	r4, [r4, #0]
 80059e6:	4421      	add	r1, r4
 80059e8:	1854      	adds	r4, r2, r1
 80059ea:	42a3      	cmp	r3, r4
 80059ec:	6011      	str	r1, [r2, #0]
 80059ee:	d1e0      	bne.n	80059b2 <_free_r+0x26>
 80059f0:	681c      	ldr	r4, [r3, #0]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	6053      	str	r3, [r2, #4]
 80059f6:	440c      	add	r4, r1
 80059f8:	6014      	str	r4, [r2, #0]
 80059fa:	e7da      	b.n	80059b2 <_free_r+0x26>
 80059fc:	d902      	bls.n	8005a04 <_free_r+0x78>
 80059fe:	230c      	movs	r3, #12
 8005a00:	6003      	str	r3, [r0, #0]
 8005a02:	e7d6      	b.n	80059b2 <_free_r+0x26>
 8005a04:	6825      	ldr	r5, [r4, #0]
 8005a06:	1961      	adds	r1, r4, r5
 8005a08:	428b      	cmp	r3, r1
 8005a0a:	bf04      	itt	eq
 8005a0c:	6819      	ldreq	r1, [r3, #0]
 8005a0e:	685b      	ldreq	r3, [r3, #4]
 8005a10:	6063      	str	r3, [r4, #4]
 8005a12:	bf04      	itt	eq
 8005a14:	1949      	addeq	r1, r1, r5
 8005a16:	6021      	streq	r1, [r4, #0]
 8005a18:	6054      	str	r4, [r2, #4]
 8005a1a:	e7ca      	b.n	80059b2 <_free_r+0x26>
 8005a1c:	b003      	add	sp, #12
 8005a1e:	bd30      	pop	{r4, r5, pc}
 8005a20:	20000398 	.word	0x20000398

08005a24 <_malloc_usable_size_r>:
 8005a24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a28:	1f18      	subs	r0, r3, #4
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	bfbc      	itt	lt
 8005a2e:	580b      	ldrlt	r3, [r1, r0]
 8005a30:	18c0      	addlt	r0, r0, r3
 8005a32:	4770      	bx	lr

08005a34 <_init>:
 8005a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a36:	bf00      	nop
 8005a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a3a:	bc08      	pop	{r3}
 8005a3c:	469e      	mov	lr, r3
 8005a3e:	4770      	bx	lr

08005a40 <_fini>:
 8005a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a42:	bf00      	nop
 8005a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a46:	bc08      	pop	{r3}
 8005a48:	469e      	mov	lr, r3
 8005a4a:	4770      	bx	lr
