
DART_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056ac  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  0800576c  0800576c  0001576c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005878  08005878  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08005878  08005878  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005878  08005878  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005878  08005878  00015878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800587c  0800587c  0001587c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000820  2000005c  080058dc  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000087c  080058dc  0002087c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010244  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000255d  00000000  00000000  0003030b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e70  00000000  00000000  00032868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b51  00000000  00000000  000336d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002701  00000000  00000000  00034229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000116dd  00000000  00000000  0003692a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094761  00000000  00000000  00048007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000388c  00000000  00000000  000dc768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000dfff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005754 	.word	0x08005754

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08005754 	.word	0x08005754

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <FEB_Fan_Init>:
	FEB_Fan_All_Speed_Set(counter);
}

// ********************************** Initialize **********************************

void FEB_Fan_Init(){
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	//FEB_Fan_PWM_Init();
	//FEB_Fan_All_Speed_Set(255 * 0);
}
 8000238:	46c0      	nop			; (mov r8, r8)
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
	...

08000240 <FEB_Get_F3_Speed>:
	if (HAL_TIM_Base_Stop_IT(&htim3) != HAL_OK){Error_Handler();}

	return measured_speed;
}

uint16_t FEB_Get_F3_Speed(){
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0

	sprintf(gu8_MSGGG, "Starting 3");
 8000246:	4a1d      	ldr	r2, [pc, #116]	; (80002bc <FEB_Get_F3_Speed+0x7c>)
 8000248:	4b1d      	ldr	r3, [pc, #116]	; (80002c0 <FEB_Get_F3_Speed+0x80>)
 800024a:	0011      	movs	r1, r2
 800024c:	0018      	movs	r0, r3
 800024e:	f004 fddd 	bl	8004e0c <siprintf>
	HAL_UART_Transmit(&huart2, gu8_MSGGG, sizeof(gu8_MSGGG), 100);
 8000252:	491b      	ldr	r1, [pc, #108]	; (80002c0 <FEB_Get_F3_Speed+0x80>)
 8000254:	481b      	ldr	r0, [pc, #108]	; (80002c4 <FEB_Get_F3_Speed+0x84>)
 8000256:	2364      	movs	r3, #100	; 0x64
 8000258:	2240      	movs	r2, #64	; 0x40
 800025a:	f003 fe87 	bl	8003f6c <HAL_UART_Transmit>

	if (HAL_TIM_Base_Start_IT(&htim14) != HAL_OK){FEB_Error_Handler();}
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <FEB_Get_F3_Speed+0x88>)
 8000260:	0018      	movs	r0, r3
 8000262:	f002 faf1 	bl	8002848 <HAL_TIM_Base_Start_IT>
 8000266:	1e03      	subs	r3, r0, #0
 8000268:	d001      	beq.n	800026e <FEB_Get_F3_Speed+0x2e>
 800026a:	f000 f875 	bl	8000358 <FEB_Error_Handler>

	if (HAL_TIM_IC_Start_IT(&htim14, TIM_CHANNEL_1) != HAL_OK){FEB_Error_Handler();}
 800026e:	4b16      	ldr	r3, [pc, #88]	; (80002c8 <FEB_Get_F3_Speed+0x88>)
 8000270:	2100      	movs	r1, #0
 8000272:	0018      	movs	r0, r3
 8000274:	f002 fc12 	bl	8002a9c <HAL_TIM_IC_Start_IT>
 8000278:	1e03      	subs	r3, r0, #0
 800027a:	d001      	beq.n	8000280 <FEB_Get_F3_Speed+0x40>
 800027c:	f000 f86c 	bl	8000358 <FEB_Error_Handler>

//	FEB_Current_Fan_Speed = 0;
	HAL_Delay(100);
 8000280:	2064      	movs	r0, #100	; 0x64
 8000282:	f001 f979 	bl	8001578 <HAL_Delay>
	uint16_t measured_speed = 0;
 8000286:	1dbb      	adds	r3, r7, #6
 8000288:	2200      	movs	r2, #0
 800028a:	801a      	strh	r2, [r3, #0]

	if (HAL_TIM_IC_Stop_IT(&htim14, TIM_CHANNEL_1) != HAL_OK){FEB_Error_Handler();}
 800028c:	4b0e      	ldr	r3, [pc, #56]	; (80002c8 <FEB_Get_F3_Speed+0x88>)
 800028e:	2100      	movs	r1, #0
 8000290:	0018      	movs	r0, r3
 8000292:	f002 fd0b 	bl	8002cac <HAL_TIM_IC_Stop_IT>
 8000296:	1e03      	subs	r3, r0, #0
 8000298:	d001      	beq.n	800029e <FEB_Get_F3_Speed+0x5e>
 800029a:	f000 f85d 	bl	8000358 <FEB_Error_Handler>

	if (HAL_TIM_Base_Stop_IT(&htim14) != HAL_OK){FEB_Error_Handler();}
 800029e:	4b0a      	ldr	r3, [pc, #40]	; (80002c8 <FEB_Get_F3_Speed+0x88>)
 80002a0:	0018      	movs	r0, r3
 80002a2:	f002 fb1d 	bl	80028e0 <HAL_TIM_Base_Stop_IT>
 80002a6:	1e03      	subs	r3, r0, #0
 80002a8:	d001      	beq.n	80002ae <FEB_Get_F3_Speed+0x6e>
 80002aa:	f000 f855 	bl	8000358 <FEB_Error_Handler>

	return measured_speed;
 80002ae:	1dbb      	adds	r3, r7, #6
 80002b0:	881b      	ldrh	r3, [r3, #0]
}
 80002b2:	0018      	movs	r0, r3
 80002b4:	46bd      	mov	sp, r7
 80002b6:	b002      	add	sp, #8
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)
 80002bc:	08005784 	.word	0x08005784
 80002c0:	20000078 	.word	0x20000078
 80002c4:	200006a4 	.word	0x200006a4
 80002c8:	2000065c 	.word	0x2000065c

080002cc <FEB_Get_F5_Speed>:
	if (HAL_TIM_Base_Stop_IT(&htim2) != HAL_OK){Error_Handler();}

	return measured_speed;
}

uint16_t FEB_Get_F5_Speed(){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0

	sprintf(gu8_MSGGG, "Starting 5");
 80002d2:	4a1d      	ldr	r2, [pc, #116]	; (8000348 <FEB_Get_F5_Speed+0x7c>)
 80002d4:	4b1d      	ldr	r3, [pc, #116]	; (800034c <FEB_Get_F5_Speed+0x80>)
 80002d6:	0011      	movs	r1, r2
 80002d8:	0018      	movs	r0, r3
 80002da:	f004 fd97 	bl	8004e0c <siprintf>
	HAL_UART_Transmit(&huart2, gu8_MSGGG, sizeof(gu8_MSGGG), 100);
 80002de:	491b      	ldr	r1, [pc, #108]	; (800034c <FEB_Get_F5_Speed+0x80>)
 80002e0:	481b      	ldr	r0, [pc, #108]	; (8000350 <FEB_Get_F5_Speed+0x84>)
 80002e2:	2364      	movs	r3, #100	; 0x64
 80002e4:	2240      	movs	r2, #64	; 0x40
 80002e6:	f003 fe41 	bl	8003f6c <HAL_UART_Transmit>

	if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK){FEB_Error_Handler();}
 80002ea:	4b1a      	ldr	r3, [pc, #104]	; (8000354 <FEB_Get_F5_Speed+0x88>)
 80002ec:	0018      	movs	r0, r3
 80002ee:	f002 faab 	bl	8002848 <HAL_TIM_Base_Start_IT>
 80002f2:	1e03      	subs	r3, r0, #0
 80002f4:	d001      	beq.n	80002fa <FEB_Get_F5_Speed+0x2e>
 80002f6:	f000 f82f 	bl	8000358 <FEB_Error_Handler>
	if (HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1) != HAL_OK){FEB_Error_Handler();}
 80002fa:	4b16      	ldr	r3, [pc, #88]	; (8000354 <FEB_Get_F5_Speed+0x88>)
 80002fc:	2100      	movs	r1, #0
 80002fe:	0018      	movs	r0, r3
 8000300:	f002 fbcc 	bl	8002a9c <HAL_TIM_IC_Start_IT>
 8000304:	1e03      	subs	r3, r0, #0
 8000306:	d001      	beq.n	800030c <FEB_Get_F5_Speed+0x40>
 8000308:	f000 f826 	bl	8000358 <FEB_Error_Handler>

//	FEB_Current_Fan_Speed = 0;
	HAL_Delay(100);
 800030c:	2064      	movs	r0, #100	; 0x64
 800030e:	f001 f933 	bl	8001578 <HAL_Delay>
	uint8_t measured_speed = 0;
 8000312:	1dfb      	adds	r3, r7, #7
 8000314:	2200      	movs	r2, #0
 8000316:	701a      	strb	r2, [r3, #0]

	if (HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1) != HAL_OK){FEB_Error_Handler();}
 8000318:	4b0e      	ldr	r3, [pc, #56]	; (8000354 <FEB_Get_F5_Speed+0x88>)
 800031a:	2100      	movs	r1, #0
 800031c:	0018      	movs	r0, r3
 800031e:	f002 fcc5 	bl	8002cac <HAL_TIM_IC_Stop_IT>
 8000322:	1e03      	subs	r3, r0, #0
 8000324:	d001      	beq.n	800032a <FEB_Get_F5_Speed+0x5e>
 8000326:	f000 f817 	bl	8000358 <FEB_Error_Handler>
	if (HAL_TIM_Base_Stop_IT(&htim2) != HAL_OK){FEB_Error_Handler();}
 800032a:	4b0a      	ldr	r3, [pc, #40]	; (8000354 <FEB_Get_F5_Speed+0x88>)
 800032c:	0018      	movs	r0, r3
 800032e:	f002 fad7 	bl	80028e0 <HAL_TIM_Base_Stop_IT>
 8000332:	1e03      	subs	r3, r0, #0
 8000334:	d001      	beq.n	800033a <FEB_Get_F5_Speed+0x6e>
 8000336:	f000 f80f 	bl	8000358 <FEB_Error_Handler>

	return measured_speed;
 800033a:	1dfb      	adds	r3, r7, #7
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	b29b      	uxth	r3, r3
}
 8000340:	0018      	movs	r0, r3
 8000342:	46bd      	mov	sp, r7
 8000344:	b002      	add	sp, #8
 8000346:	bd80      	pop	{r7, pc}
 8000348:	0800579c 	.word	0x0800579c
 800034c:	20000078 	.word	0x20000078
 8000350:	200006a4 	.word	0x200006a4
 8000354:	200005cc 	.word	0x200005cc

08000358 <FEB_Error_Handler>:

char uart_tx_buffer[1024];

uint32_t tach_val;

void FEB_Error_Handler(){
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
	while(1){
		sprintf(gu8_MSGGGG, "HAL ERROR\n\r");
 800035c:	4a06      	ldr	r2, [pc, #24]	; (8000378 <FEB_Error_Handler+0x20>)
 800035e:	4b07      	ldr	r3, [pc, #28]	; (800037c <FEB_Error_Handler+0x24>)
 8000360:	0011      	movs	r1, r2
 8000362:	0018      	movs	r0, r3
 8000364:	f004 fd52 	bl	8004e0c <siprintf>
		HAL_UART_Transmit(&huart2, gu8_MSGGGG, sizeof(gu8_MSGGGG), 100);
 8000368:	4904      	ldr	r1, [pc, #16]	; (800037c <FEB_Error_Handler+0x24>)
 800036a:	4805      	ldr	r0, [pc, #20]	; (8000380 <FEB_Error_Handler+0x28>)
 800036c:	2364      	movs	r3, #100	; 0x64
 800036e:	2240      	movs	r2, #64	; 0x40
 8000370:	f003 fdfc 	bl	8003f6c <HAL_UART_Transmit>
		sprintf(gu8_MSGGGG, "HAL ERROR\n\r");
 8000374:	e7f2      	b.n	800035c <FEB_Error_Handler+0x4>
 8000376:	46c0      	nop			; (mov r8, r8)
 8000378:	080057a8 	.word	0x080057a8
 800037c:	200000b8 	.word	0x200000b8
 8000380:	200006a4 	.word	0x200006a4

08000384 <FEB_Init>:
	}
}

void FEB_Init(void){
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	sprintf(gu8_MSGGGG, "Init");
 8000388:	4a08      	ldr	r2, [pc, #32]	; (80003ac <FEB_Init+0x28>)
 800038a:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <FEB_Init+0x2c>)
 800038c:	0011      	movs	r1, r2
 800038e:	0018      	movs	r0, r3
 8000390:	f004 fd3c 	bl	8004e0c <siprintf>
	HAL_UART_Transmit(&huart2, gu8_MSGGGG, sizeof(gu8_MSGGGG), 10);
 8000394:	4906      	ldr	r1, [pc, #24]	; (80003b0 <FEB_Init+0x2c>)
 8000396:	4807      	ldr	r0, [pc, #28]	; (80003b4 <FEB_Init+0x30>)
 8000398:	230a      	movs	r3, #10
 800039a:	2240      	movs	r2, #64	; 0x40
 800039c:	f003 fde6 	bl	8003f6c <HAL_UART_Transmit>
//	FEB_CAN_Init();
	FEB_Fan_Init();
 80003a0:	f7ff ff48 	bl	8000234 <FEB_Fan_Init>
}
 80003a4:	46c0      	nop			; (mov r8, r8)
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	46c0      	nop			; (mov r8, r8)
 80003ac:	080057b4 	.word	0x080057b4
 80003b0:	200000b8 	.word	0x200000b8
 80003b4:	200006a4 	.word	0x200006a4

080003b8 <FEB_Main_Loop>:


void FEB_Main_Loop(void){
 80003b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003ba:	b085      	sub	sp, #20
 80003bc:	af04      	add	r7, sp, #16
	sprintf(gu8_MSGGGG, "loop4");
 80003be:	4a23      	ldr	r2, [pc, #140]	; (800044c <FEB_Main_Loop+0x94>)
 80003c0:	4b23      	ldr	r3, [pc, #140]	; (8000450 <FEB_Main_Loop+0x98>)
 80003c2:	0011      	movs	r1, r2
 80003c4:	0018      	movs	r0, r3
 80003c6:	f004 fd21 	bl	8004e0c <siprintf>
	  HAL_UART_Transmit(&huart2, gu8_MSGGGG, sizeof(gu8_MSGGGG), 100);
 80003ca:	4921      	ldr	r1, [pc, #132]	; (8000450 <FEB_Main_Loop+0x98>)
 80003cc:	4821      	ldr	r0, [pc, #132]	; (8000454 <FEB_Main_Loop+0x9c>)
 80003ce:	2364      	movs	r3, #100	; 0x64
 80003d0:	2240      	movs	r2, #64	; 0x40
 80003d2:	f003 fdcb 	bl	8003f6c <HAL_UART_Transmit>

//		f1 = FEB_Get_F1_Speed();
//		f2 = FEB_Get_F2_Speed();
		f3 = FEB_Get_F3_Speed();
 80003d6:	f7ff ff33 	bl	8000240 <FEB_Get_F3_Speed>
 80003da:	0003      	movs	r3, r0
 80003dc:	001a      	movs	r2, r3
 80003de:	4b1e      	ldr	r3, [pc, #120]	; (8000458 <FEB_Main_Loop+0xa0>)
 80003e0:	801a      	strh	r2, [r3, #0]
		HAL_Delay(3000);
 80003e2:	4b1e      	ldr	r3, [pc, #120]	; (800045c <FEB_Main_Loop+0xa4>)
 80003e4:	0018      	movs	r0, r3
 80003e6:	f001 f8c7 	bl	8001578 <HAL_Delay>
//		f4 = FEB_Get_F4_Speed();
		f5 = FEB_Get_F5_Speed();
 80003ea:	f7ff ff6f 	bl	80002cc <FEB_Get_F5_Speed>
 80003ee:	0003      	movs	r3, r0
 80003f0:	001a      	movs	r2, r3
 80003f2:	4b1b      	ldr	r3, [pc, #108]	; (8000460 <FEB_Main_Loop+0xa8>)
 80003f4:	801a      	strh	r2, [r3, #0]
		HAL_Delay(3000);
 80003f6:	4b19      	ldr	r3, [pc, #100]	; (800045c <FEB_Main_Loop+0xa4>)
 80003f8:	0018      	movs	r0, r3
 80003fa:	f001 f8bd 	bl	8001578 <HAL_Delay>

		sprintf(uart_tx_buffer, "%u %u %u %u %u\n", (unsigned int)f1, (unsigned int)f2, (unsigned int)f3, (unsigned int)f4, (unsigned int)f5);
 80003fe:	4b19      	ldr	r3, [pc, #100]	; (8000464 <FEB_Main_Loop+0xac>)
 8000400:	881b      	ldrh	r3, [r3, #0]
 8000402:	001d      	movs	r5, r3
 8000404:	4b18      	ldr	r3, [pc, #96]	; (8000468 <FEB_Main_Loop+0xb0>)
 8000406:	881b      	ldrh	r3, [r3, #0]
 8000408:	001e      	movs	r6, r3
 800040a:	4b13      	ldr	r3, [pc, #76]	; (8000458 <FEB_Main_Loop+0xa0>)
 800040c:	881b      	ldrh	r3, [r3, #0]
 800040e:	001a      	movs	r2, r3
 8000410:	4b16      	ldr	r3, [pc, #88]	; (800046c <FEB_Main_Loop+0xb4>)
 8000412:	881b      	ldrh	r3, [r3, #0]
 8000414:	001c      	movs	r4, r3
 8000416:	4b12      	ldr	r3, [pc, #72]	; (8000460 <FEB_Main_Loop+0xa8>)
 8000418:	881b      	ldrh	r3, [r3, #0]
 800041a:	4915      	ldr	r1, [pc, #84]	; (8000470 <FEB_Main_Loop+0xb8>)
 800041c:	4815      	ldr	r0, [pc, #84]	; (8000474 <FEB_Main_Loop+0xbc>)
 800041e:	9302      	str	r3, [sp, #8]
 8000420:	9401      	str	r4, [sp, #4]
 8000422:	9200      	str	r2, [sp, #0]
 8000424:	0033      	movs	r3, r6
 8000426:	002a      	movs	r2, r5
 8000428:	f004 fcf0 	bl	8004e0c <siprintf>
		HAL_UART_Transmit(&huart2, (uint16_t*)uart_tx_buffer, sizeof(uart_tx_buffer), 100);
 800042c:	2380      	movs	r3, #128	; 0x80
 800042e:	00da      	lsls	r2, r3, #3
 8000430:	4910      	ldr	r1, [pc, #64]	; (8000474 <FEB_Main_Loop+0xbc>)
 8000432:	4808      	ldr	r0, [pc, #32]	; (8000454 <FEB_Main_Loop+0x9c>)
 8000434:	2364      	movs	r3, #100	; 0x64
 8000436:	f003 fd99 	bl	8003f6c <HAL_UART_Transmit>

		HAL_Delay(1000);
 800043a:	23fa      	movs	r3, #250	; 0xfa
 800043c:	009b      	lsls	r3, r3, #2
 800043e:	0018      	movs	r0, r3
 8000440:	f001 f89a 	bl	8001578 <HAL_Delay>
//			  Error_Handler();
//			}
//
//			//end fan 5 reading

}
 8000444:	46c0      	nop			; (mov r8, r8)
 8000446:	46bd      	mov	sp, r7
 8000448:	b001      	add	sp, #4
 800044a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800044c:	080057bc 	.word	0x080057bc
 8000450:	200000b8 	.word	0x200000b8
 8000454:	200006a4 	.word	0x200006a4
 8000458:	200000fc 	.word	0x200000fc
 800045c:	00000bb8 	.word	0x00000bb8
 8000460:	20000100 	.word	0x20000100
 8000464:	200000f8 	.word	0x200000f8
 8000468:	200000fa 	.word	0x200000fa
 800046c:	200000fe 	.word	0x200000fe
 8000470:	080057c4 	.word	0x080057c4
 8000474:	20000104 	.word	0x20000104

08000478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800047c:	f001 f818 	bl	80014b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000480:	f000 f813 	bl	80004aa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000484:	f000 fb10 	bl	8000aa8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000488:	f000 f88c 	bl	80005a4 <MX_TIM1_Init>
  MX_TIM2_Init();
 800048c:	f000 f954 	bl	8000738 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000490:	f000 fada 	bl	8000a48 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000494:	f000 f9d4 	bl	8000840 <MX_TIM3_Init>
  MX_CAN_Init();
 8000498:	f000 f84e 	bl	8000538 <MX_CAN_Init>
  MX_TIM14_Init();
 800049c:	f000 fa8a 	bl	80009b4 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  FEB_Init();
 80004a0:	f7ff ff70 	bl	8000384 <FEB_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  FEB_Main_Loop();
 80004a4:	f7ff ff88 	bl	80003b8 <FEB_Main_Loop>
 80004a8:	e7fc      	b.n	80004a4 <main+0x2c>

080004aa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004aa:	b590      	push	{r4, r7, lr}
 80004ac:	b093      	sub	sp, #76	; 0x4c
 80004ae:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b0:	2414      	movs	r4, #20
 80004b2:	193b      	adds	r3, r7, r4
 80004b4:	0018      	movs	r0, r3
 80004b6:	2334      	movs	r3, #52	; 0x34
 80004b8:	001a      	movs	r2, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	f004 fcc6 	bl	8004e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	0018      	movs	r0, r3
 80004c4:	2310      	movs	r3, #16
 80004c6:	001a      	movs	r2, r3
 80004c8:	2100      	movs	r1, #0
 80004ca:	f004 fcbf 	bl	8004e4c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ce:	0021      	movs	r1, r4
 80004d0:	187b      	adds	r3, r7, r1
 80004d2:	2202      	movs	r2, #2
 80004d4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	2201      	movs	r2, #1
 80004da:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004dc:	187b      	adds	r3, r7, r1
 80004de:	2210      	movs	r2, #16
 80004e0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004e2:	187b      	adds	r3, r7, r1
 80004e4:	2200      	movs	r2, #0
 80004e6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e8:	187b      	adds	r3, r7, r1
 80004ea:	0018      	movs	r0, r3
 80004ec:	f001 fc2a 	bl	8001d44 <HAL_RCC_OscConfig>
 80004f0:	1e03      	subs	r3, r0, #0
 80004f2:	d001      	beq.n	80004f8 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80004f4:	f000 fcc6 	bl	8000e84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	2207      	movs	r2, #7
 80004fc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	2200      	movs	r2, #0
 8000502:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	2200      	movs	r2, #0
 800050e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	2100      	movs	r1, #0
 8000514:	0018      	movs	r0, r3
 8000516:	f001 ff9b 	bl	8002450 <HAL_RCC_ClockConfig>
 800051a:	1e03      	subs	r3, r0, #0
 800051c:	d001      	beq.n	8000522 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800051e:	f000 fcb1 	bl	8000e84 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8000522:	2380      	movs	r3, #128	; 0x80
 8000524:	04db      	lsls	r3, r3, #19
 8000526:	2200      	movs	r2, #0
 8000528:	0019      	movs	r1, r3
 800052a:	2000      	movs	r0, #0
 800052c:	f002 f86a 	bl	8002604 <HAL_RCC_MCOConfig>
}
 8000530:	46c0      	nop			; (mov r8, r8)
 8000532:	46bd      	mov	sp, r7
 8000534:	b013      	add	sp, #76	; 0x4c
 8000536:	bd90      	pop	{r4, r7, pc}

08000538 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800053c:	4b17      	ldr	r3, [pc, #92]	; (800059c <MX_CAN_Init+0x64>)
 800053e:	4a18      	ldr	r2, [pc, #96]	; (80005a0 <MX_CAN_Init+0x68>)
 8000540:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000542:	4b16      	ldr	r3, [pc, #88]	; (800059c <MX_CAN_Init+0x64>)
 8000544:	2210      	movs	r2, #16
 8000546:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000548:	4b14      	ldr	r3, [pc, #80]	; (800059c <MX_CAN_Init+0x64>)
 800054a:	2200      	movs	r2, #0
 800054c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800054e:	4b13      	ldr	r3, [pc, #76]	; (800059c <MX_CAN_Init+0x64>)
 8000550:	2200      	movs	r2, #0
 8000552:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000554:	4b11      	ldr	r3, [pc, #68]	; (800059c <MX_CAN_Init+0x64>)
 8000556:	2200      	movs	r2, #0
 8000558:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800055a:	4b10      	ldr	r3, [pc, #64]	; (800059c <MX_CAN_Init+0x64>)
 800055c:	2200      	movs	r2, #0
 800055e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000560:	4b0e      	ldr	r3, [pc, #56]	; (800059c <MX_CAN_Init+0x64>)
 8000562:	2200      	movs	r2, #0
 8000564:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000566:	4b0d      	ldr	r3, [pc, #52]	; (800059c <MX_CAN_Init+0x64>)
 8000568:	2200      	movs	r2, #0
 800056a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800056c:	4b0b      	ldr	r3, [pc, #44]	; (800059c <MX_CAN_Init+0x64>)
 800056e:	2200      	movs	r2, #0
 8000570:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000572:	4b0a      	ldr	r3, [pc, #40]	; (800059c <MX_CAN_Init+0x64>)
 8000574:	2200      	movs	r2, #0
 8000576:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000578:	4b08      	ldr	r3, [pc, #32]	; (800059c <MX_CAN_Init+0x64>)
 800057a:	2200      	movs	r2, #0
 800057c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800057e:	4b07      	ldr	r3, [pc, #28]	; (800059c <MX_CAN_Init+0x64>)
 8000580:	2200      	movs	r2, #0
 8000582:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <MX_CAN_Init+0x64>)
 8000586:	0018      	movs	r0, r3
 8000588:	f001 f81a 	bl	80015c0 <HAL_CAN_Init>
 800058c:	1e03      	subs	r3, r0, #0
 800058e:	d001      	beq.n	8000594 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000590:	f000 fc78 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000594:	46c0      	nop			; (mov r8, r8)
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	2000055c 	.word	0x2000055c
 80005a0:	40006400 	.word	0x40006400

080005a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b096      	sub	sp, #88	; 0x58
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005aa:	2348      	movs	r3, #72	; 0x48
 80005ac:	18fb      	adds	r3, r7, r3
 80005ae:	0018      	movs	r0, r3
 80005b0:	2310      	movs	r3, #16
 80005b2:	001a      	movs	r2, r3
 80005b4:	2100      	movs	r1, #0
 80005b6:	f004 fc49 	bl	8004e4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ba:	2340      	movs	r3, #64	; 0x40
 80005bc:	18fb      	adds	r3, r7, r3
 80005be:	0018      	movs	r0, r3
 80005c0:	2308      	movs	r3, #8
 80005c2:	001a      	movs	r2, r3
 80005c4:	2100      	movs	r1, #0
 80005c6:	f004 fc41 	bl	8004e4c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005ca:	2324      	movs	r3, #36	; 0x24
 80005cc:	18fb      	adds	r3, r7, r3
 80005ce:	0018      	movs	r0, r3
 80005d0:	231c      	movs	r3, #28
 80005d2:	001a      	movs	r2, r3
 80005d4:	2100      	movs	r1, #0
 80005d6:	f004 fc39 	bl	8004e4c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	0018      	movs	r0, r3
 80005de:	2320      	movs	r3, #32
 80005e0:	001a      	movs	r2, r3
 80005e2:	2100      	movs	r1, #0
 80005e4:	f004 fc32 	bl	8004e4c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005e8:	4b51      	ldr	r3, [pc, #324]	; (8000730 <MX_TIM1_Init+0x18c>)
 80005ea:	4a52      	ldr	r2, [pc, #328]	; (8000734 <MX_TIM1_Init+0x190>)
 80005ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80005ee:	4b50      	ldr	r3, [pc, #320]	; (8000730 <MX_TIM1_Init+0x18c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f4:	4b4e      	ldr	r3, [pc, #312]	; (8000730 <MX_TIM1_Init+0x18c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 80005fa:	4b4d      	ldr	r3, [pc, #308]	; (8000730 <MX_TIM1_Init+0x18c>)
 80005fc:	22ff      	movs	r2, #255	; 0xff
 80005fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000600:	4b4b      	ldr	r3, [pc, #300]	; (8000730 <MX_TIM1_Init+0x18c>)
 8000602:	2200      	movs	r2, #0
 8000604:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000606:	4b4a      	ldr	r3, [pc, #296]	; (8000730 <MX_TIM1_Init+0x18c>)
 8000608:	2200      	movs	r2, #0
 800060a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800060c:	4b48      	ldr	r3, [pc, #288]	; (8000730 <MX_TIM1_Init+0x18c>)
 800060e:	2280      	movs	r2, #128	; 0x80
 8000610:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000612:	4b47      	ldr	r3, [pc, #284]	; (8000730 <MX_TIM1_Init+0x18c>)
 8000614:	0018      	movs	r0, r3
 8000616:	f002 f8c7 	bl	80027a8 <HAL_TIM_Base_Init>
 800061a:	1e03      	subs	r3, r0, #0
 800061c:	d001      	beq.n	8000622 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800061e:	f000 fc31 	bl	8000e84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000622:	2148      	movs	r1, #72	; 0x48
 8000624:	187b      	adds	r3, r7, r1
 8000626:	2280      	movs	r2, #128	; 0x80
 8000628:	0152      	lsls	r2, r2, #5
 800062a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800062c:	187a      	adds	r2, r7, r1
 800062e:	4b40      	ldr	r3, [pc, #256]	; (8000730 <MX_TIM1_Init+0x18c>)
 8000630:	0011      	movs	r1, r2
 8000632:	0018      	movs	r0, r3
 8000634:	f002 fe62 	bl	80032fc <HAL_TIM_ConfigClockSource>
 8000638:	1e03      	subs	r3, r0, #0
 800063a:	d001      	beq.n	8000640 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800063c:	f000 fc22 	bl	8000e84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000640:	4b3b      	ldr	r3, [pc, #236]	; (8000730 <MX_TIM1_Init+0x18c>)
 8000642:	0018      	movs	r0, r3
 8000644:	f002 f97a 	bl	800293c <HAL_TIM_PWM_Init>
 8000648:	1e03      	subs	r3, r0, #0
 800064a:	d001      	beq.n	8000650 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 800064c:	f000 fc1a 	bl	8000e84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000650:	2140      	movs	r1, #64	; 0x40
 8000652:	187b      	adds	r3, r7, r1
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2200      	movs	r2, #0
 800065c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800065e:	187a      	adds	r2, r7, r1
 8000660:	4b33      	ldr	r3, [pc, #204]	; (8000730 <MX_TIM1_Init+0x18c>)
 8000662:	0011      	movs	r1, r2
 8000664:	0018      	movs	r0, r3
 8000666:	f003 fb67 	bl	8003d38 <HAL_TIMEx_MasterConfigSynchronization>
 800066a:	1e03      	subs	r3, r0, #0
 800066c:	d001      	beq.n	8000672 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 800066e:	f000 fc09 	bl	8000e84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000672:	2124      	movs	r1, #36	; 0x24
 8000674:	187b      	adds	r3, r7, r1
 8000676:	2260      	movs	r2, #96	; 0x60
 8000678:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 25;
 800067a:	187b      	adds	r3, r7, r1
 800067c:	2219      	movs	r2, #25
 800067e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000680:	187b      	adds	r3, r7, r1
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000686:	187b      	adds	r3, r7, r1
 8000688:	2200      	movs	r2, #0
 800068a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2200      	movs	r2, #0
 8000690:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2200      	movs	r2, #0
 8000696:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2200      	movs	r2, #0
 800069c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800069e:	1879      	adds	r1, r7, r1
 80006a0:	4b23      	ldr	r3, [pc, #140]	; (8000730 <MX_TIM1_Init+0x18c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	0018      	movs	r0, r3
 80006a6:	f002 fd63 	bl	8003170 <HAL_TIM_PWM_ConfigChannel>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80006ae:	f000 fbe9 	bl	8000e84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006b2:	2324      	movs	r3, #36	; 0x24
 80006b4:	18f9      	adds	r1, r7, r3
 80006b6:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <MX_TIM1_Init+0x18c>)
 80006b8:	2204      	movs	r2, #4
 80006ba:	0018      	movs	r0, r3
 80006bc:	f002 fd58 	bl	8003170 <HAL_TIM_PWM_ConfigChannel>
 80006c0:	1e03      	subs	r3, r0, #0
 80006c2:	d001      	beq.n	80006c8 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 80006c4:	f000 fbde 	bl	8000e84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006c8:	2324      	movs	r3, #36	; 0x24
 80006ca:	18f9      	adds	r1, r7, r3
 80006cc:	4b18      	ldr	r3, [pc, #96]	; (8000730 <MX_TIM1_Init+0x18c>)
 80006ce:	2208      	movs	r2, #8
 80006d0:	0018      	movs	r0, r3
 80006d2:	f002 fd4d 	bl	8003170 <HAL_TIM_PWM_ConfigChannel>
 80006d6:	1e03      	subs	r3, r0, #0
 80006d8:	d001      	beq.n	80006de <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 80006da:	f000 fbd3 	bl	8000e84 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2200      	movs	r2, #0
 80006e8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2280      	movs	r2, #128	; 0x80
 8000700:	0192      	lsls	r2, r2, #6
 8000702:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800070a:	1d3a      	adds	r2, r7, #4
 800070c:	4b08      	ldr	r3, [pc, #32]	; (8000730 <MX_TIM1_Init+0x18c>)
 800070e:	0011      	movs	r1, r2
 8000710:	0018      	movs	r0, r3
 8000712:	f003 fb69 	bl	8003de8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000716:	1e03      	subs	r3, r0, #0
 8000718:	d001      	beq.n	800071e <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 800071a:	f000 fbb3 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800071e:	4b04      	ldr	r3, [pc, #16]	; (8000730 <MX_TIM1_Init+0x18c>)
 8000720:	0018      	movs	r0, r3
 8000722:	f000 fd25 	bl	8001170 <HAL_TIM_MspPostInit>

}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	46bd      	mov	sp, r7
 800072a:	b016      	add	sp, #88	; 0x58
 800072c:	bd80      	pop	{r7, pc}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	20000584 	.word	0x20000584
 8000734:	40012c00 	.word	0x40012c00

08000738 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	; 0x28
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800073e:	2318      	movs	r3, #24
 8000740:	18fb      	adds	r3, r7, r3
 8000742:	0018      	movs	r0, r3
 8000744:	2310      	movs	r3, #16
 8000746:	001a      	movs	r2, r3
 8000748:	2100      	movs	r1, #0
 800074a:	f004 fb7f 	bl	8004e4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800074e:	2310      	movs	r3, #16
 8000750:	18fb      	adds	r3, r7, r3
 8000752:	0018      	movs	r0, r3
 8000754:	2308      	movs	r3, #8
 8000756:	001a      	movs	r2, r3
 8000758:	2100      	movs	r1, #0
 800075a:	f004 fb77 	bl	8004e4c <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800075e:	003b      	movs	r3, r7
 8000760:	0018      	movs	r0, r3
 8000762:	2310      	movs	r3, #16
 8000764:	001a      	movs	r2, r3
 8000766:	2100      	movs	r1, #0
 8000768:	f004 fb70 	bl	8004e4c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800076c:	4b33      	ldr	r3, [pc, #204]	; (800083c <MX_TIM2_Init+0x104>)
 800076e:	2280      	movs	r2, #128	; 0x80
 8000770:	05d2      	lsls	r2, r2, #23
 8000772:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000774:	4b31      	ldr	r3, [pc, #196]	; (800083c <MX_TIM2_Init+0x104>)
 8000776:	2200      	movs	r2, #0
 8000778:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077a:	4b30      	ldr	r3, [pc, #192]	; (800083c <MX_TIM2_Init+0x104>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8000780:	4b2e      	ldr	r3, [pc, #184]	; (800083c <MX_TIM2_Init+0x104>)
 8000782:	22ff      	movs	r2, #255	; 0xff
 8000784:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000786:	4b2d      	ldr	r3, [pc, #180]	; (800083c <MX_TIM2_Init+0x104>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800078c:	4b2b      	ldr	r3, [pc, #172]	; (800083c <MX_TIM2_Init+0x104>)
 800078e:	2280      	movs	r2, #128	; 0x80
 8000790:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000792:	4b2a      	ldr	r3, [pc, #168]	; (800083c <MX_TIM2_Init+0x104>)
 8000794:	0018      	movs	r0, r3
 8000796:	f002 f807 	bl	80027a8 <HAL_TIM_Base_Init>
 800079a:	1e03      	subs	r3, r0, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800079e:	f000 fb71 	bl	8000e84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a2:	2118      	movs	r1, #24
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	2280      	movs	r2, #128	; 0x80
 80007a8:	0152      	lsls	r2, r2, #5
 80007aa:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007ac:	187a      	adds	r2, r7, r1
 80007ae:	4b23      	ldr	r3, [pc, #140]	; (800083c <MX_TIM2_Init+0x104>)
 80007b0:	0011      	movs	r1, r2
 80007b2:	0018      	movs	r0, r3
 80007b4:	f002 fda2 	bl	80032fc <HAL_TIM_ConfigClockSource>
 80007b8:	1e03      	subs	r3, r0, #0
 80007ba:	d001      	beq.n	80007c0 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80007bc:	f000 fb62 	bl	8000e84 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80007c0:	4b1e      	ldr	r3, [pc, #120]	; (800083c <MX_TIM2_Init+0x104>)
 80007c2:	0018      	movs	r0, r3
 80007c4:	f002 f912 	bl	80029ec <HAL_TIM_IC_Init>
 80007c8:	1e03      	subs	r3, r0, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80007cc:	f000 fb5a 	bl	8000e84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d0:	2110      	movs	r1, #16
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2200      	movs	r2, #0
 80007dc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007de:	187a      	adds	r2, r7, r1
 80007e0:	4b16      	ldr	r3, [pc, #88]	; (800083c <MX_TIM2_Init+0x104>)
 80007e2:	0011      	movs	r1, r2
 80007e4:	0018      	movs	r0, r3
 80007e6:	f003 faa7 	bl	8003d38 <HAL_TIMEx_MasterConfigSynchronization>
 80007ea:	1e03      	subs	r3, r0, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80007ee:	f000 fb49 	bl	8000e84 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80007f2:	003b      	movs	r3, r7
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80007f8:	003b      	movs	r3, r7
 80007fa:	2201      	movs	r2, #1
 80007fc:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80007fe:	003b      	movs	r3, r7
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8000804:	003b      	movs	r3, r7
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800080a:	0039      	movs	r1, r7
 800080c:	4b0b      	ldr	r3, [pc, #44]	; (800083c <MX_TIM2_Init+0x104>)
 800080e:	2200      	movs	r2, #0
 8000810:	0018      	movs	r0, r3
 8000812:	f002 fc09 	bl	8003028 <HAL_TIM_IC_ConfigChannel>
 8000816:	1e03      	subs	r3, r0, #0
 8000818:	d001      	beq.n	800081e <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 800081a:	f000 fb33 	bl	8000e84 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800081e:	0039      	movs	r1, r7
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_TIM2_Init+0x104>)
 8000822:	2204      	movs	r2, #4
 8000824:	0018      	movs	r0, r3
 8000826:	f002 fbff 	bl	8003028 <HAL_TIM_IC_ConfigChannel>
 800082a:	1e03      	subs	r3, r0, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 800082e:	f000 fb29 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	46bd      	mov	sp, r7
 8000836:	b00a      	add	sp, #40	; 0x28
 8000838:	bd80      	pop	{r7, pc}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	200005cc 	.word	0x200005cc

08000840 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b092      	sub	sp, #72	; 0x48
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000846:	2338      	movs	r3, #56	; 0x38
 8000848:	18fb      	adds	r3, r7, r3
 800084a:	0018      	movs	r0, r3
 800084c:	2310      	movs	r3, #16
 800084e:	001a      	movs	r2, r3
 8000850:	2100      	movs	r1, #0
 8000852:	f004 fafb 	bl	8004e4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000856:	2330      	movs	r3, #48	; 0x30
 8000858:	18fb      	adds	r3, r7, r3
 800085a:	0018      	movs	r0, r3
 800085c:	2308      	movs	r3, #8
 800085e:	001a      	movs	r2, r3
 8000860:	2100      	movs	r1, #0
 8000862:	f004 faf3 	bl	8004e4c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000866:	2314      	movs	r3, #20
 8000868:	18fb      	adds	r3, r7, r3
 800086a:	0018      	movs	r0, r3
 800086c:	231c      	movs	r3, #28
 800086e:	001a      	movs	r2, r3
 8000870:	2100      	movs	r1, #0
 8000872:	f004 faeb 	bl	8004e4c <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	0018      	movs	r0, r3
 800087a:	2310      	movs	r3, #16
 800087c:	001a      	movs	r2, r3
 800087e:	2100      	movs	r1, #0
 8000880:	f004 fae4 	bl	8004e4c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000884:	4b49      	ldr	r3, [pc, #292]	; (80009ac <MX_TIM3_Init+0x16c>)
 8000886:	4a4a      	ldr	r2, [pc, #296]	; (80009b0 <MX_TIM3_Init+0x170>)
 8000888:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800088a:	4b48      	ldr	r3, [pc, #288]	; (80009ac <MX_TIM3_Init+0x16c>)
 800088c:	2200      	movs	r2, #0
 800088e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000890:	4b46      	ldr	r3, [pc, #280]	; (80009ac <MX_TIM3_Init+0x16c>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8000896:	4b45      	ldr	r3, [pc, #276]	; (80009ac <MX_TIM3_Init+0x16c>)
 8000898:	22ff      	movs	r2, #255	; 0xff
 800089a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089c:	4b43      	ldr	r3, [pc, #268]	; (80009ac <MX_TIM3_Init+0x16c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008a2:	4b42      	ldr	r3, [pc, #264]	; (80009ac <MX_TIM3_Init+0x16c>)
 80008a4:	2280      	movs	r2, #128	; 0x80
 80008a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008a8:	4b40      	ldr	r3, [pc, #256]	; (80009ac <MX_TIM3_Init+0x16c>)
 80008aa:	0018      	movs	r0, r3
 80008ac:	f001 ff7c 	bl	80027a8 <HAL_TIM_Base_Init>
 80008b0:	1e03      	subs	r3, r0, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80008b4:	f000 fae6 	bl	8000e84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b8:	2138      	movs	r1, #56	; 0x38
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	2280      	movs	r2, #128	; 0x80
 80008be:	0152      	lsls	r2, r2, #5
 80008c0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008c2:	187a      	adds	r2, r7, r1
 80008c4:	4b39      	ldr	r3, [pc, #228]	; (80009ac <MX_TIM3_Init+0x16c>)
 80008c6:	0011      	movs	r1, r2
 80008c8:	0018      	movs	r0, r3
 80008ca:	f002 fd17 	bl	80032fc <HAL_TIM_ConfigClockSource>
 80008ce:	1e03      	subs	r3, r0, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80008d2:	f000 fad7 	bl	8000e84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008d6:	4b35      	ldr	r3, [pc, #212]	; (80009ac <MX_TIM3_Init+0x16c>)
 80008d8:	0018      	movs	r0, r3
 80008da:	f002 f82f 	bl	800293c <HAL_TIM_PWM_Init>
 80008de:	1e03      	subs	r3, r0, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80008e2:	f000 facf 	bl	8000e84 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80008e6:	4b31      	ldr	r3, [pc, #196]	; (80009ac <MX_TIM3_Init+0x16c>)
 80008e8:	0018      	movs	r0, r3
 80008ea:	f002 f87f 	bl	80029ec <HAL_TIM_IC_Init>
 80008ee:	1e03      	subs	r3, r0, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 80008f2:	f000 fac7 	bl	8000e84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f6:	2130      	movs	r1, #48	; 0x30
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008fe:	187b      	adds	r3, r7, r1
 8000900:	2200      	movs	r2, #0
 8000902:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000904:	187a      	adds	r2, r7, r1
 8000906:	4b29      	ldr	r3, [pc, #164]	; (80009ac <MX_TIM3_Init+0x16c>)
 8000908:	0011      	movs	r1, r2
 800090a:	0018      	movs	r0, r3
 800090c:	f003 fa14 	bl	8003d38 <HAL_TIMEx_MasterConfigSynchronization>
 8000910:	1e03      	subs	r3, r0, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000914:	f000 fab6 	bl	8000e84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000918:	2114      	movs	r1, #20
 800091a:	187b      	adds	r3, r7, r1
 800091c:	2260      	movs	r2, #96	; 0x60
 800091e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000920:	187b      	adds	r3, r7, r1
 8000922:	2200      	movs	r2, #0
 8000924:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000926:	187b      	adds	r3, r7, r1
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800092c:	187b      	adds	r3, r7, r1
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000932:	1879      	adds	r1, r7, r1
 8000934:	4b1d      	ldr	r3, [pc, #116]	; (80009ac <MX_TIM3_Init+0x16c>)
 8000936:	2200      	movs	r2, #0
 8000938:	0018      	movs	r0, r3
 800093a:	f002 fc19 	bl	8003170 <HAL_TIM_PWM_ConfigChannel>
 800093e:	1e03      	subs	r3, r0, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 8000942:	f000 fa9f 	bl	8000e84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000946:	2314      	movs	r3, #20
 8000948:	18f9      	adds	r1, r7, r3
 800094a:	4b18      	ldr	r3, [pc, #96]	; (80009ac <MX_TIM3_Init+0x16c>)
 800094c:	2204      	movs	r2, #4
 800094e:	0018      	movs	r0, r3
 8000950:	f002 fc0e 	bl	8003170 <HAL_TIM_PWM_ConfigChannel>
 8000954:	1e03      	subs	r3, r0, #0
 8000956:	d001      	beq.n	800095c <MX_TIM3_Init+0x11c>
  {
    Error_Handler();
 8000958:	f000 fa94 	bl	8000e84 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	2201      	movs	r2, #1
 8000966:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	2200      	movs	r2, #0
 8000972:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000974:	1d39      	adds	r1, r7, #4
 8000976:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <MX_TIM3_Init+0x16c>)
 8000978:	2208      	movs	r2, #8
 800097a:	0018      	movs	r0, r3
 800097c:	f002 fb54 	bl	8003028 <HAL_TIM_IC_ConfigChannel>
 8000980:	1e03      	subs	r3, r0, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM3_Init+0x148>
  {
    Error_Handler();
 8000984:	f000 fa7e 	bl	8000e84 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000988:	1d39      	adds	r1, r7, #4
 800098a:	4b08      	ldr	r3, [pc, #32]	; (80009ac <MX_TIM3_Init+0x16c>)
 800098c:	220c      	movs	r2, #12
 800098e:	0018      	movs	r0, r3
 8000990:	f002 fb4a 	bl	8003028 <HAL_TIM_IC_ConfigChannel>
 8000994:	1e03      	subs	r3, r0, #0
 8000996:	d001      	beq.n	800099c <MX_TIM3_Init+0x15c>
  {
    Error_Handler();
 8000998:	f000 fa74 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800099c:	4b03      	ldr	r3, [pc, #12]	; (80009ac <MX_TIM3_Init+0x16c>)
 800099e:	0018      	movs	r0, r3
 80009a0:	f000 fbe6 	bl	8001170 <HAL_TIM_MspPostInit>

}
 80009a4:	46c0      	nop			; (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	b012      	add	sp, #72	; 0x48
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000614 	.word	0x20000614
 80009b0:	40000400 	.word	0x40000400

080009b4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80009ba:	003b      	movs	r3, r7
 80009bc:	0018      	movs	r0, r3
 80009be:	2310      	movs	r3, #16
 80009c0:	001a      	movs	r2, r3
 80009c2:	2100      	movs	r1, #0
 80009c4:	f004 fa42 	bl	8004e4c <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80009c8:	4b1d      	ldr	r3, [pc, #116]	; (8000a40 <MX_TIM14_Init+0x8c>)
 80009ca:	4a1e      	ldr	r2, [pc, #120]	; (8000a44 <MX_TIM14_Init+0x90>)
 80009cc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80009ce:	4b1c      	ldr	r3, [pc, #112]	; (8000a40 <MX_TIM14_Init+0x8c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d4:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <MX_TIM14_Init+0x8c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 255;
 80009da:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <MX_TIM14_Init+0x8c>)
 80009dc:	22ff      	movs	r2, #255	; 0xff
 80009de:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e0:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <MX_TIM14_Init+0x8c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009e6:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <MX_TIM14_Init+0x8c>)
 80009e8:	2280      	movs	r2, #128	; 0x80
 80009ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <MX_TIM14_Init+0x8c>)
 80009ee:	0018      	movs	r0, r3
 80009f0:	f001 feda 	bl	80027a8 <HAL_TIM_Base_Init>
 80009f4:	1e03      	subs	r3, r0, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 80009f8:	f000 fa44 	bl	8000e84 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim14) != HAL_OK)
 80009fc:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <MX_TIM14_Init+0x8c>)
 80009fe:	0018      	movs	r0, r3
 8000a00:	f001 fff4 	bl	80029ec <HAL_TIM_IC_Init>
 8000a04:	1e03      	subs	r3, r0, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000a08:	f000 fa3c 	bl	8000e84 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a0c:	003b      	movs	r3, r7
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a12:	003b      	movs	r3, r7
 8000a14:	2201      	movs	r2, #1
 8000a16:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a18:	003b      	movs	r3, r7
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8000a1e:	003b      	movs	r3, r7
 8000a20:	2200      	movs	r2, #0
 8000a22:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim14, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000a24:	0039      	movs	r1, r7
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_TIM14_Init+0x8c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f002 fafc 	bl	8003028 <HAL_TIM_IC_ConfigChannel>
 8000a30:	1e03      	subs	r3, r0, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000a34:	f000 fa26 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000a38:	46c0      	nop			; (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	b004      	add	sp, #16
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	2000065c 	.word	0x2000065c
 8000a44:	40002000 	.word	0x40002000

08000a48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <MX_USART2_UART_Init+0x58>)
 8000a4e:	4a15      	ldr	r2, [pc, #84]	; (8000aa4 <MX_USART2_UART_Init+0x5c>)
 8000a50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <MX_USART2_UART_Init+0x58>)
 8000a54:	22e1      	movs	r2, #225	; 0xe1
 8000a56:	0252      	lsls	r2, r2, #9
 8000a58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <MX_USART2_UART_Init+0x58>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <MX_USART2_UART_Init+0x58>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <MX_USART2_UART_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <MX_USART2_UART_Init+0x58>)
 8000a6e:	220c      	movs	r2, #12
 8000a70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a72:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <MX_USART2_UART_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a78:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <MX_USART2_UART_Init+0x58>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a7e:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <MX_USART2_UART_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <MX_USART2_UART_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a8a:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <MX_USART2_UART_Init+0x58>)
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f003 fa19 	bl	8003ec4 <HAL_UART_Init>
 8000a92:	1e03      	subs	r3, r0, #0
 8000a94:	d001      	beq.n	8000a9a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a96:	f000 f9f5 	bl	8000e84 <Error_Handler>
  /* USER CODE BEGIN USART2_Init 2 */


  /* USER CODE END USART2_Init 2 */

}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	200006a4 	.word	0x200006a4
 8000aa4:	40004400 	.word	0x40004400

08000aa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aae:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <MX_GPIO_Init+0x64>)
 8000ab0:	695a      	ldr	r2, [r3, #20]
 8000ab2:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <MX_GPIO_Init+0x64>)
 8000ab4:	2180      	movs	r1, #128	; 0x80
 8000ab6:	03c9      	lsls	r1, r1, #15
 8000ab8:	430a      	orrs	r2, r1
 8000aba:	615a      	str	r2, [r3, #20]
 8000abc:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <MX_GPIO_Init+0x64>)
 8000abe:	695a      	ldr	r2, [r3, #20]
 8000ac0:	2380      	movs	r3, #128	; 0x80
 8000ac2:	03db      	lsls	r3, r3, #15
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <MX_GPIO_Init+0x64>)
 8000acc:	695a      	ldr	r2, [r3, #20]
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <MX_GPIO_Init+0x64>)
 8000ad0:	2180      	movs	r1, #128	; 0x80
 8000ad2:	0289      	lsls	r1, r1, #10
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	615a      	str	r2, [r3, #20]
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <MX_GPIO_Init+0x64>)
 8000ada:	695a      	ldr	r2, [r3, #20]
 8000adc:	2380      	movs	r3, #128	; 0x80
 8000ade:	029b      	lsls	r3, r3, #10
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <MX_GPIO_Init+0x64>)
 8000ae8:	695a      	ldr	r2, [r3, #20]
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <MX_GPIO_Init+0x64>)
 8000aec:	2180      	movs	r1, #128	; 0x80
 8000aee:	02c9      	lsls	r1, r1, #11
 8000af0:	430a      	orrs	r2, r1
 8000af2:	615a      	str	r2, [r3, #20]
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <MX_GPIO_Init+0x64>)
 8000af6:	695a      	ldr	r2, [r3, #20]
 8000af8:	2380      	movs	r3, #128	; 0x80
 8000afa:	02db      	lsls	r3, r3, #11
 8000afc:	4013      	ands	r3, r2
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	46bd      	mov	sp, r7
 8000b06:	b004      	add	sp, #16
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	40021000 	.word	0x40021000

08000b10 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]


 sprintf(gu8_MSG, "Callback \n");
 8000b18:	4ac5      	ldr	r2, [pc, #788]	; (8000e30 <HAL_TIM_IC_CaptureCallback+0x320>)
 8000b1a:	4bc6      	ldr	r3, [pc, #792]	; (8000e34 <HAL_TIM_IC_CaptureCallback+0x324>)
 8000b1c:	0011      	movs	r1, r2
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f004 f974 	bl	8004e0c <siprintf>
  HAL_UART_Transmit(&huart2, gu8_MSG, sizeof(gu8_MSG), 100);
 8000b24:	49c3      	ldr	r1, [pc, #780]	; (8000e34 <HAL_TIM_IC_CaptureCallback+0x324>)
 8000b26:	48c4      	ldr	r0, [pc, #784]	; (8000e38 <HAL_TIM_IC_CaptureCallback+0x328>)
 8000b28:	2364      	movs	r3, #100	; 0x64
 8000b2a:	2240      	movs	r2, #64	; 0x40
 8000b2c:	f003 fa1e 	bl	8003f6c <HAL_UART_Transmit>
//	FEB_IC_Process(htim);

switch(htim->Channel){
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	7f1b      	ldrb	r3, [r3, #28]
 8000b34:	2b08      	cmp	r3, #8
 8000b36:	d100      	bne.n	8000b3a <HAL_TIM_IC_CaptureCallback+0x2a>
 8000b38:	e116      	b.n	8000d68 <HAL_TIM_IC_CaptureCallback+0x258>
 8000b3a:	dd00      	ble.n	8000b3e <HAL_TIM_IC_CaptureCallback+0x2e>
 8000b3c:	e173      	b.n	8000e26 <HAL_TIM_IC_CaptureCallback+0x316>
 8000b3e:	2b04      	cmp	r3, #4
 8000b40:	d100      	bne.n	8000b44 <HAL_TIM_IC_CaptureCallback+0x34>
 8000b42:	e0b8      	b.n	8000cb6 <HAL_TIM_IC_CaptureCallback+0x1a6>
 8000b44:	dd00      	ble.n	8000b48 <HAL_TIM_IC_CaptureCallback+0x38>
 8000b46:	e16e      	b.n	8000e26 <HAL_TIM_IC_CaptureCallback+0x316>
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d002      	beq.n	8000b52 <HAL_TIM_IC_CaptureCallback+0x42>
 8000b4c:	2b02      	cmp	r3, #2
 8000b4e:	d059      	beq.n	8000c04 <HAL_TIM_IC_CaptureCallback+0xf4>
			gu8_State = IDLE;
		}
		break;

	}
}
 8000b50:	e169      	b.n	8000e26 <HAL_TIM_IC_CaptureCallback+0x316>
		if(gu8_State == IDLE)
 8000b52:	4bba      	ldr	r3, [pc, #744]	; (8000e3c <HAL_TIM_IC_CaptureCallback+0x32c>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d10b      	bne.n	8000b74 <HAL_TIM_IC_CaptureCallback+0x64>
			gu32_T1 = htim->Instance->CCR1;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b62:	4bb7      	ldr	r3, [pc, #732]	; (8000e40 <HAL_TIM_IC_CaptureCallback+0x330>)
 8000b64:	601a      	str	r2, [r3, #0]
			gu16_TIM2_OVC = 0;
 8000b66:	4bb7      	ldr	r3, [pc, #732]	; (8000e44 <HAL_TIM_IC_CaptureCallback+0x334>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	801a      	strh	r2, [r3, #0]
			gu8_State = DONE;
 8000b6c:	4bb3      	ldr	r3, [pc, #716]	; (8000e3c <HAL_TIM_IC_CaptureCallback+0x32c>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	701a      	strb	r2, [r3, #0]
		break;
 8000b72:	e151      	b.n	8000e18 <HAL_TIM_IC_CaptureCallback+0x308>
		else if(gu8_State == DONE)
 8000b74:	4bb1      	ldr	r3, [pc, #708]	; (8000e3c <HAL_TIM_IC_CaptureCallback+0x32c>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d000      	beq.n	8000b80 <HAL_TIM_IC_CaptureCallback+0x70>
 8000b7e:	e14b      	b.n	8000e18 <HAL_TIM_IC_CaptureCallback+0x308>
			gu32_T2 = htim->Instance->CCR1;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b86:	4bb0      	ldr	r3, [pc, #704]	; (8000e48 <HAL_TIM_IC_CaptureCallback+0x338>)
 8000b88:	601a      	str	r2, [r3, #0]
			gu32_Ticks = (gu32_T2 + (gu16_TIM2_OVC * 256)) - gu32_T1;
 8000b8a:	4bae      	ldr	r3, [pc, #696]	; (8000e44 <HAL_TIM_IC_CaptureCallback+0x334>)
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	021b      	lsls	r3, r3, #8
 8000b92:	001a      	movs	r2, r3
 8000b94:	4bac      	ldr	r3, [pc, #688]	; (8000e48 <HAL_TIM_IC_CaptureCallback+0x338>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	18d2      	adds	r2, r2, r3
 8000b9a:	4ba9      	ldr	r3, [pc, #676]	; (8000e40 <HAL_TIM_IC_CaptureCallback+0x330>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	1ad2      	subs	r2, r2, r3
 8000ba0:	4baa      	ldr	r3, [pc, #680]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0x33c>)
 8000ba2:	601a      	str	r2, [r3, #0]
			gu32_Freq = (uint32_t)(F_CLK/gu32_Ticks);
 8000ba4:	4ba9      	ldr	r3, [pc, #676]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0x33c>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	0019      	movs	r1, r3
 8000baa:	48a9      	ldr	r0, [pc, #676]	; (8000e50 <HAL_TIM_IC_CaptureCallback+0x340>)
 8000bac:	f7ff fab6 	bl	800011c <__udivsi3>
 8000bb0:	0003      	movs	r3, r0
 8000bb2:	001a      	movs	r2, r3
 8000bb4:	4ba7      	ldr	r3, [pc, #668]	; (8000e54 <HAL_TIM_IC_CaptureCallback+0x344>)
 8000bb6:	601a      	str	r2, [r3, #0]
			if(gu32_Freq != 0)
 8000bb8:	4ba6      	ldr	r3, [pc, #664]	; (8000e54 <HAL_TIM_IC_CaptureCallback+0x344>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d00c      	beq.n	8000bda <HAL_TIM_IC_CaptureCallback+0xca>
			  sprintf(gu8_MSG, "Frequency = %lu Hz\n\r", gu32_Freq);
 8000bc0:	4ba4      	ldr	r3, [pc, #656]	; (8000e54 <HAL_TIM_IC_CaptureCallback+0x344>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	49a4      	ldr	r1, [pc, #656]	; (8000e58 <HAL_TIM_IC_CaptureCallback+0x348>)
 8000bc6:	4b9b      	ldr	r3, [pc, #620]	; (8000e34 <HAL_TIM_IC_CaptureCallback+0x324>)
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f004 f91f 	bl	8004e0c <siprintf>
			  HAL_UART_Transmit(&huart2, gu8_MSG, sizeof(gu8_MSG), 100);
 8000bce:	4999      	ldr	r1, [pc, #612]	; (8000e34 <HAL_TIM_IC_CaptureCallback+0x324>)
 8000bd0:	4899      	ldr	r0, [pc, #612]	; (8000e38 <HAL_TIM_IC_CaptureCallback+0x328>)
 8000bd2:	2364      	movs	r3, #100	; 0x64
 8000bd4:	2240      	movs	r2, #64	; 0x40
 8000bd6:	f003 f9c9 	bl	8003f6c <HAL_UART_Transmit>
			if(gu32_Freq == 0)
 8000bda:	4b9e      	ldr	r3, [pc, #632]	; (8000e54 <HAL_TIM_IC_CaptureCallback+0x344>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d10c      	bne.n	8000bfc <HAL_TIM_IC_CaptureCallback+0xec>
			  sprintf(gu8_MSG, "Failed = %lu Hz\n\r", gu32_Freq);
 8000be2:	4b9c      	ldr	r3, [pc, #624]	; (8000e54 <HAL_TIM_IC_CaptureCallback+0x344>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	499d      	ldr	r1, [pc, #628]	; (8000e5c <HAL_TIM_IC_CaptureCallback+0x34c>)
 8000be8:	4b92      	ldr	r3, [pc, #584]	; (8000e34 <HAL_TIM_IC_CaptureCallback+0x324>)
 8000bea:	0018      	movs	r0, r3
 8000bec:	f004 f90e 	bl	8004e0c <siprintf>
			  HAL_UART_Transmit(&huart2, gu8_MSG, sizeof(gu8_MSG), 100);
 8000bf0:	4990      	ldr	r1, [pc, #576]	; (8000e34 <HAL_TIM_IC_CaptureCallback+0x324>)
 8000bf2:	4891      	ldr	r0, [pc, #580]	; (8000e38 <HAL_TIM_IC_CaptureCallback+0x328>)
 8000bf4:	2364      	movs	r3, #100	; 0x64
 8000bf6:	2240      	movs	r2, #64	; 0x40
 8000bf8:	f003 f9b8 	bl	8003f6c <HAL_UART_Transmit>
			gu8_State = IDLE;
 8000bfc:	4b8f      	ldr	r3, [pc, #572]	; (8000e3c <HAL_TIM_IC_CaptureCallback+0x32c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	701a      	strb	r2, [r3, #0]
		break;
 8000c02:	e109      	b.n	8000e18 <HAL_TIM_IC_CaptureCallback+0x308>
		if(gu8_State == IDLE)
 8000c04:	4b8d      	ldr	r3, [pc, #564]	; (8000e3c <HAL_TIM_IC_CaptureCallback+0x32c>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d10b      	bne.n	8000c26 <HAL_TIM_IC_CaptureCallback+0x116>
			gu32_T1 = htim->Instance->CCR2;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c14:	4b8a      	ldr	r3, [pc, #552]	; (8000e40 <HAL_TIM_IC_CaptureCallback+0x330>)
 8000c16:	601a      	str	r2, [r3, #0]
			gu16_TIM2_OVC = 0;
 8000c18:	4b8a      	ldr	r3, [pc, #552]	; (8000e44 <HAL_TIM_IC_CaptureCallback+0x334>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	801a      	strh	r2, [r3, #0]
			gu8_State = DONE;
 8000c1e:	4b87      	ldr	r3, [pc, #540]	; (8000e3c <HAL_TIM_IC_CaptureCallback+0x32c>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	701a      	strb	r2, [r3, #0]
		break;
 8000c24:	e0fa      	b.n	8000e1c <HAL_TIM_IC_CaptureCallback+0x30c>
		else if(gu8_State == DONE)
 8000c26:	4b85      	ldr	r3, [pc, #532]	; (8000e3c <HAL_TIM_IC_CaptureCallback+0x32c>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d000      	beq.n	8000c32 <HAL_TIM_IC_CaptureCallback+0x122>
 8000c30:	e0f4      	b.n	8000e1c <HAL_TIM_IC_CaptureCallback+0x30c>
			gu32_T2 = htim->Instance->CCR2;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c38:	4b83      	ldr	r3, [pc, #524]	; (8000e48 <HAL_TIM_IC_CaptureCallback+0x338>)
 8000c3a:	601a      	str	r2, [r3, #0]
			gu32_Ticks = (gu32_T2 + (gu16_TIM2_OVC * 256)) - gu32_T1;
 8000c3c:	4b81      	ldr	r3, [pc, #516]	; (8000e44 <HAL_TIM_IC_CaptureCallback+0x334>)
 8000c3e:	881b      	ldrh	r3, [r3, #0]
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	021b      	lsls	r3, r3, #8
 8000c44:	001a      	movs	r2, r3
 8000c46:	4b80      	ldr	r3, [pc, #512]	; (8000e48 <HAL_TIM_IC_CaptureCallback+0x338>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	18d2      	adds	r2, r2, r3
 8000c4c:	4b7c      	ldr	r3, [pc, #496]	; (8000e40 <HAL_TIM_IC_CaptureCallback+0x330>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	1ad2      	subs	r2, r2, r3
 8000c52:	4b7e      	ldr	r3, [pc, #504]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0x33c>)
 8000c54:	601a      	str	r2, [r3, #0]
			gu32_Freq = (uint32_t)(F_CLK/gu32_Ticks);
 8000c56:	4b7d      	ldr	r3, [pc, #500]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0x33c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	0019      	movs	r1, r3
 8000c5c:	487c      	ldr	r0, [pc, #496]	; (8000e50 <HAL_TIM_IC_CaptureCallback+0x340>)
 8000c5e:	f7ff fa5d 	bl	800011c <__udivsi3>
 8000c62:	0003      	movs	r3, r0
 8000c64:	001a      	movs	r2, r3
 8000c66:	4b7b      	ldr	r3, [pc, #492]	; (8000e54 <HAL_TIM_IC_CaptureCallback+0x344>)
 8000c68:	601a      	str	r2, [r3, #0]
			if(gu32_Freq != 0)
 8000c6a:	4b7a      	ldr	r3, [pc, #488]	; (8000e54 <HAL_TIM_IC_CaptureCallback+0x344>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d00c      	beq.n	8000c8c <HAL_TIM_IC_CaptureCallback+0x17c>
			  sprintf(gu8_MSG, "Frequency = %lu Hz\n\r", gu32_Freq);
 8000c72:	4b78      	ldr	r3, [pc, #480]	; (8000e54 <HAL_TIM_IC_CaptureCallback+0x344>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	4978      	ldr	r1, [pc, #480]	; (8000e58 <HAL_TIM_IC_CaptureCallback+0x348>)
 8000c78:	4b6e      	ldr	r3, [pc, #440]	; (8000e34 <HAL_TIM_IC_CaptureCallback+0x324>)
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f004 f8c6 	bl	8004e0c <siprintf>
			  HAL_UART_Transmit(&huart2, gu8_MSG, sizeof(gu8_MSG), 100);
 8000c80:	496c      	ldr	r1, [pc, #432]	; (8000e34 <HAL_TIM_IC_CaptureCallback+0x324>)
 8000c82:	486d      	ldr	r0, [pc, #436]	; (8000e38 <HAL_TIM_IC_CaptureCallback+0x328>)
 8000c84:	2364      	movs	r3, #100	; 0x64
 8000c86:	2240      	movs	r2, #64	; 0x40
 8000c88:	f003 f970 	bl	8003f6c <HAL_UART_Transmit>
			if(gu32_Freq == 0)
 8000c8c:	4b71      	ldr	r3, [pc, #452]	; (8000e54 <HAL_TIM_IC_CaptureCallback+0x344>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d10c      	bne.n	8000cae <HAL_TIM_IC_CaptureCallback+0x19e>
			  sprintf(gu8_MSG, "Failed = %lu Hz\n\r", gu32_Freq);
 8000c94:	4b6f      	ldr	r3, [pc, #444]	; (8000e54 <HAL_TIM_IC_CaptureCallback+0x344>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4970      	ldr	r1, [pc, #448]	; (8000e5c <HAL_TIM_IC_CaptureCallback+0x34c>)
 8000c9a:	4b66      	ldr	r3, [pc, #408]	; (8000e34 <HAL_TIM_IC_CaptureCallback+0x324>)
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f004 f8b5 	bl	8004e0c <siprintf>
			  HAL_UART_Transmit(&huart2, gu8_MSG, sizeof(gu8_MSG), 100);
 8000ca2:	4964      	ldr	r1, [pc, #400]	; (8000e34 <HAL_TIM_IC_CaptureCallback+0x324>)
 8000ca4:	4864      	ldr	r0, [pc, #400]	; (8000e38 <HAL_TIM_IC_CaptureCallback+0x328>)
 8000ca6:	2364      	movs	r3, #100	; 0x64
 8000ca8:	2240      	movs	r2, #64	; 0x40
 8000caa:	f003 f95f 	bl	8003f6c <HAL_UART_Transmit>
			gu8_State = IDLE;
 8000cae:	4b63      	ldr	r3, [pc, #396]	; (8000e3c <HAL_TIM_IC_CaptureCallback+0x32c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	701a      	strb	r2, [r3, #0]
		break;
 8000cb4:	e0b2      	b.n	8000e1c <HAL_TIM_IC_CaptureCallback+0x30c>
		if(gu8_State == IDLE)
 8000cb6:	4b61      	ldr	r3, [pc, #388]	; (8000e3c <HAL_TIM_IC_CaptureCallback+0x32c>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d10b      	bne.n	8000cd8 <HAL_TIM_IC_CaptureCallback+0x1c8>
			gu32_T1 = htim->Instance->CCR3;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cc6:	4b5e      	ldr	r3, [pc, #376]	; (8000e40 <HAL_TIM_IC_CaptureCallback+0x330>)
 8000cc8:	601a      	str	r2, [r3, #0]
			gu16_TIM2_OVC = 0;
 8000cca:	4b5e      	ldr	r3, [pc, #376]	; (8000e44 <HAL_TIM_IC_CaptureCallback+0x334>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	801a      	strh	r2, [r3, #0]
			gu8_State = DONE;
 8000cd0:	4b5a      	ldr	r3, [pc, #360]	; (8000e3c <HAL_TIM_IC_CaptureCallback+0x32c>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	701a      	strb	r2, [r3, #0]
		break;
 8000cd6:	e0a3      	b.n	8000e20 <HAL_TIM_IC_CaptureCallback+0x310>
		else if(gu8_State == DONE)
 8000cd8:	4b58      	ldr	r3, [pc, #352]	; (8000e3c <HAL_TIM_IC_CaptureCallback+0x32c>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d000      	beq.n	8000ce4 <HAL_TIM_IC_CaptureCallback+0x1d4>
 8000ce2:	e09d      	b.n	8000e20 <HAL_TIM_IC_CaptureCallback+0x310>
			gu32_T2 = htim->Instance->CCR3;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cea:	4b57      	ldr	r3, [pc, #348]	; (8000e48 <HAL_TIM_IC_CaptureCallback+0x338>)
 8000cec:	601a      	str	r2, [r3, #0]
			gu32_Ticks = (gu32_T2 + (gu16_TIM2_OVC * 256)) - gu32_T1;
 8000cee:	4b55      	ldr	r3, [pc, #340]	; (8000e44 <HAL_TIM_IC_CaptureCallback+0x334>)
 8000cf0:	881b      	ldrh	r3, [r3, #0]
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	021b      	lsls	r3, r3, #8
 8000cf6:	001a      	movs	r2, r3
 8000cf8:	4b53      	ldr	r3, [pc, #332]	; (8000e48 <HAL_TIM_IC_CaptureCallback+0x338>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	18d2      	adds	r2, r2, r3
 8000cfe:	4b50      	ldr	r3, [pc, #320]	; (8000e40 <HAL_TIM_IC_CaptureCallback+0x330>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	1ad2      	subs	r2, r2, r3
 8000d04:	4b51      	ldr	r3, [pc, #324]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0x33c>)
 8000d06:	601a      	str	r2, [r3, #0]
			gu32_Freq = (uint32_t)(F_CLK/gu32_Ticks);
 8000d08:	4b50      	ldr	r3, [pc, #320]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0x33c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	0019      	movs	r1, r3
 8000d0e:	4850      	ldr	r0, [pc, #320]	; (8000e50 <HAL_TIM_IC_CaptureCallback+0x340>)
 8000d10:	f7ff fa04 	bl	800011c <__udivsi3>
 8000d14:	0003      	movs	r3, r0
 8000d16:	001a      	movs	r2, r3
 8000d18:	4b4e      	ldr	r3, [pc, #312]	; (8000e54 <HAL_TIM_IC_CaptureCallback+0x344>)
 8000d1a:	601a      	str	r2, [r3, #0]
			if(gu32_Freq != 0)
 8000d1c:	4b4d      	ldr	r3, [pc, #308]	; (8000e54 <HAL_TIM_IC_CaptureCallback+0x344>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d00c      	beq.n	8000d3e <HAL_TIM_IC_CaptureCallback+0x22e>
			  sprintf(gu8_MSG, "Frequency = %lu Hz\n\r", gu32_Freq);
 8000d24:	4b4b      	ldr	r3, [pc, #300]	; (8000e54 <HAL_TIM_IC_CaptureCallback+0x344>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	494b      	ldr	r1, [pc, #300]	; (8000e58 <HAL_TIM_IC_CaptureCallback+0x348>)
 8000d2a:	4b42      	ldr	r3, [pc, #264]	; (8000e34 <HAL_TIM_IC_CaptureCallback+0x324>)
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f004 f86d 	bl	8004e0c <siprintf>
			  HAL_UART_Transmit(&huart2, gu8_MSG, sizeof(gu8_MSG), 100);
 8000d32:	4940      	ldr	r1, [pc, #256]	; (8000e34 <HAL_TIM_IC_CaptureCallback+0x324>)
 8000d34:	4840      	ldr	r0, [pc, #256]	; (8000e38 <HAL_TIM_IC_CaptureCallback+0x328>)
 8000d36:	2364      	movs	r3, #100	; 0x64
 8000d38:	2240      	movs	r2, #64	; 0x40
 8000d3a:	f003 f917 	bl	8003f6c <HAL_UART_Transmit>
			if(gu32_Freq == 0)
 8000d3e:	4b45      	ldr	r3, [pc, #276]	; (8000e54 <HAL_TIM_IC_CaptureCallback+0x344>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d10c      	bne.n	8000d60 <HAL_TIM_IC_CaptureCallback+0x250>
			  sprintf(gu8_MSG, "Failed = %lu Hz\n\r", gu32_Freq);
 8000d46:	4b43      	ldr	r3, [pc, #268]	; (8000e54 <HAL_TIM_IC_CaptureCallback+0x344>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	4944      	ldr	r1, [pc, #272]	; (8000e5c <HAL_TIM_IC_CaptureCallback+0x34c>)
 8000d4c:	4b39      	ldr	r3, [pc, #228]	; (8000e34 <HAL_TIM_IC_CaptureCallback+0x324>)
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f004 f85c 	bl	8004e0c <siprintf>
			  HAL_UART_Transmit(&huart2, gu8_MSG, sizeof(gu8_MSG), 100);
 8000d54:	4937      	ldr	r1, [pc, #220]	; (8000e34 <HAL_TIM_IC_CaptureCallback+0x324>)
 8000d56:	4838      	ldr	r0, [pc, #224]	; (8000e38 <HAL_TIM_IC_CaptureCallback+0x328>)
 8000d58:	2364      	movs	r3, #100	; 0x64
 8000d5a:	2240      	movs	r2, #64	; 0x40
 8000d5c:	f003 f906 	bl	8003f6c <HAL_UART_Transmit>
			gu8_State = IDLE;
 8000d60:	4b36      	ldr	r3, [pc, #216]	; (8000e3c <HAL_TIM_IC_CaptureCallback+0x32c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	701a      	strb	r2, [r3, #0]
		break;
 8000d66:	e05b      	b.n	8000e20 <HAL_TIM_IC_CaptureCallback+0x310>
		if(gu8_State == IDLE)
 8000d68:	4b34      	ldr	r3, [pc, #208]	; (8000e3c <HAL_TIM_IC_CaptureCallback+0x32c>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d10b      	bne.n	8000d8a <HAL_TIM_IC_CaptureCallback+0x27a>
			gu32_T1 = htim->Instance->CCR4;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d78:	4b31      	ldr	r3, [pc, #196]	; (8000e40 <HAL_TIM_IC_CaptureCallback+0x330>)
 8000d7a:	601a      	str	r2, [r3, #0]
			gu16_TIM2_OVC = 0;
 8000d7c:	4b31      	ldr	r3, [pc, #196]	; (8000e44 <HAL_TIM_IC_CaptureCallback+0x334>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	801a      	strh	r2, [r3, #0]
			gu8_State = DONE;
 8000d82:	4b2e      	ldr	r3, [pc, #184]	; (8000e3c <HAL_TIM_IC_CaptureCallback+0x32c>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	701a      	strb	r2, [r3, #0]
		break;
 8000d88:	e04c      	b.n	8000e24 <HAL_TIM_IC_CaptureCallback+0x314>
		else if(gu8_State == DONE)
 8000d8a:	4b2c      	ldr	r3, [pc, #176]	; (8000e3c <HAL_TIM_IC_CaptureCallback+0x32c>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d147      	bne.n	8000e24 <HAL_TIM_IC_CaptureCallback+0x314>
			gu32_T2 = htim->Instance->CCR4;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d9a:	4b2b      	ldr	r3, [pc, #172]	; (8000e48 <HAL_TIM_IC_CaptureCallback+0x338>)
 8000d9c:	601a      	str	r2, [r3, #0]
			gu32_Ticks = (gu32_T2 + (gu16_TIM2_OVC * 256)) - gu32_T1;
 8000d9e:	4b29      	ldr	r3, [pc, #164]	; (8000e44 <HAL_TIM_IC_CaptureCallback+0x334>)
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	021b      	lsls	r3, r3, #8
 8000da6:	001a      	movs	r2, r3
 8000da8:	4b27      	ldr	r3, [pc, #156]	; (8000e48 <HAL_TIM_IC_CaptureCallback+0x338>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	18d2      	adds	r2, r2, r3
 8000dae:	4b24      	ldr	r3, [pc, #144]	; (8000e40 <HAL_TIM_IC_CaptureCallback+0x330>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	1ad2      	subs	r2, r2, r3
 8000db4:	4b25      	ldr	r3, [pc, #148]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0x33c>)
 8000db6:	601a      	str	r2, [r3, #0]
			gu32_Freq = (uint32_t)(F_CLK/gu32_Ticks);
 8000db8:	4b24      	ldr	r3, [pc, #144]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0x33c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	0019      	movs	r1, r3
 8000dbe:	4824      	ldr	r0, [pc, #144]	; (8000e50 <HAL_TIM_IC_CaptureCallback+0x340>)
 8000dc0:	f7ff f9ac 	bl	800011c <__udivsi3>
 8000dc4:	0003      	movs	r3, r0
 8000dc6:	001a      	movs	r2, r3
 8000dc8:	4b22      	ldr	r3, [pc, #136]	; (8000e54 <HAL_TIM_IC_CaptureCallback+0x344>)
 8000dca:	601a      	str	r2, [r3, #0]
			if(gu32_Freq != 0)
 8000dcc:	4b21      	ldr	r3, [pc, #132]	; (8000e54 <HAL_TIM_IC_CaptureCallback+0x344>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d00c      	beq.n	8000dee <HAL_TIM_IC_CaptureCallback+0x2de>
			  sprintf(gu8_MSG, "Frequency = %lu Hz\n\r", gu32_Freq);
 8000dd4:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <HAL_TIM_IC_CaptureCallback+0x344>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	491f      	ldr	r1, [pc, #124]	; (8000e58 <HAL_TIM_IC_CaptureCallback+0x348>)
 8000dda:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <HAL_TIM_IC_CaptureCallback+0x324>)
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f004 f815 	bl	8004e0c <siprintf>
			  HAL_UART_Transmit(&huart2, gu8_MSG, sizeof(gu8_MSG), 100);
 8000de2:	4914      	ldr	r1, [pc, #80]	; (8000e34 <HAL_TIM_IC_CaptureCallback+0x324>)
 8000de4:	4814      	ldr	r0, [pc, #80]	; (8000e38 <HAL_TIM_IC_CaptureCallback+0x328>)
 8000de6:	2364      	movs	r3, #100	; 0x64
 8000de8:	2240      	movs	r2, #64	; 0x40
 8000dea:	f003 f8bf 	bl	8003f6c <HAL_UART_Transmit>
			if(gu32_Freq == 0)
 8000dee:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <HAL_TIM_IC_CaptureCallback+0x344>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d10c      	bne.n	8000e10 <HAL_TIM_IC_CaptureCallback+0x300>
			  sprintf(gu8_MSG, "Failed = %lu Hz\n\r", gu32_Freq);
 8000df6:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <HAL_TIM_IC_CaptureCallback+0x344>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	4918      	ldr	r1, [pc, #96]	; (8000e5c <HAL_TIM_IC_CaptureCallback+0x34c>)
 8000dfc:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <HAL_TIM_IC_CaptureCallback+0x324>)
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f004 f804 	bl	8004e0c <siprintf>
			  HAL_UART_Transmit(&huart2, gu8_MSG, sizeof(gu8_MSG), 100);
 8000e04:	490b      	ldr	r1, [pc, #44]	; (8000e34 <HAL_TIM_IC_CaptureCallback+0x324>)
 8000e06:	480c      	ldr	r0, [pc, #48]	; (8000e38 <HAL_TIM_IC_CaptureCallback+0x328>)
 8000e08:	2364      	movs	r3, #100	; 0x64
 8000e0a:	2240      	movs	r2, #64	; 0x40
 8000e0c:	f003 f8ae 	bl	8003f6c <HAL_UART_Transmit>
			gu8_State = IDLE;
 8000e10:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <HAL_TIM_IC_CaptureCallback+0x32c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	701a      	strb	r2, [r3, #0]
		break;
 8000e16:	e005      	b.n	8000e24 <HAL_TIM_IC_CaptureCallback+0x314>
		break;
 8000e18:	46c0      	nop			; (mov r8, r8)
 8000e1a:	e004      	b.n	8000e26 <HAL_TIM_IC_CaptureCallback+0x316>
		break;
 8000e1c:	46c0      	nop			; (mov r8, r8)
 8000e1e:	e002      	b.n	8000e26 <HAL_TIM_IC_CaptureCallback+0x316>
		break;
 8000e20:	46c0      	nop			; (mov r8, r8)
 8000e22:	e000      	b.n	8000e26 <HAL_TIM_IC_CaptureCallback+0x316>
		break;
 8000e24:	46c0      	nop			; (mov r8, r8)
}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b002      	add	sp, #8
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	080057d4 	.word	0x080057d4
 8000e34:	20000508 	.word	0x20000508
 8000e38:	200006a4 	.word	0x200006a4
 8000e3c:	20000504 	.word	0x20000504
 8000e40:	20000548 	.word	0x20000548
 8000e44:	20000554 	.word	0x20000554
 8000e48:	2000054c 	.word	0x2000054c
 8000e4c:	20000550 	.word	0x20000550
 8000e50:	007a1200 	.word	0x007a1200
 8000e54:	20000558 	.word	0x20000558
 8000e58:	080057e0 	.word	0x080057e0
 8000e5c:	080057f8 	.word	0x080057f8

08000e60 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
//	FEB_Period_Elapsed();
    gu16_TIM2_OVC++;
 8000e68:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e6a:	881b      	ldrh	r3, [r3, #0]
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	3301      	adds	r3, #1
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e74:	801a      	strh	r2, [r3, #0]
}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	b002      	add	sp, #8
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	20000554 	.word	0x20000554

08000e84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e88:	b672      	cpsid	i
}
 8000e8a:	46c0      	nop			; (mov r8, r8)
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  while (1)
  {
	  FEB_Error_Handler();
 8000e8c:	f7ff fa64 	bl	8000358 <FEB_Error_Handler>
 8000e90:	e7fc      	b.n	8000e8c <Error_Handler+0x8>
	...

08000e94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <HAL_MspInit+0x44>)
 8000e9c:	699a      	ldr	r2, [r3, #24]
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <HAL_MspInit+0x44>)
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	619a      	str	r2, [r3, #24]
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <HAL_MspInit+0x44>)
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	2201      	movs	r2, #1
 8000eac:	4013      	ands	r3, r2
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <HAL_MspInit+0x44>)
 8000eb4:	69da      	ldr	r2, [r3, #28]
 8000eb6:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <HAL_MspInit+0x44>)
 8000eb8:	2180      	movs	r1, #128	; 0x80
 8000eba:	0549      	lsls	r1, r1, #21
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	61da      	str	r2, [r3, #28]
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <HAL_MspInit+0x44>)
 8000ec2:	69da      	ldr	r2, [r3, #28]
 8000ec4:	2380      	movs	r3, #128	; 0x80
 8000ec6:	055b      	lsls	r3, r3, #21
 8000ec8:	4013      	ands	r3, r2
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	b002      	add	sp, #8
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	40021000 	.word	0x40021000

08000edc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000edc:	b590      	push	{r4, r7, lr}
 8000ede:	b08b      	sub	sp, #44	; 0x2c
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	2414      	movs	r4, #20
 8000ee6:	193b      	adds	r3, r7, r4
 8000ee8:	0018      	movs	r0, r3
 8000eea:	2314      	movs	r3, #20
 8000eec:	001a      	movs	r2, r3
 8000eee:	2100      	movs	r1, #0
 8000ef0:	f003 ffac 	bl	8004e4c <memset>
  if(hcan->Instance==CAN)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a1d      	ldr	r2, [pc, #116]	; (8000f70 <HAL_CAN_MspInit+0x94>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d133      	bne.n	8000f66 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000efe:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <HAL_CAN_MspInit+0x98>)
 8000f00:	69da      	ldr	r2, [r3, #28]
 8000f02:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <HAL_CAN_MspInit+0x98>)
 8000f04:	2180      	movs	r1, #128	; 0x80
 8000f06:	0489      	lsls	r1, r1, #18
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	61da      	str	r2, [r3, #28]
 8000f0c:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <HAL_CAN_MspInit+0x98>)
 8000f0e:	69da      	ldr	r2, [r3, #28]
 8000f10:	2380      	movs	r3, #128	; 0x80
 8000f12:	049b      	lsls	r3, r3, #18
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <HAL_CAN_MspInit+0x98>)
 8000f1c:	695a      	ldr	r2, [r3, #20]
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <HAL_CAN_MspInit+0x98>)
 8000f20:	2180      	movs	r1, #128	; 0x80
 8000f22:	0289      	lsls	r1, r1, #10
 8000f24:	430a      	orrs	r2, r1
 8000f26:	615a      	str	r2, [r3, #20]
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <HAL_CAN_MspInit+0x98>)
 8000f2a:	695a      	ldr	r2, [r3, #20]
 8000f2c:	2380      	movs	r3, #128	; 0x80
 8000f2e:	029b      	lsls	r3, r3, #10
 8000f30:	4013      	ands	r3, r2
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f36:	193b      	adds	r3, r7, r4
 8000f38:	22c0      	movs	r2, #192	; 0xc0
 8000f3a:	0152      	lsls	r2, r2, #5
 8000f3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	0021      	movs	r1, r4
 8000f40:	187b      	adds	r3, r7, r1
 8000f42:	2202      	movs	r2, #2
 8000f44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	187b      	adds	r3, r7, r1
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f4c:	187b      	adds	r3, r7, r1
 8000f4e:	2203      	movs	r2, #3
 8000f50:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000f52:	187b      	adds	r3, r7, r1
 8000f54:	2204      	movs	r2, #4
 8000f56:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f58:	187a      	adds	r2, r7, r1
 8000f5a:	2390      	movs	r3, #144	; 0x90
 8000f5c:	05db      	lsls	r3, r3, #23
 8000f5e:	0011      	movs	r1, r2
 8000f60:	0018      	movs	r0, r3
 8000f62:	f000 fd87 	bl	8001a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	b00b      	add	sp, #44	; 0x2c
 8000f6c:	bd90      	pop	{r4, r7, pc}
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	40006400 	.word	0x40006400
 8000f74:	40021000 	.word	0x40021000

08000f78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08e      	sub	sp, #56	; 0x38
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	2324      	movs	r3, #36	; 0x24
 8000f82:	18fb      	adds	r3, r7, r3
 8000f84:	0018      	movs	r0, r3
 8000f86:	2314      	movs	r3, #20
 8000f88:	001a      	movs	r2, r3
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	f003 ff5e 	bl	8004e4c <memset>
  if(htim_base->Instance==TIM1)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a71      	ldr	r2, [pc, #452]	; (800115c <HAL_TIM_Base_MspInit+0x1e4>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d11e      	bne.n	8000fd8 <HAL_TIM_Base_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f9a:	4b71      	ldr	r3, [pc, #452]	; (8001160 <HAL_TIM_Base_MspInit+0x1e8>)
 8000f9c:	699a      	ldr	r2, [r3, #24]
 8000f9e:	4b70      	ldr	r3, [pc, #448]	; (8001160 <HAL_TIM_Base_MspInit+0x1e8>)
 8000fa0:	2180      	movs	r1, #128	; 0x80
 8000fa2:	0109      	lsls	r1, r1, #4
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	619a      	str	r2, [r3, #24]
 8000fa8:	4b6d      	ldr	r3, [pc, #436]	; (8001160 <HAL_TIM_Base_MspInit+0x1e8>)
 8000faa:	699a      	ldr	r2, [r3, #24]
 8000fac:	2380      	movs	r3, #128	; 0x80
 8000fae:	011b      	lsls	r3, r3, #4
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	623b      	str	r3, [r7, #32]
 8000fb4:	6a3b      	ldr	r3, [r7, #32]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2100      	movs	r1, #0
 8000fba:	200d      	movs	r0, #13
 8000fbc:	f000 fcaa 	bl	8001914 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000fc0:	200d      	movs	r0, #13
 8000fc2:	f000 fcbc 	bl	800193e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2100      	movs	r1, #0
 8000fca:	200e      	movs	r0, #14
 8000fcc:	f000 fca2 	bl	8001914 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000fd0:	200e      	movs	r0, #14
 8000fd2:	f000 fcb4 	bl	800193e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000fd6:	e0bd      	b.n	8001154 <HAL_TIM_Base_MspInit+0x1dc>
  else if(htim_base->Instance==TIM2)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	2380      	movs	r3, #128	; 0x80
 8000fde:	05db      	lsls	r3, r3, #23
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d139      	bne.n	8001058 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fe4:	4b5e      	ldr	r3, [pc, #376]	; (8001160 <HAL_TIM_Base_MspInit+0x1e8>)
 8000fe6:	69da      	ldr	r2, [r3, #28]
 8000fe8:	4b5d      	ldr	r3, [pc, #372]	; (8001160 <HAL_TIM_Base_MspInit+0x1e8>)
 8000fea:	2101      	movs	r1, #1
 8000fec:	430a      	orrs	r2, r1
 8000fee:	61da      	str	r2, [r3, #28]
 8000ff0:	4b5b      	ldr	r3, [pc, #364]	; (8001160 <HAL_TIM_Base_MspInit+0x1e8>)
 8000ff2:	69db      	ldr	r3, [r3, #28]
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	61fb      	str	r3, [r7, #28]
 8000ffa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffc:	4b58      	ldr	r3, [pc, #352]	; (8001160 <HAL_TIM_Base_MspInit+0x1e8>)
 8000ffe:	695a      	ldr	r2, [r3, #20]
 8001000:	4b57      	ldr	r3, [pc, #348]	; (8001160 <HAL_TIM_Base_MspInit+0x1e8>)
 8001002:	2180      	movs	r1, #128	; 0x80
 8001004:	0289      	lsls	r1, r1, #10
 8001006:	430a      	orrs	r2, r1
 8001008:	615a      	str	r2, [r3, #20]
 800100a:	4b55      	ldr	r3, [pc, #340]	; (8001160 <HAL_TIM_Base_MspInit+0x1e8>)
 800100c:	695a      	ldr	r2, [r3, #20]
 800100e:	2380      	movs	r3, #128	; 0x80
 8001010:	029b      	lsls	r3, r3, #10
 8001012:	4013      	ands	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
 8001016:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001018:	2124      	movs	r1, #36	; 0x24
 800101a:	187b      	adds	r3, r7, r1
 800101c:	2203      	movs	r2, #3
 800101e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	187b      	adds	r3, r7, r1
 8001022:	2202      	movs	r2, #2
 8001024:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	187b      	adds	r3, r7, r1
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	187b      	adds	r3, r7, r1
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001032:	187b      	adds	r3, r7, r1
 8001034:	2202      	movs	r2, #2
 8001036:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001038:	187a      	adds	r2, r7, r1
 800103a:	2390      	movs	r3, #144	; 0x90
 800103c:	05db      	lsls	r3, r3, #23
 800103e:	0011      	movs	r1, r2
 8001040:	0018      	movs	r0, r3
 8001042:	f000 fd17 	bl	8001a74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	2100      	movs	r1, #0
 800104a:	200f      	movs	r0, #15
 800104c:	f000 fc62 	bl	8001914 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001050:	200f      	movs	r0, #15
 8001052:	f000 fc74 	bl	800193e <HAL_NVIC_EnableIRQ>
}
 8001056:	e07d      	b.n	8001154 <HAL_TIM_Base_MspInit+0x1dc>
  else if(htim_base->Instance==TIM3)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a41      	ldr	r2, [pc, #260]	; (8001164 <HAL_TIM_Base_MspInit+0x1ec>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d138      	bne.n	80010d4 <HAL_TIM_Base_MspInit+0x15c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001062:	4b3f      	ldr	r3, [pc, #252]	; (8001160 <HAL_TIM_Base_MspInit+0x1e8>)
 8001064:	69da      	ldr	r2, [r3, #28]
 8001066:	4b3e      	ldr	r3, [pc, #248]	; (8001160 <HAL_TIM_Base_MspInit+0x1e8>)
 8001068:	2102      	movs	r1, #2
 800106a:	430a      	orrs	r2, r1
 800106c:	61da      	str	r2, [r3, #28]
 800106e:	4b3c      	ldr	r3, [pc, #240]	; (8001160 <HAL_TIM_Base_MspInit+0x1e8>)
 8001070:	69db      	ldr	r3, [r3, #28]
 8001072:	2202      	movs	r2, #2
 8001074:	4013      	ands	r3, r2
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800107a:	4b39      	ldr	r3, [pc, #228]	; (8001160 <HAL_TIM_Base_MspInit+0x1e8>)
 800107c:	695a      	ldr	r2, [r3, #20]
 800107e:	4b38      	ldr	r3, [pc, #224]	; (8001160 <HAL_TIM_Base_MspInit+0x1e8>)
 8001080:	2180      	movs	r1, #128	; 0x80
 8001082:	02c9      	lsls	r1, r1, #11
 8001084:	430a      	orrs	r2, r1
 8001086:	615a      	str	r2, [r3, #20]
 8001088:	4b35      	ldr	r3, [pc, #212]	; (8001160 <HAL_TIM_Base_MspInit+0x1e8>)
 800108a:	695a      	ldr	r2, [r3, #20]
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	02db      	lsls	r3, r3, #11
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001096:	2124      	movs	r1, #36	; 0x24
 8001098:	187b      	adds	r3, r7, r1
 800109a:	2203      	movs	r2, #3
 800109c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	187b      	adds	r3, r7, r1
 80010a0:	2202      	movs	r2, #2
 80010a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	187b      	adds	r3, r7, r1
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	187b      	adds	r3, r7, r1
 80010ac:	2200      	movs	r2, #0
 80010ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80010b0:	187b      	adds	r3, r7, r1
 80010b2:	2201      	movs	r2, #1
 80010b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b6:	187b      	adds	r3, r7, r1
 80010b8:	4a2b      	ldr	r2, [pc, #172]	; (8001168 <HAL_TIM_Base_MspInit+0x1f0>)
 80010ba:	0019      	movs	r1, r3
 80010bc:	0010      	movs	r0, r2
 80010be:	f000 fcd9 	bl	8001a74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2100      	movs	r1, #0
 80010c6:	2010      	movs	r0, #16
 80010c8:	f000 fc24 	bl	8001914 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010cc:	2010      	movs	r0, #16
 80010ce:	f000 fc36 	bl	800193e <HAL_NVIC_EnableIRQ>
}
 80010d2:	e03f      	b.n	8001154 <HAL_TIM_Base_MspInit+0x1dc>
  else if(htim_base->Instance==TIM14)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a24      	ldr	r2, [pc, #144]	; (800116c <HAL_TIM_Base_MspInit+0x1f4>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d13a      	bne.n	8001154 <HAL_TIM_Base_MspInit+0x1dc>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80010de:	4b20      	ldr	r3, [pc, #128]	; (8001160 <HAL_TIM_Base_MspInit+0x1e8>)
 80010e0:	69da      	ldr	r2, [r3, #28]
 80010e2:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <HAL_TIM_Base_MspInit+0x1e8>)
 80010e4:	2180      	movs	r1, #128	; 0x80
 80010e6:	0049      	lsls	r1, r1, #1
 80010e8:	430a      	orrs	r2, r1
 80010ea:	61da      	str	r2, [r3, #28]
 80010ec:	4b1c      	ldr	r3, [pc, #112]	; (8001160 <HAL_TIM_Base_MspInit+0x1e8>)
 80010ee:	69da      	ldr	r2, [r3, #28]
 80010f0:	2380      	movs	r3, #128	; 0x80
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	4013      	ands	r3, r2
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	4b19      	ldr	r3, [pc, #100]	; (8001160 <HAL_TIM_Base_MspInit+0x1e8>)
 80010fc:	695a      	ldr	r2, [r3, #20]
 80010fe:	4b18      	ldr	r3, [pc, #96]	; (8001160 <HAL_TIM_Base_MspInit+0x1e8>)
 8001100:	2180      	movs	r1, #128	; 0x80
 8001102:	0289      	lsls	r1, r1, #10
 8001104:	430a      	orrs	r2, r1
 8001106:	615a      	str	r2, [r3, #20]
 8001108:	4b15      	ldr	r3, [pc, #84]	; (8001160 <HAL_TIM_Base_MspInit+0x1e8>)
 800110a:	695a      	ldr	r2, [r3, #20]
 800110c:	2380      	movs	r3, #128	; 0x80
 800110e:	029b      	lsls	r3, r3, #10
 8001110:	4013      	ands	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001116:	2124      	movs	r1, #36	; 0x24
 8001118:	187b      	adds	r3, r7, r1
 800111a:	2210      	movs	r2, #16
 800111c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	187b      	adds	r3, r7, r1
 8001120:	2202      	movs	r2, #2
 8001122:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	187b      	adds	r3, r7, r1
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	187b      	adds	r3, r7, r1
 800112c:	2200      	movs	r2, #0
 800112e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8001130:	187b      	adds	r3, r7, r1
 8001132:	2204      	movs	r2, #4
 8001134:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001136:	187a      	adds	r2, r7, r1
 8001138:	2390      	movs	r3, #144	; 0x90
 800113a:	05db      	lsls	r3, r3, #23
 800113c:	0011      	movs	r1, r2
 800113e:	0018      	movs	r0, r3
 8001140:	f000 fc98 	bl	8001a74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001144:	2200      	movs	r2, #0
 8001146:	2100      	movs	r1, #0
 8001148:	2013      	movs	r0, #19
 800114a:	f000 fbe3 	bl	8001914 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 800114e:	2013      	movs	r0, #19
 8001150:	f000 fbf5 	bl	800193e <HAL_NVIC_EnableIRQ>
}
 8001154:	46c0      	nop			; (mov r8, r8)
 8001156:	46bd      	mov	sp, r7
 8001158:	b00e      	add	sp, #56	; 0x38
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40012c00 	.word	0x40012c00
 8001160:	40021000 	.word	0x40021000
 8001164:	40000400 	.word	0x40000400
 8001168:	48000400 	.word	0x48000400
 800116c:	40002000 	.word	0x40002000

08001170 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001170:	b590      	push	{r4, r7, lr}
 8001172:	b08b      	sub	sp, #44	; 0x2c
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	2414      	movs	r4, #20
 800117a:	193b      	adds	r3, r7, r4
 800117c:	0018      	movs	r0, r3
 800117e:	2314      	movs	r3, #20
 8001180:	001a      	movs	r2, r3
 8001182:	2100      	movs	r1, #0
 8001184:	f003 fe62 	bl	8004e4c <memset>
  if(htim->Instance==TIM1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a2b      	ldr	r2, [pc, #172]	; (800123c <HAL_TIM_MspPostInit+0xcc>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d126      	bne.n	80011e0 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001192:	4b2b      	ldr	r3, [pc, #172]	; (8001240 <HAL_TIM_MspPostInit+0xd0>)
 8001194:	695a      	ldr	r2, [r3, #20]
 8001196:	4b2a      	ldr	r3, [pc, #168]	; (8001240 <HAL_TIM_MspPostInit+0xd0>)
 8001198:	2180      	movs	r1, #128	; 0x80
 800119a:	0289      	lsls	r1, r1, #10
 800119c:	430a      	orrs	r2, r1
 800119e:	615a      	str	r2, [r3, #20]
 80011a0:	4b27      	ldr	r3, [pc, #156]	; (8001240 <HAL_TIM_MspPostInit+0xd0>)
 80011a2:	695a      	ldr	r2, [r3, #20]
 80011a4:	2380      	movs	r3, #128	; 0x80
 80011a6:	029b      	lsls	r3, r3, #10
 80011a8:	4013      	ands	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80011ae:	193b      	adds	r3, r7, r4
 80011b0:	22e0      	movs	r2, #224	; 0xe0
 80011b2:	00d2      	lsls	r2, r2, #3
 80011b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	0021      	movs	r1, r4
 80011b8:	187b      	adds	r3, r7, r1
 80011ba:	2202      	movs	r2, #2
 80011bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	187b      	adds	r3, r7, r1
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	187b      	adds	r3, r7, r1
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80011ca:	187b      	adds	r3, r7, r1
 80011cc:	2202      	movs	r2, #2
 80011ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d0:	187a      	adds	r2, r7, r1
 80011d2:	2390      	movs	r3, #144	; 0x90
 80011d4:	05db      	lsls	r3, r3, #23
 80011d6:	0011      	movs	r1, r2
 80011d8:	0018      	movs	r0, r3
 80011da:	f000 fc4b 	bl	8001a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80011de:	e028      	b.n	8001232 <HAL_TIM_MspPostInit+0xc2>
  else if(htim->Instance==TIM3)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a17      	ldr	r2, [pc, #92]	; (8001244 <HAL_TIM_MspPostInit+0xd4>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d123      	bne.n	8001232 <HAL_TIM_MspPostInit+0xc2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <HAL_TIM_MspPostInit+0xd0>)
 80011ec:	695a      	ldr	r2, [r3, #20]
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <HAL_TIM_MspPostInit+0xd0>)
 80011f0:	2180      	movs	r1, #128	; 0x80
 80011f2:	02c9      	lsls	r1, r1, #11
 80011f4:	430a      	orrs	r2, r1
 80011f6:	615a      	str	r2, [r3, #20]
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <HAL_TIM_MspPostInit+0xd0>)
 80011fa:	695a      	ldr	r2, [r3, #20]
 80011fc:	2380      	movs	r3, #128	; 0x80
 80011fe:	02db      	lsls	r3, r3, #11
 8001200:	4013      	ands	r3, r2
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001206:	2114      	movs	r1, #20
 8001208:	187b      	adds	r3, r7, r1
 800120a:	2230      	movs	r2, #48	; 0x30
 800120c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	187b      	adds	r3, r7, r1
 8001210:	2202      	movs	r2, #2
 8001212:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	187b      	adds	r3, r7, r1
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	187b      	adds	r3, r7, r1
 800121c:	2200      	movs	r2, #0
 800121e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001220:	187b      	adds	r3, r7, r1
 8001222:	2201      	movs	r2, #1
 8001224:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001226:	187b      	adds	r3, r7, r1
 8001228:	4a07      	ldr	r2, [pc, #28]	; (8001248 <HAL_TIM_MspPostInit+0xd8>)
 800122a:	0019      	movs	r1, r3
 800122c:	0010      	movs	r0, r2
 800122e:	f000 fc21 	bl	8001a74 <HAL_GPIO_Init>
}
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	46bd      	mov	sp, r7
 8001236:	b00b      	add	sp, #44	; 0x2c
 8001238:	bd90      	pop	{r4, r7, pc}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	40012c00 	.word	0x40012c00
 8001240:	40021000 	.word	0x40021000
 8001244:	40000400 	.word	0x40000400
 8001248:	48000400 	.word	0x48000400

0800124c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800124c:	b590      	push	{r4, r7, lr}
 800124e:	b08b      	sub	sp, #44	; 0x2c
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	2414      	movs	r4, #20
 8001256:	193b      	adds	r3, r7, r4
 8001258:	0018      	movs	r0, r3
 800125a:	2314      	movs	r3, #20
 800125c:	001a      	movs	r2, r3
 800125e:	2100      	movs	r1, #0
 8001260:	f003 fdf4 	bl	8004e4c <memset>
  if(huart->Instance==USART2)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a20      	ldr	r2, [pc, #128]	; (80012ec <HAL_UART_MspInit+0xa0>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d13a      	bne.n	80012e4 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800126e:	4b20      	ldr	r3, [pc, #128]	; (80012f0 <HAL_UART_MspInit+0xa4>)
 8001270:	69da      	ldr	r2, [r3, #28]
 8001272:	4b1f      	ldr	r3, [pc, #124]	; (80012f0 <HAL_UART_MspInit+0xa4>)
 8001274:	2180      	movs	r1, #128	; 0x80
 8001276:	0289      	lsls	r1, r1, #10
 8001278:	430a      	orrs	r2, r1
 800127a:	61da      	str	r2, [r3, #28]
 800127c:	4b1c      	ldr	r3, [pc, #112]	; (80012f0 <HAL_UART_MspInit+0xa4>)
 800127e:	69da      	ldr	r2, [r3, #28]
 8001280:	2380      	movs	r3, #128	; 0x80
 8001282:	029b      	lsls	r3, r3, #10
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128a:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <HAL_UART_MspInit+0xa4>)
 800128c:	695a      	ldr	r2, [r3, #20]
 800128e:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <HAL_UART_MspInit+0xa4>)
 8001290:	2180      	movs	r1, #128	; 0x80
 8001292:	0289      	lsls	r1, r1, #10
 8001294:	430a      	orrs	r2, r1
 8001296:	615a      	str	r2, [r3, #20]
 8001298:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <HAL_UART_MspInit+0xa4>)
 800129a:	695a      	ldr	r2, [r3, #20]
 800129c:	2380      	movs	r3, #128	; 0x80
 800129e:	029b      	lsls	r3, r3, #10
 80012a0:	4013      	ands	r3, r2
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012a6:	0021      	movs	r1, r4
 80012a8:	187b      	adds	r3, r7, r1
 80012aa:	220c      	movs	r2, #12
 80012ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	187b      	adds	r3, r7, r1
 80012b0:	2202      	movs	r2, #2
 80012b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	187b      	adds	r3, r7, r1
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012ba:	187b      	adds	r3, r7, r1
 80012bc:	2203      	movs	r2, #3
 80012be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80012c0:	187b      	adds	r3, r7, r1
 80012c2:	2201      	movs	r2, #1
 80012c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c6:	187a      	adds	r2, r7, r1
 80012c8:	2390      	movs	r3, #144	; 0x90
 80012ca:	05db      	lsls	r3, r3, #23
 80012cc:	0011      	movs	r1, r2
 80012ce:	0018      	movs	r0, r3
 80012d0:	f000 fbd0 	bl	8001a74 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012d4:	2200      	movs	r2, #0
 80012d6:	2100      	movs	r1, #0
 80012d8:	201c      	movs	r0, #28
 80012da:	f000 fb1b 	bl	8001914 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012de:	201c      	movs	r0, #28
 80012e0:	f000 fb2d 	bl	800193e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012e4:	46c0      	nop			; (mov r8, r8)
 80012e6:	46bd      	mov	sp, r7
 80012e8:	b00b      	add	sp, #44	; 0x2c
 80012ea:	bd90      	pop	{r4, r7, pc}
 80012ec:	40004400 	.word	0x40004400
 80012f0:	40021000 	.word	0x40021000

080012f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <NMI_Handler+0x4>

080012fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012fe:	e7fe      	b.n	80012fe <HardFault_Handler+0x4>

08001300 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001304:	46c0      	nop			; (mov r8, r8)
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800130e:	46c0      	nop			; (mov r8, r8)
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001318:	f000 f912 	bl	8001540 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800131c:	46c0      	nop			; (mov r8, r8)
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001328:	4b03      	ldr	r3, [pc, #12]	; (8001338 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 800132a:	0018      	movs	r0, r3
 800132c:	f001 fd66 	bl	8002dfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001330:	46c0      	nop			; (mov r8, r8)
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	20000584 	.word	0x20000584

0800133c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001340:	4b03      	ldr	r3, [pc, #12]	; (8001350 <TIM1_CC_IRQHandler+0x14>)
 8001342:	0018      	movs	r0, r3
 8001344:	f001 fd5a 	bl	8002dfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001348:	46c0      	nop			; (mov r8, r8)
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	20000584 	.word	0x20000584

08001354 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001358:	4b03      	ldr	r3, [pc, #12]	; (8001368 <TIM2_IRQHandler+0x14>)
 800135a:	0018      	movs	r0, r3
 800135c:	f001 fd4e 	bl	8002dfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001360:	46c0      	nop			; (mov r8, r8)
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	200005cc 	.word	0x200005cc

0800136c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	//FEB_Test_PWM();

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <TIM3_IRQHandler+0x14>)
 8001372:	0018      	movs	r0, r3
 8001374:	f001 fd42 	bl	8002dfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001378:	46c0      	nop			; (mov r8, r8)
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	20000614 	.word	0x20000614

08001384 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001388:	4b03      	ldr	r3, [pc, #12]	; (8001398 <TIM14_IRQHandler+0x14>)
 800138a:	0018      	movs	r0, r3
 800138c:	f001 fd36 	bl	8002dfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001390:	46c0      	nop			; (mov r8, r8)
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	2000065c 	.word	0x2000065c

0800139c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013a0:	4b03      	ldr	r3, [pc, #12]	; (80013b0 <USART2_IRQHandler+0x14>)
 80013a2:	0018      	movs	r0, r3
 80013a4:	f002 fe82 	bl	80040ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013a8:	46c0      	nop			; (mov r8, r8)
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	200006a4 	.word	0x200006a4

080013b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013bc:	4a14      	ldr	r2, [pc, #80]	; (8001410 <_sbrk+0x5c>)
 80013be:	4b15      	ldr	r3, [pc, #84]	; (8001414 <_sbrk+0x60>)
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c8:	4b13      	ldr	r3, [pc, #76]	; (8001418 <_sbrk+0x64>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d102      	bne.n	80013d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <_sbrk+0x64>)
 80013d2:	4a12      	ldr	r2, [pc, #72]	; (800141c <_sbrk+0x68>)
 80013d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <_sbrk+0x64>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	18d3      	adds	r3, r2, r3
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d207      	bcs.n	80013f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013e4:	f003 fd3a 	bl	8004e5c <__errno>
 80013e8:	0003      	movs	r3, r0
 80013ea:	220c      	movs	r2, #12
 80013ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ee:	2301      	movs	r3, #1
 80013f0:	425b      	negs	r3, r3
 80013f2:	e009      	b.n	8001408 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <_sbrk+0x64>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013fa:	4b07      	ldr	r3, [pc, #28]	; (8001418 <_sbrk+0x64>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	18d2      	adds	r2, r2, r3
 8001402:	4b05      	ldr	r3, [pc, #20]	; (8001418 <_sbrk+0x64>)
 8001404:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001406:	68fb      	ldr	r3, [r7, #12]
}
 8001408:	0018      	movs	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	b006      	add	sp, #24
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20001800 	.word	0x20001800
 8001414:	00000400 	.word	0x00000400
 8001418:	2000072c 	.word	0x2000072c
 800141c:	20000880 	.word	0x20000880

08001420 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001424:	46c0      	nop			; (mov r8, r8)
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800142c:	4813      	ldr	r0, [pc, #76]	; (800147c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800142e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001430:	f7ff fff6 	bl	8001420 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001434:	4812      	ldr	r0, [pc, #72]	; (8001480 <LoopForever+0x6>)
    LDR R1, [R0]
 8001436:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001438:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800143a:	4a12      	ldr	r2, [pc, #72]	; (8001484 <LoopForever+0xa>)
    CMP R1, R2
 800143c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800143e:	d105      	bne.n	800144c <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001440:	4811      	ldr	r0, [pc, #68]	; (8001488 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001442:	4912      	ldr	r1, [pc, #72]	; (800148c <LoopForever+0x12>)
    STR R1, [R0]
 8001444:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001446:	4812      	ldr	r0, [pc, #72]	; (8001490 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001448:	4912      	ldr	r1, [pc, #72]	; (8001494 <LoopForever+0x1a>)
    STR R1, [R0]
 800144a:	6001      	str	r1, [r0, #0]

0800144c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800144c:	4812      	ldr	r0, [pc, #72]	; (8001498 <LoopForever+0x1e>)
  ldr r1, =_edata
 800144e:	4913      	ldr	r1, [pc, #76]	; (800149c <LoopForever+0x22>)
  ldr r2, =_sidata
 8001450:	4a13      	ldr	r2, [pc, #76]	; (80014a0 <LoopForever+0x26>)
  movs r3, #0
 8001452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001454:	e002      	b.n	800145c <LoopCopyDataInit>

08001456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145a:	3304      	adds	r3, #4

0800145c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800145c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001460:	d3f9      	bcc.n	8001456 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001462:	4a10      	ldr	r2, [pc, #64]	; (80014a4 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001464:	4c10      	ldr	r4, [pc, #64]	; (80014a8 <LoopForever+0x2e>)
  movs r3, #0
 8001466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001468:	e001      	b.n	800146e <LoopFillZerobss>

0800146a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800146c:	3204      	adds	r2, #4

0800146e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001470:	d3fb      	bcc.n	800146a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001472:	f003 fcf9 	bl	8004e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001476:	f7fe ffff 	bl	8000478 <main>

0800147a <LoopForever>:

LoopForever:
    b LoopForever
 800147a:	e7fe      	b.n	800147a <LoopForever>
  ldr   r0, =_estack
 800147c:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8001480:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001484:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001488:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 800148c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001490:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001494:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800149c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80014a0:	08005880 	.word	0x08005880
  ldr r2, =_sbss
 80014a4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80014a8:	2000087c 	.word	0x2000087c

080014ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014ac:	e7fe      	b.n	80014ac <ADC1_IRQHandler>
	...

080014b0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014b4:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <HAL_Init+0x24>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_Init+0x24>)
 80014ba:	2110      	movs	r1, #16
 80014bc:	430a      	orrs	r2, r1
 80014be:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80014c0:	2003      	movs	r0, #3
 80014c2:	f000 f809 	bl	80014d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c6:	f7ff fce5 	bl	8000e94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	0018      	movs	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	40022000 	.word	0x40022000

080014d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d8:	b590      	push	{r4, r7, lr}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <HAL_InitTick+0x5c>)
 80014e2:	681c      	ldr	r4, [r3, #0]
 80014e4:	4b14      	ldr	r3, [pc, #80]	; (8001538 <HAL_InitTick+0x60>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	0019      	movs	r1, r3
 80014ea:	23fa      	movs	r3, #250	; 0xfa
 80014ec:	0098      	lsls	r0, r3, #2
 80014ee:	f7fe fe15 	bl	800011c <__udivsi3>
 80014f2:	0003      	movs	r3, r0
 80014f4:	0019      	movs	r1, r3
 80014f6:	0020      	movs	r0, r4
 80014f8:	f7fe fe10 	bl	800011c <__udivsi3>
 80014fc:	0003      	movs	r3, r0
 80014fe:	0018      	movs	r0, r3
 8001500:	f000 fa2d 	bl	800195e <HAL_SYSTICK_Config>
 8001504:	1e03      	subs	r3, r0, #0
 8001506:	d001      	beq.n	800150c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e00f      	b.n	800152c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b03      	cmp	r3, #3
 8001510:	d80b      	bhi.n	800152a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	2301      	movs	r3, #1
 8001516:	425b      	negs	r3, r3
 8001518:	2200      	movs	r2, #0
 800151a:	0018      	movs	r0, r3
 800151c:	f000 f9fa 	bl	8001914 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_InitTick+0x64>)
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001526:	2300      	movs	r3, #0
 8001528:	e000      	b.n	800152c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
}
 800152c:	0018      	movs	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	b003      	add	sp, #12
 8001532:	bd90      	pop	{r4, r7, pc}
 8001534:	20000000 	.word	0x20000000
 8001538:	20000008 	.word	0x20000008
 800153c:	20000004 	.word	0x20000004

08001540 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <HAL_IncTick+0x1c>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	001a      	movs	r2, r3
 800154a:	4b05      	ldr	r3, [pc, #20]	; (8001560 <HAL_IncTick+0x20>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	18d2      	adds	r2, r2, r3
 8001550:	4b03      	ldr	r3, [pc, #12]	; (8001560 <HAL_IncTick+0x20>)
 8001552:	601a      	str	r2, [r3, #0]
}
 8001554:	46c0      	nop			; (mov r8, r8)
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	20000008 	.word	0x20000008
 8001560:	20000730 	.word	0x20000730

08001564 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  return uwTick;
 8001568:	4b02      	ldr	r3, [pc, #8]	; (8001574 <HAL_GetTick+0x10>)
 800156a:	681b      	ldr	r3, [r3, #0]
}
 800156c:	0018      	movs	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	20000730 	.word	0x20000730

08001578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001580:	f7ff fff0 	bl	8001564 <HAL_GetTick>
 8001584:	0003      	movs	r3, r0
 8001586:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	3301      	adds	r3, #1
 8001590:	d005      	beq.n	800159e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001592:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <HAL_Delay+0x44>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	001a      	movs	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	189b      	adds	r3, r3, r2
 800159c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	f7ff ffe0 	bl	8001564 <HAL_GetTick>
 80015a4:	0002      	movs	r2, r0
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d8f7      	bhi.n	80015a0 <HAL_Delay+0x28>
  {
  }
}
 80015b0:	46c0      	nop			; (mov r8, r8)
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	46bd      	mov	sp, r7
 80015b6:	b004      	add	sp, #16
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	20000008 	.word	0x20000008

080015c0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e0f0      	b.n	80017b4 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2220      	movs	r2, #32
 80015d6:	5c9b      	ldrb	r3, [r3, r2]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d103      	bne.n	80015e6 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	0018      	movs	r0, r3
 80015e2:	f7ff fc7b 	bl	8000edc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2101      	movs	r1, #1
 80015f2:	430a      	orrs	r2, r1
 80015f4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015f6:	f7ff ffb5 	bl	8001564 <HAL_GetTick>
 80015fa:	0003      	movs	r3, r0
 80015fc:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015fe:	e013      	b.n	8001628 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001600:	f7ff ffb0 	bl	8001564 <HAL_GetTick>
 8001604:	0002      	movs	r2, r0
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b0a      	cmp	r3, #10
 800160c:	d90c      	bls.n	8001628 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001612:	2280      	movs	r2, #128	; 0x80
 8001614:	0292      	lsls	r2, r2, #10
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2220      	movs	r2, #32
 8001620:	2105      	movs	r1, #5
 8001622:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e0c5      	b.n	80017b4 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	4013      	ands	r3, r2
 8001632:	d0e5      	beq.n	8001600 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2102      	movs	r1, #2
 8001640:	438a      	bics	r2, r1
 8001642:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001644:	f7ff ff8e 	bl	8001564 <HAL_GetTick>
 8001648:	0003      	movs	r3, r0
 800164a:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800164c:	e013      	b.n	8001676 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800164e:	f7ff ff89 	bl	8001564 <HAL_GetTick>
 8001652:	0002      	movs	r2, r0
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b0a      	cmp	r3, #10
 800165a:	d90c      	bls.n	8001676 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001660:	2280      	movs	r2, #128	; 0x80
 8001662:	0292      	lsls	r2, r2, #10
 8001664:	431a      	orrs	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2220      	movs	r2, #32
 800166e:	2105      	movs	r1, #5
 8001670:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e09e      	b.n	80017b4 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2202      	movs	r2, #2
 800167e:	4013      	ands	r3, r2
 8001680:	d1e5      	bne.n	800164e <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	7e1b      	ldrb	r3, [r3, #24]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d108      	bne.n	800169c <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2180      	movs	r1, #128	; 0x80
 8001696:	430a      	orrs	r2, r1
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	e007      	b.n	80016ac <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2180      	movs	r1, #128	; 0x80
 80016a8:	438a      	bics	r2, r1
 80016aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	7e5b      	ldrb	r3, [r3, #25]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d108      	bne.n	80016c6 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2140      	movs	r1, #64	; 0x40
 80016c0:	430a      	orrs	r2, r1
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	e007      	b.n	80016d6 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2140      	movs	r1, #64	; 0x40
 80016d2:	438a      	bics	r2, r1
 80016d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	7e9b      	ldrb	r3, [r3, #26]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d108      	bne.n	80016f0 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2120      	movs	r1, #32
 80016ea:	430a      	orrs	r2, r1
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	e007      	b.n	8001700 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2120      	movs	r1, #32
 80016fc:	438a      	bics	r2, r1
 80016fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	7edb      	ldrb	r3, [r3, #27]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d108      	bne.n	800171a <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2110      	movs	r1, #16
 8001714:	438a      	bics	r2, r1
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	e007      	b.n	800172a <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2110      	movs	r1, #16
 8001726:	430a      	orrs	r2, r1
 8001728:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	7f1b      	ldrb	r3, [r3, #28]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d108      	bne.n	8001744 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2108      	movs	r1, #8
 800173e:	430a      	orrs	r2, r1
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	e007      	b.n	8001754 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2108      	movs	r1, #8
 8001750:	438a      	bics	r2, r1
 8001752:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	7f5b      	ldrb	r3, [r3, #29]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d108      	bne.n	800176e <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2104      	movs	r1, #4
 8001768:	430a      	orrs	r2, r1
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	e007      	b.n	800177e <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2104      	movs	r1, #4
 800177a:	438a      	bics	r2, r1
 800177c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	431a      	orrs	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	431a      	orrs	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	431a      	orrs	r2, r3
 8001794:	0011      	movs	r1, r2
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	1e5a      	subs	r2, r3, #1
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	430a      	orrs	r2, r1
 80017a2:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2220      	movs	r2, #32
 80017ae:	2101      	movs	r1, #1
 80017b0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	0018      	movs	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	b004      	add	sp, #16
 80017ba:	bd80      	pop	{r7, pc}

080017bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	0002      	movs	r2, r0
 80017c4:	1dfb      	adds	r3, r7, #7
 80017c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017c8:	1dfb      	adds	r3, r7, #7
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b7f      	cmp	r3, #127	; 0x7f
 80017ce:	d809      	bhi.n	80017e4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d0:	1dfb      	adds	r3, r7, #7
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	001a      	movs	r2, r3
 80017d6:	231f      	movs	r3, #31
 80017d8:	401a      	ands	r2, r3
 80017da:	4b04      	ldr	r3, [pc, #16]	; (80017ec <__NVIC_EnableIRQ+0x30>)
 80017dc:	2101      	movs	r1, #1
 80017de:	4091      	lsls	r1, r2
 80017e0:	000a      	movs	r2, r1
 80017e2:	601a      	str	r2, [r3, #0]
  }
}
 80017e4:	46c0      	nop			; (mov r8, r8)
 80017e6:	46bd      	mov	sp, r7
 80017e8:	b002      	add	sp, #8
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	e000e100 	.word	0xe000e100

080017f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f0:	b590      	push	{r4, r7, lr}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	0002      	movs	r2, r0
 80017f8:	6039      	str	r1, [r7, #0]
 80017fa:	1dfb      	adds	r3, r7, #7
 80017fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017fe:	1dfb      	adds	r3, r7, #7
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b7f      	cmp	r3, #127	; 0x7f
 8001804:	d828      	bhi.n	8001858 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001806:	4a2f      	ldr	r2, [pc, #188]	; (80018c4 <__NVIC_SetPriority+0xd4>)
 8001808:	1dfb      	adds	r3, r7, #7
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	b25b      	sxtb	r3, r3
 800180e:	089b      	lsrs	r3, r3, #2
 8001810:	33c0      	adds	r3, #192	; 0xc0
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	589b      	ldr	r3, [r3, r2]
 8001816:	1dfa      	adds	r2, r7, #7
 8001818:	7812      	ldrb	r2, [r2, #0]
 800181a:	0011      	movs	r1, r2
 800181c:	2203      	movs	r2, #3
 800181e:	400a      	ands	r2, r1
 8001820:	00d2      	lsls	r2, r2, #3
 8001822:	21ff      	movs	r1, #255	; 0xff
 8001824:	4091      	lsls	r1, r2
 8001826:	000a      	movs	r2, r1
 8001828:	43d2      	mvns	r2, r2
 800182a:	401a      	ands	r2, r3
 800182c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	019b      	lsls	r3, r3, #6
 8001832:	22ff      	movs	r2, #255	; 0xff
 8001834:	401a      	ands	r2, r3
 8001836:	1dfb      	adds	r3, r7, #7
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	0018      	movs	r0, r3
 800183c:	2303      	movs	r3, #3
 800183e:	4003      	ands	r3, r0
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001844:	481f      	ldr	r0, [pc, #124]	; (80018c4 <__NVIC_SetPriority+0xd4>)
 8001846:	1dfb      	adds	r3, r7, #7
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	b25b      	sxtb	r3, r3
 800184c:	089b      	lsrs	r3, r3, #2
 800184e:	430a      	orrs	r2, r1
 8001850:	33c0      	adds	r3, #192	; 0xc0
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001856:	e031      	b.n	80018bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001858:	4a1b      	ldr	r2, [pc, #108]	; (80018c8 <__NVIC_SetPriority+0xd8>)
 800185a:	1dfb      	adds	r3, r7, #7
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	0019      	movs	r1, r3
 8001860:	230f      	movs	r3, #15
 8001862:	400b      	ands	r3, r1
 8001864:	3b08      	subs	r3, #8
 8001866:	089b      	lsrs	r3, r3, #2
 8001868:	3306      	adds	r3, #6
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	18d3      	adds	r3, r2, r3
 800186e:	3304      	adds	r3, #4
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	1dfa      	adds	r2, r7, #7
 8001874:	7812      	ldrb	r2, [r2, #0]
 8001876:	0011      	movs	r1, r2
 8001878:	2203      	movs	r2, #3
 800187a:	400a      	ands	r2, r1
 800187c:	00d2      	lsls	r2, r2, #3
 800187e:	21ff      	movs	r1, #255	; 0xff
 8001880:	4091      	lsls	r1, r2
 8001882:	000a      	movs	r2, r1
 8001884:	43d2      	mvns	r2, r2
 8001886:	401a      	ands	r2, r3
 8001888:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	019b      	lsls	r3, r3, #6
 800188e:	22ff      	movs	r2, #255	; 0xff
 8001890:	401a      	ands	r2, r3
 8001892:	1dfb      	adds	r3, r7, #7
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	0018      	movs	r0, r3
 8001898:	2303      	movs	r3, #3
 800189a:	4003      	ands	r3, r0
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018a0:	4809      	ldr	r0, [pc, #36]	; (80018c8 <__NVIC_SetPriority+0xd8>)
 80018a2:	1dfb      	adds	r3, r7, #7
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	001c      	movs	r4, r3
 80018a8:	230f      	movs	r3, #15
 80018aa:	4023      	ands	r3, r4
 80018ac:	3b08      	subs	r3, #8
 80018ae:	089b      	lsrs	r3, r3, #2
 80018b0:	430a      	orrs	r2, r1
 80018b2:	3306      	adds	r3, #6
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	18c3      	adds	r3, r0, r3
 80018b8:	3304      	adds	r3, #4
 80018ba:	601a      	str	r2, [r3, #0]
}
 80018bc:	46c0      	nop			; (mov r8, r8)
 80018be:	46bd      	mov	sp, r7
 80018c0:	b003      	add	sp, #12
 80018c2:	bd90      	pop	{r4, r7, pc}
 80018c4:	e000e100 	.word	0xe000e100
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	1e5a      	subs	r2, r3, #1
 80018d8:	2380      	movs	r3, #128	; 0x80
 80018da:	045b      	lsls	r3, r3, #17
 80018dc:	429a      	cmp	r2, r3
 80018de:	d301      	bcc.n	80018e4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018e0:	2301      	movs	r3, #1
 80018e2:	e010      	b.n	8001906 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018e4:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <SysTick_Config+0x44>)
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	3a01      	subs	r2, #1
 80018ea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ec:	2301      	movs	r3, #1
 80018ee:	425b      	negs	r3, r3
 80018f0:	2103      	movs	r1, #3
 80018f2:	0018      	movs	r0, r3
 80018f4:	f7ff ff7c 	bl	80017f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f8:	4b05      	ldr	r3, [pc, #20]	; (8001910 <SysTick_Config+0x44>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018fe:	4b04      	ldr	r3, [pc, #16]	; (8001910 <SysTick_Config+0x44>)
 8001900:	2207      	movs	r2, #7
 8001902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001904:	2300      	movs	r3, #0
}
 8001906:	0018      	movs	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	b002      	add	sp, #8
 800190c:	bd80      	pop	{r7, pc}
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	e000e010 	.word	0xe000e010

08001914 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
 800191e:	210f      	movs	r1, #15
 8001920:	187b      	adds	r3, r7, r1
 8001922:	1c02      	adds	r2, r0, #0
 8001924:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	187b      	adds	r3, r7, r1
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	b25b      	sxtb	r3, r3
 800192e:	0011      	movs	r1, r2
 8001930:	0018      	movs	r0, r3
 8001932:	f7ff ff5d 	bl	80017f0 <__NVIC_SetPriority>
}
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	46bd      	mov	sp, r7
 800193a:	b004      	add	sp, #16
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	0002      	movs	r2, r0
 8001946:	1dfb      	adds	r3, r7, #7
 8001948:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800194a:	1dfb      	adds	r3, r7, #7
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	b25b      	sxtb	r3, r3
 8001950:	0018      	movs	r0, r3
 8001952:	f7ff ff33 	bl	80017bc <__NVIC_EnableIRQ>
}
 8001956:	46c0      	nop			; (mov r8, r8)
 8001958:	46bd      	mov	sp, r7
 800195a:	b002      	add	sp, #8
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	0018      	movs	r0, r3
 800196a:	f7ff ffaf 	bl	80018cc <SysTick_Config>
 800196e:	0003      	movs	r3, r0
}
 8001970:	0018      	movs	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	b002      	add	sp, #8
 8001976:	bd80      	pop	{r7, pc}

08001978 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2221      	movs	r2, #33	; 0x21
 8001984:	5c9b      	ldrb	r3, [r3, r2]
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d008      	beq.n	800199e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2204      	movs	r2, #4
 8001990:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2220      	movs	r2, #32
 8001996:	2100      	movs	r1, #0
 8001998:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e020      	b.n	80019e0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	210e      	movs	r1, #14
 80019aa:	438a      	bics	r2, r1
 80019ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2101      	movs	r1, #1
 80019ba:	438a      	bics	r2, r1
 80019bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c6:	2101      	movs	r1, #1
 80019c8:	4091      	lsls	r1, r2
 80019ca:	000a      	movs	r2, r1
 80019cc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2221      	movs	r2, #33	; 0x21
 80019d2:	2101      	movs	r1, #1
 80019d4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2220      	movs	r2, #32
 80019da:	2100      	movs	r1, #0
 80019dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	0018      	movs	r0, r3
 80019e2:	46bd      	mov	sp, r7
 80019e4:	b002      	add	sp, #8
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019f0:	210f      	movs	r1, #15
 80019f2:	187b      	adds	r3, r7, r1
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2221      	movs	r2, #33	; 0x21
 80019fc:	5c9b      	ldrb	r3, [r3, r2]
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d006      	beq.n	8001a12 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2204      	movs	r2, #4
 8001a08:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001a0a:	187b      	adds	r3, r7, r1
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	701a      	strb	r2, [r3, #0]
 8001a10:	e028      	b.n	8001a64 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	210e      	movs	r1, #14
 8001a1e:	438a      	bics	r2, r1
 8001a20:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	438a      	bics	r2, r1
 8001a30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	4091      	lsls	r1, r2
 8001a3e:	000a      	movs	r2, r1
 8001a40:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2221      	movs	r2, #33	; 0x21
 8001a46:	2101      	movs	r1, #1
 8001a48:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2220      	movs	r2, #32
 8001a4e:	2100      	movs	r1, #0
 8001a50:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d004      	beq.n	8001a64 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	0010      	movs	r0, r2
 8001a62:	4798      	blx	r3
    }
  }
  return status;
 8001a64:	230f      	movs	r3, #15
 8001a66:	18fb      	adds	r3, r7, r3
 8001a68:	781b      	ldrb	r3, [r3, #0]
}
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	b004      	add	sp, #16
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a82:	e149      	b.n	8001d18 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2101      	movs	r1, #1
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	4091      	lsls	r1, r2
 8001a8e:	000a      	movs	r2, r1
 8001a90:	4013      	ands	r3, r2
 8001a92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d100      	bne.n	8001a9c <HAL_GPIO_Init+0x28>
 8001a9a:	e13a      	b.n	8001d12 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2203      	movs	r2, #3
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d005      	beq.n	8001ab4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2203      	movs	r2, #3
 8001aae:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d130      	bne.n	8001b16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	2203      	movs	r2, #3
 8001ac0:	409a      	lsls	r2, r3
 8001ac2:	0013      	movs	r3, r2
 8001ac4:	43da      	mvns	r2, r3
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	68da      	ldr	r2, [r3, #12]
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	409a      	lsls	r2, r3
 8001ad6:	0013      	movs	r3, r2
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aea:	2201      	movs	r2, #1
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	409a      	lsls	r2, r3
 8001af0:	0013      	movs	r3, r2
 8001af2:	43da      	mvns	r2, r3
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	4013      	ands	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	091b      	lsrs	r3, r3, #4
 8001b00:	2201      	movs	r2, #1
 8001b02:	401a      	ands	r2, r3
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	409a      	lsls	r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	d017      	beq.n	8001b52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	2203      	movs	r2, #3
 8001b2e:	409a      	lsls	r2, r3
 8001b30:	0013      	movs	r3, r2
 8001b32:	43da      	mvns	r2, r3
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	4013      	ands	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	689a      	ldr	r2, [r3, #8]
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	409a      	lsls	r2, r3
 8001b44:	0013      	movs	r3, r2
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2203      	movs	r2, #3
 8001b58:	4013      	ands	r3, r2
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d123      	bne.n	8001ba6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	08da      	lsrs	r2, r3, #3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3208      	adds	r2, #8
 8001b66:	0092      	lsls	r2, r2, #2
 8001b68:	58d3      	ldr	r3, [r2, r3]
 8001b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	2207      	movs	r2, #7
 8001b70:	4013      	ands	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	220f      	movs	r2, #15
 8001b76:	409a      	lsls	r2, r3
 8001b78:	0013      	movs	r3, r2
 8001b7a:	43da      	mvns	r2, r3
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	691a      	ldr	r2, [r3, #16]
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	2107      	movs	r1, #7
 8001b8a:	400b      	ands	r3, r1
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	409a      	lsls	r2, r3
 8001b90:	0013      	movs	r3, r2
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	08da      	lsrs	r2, r3, #3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3208      	adds	r2, #8
 8001ba0:	0092      	lsls	r2, r2, #2
 8001ba2:	6939      	ldr	r1, [r7, #16]
 8001ba4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	2203      	movs	r2, #3
 8001bb2:	409a      	lsls	r2, r3
 8001bb4:	0013      	movs	r3, r2
 8001bb6:	43da      	mvns	r2, r3
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	401a      	ands	r2, r3
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	0013      	movs	r3, r2
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	23c0      	movs	r3, #192	; 0xc0
 8001be0:	029b      	lsls	r3, r3, #10
 8001be2:	4013      	ands	r3, r2
 8001be4:	d100      	bne.n	8001be8 <HAL_GPIO_Init+0x174>
 8001be6:	e094      	b.n	8001d12 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be8:	4b51      	ldr	r3, [pc, #324]	; (8001d30 <HAL_GPIO_Init+0x2bc>)
 8001bea:	699a      	ldr	r2, [r3, #24]
 8001bec:	4b50      	ldr	r3, [pc, #320]	; (8001d30 <HAL_GPIO_Init+0x2bc>)
 8001bee:	2101      	movs	r1, #1
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	619a      	str	r2, [r3, #24]
 8001bf4:	4b4e      	ldr	r3, [pc, #312]	; (8001d30 <HAL_GPIO_Init+0x2bc>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c00:	4a4c      	ldr	r2, [pc, #304]	; (8001d34 <HAL_GPIO_Init+0x2c0>)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	089b      	lsrs	r3, r3, #2
 8001c06:	3302      	adds	r3, #2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	589b      	ldr	r3, [r3, r2]
 8001c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	2203      	movs	r2, #3
 8001c12:	4013      	ands	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	220f      	movs	r2, #15
 8001c18:	409a      	lsls	r2, r3
 8001c1a:	0013      	movs	r3, r2
 8001c1c:	43da      	mvns	r2, r3
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4013      	ands	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	2390      	movs	r3, #144	; 0x90
 8001c28:	05db      	lsls	r3, r3, #23
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d00d      	beq.n	8001c4a <HAL_GPIO_Init+0x1d6>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a41      	ldr	r2, [pc, #260]	; (8001d38 <HAL_GPIO_Init+0x2c4>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d007      	beq.n	8001c46 <HAL_GPIO_Init+0x1d2>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a40      	ldr	r2, [pc, #256]	; (8001d3c <HAL_GPIO_Init+0x2c8>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d101      	bne.n	8001c42 <HAL_GPIO_Init+0x1ce>
 8001c3e:	2302      	movs	r3, #2
 8001c40:	e004      	b.n	8001c4c <HAL_GPIO_Init+0x1d8>
 8001c42:	2305      	movs	r3, #5
 8001c44:	e002      	b.n	8001c4c <HAL_GPIO_Init+0x1d8>
 8001c46:	2301      	movs	r3, #1
 8001c48:	e000      	b.n	8001c4c <HAL_GPIO_Init+0x1d8>
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	2103      	movs	r1, #3
 8001c50:	400a      	ands	r2, r1
 8001c52:	0092      	lsls	r2, r2, #2
 8001c54:	4093      	lsls	r3, r2
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c5c:	4935      	ldr	r1, [pc, #212]	; (8001d34 <HAL_GPIO_Init+0x2c0>)
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	089b      	lsrs	r3, r3, #2
 8001c62:	3302      	adds	r3, #2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c6a:	4b35      	ldr	r3, [pc, #212]	; (8001d40 <HAL_GPIO_Init+0x2cc>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	43da      	mvns	r2, r3
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	4013      	ands	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685a      	ldr	r2, [r3, #4]
 8001c7e:	2380      	movs	r3, #128	; 0x80
 8001c80:	035b      	lsls	r3, r3, #13
 8001c82:	4013      	ands	r3, r2
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c8e:	4b2c      	ldr	r3, [pc, #176]	; (8001d40 <HAL_GPIO_Init+0x2cc>)
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001c94:	4b2a      	ldr	r3, [pc, #168]	; (8001d40 <HAL_GPIO_Init+0x2cc>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	43da      	mvns	r2, r3
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	2380      	movs	r3, #128	; 0x80
 8001caa:	039b      	lsls	r3, r3, #14
 8001cac:	4013      	ands	r3, r2
 8001cae:	d003      	beq.n	8001cb8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cb8:	4b21      	ldr	r3, [pc, #132]	; (8001d40 <HAL_GPIO_Init+0x2cc>)
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001cbe:	4b20      	ldr	r3, [pc, #128]	; (8001d40 <HAL_GPIO_Init+0x2cc>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	43da      	mvns	r2, r3
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	2380      	movs	r3, #128	; 0x80
 8001cd4:	029b      	lsls	r3, r3, #10
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ce2:	4b17      	ldr	r3, [pc, #92]	; (8001d40 <HAL_GPIO_Init+0x2cc>)
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001ce8:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <HAL_GPIO_Init+0x2cc>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	43da      	mvns	r2, r3
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	2380      	movs	r3, #128	; 0x80
 8001cfe:	025b      	lsls	r3, r3, #9
 8001d00:	4013      	ands	r3, r2
 8001d02:	d003      	beq.n	8001d0c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <HAL_GPIO_Init+0x2cc>)
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	3301      	adds	r3, #1
 8001d16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	40da      	lsrs	r2, r3
 8001d20:	1e13      	subs	r3, r2, #0
 8001d22:	d000      	beq.n	8001d26 <HAL_GPIO_Init+0x2b2>
 8001d24:	e6ae      	b.n	8001a84 <HAL_GPIO_Init+0x10>
  } 
}
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	46c0      	nop			; (mov r8, r8)
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	b006      	add	sp, #24
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40010000 	.word	0x40010000
 8001d38:	48000400 	.word	0x48000400
 8001d3c:	48000800 	.word	0x48000800
 8001d40:	40010400 	.word	0x40010400

08001d44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b088      	sub	sp, #32
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d102      	bne.n	8001d58 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	f000 fb76 	bl	8002444 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	4013      	ands	r3, r2
 8001d60:	d100      	bne.n	8001d64 <HAL_RCC_OscConfig+0x20>
 8001d62:	e08e      	b.n	8001e82 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d64:	4bc5      	ldr	r3, [pc, #788]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	220c      	movs	r2, #12
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d00e      	beq.n	8001d8e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d70:	4bc2      	ldr	r3, [pc, #776]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	220c      	movs	r2, #12
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d117      	bne.n	8001dac <HAL_RCC_OscConfig+0x68>
 8001d7c:	4bbf      	ldr	r3, [pc, #764]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	23c0      	movs	r3, #192	; 0xc0
 8001d82:	025b      	lsls	r3, r3, #9
 8001d84:	401a      	ands	r2, r3
 8001d86:	2380      	movs	r3, #128	; 0x80
 8001d88:	025b      	lsls	r3, r3, #9
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d10e      	bne.n	8001dac <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d8e:	4bbb      	ldr	r3, [pc, #748]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	029b      	lsls	r3, r3, #10
 8001d96:	4013      	ands	r3, r2
 8001d98:	d100      	bne.n	8001d9c <HAL_RCC_OscConfig+0x58>
 8001d9a:	e071      	b.n	8001e80 <HAL_RCC_OscConfig+0x13c>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d000      	beq.n	8001da6 <HAL_RCC_OscConfig+0x62>
 8001da4:	e06c      	b.n	8001e80 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	f000 fb4c 	bl	8002444 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d107      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x80>
 8001db4:	4bb1      	ldr	r3, [pc, #708]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	4bb0      	ldr	r3, [pc, #704]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001dba:	2180      	movs	r1, #128	; 0x80
 8001dbc:	0249      	lsls	r1, r1, #9
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	e02f      	b.n	8001e24 <HAL_RCC_OscConfig+0xe0>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10c      	bne.n	8001de6 <HAL_RCC_OscConfig+0xa2>
 8001dcc:	4bab      	ldr	r3, [pc, #684]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4baa      	ldr	r3, [pc, #680]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001dd2:	49ab      	ldr	r1, [pc, #684]	; (8002080 <HAL_RCC_OscConfig+0x33c>)
 8001dd4:	400a      	ands	r2, r1
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	4ba8      	ldr	r3, [pc, #672]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	4ba7      	ldr	r3, [pc, #668]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001dde:	49a9      	ldr	r1, [pc, #676]	; (8002084 <HAL_RCC_OscConfig+0x340>)
 8001de0:	400a      	ands	r2, r1
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	e01e      	b.n	8001e24 <HAL_RCC_OscConfig+0xe0>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b05      	cmp	r3, #5
 8001dec:	d10e      	bne.n	8001e0c <HAL_RCC_OscConfig+0xc8>
 8001dee:	4ba3      	ldr	r3, [pc, #652]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	4ba2      	ldr	r3, [pc, #648]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001df4:	2180      	movs	r1, #128	; 0x80
 8001df6:	02c9      	lsls	r1, r1, #11
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	4b9f      	ldr	r3, [pc, #636]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	4b9e      	ldr	r3, [pc, #632]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001e02:	2180      	movs	r1, #128	; 0x80
 8001e04:	0249      	lsls	r1, r1, #9
 8001e06:	430a      	orrs	r2, r1
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	e00b      	b.n	8001e24 <HAL_RCC_OscConfig+0xe0>
 8001e0c:	4b9b      	ldr	r3, [pc, #620]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4b9a      	ldr	r3, [pc, #616]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001e12:	499b      	ldr	r1, [pc, #620]	; (8002080 <HAL_RCC_OscConfig+0x33c>)
 8001e14:	400a      	ands	r2, r1
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	4b98      	ldr	r3, [pc, #608]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4b97      	ldr	r3, [pc, #604]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001e1e:	4999      	ldr	r1, [pc, #612]	; (8002084 <HAL_RCC_OscConfig+0x340>)
 8001e20:	400a      	ands	r2, r1
 8001e22:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d014      	beq.n	8001e56 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2c:	f7ff fb9a 	bl	8001564 <HAL_GetTick>
 8001e30:	0003      	movs	r3, r0
 8001e32:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e36:	f7ff fb95 	bl	8001564 <HAL_GetTick>
 8001e3a:	0002      	movs	r2, r0
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b64      	cmp	r3, #100	; 0x64
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e2fd      	b.n	8002444 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e48:	4b8c      	ldr	r3, [pc, #560]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	2380      	movs	r3, #128	; 0x80
 8001e4e:	029b      	lsls	r3, r3, #10
 8001e50:	4013      	ands	r3, r2
 8001e52:	d0f0      	beq.n	8001e36 <HAL_RCC_OscConfig+0xf2>
 8001e54:	e015      	b.n	8001e82 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e56:	f7ff fb85 	bl	8001564 <HAL_GetTick>
 8001e5a:	0003      	movs	r3, r0
 8001e5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e60:	f7ff fb80 	bl	8001564 <HAL_GetTick>
 8001e64:	0002      	movs	r2, r0
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b64      	cmp	r3, #100	; 0x64
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e2e8      	b.n	8002444 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e72:	4b82      	ldr	r3, [pc, #520]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	2380      	movs	r3, #128	; 0x80
 8001e78:	029b      	lsls	r3, r3, #10
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d1f0      	bne.n	8001e60 <HAL_RCC_OscConfig+0x11c>
 8001e7e:	e000      	b.n	8001e82 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e80:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2202      	movs	r2, #2
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d100      	bne.n	8001e8e <HAL_RCC_OscConfig+0x14a>
 8001e8c:	e06c      	b.n	8001f68 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e8e:	4b7b      	ldr	r3, [pc, #492]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	220c      	movs	r2, #12
 8001e94:	4013      	ands	r3, r2
 8001e96:	d00e      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e98:	4b78      	ldr	r3, [pc, #480]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	220c      	movs	r2, #12
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	d11f      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x1a0>
 8001ea4:	4b75      	ldr	r3, [pc, #468]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	23c0      	movs	r3, #192	; 0xc0
 8001eaa:	025b      	lsls	r3, r3, #9
 8001eac:	401a      	ands	r2, r3
 8001eae:	2380      	movs	r3, #128	; 0x80
 8001eb0:	021b      	lsls	r3, r3, #8
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d116      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eb6:	4b71      	ldr	r3, [pc, #452]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d005      	beq.n	8001ecc <HAL_RCC_OscConfig+0x188>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d001      	beq.n	8001ecc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e2bb      	b.n	8002444 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ecc:	4b6b      	ldr	r3, [pc, #428]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	22f8      	movs	r2, #248	; 0xf8
 8001ed2:	4393      	bics	r3, r2
 8001ed4:	0019      	movs	r1, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	00da      	lsls	r2, r3, #3
 8001edc:	4b67      	ldr	r3, [pc, #412]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ee2:	e041      	b.n	8001f68 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d024      	beq.n	8001f36 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eec:	4b63      	ldr	r3, [pc, #396]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	4b62      	ldr	r3, [pc, #392]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef8:	f7ff fb34 	bl	8001564 <HAL_GetTick>
 8001efc:	0003      	movs	r3, r0
 8001efe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f02:	f7ff fb2f 	bl	8001564 <HAL_GetTick>
 8001f06:	0002      	movs	r2, r0
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e297      	b.n	8002444 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f14:	4b59      	ldr	r3, [pc, #356]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2202      	movs	r2, #2
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d0f1      	beq.n	8001f02 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f1e:	4b57      	ldr	r3, [pc, #348]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	22f8      	movs	r2, #248	; 0xf8
 8001f24:	4393      	bics	r3, r2
 8001f26:	0019      	movs	r1, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	00da      	lsls	r2, r3, #3
 8001f2e:	4b53      	ldr	r3, [pc, #332]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001f30:	430a      	orrs	r2, r1
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	e018      	b.n	8001f68 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f36:	4b51      	ldr	r3, [pc, #324]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	4b50      	ldr	r3, [pc, #320]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	438a      	bics	r2, r1
 8001f40:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f42:	f7ff fb0f 	bl	8001564 <HAL_GetTick>
 8001f46:	0003      	movs	r3, r0
 8001f48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f4c:	f7ff fb0a 	bl	8001564 <HAL_GetTick>
 8001f50:	0002      	movs	r2, r0
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e272      	b.n	8002444 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f5e:	4b47      	ldr	r3, [pc, #284]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2202      	movs	r2, #2
 8001f64:	4013      	ands	r3, r2
 8001f66:	d1f1      	bne.n	8001f4c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2208      	movs	r2, #8
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d036      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d019      	beq.n	8001fae <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f7a:	4b40      	ldr	r3, [pc, #256]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001f7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f7e:	4b3f      	ldr	r3, [pc, #252]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001f80:	2101      	movs	r1, #1
 8001f82:	430a      	orrs	r2, r1
 8001f84:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f86:	f7ff faed 	bl	8001564 <HAL_GetTick>
 8001f8a:	0003      	movs	r3, r0
 8001f8c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f90:	f7ff fae8 	bl	8001564 <HAL_GetTick>
 8001f94:	0002      	movs	r2, r0
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e250      	b.n	8002444 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fa2:	4b36      	ldr	r3, [pc, #216]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	4013      	ands	r3, r2
 8001faa:	d0f1      	beq.n	8001f90 <HAL_RCC_OscConfig+0x24c>
 8001fac:	e018      	b.n	8001fe0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fae:	4b33      	ldr	r3, [pc, #204]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001fb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fb2:	4b32      	ldr	r3, [pc, #200]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	438a      	bics	r2, r1
 8001fb8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fba:	f7ff fad3 	bl	8001564 <HAL_GetTick>
 8001fbe:	0003      	movs	r3, r0
 8001fc0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fc4:	f7ff face 	bl	8001564 <HAL_GetTick>
 8001fc8:	0002      	movs	r2, r0
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e236      	b.n	8002444 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fd6:	4b29      	ldr	r3, [pc, #164]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fda:	2202      	movs	r2, #2
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d1f1      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2204      	movs	r2, #4
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d100      	bne.n	8001fec <HAL_RCC_OscConfig+0x2a8>
 8001fea:	e0b5      	b.n	8002158 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fec:	201f      	movs	r0, #31
 8001fee:	183b      	adds	r3, r7, r0
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ff4:	4b21      	ldr	r3, [pc, #132]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001ff6:	69da      	ldr	r2, [r3, #28]
 8001ff8:	2380      	movs	r3, #128	; 0x80
 8001ffa:	055b      	lsls	r3, r3, #21
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d110      	bne.n	8002022 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002000:	4b1e      	ldr	r3, [pc, #120]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8002002:	69da      	ldr	r2, [r3, #28]
 8002004:	4b1d      	ldr	r3, [pc, #116]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8002006:	2180      	movs	r1, #128	; 0x80
 8002008:	0549      	lsls	r1, r1, #21
 800200a:	430a      	orrs	r2, r1
 800200c:	61da      	str	r2, [r3, #28]
 800200e:	4b1b      	ldr	r3, [pc, #108]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8002010:	69da      	ldr	r2, [r3, #28]
 8002012:	2380      	movs	r3, #128	; 0x80
 8002014:	055b      	lsls	r3, r3, #21
 8002016:	4013      	ands	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800201c:	183b      	adds	r3, r7, r0
 800201e:	2201      	movs	r2, #1
 8002020:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002022:	4b19      	ldr	r3, [pc, #100]	; (8002088 <HAL_RCC_OscConfig+0x344>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	4013      	ands	r3, r2
 800202c:	d11a      	bne.n	8002064 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800202e:	4b16      	ldr	r3, [pc, #88]	; (8002088 <HAL_RCC_OscConfig+0x344>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	4b15      	ldr	r3, [pc, #84]	; (8002088 <HAL_RCC_OscConfig+0x344>)
 8002034:	2180      	movs	r1, #128	; 0x80
 8002036:	0049      	lsls	r1, r1, #1
 8002038:	430a      	orrs	r2, r1
 800203a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800203c:	f7ff fa92 	bl	8001564 <HAL_GetTick>
 8002040:	0003      	movs	r3, r0
 8002042:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002046:	f7ff fa8d 	bl	8001564 <HAL_GetTick>
 800204a:	0002      	movs	r2, r0
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b64      	cmp	r3, #100	; 0x64
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e1f5      	b.n	8002444 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002058:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <HAL_RCC_OscConfig+0x344>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	4013      	ands	r3, r2
 8002062:	d0f0      	beq.n	8002046 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d10f      	bne.n	800208c <HAL_RCC_OscConfig+0x348>
 800206c:	4b03      	ldr	r3, [pc, #12]	; (800207c <HAL_RCC_OscConfig+0x338>)
 800206e:	6a1a      	ldr	r2, [r3, #32]
 8002070:	4b02      	ldr	r3, [pc, #8]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8002072:	2101      	movs	r1, #1
 8002074:	430a      	orrs	r2, r1
 8002076:	621a      	str	r2, [r3, #32]
 8002078:	e036      	b.n	80020e8 <HAL_RCC_OscConfig+0x3a4>
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	40021000 	.word	0x40021000
 8002080:	fffeffff 	.word	0xfffeffff
 8002084:	fffbffff 	.word	0xfffbffff
 8002088:	40007000 	.word	0x40007000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10c      	bne.n	80020ae <HAL_RCC_OscConfig+0x36a>
 8002094:	4bca      	ldr	r3, [pc, #808]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 8002096:	6a1a      	ldr	r2, [r3, #32]
 8002098:	4bc9      	ldr	r3, [pc, #804]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 800209a:	2101      	movs	r1, #1
 800209c:	438a      	bics	r2, r1
 800209e:	621a      	str	r2, [r3, #32]
 80020a0:	4bc7      	ldr	r3, [pc, #796]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 80020a2:	6a1a      	ldr	r2, [r3, #32]
 80020a4:	4bc6      	ldr	r3, [pc, #792]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 80020a6:	2104      	movs	r1, #4
 80020a8:	438a      	bics	r2, r1
 80020aa:	621a      	str	r2, [r3, #32]
 80020ac:	e01c      	b.n	80020e8 <HAL_RCC_OscConfig+0x3a4>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	2b05      	cmp	r3, #5
 80020b4:	d10c      	bne.n	80020d0 <HAL_RCC_OscConfig+0x38c>
 80020b6:	4bc2      	ldr	r3, [pc, #776]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 80020b8:	6a1a      	ldr	r2, [r3, #32]
 80020ba:	4bc1      	ldr	r3, [pc, #772]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 80020bc:	2104      	movs	r1, #4
 80020be:	430a      	orrs	r2, r1
 80020c0:	621a      	str	r2, [r3, #32]
 80020c2:	4bbf      	ldr	r3, [pc, #764]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 80020c4:	6a1a      	ldr	r2, [r3, #32]
 80020c6:	4bbe      	ldr	r3, [pc, #760]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 80020c8:	2101      	movs	r1, #1
 80020ca:	430a      	orrs	r2, r1
 80020cc:	621a      	str	r2, [r3, #32]
 80020ce:	e00b      	b.n	80020e8 <HAL_RCC_OscConfig+0x3a4>
 80020d0:	4bbb      	ldr	r3, [pc, #748]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 80020d2:	6a1a      	ldr	r2, [r3, #32]
 80020d4:	4bba      	ldr	r3, [pc, #744]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 80020d6:	2101      	movs	r1, #1
 80020d8:	438a      	bics	r2, r1
 80020da:	621a      	str	r2, [r3, #32]
 80020dc:	4bb8      	ldr	r3, [pc, #736]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 80020de:	6a1a      	ldr	r2, [r3, #32]
 80020e0:	4bb7      	ldr	r3, [pc, #732]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 80020e2:	2104      	movs	r1, #4
 80020e4:	438a      	bics	r2, r1
 80020e6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d014      	beq.n	800211a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f0:	f7ff fa38 	bl	8001564 <HAL_GetTick>
 80020f4:	0003      	movs	r3, r0
 80020f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f8:	e009      	b.n	800210e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020fa:	f7ff fa33 	bl	8001564 <HAL_GetTick>
 80020fe:	0002      	movs	r2, r0
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	4aaf      	ldr	r2, [pc, #700]	; (80023c4 <HAL_RCC_OscConfig+0x680>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e19a      	b.n	8002444 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800210e:	4bac      	ldr	r3, [pc, #688]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	2202      	movs	r2, #2
 8002114:	4013      	ands	r3, r2
 8002116:	d0f0      	beq.n	80020fa <HAL_RCC_OscConfig+0x3b6>
 8002118:	e013      	b.n	8002142 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211a:	f7ff fa23 	bl	8001564 <HAL_GetTick>
 800211e:	0003      	movs	r3, r0
 8002120:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002122:	e009      	b.n	8002138 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002124:	f7ff fa1e 	bl	8001564 <HAL_GetTick>
 8002128:	0002      	movs	r2, r0
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	4aa5      	ldr	r2, [pc, #660]	; (80023c4 <HAL_RCC_OscConfig+0x680>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e185      	b.n	8002444 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002138:	4ba1      	ldr	r3, [pc, #644]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	2202      	movs	r2, #2
 800213e:	4013      	ands	r3, r2
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002142:	231f      	movs	r3, #31
 8002144:	18fb      	adds	r3, r7, r3
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d105      	bne.n	8002158 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800214c:	4b9c      	ldr	r3, [pc, #624]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 800214e:	69da      	ldr	r2, [r3, #28]
 8002150:	4b9b      	ldr	r3, [pc, #620]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 8002152:	499d      	ldr	r1, [pc, #628]	; (80023c8 <HAL_RCC_OscConfig+0x684>)
 8002154:	400a      	ands	r2, r1
 8002156:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2210      	movs	r2, #16
 800215e:	4013      	ands	r3, r2
 8002160:	d063      	beq.n	800222a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d12a      	bne.n	80021c0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800216a:	4b95      	ldr	r3, [pc, #596]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 800216c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800216e:	4b94      	ldr	r3, [pc, #592]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 8002170:	2104      	movs	r1, #4
 8002172:	430a      	orrs	r2, r1
 8002174:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002176:	4b92      	ldr	r3, [pc, #584]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 8002178:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800217a:	4b91      	ldr	r3, [pc, #580]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 800217c:	2101      	movs	r1, #1
 800217e:	430a      	orrs	r2, r1
 8002180:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002182:	f7ff f9ef 	bl	8001564 <HAL_GetTick>
 8002186:	0003      	movs	r3, r0
 8002188:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800218c:	f7ff f9ea 	bl	8001564 <HAL_GetTick>
 8002190:	0002      	movs	r2, r0
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e152      	b.n	8002444 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800219e:	4b88      	ldr	r3, [pc, #544]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 80021a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021a2:	2202      	movs	r2, #2
 80021a4:	4013      	ands	r3, r2
 80021a6:	d0f1      	beq.n	800218c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80021a8:	4b85      	ldr	r3, [pc, #532]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 80021aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ac:	22f8      	movs	r2, #248	; 0xf8
 80021ae:	4393      	bics	r3, r2
 80021b0:	0019      	movs	r1, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	00da      	lsls	r2, r3, #3
 80021b8:	4b81      	ldr	r3, [pc, #516]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 80021ba:	430a      	orrs	r2, r1
 80021bc:	635a      	str	r2, [r3, #52]	; 0x34
 80021be:	e034      	b.n	800222a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	3305      	adds	r3, #5
 80021c6:	d111      	bne.n	80021ec <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80021c8:	4b7d      	ldr	r3, [pc, #500]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 80021ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021cc:	4b7c      	ldr	r3, [pc, #496]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 80021ce:	2104      	movs	r1, #4
 80021d0:	438a      	bics	r2, r1
 80021d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80021d4:	4b7a      	ldr	r3, [pc, #488]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 80021d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d8:	22f8      	movs	r2, #248	; 0xf8
 80021da:	4393      	bics	r3, r2
 80021dc:	0019      	movs	r1, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	00da      	lsls	r2, r3, #3
 80021e4:	4b76      	ldr	r3, [pc, #472]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 80021e6:	430a      	orrs	r2, r1
 80021e8:	635a      	str	r2, [r3, #52]	; 0x34
 80021ea:	e01e      	b.n	800222a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80021ec:	4b74      	ldr	r3, [pc, #464]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 80021ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021f0:	4b73      	ldr	r3, [pc, #460]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 80021f2:	2104      	movs	r1, #4
 80021f4:	430a      	orrs	r2, r1
 80021f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80021f8:	4b71      	ldr	r3, [pc, #452]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 80021fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021fc:	4b70      	ldr	r3, [pc, #448]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 80021fe:	2101      	movs	r1, #1
 8002200:	438a      	bics	r2, r1
 8002202:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002204:	f7ff f9ae 	bl	8001564 <HAL_GetTick>
 8002208:	0003      	movs	r3, r0
 800220a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800220e:	f7ff f9a9 	bl	8001564 <HAL_GetTick>
 8002212:	0002      	movs	r2, r0
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e111      	b.n	8002444 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002220:	4b67      	ldr	r3, [pc, #412]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 8002222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002224:	2202      	movs	r2, #2
 8002226:	4013      	ands	r3, r2
 8002228:	d1f1      	bne.n	800220e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2220      	movs	r2, #32
 8002230:	4013      	ands	r3, r2
 8002232:	d05c      	beq.n	80022ee <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002234:	4b62      	ldr	r3, [pc, #392]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	220c      	movs	r2, #12
 800223a:	4013      	ands	r3, r2
 800223c:	2b0c      	cmp	r3, #12
 800223e:	d00e      	beq.n	800225e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002240:	4b5f      	ldr	r3, [pc, #380]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	220c      	movs	r2, #12
 8002246:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002248:	2b08      	cmp	r3, #8
 800224a:	d114      	bne.n	8002276 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800224c:	4b5c      	ldr	r3, [pc, #368]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	23c0      	movs	r3, #192	; 0xc0
 8002252:	025b      	lsls	r3, r3, #9
 8002254:	401a      	ands	r2, r3
 8002256:	23c0      	movs	r3, #192	; 0xc0
 8002258:	025b      	lsls	r3, r3, #9
 800225a:	429a      	cmp	r2, r3
 800225c:	d10b      	bne.n	8002276 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800225e:	4b58      	ldr	r3, [pc, #352]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 8002260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002262:	2380      	movs	r3, #128	; 0x80
 8002264:	029b      	lsls	r3, r3, #10
 8002266:	4013      	ands	r3, r2
 8002268:	d040      	beq.n	80022ec <HAL_RCC_OscConfig+0x5a8>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d03c      	beq.n	80022ec <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e0e6      	b.n	8002444 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d01b      	beq.n	80022b6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800227e:	4b50      	ldr	r3, [pc, #320]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 8002280:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002282:	4b4f      	ldr	r3, [pc, #316]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 8002284:	2180      	movs	r1, #128	; 0x80
 8002286:	0249      	lsls	r1, r1, #9
 8002288:	430a      	orrs	r2, r1
 800228a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228c:	f7ff f96a 	bl	8001564 <HAL_GetTick>
 8002290:	0003      	movs	r3, r0
 8002292:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002296:	f7ff f965 	bl	8001564 <HAL_GetTick>
 800229a:	0002      	movs	r2, r0
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e0cd      	b.n	8002444 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80022a8:	4b45      	ldr	r3, [pc, #276]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 80022aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ac:	2380      	movs	r3, #128	; 0x80
 80022ae:	029b      	lsls	r3, r3, #10
 80022b0:	4013      	ands	r3, r2
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCC_OscConfig+0x552>
 80022b4:	e01b      	b.n	80022ee <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80022b6:	4b42      	ldr	r3, [pc, #264]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 80022b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ba:	4b41      	ldr	r3, [pc, #260]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 80022bc:	4943      	ldr	r1, [pc, #268]	; (80023cc <HAL_RCC_OscConfig+0x688>)
 80022be:	400a      	ands	r2, r1
 80022c0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c2:	f7ff f94f 	bl	8001564 <HAL_GetTick>
 80022c6:	0003      	movs	r3, r0
 80022c8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022cc:	f7ff f94a 	bl	8001564 <HAL_GetTick>
 80022d0:	0002      	movs	r2, r0
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e0b2      	b.n	8002444 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80022de:	4b38      	ldr	r3, [pc, #224]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 80022e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022e2:	2380      	movs	r3, #128	; 0x80
 80022e4:	029b      	lsls	r3, r3, #10
 80022e6:	4013      	ands	r3, r2
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x588>
 80022ea:	e000      	b.n	80022ee <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80022ec:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d100      	bne.n	80022f8 <HAL_RCC_OscConfig+0x5b4>
 80022f6:	e0a4      	b.n	8002442 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022f8:	4b31      	ldr	r3, [pc, #196]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	220c      	movs	r2, #12
 80022fe:	4013      	ands	r3, r2
 8002300:	2b08      	cmp	r3, #8
 8002302:	d100      	bne.n	8002306 <HAL_RCC_OscConfig+0x5c2>
 8002304:	e078      	b.n	80023f8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	2b02      	cmp	r3, #2
 800230c:	d14c      	bne.n	80023a8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800230e:	4b2c      	ldr	r3, [pc, #176]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	4b2b      	ldr	r3, [pc, #172]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 8002314:	492e      	ldr	r1, [pc, #184]	; (80023d0 <HAL_RCC_OscConfig+0x68c>)
 8002316:	400a      	ands	r2, r1
 8002318:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231a:	f7ff f923 	bl	8001564 <HAL_GetTick>
 800231e:	0003      	movs	r3, r0
 8002320:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002324:	f7ff f91e 	bl	8001564 <HAL_GetTick>
 8002328:	0002      	movs	r2, r0
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e086      	b.n	8002444 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002336:	4b22      	ldr	r3, [pc, #136]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	2380      	movs	r3, #128	; 0x80
 800233c:	049b      	lsls	r3, r3, #18
 800233e:	4013      	ands	r3, r2
 8002340:	d1f0      	bne.n	8002324 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002342:	4b1f      	ldr	r3, [pc, #124]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 8002344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002346:	220f      	movs	r2, #15
 8002348:	4393      	bics	r3, r2
 800234a:	0019      	movs	r1, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002350:	4b1b      	ldr	r3, [pc, #108]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 8002352:	430a      	orrs	r2, r1
 8002354:	62da      	str	r2, [r3, #44]	; 0x2c
 8002356:	4b1a      	ldr	r3, [pc, #104]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	4a1e      	ldr	r2, [pc, #120]	; (80023d4 <HAL_RCC_OscConfig+0x690>)
 800235c:	4013      	ands	r3, r2
 800235e:	0019      	movs	r1, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002368:	431a      	orrs	r2, r3
 800236a:	4b15      	ldr	r3, [pc, #84]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 800236c:	430a      	orrs	r2, r1
 800236e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002370:	4b13      	ldr	r3, [pc, #76]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	4b12      	ldr	r3, [pc, #72]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 8002376:	2180      	movs	r1, #128	; 0x80
 8002378:	0449      	lsls	r1, r1, #17
 800237a:	430a      	orrs	r2, r1
 800237c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237e:	f7ff f8f1 	bl	8001564 <HAL_GetTick>
 8002382:	0003      	movs	r3, r0
 8002384:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002388:	f7ff f8ec 	bl	8001564 <HAL_GetTick>
 800238c:	0002      	movs	r2, r0
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e054      	b.n	8002444 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800239a:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	2380      	movs	r3, #128	; 0x80
 80023a0:	049b      	lsls	r3, r3, #18
 80023a2:	4013      	ands	r3, r2
 80023a4:	d0f0      	beq.n	8002388 <HAL_RCC_OscConfig+0x644>
 80023a6:	e04c      	b.n	8002442 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a8:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4b04      	ldr	r3, [pc, #16]	; (80023c0 <HAL_RCC_OscConfig+0x67c>)
 80023ae:	4908      	ldr	r1, [pc, #32]	; (80023d0 <HAL_RCC_OscConfig+0x68c>)
 80023b0:	400a      	ands	r2, r1
 80023b2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b4:	f7ff f8d6 	bl	8001564 <HAL_GetTick>
 80023b8:	0003      	movs	r3, r0
 80023ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023bc:	e015      	b.n	80023ea <HAL_RCC_OscConfig+0x6a6>
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	40021000 	.word	0x40021000
 80023c4:	00001388 	.word	0x00001388
 80023c8:	efffffff 	.word	0xefffffff
 80023cc:	fffeffff 	.word	0xfffeffff
 80023d0:	feffffff 	.word	0xfeffffff
 80023d4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023d8:	f7ff f8c4 	bl	8001564 <HAL_GetTick>
 80023dc:	0002      	movs	r2, r0
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e02c      	b.n	8002444 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ea:	4b18      	ldr	r3, [pc, #96]	; (800244c <HAL_RCC_OscConfig+0x708>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	049b      	lsls	r3, r3, #18
 80023f2:	4013      	ands	r3, r2
 80023f4:	d1f0      	bne.n	80023d8 <HAL_RCC_OscConfig+0x694>
 80023f6:	e024      	b.n	8002442 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e01f      	b.n	8002444 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002404:	4b11      	ldr	r3, [pc, #68]	; (800244c <HAL_RCC_OscConfig+0x708>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800240a:	4b10      	ldr	r3, [pc, #64]	; (800244c <HAL_RCC_OscConfig+0x708>)
 800240c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	23c0      	movs	r3, #192	; 0xc0
 8002414:	025b      	lsls	r3, r3, #9
 8002416:	401a      	ands	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241c:	429a      	cmp	r2, r3
 800241e:	d10e      	bne.n	800243e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	220f      	movs	r2, #15
 8002424:	401a      	ands	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800242a:	429a      	cmp	r2, r3
 800242c:	d107      	bne.n	800243e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	23f0      	movs	r3, #240	; 0xf0
 8002432:	039b      	lsls	r3, r3, #14
 8002434:	401a      	ands	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800243a:	429a      	cmp	r2, r3
 800243c:	d001      	beq.n	8002442 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e000      	b.n	8002444 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	0018      	movs	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	b008      	add	sp, #32
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40021000 	.word	0x40021000

08002450 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e0bf      	b.n	80025e4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002464:	4b61      	ldr	r3, [pc, #388]	; (80025ec <HAL_RCC_ClockConfig+0x19c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2201      	movs	r2, #1
 800246a:	4013      	ands	r3, r2
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	429a      	cmp	r2, r3
 8002470:	d911      	bls.n	8002496 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002472:	4b5e      	ldr	r3, [pc, #376]	; (80025ec <HAL_RCC_ClockConfig+0x19c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2201      	movs	r2, #1
 8002478:	4393      	bics	r3, r2
 800247a:	0019      	movs	r1, r3
 800247c:	4b5b      	ldr	r3, [pc, #364]	; (80025ec <HAL_RCC_ClockConfig+0x19c>)
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	430a      	orrs	r2, r1
 8002482:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002484:	4b59      	ldr	r3, [pc, #356]	; (80025ec <HAL_RCC_ClockConfig+0x19c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2201      	movs	r2, #1
 800248a:	4013      	ands	r3, r2
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d001      	beq.n	8002496 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e0a6      	b.n	80025e4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2202      	movs	r2, #2
 800249c:	4013      	ands	r3, r2
 800249e:	d015      	beq.n	80024cc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2204      	movs	r2, #4
 80024a6:	4013      	ands	r3, r2
 80024a8:	d006      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80024aa:	4b51      	ldr	r3, [pc, #324]	; (80025f0 <HAL_RCC_ClockConfig+0x1a0>)
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	4b50      	ldr	r3, [pc, #320]	; (80025f0 <HAL_RCC_ClockConfig+0x1a0>)
 80024b0:	21e0      	movs	r1, #224	; 0xe0
 80024b2:	00c9      	lsls	r1, r1, #3
 80024b4:	430a      	orrs	r2, r1
 80024b6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b8:	4b4d      	ldr	r3, [pc, #308]	; (80025f0 <HAL_RCC_ClockConfig+0x1a0>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	22f0      	movs	r2, #240	; 0xf0
 80024be:	4393      	bics	r3, r2
 80024c0:	0019      	movs	r1, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	4b4a      	ldr	r3, [pc, #296]	; (80025f0 <HAL_RCC_ClockConfig+0x1a0>)
 80024c8:	430a      	orrs	r2, r1
 80024ca:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2201      	movs	r2, #1
 80024d2:	4013      	ands	r3, r2
 80024d4:	d04c      	beq.n	8002570 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d107      	bne.n	80024ee <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024de:	4b44      	ldr	r3, [pc, #272]	; (80025f0 <HAL_RCC_ClockConfig+0x1a0>)
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	2380      	movs	r3, #128	; 0x80
 80024e4:	029b      	lsls	r3, r3, #10
 80024e6:	4013      	ands	r3, r2
 80024e8:	d120      	bne.n	800252c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e07a      	b.n	80025e4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d107      	bne.n	8002506 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f6:	4b3e      	ldr	r3, [pc, #248]	; (80025f0 <HAL_RCC_ClockConfig+0x1a0>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	2380      	movs	r3, #128	; 0x80
 80024fc:	049b      	lsls	r3, r3, #18
 80024fe:	4013      	ands	r3, r2
 8002500:	d114      	bne.n	800252c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e06e      	b.n	80025e4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b03      	cmp	r3, #3
 800250c:	d107      	bne.n	800251e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800250e:	4b38      	ldr	r3, [pc, #224]	; (80025f0 <HAL_RCC_ClockConfig+0x1a0>)
 8002510:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002512:	2380      	movs	r3, #128	; 0x80
 8002514:	029b      	lsls	r3, r3, #10
 8002516:	4013      	ands	r3, r2
 8002518:	d108      	bne.n	800252c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e062      	b.n	80025e4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251e:	4b34      	ldr	r3, [pc, #208]	; (80025f0 <HAL_RCC_ClockConfig+0x1a0>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2202      	movs	r2, #2
 8002524:	4013      	ands	r3, r2
 8002526:	d101      	bne.n	800252c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e05b      	b.n	80025e4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800252c:	4b30      	ldr	r3, [pc, #192]	; (80025f0 <HAL_RCC_ClockConfig+0x1a0>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2203      	movs	r2, #3
 8002532:	4393      	bics	r3, r2
 8002534:	0019      	movs	r1, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	4b2d      	ldr	r3, [pc, #180]	; (80025f0 <HAL_RCC_ClockConfig+0x1a0>)
 800253c:	430a      	orrs	r2, r1
 800253e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002540:	f7ff f810 	bl	8001564 <HAL_GetTick>
 8002544:	0003      	movs	r3, r0
 8002546:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002548:	e009      	b.n	800255e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800254a:	f7ff f80b 	bl	8001564 <HAL_GetTick>
 800254e:	0002      	movs	r2, r0
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	4a27      	ldr	r2, [pc, #156]	; (80025f4 <HAL_RCC_ClockConfig+0x1a4>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d901      	bls.n	800255e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e042      	b.n	80025e4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255e:	4b24      	ldr	r3, [pc, #144]	; (80025f0 <HAL_RCC_ClockConfig+0x1a0>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	220c      	movs	r2, #12
 8002564:	401a      	ands	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	429a      	cmp	r2, r3
 800256e:	d1ec      	bne.n	800254a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002570:	4b1e      	ldr	r3, [pc, #120]	; (80025ec <HAL_RCC_ClockConfig+0x19c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2201      	movs	r2, #1
 8002576:	4013      	ands	r3, r2
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d211      	bcs.n	80025a2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257e:	4b1b      	ldr	r3, [pc, #108]	; (80025ec <HAL_RCC_ClockConfig+0x19c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2201      	movs	r2, #1
 8002584:	4393      	bics	r3, r2
 8002586:	0019      	movs	r1, r3
 8002588:	4b18      	ldr	r3, [pc, #96]	; (80025ec <HAL_RCC_ClockConfig+0x19c>)
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	430a      	orrs	r2, r1
 800258e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002590:	4b16      	ldr	r3, [pc, #88]	; (80025ec <HAL_RCC_ClockConfig+0x19c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2201      	movs	r2, #1
 8002596:	4013      	ands	r3, r2
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	429a      	cmp	r2, r3
 800259c:	d001      	beq.n	80025a2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e020      	b.n	80025e4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2204      	movs	r2, #4
 80025a8:	4013      	ands	r3, r2
 80025aa:	d009      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80025ac:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <HAL_RCC_ClockConfig+0x1a0>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	4a11      	ldr	r2, [pc, #68]	; (80025f8 <HAL_RCC_ClockConfig+0x1a8>)
 80025b2:	4013      	ands	r3, r2
 80025b4:	0019      	movs	r1, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	4b0d      	ldr	r3, [pc, #52]	; (80025f0 <HAL_RCC_ClockConfig+0x1a0>)
 80025bc:	430a      	orrs	r2, r1
 80025be:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80025c0:	f000 f860 	bl	8002684 <HAL_RCC_GetSysClockFreq>
 80025c4:	0001      	movs	r1, r0
 80025c6:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <HAL_RCC_ClockConfig+0x1a0>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	091b      	lsrs	r3, r3, #4
 80025cc:	220f      	movs	r2, #15
 80025ce:	4013      	ands	r3, r2
 80025d0:	4a0a      	ldr	r2, [pc, #40]	; (80025fc <HAL_RCC_ClockConfig+0x1ac>)
 80025d2:	5cd3      	ldrb	r3, [r2, r3]
 80025d4:	000a      	movs	r2, r1
 80025d6:	40da      	lsrs	r2, r3
 80025d8:	4b09      	ldr	r3, [pc, #36]	; (8002600 <HAL_RCC_ClockConfig+0x1b0>)
 80025da:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80025dc:	2003      	movs	r0, #3
 80025de:	f7fe ff7b 	bl	80014d8 <HAL_InitTick>
  
  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	0018      	movs	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	b004      	add	sp, #16
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40022000 	.word	0x40022000
 80025f0:	40021000 	.word	0x40021000
 80025f4:	00001388 	.word	0x00001388
 80025f8:	fffff8ff 	.word	0xfffff8ff
 80025fc:	0800580c 	.word	0x0800580c
 8002600:	20000000 	.word	0x20000000

08002604 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b08a      	sub	sp, #40	; 0x28
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8002610:	2014      	movs	r0, #20
 8002612:	183b      	adds	r3, r7, r0
 8002614:	2202      	movs	r2, #2
 8002616:	605a      	str	r2, [r3, #4]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002618:	183b      	adds	r3, r7, r0
 800261a:	2203      	movs	r2, #3
 800261c:	60da      	str	r2, [r3, #12]
  gpio.Pull      = GPIO_NOPULL;
 800261e:	183b      	adds	r3, r7, r0
 8002620:	2200      	movs	r2, #0
 8002622:	609a      	str	r2, [r3, #8]
  gpio.Pin       = MCO1_PIN;
 8002624:	183b      	adds	r3, r7, r0
 8002626:	2280      	movs	r2, #128	; 0x80
 8002628:	0052      	lsls	r2, r2, #1
 800262a:	601a      	str	r2, [r3, #0]
  gpio.Alternate = GPIO_AF0_MCO;
 800262c:	183b      	adds	r3, r7, r0
 800262e:	2200      	movs	r2, #0
 8002630:	611a      	str	r2, [r3, #16]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8002632:	4b12      	ldr	r3, [pc, #72]	; (800267c <HAL_RCC_MCOConfig+0x78>)
 8002634:	695a      	ldr	r2, [r3, #20]
 8002636:	4b11      	ldr	r3, [pc, #68]	; (800267c <HAL_RCC_MCOConfig+0x78>)
 8002638:	2180      	movs	r1, #128	; 0x80
 800263a:	0289      	lsls	r1, r1, #10
 800263c:	430a      	orrs	r2, r1
 800263e:	615a      	str	r2, [r3, #20]
 8002640:	4b0e      	ldr	r3, [pc, #56]	; (800267c <HAL_RCC_MCOConfig+0x78>)
 8002642:	695a      	ldr	r2, [r3, #20]
 8002644:	2380      	movs	r3, #128	; 0x80
 8002646:	029b      	lsls	r3, r3, #10
 8002648:	4013      	ands	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
 800264c:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 800264e:	183a      	adds	r2, r7, r0
 8002650:	2390      	movs	r3, #144	; 0x90
 8002652:	05db      	lsls	r3, r3, #23
 8002654:	0011      	movs	r1, r2
 8002656:	0018      	movs	r0, r3
 8002658:	f7ff fa0c 	bl	8001a74 <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 800265c:	4b07      	ldr	r3, [pc, #28]	; (800267c <HAL_RCC_MCOConfig+0x78>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	4a07      	ldr	r2, [pc, #28]	; (8002680 <HAL_RCC_MCOConfig+0x7c>)
 8002662:	4013      	ands	r3, r2
 8002664:	0019      	movs	r1, r3
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	431a      	orrs	r2, r3
 800266c:	4b03      	ldr	r3, [pc, #12]	; (800267c <HAL_RCC_MCOConfig+0x78>)
 800266e:	430a      	orrs	r2, r1
 8002670:	605a      	str	r2, [r3, #4]
}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	46bd      	mov	sp, r7
 8002676:	b00a      	add	sp, #40	; 0x28
 8002678:	bd80      	pop	{r7, pc}
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	40021000 	.word	0x40021000
 8002680:	80ffffff 	.word	0x80ffffff

08002684 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800268a:	2300      	movs	r3, #0
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	2300      	movs	r3, #0
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	2300      	movs	r3, #0
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	2300      	movs	r3, #0
 8002698:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800269a:	2300      	movs	r3, #0
 800269c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800269e:	4b2d      	ldr	r3, [pc, #180]	; (8002754 <HAL_RCC_GetSysClockFreq+0xd0>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	220c      	movs	r2, #12
 80026a8:	4013      	ands	r3, r2
 80026aa:	2b0c      	cmp	r3, #12
 80026ac:	d046      	beq.n	800273c <HAL_RCC_GetSysClockFreq+0xb8>
 80026ae:	d848      	bhi.n	8002742 <HAL_RCC_GetSysClockFreq+0xbe>
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	d002      	beq.n	80026ba <HAL_RCC_GetSysClockFreq+0x36>
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	d003      	beq.n	80026c0 <HAL_RCC_GetSysClockFreq+0x3c>
 80026b8:	e043      	b.n	8002742 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026ba:	4b27      	ldr	r3, [pc, #156]	; (8002758 <HAL_RCC_GetSysClockFreq+0xd4>)
 80026bc:	613b      	str	r3, [r7, #16]
      break;
 80026be:	e043      	b.n	8002748 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	0c9b      	lsrs	r3, r3, #18
 80026c4:	220f      	movs	r2, #15
 80026c6:	4013      	ands	r3, r2
 80026c8:	4a24      	ldr	r2, [pc, #144]	; (800275c <HAL_RCC_GetSysClockFreq+0xd8>)
 80026ca:	5cd3      	ldrb	r3, [r2, r3]
 80026cc:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80026ce:	4b21      	ldr	r3, [pc, #132]	; (8002754 <HAL_RCC_GetSysClockFreq+0xd0>)
 80026d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d2:	220f      	movs	r2, #15
 80026d4:	4013      	ands	r3, r2
 80026d6:	4a22      	ldr	r2, [pc, #136]	; (8002760 <HAL_RCC_GetSysClockFreq+0xdc>)
 80026d8:	5cd3      	ldrb	r3, [r2, r3]
 80026da:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	23c0      	movs	r3, #192	; 0xc0
 80026e0:	025b      	lsls	r3, r3, #9
 80026e2:	401a      	ands	r2, r3
 80026e4:	2380      	movs	r3, #128	; 0x80
 80026e6:	025b      	lsls	r3, r3, #9
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d109      	bne.n	8002700 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026ec:	68b9      	ldr	r1, [r7, #8]
 80026ee:	481a      	ldr	r0, [pc, #104]	; (8002758 <HAL_RCC_GetSysClockFreq+0xd4>)
 80026f0:	f7fd fd14 	bl	800011c <__udivsi3>
 80026f4:	0003      	movs	r3, r0
 80026f6:	001a      	movs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4353      	muls	r3, r2
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	e01a      	b.n	8002736 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	23c0      	movs	r3, #192	; 0xc0
 8002704:	025b      	lsls	r3, r3, #9
 8002706:	401a      	ands	r2, r3
 8002708:	23c0      	movs	r3, #192	; 0xc0
 800270a:	025b      	lsls	r3, r3, #9
 800270c:	429a      	cmp	r2, r3
 800270e:	d109      	bne.n	8002724 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002710:	68b9      	ldr	r1, [r7, #8]
 8002712:	4814      	ldr	r0, [pc, #80]	; (8002764 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002714:	f7fd fd02 	bl	800011c <__udivsi3>
 8002718:	0003      	movs	r3, r0
 800271a:	001a      	movs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4353      	muls	r3, r2
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	e008      	b.n	8002736 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002724:	68b9      	ldr	r1, [r7, #8]
 8002726:	480c      	ldr	r0, [pc, #48]	; (8002758 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002728:	f7fd fcf8 	bl	800011c <__udivsi3>
 800272c:	0003      	movs	r3, r0
 800272e:	001a      	movs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4353      	muls	r3, r2
 8002734:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	613b      	str	r3, [r7, #16]
      break;
 800273a:	e005      	b.n	8002748 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800273c:	4b09      	ldr	r3, [pc, #36]	; (8002764 <HAL_RCC_GetSysClockFreq+0xe0>)
 800273e:	613b      	str	r3, [r7, #16]
      break;
 8002740:	e002      	b.n	8002748 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002742:	4b05      	ldr	r3, [pc, #20]	; (8002758 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002744:	613b      	str	r3, [r7, #16]
      break;
 8002746:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002748:	693b      	ldr	r3, [r7, #16]
}
 800274a:	0018      	movs	r0, r3
 800274c:	46bd      	mov	sp, r7
 800274e:	b006      	add	sp, #24
 8002750:	bd80      	pop	{r7, pc}
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	40021000 	.word	0x40021000
 8002758:	007a1200 	.word	0x007a1200
 800275c:	08005824 	.word	0x08005824
 8002760:	08005834 	.word	0x08005834
 8002764:	02dc6c00 	.word	0x02dc6c00

08002768 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800276c:	4b02      	ldr	r3, [pc, #8]	; (8002778 <HAL_RCC_GetHCLKFreq+0x10>)
 800276e:	681b      	ldr	r3, [r3, #0]
}
 8002770:	0018      	movs	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	20000000 	.word	0x20000000

0800277c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002780:	f7ff fff2 	bl	8002768 <HAL_RCC_GetHCLKFreq>
 8002784:	0001      	movs	r1, r0
 8002786:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	0a1b      	lsrs	r3, r3, #8
 800278c:	2207      	movs	r2, #7
 800278e:	4013      	ands	r3, r2
 8002790:	4a04      	ldr	r2, [pc, #16]	; (80027a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002792:	5cd3      	ldrb	r3, [r2, r3]
 8002794:	40d9      	lsrs	r1, r3
 8002796:	000b      	movs	r3, r1
}    
 8002798:	0018      	movs	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	40021000 	.word	0x40021000
 80027a4:	0800581c 	.word	0x0800581c

080027a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e042      	b.n	8002840 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	223d      	movs	r2, #61	; 0x3d
 80027be:	5c9b      	ldrb	r3, [r3, r2]
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d107      	bne.n	80027d6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	223c      	movs	r2, #60	; 0x3c
 80027ca:	2100      	movs	r1, #0
 80027cc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	0018      	movs	r0, r3
 80027d2:	f7fe fbd1 	bl	8000f78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	223d      	movs	r2, #61	; 0x3d
 80027da:	2102      	movs	r1, #2
 80027dc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	3304      	adds	r3, #4
 80027e6:	0019      	movs	r1, r3
 80027e8:	0010      	movs	r0, r2
 80027ea:	f000 fe73 	bl	80034d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2246      	movs	r2, #70	; 0x46
 80027f2:	2101      	movs	r1, #1
 80027f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	223e      	movs	r2, #62	; 0x3e
 80027fa:	2101      	movs	r1, #1
 80027fc:	5499      	strb	r1, [r3, r2]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	223f      	movs	r2, #63	; 0x3f
 8002802:	2101      	movs	r1, #1
 8002804:	5499      	strb	r1, [r3, r2]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2240      	movs	r2, #64	; 0x40
 800280a:	2101      	movs	r1, #1
 800280c:	5499      	strb	r1, [r3, r2]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2241      	movs	r2, #65	; 0x41
 8002812:	2101      	movs	r1, #1
 8002814:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2242      	movs	r2, #66	; 0x42
 800281a:	2101      	movs	r1, #1
 800281c:	5499      	strb	r1, [r3, r2]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2243      	movs	r2, #67	; 0x43
 8002822:	2101      	movs	r1, #1
 8002824:	5499      	strb	r1, [r3, r2]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2244      	movs	r2, #68	; 0x44
 800282a:	2101      	movs	r1, #1
 800282c:	5499      	strb	r1, [r3, r2]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2245      	movs	r2, #69	; 0x45
 8002832:	2101      	movs	r1, #1
 8002834:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	223d      	movs	r2, #61	; 0x3d
 800283a:	2101      	movs	r1, #1
 800283c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	0018      	movs	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	b002      	add	sp, #8
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	223d      	movs	r2, #61	; 0x3d
 8002854:	5c9b      	ldrb	r3, [r3, r2]
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b01      	cmp	r3, #1
 800285a:	d001      	beq.n	8002860 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e036      	b.n	80028ce <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	223d      	movs	r2, #61	; 0x3d
 8002864:	2102      	movs	r1, #2
 8002866:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2101      	movs	r1, #1
 8002874:	430a      	orrs	r2, r1
 8002876:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a16      	ldr	r2, [pc, #88]	; (80028d8 <HAL_TIM_Base_Start_IT+0x90>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d00a      	beq.n	8002898 <HAL_TIM_Base_Start_IT+0x50>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	2380      	movs	r3, #128	; 0x80
 8002888:	05db      	lsls	r3, r3, #23
 800288a:	429a      	cmp	r2, r3
 800288c:	d004      	beq.n	8002898 <HAL_TIM_Base_Start_IT+0x50>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a12      	ldr	r2, [pc, #72]	; (80028dc <HAL_TIM_Base_Start_IT+0x94>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d111      	bne.n	80028bc <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	2207      	movs	r2, #7
 80028a0:	4013      	ands	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2b06      	cmp	r3, #6
 80028a8:	d010      	beq.n	80028cc <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2101      	movs	r1, #1
 80028b6:	430a      	orrs	r2, r1
 80028b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ba:	e007      	b.n	80028cc <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2101      	movs	r1, #1
 80028c8:	430a      	orrs	r2, r1
 80028ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	0018      	movs	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	b004      	add	sp, #16
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	46c0      	nop			; (mov r8, r8)
 80028d8:	40012c00 	.word	0x40012c00
 80028dc:	40000400 	.word	0x40000400

080028e0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2101      	movs	r1, #1
 80028f4:	438a      	bics	r2, r1
 80028f6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	4a0d      	ldr	r2, [pc, #52]	; (8002934 <HAL_TIM_Base_Stop_IT+0x54>)
 8002900:	4013      	ands	r3, r2
 8002902:	d10d      	bne.n	8002920 <HAL_TIM_Base_Stop_IT+0x40>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	4a0b      	ldr	r2, [pc, #44]	; (8002938 <HAL_TIM_Base_Stop_IT+0x58>)
 800290c:	4013      	ands	r3, r2
 800290e:	d107      	bne.n	8002920 <HAL_TIM_Base_Stop_IT+0x40>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2101      	movs	r1, #1
 800291c:	438a      	bics	r2, r1
 800291e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	223d      	movs	r2, #61	; 0x3d
 8002924:	2101      	movs	r1, #1
 8002926:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	0018      	movs	r0, r3
 800292c:	46bd      	mov	sp, r7
 800292e:	b002      	add	sp, #8
 8002930:	bd80      	pop	{r7, pc}
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	00001111 	.word	0x00001111
 8002938:	00000444 	.word	0x00000444

0800293c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e042      	b.n	80029d4 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	223d      	movs	r2, #61	; 0x3d
 8002952:	5c9b      	ldrb	r3, [r3, r2]
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d107      	bne.n	800296a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	223c      	movs	r2, #60	; 0x3c
 800295e:	2100      	movs	r1, #0
 8002960:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	0018      	movs	r0, r3
 8002966:	f000 f839 	bl	80029dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	223d      	movs	r2, #61	; 0x3d
 800296e:	2102      	movs	r1, #2
 8002970:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3304      	adds	r3, #4
 800297a:	0019      	movs	r1, r3
 800297c:	0010      	movs	r0, r2
 800297e:	f000 fda9 	bl	80034d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2246      	movs	r2, #70	; 0x46
 8002986:	2101      	movs	r1, #1
 8002988:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	223e      	movs	r2, #62	; 0x3e
 800298e:	2101      	movs	r1, #1
 8002990:	5499      	strb	r1, [r3, r2]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	223f      	movs	r2, #63	; 0x3f
 8002996:	2101      	movs	r1, #1
 8002998:	5499      	strb	r1, [r3, r2]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2240      	movs	r2, #64	; 0x40
 800299e:	2101      	movs	r1, #1
 80029a0:	5499      	strb	r1, [r3, r2]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2241      	movs	r2, #65	; 0x41
 80029a6:	2101      	movs	r1, #1
 80029a8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2242      	movs	r2, #66	; 0x42
 80029ae:	2101      	movs	r1, #1
 80029b0:	5499      	strb	r1, [r3, r2]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2243      	movs	r2, #67	; 0x43
 80029b6:	2101      	movs	r1, #1
 80029b8:	5499      	strb	r1, [r3, r2]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2244      	movs	r2, #68	; 0x44
 80029be:	2101      	movs	r1, #1
 80029c0:	5499      	strb	r1, [r3, r2]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2245      	movs	r2, #69	; 0x45
 80029c6:	2101      	movs	r1, #1
 80029c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	223d      	movs	r2, #61	; 0x3d
 80029ce:	2101      	movs	r1, #1
 80029d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	0018      	movs	r0, r3
 80029d6:	46bd      	mov	sp, r7
 80029d8:	b002      	add	sp, #8
 80029da:	bd80      	pop	{r7, pc}

080029dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80029e4:	46c0      	nop			; (mov r8, r8)
 80029e6:	46bd      	mov	sp, r7
 80029e8:	b002      	add	sp, #8
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e042      	b.n	8002a84 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	223d      	movs	r2, #61	; 0x3d
 8002a02:	5c9b      	ldrb	r3, [r3, r2]
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d107      	bne.n	8002a1a <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	223c      	movs	r2, #60	; 0x3c
 8002a0e:	2100      	movs	r1, #0
 8002a10:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	0018      	movs	r0, r3
 8002a16:	f000 f839 	bl	8002a8c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	223d      	movs	r2, #61	; 0x3d
 8002a1e:	2102      	movs	r1, #2
 8002a20:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3304      	adds	r3, #4
 8002a2a:	0019      	movs	r1, r3
 8002a2c:	0010      	movs	r0, r2
 8002a2e:	f000 fd51 	bl	80034d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2246      	movs	r2, #70	; 0x46
 8002a36:	2101      	movs	r1, #1
 8002a38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	223e      	movs	r2, #62	; 0x3e
 8002a3e:	2101      	movs	r1, #1
 8002a40:	5499      	strb	r1, [r3, r2]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	223f      	movs	r2, #63	; 0x3f
 8002a46:	2101      	movs	r1, #1
 8002a48:	5499      	strb	r1, [r3, r2]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2240      	movs	r2, #64	; 0x40
 8002a4e:	2101      	movs	r1, #1
 8002a50:	5499      	strb	r1, [r3, r2]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2241      	movs	r2, #65	; 0x41
 8002a56:	2101      	movs	r1, #1
 8002a58:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2242      	movs	r2, #66	; 0x42
 8002a5e:	2101      	movs	r1, #1
 8002a60:	5499      	strb	r1, [r3, r2]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2243      	movs	r2, #67	; 0x43
 8002a66:	2101      	movs	r1, #1
 8002a68:	5499      	strb	r1, [r3, r2]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2244      	movs	r2, #68	; 0x44
 8002a6e:	2101      	movs	r1, #1
 8002a70:	5499      	strb	r1, [r3, r2]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2245      	movs	r2, #69	; 0x45
 8002a76:	2101      	movs	r1, #1
 8002a78:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	223d      	movs	r2, #61	; 0x3d
 8002a7e:	2101      	movs	r1, #1
 8002a80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	0018      	movs	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	b002      	add	sp, #8
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002a94:	46c0      	nop			; (mov r8, r8)
 8002a96:	46bd      	mov	sp, r7
 8002a98:	b002      	add	sp, #8
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa6:	230f      	movs	r3, #15
 8002aa8:	18fb      	adds	r3, r7, r3
 8002aaa:	2200      	movs	r2, #0
 8002aac:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d104      	bne.n	8002abe <HAL_TIM_IC_Start_IT+0x22>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	223e      	movs	r2, #62	; 0x3e
 8002ab8:	5c9b      	ldrb	r3, [r3, r2]
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	e013      	b.n	8002ae6 <HAL_TIM_IC_Start_IT+0x4a>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	2b04      	cmp	r3, #4
 8002ac2:	d104      	bne.n	8002ace <HAL_TIM_IC_Start_IT+0x32>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	223f      	movs	r2, #63	; 0x3f
 8002ac8:	5c9b      	ldrb	r3, [r3, r2]
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	e00b      	b.n	8002ae6 <HAL_TIM_IC_Start_IT+0x4a>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d104      	bne.n	8002ade <HAL_TIM_IC_Start_IT+0x42>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2240      	movs	r2, #64	; 0x40
 8002ad8:	5c9b      	ldrb	r3, [r3, r2]
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	e003      	b.n	8002ae6 <HAL_TIM_IC_Start_IT+0x4a>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2241      	movs	r2, #65	; 0x41
 8002ae2:	5c9b      	ldrb	r3, [r3, r2]
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	220e      	movs	r2, #14
 8002ae8:	18ba      	adds	r2, r7, r2
 8002aea:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d104      	bne.n	8002afc <HAL_TIM_IC_Start_IT+0x60>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2242      	movs	r2, #66	; 0x42
 8002af6:	5c9b      	ldrb	r3, [r3, r2]
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	e013      	b.n	8002b24 <HAL_TIM_IC_Start_IT+0x88>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d104      	bne.n	8002b0c <HAL_TIM_IC_Start_IT+0x70>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2243      	movs	r2, #67	; 0x43
 8002b06:	5c9b      	ldrb	r3, [r3, r2]
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	e00b      	b.n	8002b24 <HAL_TIM_IC_Start_IT+0x88>
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	2b08      	cmp	r3, #8
 8002b10:	d104      	bne.n	8002b1c <HAL_TIM_IC_Start_IT+0x80>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2244      	movs	r2, #68	; 0x44
 8002b16:	5c9b      	ldrb	r3, [r3, r2]
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	e003      	b.n	8002b24 <HAL_TIM_IC_Start_IT+0x88>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2245      	movs	r2, #69	; 0x45
 8002b20:	5c9b      	ldrb	r3, [r3, r2]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	210d      	movs	r1, #13
 8002b26:	187a      	adds	r2, r7, r1
 8002b28:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b2a:	230e      	movs	r3, #14
 8002b2c:	18fb      	adds	r3, r7, r3
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d103      	bne.n	8002b3c <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002b34:	187b      	adds	r3, r7, r1
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d001      	beq.n	8002b40 <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e0ac      	b.n	8002c9a <HAL_TIM_IC_Start_IT+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d104      	bne.n	8002b50 <HAL_TIM_IC_Start_IT+0xb4>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	223e      	movs	r2, #62	; 0x3e
 8002b4a:	2102      	movs	r1, #2
 8002b4c:	5499      	strb	r1, [r3, r2]
 8002b4e:	e013      	b.n	8002b78 <HAL_TIM_IC_Start_IT+0xdc>
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d104      	bne.n	8002b60 <HAL_TIM_IC_Start_IT+0xc4>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	223f      	movs	r2, #63	; 0x3f
 8002b5a:	2102      	movs	r1, #2
 8002b5c:	5499      	strb	r1, [r3, r2]
 8002b5e:	e00b      	b.n	8002b78 <HAL_TIM_IC_Start_IT+0xdc>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d104      	bne.n	8002b70 <HAL_TIM_IC_Start_IT+0xd4>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2240      	movs	r2, #64	; 0x40
 8002b6a:	2102      	movs	r1, #2
 8002b6c:	5499      	strb	r1, [r3, r2]
 8002b6e:	e003      	b.n	8002b78 <HAL_TIM_IC_Start_IT+0xdc>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2241      	movs	r2, #65	; 0x41
 8002b74:	2102      	movs	r1, #2
 8002b76:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d104      	bne.n	8002b88 <HAL_TIM_IC_Start_IT+0xec>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2242      	movs	r2, #66	; 0x42
 8002b82:	2102      	movs	r1, #2
 8002b84:	5499      	strb	r1, [r3, r2]
 8002b86:	e013      	b.n	8002bb0 <HAL_TIM_IC_Start_IT+0x114>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d104      	bne.n	8002b98 <HAL_TIM_IC_Start_IT+0xfc>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2243      	movs	r2, #67	; 0x43
 8002b92:	2102      	movs	r1, #2
 8002b94:	5499      	strb	r1, [r3, r2]
 8002b96:	e00b      	b.n	8002bb0 <HAL_TIM_IC_Start_IT+0x114>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	2b08      	cmp	r3, #8
 8002b9c:	d104      	bne.n	8002ba8 <HAL_TIM_IC_Start_IT+0x10c>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2244      	movs	r2, #68	; 0x44
 8002ba2:	2102      	movs	r1, #2
 8002ba4:	5499      	strb	r1, [r3, r2]
 8002ba6:	e003      	b.n	8002bb0 <HAL_TIM_IC_Start_IT+0x114>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2245      	movs	r2, #69	; 0x45
 8002bac:	2102      	movs	r1, #2
 8002bae:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	2b0c      	cmp	r3, #12
 8002bb4:	d02a      	beq.n	8002c0c <HAL_TIM_IC_Start_IT+0x170>
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	2b0c      	cmp	r3, #12
 8002bba:	d830      	bhi.n	8002c1e <HAL_TIM_IC_Start_IT+0x182>
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	2b08      	cmp	r3, #8
 8002bc0:	d01b      	beq.n	8002bfa <HAL_TIM_IC_Start_IT+0x15e>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d82a      	bhi.n	8002c1e <HAL_TIM_IC_Start_IT+0x182>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_TIM_IC_Start_IT+0x13a>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2b04      	cmp	r3, #4
 8002bd2:	d009      	beq.n	8002be8 <HAL_TIM_IC_Start_IT+0x14c>
 8002bd4:	e023      	b.n	8002c1e <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68da      	ldr	r2, [r3, #12]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2102      	movs	r1, #2
 8002be2:	430a      	orrs	r2, r1
 8002be4:	60da      	str	r2, [r3, #12]
      break;
 8002be6:	e01f      	b.n	8002c28 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2104      	movs	r1, #4
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	60da      	str	r2, [r3, #12]
      break;
 8002bf8:	e016      	b.n	8002c28 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2108      	movs	r1, #8
 8002c06:	430a      	orrs	r2, r1
 8002c08:	60da      	str	r2, [r3, #12]
      break;
 8002c0a:	e00d      	b.n	8002c28 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2110      	movs	r1, #16
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	60da      	str	r2, [r3, #12]
      break;
 8002c1c:	e004      	b.n	8002c28 <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 8002c1e:	230f      	movs	r3, #15
 8002c20:	18fb      	adds	r3, r7, r3
 8002c22:	2201      	movs	r2, #1
 8002c24:	701a      	strb	r2, [r3, #0]
      break;
 8002c26:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8002c28:	230f      	movs	r3, #15
 8002c2a:	18fb      	adds	r3, r7, r3
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d130      	bne.n	8002c94 <HAL_TIM_IC_Start_IT+0x1f8>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6839      	ldr	r1, [r7, #0]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	f001 f858 	bl	8003cf0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a17      	ldr	r2, [pc, #92]	; (8002ca4 <HAL_TIM_IC_Start_IT+0x208>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d00a      	beq.n	8002c60 <HAL_TIM_IC_Start_IT+0x1c4>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	2380      	movs	r3, #128	; 0x80
 8002c50:	05db      	lsls	r3, r3, #23
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d004      	beq.n	8002c60 <HAL_TIM_IC_Start_IT+0x1c4>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a13      	ldr	r2, [pc, #76]	; (8002ca8 <HAL_TIM_IC_Start_IT+0x20c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d111      	bne.n	8002c84 <HAL_TIM_IC_Start_IT+0x1e8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	2207      	movs	r2, #7
 8002c68:	4013      	ands	r3, r2
 8002c6a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	2b06      	cmp	r3, #6
 8002c70:	d010      	beq.n	8002c94 <HAL_TIM_IC_Start_IT+0x1f8>
      {
        __HAL_TIM_ENABLE(htim);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c82:	e007      	b.n	8002c94 <HAL_TIM_IC_Start_IT+0x1f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2101      	movs	r1, #1
 8002c90:	430a      	orrs	r2, r1
 8002c92:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002c94:	230f      	movs	r3, #15
 8002c96:	18fb      	adds	r3, r7, r3
 8002c98:	781b      	ldrb	r3, [r3, #0]
}
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	b004      	add	sp, #16
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	40012c00 	.word	0x40012c00
 8002ca8:	40000400 	.word	0x40000400

08002cac <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb6:	230f      	movs	r3, #15
 8002cb8:	18fb      	adds	r3, r7, r3
 8002cba:	2200      	movs	r2, #0
 8002cbc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2b0c      	cmp	r3, #12
 8002cc2:	d02a      	beq.n	8002d1a <HAL_TIM_IC_Stop_IT+0x6e>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	2b0c      	cmp	r3, #12
 8002cc8:	d830      	bhi.n	8002d2c <HAL_TIM_IC_Stop_IT+0x80>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d01b      	beq.n	8002d08 <HAL_TIM_IC_Stop_IT+0x5c>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	2b08      	cmp	r3, #8
 8002cd4:	d82a      	bhi.n	8002d2c <HAL_TIM_IC_Stop_IT+0x80>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <HAL_TIM_IC_Stop_IT+0x38>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d009      	beq.n	8002cf6 <HAL_TIM_IC_Stop_IT+0x4a>
 8002ce2:	e023      	b.n	8002d2c <HAL_TIM_IC_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2102      	movs	r1, #2
 8002cf0:	438a      	bics	r2, r1
 8002cf2:	60da      	str	r2, [r3, #12]
      break;
 8002cf4:	e01f      	b.n	8002d36 <HAL_TIM_IC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2104      	movs	r1, #4
 8002d02:	438a      	bics	r2, r1
 8002d04:	60da      	str	r2, [r3, #12]
      break;
 8002d06:	e016      	b.n	8002d36 <HAL_TIM_IC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2108      	movs	r1, #8
 8002d14:	438a      	bics	r2, r1
 8002d16:	60da      	str	r2, [r3, #12]
      break;
 8002d18:	e00d      	b.n	8002d36 <HAL_TIM_IC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2110      	movs	r1, #16
 8002d26:	438a      	bics	r2, r1
 8002d28:	60da      	str	r2, [r3, #12]
      break;
 8002d2a:	e004      	b.n	8002d36 <HAL_TIM_IC_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 8002d2c:	230f      	movs	r3, #15
 8002d2e:	18fb      	adds	r3, r7, r3
 8002d30:	2201      	movs	r2, #1
 8002d32:	701a      	strb	r2, [r3, #0]
      break;
 8002d34:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8002d36:	230f      	movs	r3, #15
 8002d38:	18fb      	adds	r3, r7, r3
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d152      	bne.n	8002de6 <HAL_TIM_IC_Stop_IT+0x13a>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6839      	ldr	r1, [r7, #0]
 8002d46:	2200      	movs	r2, #0
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f000 ffd1 	bl	8003cf0 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	4a27      	ldr	r2, [pc, #156]	; (8002df4 <HAL_TIM_IC_Stop_IT+0x148>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	d10d      	bne.n	8002d76 <HAL_TIM_IC_Stop_IT+0xca>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	4a25      	ldr	r2, [pc, #148]	; (8002df8 <HAL_TIM_IC_Stop_IT+0x14c>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	d107      	bne.n	8002d76 <HAL_TIM_IC_Stop_IT+0xca>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2101      	movs	r1, #1
 8002d72:	438a      	bics	r2, r1
 8002d74:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d104      	bne.n	8002d86 <HAL_TIM_IC_Stop_IT+0xda>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	223e      	movs	r2, #62	; 0x3e
 8002d80:	2101      	movs	r1, #1
 8002d82:	5499      	strb	r1, [r3, r2]
 8002d84:	e013      	b.n	8002dae <HAL_TIM_IC_Stop_IT+0x102>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d104      	bne.n	8002d96 <HAL_TIM_IC_Stop_IT+0xea>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	223f      	movs	r2, #63	; 0x3f
 8002d90:	2101      	movs	r1, #1
 8002d92:	5499      	strb	r1, [r3, r2]
 8002d94:	e00b      	b.n	8002dae <HAL_TIM_IC_Stop_IT+0x102>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d104      	bne.n	8002da6 <HAL_TIM_IC_Stop_IT+0xfa>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2240      	movs	r2, #64	; 0x40
 8002da0:	2101      	movs	r1, #1
 8002da2:	5499      	strb	r1, [r3, r2]
 8002da4:	e003      	b.n	8002dae <HAL_TIM_IC_Stop_IT+0x102>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2241      	movs	r2, #65	; 0x41
 8002daa:	2101      	movs	r1, #1
 8002dac:	5499      	strb	r1, [r3, r2]
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d104      	bne.n	8002dbe <HAL_TIM_IC_Stop_IT+0x112>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2242      	movs	r2, #66	; 0x42
 8002db8:	2101      	movs	r1, #1
 8002dba:	5499      	strb	r1, [r3, r2]
 8002dbc:	e013      	b.n	8002de6 <HAL_TIM_IC_Stop_IT+0x13a>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d104      	bne.n	8002dce <HAL_TIM_IC_Stop_IT+0x122>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2243      	movs	r2, #67	; 0x43
 8002dc8:	2101      	movs	r1, #1
 8002dca:	5499      	strb	r1, [r3, r2]
 8002dcc:	e00b      	b.n	8002de6 <HAL_TIM_IC_Stop_IT+0x13a>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	d104      	bne.n	8002dde <HAL_TIM_IC_Stop_IT+0x132>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2244      	movs	r2, #68	; 0x44
 8002dd8:	2101      	movs	r1, #1
 8002dda:	5499      	strb	r1, [r3, r2]
 8002ddc:	e003      	b.n	8002de6 <HAL_TIM_IC_Stop_IT+0x13a>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2245      	movs	r2, #69	; 0x45
 8002de2:	2101      	movs	r1, #1
 8002de4:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8002de6:	230f      	movs	r3, #15
 8002de8:	18fb      	adds	r3, r7, r3
 8002dea:	781b      	ldrb	r3, [r3, #0]
}
 8002dec:	0018      	movs	r0, r3
 8002dee:	46bd      	mov	sp, r7
 8002df0:	b004      	add	sp, #16
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	00001111 	.word	0x00001111
 8002df8:	00000444 	.word	0x00000444

08002dfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d124      	bne.n	8002e5c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	2202      	movs	r2, #2
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d11d      	bne.n	8002e5c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2203      	movs	r2, #3
 8002e26:	4252      	negs	r2, r2
 8002e28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	2203      	movs	r2, #3
 8002e38:	4013      	ands	r3, r2
 8002e3a:	d004      	beq.n	8002e46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f7fd fe66 	bl	8000b10 <HAL_TIM_IC_CaptureCallback>
 8002e44:	e007      	b.n	8002e56 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	0018      	movs	r0, r3
 8002e4a:	f000 fb2b 	bl	80034a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	0018      	movs	r0, r3
 8002e52:	f000 fb2f 	bl	80034b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	2204      	movs	r2, #4
 8002e64:	4013      	ands	r3, r2
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	d125      	bne.n	8002eb6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	2204      	movs	r2, #4
 8002e72:	4013      	ands	r3, r2
 8002e74:	2b04      	cmp	r3, #4
 8002e76:	d11e      	bne.n	8002eb6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2205      	movs	r2, #5
 8002e7e:	4252      	negs	r2, r2
 8002e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2202      	movs	r2, #2
 8002e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699a      	ldr	r2, [r3, #24]
 8002e8e:	23c0      	movs	r3, #192	; 0xc0
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4013      	ands	r3, r2
 8002e94:	d004      	beq.n	8002ea0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f7fd fe39 	bl	8000b10 <HAL_TIM_IC_CaptureCallback>
 8002e9e:	e007      	b.n	8002eb0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	f000 fafe 	bl	80034a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f000 fb02 	bl	80034b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	2208      	movs	r2, #8
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d124      	bne.n	8002f0e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	2208      	movs	r2, #8
 8002ecc:	4013      	ands	r3, r2
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	d11d      	bne.n	8002f0e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2209      	movs	r2, #9
 8002ed8:	4252      	negs	r2, r2
 8002eda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2204      	movs	r2, #4
 8002ee0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	69db      	ldr	r3, [r3, #28]
 8002ee8:	2203      	movs	r2, #3
 8002eea:	4013      	ands	r3, r2
 8002eec:	d004      	beq.n	8002ef8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f7fd fe0d 	bl	8000b10 <HAL_TIM_IC_CaptureCallback>
 8002ef6:	e007      	b.n	8002f08 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	0018      	movs	r0, r3
 8002efc:	f000 fad2 	bl	80034a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	0018      	movs	r0, r3
 8002f04:	f000 fad6 	bl	80034b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	2210      	movs	r2, #16
 8002f16:	4013      	ands	r3, r2
 8002f18:	2b10      	cmp	r3, #16
 8002f1a:	d125      	bne.n	8002f68 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	2210      	movs	r2, #16
 8002f24:	4013      	ands	r3, r2
 8002f26:	2b10      	cmp	r3, #16
 8002f28:	d11e      	bne.n	8002f68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2211      	movs	r2, #17
 8002f30:	4252      	negs	r2, r2
 8002f32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2208      	movs	r2, #8
 8002f38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	69da      	ldr	r2, [r3, #28]
 8002f40:	23c0      	movs	r3, #192	; 0xc0
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4013      	ands	r3, r2
 8002f46:	d004      	beq.n	8002f52 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f7fd fde0 	bl	8000b10 <HAL_TIM_IC_CaptureCallback>
 8002f50:	e007      	b.n	8002f62 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	0018      	movs	r0, r3
 8002f56:	f000 faa5 	bl	80034a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	f000 faa9 	bl	80034b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	4013      	ands	r3, r2
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d10f      	bne.n	8002f96 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	4013      	ands	r3, r2
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d108      	bne.n	8002f96 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2202      	movs	r2, #2
 8002f8a:	4252      	negs	r2, r2
 8002f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	0018      	movs	r0, r3
 8002f92:	f7fd ff65 	bl	8000e60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	2280      	movs	r2, #128	; 0x80
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	2b80      	cmp	r3, #128	; 0x80
 8002fa2:	d10f      	bne.n	8002fc4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	2280      	movs	r2, #128	; 0x80
 8002fac:	4013      	ands	r3, r2
 8002fae:	2b80      	cmp	r3, #128	; 0x80
 8002fb0:	d108      	bne.n	8002fc4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2281      	movs	r2, #129	; 0x81
 8002fb8:	4252      	negs	r2, r2
 8002fba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	f000 ff78 	bl	8003eb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	2240      	movs	r2, #64	; 0x40
 8002fcc:	4013      	ands	r3, r2
 8002fce:	2b40      	cmp	r3, #64	; 0x40
 8002fd0:	d10f      	bne.n	8002ff2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	2240      	movs	r2, #64	; 0x40
 8002fda:	4013      	ands	r3, r2
 8002fdc:	2b40      	cmp	r3, #64	; 0x40
 8002fde:	d108      	bne.n	8002ff2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2241      	movs	r2, #65	; 0x41
 8002fe6:	4252      	negs	r2, r2
 8002fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	0018      	movs	r0, r3
 8002fee:	f000 fa69 	bl	80034c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	2b20      	cmp	r3, #32
 8002ffe:	d10f      	bne.n	8003020 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	2220      	movs	r2, #32
 8003008:	4013      	ands	r3, r2
 800300a:	2b20      	cmp	r3, #32
 800300c:	d108      	bne.n	8003020 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2221      	movs	r2, #33	; 0x21
 8003014:	4252      	negs	r2, r2
 8003016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	0018      	movs	r0, r3
 800301c:	f000 ff42 	bl	8003ea4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003020:	46c0      	nop			; (mov r8, r8)
 8003022:	46bd      	mov	sp, r7
 8003024:	b002      	add	sp, #8
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003034:	2317      	movs	r3, #23
 8003036:	18fb      	adds	r3, r7, r3
 8003038:	2200      	movs	r2, #0
 800303a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	223c      	movs	r2, #60	; 0x3c
 8003040:	5c9b      	ldrb	r3, [r3, r2]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d101      	bne.n	800304a <HAL_TIM_IC_ConfigChannel+0x22>
 8003046:	2302      	movs	r3, #2
 8003048:	e08c      	b.n	8003164 <HAL_TIM_IC_ConfigChannel+0x13c>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	223c      	movs	r2, #60	; 0x3c
 800304e:	2101      	movs	r1, #1
 8003050:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d11b      	bne.n	8003090 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003068:	f000 fc8a 	bl	8003980 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	699a      	ldr	r2, [r3, #24]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	210c      	movs	r1, #12
 8003078:	438a      	bics	r2, r1
 800307a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6999      	ldr	r1, [r3, #24]
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	689a      	ldr	r2, [r3, #8]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	619a      	str	r2, [r3, #24]
 800308e:	e062      	b.n	8003156 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b04      	cmp	r3, #4
 8003094:	d11c      	bne.n	80030d0 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80030a6:	f000 fcef 	bl	8003a88 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	699a      	ldr	r2, [r3, #24]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	492d      	ldr	r1, [pc, #180]	; (800316c <HAL_TIM_IC_ConfigChannel+0x144>)
 80030b6:	400a      	ands	r2, r1
 80030b8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6999      	ldr	r1, [r3, #24]
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	021a      	lsls	r2, r3, #8
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	619a      	str	r2, [r3, #24]
 80030ce:	e042      	b.n	8003156 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b08      	cmp	r3, #8
 80030d4:	d11b      	bne.n	800310e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80030e6:	f000 fd43 	bl	8003b70 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	69da      	ldr	r2, [r3, #28]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	210c      	movs	r1, #12
 80030f6:	438a      	bics	r2, r1
 80030f8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69d9      	ldr	r1, [r3, #28]
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	61da      	str	r2, [r3, #28]
 800310c:	e023      	b.n	8003156 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b0c      	cmp	r3, #12
 8003112:	d11c      	bne.n	800314e <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003124:	f000 fd64 	bl	8003bf0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	69da      	ldr	r2, [r3, #28]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	490e      	ldr	r1, [pc, #56]	; (800316c <HAL_TIM_IC_ConfigChannel+0x144>)
 8003134:	400a      	ands	r2, r1
 8003136:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	69d9      	ldr	r1, [r3, #28]
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	021a      	lsls	r2, r3, #8
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	61da      	str	r2, [r3, #28]
 800314c:	e003      	b.n	8003156 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800314e:	2317      	movs	r3, #23
 8003150:	18fb      	adds	r3, r7, r3
 8003152:	2201      	movs	r2, #1
 8003154:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	223c      	movs	r2, #60	; 0x3c
 800315a:	2100      	movs	r1, #0
 800315c:	5499      	strb	r1, [r3, r2]

  return status;
 800315e:	2317      	movs	r3, #23
 8003160:	18fb      	adds	r3, r7, r3
 8003162:	781b      	ldrb	r3, [r3, #0]
}
 8003164:	0018      	movs	r0, r3
 8003166:	46bd      	mov	sp, r7
 8003168:	b006      	add	sp, #24
 800316a:	bd80      	pop	{r7, pc}
 800316c:	fffff3ff 	.word	0xfffff3ff

08003170 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800317c:	2317      	movs	r3, #23
 800317e:	18fb      	adds	r3, r7, r3
 8003180:	2200      	movs	r2, #0
 8003182:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	223c      	movs	r2, #60	; 0x3c
 8003188:	5c9b      	ldrb	r3, [r3, r2]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d101      	bne.n	8003192 <HAL_TIM_PWM_ConfigChannel+0x22>
 800318e:	2302      	movs	r3, #2
 8003190:	e0ad      	b.n	80032ee <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	223c      	movs	r2, #60	; 0x3c
 8003196:	2101      	movs	r1, #1
 8003198:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b0c      	cmp	r3, #12
 800319e:	d100      	bne.n	80031a2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80031a0:	e076      	b.n	8003290 <HAL_TIM_PWM_ConfigChannel+0x120>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b0c      	cmp	r3, #12
 80031a6:	d900      	bls.n	80031aa <HAL_TIM_PWM_ConfigChannel+0x3a>
 80031a8:	e095      	b.n	80032d6 <HAL_TIM_PWM_ConfigChannel+0x166>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d04e      	beq.n	800324e <HAL_TIM_PWM_ConfigChannel+0xde>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d900      	bls.n	80031b8 <HAL_TIM_PWM_ConfigChannel+0x48>
 80031b6:	e08e      	b.n	80032d6 <HAL_TIM_PWM_ConfigChannel+0x166>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_TIM_PWM_ConfigChannel+0x56>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	d021      	beq.n	8003208 <HAL_TIM_PWM_ConfigChannel+0x98>
 80031c4:	e087      	b.n	80032d6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	0011      	movs	r1, r2
 80031ce:	0018      	movs	r0, r3
 80031d0:	f000 f9f6 	bl	80035c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	699a      	ldr	r2, [r3, #24]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2108      	movs	r1, #8
 80031e0:	430a      	orrs	r2, r1
 80031e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	699a      	ldr	r2, [r3, #24]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2104      	movs	r1, #4
 80031f0:	438a      	bics	r2, r1
 80031f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6999      	ldr	r1, [r3, #24]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	691a      	ldr	r2, [r3, #16]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	619a      	str	r2, [r3, #24]
      break;
 8003206:	e06b      	b.n	80032e0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	0011      	movs	r1, r2
 8003210:	0018      	movs	r0, r3
 8003212:	f000 fa53 	bl	80036bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	699a      	ldr	r2, [r3, #24]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2180      	movs	r1, #128	; 0x80
 8003222:	0109      	lsls	r1, r1, #4
 8003224:	430a      	orrs	r2, r1
 8003226:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	699a      	ldr	r2, [r3, #24]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4931      	ldr	r1, [pc, #196]	; (80032f8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003234:	400a      	ands	r2, r1
 8003236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6999      	ldr	r1, [r3, #24]
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	021a      	lsls	r2, r3, #8
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	619a      	str	r2, [r3, #24]
      break;
 800324c:	e048      	b.n	80032e0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	0011      	movs	r1, r2
 8003256:	0018      	movs	r0, r3
 8003258:	f000 faae 	bl	80037b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	69da      	ldr	r2, [r3, #28]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2108      	movs	r1, #8
 8003268:	430a      	orrs	r2, r1
 800326a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	69da      	ldr	r2, [r3, #28]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2104      	movs	r1, #4
 8003278:	438a      	bics	r2, r1
 800327a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	69d9      	ldr	r1, [r3, #28]
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	691a      	ldr	r2, [r3, #16]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	61da      	str	r2, [r3, #28]
      break;
 800328e:	e027      	b.n	80032e0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	0011      	movs	r1, r2
 8003298:	0018      	movs	r0, r3
 800329a:	f000 fb0d 	bl	80038b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	69da      	ldr	r2, [r3, #28]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2180      	movs	r1, #128	; 0x80
 80032aa:	0109      	lsls	r1, r1, #4
 80032ac:	430a      	orrs	r2, r1
 80032ae:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	69da      	ldr	r2, [r3, #28]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	490f      	ldr	r1, [pc, #60]	; (80032f8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80032bc:	400a      	ands	r2, r1
 80032be:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	69d9      	ldr	r1, [r3, #28]
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	021a      	lsls	r2, r3, #8
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	61da      	str	r2, [r3, #28]
      break;
 80032d4:	e004      	b.n	80032e0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80032d6:	2317      	movs	r3, #23
 80032d8:	18fb      	adds	r3, r7, r3
 80032da:	2201      	movs	r2, #1
 80032dc:	701a      	strb	r2, [r3, #0]
      break;
 80032de:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	223c      	movs	r2, #60	; 0x3c
 80032e4:	2100      	movs	r1, #0
 80032e6:	5499      	strb	r1, [r3, r2]

  return status;
 80032e8:	2317      	movs	r3, #23
 80032ea:	18fb      	adds	r3, r7, r3
 80032ec:	781b      	ldrb	r3, [r3, #0]
}
 80032ee:	0018      	movs	r0, r3
 80032f0:	46bd      	mov	sp, r7
 80032f2:	b006      	add	sp, #24
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	46c0      	nop			; (mov r8, r8)
 80032f8:	fffffbff 	.word	0xfffffbff

080032fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003306:	230f      	movs	r3, #15
 8003308:	18fb      	adds	r3, r7, r3
 800330a:	2200      	movs	r2, #0
 800330c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	223c      	movs	r2, #60	; 0x3c
 8003312:	5c9b      	ldrb	r3, [r3, r2]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d101      	bne.n	800331c <HAL_TIM_ConfigClockSource+0x20>
 8003318:	2302      	movs	r3, #2
 800331a:	e0bc      	b.n	8003496 <HAL_TIM_ConfigClockSource+0x19a>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	223c      	movs	r2, #60	; 0x3c
 8003320:	2101      	movs	r1, #1
 8003322:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	223d      	movs	r2, #61	; 0x3d
 8003328:	2102      	movs	r1, #2
 800332a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	2277      	movs	r2, #119	; 0x77
 8003338:	4393      	bics	r3, r2
 800333a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	4a58      	ldr	r2, [pc, #352]	; (80034a0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003340:	4013      	ands	r3, r2
 8003342:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2280      	movs	r2, #128	; 0x80
 8003352:	0192      	lsls	r2, r2, #6
 8003354:	4293      	cmp	r3, r2
 8003356:	d040      	beq.n	80033da <HAL_TIM_ConfigClockSource+0xde>
 8003358:	2280      	movs	r2, #128	; 0x80
 800335a:	0192      	lsls	r2, r2, #6
 800335c:	4293      	cmp	r3, r2
 800335e:	d900      	bls.n	8003362 <HAL_TIM_ConfigClockSource+0x66>
 8003360:	e088      	b.n	8003474 <HAL_TIM_ConfigClockSource+0x178>
 8003362:	2280      	movs	r2, #128	; 0x80
 8003364:	0152      	lsls	r2, r2, #5
 8003366:	4293      	cmp	r3, r2
 8003368:	d100      	bne.n	800336c <HAL_TIM_ConfigClockSource+0x70>
 800336a:	e088      	b.n	800347e <HAL_TIM_ConfigClockSource+0x182>
 800336c:	2280      	movs	r2, #128	; 0x80
 800336e:	0152      	lsls	r2, r2, #5
 8003370:	4293      	cmp	r3, r2
 8003372:	d900      	bls.n	8003376 <HAL_TIM_ConfigClockSource+0x7a>
 8003374:	e07e      	b.n	8003474 <HAL_TIM_ConfigClockSource+0x178>
 8003376:	2b70      	cmp	r3, #112	; 0x70
 8003378:	d018      	beq.n	80033ac <HAL_TIM_ConfigClockSource+0xb0>
 800337a:	d900      	bls.n	800337e <HAL_TIM_ConfigClockSource+0x82>
 800337c:	e07a      	b.n	8003474 <HAL_TIM_ConfigClockSource+0x178>
 800337e:	2b60      	cmp	r3, #96	; 0x60
 8003380:	d04f      	beq.n	8003422 <HAL_TIM_ConfigClockSource+0x126>
 8003382:	d900      	bls.n	8003386 <HAL_TIM_ConfigClockSource+0x8a>
 8003384:	e076      	b.n	8003474 <HAL_TIM_ConfigClockSource+0x178>
 8003386:	2b50      	cmp	r3, #80	; 0x50
 8003388:	d03b      	beq.n	8003402 <HAL_TIM_ConfigClockSource+0x106>
 800338a:	d900      	bls.n	800338e <HAL_TIM_ConfigClockSource+0x92>
 800338c:	e072      	b.n	8003474 <HAL_TIM_ConfigClockSource+0x178>
 800338e:	2b40      	cmp	r3, #64	; 0x40
 8003390:	d057      	beq.n	8003442 <HAL_TIM_ConfigClockSource+0x146>
 8003392:	d900      	bls.n	8003396 <HAL_TIM_ConfigClockSource+0x9a>
 8003394:	e06e      	b.n	8003474 <HAL_TIM_ConfigClockSource+0x178>
 8003396:	2b30      	cmp	r3, #48	; 0x30
 8003398:	d063      	beq.n	8003462 <HAL_TIM_ConfigClockSource+0x166>
 800339a:	d86b      	bhi.n	8003474 <HAL_TIM_ConfigClockSource+0x178>
 800339c:	2b20      	cmp	r3, #32
 800339e:	d060      	beq.n	8003462 <HAL_TIM_ConfigClockSource+0x166>
 80033a0:	d868      	bhi.n	8003474 <HAL_TIM_ConfigClockSource+0x178>
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d05d      	beq.n	8003462 <HAL_TIM_ConfigClockSource+0x166>
 80033a6:	2b10      	cmp	r3, #16
 80033a8:	d05b      	beq.n	8003462 <HAL_TIM_ConfigClockSource+0x166>
 80033aa:	e063      	b.n	8003474 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033bc:	f000 fc78 	bl	8003cb0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	2277      	movs	r2, #119	; 0x77
 80033cc:	4313      	orrs	r3, r2
 80033ce:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68ba      	ldr	r2, [r7, #8]
 80033d6:	609a      	str	r2, [r3, #8]
      break;
 80033d8:	e052      	b.n	8003480 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033ea:	f000 fc61 	bl	8003cb0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2180      	movs	r1, #128	; 0x80
 80033fa:	01c9      	lsls	r1, r1, #7
 80033fc:	430a      	orrs	r2, r1
 80033fe:	609a      	str	r2, [r3, #8]
      break;
 8003400:	e03e      	b.n	8003480 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800340e:	001a      	movs	r2, r3
 8003410:	f000 fb0c 	bl	8003a2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2150      	movs	r1, #80	; 0x50
 800341a:	0018      	movs	r0, r3
 800341c:	f000 fc2e 	bl	8003c7c <TIM_ITRx_SetConfig>
      break;
 8003420:	e02e      	b.n	8003480 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800342e:	001a      	movs	r2, r3
 8003430:	f000 fb6c 	bl	8003b0c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2160      	movs	r1, #96	; 0x60
 800343a:	0018      	movs	r0, r3
 800343c:	f000 fc1e 	bl	8003c7c <TIM_ITRx_SetConfig>
      break;
 8003440:	e01e      	b.n	8003480 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800344e:	001a      	movs	r2, r3
 8003450:	f000 faec 	bl	8003a2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2140      	movs	r1, #64	; 0x40
 800345a:	0018      	movs	r0, r3
 800345c:	f000 fc0e 	bl	8003c7c <TIM_ITRx_SetConfig>
      break;
 8003460:	e00e      	b.n	8003480 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	0019      	movs	r1, r3
 800346c:	0010      	movs	r0, r2
 800346e:	f000 fc05 	bl	8003c7c <TIM_ITRx_SetConfig>
      break;
 8003472:	e005      	b.n	8003480 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003474:	230f      	movs	r3, #15
 8003476:	18fb      	adds	r3, r7, r3
 8003478:	2201      	movs	r2, #1
 800347a:	701a      	strb	r2, [r3, #0]
      break;
 800347c:	e000      	b.n	8003480 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800347e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	223d      	movs	r2, #61	; 0x3d
 8003484:	2101      	movs	r1, #1
 8003486:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	223c      	movs	r2, #60	; 0x3c
 800348c:	2100      	movs	r1, #0
 800348e:	5499      	strb	r1, [r3, r2]

  return status;
 8003490:	230f      	movs	r3, #15
 8003492:	18fb      	adds	r3, r7, r3
 8003494:	781b      	ldrb	r3, [r3, #0]
}
 8003496:	0018      	movs	r0, r3
 8003498:	46bd      	mov	sp, r7
 800349a:	b004      	add	sp, #16
 800349c:	bd80      	pop	{r7, pc}
 800349e:	46c0      	nop			; (mov r8, r8)
 80034a0:	ffff00ff 	.word	0xffff00ff

080034a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034ac:	46c0      	nop			; (mov r8, r8)
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b002      	add	sp, #8
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034bc:	46c0      	nop			; (mov r8, r8)
 80034be:	46bd      	mov	sp, r7
 80034c0:	b002      	add	sp, #8
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034cc:	46c0      	nop			; (mov r8, r8)
 80034ce:	46bd      	mov	sp, r7
 80034d0:	b002      	add	sp, #8
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a30      	ldr	r2, [pc, #192]	; (80035a8 <TIM_Base_SetConfig+0xd4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d008      	beq.n	80034fe <TIM_Base_SetConfig+0x2a>
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	2380      	movs	r3, #128	; 0x80
 80034f0:	05db      	lsls	r3, r3, #23
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d003      	beq.n	80034fe <TIM_Base_SetConfig+0x2a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a2c      	ldr	r2, [pc, #176]	; (80035ac <TIM_Base_SetConfig+0xd8>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d108      	bne.n	8003510 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2270      	movs	r2, #112	; 0x70
 8003502:	4393      	bics	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	4313      	orrs	r3, r2
 800350e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a25      	ldr	r2, [pc, #148]	; (80035a8 <TIM_Base_SetConfig+0xd4>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d014      	beq.n	8003542 <TIM_Base_SetConfig+0x6e>
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	2380      	movs	r3, #128	; 0x80
 800351c:	05db      	lsls	r3, r3, #23
 800351e:	429a      	cmp	r2, r3
 8003520:	d00f      	beq.n	8003542 <TIM_Base_SetConfig+0x6e>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a21      	ldr	r2, [pc, #132]	; (80035ac <TIM_Base_SetConfig+0xd8>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d00b      	beq.n	8003542 <TIM_Base_SetConfig+0x6e>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a20      	ldr	r2, [pc, #128]	; (80035b0 <TIM_Base_SetConfig+0xdc>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d007      	beq.n	8003542 <TIM_Base_SetConfig+0x6e>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a1f      	ldr	r2, [pc, #124]	; (80035b4 <TIM_Base_SetConfig+0xe0>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d003      	beq.n	8003542 <TIM_Base_SetConfig+0x6e>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a1e      	ldr	r2, [pc, #120]	; (80035b8 <TIM_Base_SetConfig+0xe4>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d108      	bne.n	8003554 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	4a1d      	ldr	r2, [pc, #116]	; (80035bc <TIM_Base_SetConfig+0xe8>)
 8003546:	4013      	ands	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	4313      	orrs	r3, r2
 8003552:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2280      	movs	r2, #128	; 0x80
 8003558:	4393      	bics	r3, r2
 800355a:	001a      	movs	r2, r3
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	4313      	orrs	r3, r2
 8003562:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a0a      	ldr	r2, [pc, #40]	; (80035a8 <TIM_Base_SetConfig+0xd4>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d007      	beq.n	8003592 <TIM_Base_SetConfig+0xbe>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a0b      	ldr	r2, [pc, #44]	; (80035b4 <TIM_Base_SetConfig+0xe0>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d003      	beq.n	8003592 <TIM_Base_SetConfig+0xbe>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a0a      	ldr	r2, [pc, #40]	; (80035b8 <TIM_Base_SetConfig+0xe4>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d103      	bne.n	800359a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	691a      	ldr	r2, [r3, #16]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	615a      	str	r2, [r3, #20]
}
 80035a0:	46c0      	nop			; (mov r8, r8)
 80035a2:	46bd      	mov	sp, r7
 80035a4:	b004      	add	sp, #16
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40012c00 	.word	0x40012c00
 80035ac:	40000400 	.word	0x40000400
 80035b0:	40002000 	.word	0x40002000
 80035b4:	40014400 	.word	0x40014400
 80035b8:	40014800 	.word	0x40014800
 80035bc:	fffffcff 	.word	0xfffffcff

080035c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	2201      	movs	r2, #1
 80035d0:	4393      	bics	r3, r2
 80035d2:	001a      	movs	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2270      	movs	r2, #112	; 0x70
 80035ee:	4393      	bics	r3, r2
 80035f0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2203      	movs	r2, #3
 80035f6:	4393      	bics	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	4313      	orrs	r3, r2
 8003602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	2202      	movs	r2, #2
 8003608:	4393      	bics	r3, r2
 800360a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	4313      	orrs	r3, r2
 8003614:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a23      	ldr	r2, [pc, #140]	; (80036a8 <TIM_OC1_SetConfig+0xe8>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d007      	beq.n	800362e <TIM_OC1_SetConfig+0x6e>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a22      	ldr	r2, [pc, #136]	; (80036ac <TIM_OC1_SetConfig+0xec>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d003      	beq.n	800362e <TIM_OC1_SetConfig+0x6e>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a21      	ldr	r2, [pc, #132]	; (80036b0 <TIM_OC1_SetConfig+0xf0>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d10c      	bne.n	8003648 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	2208      	movs	r2, #8
 8003632:	4393      	bics	r3, r2
 8003634:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	4313      	orrs	r3, r2
 800363e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	2204      	movs	r2, #4
 8003644:	4393      	bics	r3, r2
 8003646:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a17      	ldr	r2, [pc, #92]	; (80036a8 <TIM_OC1_SetConfig+0xe8>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d007      	beq.n	8003660 <TIM_OC1_SetConfig+0xa0>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a16      	ldr	r2, [pc, #88]	; (80036ac <TIM_OC1_SetConfig+0xec>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d003      	beq.n	8003660 <TIM_OC1_SetConfig+0xa0>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a15      	ldr	r2, [pc, #84]	; (80036b0 <TIM_OC1_SetConfig+0xf0>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d111      	bne.n	8003684 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	4a14      	ldr	r2, [pc, #80]	; (80036b4 <TIM_OC1_SetConfig+0xf4>)
 8003664:	4013      	ands	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	4a13      	ldr	r2, [pc, #76]	; (80036b8 <TIM_OC1_SetConfig+0xf8>)
 800366c:	4013      	ands	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	4313      	orrs	r3, r2
 8003678:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	4313      	orrs	r3, r2
 8003682:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	621a      	str	r2, [r3, #32]
}
 800369e:	46c0      	nop			; (mov r8, r8)
 80036a0:	46bd      	mov	sp, r7
 80036a2:	b006      	add	sp, #24
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	40012c00 	.word	0x40012c00
 80036ac:	40014400 	.word	0x40014400
 80036b0:	40014800 	.word	0x40014800
 80036b4:	fffffeff 	.word	0xfffffeff
 80036b8:	fffffdff 	.word	0xfffffdff

080036bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	2210      	movs	r2, #16
 80036cc:	4393      	bics	r3, r2
 80036ce:	001a      	movs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	4a2c      	ldr	r2, [pc, #176]	; (800379c <TIM_OC2_SetConfig+0xe0>)
 80036ea:	4013      	ands	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	4a2b      	ldr	r2, [pc, #172]	; (80037a0 <TIM_OC2_SetConfig+0xe4>)
 80036f2:	4013      	ands	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	021b      	lsls	r3, r3, #8
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	4313      	orrs	r3, r2
 8003700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	2220      	movs	r2, #32
 8003706:	4393      	bics	r3, r2
 8003708:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	011b      	lsls	r3, r3, #4
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	4313      	orrs	r3, r2
 8003714:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a22      	ldr	r2, [pc, #136]	; (80037a4 <TIM_OC2_SetConfig+0xe8>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d10d      	bne.n	800373a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2280      	movs	r2, #128	; 0x80
 8003722:	4393      	bics	r3, r2
 8003724:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	011b      	lsls	r3, r3, #4
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	4313      	orrs	r3, r2
 8003730:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	2240      	movs	r2, #64	; 0x40
 8003736:	4393      	bics	r3, r2
 8003738:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a19      	ldr	r2, [pc, #100]	; (80037a4 <TIM_OC2_SetConfig+0xe8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d007      	beq.n	8003752 <TIM_OC2_SetConfig+0x96>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a18      	ldr	r2, [pc, #96]	; (80037a8 <TIM_OC2_SetConfig+0xec>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d003      	beq.n	8003752 <TIM_OC2_SetConfig+0x96>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a17      	ldr	r2, [pc, #92]	; (80037ac <TIM_OC2_SetConfig+0xf0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d113      	bne.n	800377a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	4a16      	ldr	r2, [pc, #88]	; (80037b0 <TIM_OC2_SetConfig+0xf4>)
 8003756:	4013      	ands	r3, r2
 8003758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	4a15      	ldr	r2, [pc, #84]	; (80037b4 <TIM_OC2_SetConfig+0xf8>)
 800375e:	4013      	ands	r3, r2
 8003760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	4313      	orrs	r3, r2
 800376c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	4313      	orrs	r3, r2
 8003778:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	621a      	str	r2, [r3, #32]
}
 8003794:	46c0      	nop			; (mov r8, r8)
 8003796:	46bd      	mov	sp, r7
 8003798:	b006      	add	sp, #24
 800379a:	bd80      	pop	{r7, pc}
 800379c:	ffff8fff 	.word	0xffff8fff
 80037a0:	fffffcff 	.word	0xfffffcff
 80037a4:	40012c00 	.word	0x40012c00
 80037a8:	40014400 	.word	0x40014400
 80037ac:	40014800 	.word	0x40014800
 80037b0:	fffffbff 	.word	0xfffffbff
 80037b4:	fffff7ff 	.word	0xfffff7ff

080037b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	4a33      	ldr	r2, [pc, #204]	; (8003894 <TIM_OC3_SetConfig+0xdc>)
 80037c8:	401a      	ands	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2270      	movs	r2, #112	; 0x70
 80037e4:	4393      	bics	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2203      	movs	r2, #3
 80037ec:	4393      	bics	r3, r2
 80037ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	4a26      	ldr	r2, [pc, #152]	; (8003898 <TIM_OC3_SetConfig+0xe0>)
 80037fe:	4013      	ands	r3, r2
 8003800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	021b      	lsls	r3, r3, #8
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	4313      	orrs	r3, r2
 800380c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a22      	ldr	r2, [pc, #136]	; (800389c <TIM_OC3_SetConfig+0xe4>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d10d      	bne.n	8003832 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	4a21      	ldr	r2, [pc, #132]	; (80038a0 <TIM_OC3_SetConfig+0xe8>)
 800381a:	4013      	ands	r3, r2
 800381c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	021b      	lsls	r3, r3, #8
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	4313      	orrs	r3, r2
 8003828:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	4a1d      	ldr	r2, [pc, #116]	; (80038a4 <TIM_OC3_SetConfig+0xec>)
 800382e:	4013      	ands	r3, r2
 8003830:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a19      	ldr	r2, [pc, #100]	; (800389c <TIM_OC3_SetConfig+0xe4>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d007      	beq.n	800384a <TIM_OC3_SetConfig+0x92>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a1a      	ldr	r2, [pc, #104]	; (80038a8 <TIM_OC3_SetConfig+0xf0>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d003      	beq.n	800384a <TIM_OC3_SetConfig+0x92>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a19      	ldr	r2, [pc, #100]	; (80038ac <TIM_OC3_SetConfig+0xf4>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d113      	bne.n	8003872 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	4a18      	ldr	r2, [pc, #96]	; (80038b0 <TIM_OC3_SetConfig+0xf8>)
 800384e:	4013      	ands	r3, r2
 8003850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	4a17      	ldr	r2, [pc, #92]	; (80038b4 <TIM_OC3_SetConfig+0xfc>)
 8003856:	4013      	ands	r3, r2
 8003858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	4313      	orrs	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	4313      	orrs	r3, r2
 8003870:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	621a      	str	r2, [r3, #32]
}
 800388c:	46c0      	nop			; (mov r8, r8)
 800388e:	46bd      	mov	sp, r7
 8003890:	b006      	add	sp, #24
 8003892:	bd80      	pop	{r7, pc}
 8003894:	fffffeff 	.word	0xfffffeff
 8003898:	fffffdff 	.word	0xfffffdff
 800389c:	40012c00 	.word	0x40012c00
 80038a0:	fffff7ff 	.word	0xfffff7ff
 80038a4:	fffffbff 	.word	0xfffffbff
 80038a8:	40014400 	.word	0x40014400
 80038ac:	40014800 	.word	0x40014800
 80038b0:	ffffefff 	.word	0xffffefff
 80038b4:	ffffdfff 	.word	0xffffdfff

080038b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	4a26      	ldr	r2, [pc, #152]	; (8003960 <TIM_OC4_SetConfig+0xa8>)
 80038c8:	401a      	ands	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4a20      	ldr	r2, [pc, #128]	; (8003964 <TIM_OC4_SetConfig+0xac>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4a1f      	ldr	r2, [pc, #124]	; (8003968 <TIM_OC4_SetConfig+0xb0>)
 80038ec:	4013      	ands	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	021b      	lsls	r3, r3, #8
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	4a1b      	ldr	r2, [pc, #108]	; (800396c <TIM_OC4_SetConfig+0xb4>)
 8003900:	4013      	ands	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	031b      	lsls	r3, r3, #12
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	4313      	orrs	r3, r2
 800390e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a17      	ldr	r2, [pc, #92]	; (8003970 <TIM_OC4_SetConfig+0xb8>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d007      	beq.n	8003928 <TIM_OC4_SetConfig+0x70>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a16      	ldr	r2, [pc, #88]	; (8003974 <TIM_OC4_SetConfig+0xbc>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d003      	beq.n	8003928 <TIM_OC4_SetConfig+0x70>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a15      	ldr	r2, [pc, #84]	; (8003978 <TIM_OC4_SetConfig+0xc0>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d109      	bne.n	800393c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	4a14      	ldr	r2, [pc, #80]	; (800397c <TIM_OC4_SetConfig+0xc4>)
 800392c:	4013      	ands	r3, r2
 800392e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	019b      	lsls	r3, r3, #6
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	4313      	orrs	r3, r2
 800393a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	621a      	str	r2, [r3, #32]
}
 8003956:	46c0      	nop			; (mov r8, r8)
 8003958:	46bd      	mov	sp, r7
 800395a:	b006      	add	sp, #24
 800395c:	bd80      	pop	{r7, pc}
 800395e:	46c0      	nop			; (mov r8, r8)
 8003960:	ffffefff 	.word	0xffffefff
 8003964:	ffff8fff 	.word	0xffff8fff
 8003968:	fffffcff 	.word	0xfffffcff
 800396c:	ffffdfff 	.word	0xffffdfff
 8003970:	40012c00 	.word	0x40012c00
 8003974:	40014400 	.word	0x40014400
 8003978:	40014800 	.word	0x40014800
 800397c:	ffffbfff 	.word	0xffffbfff

08003980 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
 800398c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	2201      	movs	r2, #1
 8003994:	4393      	bics	r3, r2
 8003996:	001a      	movs	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4a1e      	ldr	r2, [pc, #120]	; (8003a24 <TIM_TI1_SetConfig+0xa4>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d008      	beq.n	80039c2 <TIM_TI1_SetConfig+0x42>
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	2380      	movs	r3, #128	; 0x80
 80039b4:	05db      	lsls	r3, r3, #23
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d003      	beq.n	80039c2 <TIM_TI1_SetConfig+0x42>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	4a1a      	ldr	r2, [pc, #104]	; (8003a28 <TIM_TI1_SetConfig+0xa8>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d101      	bne.n	80039c6 <TIM_TI1_SetConfig+0x46>
 80039c2:	2301      	movs	r3, #1
 80039c4:	e000      	b.n	80039c8 <TIM_TI1_SetConfig+0x48>
 80039c6:	2300      	movs	r3, #0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d008      	beq.n	80039de <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	2203      	movs	r2, #3
 80039d0:	4393      	bics	r3, r2
 80039d2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4313      	orrs	r3, r2
 80039da:	617b      	str	r3, [r7, #20]
 80039dc:	e003      	b.n	80039e6 <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2201      	movs	r2, #1
 80039e2:	4313      	orrs	r3, r2
 80039e4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	22f0      	movs	r2, #240	; 0xf0
 80039ea:	4393      	bics	r3, r2
 80039ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	22ff      	movs	r2, #255	; 0xff
 80039f4:	4013      	ands	r3, r2
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	220a      	movs	r2, #10
 8003a00:	4393      	bics	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	220a      	movs	r2, #10
 8003a08:	4013      	ands	r3, r2
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	621a      	str	r2, [r3, #32]
}
 8003a1c:	46c0      	nop			; (mov r8, r8)
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	b006      	add	sp, #24
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40012c00 	.word	0x40012c00
 8003a28:	40000400 	.word	0x40000400

08003a2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	2201      	movs	r2, #1
 8003a44:	4393      	bics	r3, r2
 8003a46:	001a      	movs	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	22f0      	movs	r2, #240	; 0xf0
 8003a56:	4393      	bics	r3, r2
 8003a58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	011b      	lsls	r3, r3, #4
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	220a      	movs	r2, #10
 8003a68:	4393      	bics	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	621a      	str	r2, [r3, #32]
}
 8003a80:	46c0      	nop			; (mov r8, r8)
 8003a82:	46bd      	mov	sp, r7
 8003a84:	b006      	add	sp, #24
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
 8003a94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	2210      	movs	r2, #16
 8003a9c:	4393      	bics	r3, r2
 8003a9e:	001a      	movs	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	4a14      	ldr	r2, [pc, #80]	; (8003b04 <TIM_TI2_SetConfig+0x7c>)
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	021b      	lsls	r3, r3, #8
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	4a10      	ldr	r2, [pc, #64]	; (8003b08 <TIM_TI2_SetConfig+0x80>)
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	031b      	lsls	r3, r3, #12
 8003ace:	041b      	lsls	r3, r3, #16
 8003ad0:	0c1b      	lsrs	r3, r3, #16
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	22a0      	movs	r2, #160	; 0xa0
 8003adc:	4393      	bics	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	011b      	lsls	r3, r3, #4
 8003ae4:	22a0      	movs	r2, #160	; 0xa0
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	621a      	str	r2, [r3, #32]
}
 8003afa:	46c0      	nop			; (mov r8, r8)
 8003afc:	46bd      	mov	sp, r7
 8003afe:	b006      	add	sp, #24
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	46c0      	nop			; (mov r8, r8)
 8003b04:	fffffcff 	.word	0xfffffcff
 8003b08:	ffff0fff 	.word	0xffff0fff

08003b0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	2210      	movs	r2, #16
 8003b1e:	4393      	bics	r3, r2
 8003b20:	001a      	movs	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	4a0d      	ldr	r2, [pc, #52]	; (8003b6c <TIM_TI2_ConfigInputStage+0x60>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	031b      	lsls	r3, r3, #12
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	22a0      	movs	r2, #160	; 0xa0
 8003b48:	4393      	bics	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	621a      	str	r2, [r3, #32]
}
 8003b62:	46c0      	nop			; (mov r8, r8)
 8003b64:	46bd      	mov	sp, r7
 8003b66:	b006      	add	sp, #24
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	46c0      	nop			; (mov r8, r8)
 8003b6c:	ffff0fff 	.word	0xffff0fff

08003b70 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
 8003b7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	4a19      	ldr	r2, [pc, #100]	; (8003be8 <TIM_TI3_SetConfig+0x78>)
 8003b84:	401a      	ands	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	2203      	movs	r2, #3
 8003b9a:	4393      	bics	r3, r2
 8003b9c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	22f0      	movs	r2, #240	; 0xf0
 8003baa:	4393      	bics	r3, r2
 8003bac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	22ff      	movs	r2, #255	; 0xff
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	4a0b      	ldr	r2, [pc, #44]	; (8003bec <TIM_TI3_SetConfig+0x7c>)
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	021a      	lsls	r2, r3, #8
 8003bc8:	23a0      	movs	r3, #160	; 0xa0
 8003bca:	011b      	lsls	r3, r3, #4
 8003bcc:	4013      	ands	r3, r2
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	621a      	str	r2, [r3, #32]
}
 8003be0:	46c0      	nop			; (mov r8, r8)
 8003be2:	46bd      	mov	sp, r7
 8003be4:	b006      	add	sp, #24
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	fffffeff 	.word	0xfffffeff
 8003bec:	fffff5ff 	.word	0xfffff5ff

08003bf0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
 8003bfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	4a1a      	ldr	r2, [pc, #104]	; (8003c6c <TIM_TI4_SetConfig+0x7c>)
 8003c04:	401a      	ands	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	4a15      	ldr	r2, [pc, #84]	; (8003c70 <TIM_TI4_SetConfig+0x80>)
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	021b      	lsls	r3, r3, #8
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	4a12      	ldr	r2, [pc, #72]	; (8003c74 <TIM_TI4_SetConfig+0x84>)
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	031b      	lsls	r3, r3, #12
 8003c34:	041b      	lsls	r3, r3, #16
 8003c36:	0c1b      	lsrs	r3, r3, #16
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	4a0d      	ldr	r2, [pc, #52]	; (8003c78 <TIM_TI4_SetConfig+0x88>)
 8003c42:	4013      	ands	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	031a      	lsls	r2, r3, #12
 8003c4a:	23a0      	movs	r3, #160	; 0xa0
 8003c4c:	021b      	lsls	r3, r3, #8
 8003c4e:	4013      	ands	r3, r2
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	621a      	str	r2, [r3, #32]
}
 8003c62:	46c0      	nop			; (mov r8, r8)
 8003c64:	46bd      	mov	sp, r7
 8003c66:	b006      	add	sp, #24
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	46c0      	nop			; (mov r8, r8)
 8003c6c:	ffffefff 	.word	0xffffefff
 8003c70:	fffffcff 	.word	0xfffffcff
 8003c74:	ffff0fff 	.word	0xffff0fff
 8003c78:	ffff5fff 	.word	0xffff5fff

08003c7c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2270      	movs	r2, #112	; 0x70
 8003c90:	4393      	bics	r3, r2
 8003c92:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	2207      	movs	r2, #7
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	609a      	str	r2, [r3, #8]
}
 8003ca6:	46c0      	nop			; (mov r8, r8)
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	b004      	add	sp, #16
 8003cac:	bd80      	pop	{r7, pc}
	...

08003cb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
 8003cbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	4a09      	ldr	r2, [pc, #36]	; (8003cec <TIM_ETR_SetConfig+0x3c>)
 8003cc8:	4013      	ands	r3, r2
 8003cca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	021a      	lsls	r2, r3, #8
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	609a      	str	r2, [r3, #8]
}
 8003ce4:	46c0      	nop			; (mov r8, r8)
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	b006      	add	sp, #24
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	ffff00ff 	.word	0xffff00ff

08003cf0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	221f      	movs	r2, #31
 8003d00:	4013      	ands	r3, r2
 8003d02:	2201      	movs	r2, #1
 8003d04:	409a      	lsls	r2, r3
 8003d06:	0013      	movs	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	43d2      	mvns	r2, r2
 8003d12:	401a      	ands	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6a1a      	ldr	r2, [r3, #32]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	211f      	movs	r1, #31
 8003d20:	400b      	ands	r3, r1
 8003d22:	6879      	ldr	r1, [r7, #4]
 8003d24:	4099      	lsls	r1, r3
 8003d26:	000b      	movs	r3, r1
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	621a      	str	r2, [r3, #32]
}
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	46bd      	mov	sp, r7
 8003d32:	b006      	add	sp, #24
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	223c      	movs	r2, #60	; 0x3c
 8003d46:	5c9b      	ldrb	r3, [r3, r2]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	e042      	b.n	8003dd6 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	223c      	movs	r2, #60	; 0x3c
 8003d54:	2101      	movs	r1, #1
 8003d56:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	223d      	movs	r2, #61	; 0x3d
 8003d5c:	2102      	movs	r1, #2
 8003d5e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2270      	movs	r2, #112	; 0x70
 8003d74:	4393      	bics	r3, r2
 8003d76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a14      	ldr	r2, [pc, #80]	; (8003de0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d00a      	beq.n	8003daa <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	2380      	movs	r3, #128	; 0x80
 8003d9a:	05db      	lsls	r3, r3, #23
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d004      	beq.n	8003daa <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a0f      	ldr	r2, [pc, #60]	; (8003de4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d10c      	bne.n	8003dc4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	2280      	movs	r2, #128	; 0x80
 8003dae:	4393      	bics	r3, r2
 8003db0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	223d      	movs	r2, #61	; 0x3d
 8003dc8:	2101      	movs	r1, #1
 8003dca:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	223c      	movs	r2, #60	; 0x3c
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	b004      	add	sp, #16
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	40012c00 	.word	0x40012c00
 8003de4:	40000400 	.word	0x40000400

08003de8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	223c      	movs	r2, #60	; 0x3c
 8003dfa:	5c9b      	ldrb	r3, [r3, r2]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d101      	bne.n	8003e04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e00:	2302      	movs	r3, #2
 8003e02:	e03e      	b.n	8003e82 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	223c      	movs	r2, #60	; 0x3c
 8003e08:	2101      	movs	r1, #1
 8003e0a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	22ff      	movs	r2, #255	; 0xff
 8003e10:	4393      	bics	r3, r2
 8003e12:	001a      	movs	r2, r3
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4a1b      	ldr	r2, [pc, #108]	; (8003e8c <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003e20:	401a      	ands	r2, r3
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	4a18      	ldr	r2, [pc, #96]	; (8003e90 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8003e2e:	401a      	ands	r2, r3
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	4a16      	ldr	r2, [pc, #88]	; (8003e94 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003e3c:	401a      	ands	r2, r3
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	4a13      	ldr	r2, [pc, #76]	; (8003e98 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8003e4a:	401a      	ands	r2, r3
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4a11      	ldr	r2, [pc, #68]	; (8003e9c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003e58:	401a      	ands	r2, r3
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4a0e      	ldr	r2, [pc, #56]	; (8003ea0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003e66:	401a      	ands	r2, r3
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	69db      	ldr	r3, [r3, #28]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	223c      	movs	r2, #60	; 0x3c
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	0018      	movs	r0, r3
 8003e84:	46bd      	mov	sp, r7
 8003e86:	b004      	add	sp, #16
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	46c0      	nop			; (mov r8, r8)
 8003e8c:	fffffcff 	.word	0xfffffcff
 8003e90:	fffffbff 	.word	0xfffffbff
 8003e94:	fffff7ff 	.word	0xfffff7ff
 8003e98:	ffffefff 	.word	0xffffefff
 8003e9c:	ffffdfff 	.word	0xffffdfff
 8003ea0:	ffffbfff 	.word	0xffffbfff

08003ea4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003eac:	46c0      	nop			; (mov r8, r8)
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	b002      	add	sp, #8
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ebc:	46c0      	nop			; (mov r8, r8)
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	b002      	add	sp, #8
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e044      	b.n	8003f60 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d107      	bne.n	8003eee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2278      	movs	r2, #120	; 0x78
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	0018      	movs	r0, r3
 8003eea:	f7fd f9af 	bl	800124c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2224      	movs	r2, #36	; 0x24
 8003ef2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2101      	movs	r1, #1
 8003f00:	438a      	bics	r2, r1
 8003f02:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	0018      	movs	r0, r3
 8003f08:	f000 fbcc 	bl	80046a4 <UART_SetConfig>
 8003f0c:	0003      	movs	r3, r0
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d101      	bne.n	8003f16 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e024      	b.n	8003f60 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	0018      	movs	r0, r3
 8003f22:	f000 fcff 	bl	8004924 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	490d      	ldr	r1, [pc, #52]	; (8003f68 <HAL_UART_Init+0xa4>)
 8003f32:	400a      	ands	r2, r1
 8003f34:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	212a      	movs	r1, #42	; 0x2a
 8003f42:	438a      	bics	r2, r1
 8003f44:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2101      	movs	r1, #1
 8003f52:	430a      	orrs	r2, r1
 8003f54:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f000 fd97 	bl	8004a8c <UART_CheckIdleState>
 8003f5e:	0003      	movs	r3, r0
}
 8003f60:	0018      	movs	r0, r3
 8003f62:	46bd      	mov	sp, r7
 8003f64:	b002      	add	sp, #8
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	ffffb7ff 	.word	0xffffb7ff

08003f6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b08a      	sub	sp, #40	; 0x28
 8003f70:	af02      	add	r7, sp, #8
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	603b      	str	r3, [r7, #0]
 8003f78:	1dbb      	adds	r3, r7, #6
 8003f7a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f80:	2b20      	cmp	r3, #32
 8003f82:	d000      	beq.n	8003f86 <HAL_UART_Transmit+0x1a>
 8003f84:	e08d      	b.n	80040a2 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <HAL_UART_Transmit+0x28>
 8003f8c:	1dbb      	adds	r3, r7, #6
 8003f8e:	881b      	ldrh	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e085      	b.n	80040a4 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	2380      	movs	r3, #128	; 0x80
 8003f9e:	015b      	lsls	r3, r3, #5
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d109      	bne.n	8003fb8 <HAL_UART_Transmit+0x4c>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d105      	bne.n	8003fb8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	d001      	beq.n	8003fb8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e075      	b.n	80040a4 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2284      	movs	r2, #132	; 0x84
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2221      	movs	r2, #33	; 0x21
 8003fc4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fc6:	f7fd facd 	bl	8001564 <HAL_GetTick>
 8003fca:	0003      	movs	r3, r0
 8003fcc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	1dba      	adds	r2, r7, #6
 8003fd2:	2150      	movs	r1, #80	; 0x50
 8003fd4:	8812      	ldrh	r2, [r2, #0]
 8003fd6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	1dba      	adds	r2, r7, #6
 8003fdc:	2152      	movs	r1, #82	; 0x52
 8003fde:	8812      	ldrh	r2, [r2, #0]
 8003fe0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	689a      	ldr	r2, [r3, #8]
 8003fe6:	2380      	movs	r3, #128	; 0x80
 8003fe8:	015b      	lsls	r3, r3, #5
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d108      	bne.n	8004000 <HAL_UART_Transmit+0x94>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d104      	bne.n	8004000 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	61bb      	str	r3, [r7, #24]
 8003ffe:	e003      	b.n	8004008 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004004:	2300      	movs	r3, #0
 8004006:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004008:	e030      	b.n	800406c <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	0013      	movs	r3, r2
 8004014:	2200      	movs	r2, #0
 8004016:	2180      	movs	r1, #128	; 0x80
 8004018:	f000 fde0 	bl	8004bdc <UART_WaitOnFlagUntilTimeout>
 800401c:	1e03      	subs	r3, r0, #0
 800401e:	d004      	beq.n	800402a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2220      	movs	r2, #32
 8004024:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e03c      	b.n	80040a4 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10b      	bne.n	8004048 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	881a      	ldrh	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	05d2      	lsls	r2, r2, #23
 800403a:	0dd2      	lsrs	r2, r2, #23
 800403c:	b292      	uxth	r2, r2
 800403e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	3302      	adds	r3, #2
 8004044:	61bb      	str	r3, [r7, #24]
 8004046:	e008      	b.n	800405a <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	781a      	ldrb	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	b292      	uxth	r2, r2
 8004052:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	3301      	adds	r3, #1
 8004058:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2252      	movs	r2, #82	; 0x52
 800405e:	5a9b      	ldrh	r3, [r3, r2]
 8004060:	b29b      	uxth	r3, r3
 8004062:	3b01      	subs	r3, #1
 8004064:	b299      	uxth	r1, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2252      	movs	r2, #82	; 0x52
 800406a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2252      	movs	r2, #82	; 0x52
 8004070:	5a9b      	ldrh	r3, [r3, r2]
 8004072:	b29b      	uxth	r3, r3
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1c8      	bne.n	800400a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	0013      	movs	r3, r2
 8004082:	2200      	movs	r2, #0
 8004084:	2140      	movs	r1, #64	; 0x40
 8004086:	f000 fda9 	bl	8004bdc <UART_WaitOnFlagUntilTimeout>
 800408a:	1e03      	subs	r3, r0, #0
 800408c:	d004      	beq.n	8004098 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2220      	movs	r2, #32
 8004092:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e005      	b.n	80040a4 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2220      	movs	r2, #32
 800409c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800409e:	2300      	movs	r3, #0
 80040a0:	e000      	b.n	80040a4 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 80040a2:	2302      	movs	r3, #2
  }
}
 80040a4:	0018      	movs	r0, r3
 80040a6:	46bd      	mov	sp, r7
 80040a8:	b008      	add	sp, #32
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040ac:	b590      	push	{r4, r7, lr}
 80040ae:	b0ab      	sub	sp, #172	; 0xac
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	22a4      	movs	r2, #164	; 0xa4
 80040bc:	18b9      	adds	r1, r7, r2
 80040be:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	20a0      	movs	r0, #160	; 0xa0
 80040c8:	1839      	adds	r1, r7, r0
 80040ca:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	219c      	movs	r1, #156	; 0x9c
 80040d4:	1879      	adds	r1, r7, r1
 80040d6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80040d8:	0011      	movs	r1, r2
 80040da:	18bb      	adds	r3, r7, r2
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a99      	ldr	r2, [pc, #612]	; (8004344 <HAL_UART_IRQHandler+0x298>)
 80040e0:	4013      	ands	r3, r2
 80040e2:	2298      	movs	r2, #152	; 0x98
 80040e4:	18bc      	adds	r4, r7, r2
 80040e6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80040e8:	18bb      	adds	r3, r7, r2
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d114      	bne.n	800411a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80040f0:	187b      	adds	r3, r7, r1
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2220      	movs	r2, #32
 80040f6:	4013      	ands	r3, r2
 80040f8:	d00f      	beq.n	800411a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80040fa:	183b      	adds	r3, r7, r0
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2220      	movs	r2, #32
 8004100:	4013      	ands	r3, r2
 8004102:	d00a      	beq.n	800411a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004108:	2b00      	cmp	r3, #0
 800410a:	d100      	bne.n	800410e <HAL_UART_IRQHandler+0x62>
 800410c:	e29e      	b.n	800464c <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	0010      	movs	r0, r2
 8004116:	4798      	blx	r3
      }
      return;
 8004118:	e298      	b.n	800464c <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800411a:	2398      	movs	r3, #152	; 0x98
 800411c:	18fb      	adds	r3, r7, r3
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d100      	bne.n	8004126 <HAL_UART_IRQHandler+0x7a>
 8004124:	e114      	b.n	8004350 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004126:	239c      	movs	r3, #156	; 0x9c
 8004128:	18fb      	adds	r3, r7, r3
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2201      	movs	r2, #1
 800412e:	4013      	ands	r3, r2
 8004130:	d106      	bne.n	8004140 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004132:	23a0      	movs	r3, #160	; 0xa0
 8004134:	18fb      	adds	r3, r7, r3
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a83      	ldr	r2, [pc, #524]	; (8004348 <HAL_UART_IRQHandler+0x29c>)
 800413a:	4013      	ands	r3, r2
 800413c:	d100      	bne.n	8004140 <HAL_UART_IRQHandler+0x94>
 800413e:	e107      	b.n	8004350 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004140:	23a4      	movs	r3, #164	; 0xa4
 8004142:	18fb      	adds	r3, r7, r3
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2201      	movs	r2, #1
 8004148:	4013      	ands	r3, r2
 800414a:	d012      	beq.n	8004172 <HAL_UART_IRQHandler+0xc6>
 800414c:	23a0      	movs	r3, #160	; 0xa0
 800414e:	18fb      	adds	r3, r7, r3
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	2380      	movs	r3, #128	; 0x80
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	4013      	ands	r3, r2
 8004158:	d00b      	beq.n	8004172 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2201      	movs	r2, #1
 8004160:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2284      	movs	r2, #132	; 0x84
 8004166:	589b      	ldr	r3, [r3, r2]
 8004168:	2201      	movs	r2, #1
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2184      	movs	r1, #132	; 0x84
 8004170:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004172:	23a4      	movs	r3, #164	; 0xa4
 8004174:	18fb      	adds	r3, r7, r3
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2202      	movs	r2, #2
 800417a:	4013      	ands	r3, r2
 800417c:	d011      	beq.n	80041a2 <HAL_UART_IRQHandler+0xf6>
 800417e:	239c      	movs	r3, #156	; 0x9c
 8004180:	18fb      	adds	r3, r7, r3
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2201      	movs	r2, #1
 8004186:	4013      	ands	r3, r2
 8004188:	d00b      	beq.n	80041a2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2202      	movs	r2, #2
 8004190:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2284      	movs	r2, #132	; 0x84
 8004196:	589b      	ldr	r3, [r3, r2]
 8004198:	2204      	movs	r2, #4
 800419a:	431a      	orrs	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2184      	movs	r1, #132	; 0x84
 80041a0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041a2:	23a4      	movs	r3, #164	; 0xa4
 80041a4:	18fb      	adds	r3, r7, r3
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2204      	movs	r2, #4
 80041aa:	4013      	ands	r3, r2
 80041ac:	d011      	beq.n	80041d2 <HAL_UART_IRQHandler+0x126>
 80041ae:	239c      	movs	r3, #156	; 0x9c
 80041b0:	18fb      	adds	r3, r7, r3
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2201      	movs	r2, #1
 80041b6:	4013      	ands	r3, r2
 80041b8:	d00b      	beq.n	80041d2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2204      	movs	r2, #4
 80041c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2284      	movs	r2, #132	; 0x84
 80041c6:	589b      	ldr	r3, [r3, r2]
 80041c8:	2202      	movs	r2, #2
 80041ca:	431a      	orrs	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2184      	movs	r1, #132	; 0x84
 80041d0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80041d2:	23a4      	movs	r3, #164	; 0xa4
 80041d4:	18fb      	adds	r3, r7, r3
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2208      	movs	r2, #8
 80041da:	4013      	ands	r3, r2
 80041dc:	d017      	beq.n	800420e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80041de:	23a0      	movs	r3, #160	; 0xa0
 80041e0:	18fb      	adds	r3, r7, r3
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2220      	movs	r2, #32
 80041e6:	4013      	ands	r3, r2
 80041e8:	d105      	bne.n	80041f6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80041ea:	239c      	movs	r3, #156	; 0x9c
 80041ec:	18fb      	adds	r3, r7, r3
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2201      	movs	r2, #1
 80041f2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80041f4:	d00b      	beq.n	800420e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2208      	movs	r2, #8
 80041fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2284      	movs	r2, #132	; 0x84
 8004202:	589b      	ldr	r3, [r3, r2]
 8004204:	2208      	movs	r2, #8
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2184      	movs	r1, #132	; 0x84
 800420c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800420e:	23a4      	movs	r3, #164	; 0xa4
 8004210:	18fb      	adds	r3, r7, r3
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	2380      	movs	r3, #128	; 0x80
 8004216:	011b      	lsls	r3, r3, #4
 8004218:	4013      	ands	r3, r2
 800421a:	d013      	beq.n	8004244 <HAL_UART_IRQHandler+0x198>
 800421c:	23a0      	movs	r3, #160	; 0xa0
 800421e:	18fb      	adds	r3, r7, r3
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	2380      	movs	r3, #128	; 0x80
 8004224:	04db      	lsls	r3, r3, #19
 8004226:	4013      	ands	r3, r2
 8004228:	d00c      	beq.n	8004244 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2280      	movs	r2, #128	; 0x80
 8004230:	0112      	lsls	r2, r2, #4
 8004232:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2284      	movs	r2, #132	; 0x84
 8004238:	589b      	ldr	r3, [r3, r2]
 800423a:	2220      	movs	r2, #32
 800423c:	431a      	orrs	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2184      	movs	r1, #132	; 0x84
 8004242:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2284      	movs	r2, #132	; 0x84
 8004248:	589b      	ldr	r3, [r3, r2]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d100      	bne.n	8004250 <HAL_UART_IRQHandler+0x1a4>
 800424e:	e1ff      	b.n	8004650 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004250:	23a4      	movs	r3, #164	; 0xa4
 8004252:	18fb      	adds	r3, r7, r3
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2220      	movs	r2, #32
 8004258:	4013      	ands	r3, r2
 800425a:	d00e      	beq.n	800427a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800425c:	23a0      	movs	r3, #160	; 0xa0
 800425e:	18fb      	adds	r3, r7, r3
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2220      	movs	r2, #32
 8004264:	4013      	ands	r3, r2
 8004266:	d008      	beq.n	800427a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800426c:	2b00      	cmp	r3, #0
 800426e:	d004      	beq.n	800427a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	0010      	movs	r0, r2
 8004278:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2284      	movs	r2, #132	; 0x84
 800427e:	589b      	ldr	r3, [r3, r2]
 8004280:	2194      	movs	r1, #148	; 0x94
 8004282:	187a      	adds	r2, r7, r1
 8004284:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	2240      	movs	r2, #64	; 0x40
 800428e:	4013      	ands	r3, r2
 8004290:	2b40      	cmp	r3, #64	; 0x40
 8004292:	d004      	beq.n	800429e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004294:	187b      	adds	r3, r7, r1
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2228      	movs	r2, #40	; 0x28
 800429a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800429c:	d047      	beq.n	800432e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	0018      	movs	r0, r3
 80042a2:	f000 fd05 	bl	8004cb0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	2240      	movs	r2, #64	; 0x40
 80042ae:	4013      	ands	r3, r2
 80042b0:	2b40      	cmp	r3, #64	; 0x40
 80042b2:	d137      	bne.n	8004324 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042b4:	f3ef 8310 	mrs	r3, PRIMASK
 80042b8:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80042ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042bc:	2090      	movs	r0, #144	; 0x90
 80042be:	183a      	adds	r2, r7, r0
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	2301      	movs	r3, #1
 80042c4:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042c8:	f383 8810 	msr	PRIMASK, r3
}
 80042cc:	46c0      	nop			; (mov r8, r8)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2140      	movs	r1, #64	; 0x40
 80042da:	438a      	bics	r2, r1
 80042dc:	609a      	str	r2, [r3, #8]
 80042de:	183b      	adds	r3, r7, r0
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042e6:	f383 8810 	msr	PRIMASK, r3
}
 80042ea:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d012      	beq.n	800431a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042f8:	4a14      	ldr	r2, [pc, #80]	; (800434c <HAL_UART_IRQHandler+0x2a0>)
 80042fa:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004300:	0018      	movs	r0, r3
 8004302:	f7fd fb71 	bl	80019e8 <HAL_DMA_Abort_IT>
 8004306:	1e03      	subs	r3, r0, #0
 8004308:	d01a      	beq.n	8004340 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800430e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004314:	0018      	movs	r0, r3
 8004316:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004318:	e012      	b.n	8004340 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	0018      	movs	r0, r3
 800431e:	f000 f9ad 	bl	800467c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004322:	e00d      	b.n	8004340 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	0018      	movs	r0, r3
 8004328:	f000 f9a8 	bl	800467c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800432c:	e008      	b.n	8004340 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	0018      	movs	r0, r3
 8004332:	f000 f9a3 	bl	800467c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2284      	movs	r2, #132	; 0x84
 800433a:	2100      	movs	r1, #0
 800433c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800433e:	e187      	b.n	8004650 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004340:	46c0      	nop			; (mov r8, r8)
    return;
 8004342:	e185      	b.n	8004650 <HAL_UART_IRQHandler+0x5a4>
 8004344:	0000080f 	.word	0x0000080f
 8004348:	04000120 	.word	0x04000120
 800434c:	08004d79 	.word	0x08004d79

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004354:	2b01      	cmp	r3, #1
 8004356:	d000      	beq.n	800435a <HAL_UART_IRQHandler+0x2ae>
 8004358:	e139      	b.n	80045ce <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800435a:	23a4      	movs	r3, #164	; 0xa4
 800435c:	18fb      	adds	r3, r7, r3
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2210      	movs	r2, #16
 8004362:	4013      	ands	r3, r2
 8004364:	d100      	bne.n	8004368 <HAL_UART_IRQHandler+0x2bc>
 8004366:	e132      	b.n	80045ce <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004368:	23a0      	movs	r3, #160	; 0xa0
 800436a:	18fb      	adds	r3, r7, r3
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2210      	movs	r2, #16
 8004370:	4013      	ands	r3, r2
 8004372:	d100      	bne.n	8004376 <HAL_UART_IRQHandler+0x2ca>
 8004374:	e12b      	b.n	80045ce <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2210      	movs	r2, #16
 800437c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	2240      	movs	r2, #64	; 0x40
 8004386:	4013      	ands	r3, r2
 8004388:	2b40      	cmp	r3, #64	; 0x40
 800438a:	d000      	beq.n	800438e <HAL_UART_IRQHandler+0x2e2>
 800438c:	e09f      	b.n	80044ce <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	217e      	movs	r1, #126	; 0x7e
 8004398:	187b      	adds	r3, r7, r1
 800439a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800439c:	187b      	adds	r3, r7, r1
 800439e:	881b      	ldrh	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d100      	bne.n	80043a6 <HAL_UART_IRQHandler+0x2fa>
 80043a4:	e156      	b.n	8004654 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2258      	movs	r2, #88	; 0x58
 80043aa:	5a9b      	ldrh	r3, [r3, r2]
 80043ac:	187a      	adds	r2, r7, r1
 80043ae:	8812      	ldrh	r2, [r2, #0]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d300      	bcc.n	80043b6 <HAL_UART_IRQHandler+0x30a>
 80043b4:	e14e      	b.n	8004654 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	187a      	adds	r2, r7, r1
 80043ba:	215a      	movs	r1, #90	; 0x5a
 80043bc:	8812      	ldrh	r2, [r2, #0]
 80043be:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	2b20      	cmp	r3, #32
 80043c8:	d06f      	beq.n	80044aa <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043ca:	f3ef 8310 	mrs	r3, PRIMASK
 80043ce:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80043d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80043d4:	2301      	movs	r3, #1
 80043d6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043da:	f383 8810 	msr	PRIMASK, r3
}
 80043de:	46c0      	nop			; (mov r8, r8)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	499e      	ldr	r1, [pc, #632]	; (8004664 <HAL_UART_IRQHandler+0x5b8>)
 80043ec:	400a      	ands	r2, r1
 80043ee:	601a      	str	r2, [r3, #0]
 80043f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043f2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f6:	f383 8810 	msr	PRIMASK, r3
}
 80043fa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043fc:	f3ef 8310 	mrs	r3, PRIMASK
 8004400:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004404:	677b      	str	r3, [r7, #116]	; 0x74
 8004406:	2301      	movs	r3, #1
 8004408:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800440a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800440c:	f383 8810 	msr	PRIMASK, r3
}
 8004410:	46c0      	nop			; (mov r8, r8)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2101      	movs	r1, #1
 800441e:	438a      	bics	r2, r1
 8004420:	609a      	str	r2, [r3, #8]
 8004422:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004424:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004428:	f383 8810 	msr	PRIMASK, r3
}
 800442c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800442e:	f3ef 8310 	mrs	r3, PRIMASK
 8004432:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004434:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004436:	673b      	str	r3, [r7, #112]	; 0x70
 8004438:	2301      	movs	r3, #1
 800443a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800443c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800443e:	f383 8810 	msr	PRIMASK, r3
}
 8004442:	46c0      	nop			; (mov r8, r8)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689a      	ldr	r2, [r3, #8]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2140      	movs	r1, #64	; 0x40
 8004450:	438a      	bics	r2, r1
 8004452:	609a      	str	r2, [r3, #8]
 8004454:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004456:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800445a:	f383 8810 	msr	PRIMASK, r3
}
 800445e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2280      	movs	r2, #128	; 0x80
 8004464:	2120      	movs	r1, #32
 8004466:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800446e:	f3ef 8310 	mrs	r3, PRIMASK
 8004472:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004474:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004476:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004478:	2301      	movs	r3, #1
 800447a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800447c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800447e:	f383 8810 	msr	PRIMASK, r3
}
 8004482:	46c0      	nop			; (mov r8, r8)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2110      	movs	r1, #16
 8004490:	438a      	bics	r2, r1
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004496:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004498:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800449a:	f383 8810 	msr	PRIMASK, r3
}
 800449e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044a4:	0018      	movs	r0, r3
 80044a6:	f7fd fa67 	bl	8001978 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2202      	movs	r2, #2
 80044ae:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2258      	movs	r2, #88	; 0x58
 80044b4:	5a9a      	ldrh	r2, [r3, r2]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	215a      	movs	r1, #90	; 0x5a
 80044ba:	5a5b      	ldrh	r3, [r3, r1]
 80044bc:	b29b      	uxth	r3, r3
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	0011      	movs	r1, r2
 80044c6:	0018      	movs	r0, r3
 80044c8:	f000 f8e0 	bl	800468c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80044cc:	e0c2      	b.n	8004654 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2258      	movs	r2, #88	; 0x58
 80044d2:	5a99      	ldrh	r1, [r3, r2]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	225a      	movs	r2, #90	; 0x5a
 80044d8:	5a9b      	ldrh	r3, [r3, r2]
 80044da:	b29a      	uxth	r2, r3
 80044dc:	208e      	movs	r0, #142	; 0x8e
 80044de:	183b      	adds	r3, r7, r0
 80044e0:	1a8a      	subs	r2, r1, r2
 80044e2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	225a      	movs	r2, #90	; 0x5a
 80044e8:	5a9b      	ldrh	r3, [r3, r2]
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d100      	bne.n	80044f2 <HAL_UART_IRQHandler+0x446>
 80044f0:	e0b2      	b.n	8004658 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 80044f2:	183b      	adds	r3, r7, r0
 80044f4:	881b      	ldrh	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d100      	bne.n	80044fc <HAL_UART_IRQHandler+0x450>
 80044fa:	e0ad      	b.n	8004658 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044fc:	f3ef 8310 	mrs	r3, PRIMASK
 8004500:	60fb      	str	r3, [r7, #12]
  return(result);
 8004502:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004504:	2488      	movs	r4, #136	; 0x88
 8004506:	193a      	adds	r2, r7, r4
 8004508:	6013      	str	r3, [r2, #0]
 800450a:	2301      	movs	r3, #1
 800450c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	f383 8810 	msr	PRIMASK, r3
}
 8004514:	46c0      	nop			; (mov r8, r8)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4951      	ldr	r1, [pc, #324]	; (8004668 <HAL_UART_IRQHandler+0x5bc>)
 8004522:	400a      	ands	r2, r1
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	193b      	adds	r3, r7, r4
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f383 8810 	msr	PRIMASK, r3
}
 8004532:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004534:	f3ef 8310 	mrs	r3, PRIMASK
 8004538:	61bb      	str	r3, [r7, #24]
  return(result);
 800453a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800453c:	2484      	movs	r4, #132	; 0x84
 800453e:	193a      	adds	r2, r7, r4
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	2301      	movs	r3, #1
 8004544:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	f383 8810 	msr	PRIMASK, r3
}
 800454c:	46c0      	nop			; (mov r8, r8)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689a      	ldr	r2, [r3, #8]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2101      	movs	r1, #1
 800455a:	438a      	bics	r2, r1
 800455c:	609a      	str	r2, [r3, #8]
 800455e:	193b      	adds	r3, r7, r4
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004564:	6a3b      	ldr	r3, [r7, #32]
 8004566:	f383 8810 	msr	PRIMASK, r3
}
 800456a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2280      	movs	r2, #128	; 0x80
 8004570:	2120      	movs	r1, #32
 8004572:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004580:	f3ef 8310 	mrs	r3, PRIMASK
 8004584:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004588:	2480      	movs	r4, #128	; 0x80
 800458a:	193a      	adds	r2, r7, r4
 800458c:	6013      	str	r3, [r2, #0]
 800458e:	2301      	movs	r3, #1
 8004590:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004594:	f383 8810 	msr	PRIMASK, r3
}
 8004598:	46c0      	nop			; (mov r8, r8)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2110      	movs	r1, #16
 80045a6:	438a      	bics	r2, r1
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	193b      	adds	r3, r7, r4
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b2:	f383 8810 	msr	PRIMASK, r3
}
 80045b6:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2202      	movs	r2, #2
 80045bc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045be:	183b      	adds	r3, r7, r0
 80045c0:	881a      	ldrh	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	0011      	movs	r1, r2
 80045c6:	0018      	movs	r0, r3
 80045c8:	f000 f860 	bl	800468c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045cc:	e044      	b.n	8004658 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80045ce:	23a4      	movs	r3, #164	; 0xa4
 80045d0:	18fb      	adds	r3, r7, r3
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	2380      	movs	r3, #128	; 0x80
 80045d6:	035b      	lsls	r3, r3, #13
 80045d8:	4013      	ands	r3, r2
 80045da:	d010      	beq.n	80045fe <HAL_UART_IRQHandler+0x552>
 80045dc:	239c      	movs	r3, #156	; 0x9c
 80045de:	18fb      	adds	r3, r7, r3
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	2380      	movs	r3, #128	; 0x80
 80045e4:	03db      	lsls	r3, r3, #15
 80045e6:	4013      	ands	r3, r2
 80045e8:	d009      	beq.n	80045fe <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2280      	movs	r2, #128	; 0x80
 80045f0:	0352      	lsls	r2, r2, #13
 80045f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	0018      	movs	r0, r3
 80045f8:	f000 fc00 	bl	8004dfc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045fc:	e02f      	b.n	800465e <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80045fe:	23a4      	movs	r3, #164	; 0xa4
 8004600:	18fb      	adds	r3, r7, r3
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2280      	movs	r2, #128	; 0x80
 8004606:	4013      	ands	r3, r2
 8004608:	d00f      	beq.n	800462a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800460a:	23a0      	movs	r3, #160	; 0xa0
 800460c:	18fb      	adds	r3, r7, r3
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2280      	movs	r2, #128	; 0x80
 8004612:	4013      	ands	r3, r2
 8004614:	d009      	beq.n	800462a <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800461a:	2b00      	cmp	r3, #0
 800461c:	d01e      	beq.n	800465c <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	0010      	movs	r0, r2
 8004626:	4798      	blx	r3
    }
    return;
 8004628:	e018      	b.n	800465c <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800462a:	23a4      	movs	r3, #164	; 0xa4
 800462c:	18fb      	adds	r3, r7, r3
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2240      	movs	r2, #64	; 0x40
 8004632:	4013      	ands	r3, r2
 8004634:	d013      	beq.n	800465e <HAL_UART_IRQHandler+0x5b2>
 8004636:	23a0      	movs	r3, #160	; 0xa0
 8004638:	18fb      	adds	r3, r7, r3
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2240      	movs	r2, #64	; 0x40
 800463e:	4013      	ands	r3, r2
 8004640:	d00d      	beq.n	800465e <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	0018      	movs	r0, r3
 8004646:	f000 fbae 	bl	8004da6 <UART_EndTransmit_IT>
    return;
 800464a:	e008      	b.n	800465e <HAL_UART_IRQHandler+0x5b2>
      return;
 800464c:	46c0      	nop			; (mov r8, r8)
 800464e:	e006      	b.n	800465e <HAL_UART_IRQHandler+0x5b2>
    return;
 8004650:	46c0      	nop			; (mov r8, r8)
 8004652:	e004      	b.n	800465e <HAL_UART_IRQHandler+0x5b2>
      return;
 8004654:	46c0      	nop			; (mov r8, r8)
 8004656:	e002      	b.n	800465e <HAL_UART_IRQHandler+0x5b2>
      return;
 8004658:	46c0      	nop			; (mov r8, r8)
 800465a:	e000      	b.n	800465e <HAL_UART_IRQHandler+0x5b2>
    return;
 800465c:	46c0      	nop			; (mov r8, r8)
  }

}
 800465e:	46bd      	mov	sp, r7
 8004660:	b02b      	add	sp, #172	; 0xac
 8004662:	bd90      	pop	{r4, r7, pc}
 8004664:	fffffeff 	.word	0xfffffeff
 8004668:	fffffedf 	.word	0xfffffedf

0800466c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004674:	46c0      	nop			; (mov r8, r8)
 8004676:	46bd      	mov	sp, r7
 8004678:	b002      	add	sp, #8
 800467a:	bd80      	pop	{r7, pc}

0800467c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004684:	46c0      	nop			; (mov r8, r8)
 8004686:	46bd      	mov	sp, r7
 8004688:	b002      	add	sp, #8
 800468a:	bd80      	pop	{r7, pc}

0800468c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	000a      	movs	r2, r1
 8004696:	1cbb      	adds	r3, r7, #2
 8004698:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800469a:	46c0      	nop			; (mov r8, r8)
 800469c:	46bd      	mov	sp, r7
 800469e:	b002      	add	sp, #8
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b088      	sub	sp, #32
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046ac:	231e      	movs	r3, #30
 80046ae:	18fb      	adds	r3, r7, r3
 80046b0:	2200      	movs	r2, #0
 80046b2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	431a      	orrs	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	431a      	orrs	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	69db      	ldr	r3, [r3, #28]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a8d      	ldr	r2, [pc, #564]	; (8004908 <UART_SetConfig+0x264>)
 80046d4:	4013      	ands	r3, r2
 80046d6:	0019      	movs	r1, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	430a      	orrs	r2, r1
 80046e0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	4a88      	ldr	r2, [pc, #544]	; (800490c <UART_SetConfig+0x268>)
 80046ea:	4013      	ands	r3, r2
 80046ec:	0019      	movs	r1, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68da      	ldr	r2, [r3, #12]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	4313      	orrs	r3, r2
 8004708:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	4a7f      	ldr	r2, [pc, #508]	; (8004910 <UART_SetConfig+0x26c>)
 8004712:	4013      	ands	r3, r2
 8004714:	0019      	movs	r1, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	430a      	orrs	r2, r1
 800471e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a7b      	ldr	r2, [pc, #492]	; (8004914 <UART_SetConfig+0x270>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d127      	bne.n	800477a <UART_SetConfig+0xd6>
 800472a:	4b7b      	ldr	r3, [pc, #492]	; (8004918 <UART_SetConfig+0x274>)
 800472c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472e:	2203      	movs	r2, #3
 8004730:	4013      	ands	r3, r2
 8004732:	2b03      	cmp	r3, #3
 8004734:	d00d      	beq.n	8004752 <UART_SetConfig+0xae>
 8004736:	d81b      	bhi.n	8004770 <UART_SetConfig+0xcc>
 8004738:	2b02      	cmp	r3, #2
 800473a:	d014      	beq.n	8004766 <UART_SetConfig+0xc2>
 800473c:	d818      	bhi.n	8004770 <UART_SetConfig+0xcc>
 800473e:	2b00      	cmp	r3, #0
 8004740:	d002      	beq.n	8004748 <UART_SetConfig+0xa4>
 8004742:	2b01      	cmp	r3, #1
 8004744:	d00a      	beq.n	800475c <UART_SetConfig+0xb8>
 8004746:	e013      	b.n	8004770 <UART_SetConfig+0xcc>
 8004748:	231f      	movs	r3, #31
 800474a:	18fb      	adds	r3, r7, r3
 800474c:	2200      	movs	r2, #0
 800474e:	701a      	strb	r2, [r3, #0]
 8004750:	e021      	b.n	8004796 <UART_SetConfig+0xf2>
 8004752:	231f      	movs	r3, #31
 8004754:	18fb      	adds	r3, r7, r3
 8004756:	2202      	movs	r2, #2
 8004758:	701a      	strb	r2, [r3, #0]
 800475a:	e01c      	b.n	8004796 <UART_SetConfig+0xf2>
 800475c:	231f      	movs	r3, #31
 800475e:	18fb      	adds	r3, r7, r3
 8004760:	2204      	movs	r2, #4
 8004762:	701a      	strb	r2, [r3, #0]
 8004764:	e017      	b.n	8004796 <UART_SetConfig+0xf2>
 8004766:	231f      	movs	r3, #31
 8004768:	18fb      	adds	r3, r7, r3
 800476a:	2208      	movs	r2, #8
 800476c:	701a      	strb	r2, [r3, #0]
 800476e:	e012      	b.n	8004796 <UART_SetConfig+0xf2>
 8004770:	231f      	movs	r3, #31
 8004772:	18fb      	adds	r3, r7, r3
 8004774:	2210      	movs	r2, #16
 8004776:	701a      	strb	r2, [r3, #0]
 8004778:	e00d      	b.n	8004796 <UART_SetConfig+0xf2>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a67      	ldr	r2, [pc, #412]	; (800491c <UART_SetConfig+0x278>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d104      	bne.n	800478e <UART_SetConfig+0xea>
 8004784:	231f      	movs	r3, #31
 8004786:	18fb      	adds	r3, r7, r3
 8004788:	2200      	movs	r2, #0
 800478a:	701a      	strb	r2, [r3, #0]
 800478c:	e003      	b.n	8004796 <UART_SetConfig+0xf2>
 800478e:	231f      	movs	r3, #31
 8004790:	18fb      	adds	r3, r7, r3
 8004792:	2210      	movs	r2, #16
 8004794:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69da      	ldr	r2, [r3, #28]
 800479a:	2380      	movs	r3, #128	; 0x80
 800479c:	021b      	lsls	r3, r3, #8
 800479e:	429a      	cmp	r2, r3
 80047a0:	d15c      	bne.n	800485c <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80047a2:	231f      	movs	r3, #31
 80047a4:	18fb      	adds	r3, r7, r3
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d015      	beq.n	80047d8 <UART_SetConfig+0x134>
 80047ac:	dc18      	bgt.n	80047e0 <UART_SetConfig+0x13c>
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	d00d      	beq.n	80047ce <UART_SetConfig+0x12a>
 80047b2:	dc15      	bgt.n	80047e0 <UART_SetConfig+0x13c>
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <UART_SetConfig+0x11a>
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d005      	beq.n	80047c8 <UART_SetConfig+0x124>
 80047bc:	e010      	b.n	80047e0 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047be:	f7fd ffdd 	bl	800277c <HAL_RCC_GetPCLK1Freq>
 80047c2:	0003      	movs	r3, r0
 80047c4:	61bb      	str	r3, [r7, #24]
        break;
 80047c6:	e012      	b.n	80047ee <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047c8:	4b55      	ldr	r3, [pc, #340]	; (8004920 <UART_SetConfig+0x27c>)
 80047ca:	61bb      	str	r3, [r7, #24]
        break;
 80047cc:	e00f      	b.n	80047ee <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ce:	f7fd ff59 	bl	8002684 <HAL_RCC_GetSysClockFreq>
 80047d2:	0003      	movs	r3, r0
 80047d4:	61bb      	str	r3, [r7, #24]
        break;
 80047d6:	e00a      	b.n	80047ee <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047d8:	2380      	movs	r3, #128	; 0x80
 80047da:	021b      	lsls	r3, r3, #8
 80047dc:	61bb      	str	r3, [r7, #24]
        break;
 80047de:	e006      	b.n	80047ee <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80047e4:	231e      	movs	r3, #30
 80047e6:	18fb      	adds	r3, r7, r3
 80047e8:	2201      	movs	r2, #1
 80047ea:	701a      	strb	r2, [r3, #0]
        break;
 80047ec:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d100      	bne.n	80047f6 <UART_SetConfig+0x152>
 80047f4:	e07a      	b.n	80048ec <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	005a      	lsls	r2, r3, #1
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	085b      	lsrs	r3, r3, #1
 8004800:	18d2      	adds	r2, r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	0019      	movs	r1, r3
 8004808:	0010      	movs	r0, r2
 800480a:	f7fb fc87 	bl	800011c <__udivsi3>
 800480e:	0003      	movs	r3, r0
 8004810:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	2b0f      	cmp	r3, #15
 8004816:	d91c      	bls.n	8004852 <UART_SetConfig+0x1ae>
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	2380      	movs	r3, #128	; 0x80
 800481c:	025b      	lsls	r3, r3, #9
 800481e:	429a      	cmp	r2, r3
 8004820:	d217      	bcs.n	8004852 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	b29a      	uxth	r2, r3
 8004826:	200e      	movs	r0, #14
 8004828:	183b      	adds	r3, r7, r0
 800482a:	210f      	movs	r1, #15
 800482c:	438a      	bics	r2, r1
 800482e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	085b      	lsrs	r3, r3, #1
 8004834:	b29b      	uxth	r3, r3
 8004836:	2207      	movs	r2, #7
 8004838:	4013      	ands	r3, r2
 800483a:	b299      	uxth	r1, r3
 800483c:	183b      	adds	r3, r7, r0
 800483e:	183a      	adds	r2, r7, r0
 8004840:	8812      	ldrh	r2, [r2, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	183a      	adds	r2, r7, r0
 800484c:	8812      	ldrh	r2, [r2, #0]
 800484e:	60da      	str	r2, [r3, #12]
 8004850:	e04c      	b.n	80048ec <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004852:	231e      	movs	r3, #30
 8004854:	18fb      	adds	r3, r7, r3
 8004856:	2201      	movs	r2, #1
 8004858:	701a      	strb	r2, [r3, #0]
 800485a:	e047      	b.n	80048ec <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 800485c:	231f      	movs	r3, #31
 800485e:	18fb      	adds	r3, r7, r3
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	2b08      	cmp	r3, #8
 8004864:	d015      	beq.n	8004892 <UART_SetConfig+0x1ee>
 8004866:	dc18      	bgt.n	800489a <UART_SetConfig+0x1f6>
 8004868:	2b04      	cmp	r3, #4
 800486a:	d00d      	beq.n	8004888 <UART_SetConfig+0x1e4>
 800486c:	dc15      	bgt.n	800489a <UART_SetConfig+0x1f6>
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <UART_SetConfig+0x1d4>
 8004872:	2b02      	cmp	r3, #2
 8004874:	d005      	beq.n	8004882 <UART_SetConfig+0x1de>
 8004876:	e010      	b.n	800489a <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004878:	f7fd ff80 	bl	800277c <HAL_RCC_GetPCLK1Freq>
 800487c:	0003      	movs	r3, r0
 800487e:	61bb      	str	r3, [r7, #24]
        break;
 8004880:	e012      	b.n	80048a8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004882:	4b27      	ldr	r3, [pc, #156]	; (8004920 <UART_SetConfig+0x27c>)
 8004884:	61bb      	str	r3, [r7, #24]
        break;
 8004886:	e00f      	b.n	80048a8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004888:	f7fd fefc 	bl	8002684 <HAL_RCC_GetSysClockFreq>
 800488c:	0003      	movs	r3, r0
 800488e:	61bb      	str	r3, [r7, #24]
        break;
 8004890:	e00a      	b.n	80048a8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004892:	2380      	movs	r3, #128	; 0x80
 8004894:	021b      	lsls	r3, r3, #8
 8004896:	61bb      	str	r3, [r7, #24]
        break;
 8004898:	e006      	b.n	80048a8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800489a:	2300      	movs	r3, #0
 800489c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800489e:	231e      	movs	r3, #30
 80048a0:	18fb      	adds	r3, r7, r3
 80048a2:	2201      	movs	r2, #1
 80048a4:	701a      	strb	r2, [r3, #0]
        break;
 80048a6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d01e      	beq.n	80048ec <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	085a      	lsrs	r2, r3, #1
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	18d2      	adds	r2, r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	0019      	movs	r1, r3
 80048be:	0010      	movs	r0, r2
 80048c0:	f7fb fc2c 	bl	800011c <__udivsi3>
 80048c4:	0003      	movs	r3, r0
 80048c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	2b0f      	cmp	r3, #15
 80048cc:	d90a      	bls.n	80048e4 <UART_SetConfig+0x240>
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	2380      	movs	r3, #128	; 0x80
 80048d2:	025b      	lsls	r3, r3, #9
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d205      	bcs.n	80048e4 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	b29a      	uxth	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	60da      	str	r2, [r3, #12]
 80048e2:	e003      	b.n	80048ec <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80048e4:	231e      	movs	r3, #30
 80048e6:	18fb      	adds	r3, r7, r3
 80048e8:	2201      	movs	r2, #1
 80048ea:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80048f8:	231e      	movs	r3, #30
 80048fa:	18fb      	adds	r3, r7, r3
 80048fc:	781b      	ldrb	r3, [r3, #0]
}
 80048fe:	0018      	movs	r0, r3
 8004900:	46bd      	mov	sp, r7
 8004902:	b008      	add	sp, #32
 8004904:	bd80      	pop	{r7, pc}
 8004906:	46c0      	nop			; (mov r8, r8)
 8004908:	efff69f3 	.word	0xefff69f3
 800490c:	ffffcfff 	.word	0xffffcfff
 8004910:	fffff4ff 	.word	0xfffff4ff
 8004914:	40013800 	.word	0x40013800
 8004918:	40021000 	.word	0x40021000
 800491c:	40004400 	.word	0x40004400
 8004920:	007a1200 	.word	0x007a1200

08004924 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	2201      	movs	r2, #1
 8004932:	4013      	ands	r3, r2
 8004934:	d00b      	beq.n	800494e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	4a4a      	ldr	r2, [pc, #296]	; (8004a68 <UART_AdvFeatureConfig+0x144>)
 800493e:	4013      	ands	r3, r2
 8004940:	0019      	movs	r1, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	2202      	movs	r2, #2
 8004954:	4013      	ands	r3, r2
 8004956:	d00b      	beq.n	8004970 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	4a43      	ldr	r2, [pc, #268]	; (8004a6c <UART_AdvFeatureConfig+0x148>)
 8004960:	4013      	ands	r3, r2
 8004962:	0019      	movs	r1, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004974:	2204      	movs	r2, #4
 8004976:	4013      	ands	r3, r2
 8004978:	d00b      	beq.n	8004992 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	4a3b      	ldr	r2, [pc, #236]	; (8004a70 <UART_AdvFeatureConfig+0x14c>)
 8004982:	4013      	ands	r3, r2
 8004984:	0019      	movs	r1, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	430a      	orrs	r2, r1
 8004990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004996:	2208      	movs	r2, #8
 8004998:	4013      	ands	r3, r2
 800499a:	d00b      	beq.n	80049b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	4a34      	ldr	r2, [pc, #208]	; (8004a74 <UART_AdvFeatureConfig+0x150>)
 80049a4:	4013      	ands	r3, r2
 80049a6:	0019      	movs	r1, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	430a      	orrs	r2, r1
 80049b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b8:	2210      	movs	r2, #16
 80049ba:	4013      	ands	r3, r2
 80049bc:	d00b      	beq.n	80049d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	4a2c      	ldr	r2, [pc, #176]	; (8004a78 <UART_AdvFeatureConfig+0x154>)
 80049c6:	4013      	ands	r3, r2
 80049c8:	0019      	movs	r1, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	2220      	movs	r2, #32
 80049dc:	4013      	ands	r3, r2
 80049de:	d00b      	beq.n	80049f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	4a25      	ldr	r2, [pc, #148]	; (8004a7c <UART_AdvFeatureConfig+0x158>)
 80049e8:	4013      	ands	r3, r2
 80049ea:	0019      	movs	r1, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	2240      	movs	r2, #64	; 0x40
 80049fe:	4013      	ands	r3, r2
 8004a00:	d01d      	beq.n	8004a3e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	4a1d      	ldr	r2, [pc, #116]	; (8004a80 <UART_AdvFeatureConfig+0x15c>)
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	0019      	movs	r1, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a1e:	2380      	movs	r3, #128	; 0x80
 8004a20:	035b      	lsls	r3, r3, #13
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d10b      	bne.n	8004a3e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	4a15      	ldr	r2, [pc, #84]	; (8004a84 <UART_AdvFeatureConfig+0x160>)
 8004a2e:	4013      	ands	r3, r2
 8004a30:	0019      	movs	r1, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	2280      	movs	r2, #128	; 0x80
 8004a44:	4013      	ands	r3, r2
 8004a46:	d00b      	beq.n	8004a60 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	4a0e      	ldr	r2, [pc, #56]	; (8004a88 <UART_AdvFeatureConfig+0x164>)
 8004a50:	4013      	ands	r3, r2
 8004a52:	0019      	movs	r1, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	605a      	str	r2, [r3, #4]
  }
}
 8004a60:	46c0      	nop			; (mov r8, r8)
 8004a62:	46bd      	mov	sp, r7
 8004a64:	b002      	add	sp, #8
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	fffdffff 	.word	0xfffdffff
 8004a6c:	fffeffff 	.word	0xfffeffff
 8004a70:	fffbffff 	.word	0xfffbffff
 8004a74:	ffff7fff 	.word	0xffff7fff
 8004a78:	ffffefff 	.word	0xffffefff
 8004a7c:	ffffdfff 	.word	0xffffdfff
 8004a80:	ffefffff 	.word	0xffefffff
 8004a84:	ff9fffff 	.word	0xff9fffff
 8004a88:	fff7ffff 	.word	0xfff7ffff

08004a8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b092      	sub	sp, #72	; 0x48
 8004a90:	af02      	add	r7, sp, #8
 8004a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2284      	movs	r2, #132	; 0x84
 8004a98:	2100      	movs	r1, #0
 8004a9a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a9c:	f7fc fd62 	bl	8001564 <HAL_GetTick>
 8004aa0:	0003      	movs	r3, r0
 8004aa2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2208      	movs	r2, #8
 8004aac:	4013      	ands	r3, r2
 8004aae:	2b08      	cmp	r3, #8
 8004ab0:	d12c      	bne.n	8004b0c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ab4:	2280      	movs	r2, #128	; 0x80
 8004ab6:	0391      	lsls	r1, r2, #14
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	4a46      	ldr	r2, [pc, #280]	; (8004bd4 <UART_CheckIdleState+0x148>)
 8004abc:	9200      	str	r2, [sp, #0]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f000 f88c 	bl	8004bdc <UART_WaitOnFlagUntilTimeout>
 8004ac4:	1e03      	subs	r3, r0, #0
 8004ac6:	d021      	beq.n	8004b0c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ac8:	f3ef 8310 	mrs	r3, PRIMASK
 8004acc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ad0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad8:	f383 8810 	msr	PRIMASK, r3
}
 8004adc:	46c0      	nop			; (mov r8, r8)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2180      	movs	r1, #128	; 0x80
 8004aea:	438a      	bics	r2, r1
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af4:	f383 8810 	msr	PRIMASK, r3
}
 8004af8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2220      	movs	r2, #32
 8004afe:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2278      	movs	r2, #120	; 0x78
 8004b04:	2100      	movs	r1, #0
 8004b06:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e05f      	b.n	8004bcc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2204      	movs	r2, #4
 8004b14:	4013      	ands	r3, r2
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d146      	bne.n	8004ba8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b1c:	2280      	movs	r2, #128	; 0x80
 8004b1e:	03d1      	lsls	r1, r2, #15
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	4a2c      	ldr	r2, [pc, #176]	; (8004bd4 <UART_CheckIdleState+0x148>)
 8004b24:	9200      	str	r2, [sp, #0]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f000 f858 	bl	8004bdc <UART_WaitOnFlagUntilTimeout>
 8004b2c:	1e03      	subs	r3, r0, #0
 8004b2e:	d03b      	beq.n	8004ba8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b30:	f3ef 8310 	mrs	r3, PRIMASK
 8004b34:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b36:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b38:	637b      	str	r3, [r7, #52]	; 0x34
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	f383 8810 	msr	PRIMASK, r3
}
 8004b44:	46c0      	nop			; (mov r8, r8)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4921      	ldr	r1, [pc, #132]	; (8004bd8 <UART_CheckIdleState+0x14c>)
 8004b52:	400a      	ands	r2, r1
 8004b54:	601a      	str	r2, [r3, #0]
 8004b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f383 8810 	msr	PRIMASK, r3
}
 8004b60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b62:	f3ef 8310 	mrs	r3, PRIMASK
 8004b66:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b68:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b6a:	633b      	str	r3, [r7, #48]	; 0x30
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	f383 8810 	msr	PRIMASK, r3
}
 8004b76:	46c0      	nop			; (mov r8, r8)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689a      	ldr	r2, [r3, #8]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2101      	movs	r1, #1
 8004b84:	438a      	bics	r2, r1
 8004b86:	609a      	str	r2, [r3, #8]
 8004b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b8c:	6a3b      	ldr	r3, [r7, #32]
 8004b8e:	f383 8810 	msr	PRIMASK, r3
}
 8004b92:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2280      	movs	r2, #128	; 0x80
 8004b98:	2120      	movs	r1, #32
 8004b9a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2278      	movs	r2, #120	; 0x78
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e011      	b.n	8004bcc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2220      	movs	r2, #32
 8004bac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2280      	movs	r2, #128	; 0x80
 8004bb2:	2120      	movs	r1, #32
 8004bb4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2278      	movs	r2, #120	; 0x78
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	0018      	movs	r0, r3
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	b010      	add	sp, #64	; 0x40
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	01ffffff 	.word	0x01ffffff
 8004bd8:	fffffedf 	.word	0xfffffedf

08004bdc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	603b      	str	r3, [r7, #0]
 8004be8:	1dfb      	adds	r3, r7, #7
 8004bea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bec:	e04b      	b.n	8004c86 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	d048      	beq.n	8004c86 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf4:	f7fc fcb6 	bl	8001564 <HAL_GetTick>
 8004bf8:	0002      	movs	r2, r0
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	69ba      	ldr	r2, [r7, #24]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d302      	bcc.n	8004c0a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e04b      	b.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2204      	movs	r2, #4
 8004c16:	4013      	ands	r3, r2
 8004c18:	d035      	beq.n	8004c86 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	2208      	movs	r2, #8
 8004c22:	4013      	ands	r3, r2
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	d111      	bne.n	8004c4c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2208      	movs	r2, #8
 8004c2e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	0018      	movs	r0, r3
 8004c34:	f000 f83c 	bl	8004cb0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2284      	movs	r2, #132	; 0x84
 8004c3c:	2108      	movs	r1, #8
 8004c3e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2278      	movs	r2, #120	; 0x78
 8004c44:	2100      	movs	r1, #0
 8004c46:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e02c      	b.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	69da      	ldr	r2, [r3, #28]
 8004c52:	2380      	movs	r3, #128	; 0x80
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	401a      	ands	r2, r3
 8004c58:	2380      	movs	r3, #128	; 0x80
 8004c5a:	011b      	lsls	r3, r3, #4
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d112      	bne.n	8004c86 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2280      	movs	r2, #128	; 0x80
 8004c66:	0112      	lsls	r2, r2, #4
 8004c68:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	0018      	movs	r0, r3
 8004c6e:	f000 f81f 	bl	8004cb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2284      	movs	r2, #132	; 0x84
 8004c76:	2120      	movs	r1, #32
 8004c78:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2278      	movs	r2, #120	; 0x78
 8004c7e:	2100      	movs	r1, #0
 8004c80:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e00f      	b.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	69db      	ldr	r3, [r3, #28]
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	4013      	ands	r3, r2
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	425a      	negs	r2, r3
 8004c96:	4153      	adcs	r3, r2
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	001a      	movs	r2, r3
 8004c9c:	1dfb      	adds	r3, r7, #7
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d0a4      	beq.n	8004bee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	0018      	movs	r0, r3
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	b004      	add	sp, #16
 8004cac:	bd80      	pop	{r7, pc}
	...

08004cb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b08e      	sub	sp, #56	; 0x38
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cb8:	f3ef 8310 	mrs	r3, PRIMASK
 8004cbc:	617b      	str	r3, [r7, #20]
  return(result);
 8004cbe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	f383 8810 	msr	PRIMASK, r3
}
 8004ccc:	46c0      	nop			; (mov r8, r8)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4926      	ldr	r1, [pc, #152]	; (8004d74 <UART_EndRxTransfer+0xc4>)
 8004cda:	400a      	ands	r2, r1
 8004cdc:	601a      	str	r2, [r3, #0]
 8004cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	f383 8810 	msr	PRIMASK, r3
}
 8004ce8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cea:	f3ef 8310 	mrs	r3, PRIMASK
 8004cee:	623b      	str	r3, [r7, #32]
  return(result);
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf2:	633b      	str	r3, [r7, #48]	; 0x30
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	f383 8810 	msr	PRIMASK, r3
}
 8004cfe:	46c0      	nop			; (mov r8, r8)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689a      	ldr	r2, [r3, #8]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2101      	movs	r1, #1
 8004d0c:	438a      	bics	r2, r1
 8004d0e:	609a      	str	r2, [r3, #8]
 8004d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d12:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d16:	f383 8810 	msr	PRIMASK, r3
}
 8004d1a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d118      	bne.n	8004d56 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d24:	f3ef 8310 	mrs	r3, PRIMASK
 8004d28:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d2a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d2e:	2301      	movs	r3, #1
 8004d30:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f383 8810 	msr	PRIMASK, r3
}
 8004d38:	46c0      	nop			; (mov r8, r8)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2110      	movs	r1, #16
 8004d46:	438a      	bics	r2, r1
 8004d48:	601a      	str	r2, [r3, #0]
 8004d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	f383 8810 	msr	PRIMASK, r3
}
 8004d54:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2280      	movs	r2, #128	; 0x80
 8004d5a:	2120      	movs	r1, #32
 8004d5c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004d6a:	46c0      	nop			; (mov r8, r8)
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	b00e      	add	sp, #56	; 0x38
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	46c0      	nop			; (mov r8, r8)
 8004d74:	fffffedf 	.word	0xfffffedf

08004d78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	225a      	movs	r2, #90	; 0x5a
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2252      	movs	r2, #82	; 0x52
 8004d92:	2100      	movs	r1, #0
 8004d94:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	0018      	movs	r0, r3
 8004d9a:	f7ff fc6f 	bl	800467c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d9e:	46c0      	nop			; (mov r8, r8)
 8004da0:	46bd      	mov	sp, r7
 8004da2:	b004      	add	sp, #16
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b086      	sub	sp, #24
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dae:	f3ef 8310 	mrs	r3, PRIMASK
 8004db2:	60bb      	str	r3, [r7, #8]
  return(result);
 8004db4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	2301      	movs	r3, #1
 8004dba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f383 8810 	msr	PRIMASK, r3
}
 8004dc2:	46c0      	nop			; (mov r8, r8)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2140      	movs	r1, #64	; 0x40
 8004dd0:	438a      	bics	r2, r1
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	f383 8810 	msr	PRIMASK, r3
}
 8004dde:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2220      	movs	r2, #32
 8004de4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	0018      	movs	r0, r3
 8004df0:	f7ff fc3c 	bl	800466c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004df4:	46c0      	nop			; (mov r8, r8)
 8004df6:	46bd      	mov	sp, r7
 8004df8:	b006      	add	sp, #24
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004e04:	46c0      	nop			; (mov r8, r8)
 8004e06:	46bd      	mov	sp, r7
 8004e08:	b002      	add	sp, #8
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <siprintf>:
 8004e0c:	b40e      	push	{r1, r2, r3}
 8004e0e:	b500      	push	{lr}
 8004e10:	490b      	ldr	r1, [pc, #44]	; (8004e40 <siprintf+0x34>)
 8004e12:	b09c      	sub	sp, #112	; 0x70
 8004e14:	ab1d      	add	r3, sp, #116	; 0x74
 8004e16:	9002      	str	r0, [sp, #8]
 8004e18:	9006      	str	r0, [sp, #24]
 8004e1a:	9107      	str	r1, [sp, #28]
 8004e1c:	9104      	str	r1, [sp, #16]
 8004e1e:	4809      	ldr	r0, [pc, #36]	; (8004e44 <siprintf+0x38>)
 8004e20:	4909      	ldr	r1, [pc, #36]	; (8004e48 <siprintf+0x3c>)
 8004e22:	cb04      	ldmia	r3!, {r2}
 8004e24:	9105      	str	r1, [sp, #20]
 8004e26:	6800      	ldr	r0, [r0, #0]
 8004e28:	a902      	add	r1, sp, #8
 8004e2a:	9301      	str	r3, [sp, #4]
 8004e2c:	f000 f8a4 	bl	8004f78 <_svfiprintf_r>
 8004e30:	2200      	movs	r2, #0
 8004e32:	9b02      	ldr	r3, [sp, #8]
 8004e34:	701a      	strb	r2, [r3, #0]
 8004e36:	b01c      	add	sp, #112	; 0x70
 8004e38:	bc08      	pop	{r3}
 8004e3a:	b003      	add	sp, #12
 8004e3c:	4718      	bx	r3
 8004e3e:	46c0      	nop			; (mov r8, r8)
 8004e40:	7fffffff 	.word	0x7fffffff
 8004e44:	20000058 	.word	0x20000058
 8004e48:	ffff0208 	.word	0xffff0208

08004e4c <memset>:
 8004e4c:	0003      	movs	r3, r0
 8004e4e:	1882      	adds	r2, r0, r2
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d100      	bne.n	8004e56 <memset+0xa>
 8004e54:	4770      	bx	lr
 8004e56:	7019      	strb	r1, [r3, #0]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	e7f9      	b.n	8004e50 <memset+0x4>

08004e5c <__errno>:
 8004e5c:	4b01      	ldr	r3, [pc, #4]	; (8004e64 <__errno+0x8>)
 8004e5e:	6818      	ldr	r0, [r3, #0]
 8004e60:	4770      	bx	lr
 8004e62:	46c0      	nop			; (mov r8, r8)
 8004e64:	20000058 	.word	0x20000058

08004e68 <__libc_init_array>:
 8004e68:	b570      	push	{r4, r5, r6, lr}
 8004e6a:	2600      	movs	r6, #0
 8004e6c:	4c0c      	ldr	r4, [pc, #48]	; (8004ea0 <__libc_init_array+0x38>)
 8004e6e:	4d0d      	ldr	r5, [pc, #52]	; (8004ea4 <__libc_init_array+0x3c>)
 8004e70:	1b64      	subs	r4, r4, r5
 8004e72:	10a4      	asrs	r4, r4, #2
 8004e74:	42a6      	cmp	r6, r4
 8004e76:	d109      	bne.n	8004e8c <__libc_init_array+0x24>
 8004e78:	2600      	movs	r6, #0
 8004e7a:	f000 fc6b 	bl	8005754 <_init>
 8004e7e:	4c0a      	ldr	r4, [pc, #40]	; (8004ea8 <__libc_init_array+0x40>)
 8004e80:	4d0a      	ldr	r5, [pc, #40]	; (8004eac <__libc_init_array+0x44>)
 8004e82:	1b64      	subs	r4, r4, r5
 8004e84:	10a4      	asrs	r4, r4, #2
 8004e86:	42a6      	cmp	r6, r4
 8004e88:	d105      	bne.n	8004e96 <__libc_init_array+0x2e>
 8004e8a:	bd70      	pop	{r4, r5, r6, pc}
 8004e8c:	00b3      	lsls	r3, r6, #2
 8004e8e:	58eb      	ldr	r3, [r5, r3]
 8004e90:	4798      	blx	r3
 8004e92:	3601      	adds	r6, #1
 8004e94:	e7ee      	b.n	8004e74 <__libc_init_array+0xc>
 8004e96:	00b3      	lsls	r3, r6, #2
 8004e98:	58eb      	ldr	r3, [r5, r3]
 8004e9a:	4798      	blx	r3
 8004e9c:	3601      	adds	r6, #1
 8004e9e:	e7f2      	b.n	8004e86 <__libc_init_array+0x1e>
 8004ea0:	08005878 	.word	0x08005878
 8004ea4:	08005878 	.word	0x08005878
 8004ea8:	0800587c 	.word	0x0800587c
 8004eac:	08005878 	.word	0x08005878

08004eb0 <__retarget_lock_acquire_recursive>:
 8004eb0:	4770      	bx	lr

08004eb2 <__retarget_lock_release_recursive>:
 8004eb2:	4770      	bx	lr

08004eb4 <__ssputs_r>:
 8004eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	9301      	str	r3, [sp, #4]
 8004eba:	9203      	str	r2, [sp, #12]
 8004ebc:	688e      	ldr	r6, [r1, #8]
 8004ebe:	9a01      	ldr	r2, [sp, #4]
 8004ec0:	0007      	movs	r7, r0
 8004ec2:	000c      	movs	r4, r1
 8004ec4:	680b      	ldr	r3, [r1, #0]
 8004ec6:	4296      	cmp	r6, r2
 8004ec8:	d831      	bhi.n	8004f2e <__ssputs_r+0x7a>
 8004eca:	898a      	ldrh	r2, [r1, #12]
 8004ecc:	2190      	movs	r1, #144	; 0x90
 8004ece:	00c9      	lsls	r1, r1, #3
 8004ed0:	420a      	tst	r2, r1
 8004ed2:	d029      	beq.n	8004f28 <__ssputs_r+0x74>
 8004ed4:	2003      	movs	r0, #3
 8004ed6:	6921      	ldr	r1, [r4, #16]
 8004ed8:	1a5b      	subs	r3, r3, r1
 8004eda:	9302      	str	r3, [sp, #8]
 8004edc:	6963      	ldr	r3, [r4, #20]
 8004ede:	4343      	muls	r3, r0
 8004ee0:	0fdd      	lsrs	r5, r3, #31
 8004ee2:	18ed      	adds	r5, r5, r3
 8004ee4:	9b01      	ldr	r3, [sp, #4]
 8004ee6:	9802      	ldr	r0, [sp, #8]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	181b      	adds	r3, r3, r0
 8004eec:	106d      	asrs	r5, r5, #1
 8004eee:	42ab      	cmp	r3, r5
 8004ef0:	d900      	bls.n	8004ef4 <__ssputs_r+0x40>
 8004ef2:	001d      	movs	r5, r3
 8004ef4:	0552      	lsls	r2, r2, #21
 8004ef6:	d529      	bpl.n	8004f4c <__ssputs_r+0x98>
 8004ef8:	0029      	movs	r1, r5
 8004efa:	0038      	movs	r0, r7
 8004efc:	f000 f95e 	bl	80051bc <_malloc_r>
 8004f00:	1e06      	subs	r6, r0, #0
 8004f02:	d02d      	beq.n	8004f60 <__ssputs_r+0xac>
 8004f04:	9a02      	ldr	r2, [sp, #8]
 8004f06:	6921      	ldr	r1, [r4, #16]
 8004f08:	f000 fbc9 	bl	800569e <memcpy>
 8004f0c:	89a2      	ldrh	r2, [r4, #12]
 8004f0e:	4b19      	ldr	r3, [pc, #100]	; (8004f74 <__ssputs_r+0xc0>)
 8004f10:	401a      	ands	r2, r3
 8004f12:	2380      	movs	r3, #128	; 0x80
 8004f14:	4313      	orrs	r3, r2
 8004f16:	81a3      	strh	r3, [r4, #12]
 8004f18:	9b02      	ldr	r3, [sp, #8]
 8004f1a:	6126      	str	r6, [r4, #16]
 8004f1c:	18f6      	adds	r6, r6, r3
 8004f1e:	6026      	str	r6, [r4, #0]
 8004f20:	6165      	str	r5, [r4, #20]
 8004f22:	9e01      	ldr	r6, [sp, #4]
 8004f24:	1aed      	subs	r5, r5, r3
 8004f26:	60a5      	str	r5, [r4, #8]
 8004f28:	9b01      	ldr	r3, [sp, #4]
 8004f2a:	429e      	cmp	r6, r3
 8004f2c:	d900      	bls.n	8004f30 <__ssputs_r+0x7c>
 8004f2e:	9e01      	ldr	r6, [sp, #4]
 8004f30:	0032      	movs	r2, r6
 8004f32:	9903      	ldr	r1, [sp, #12]
 8004f34:	6820      	ldr	r0, [r4, #0]
 8004f36:	f000 fb82 	bl	800563e <memmove>
 8004f3a:	2000      	movs	r0, #0
 8004f3c:	68a3      	ldr	r3, [r4, #8]
 8004f3e:	1b9b      	subs	r3, r3, r6
 8004f40:	60a3      	str	r3, [r4, #8]
 8004f42:	6823      	ldr	r3, [r4, #0]
 8004f44:	199b      	adds	r3, r3, r6
 8004f46:	6023      	str	r3, [r4, #0]
 8004f48:	b005      	add	sp, #20
 8004f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f4c:	002a      	movs	r2, r5
 8004f4e:	0038      	movs	r0, r7
 8004f50:	f000 fb46 	bl	80055e0 <_realloc_r>
 8004f54:	1e06      	subs	r6, r0, #0
 8004f56:	d1df      	bne.n	8004f18 <__ssputs_r+0x64>
 8004f58:	0038      	movs	r0, r7
 8004f5a:	6921      	ldr	r1, [r4, #16]
 8004f5c:	f000 fba8 	bl	80056b0 <_free_r>
 8004f60:	230c      	movs	r3, #12
 8004f62:	2001      	movs	r0, #1
 8004f64:	603b      	str	r3, [r7, #0]
 8004f66:	89a2      	ldrh	r2, [r4, #12]
 8004f68:	3334      	adds	r3, #52	; 0x34
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	81a3      	strh	r3, [r4, #12]
 8004f6e:	4240      	negs	r0, r0
 8004f70:	e7ea      	b.n	8004f48 <__ssputs_r+0x94>
 8004f72:	46c0      	nop			; (mov r8, r8)
 8004f74:	fffffb7f 	.word	0xfffffb7f

08004f78 <_svfiprintf_r>:
 8004f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f7a:	b0a1      	sub	sp, #132	; 0x84
 8004f7c:	9003      	str	r0, [sp, #12]
 8004f7e:	001d      	movs	r5, r3
 8004f80:	898b      	ldrh	r3, [r1, #12]
 8004f82:	000f      	movs	r7, r1
 8004f84:	0016      	movs	r6, r2
 8004f86:	061b      	lsls	r3, r3, #24
 8004f88:	d511      	bpl.n	8004fae <_svfiprintf_r+0x36>
 8004f8a:	690b      	ldr	r3, [r1, #16]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10e      	bne.n	8004fae <_svfiprintf_r+0x36>
 8004f90:	2140      	movs	r1, #64	; 0x40
 8004f92:	f000 f913 	bl	80051bc <_malloc_r>
 8004f96:	6038      	str	r0, [r7, #0]
 8004f98:	6138      	str	r0, [r7, #16]
 8004f9a:	2800      	cmp	r0, #0
 8004f9c:	d105      	bne.n	8004faa <_svfiprintf_r+0x32>
 8004f9e:	230c      	movs	r3, #12
 8004fa0:	9a03      	ldr	r2, [sp, #12]
 8004fa2:	3801      	subs	r0, #1
 8004fa4:	6013      	str	r3, [r2, #0]
 8004fa6:	b021      	add	sp, #132	; 0x84
 8004fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004faa:	2340      	movs	r3, #64	; 0x40
 8004fac:	617b      	str	r3, [r7, #20]
 8004fae:	2300      	movs	r3, #0
 8004fb0:	ac08      	add	r4, sp, #32
 8004fb2:	6163      	str	r3, [r4, #20]
 8004fb4:	3320      	adds	r3, #32
 8004fb6:	7663      	strb	r3, [r4, #25]
 8004fb8:	3310      	adds	r3, #16
 8004fba:	76a3      	strb	r3, [r4, #26]
 8004fbc:	9507      	str	r5, [sp, #28]
 8004fbe:	0035      	movs	r5, r6
 8004fc0:	782b      	ldrb	r3, [r5, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <_svfiprintf_r+0x52>
 8004fc6:	2b25      	cmp	r3, #37	; 0x25
 8004fc8:	d148      	bne.n	800505c <_svfiprintf_r+0xe4>
 8004fca:	1bab      	subs	r3, r5, r6
 8004fcc:	9305      	str	r3, [sp, #20]
 8004fce:	42b5      	cmp	r5, r6
 8004fd0:	d00b      	beq.n	8004fea <_svfiprintf_r+0x72>
 8004fd2:	0032      	movs	r2, r6
 8004fd4:	0039      	movs	r1, r7
 8004fd6:	9803      	ldr	r0, [sp, #12]
 8004fd8:	f7ff ff6c 	bl	8004eb4 <__ssputs_r>
 8004fdc:	3001      	adds	r0, #1
 8004fde:	d100      	bne.n	8004fe2 <_svfiprintf_r+0x6a>
 8004fe0:	e0af      	b.n	8005142 <_svfiprintf_r+0x1ca>
 8004fe2:	6963      	ldr	r3, [r4, #20]
 8004fe4:	9a05      	ldr	r2, [sp, #20]
 8004fe6:	189b      	adds	r3, r3, r2
 8004fe8:	6163      	str	r3, [r4, #20]
 8004fea:	782b      	ldrb	r3, [r5, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d100      	bne.n	8004ff2 <_svfiprintf_r+0x7a>
 8004ff0:	e0a7      	b.n	8005142 <_svfiprintf_r+0x1ca>
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	4252      	negs	r2, r2
 8004ff8:	6062      	str	r2, [r4, #4]
 8004ffa:	a904      	add	r1, sp, #16
 8004ffc:	3254      	adds	r2, #84	; 0x54
 8004ffe:	1852      	adds	r2, r2, r1
 8005000:	1c6e      	adds	r6, r5, #1
 8005002:	6023      	str	r3, [r4, #0]
 8005004:	60e3      	str	r3, [r4, #12]
 8005006:	60a3      	str	r3, [r4, #8]
 8005008:	7013      	strb	r3, [r2, #0]
 800500a:	65a3      	str	r3, [r4, #88]	; 0x58
 800500c:	4b55      	ldr	r3, [pc, #340]	; (8005164 <_svfiprintf_r+0x1ec>)
 800500e:	2205      	movs	r2, #5
 8005010:	0018      	movs	r0, r3
 8005012:	7831      	ldrb	r1, [r6, #0]
 8005014:	9305      	str	r3, [sp, #20]
 8005016:	f000 fb37 	bl	8005688 <memchr>
 800501a:	1c75      	adds	r5, r6, #1
 800501c:	2800      	cmp	r0, #0
 800501e:	d11f      	bne.n	8005060 <_svfiprintf_r+0xe8>
 8005020:	6822      	ldr	r2, [r4, #0]
 8005022:	06d3      	lsls	r3, r2, #27
 8005024:	d504      	bpl.n	8005030 <_svfiprintf_r+0xb8>
 8005026:	2353      	movs	r3, #83	; 0x53
 8005028:	a904      	add	r1, sp, #16
 800502a:	185b      	adds	r3, r3, r1
 800502c:	2120      	movs	r1, #32
 800502e:	7019      	strb	r1, [r3, #0]
 8005030:	0713      	lsls	r3, r2, #28
 8005032:	d504      	bpl.n	800503e <_svfiprintf_r+0xc6>
 8005034:	2353      	movs	r3, #83	; 0x53
 8005036:	a904      	add	r1, sp, #16
 8005038:	185b      	adds	r3, r3, r1
 800503a:	212b      	movs	r1, #43	; 0x2b
 800503c:	7019      	strb	r1, [r3, #0]
 800503e:	7833      	ldrb	r3, [r6, #0]
 8005040:	2b2a      	cmp	r3, #42	; 0x2a
 8005042:	d016      	beq.n	8005072 <_svfiprintf_r+0xfa>
 8005044:	0035      	movs	r5, r6
 8005046:	2100      	movs	r1, #0
 8005048:	200a      	movs	r0, #10
 800504a:	68e3      	ldr	r3, [r4, #12]
 800504c:	782a      	ldrb	r2, [r5, #0]
 800504e:	1c6e      	adds	r6, r5, #1
 8005050:	3a30      	subs	r2, #48	; 0x30
 8005052:	2a09      	cmp	r2, #9
 8005054:	d94e      	bls.n	80050f4 <_svfiprintf_r+0x17c>
 8005056:	2900      	cmp	r1, #0
 8005058:	d111      	bne.n	800507e <_svfiprintf_r+0x106>
 800505a:	e017      	b.n	800508c <_svfiprintf_r+0x114>
 800505c:	3501      	adds	r5, #1
 800505e:	e7af      	b.n	8004fc0 <_svfiprintf_r+0x48>
 8005060:	9b05      	ldr	r3, [sp, #20]
 8005062:	6822      	ldr	r2, [r4, #0]
 8005064:	1ac0      	subs	r0, r0, r3
 8005066:	2301      	movs	r3, #1
 8005068:	4083      	lsls	r3, r0
 800506a:	4313      	orrs	r3, r2
 800506c:	002e      	movs	r6, r5
 800506e:	6023      	str	r3, [r4, #0]
 8005070:	e7cc      	b.n	800500c <_svfiprintf_r+0x94>
 8005072:	9b07      	ldr	r3, [sp, #28]
 8005074:	1d19      	adds	r1, r3, #4
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	9107      	str	r1, [sp, #28]
 800507a:	2b00      	cmp	r3, #0
 800507c:	db01      	blt.n	8005082 <_svfiprintf_r+0x10a>
 800507e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005080:	e004      	b.n	800508c <_svfiprintf_r+0x114>
 8005082:	425b      	negs	r3, r3
 8005084:	60e3      	str	r3, [r4, #12]
 8005086:	2302      	movs	r3, #2
 8005088:	4313      	orrs	r3, r2
 800508a:	6023      	str	r3, [r4, #0]
 800508c:	782b      	ldrb	r3, [r5, #0]
 800508e:	2b2e      	cmp	r3, #46	; 0x2e
 8005090:	d10a      	bne.n	80050a8 <_svfiprintf_r+0x130>
 8005092:	786b      	ldrb	r3, [r5, #1]
 8005094:	2b2a      	cmp	r3, #42	; 0x2a
 8005096:	d135      	bne.n	8005104 <_svfiprintf_r+0x18c>
 8005098:	9b07      	ldr	r3, [sp, #28]
 800509a:	3502      	adds	r5, #2
 800509c:	1d1a      	adds	r2, r3, #4
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	9207      	str	r2, [sp, #28]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	db2b      	blt.n	80050fe <_svfiprintf_r+0x186>
 80050a6:	9309      	str	r3, [sp, #36]	; 0x24
 80050a8:	4e2f      	ldr	r6, [pc, #188]	; (8005168 <_svfiprintf_r+0x1f0>)
 80050aa:	2203      	movs	r2, #3
 80050ac:	0030      	movs	r0, r6
 80050ae:	7829      	ldrb	r1, [r5, #0]
 80050b0:	f000 faea 	bl	8005688 <memchr>
 80050b4:	2800      	cmp	r0, #0
 80050b6:	d006      	beq.n	80050c6 <_svfiprintf_r+0x14e>
 80050b8:	2340      	movs	r3, #64	; 0x40
 80050ba:	1b80      	subs	r0, r0, r6
 80050bc:	4083      	lsls	r3, r0
 80050be:	6822      	ldr	r2, [r4, #0]
 80050c0:	3501      	adds	r5, #1
 80050c2:	4313      	orrs	r3, r2
 80050c4:	6023      	str	r3, [r4, #0]
 80050c6:	7829      	ldrb	r1, [r5, #0]
 80050c8:	2206      	movs	r2, #6
 80050ca:	4828      	ldr	r0, [pc, #160]	; (800516c <_svfiprintf_r+0x1f4>)
 80050cc:	1c6e      	adds	r6, r5, #1
 80050ce:	7621      	strb	r1, [r4, #24]
 80050d0:	f000 fada 	bl	8005688 <memchr>
 80050d4:	2800      	cmp	r0, #0
 80050d6:	d03c      	beq.n	8005152 <_svfiprintf_r+0x1da>
 80050d8:	4b25      	ldr	r3, [pc, #148]	; (8005170 <_svfiprintf_r+0x1f8>)
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d125      	bne.n	800512a <_svfiprintf_r+0x1b2>
 80050de:	2207      	movs	r2, #7
 80050e0:	9b07      	ldr	r3, [sp, #28]
 80050e2:	3307      	adds	r3, #7
 80050e4:	4393      	bics	r3, r2
 80050e6:	3308      	adds	r3, #8
 80050e8:	9307      	str	r3, [sp, #28]
 80050ea:	6963      	ldr	r3, [r4, #20]
 80050ec:	9a04      	ldr	r2, [sp, #16]
 80050ee:	189b      	adds	r3, r3, r2
 80050f0:	6163      	str	r3, [r4, #20]
 80050f2:	e764      	b.n	8004fbe <_svfiprintf_r+0x46>
 80050f4:	4343      	muls	r3, r0
 80050f6:	0035      	movs	r5, r6
 80050f8:	2101      	movs	r1, #1
 80050fa:	189b      	adds	r3, r3, r2
 80050fc:	e7a6      	b.n	800504c <_svfiprintf_r+0xd4>
 80050fe:	2301      	movs	r3, #1
 8005100:	425b      	negs	r3, r3
 8005102:	e7d0      	b.n	80050a6 <_svfiprintf_r+0x12e>
 8005104:	2300      	movs	r3, #0
 8005106:	200a      	movs	r0, #10
 8005108:	001a      	movs	r2, r3
 800510a:	3501      	adds	r5, #1
 800510c:	6063      	str	r3, [r4, #4]
 800510e:	7829      	ldrb	r1, [r5, #0]
 8005110:	1c6e      	adds	r6, r5, #1
 8005112:	3930      	subs	r1, #48	; 0x30
 8005114:	2909      	cmp	r1, #9
 8005116:	d903      	bls.n	8005120 <_svfiprintf_r+0x1a8>
 8005118:	2b00      	cmp	r3, #0
 800511a:	d0c5      	beq.n	80050a8 <_svfiprintf_r+0x130>
 800511c:	9209      	str	r2, [sp, #36]	; 0x24
 800511e:	e7c3      	b.n	80050a8 <_svfiprintf_r+0x130>
 8005120:	4342      	muls	r2, r0
 8005122:	0035      	movs	r5, r6
 8005124:	2301      	movs	r3, #1
 8005126:	1852      	adds	r2, r2, r1
 8005128:	e7f1      	b.n	800510e <_svfiprintf_r+0x196>
 800512a:	aa07      	add	r2, sp, #28
 800512c:	9200      	str	r2, [sp, #0]
 800512e:	0021      	movs	r1, r4
 8005130:	003a      	movs	r2, r7
 8005132:	4b10      	ldr	r3, [pc, #64]	; (8005174 <_svfiprintf_r+0x1fc>)
 8005134:	9803      	ldr	r0, [sp, #12]
 8005136:	e000      	b.n	800513a <_svfiprintf_r+0x1c2>
 8005138:	bf00      	nop
 800513a:	9004      	str	r0, [sp, #16]
 800513c:	9b04      	ldr	r3, [sp, #16]
 800513e:	3301      	adds	r3, #1
 8005140:	d1d3      	bne.n	80050ea <_svfiprintf_r+0x172>
 8005142:	89bb      	ldrh	r3, [r7, #12]
 8005144:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005146:	065b      	lsls	r3, r3, #25
 8005148:	d400      	bmi.n	800514c <_svfiprintf_r+0x1d4>
 800514a:	e72c      	b.n	8004fa6 <_svfiprintf_r+0x2e>
 800514c:	2001      	movs	r0, #1
 800514e:	4240      	negs	r0, r0
 8005150:	e729      	b.n	8004fa6 <_svfiprintf_r+0x2e>
 8005152:	aa07      	add	r2, sp, #28
 8005154:	9200      	str	r2, [sp, #0]
 8005156:	0021      	movs	r1, r4
 8005158:	003a      	movs	r2, r7
 800515a:	4b06      	ldr	r3, [pc, #24]	; (8005174 <_svfiprintf_r+0x1fc>)
 800515c:	9803      	ldr	r0, [sp, #12]
 800515e:	f000 f91f 	bl	80053a0 <_printf_i>
 8005162:	e7ea      	b.n	800513a <_svfiprintf_r+0x1c2>
 8005164:	08005844 	.word	0x08005844
 8005168:	0800584a 	.word	0x0800584a
 800516c:	0800584e 	.word	0x0800584e
 8005170:	00000000 	.word	0x00000000
 8005174:	08004eb5 	.word	0x08004eb5

08005178 <sbrk_aligned>:
 8005178:	b570      	push	{r4, r5, r6, lr}
 800517a:	4e0f      	ldr	r6, [pc, #60]	; (80051b8 <sbrk_aligned+0x40>)
 800517c:	000d      	movs	r5, r1
 800517e:	6831      	ldr	r1, [r6, #0]
 8005180:	0004      	movs	r4, r0
 8005182:	2900      	cmp	r1, #0
 8005184:	d102      	bne.n	800518c <sbrk_aligned+0x14>
 8005186:	f000 fa6d 	bl	8005664 <_sbrk_r>
 800518a:	6030      	str	r0, [r6, #0]
 800518c:	0029      	movs	r1, r5
 800518e:	0020      	movs	r0, r4
 8005190:	f000 fa68 	bl	8005664 <_sbrk_r>
 8005194:	1c43      	adds	r3, r0, #1
 8005196:	d00a      	beq.n	80051ae <sbrk_aligned+0x36>
 8005198:	2303      	movs	r3, #3
 800519a:	1cc5      	adds	r5, r0, #3
 800519c:	439d      	bics	r5, r3
 800519e:	42a8      	cmp	r0, r5
 80051a0:	d007      	beq.n	80051b2 <sbrk_aligned+0x3a>
 80051a2:	1a29      	subs	r1, r5, r0
 80051a4:	0020      	movs	r0, r4
 80051a6:	f000 fa5d 	bl	8005664 <_sbrk_r>
 80051aa:	3001      	adds	r0, #1
 80051ac:	d101      	bne.n	80051b2 <sbrk_aligned+0x3a>
 80051ae:	2501      	movs	r5, #1
 80051b0:	426d      	negs	r5, r5
 80051b2:	0028      	movs	r0, r5
 80051b4:	bd70      	pop	{r4, r5, r6, pc}
 80051b6:	46c0      	nop			; (mov r8, r8)
 80051b8:	20000874 	.word	0x20000874

080051bc <_malloc_r>:
 80051bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051be:	2203      	movs	r2, #3
 80051c0:	1ccb      	adds	r3, r1, #3
 80051c2:	4393      	bics	r3, r2
 80051c4:	3308      	adds	r3, #8
 80051c6:	0006      	movs	r6, r0
 80051c8:	001f      	movs	r7, r3
 80051ca:	2b0c      	cmp	r3, #12
 80051cc:	d238      	bcs.n	8005240 <_malloc_r+0x84>
 80051ce:	270c      	movs	r7, #12
 80051d0:	42b9      	cmp	r1, r7
 80051d2:	d837      	bhi.n	8005244 <_malloc_r+0x88>
 80051d4:	0030      	movs	r0, r6
 80051d6:	f000 f9f3 	bl	80055c0 <__malloc_lock>
 80051da:	4b38      	ldr	r3, [pc, #224]	; (80052bc <_malloc_r+0x100>)
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	001c      	movs	r4, r3
 80051e2:	2c00      	cmp	r4, #0
 80051e4:	d133      	bne.n	800524e <_malloc_r+0x92>
 80051e6:	0039      	movs	r1, r7
 80051e8:	0030      	movs	r0, r6
 80051ea:	f7ff ffc5 	bl	8005178 <sbrk_aligned>
 80051ee:	0004      	movs	r4, r0
 80051f0:	1c43      	adds	r3, r0, #1
 80051f2:	d15e      	bne.n	80052b2 <_malloc_r+0xf6>
 80051f4:	9b00      	ldr	r3, [sp, #0]
 80051f6:	681c      	ldr	r4, [r3, #0]
 80051f8:	0025      	movs	r5, r4
 80051fa:	2d00      	cmp	r5, #0
 80051fc:	d14e      	bne.n	800529c <_malloc_r+0xe0>
 80051fe:	2c00      	cmp	r4, #0
 8005200:	d051      	beq.n	80052a6 <_malloc_r+0xea>
 8005202:	6823      	ldr	r3, [r4, #0]
 8005204:	0029      	movs	r1, r5
 8005206:	18e3      	adds	r3, r4, r3
 8005208:	0030      	movs	r0, r6
 800520a:	9301      	str	r3, [sp, #4]
 800520c:	f000 fa2a 	bl	8005664 <_sbrk_r>
 8005210:	9b01      	ldr	r3, [sp, #4]
 8005212:	4283      	cmp	r3, r0
 8005214:	d147      	bne.n	80052a6 <_malloc_r+0xea>
 8005216:	6823      	ldr	r3, [r4, #0]
 8005218:	0030      	movs	r0, r6
 800521a:	1aff      	subs	r7, r7, r3
 800521c:	0039      	movs	r1, r7
 800521e:	f7ff ffab 	bl	8005178 <sbrk_aligned>
 8005222:	3001      	adds	r0, #1
 8005224:	d03f      	beq.n	80052a6 <_malloc_r+0xea>
 8005226:	6823      	ldr	r3, [r4, #0]
 8005228:	19db      	adds	r3, r3, r7
 800522a:	6023      	str	r3, [r4, #0]
 800522c:	9b00      	ldr	r3, [sp, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d040      	beq.n	80052b6 <_malloc_r+0xfa>
 8005234:	685a      	ldr	r2, [r3, #4]
 8005236:	42a2      	cmp	r2, r4
 8005238:	d133      	bne.n	80052a2 <_malloc_r+0xe6>
 800523a:	2200      	movs	r2, #0
 800523c:	605a      	str	r2, [r3, #4]
 800523e:	e014      	b.n	800526a <_malloc_r+0xae>
 8005240:	2b00      	cmp	r3, #0
 8005242:	dac5      	bge.n	80051d0 <_malloc_r+0x14>
 8005244:	230c      	movs	r3, #12
 8005246:	2500      	movs	r5, #0
 8005248:	6033      	str	r3, [r6, #0]
 800524a:	0028      	movs	r0, r5
 800524c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800524e:	6821      	ldr	r1, [r4, #0]
 8005250:	1bc9      	subs	r1, r1, r7
 8005252:	d420      	bmi.n	8005296 <_malloc_r+0xda>
 8005254:	290b      	cmp	r1, #11
 8005256:	d918      	bls.n	800528a <_malloc_r+0xce>
 8005258:	19e2      	adds	r2, r4, r7
 800525a:	6027      	str	r7, [r4, #0]
 800525c:	42a3      	cmp	r3, r4
 800525e:	d112      	bne.n	8005286 <_malloc_r+0xca>
 8005260:	9b00      	ldr	r3, [sp, #0]
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	6863      	ldr	r3, [r4, #4]
 8005266:	6011      	str	r1, [r2, #0]
 8005268:	6053      	str	r3, [r2, #4]
 800526a:	0030      	movs	r0, r6
 800526c:	0025      	movs	r5, r4
 800526e:	f000 f9af 	bl	80055d0 <__malloc_unlock>
 8005272:	2207      	movs	r2, #7
 8005274:	350b      	adds	r5, #11
 8005276:	1d23      	adds	r3, r4, #4
 8005278:	4395      	bics	r5, r2
 800527a:	1aea      	subs	r2, r5, r3
 800527c:	429d      	cmp	r5, r3
 800527e:	d0e4      	beq.n	800524a <_malloc_r+0x8e>
 8005280:	1b5b      	subs	r3, r3, r5
 8005282:	50a3      	str	r3, [r4, r2]
 8005284:	e7e1      	b.n	800524a <_malloc_r+0x8e>
 8005286:	605a      	str	r2, [r3, #4]
 8005288:	e7ec      	b.n	8005264 <_malloc_r+0xa8>
 800528a:	6862      	ldr	r2, [r4, #4]
 800528c:	42a3      	cmp	r3, r4
 800528e:	d1d5      	bne.n	800523c <_malloc_r+0x80>
 8005290:	9b00      	ldr	r3, [sp, #0]
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	e7e9      	b.n	800526a <_malloc_r+0xae>
 8005296:	0023      	movs	r3, r4
 8005298:	6864      	ldr	r4, [r4, #4]
 800529a:	e7a2      	b.n	80051e2 <_malloc_r+0x26>
 800529c:	002c      	movs	r4, r5
 800529e:	686d      	ldr	r5, [r5, #4]
 80052a0:	e7ab      	b.n	80051fa <_malloc_r+0x3e>
 80052a2:	0013      	movs	r3, r2
 80052a4:	e7c4      	b.n	8005230 <_malloc_r+0x74>
 80052a6:	230c      	movs	r3, #12
 80052a8:	0030      	movs	r0, r6
 80052aa:	6033      	str	r3, [r6, #0]
 80052ac:	f000 f990 	bl	80055d0 <__malloc_unlock>
 80052b0:	e7cb      	b.n	800524a <_malloc_r+0x8e>
 80052b2:	6027      	str	r7, [r4, #0]
 80052b4:	e7d9      	b.n	800526a <_malloc_r+0xae>
 80052b6:	605b      	str	r3, [r3, #4]
 80052b8:	deff      	udf	#255	; 0xff
 80052ba:	46c0      	nop			; (mov r8, r8)
 80052bc:	20000870 	.word	0x20000870

080052c0 <_printf_common>:
 80052c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052c2:	0016      	movs	r6, r2
 80052c4:	9301      	str	r3, [sp, #4]
 80052c6:	688a      	ldr	r2, [r1, #8]
 80052c8:	690b      	ldr	r3, [r1, #16]
 80052ca:	000c      	movs	r4, r1
 80052cc:	9000      	str	r0, [sp, #0]
 80052ce:	4293      	cmp	r3, r2
 80052d0:	da00      	bge.n	80052d4 <_printf_common+0x14>
 80052d2:	0013      	movs	r3, r2
 80052d4:	0022      	movs	r2, r4
 80052d6:	6033      	str	r3, [r6, #0]
 80052d8:	3243      	adds	r2, #67	; 0x43
 80052da:	7812      	ldrb	r2, [r2, #0]
 80052dc:	2a00      	cmp	r2, #0
 80052de:	d001      	beq.n	80052e4 <_printf_common+0x24>
 80052e0:	3301      	adds	r3, #1
 80052e2:	6033      	str	r3, [r6, #0]
 80052e4:	6823      	ldr	r3, [r4, #0]
 80052e6:	069b      	lsls	r3, r3, #26
 80052e8:	d502      	bpl.n	80052f0 <_printf_common+0x30>
 80052ea:	6833      	ldr	r3, [r6, #0]
 80052ec:	3302      	adds	r3, #2
 80052ee:	6033      	str	r3, [r6, #0]
 80052f0:	6822      	ldr	r2, [r4, #0]
 80052f2:	2306      	movs	r3, #6
 80052f4:	0015      	movs	r5, r2
 80052f6:	401d      	ands	r5, r3
 80052f8:	421a      	tst	r2, r3
 80052fa:	d027      	beq.n	800534c <_printf_common+0x8c>
 80052fc:	0023      	movs	r3, r4
 80052fe:	3343      	adds	r3, #67	; 0x43
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	1e5a      	subs	r2, r3, #1
 8005304:	4193      	sbcs	r3, r2
 8005306:	6822      	ldr	r2, [r4, #0]
 8005308:	0692      	lsls	r2, r2, #26
 800530a:	d430      	bmi.n	800536e <_printf_common+0xae>
 800530c:	0022      	movs	r2, r4
 800530e:	9901      	ldr	r1, [sp, #4]
 8005310:	9800      	ldr	r0, [sp, #0]
 8005312:	9d08      	ldr	r5, [sp, #32]
 8005314:	3243      	adds	r2, #67	; 0x43
 8005316:	47a8      	blx	r5
 8005318:	3001      	adds	r0, #1
 800531a:	d025      	beq.n	8005368 <_printf_common+0xa8>
 800531c:	2206      	movs	r2, #6
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	2500      	movs	r5, #0
 8005322:	4013      	ands	r3, r2
 8005324:	2b04      	cmp	r3, #4
 8005326:	d105      	bne.n	8005334 <_printf_common+0x74>
 8005328:	6833      	ldr	r3, [r6, #0]
 800532a:	68e5      	ldr	r5, [r4, #12]
 800532c:	1aed      	subs	r5, r5, r3
 800532e:	43eb      	mvns	r3, r5
 8005330:	17db      	asrs	r3, r3, #31
 8005332:	401d      	ands	r5, r3
 8005334:	68a3      	ldr	r3, [r4, #8]
 8005336:	6922      	ldr	r2, [r4, #16]
 8005338:	4293      	cmp	r3, r2
 800533a:	dd01      	ble.n	8005340 <_printf_common+0x80>
 800533c:	1a9b      	subs	r3, r3, r2
 800533e:	18ed      	adds	r5, r5, r3
 8005340:	2600      	movs	r6, #0
 8005342:	42b5      	cmp	r5, r6
 8005344:	d120      	bne.n	8005388 <_printf_common+0xc8>
 8005346:	2000      	movs	r0, #0
 8005348:	e010      	b.n	800536c <_printf_common+0xac>
 800534a:	3501      	adds	r5, #1
 800534c:	68e3      	ldr	r3, [r4, #12]
 800534e:	6832      	ldr	r2, [r6, #0]
 8005350:	1a9b      	subs	r3, r3, r2
 8005352:	42ab      	cmp	r3, r5
 8005354:	ddd2      	ble.n	80052fc <_printf_common+0x3c>
 8005356:	0022      	movs	r2, r4
 8005358:	2301      	movs	r3, #1
 800535a:	9901      	ldr	r1, [sp, #4]
 800535c:	9800      	ldr	r0, [sp, #0]
 800535e:	9f08      	ldr	r7, [sp, #32]
 8005360:	3219      	adds	r2, #25
 8005362:	47b8      	blx	r7
 8005364:	3001      	adds	r0, #1
 8005366:	d1f0      	bne.n	800534a <_printf_common+0x8a>
 8005368:	2001      	movs	r0, #1
 800536a:	4240      	negs	r0, r0
 800536c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800536e:	2030      	movs	r0, #48	; 0x30
 8005370:	18e1      	adds	r1, r4, r3
 8005372:	3143      	adds	r1, #67	; 0x43
 8005374:	7008      	strb	r0, [r1, #0]
 8005376:	0021      	movs	r1, r4
 8005378:	1c5a      	adds	r2, r3, #1
 800537a:	3145      	adds	r1, #69	; 0x45
 800537c:	7809      	ldrb	r1, [r1, #0]
 800537e:	18a2      	adds	r2, r4, r2
 8005380:	3243      	adds	r2, #67	; 0x43
 8005382:	3302      	adds	r3, #2
 8005384:	7011      	strb	r1, [r2, #0]
 8005386:	e7c1      	b.n	800530c <_printf_common+0x4c>
 8005388:	0022      	movs	r2, r4
 800538a:	2301      	movs	r3, #1
 800538c:	9901      	ldr	r1, [sp, #4]
 800538e:	9800      	ldr	r0, [sp, #0]
 8005390:	9f08      	ldr	r7, [sp, #32]
 8005392:	321a      	adds	r2, #26
 8005394:	47b8      	blx	r7
 8005396:	3001      	adds	r0, #1
 8005398:	d0e6      	beq.n	8005368 <_printf_common+0xa8>
 800539a:	3601      	adds	r6, #1
 800539c:	e7d1      	b.n	8005342 <_printf_common+0x82>
	...

080053a0 <_printf_i>:
 80053a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053a2:	b08b      	sub	sp, #44	; 0x2c
 80053a4:	9206      	str	r2, [sp, #24]
 80053a6:	000a      	movs	r2, r1
 80053a8:	3243      	adds	r2, #67	; 0x43
 80053aa:	9307      	str	r3, [sp, #28]
 80053ac:	9005      	str	r0, [sp, #20]
 80053ae:	9204      	str	r2, [sp, #16]
 80053b0:	7e0a      	ldrb	r2, [r1, #24]
 80053b2:	000c      	movs	r4, r1
 80053b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80053b6:	2a78      	cmp	r2, #120	; 0x78
 80053b8:	d809      	bhi.n	80053ce <_printf_i+0x2e>
 80053ba:	2a62      	cmp	r2, #98	; 0x62
 80053bc:	d80b      	bhi.n	80053d6 <_printf_i+0x36>
 80053be:	2a00      	cmp	r2, #0
 80053c0:	d100      	bne.n	80053c4 <_printf_i+0x24>
 80053c2:	e0be      	b.n	8005542 <_printf_i+0x1a2>
 80053c4:	497c      	ldr	r1, [pc, #496]	; (80055b8 <_printf_i+0x218>)
 80053c6:	9103      	str	r1, [sp, #12]
 80053c8:	2a58      	cmp	r2, #88	; 0x58
 80053ca:	d100      	bne.n	80053ce <_printf_i+0x2e>
 80053cc:	e093      	b.n	80054f6 <_printf_i+0x156>
 80053ce:	0026      	movs	r6, r4
 80053d0:	3642      	adds	r6, #66	; 0x42
 80053d2:	7032      	strb	r2, [r6, #0]
 80053d4:	e022      	b.n	800541c <_printf_i+0x7c>
 80053d6:	0010      	movs	r0, r2
 80053d8:	3863      	subs	r0, #99	; 0x63
 80053da:	2815      	cmp	r0, #21
 80053dc:	d8f7      	bhi.n	80053ce <_printf_i+0x2e>
 80053de:	f7fa fe93 	bl	8000108 <__gnu_thumb1_case_shi>
 80053e2:	0016      	.short	0x0016
 80053e4:	fff6001f 	.word	0xfff6001f
 80053e8:	fff6fff6 	.word	0xfff6fff6
 80053ec:	001ffff6 	.word	0x001ffff6
 80053f0:	fff6fff6 	.word	0xfff6fff6
 80053f4:	fff6fff6 	.word	0xfff6fff6
 80053f8:	003600a3 	.word	0x003600a3
 80053fc:	fff60083 	.word	0xfff60083
 8005400:	00b4fff6 	.word	0x00b4fff6
 8005404:	0036fff6 	.word	0x0036fff6
 8005408:	fff6fff6 	.word	0xfff6fff6
 800540c:	0087      	.short	0x0087
 800540e:	0026      	movs	r6, r4
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	3642      	adds	r6, #66	; 0x42
 8005414:	1d11      	adds	r1, r2, #4
 8005416:	6019      	str	r1, [r3, #0]
 8005418:	6813      	ldr	r3, [r2, #0]
 800541a:	7033      	strb	r3, [r6, #0]
 800541c:	2301      	movs	r3, #1
 800541e:	e0a2      	b.n	8005566 <_printf_i+0x1c6>
 8005420:	6818      	ldr	r0, [r3, #0]
 8005422:	6809      	ldr	r1, [r1, #0]
 8005424:	1d02      	adds	r2, r0, #4
 8005426:	060d      	lsls	r5, r1, #24
 8005428:	d50b      	bpl.n	8005442 <_printf_i+0xa2>
 800542a:	6805      	ldr	r5, [r0, #0]
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	2d00      	cmp	r5, #0
 8005430:	da03      	bge.n	800543a <_printf_i+0x9a>
 8005432:	232d      	movs	r3, #45	; 0x2d
 8005434:	9a04      	ldr	r2, [sp, #16]
 8005436:	426d      	negs	r5, r5
 8005438:	7013      	strb	r3, [r2, #0]
 800543a:	4b5f      	ldr	r3, [pc, #380]	; (80055b8 <_printf_i+0x218>)
 800543c:	270a      	movs	r7, #10
 800543e:	9303      	str	r3, [sp, #12]
 8005440:	e01b      	b.n	800547a <_printf_i+0xda>
 8005442:	6805      	ldr	r5, [r0, #0]
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	0649      	lsls	r1, r1, #25
 8005448:	d5f1      	bpl.n	800542e <_printf_i+0x8e>
 800544a:	b22d      	sxth	r5, r5
 800544c:	e7ef      	b.n	800542e <_printf_i+0x8e>
 800544e:	680d      	ldr	r5, [r1, #0]
 8005450:	6819      	ldr	r1, [r3, #0]
 8005452:	1d08      	adds	r0, r1, #4
 8005454:	6018      	str	r0, [r3, #0]
 8005456:	062e      	lsls	r6, r5, #24
 8005458:	d501      	bpl.n	800545e <_printf_i+0xbe>
 800545a:	680d      	ldr	r5, [r1, #0]
 800545c:	e003      	b.n	8005466 <_printf_i+0xc6>
 800545e:	066d      	lsls	r5, r5, #25
 8005460:	d5fb      	bpl.n	800545a <_printf_i+0xba>
 8005462:	680d      	ldr	r5, [r1, #0]
 8005464:	b2ad      	uxth	r5, r5
 8005466:	4b54      	ldr	r3, [pc, #336]	; (80055b8 <_printf_i+0x218>)
 8005468:	2708      	movs	r7, #8
 800546a:	9303      	str	r3, [sp, #12]
 800546c:	2a6f      	cmp	r2, #111	; 0x6f
 800546e:	d000      	beq.n	8005472 <_printf_i+0xd2>
 8005470:	3702      	adds	r7, #2
 8005472:	0023      	movs	r3, r4
 8005474:	2200      	movs	r2, #0
 8005476:	3343      	adds	r3, #67	; 0x43
 8005478:	701a      	strb	r2, [r3, #0]
 800547a:	6863      	ldr	r3, [r4, #4]
 800547c:	60a3      	str	r3, [r4, #8]
 800547e:	2b00      	cmp	r3, #0
 8005480:	db03      	blt.n	800548a <_printf_i+0xea>
 8005482:	2104      	movs	r1, #4
 8005484:	6822      	ldr	r2, [r4, #0]
 8005486:	438a      	bics	r2, r1
 8005488:	6022      	str	r2, [r4, #0]
 800548a:	2d00      	cmp	r5, #0
 800548c:	d102      	bne.n	8005494 <_printf_i+0xf4>
 800548e:	9e04      	ldr	r6, [sp, #16]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00c      	beq.n	80054ae <_printf_i+0x10e>
 8005494:	9e04      	ldr	r6, [sp, #16]
 8005496:	0028      	movs	r0, r5
 8005498:	0039      	movs	r1, r7
 800549a:	f7fa fec5 	bl	8000228 <__aeabi_uidivmod>
 800549e:	9b03      	ldr	r3, [sp, #12]
 80054a0:	3e01      	subs	r6, #1
 80054a2:	5c5b      	ldrb	r3, [r3, r1]
 80054a4:	7033      	strb	r3, [r6, #0]
 80054a6:	002b      	movs	r3, r5
 80054a8:	0005      	movs	r5, r0
 80054aa:	429f      	cmp	r7, r3
 80054ac:	d9f3      	bls.n	8005496 <_printf_i+0xf6>
 80054ae:	2f08      	cmp	r7, #8
 80054b0:	d109      	bne.n	80054c6 <_printf_i+0x126>
 80054b2:	6823      	ldr	r3, [r4, #0]
 80054b4:	07db      	lsls	r3, r3, #31
 80054b6:	d506      	bpl.n	80054c6 <_printf_i+0x126>
 80054b8:	6862      	ldr	r2, [r4, #4]
 80054ba:	6923      	ldr	r3, [r4, #16]
 80054bc:	429a      	cmp	r2, r3
 80054be:	dc02      	bgt.n	80054c6 <_printf_i+0x126>
 80054c0:	2330      	movs	r3, #48	; 0x30
 80054c2:	3e01      	subs	r6, #1
 80054c4:	7033      	strb	r3, [r6, #0]
 80054c6:	9b04      	ldr	r3, [sp, #16]
 80054c8:	1b9b      	subs	r3, r3, r6
 80054ca:	6123      	str	r3, [r4, #16]
 80054cc:	9b07      	ldr	r3, [sp, #28]
 80054ce:	0021      	movs	r1, r4
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	9805      	ldr	r0, [sp, #20]
 80054d4:	9b06      	ldr	r3, [sp, #24]
 80054d6:	aa09      	add	r2, sp, #36	; 0x24
 80054d8:	f7ff fef2 	bl	80052c0 <_printf_common>
 80054dc:	3001      	adds	r0, #1
 80054de:	d147      	bne.n	8005570 <_printf_i+0x1d0>
 80054e0:	2001      	movs	r0, #1
 80054e2:	4240      	negs	r0, r0
 80054e4:	b00b      	add	sp, #44	; 0x2c
 80054e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054e8:	2220      	movs	r2, #32
 80054ea:	6809      	ldr	r1, [r1, #0]
 80054ec:	430a      	orrs	r2, r1
 80054ee:	6022      	str	r2, [r4, #0]
 80054f0:	2278      	movs	r2, #120	; 0x78
 80054f2:	4932      	ldr	r1, [pc, #200]	; (80055bc <_printf_i+0x21c>)
 80054f4:	9103      	str	r1, [sp, #12]
 80054f6:	0021      	movs	r1, r4
 80054f8:	3145      	adds	r1, #69	; 0x45
 80054fa:	700a      	strb	r2, [r1, #0]
 80054fc:	6819      	ldr	r1, [r3, #0]
 80054fe:	6822      	ldr	r2, [r4, #0]
 8005500:	c920      	ldmia	r1!, {r5}
 8005502:	0610      	lsls	r0, r2, #24
 8005504:	d402      	bmi.n	800550c <_printf_i+0x16c>
 8005506:	0650      	lsls	r0, r2, #25
 8005508:	d500      	bpl.n	800550c <_printf_i+0x16c>
 800550a:	b2ad      	uxth	r5, r5
 800550c:	6019      	str	r1, [r3, #0]
 800550e:	07d3      	lsls	r3, r2, #31
 8005510:	d502      	bpl.n	8005518 <_printf_i+0x178>
 8005512:	2320      	movs	r3, #32
 8005514:	4313      	orrs	r3, r2
 8005516:	6023      	str	r3, [r4, #0]
 8005518:	2710      	movs	r7, #16
 800551a:	2d00      	cmp	r5, #0
 800551c:	d1a9      	bne.n	8005472 <_printf_i+0xd2>
 800551e:	2220      	movs	r2, #32
 8005520:	6823      	ldr	r3, [r4, #0]
 8005522:	4393      	bics	r3, r2
 8005524:	6023      	str	r3, [r4, #0]
 8005526:	e7a4      	b.n	8005472 <_printf_i+0xd2>
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	680d      	ldr	r5, [r1, #0]
 800552c:	1d10      	adds	r0, r2, #4
 800552e:	6949      	ldr	r1, [r1, #20]
 8005530:	6018      	str	r0, [r3, #0]
 8005532:	6813      	ldr	r3, [r2, #0]
 8005534:	062e      	lsls	r6, r5, #24
 8005536:	d501      	bpl.n	800553c <_printf_i+0x19c>
 8005538:	6019      	str	r1, [r3, #0]
 800553a:	e002      	b.n	8005542 <_printf_i+0x1a2>
 800553c:	066d      	lsls	r5, r5, #25
 800553e:	d5fb      	bpl.n	8005538 <_printf_i+0x198>
 8005540:	8019      	strh	r1, [r3, #0]
 8005542:	2300      	movs	r3, #0
 8005544:	9e04      	ldr	r6, [sp, #16]
 8005546:	6123      	str	r3, [r4, #16]
 8005548:	e7c0      	b.n	80054cc <_printf_i+0x12c>
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	1d11      	adds	r1, r2, #4
 800554e:	6019      	str	r1, [r3, #0]
 8005550:	6816      	ldr	r6, [r2, #0]
 8005552:	2100      	movs	r1, #0
 8005554:	0030      	movs	r0, r6
 8005556:	6862      	ldr	r2, [r4, #4]
 8005558:	f000 f896 	bl	8005688 <memchr>
 800555c:	2800      	cmp	r0, #0
 800555e:	d001      	beq.n	8005564 <_printf_i+0x1c4>
 8005560:	1b80      	subs	r0, r0, r6
 8005562:	6060      	str	r0, [r4, #4]
 8005564:	6863      	ldr	r3, [r4, #4]
 8005566:	6123      	str	r3, [r4, #16]
 8005568:	2300      	movs	r3, #0
 800556a:	9a04      	ldr	r2, [sp, #16]
 800556c:	7013      	strb	r3, [r2, #0]
 800556e:	e7ad      	b.n	80054cc <_printf_i+0x12c>
 8005570:	0032      	movs	r2, r6
 8005572:	6923      	ldr	r3, [r4, #16]
 8005574:	9906      	ldr	r1, [sp, #24]
 8005576:	9805      	ldr	r0, [sp, #20]
 8005578:	9d07      	ldr	r5, [sp, #28]
 800557a:	47a8      	blx	r5
 800557c:	3001      	adds	r0, #1
 800557e:	d0af      	beq.n	80054e0 <_printf_i+0x140>
 8005580:	6823      	ldr	r3, [r4, #0]
 8005582:	079b      	lsls	r3, r3, #30
 8005584:	d415      	bmi.n	80055b2 <_printf_i+0x212>
 8005586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005588:	68e0      	ldr	r0, [r4, #12]
 800558a:	4298      	cmp	r0, r3
 800558c:	daaa      	bge.n	80054e4 <_printf_i+0x144>
 800558e:	0018      	movs	r0, r3
 8005590:	e7a8      	b.n	80054e4 <_printf_i+0x144>
 8005592:	0022      	movs	r2, r4
 8005594:	2301      	movs	r3, #1
 8005596:	9906      	ldr	r1, [sp, #24]
 8005598:	9805      	ldr	r0, [sp, #20]
 800559a:	9e07      	ldr	r6, [sp, #28]
 800559c:	3219      	adds	r2, #25
 800559e:	47b0      	blx	r6
 80055a0:	3001      	adds	r0, #1
 80055a2:	d09d      	beq.n	80054e0 <_printf_i+0x140>
 80055a4:	3501      	adds	r5, #1
 80055a6:	68e3      	ldr	r3, [r4, #12]
 80055a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055aa:	1a9b      	subs	r3, r3, r2
 80055ac:	42ab      	cmp	r3, r5
 80055ae:	dcf0      	bgt.n	8005592 <_printf_i+0x1f2>
 80055b0:	e7e9      	b.n	8005586 <_printf_i+0x1e6>
 80055b2:	2500      	movs	r5, #0
 80055b4:	e7f7      	b.n	80055a6 <_printf_i+0x206>
 80055b6:	46c0      	nop			; (mov r8, r8)
 80055b8:	08005855 	.word	0x08005855
 80055bc:	08005866 	.word	0x08005866

080055c0 <__malloc_lock>:
 80055c0:	b510      	push	{r4, lr}
 80055c2:	4802      	ldr	r0, [pc, #8]	; (80055cc <__malloc_lock+0xc>)
 80055c4:	f7ff fc74 	bl	8004eb0 <__retarget_lock_acquire_recursive>
 80055c8:	bd10      	pop	{r4, pc}
 80055ca:	46c0      	nop			; (mov r8, r8)
 80055cc:	2000086c 	.word	0x2000086c

080055d0 <__malloc_unlock>:
 80055d0:	b510      	push	{r4, lr}
 80055d2:	4802      	ldr	r0, [pc, #8]	; (80055dc <__malloc_unlock+0xc>)
 80055d4:	f7ff fc6d 	bl	8004eb2 <__retarget_lock_release_recursive>
 80055d8:	bd10      	pop	{r4, pc}
 80055da:	46c0      	nop			; (mov r8, r8)
 80055dc:	2000086c 	.word	0x2000086c

080055e0 <_realloc_r>:
 80055e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055e2:	0007      	movs	r7, r0
 80055e4:	000e      	movs	r6, r1
 80055e6:	0014      	movs	r4, r2
 80055e8:	2900      	cmp	r1, #0
 80055ea:	d105      	bne.n	80055f8 <_realloc_r+0x18>
 80055ec:	0011      	movs	r1, r2
 80055ee:	f7ff fde5 	bl	80051bc <_malloc_r>
 80055f2:	0005      	movs	r5, r0
 80055f4:	0028      	movs	r0, r5
 80055f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80055f8:	2a00      	cmp	r2, #0
 80055fa:	d103      	bne.n	8005604 <_realloc_r+0x24>
 80055fc:	f000 f858 	bl	80056b0 <_free_r>
 8005600:	0025      	movs	r5, r4
 8005602:	e7f7      	b.n	80055f4 <_realloc_r+0x14>
 8005604:	f000 f89e 	bl	8005744 <_malloc_usable_size_r>
 8005608:	9001      	str	r0, [sp, #4]
 800560a:	4284      	cmp	r4, r0
 800560c:	d803      	bhi.n	8005616 <_realloc_r+0x36>
 800560e:	0035      	movs	r5, r6
 8005610:	0843      	lsrs	r3, r0, #1
 8005612:	42a3      	cmp	r3, r4
 8005614:	d3ee      	bcc.n	80055f4 <_realloc_r+0x14>
 8005616:	0021      	movs	r1, r4
 8005618:	0038      	movs	r0, r7
 800561a:	f7ff fdcf 	bl	80051bc <_malloc_r>
 800561e:	1e05      	subs	r5, r0, #0
 8005620:	d0e8      	beq.n	80055f4 <_realloc_r+0x14>
 8005622:	9b01      	ldr	r3, [sp, #4]
 8005624:	0022      	movs	r2, r4
 8005626:	429c      	cmp	r4, r3
 8005628:	d900      	bls.n	800562c <_realloc_r+0x4c>
 800562a:	001a      	movs	r2, r3
 800562c:	0031      	movs	r1, r6
 800562e:	0028      	movs	r0, r5
 8005630:	f000 f835 	bl	800569e <memcpy>
 8005634:	0031      	movs	r1, r6
 8005636:	0038      	movs	r0, r7
 8005638:	f000 f83a 	bl	80056b0 <_free_r>
 800563c:	e7da      	b.n	80055f4 <_realloc_r+0x14>

0800563e <memmove>:
 800563e:	b510      	push	{r4, lr}
 8005640:	4288      	cmp	r0, r1
 8005642:	d902      	bls.n	800564a <memmove+0xc>
 8005644:	188b      	adds	r3, r1, r2
 8005646:	4298      	cmp	r0, r3
 8005648:	d303      	bcc.n	8005652 <memmove+0x14>
 800564a:	2300      	movs	r3, #0
 800564c:	e007      	b.n	800565e <memmove+0x20>
 800564e:	5c8b      	ldrb	r3, [r1, r2]
 8005650:	5483      	strb	r3, [r0, r2]
 8005652:	3a01      	subs	r2, #1
 8005654:	d2fb      	bcs.n	800564e <memmove+0x10>
 8005656:	bd10      	pop	{r4, pc}
 8005658:	5ccc      	ldrb	r4, [r1, r3]
 800565a:	54c4      	strb	r4, [r0, r3]
 800565c:	3301      	adds	r3, #1
 800565e:	429a      	cmp	r2, r3
 8005660:	d1fa      	bne.n	8005658 <memmove+0x1a>
 8005662:	e7f8      	b.n	8005656 <memmove+0x18>

08005664 <_sbrk_r>:
 8005664:	2300      	movs	r3, #0
 8005666:	b570      	push	{r4, r5, r6, lr}
 8005668:	4d06      	ldr	r5, [pc, #24]	; (8005684 <_sbrk_r+0x20>)
 800566a:	0004      	movs	r4, r0
 800566c:	0008      	movs	r0, r1
 800566e:	602b      	str	r3, [r5, #0]
 8005670:	f7fb fea0 	bl	80013b4 <_sbrk>
 8005674:	1c43      	adds	r3, r0, #1
 8005676:	d103      	bne.n	8005680 <_sbrk_r+0x1c>
 8005678:	682b      	ldr	r3, [r5, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d000      	beq.n	8005680 <_sbrk_r+0x1c>
 800567e:	6023      	str	r3, [r4, #0]
 8005680:	bd70      	pop	{r4, r5, r6, pc}
 8005682:	46c0      	nop			; (mov r8, r8)
 8005684:	20000878 	.word	0x20000878

08005688 <memchr>:
 8005688:	b2c9      	uxtb	r1, r1
 800568a:	1882      	adds	r2, r0, r2
 800568c:	4290      	cmp	r0, r2
 800568e:	d101      	bne.n	8005694 <memchr+0xc>
 8005690:	2000      	movs	r0, #0
 8005692:	4770      	bx	lr
 8005694:	7803      	ldrb	r3, [r0, #0]
 8005696:	428b      	cmp	r3, r1
 8005698:	d0fb      	beq.n	8005692 <memchr+0xa>
 800569a:	3001      	adds	r0, #1
 800569c:	e7f6      	b.n	800568c <memchr+0x4>

0800569e <memcpy>:
 800569e:	2300      	movs	r3, #0
 80056a0:	b510      	push	{r4, lr}
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d100      	bne.n	80056a8 <memcpy+0xa>
 80056a6:	bd10      	pop	{r4, pc}
 80056a8:	5ccc      	ldrb	r4, [r1, r3]
 80056aa:	54c4      	strb	r4, [r0, r3]
 80056ac:	3301      	adds	r3, #1
 80056ae:	e7f8      	b.n	80056a2 <memcpy+0x4>

080056b0 <_free_r>:
 80056b0:	b570      	push	{r4, r5, r6, lr}
 80056b2:	0005      	movs	r5, r0
 80056b4:	2900      	cmp	r1, #0
 80056b6:	d010      	beq.n	80056da <_free_r+0x2a>
 80056b8:	1f0c      	subs	r4, r1, #4
 80056ba:	6823      	ldr	r3, [r4, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	da00      	bge.n	80056c2 <_free_r+0x12>
 80056c0:	18e4      	adds	r4, r4, r3
 80056c2:	0028      	movs	r0, r5
 80056c4:	f7ff ff7c 	bl	80055c0 <__malloc_lock>
 80056c8:	4a1d      	ldr	r2, [pc, #116]	; (8005740 <_free_r+0x90>)
 80056ca:	6813      	ldr	r3, [r2, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d105      	bne.n	80056dc <_free_r+0x2c>
 80056d0:	6063      	str	r3, [r4, #4]
 80056d2:	6014      	str	r4, [r2, #0]
 80056d4:	0028      	movs	r0, r5
 80056d6:	f7ff ff7b 	bl	80055d0 <__malloc_unlock>
 80056da:	bd70      	pop	{r4, r5, r6, pc}
 80056dc:	42a3      	cmp	r3, r4
 80056de:	d908      	bls.n	80056f2 <_free_r+0x42>
 80056e0:	6820      	ldr	r0, [r4, #0]
 80056e2:	1821      	adds	r1, r4, r0
 80056e4:	428b      	cmp	r3, r1
 80056e6:	d1f3      	bne.n	80056d0 <_free_r+0x20>
 80056e8:	6819      	ldr	r1, [r3, #0]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	1809      	adds	r1, r1, r0
 80056ee:	6021      	str	r1, [r4, #0]
 80056f0:	e7ee      	b.n	80056d0 <_free_r+0x20>
 80056f2:	001a      	movs	r2, r3
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d001      	beq.n	80056fe <_free_r+0x4e>
 80056fa:	42a3      	cmp	r3, r4
 80056fc:	d9f9      	bls.n	80056f2 <_free_r+0x42>
 80056fe:	6811      	ldr	r1, [r2, #0]
 8005700:	1850      	adds	r0, r2, r1
 8005702:	42a0      	cmp	r0, r4
 8005704:	d10b      	bne.n	800571e <_free_r+0x6e>
 8005706:	6820      	ldr	r0, [r4, #0]
 8005708:	1809      	adds	r1, r1, r0
 800570a:	1850      	adds	r0, r2, r1
 800570c:	6011      	str	r1, [r2, #0]
 800570e:	4283      	cmp	r3, r0
 8005710:	d1e0      	bne.n	80056d4 <_free_r+0x24>
 8005712:	6818      	ldr	r0, [r3, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	1841      	adds	r1, r0, r1
 8005718:	6011      	str	r1, [r2, #0]
 800571a:	6053      	str	r3, [r2, #4]
 800571c:	e7da      	b.n	80056d4 <_free_r+0x24>
 800571e:	42a0      	cmp	r0, r4
 8005720:	d902      	bls.n	8005728 <_free_r+0x78>
 8005722:	230c      	movs	r3, #12
 8005724:	602b      	str	r3, [r5, #0]
 8005726:	e7d5      	b.n	80056d4 <_free_r+0x24>
 8005728:	6820      	ldr	r0, [r4, #0]
 800572a:	1821      	adds	r1, r4, r0
 800572c:	428b      	cmp	r3, r1
 800572e:	d103      	bne.n	8005738 <_free_r+0x88>
 8005730:	6819      	ldr	r1, [r3, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	1809      	adds	r1, r1, r0
 8005736:	6021      	str	r1, [r4, #0]
 8005738:	6063      	str	r3, [r4, #4]
 800573a:	6054      	str	r4, [r2, #4]
 800573c:	e7ca      	b.n	80056d4 <_free_r+0x24>
 800573e:	46c0      	nop			; (mov r8, r8)
 8005740:	20000870 	.word	0x20000870

08005744 <_malloc_usable_size_r>:
 8005744:	1f0b      	subs	r3, r1, #4
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	1f18      	subs	r0, r3, #4
 800574a:	2b00      	cmp	r3, #0
 800574c:	da01      	bge.n	8005752 <_malloc_usable_size_r+0xe>
 800574e:	580b      	ldr	r3, [r1, r0]
 8005750:	18c0      	adds	r0, r0, r3
 8005752:	4770      	bx	lr

08005754 <_init>:
 8005754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005756:	46c0      	nop			; (mov r8, r8)
 8005758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800575a:	bc08      	pop	{r3}
 800575c:	469e      	mov	lr, r3
 800575e:	4770      	bx	lr

08005760 <_fini>:
 8005760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005762:	46c0      	nop			; (mov r8, r8)
 8005764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005766:	bc08      	pop	{r3}
 8005768:	469e      	mov	lr, r3
 800576a:	4770      	bx	lr
