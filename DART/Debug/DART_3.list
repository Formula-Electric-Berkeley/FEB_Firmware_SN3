
DART_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005658  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08005718  08005718  00006718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057dc  080057dc  0000705c  2**0
                  CONTENTS
  4 .ARM          00000000  080057dc  080057dc  0000705c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057dc  080057dc  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057dc  080057dc  000067dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057e0  080057e0  000067e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080057e4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  2000005c  08005840  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  08005840  00007438  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001041f  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000254c  00000000  00000000  000174a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e98  00000000  00000000  000199f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b6a  00000000  00000000  0001a888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002727  00000000  00000000  0001b3f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011dce  00000000  00000000  0001db19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094932  00000000  00000000  0002f8e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4219  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000390c  00000000  00000000  000c425c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000c7b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005700 	.word	0x08005700

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08005700 	.word	0x08005700

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <FEB_Fan_Init>:


uint8_t counter = 0;
// ********************************** Initialize **********************************

void FEB_Fan_Init(){
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0

	FEB_Fan_PWM_Init();
 8000238:	f000 f806 	bl	8000248 <FEB_Fan_PWM_Init>
	FEB_Fan_All_Speed_Set(255 * 0);
 800023c:	2000      	movs	r0, #0
 800023e:	f000 f825 	bl	800028c <FEB_Fan_All_Speed_Set>



	//FEB_PID_Init_All();

}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}

08000248 <FEB_Fan_PWM_Init>:
	float new_PWM = FEB_PID_Update(&FEB_Fan_5_PID, setpoint, tachometer_reading);
	FEB_Fan_5_Speed_Set(new_PWM);
}

// ********************************** PWM **********************************
void FEB_Fan_PWM_Init(void) {
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800024c:	4b0d      	ldr	r3, [pc, #52]	@ (8000284 <FEB_Fan_PWM_Init+0x3c>)
 800024e:	2100      	movs	r1, #0
 8000250:	0018      	movs	r0, r3
 8000252:	f002 fafb 	bl	800284c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000256:	4b0b      	ldr	r3, [pc, #44]	@ (8000284 <FEB_Fan_PWM_Init+0x3c>)
 8000258:	2104      	movs	r1, #4
 800025a:	0018      	movs	r0, r3
 800025c:	f002 faf6 	bl	800284c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000260:	4b08      	ldr	r3, [pc, #32]	@ (8000284 <FEB_Fan_PWM_Init+0x3c>)
 8000262:	2108      	movs	r1, #8
 8000264:	0018      	movs	r0, r3
 8000266:	f002 faf1 	bl	800284c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800026a:	4b07      	ldr	r3, [pc, #28]	@ (8000288 <FEB_Fan_PWM_Init+0x40>)
 800026c:	2104      	movs	r1, #4
 800026e:	0018      	movs	r0, r3
 8000270:	f002 faec 	bl	800284c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000274:	4b04      	ldr	r3, [pc, #16]	@ (8000288 <FEB_Fan_PWM_Init+0x40>)
 8000276:	2100      	movs	r1, #0
 8000278:	0018      	movs	r0, r3
 800027a:	f002 fae7 	bl	800284c <HAL_TIM_PWM_Start>
}
 800027e:	46c0      	nop			@ (mov r8, r8)
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000140 	.word	0x20000140
 8000288:	200001d0 	.word	0x200001d0

0800028c <FEB_Fan_All_Speed_Set>:

void FEB_Fan_All_Speed_Set(uint8_t speed) {
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	0002      	movs	r2, r0
 8000294:	1dfb      	adds	r3, r7, #7
 8000296:	701a      	strb	r2, [r3, #0]
	FEB_Fan_1_Speed_Set(speed);
 8000298:	1dfb      	adds	r3, r7, #7
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	0018      	movs	r0, r3
 800029e:	f000 f819 	bl	80002d4 <FEB_Fan_1_Speed_Set>
	FEB_Fan_2_Speed_Set(speed);
 80002a2:	1dfb      	adds	r3, r7, #7
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	0018      	movs	r0, r3
 80002a8:	f000 f82c 	bl	8000304 <FEB_Fan_2_Speed_Set>
	FEB_Fan_3_Speed_Set(speed);
 80002ac:	1dfb      	adds	r3, r7, #7
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	0018      	movs	r0, r3
 80002b2:	f000 f83f 	bl	8000334 <FEB_Fan_3_Speed_Set>
	FEB_Fan_4_Speed_Set(speed);
 80002b6:	1dfb      	adds	r3, r7, #7
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	0018      	movs	r0, r3
 80002bc:	f000 f852 	bl	8000364 <FEB_Fan_4_Speed_Set>
	FEB_Fan_5_Speed_Set(speed);
 80002c0:	1dfb      	adds	r3, r7, #7
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 f865 	bl	8000394 <FEB_Fan_5_Speed_Set>
}
 80002ca:	46c0      	nop			@ (mov r8, r8)
 80002cc:	46bd      	mov	sp, r7
 80002ce:	b002      	add	sp, #8
 80002d0:	bd80      	pop	{r7, pc}
	...

080002d4 <FEB_Fan_1_Speed_Set>:

void FEB_Fan_1_Speed_Set(uint8_t speed) {
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	0002      	movs	r2, r0
 80002dc:	1dfb      	adds	r3, r7, #7
 80002de:	701a      	strb	r2, [r3, #0]
	FEB_Fan_1_Speed = speed;
 80002e0:	4b06      	ldr	r3, [pc, #24]	@ (80002fc <FEB_Fan_1_Speed_Set+0x28>)
 80002e2:	1dfa      	adds	r2, r7, #7
 80002e4:	7812      	ldrb	r2, [r2, #0]
 80002e6:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, FEB_Fan_1_Speed);
 80002e8:	4b04      	ldr	r3, [pc, #16]	@ (80002fc <FEB_Fan_1_Speed_Set+0x28>)
 80002ea:	781a      	ldrb	r2, [r3, #0]
 80002ec:	4b04      	ldr	r3, [pc, #16]	@ (8000300 <FEB_Fan_1_Speed_Set+0x2c>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80002f2:	46c0      	nop			@ (mov r8, r8)
 80002f4:	46bd      	mov	sp, r7
 80002f6:	b002      	add	sp, #8
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	46c0      	nop			@ (mov r8, r8)
 80002fc:	20000078 	.word	0x20000078
 8000300:	20000140 	.word	0x20000140

08000304 <FEB_Fan_2_Speed_Set>:

void FEB_Fan_2_Speed_Set(uint8_t speed) {
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	0002      	movs	r2, r0
 800030c:	1dfb      	adds	r3, r7, #7
 800030e:	701a      	strb	r2, [r3, #0]
	FEB_Fan_2_Speed = speed;
 8000310:	4b06      	ldr	r3, [pc, #24]	@ (800032c <FEB_Fan_2_Speed_Set+0x28>)
 8000312:	1dfa      	adds	r2, r7, #7
 8000314:	7812      	ldrb	r2, [r2, #0]
 8000316:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, FEB_Fan_2_Speed);
 8000318:	4b04      	ldr	r3, [pc, #16]	@ (800032c <FEB_Fan_2_Speed_Set+0x28>)
 800031a:	781a      	ldrb	r2, [r3, #0]
 800031c:	4b04      	ldr	r3, [pc, #16]	@ (8000330 <FEB_Fan_2_Speed_Set+0x2c>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000322:	46c0      	nop			@ (mov r8, r8)
 8000324:	46bd      	mov	sp, r7
 8000326:	b002      	add	sp, #8
 8000328:	bd80      	pop	{r7, pc}
 800032a:	46c0      	nop			@ (mov r8, r8)
 800032c:	20000079 	.word	0x20000079
 8000330:	20000140 	.word	0x20000140

08000334 <FEB_Fan_3_Speed_Set>:

void FEB_Fan_3_Speed_Set(uint8_t speed) {
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	0002      	movs	r2, r0
 800033c:	1dfb      	adds	r3, r7, #7
 800033e:	701a      	strb	r2, [r3, #0]
	FEB_Fan_3_Speed = speed;
 8000340:	4b06      	ldr	r3, [pc, #24]	@ (800035c <FEB_Fan_3_Speed_Set+0x28>)
 8000342:	1dfa      	adds	r2, r7, #7
 8000344:	7812      	ldrb	r2, [r2, #0]
 8000346:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, FEB_Fan_3_Speed);
 8000348:	4b04      	ldr	r3, [pc, #16]	@ (800035c <FEB_Fan_3_Speed_Set+0x28>)
 800034a:	781a      	ldrb	r2, [r3, #0]
 800034c:	4b04      	ldr	r3, [pc, #16]	@ (8000360 <FEB_Fan_3_Speed_Set+0x2c>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000352:	46c0      	nop			@ (mov r8, r8)
 8000354:	46bd      	mov	sp, r7
 8000356:	b002      	add	sp, #8
 8000358:	bd80      	pop	{r7, pc}
 800035a:	46c0      	nop			@ (mov r8, r8)
 800035c:	2000007a 	.word	0x2000007a
 8000360:	20000140 	.word	0x20000140

08000364 <FEB_Fan_4_Speed_Set>:

void FEB_Fan_4_Speed_Set(uint8_t speed) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	0002      	movs	r2, r0
 800036c:	1dfb      	adds	r3, r7, #7
 800036e:	701a      	strb	r2, [r3, #0]
	FEB_Fan_4_Speed = speed;
 8000370:	4b06      	ldr	r3, [pc, #24]	@ (800038c <FEB_Fan_4_Speed_Set+0x28>)
 8000372:	1dfa      	adds	r2, r7, #7
 8000374:	7812      	ldrb	r2, [r2, #0]
 8000376:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, FEB_Fan_4_Speed);
 8000378:	4b04      	ldr	r3, [pc, #16]	@ (800038c <FEB_Fan_4_Speed_Set+0x28>)
 800037a:	781a      	ldrb	r2, [r3, #0]
 800037c:	4b04      	ldr	r3, [pc, #16]	@ (8000390 <FEB_Fan_4_Speed_Set+0x2c>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000382:	46c0      	nop			@ (mov r8, r8)
 8000384:	46bd      	mov	sp, r7
 8000386:	b002      	add	sp, #8
 8000388:	bd80      	pop	{r7, pc}
 800038a:	46c0      	nop			@ (mov r8, r8)
 800038c:	2000007b 	.word	0x2000007b
 8000390:	200001d0 	.word	0x200001d0

08000394 <FEB_Fan_5_Speed_Set>:

void FEB_Fan_5_Speed_Set(uint8_t speed) {
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	0002      	movs	r2, r0
 800039c:	1dfb      	adds	r3, r7, #7
 800039e:	701a      	strb	r2, [r3, #0]
	FEB_Fan_5_Speed = speed;
 80003a0:	4b06      	ldr	r3, [pc, #24]	@ (80003bc <FEB_Fan_5_Speed_Set+0x28>)
 80003a2:	1dfa      	adds	r2, r7, #7
 80003a4:	7812      	ldrb	r2, [r2, #0]
 80003a6:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, FEB_Fan_5_Speed);
 80003a8:	4b04      	ldr	r3, [pc, #16]	@ (80003bc <FEB_Fan_5_Speed_Set+0x28>)
 80003aa:	781a      	ldrb	r2, [r3, #0]
 80003ac:	4b04      	ldr	r3, [pc, #16]	@ (80003c0 <FEB_Fan_5_Speed_Set+0x2c>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80003b2:	46c0      	nop			@ (mov r8, r8)
 80003b4:	46bd      	mov	sp, r7
 80003b6:	b002      	add	sp, #8
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	46c0      	nop			@ (mov r8, r8)
 80003bc:	2000007c 	.word	0x2000007c
 80003c0:	200001d0 	.word	0x200001d0

080003c4 <FEB_Init>:

char uart_tx_buffer[5];
uint32_t tach_val;


void FEB_Init(void){
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
	//FEB_CAN_Init();
	//FEB_ADC_Init();
	FEB_Fan_Init();
 80003c8:	f7ff ff34 	bl	8000234 <FEB_Fan_Init>
	//HAL_TIM_IC_Start_IT(&htim16, TIM_CHANNEL_1);
	//HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);

}
 80003cc:	46c0      	nop			@ (mov r8, r8)
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
	...

080003d4 <FEB_Main_Loop>:

void FEB_Main_Loop(void){
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0


		FEB_Fan_3_Speed_Set(255 * 0.2);
 80003d8:	2033      	movs	r0, #51	@ 0x33
 80003da:	f7ff ffab 	bl	8000334 <FEB_Fan_3_Speed_Set>
		FEB_Fan_5_Speed_Set(255 * 0.3);
 80003de:	204c      	movs	r0, #76	@ 0x4c
 80003e0:	f7ff ffd8 	bl	8000394 <FEB_Fan_5_Speed_Set>


		//start fan 5 reading
		 sprintf(gu8_MSGG, "Starting 5");
 80003e4:	4a38      	ldr	r2, [pc, #224]	@ (80004c8 <FEB_Main_Loop+0xf4>)
 80003e6:	4b39      	ldr	r3, [pc, #228]	@ (80004cc <FEB_Main_Loop+0xf8>)
 80003e8:	0011      	movs	r1, r2
 80003ea:	0018      	movs	r0, r3
 80003ec:	f004 fcea 	bl	8004dc4 <siprintf>
		 HAL_UART_Transmit(&huart2, gu8_MSGG, sizeof(gu8_MSGG), 100);
 80003f0:	4936      	ldr	r1, [pc, #216]	@ (80004cc <FEB_Main_Loop+0xf8>)
 80003f2:	4837      	ldr	r0, [pc, #220]	@ (80004d0 <FEB_Main_Loop+0xfc>)
 80003f4:	2364      	movs	r3, #100	@ 0x64
 80003f6:	2240      	movs	r2, #64	@ 0x40
 80003f8:	f003 fd94 	bl	8003f24 <HAL_UART_Transmit>

		 HAL_Delay(1000);
 80003fc:	23fa      	movs	r3, #250	@ 0xfa
 80003fe:	009b      	lsls	r3, r3, #2
 8000400:	0018      	movs	r0, r3
 8000402:	f000 ffe9 	bl	80013d8 <HAL_Delay>

	  if (HAL_TIM_Base_Start_IT(&htim14) != HAL_OK)
 8000406:	4b33      	ldr	r3, [pc, #204]	@ (80004d4 <FEB_Main_Loop+0x100>)
 8000408:	0018      	movs	r0, r3
 800040a:	f002 f94d 	bl	80026a8 <HAL_TIM_Base_Start_IT>
 800040e:	1e03      	subs	r3, r0, #0
 8000410:	d001      	beq.n	8000416 <FEB_Main_Loop+0x42>
		  		    {
		  		      /* Starting Error */
		  		      Error_Handler();
 8000412:	f000 fc51 	bl	8000cb8 <Error_Handler>
		  		    }

	  if (HAL_TIM_IC_Start_IT(&htim14, TIM_CHANNEL_1) != HAL_OK)
 8000416:	4b2f      	ldr	r3, [pc, #188]	@ (80004d4 <FEB_Main_Loop+0x100>)
 8000418:	2100      	movs	r1, #0
 800041a:	0018      	movs	r0, r3
 800041c:	f002 fb1a 	bl	8002a54 <HAL_TIM_IC_Start_IT>
 8000420:	1e03      	subs	r3, r0, #0
 8000422:	d001      	beq.n	8000428 <FEB_Main_Loop+0x54>
	  {
	 	      /* Starting Error */
	 	      Error_Handler();
 8000424:	f000 fc48 	bl	8000cb8 <Error_Handler>
	 	    }

	HAL_Delay(10000);
 8000428:	4b2b      	ldr	r3, [pc, #172]	@ (80004d8 <FEB_Main_Loop+0x104>)
 800042a:	0018      	movs	r0, r3
 800042c:	f000 ffd4 	bl	80013d8 <HAL_Delay>

	  if (HAL_TIM_IC_Stop_IT(&htim14, TIM_CHANNEL_1) != HAL_OK)
 8000430:	4b28      	ldr	r3, [pc, #160]	@ (80004d4 <FEB_Main_Loop+0x100>)
 8000432:	2100      	movs	r1, #0
 8000434:	0018      	movs	r0, r3
 8000436:	f002 fc15 	bl	8002c64 <HAL_TIM_IC_Stop_IT>
 800043a:	1e03      	subs	r3, r0, #0
 800043c:	d001      	beq.n	8000442 <FEB_Main_Loop+0x6e>
	  {
	 	      /* Starting Error */
	 	      Error_Handler();
 800043e:	f000 fc3b 	bl	8000cb8 <Error_Handler>
	 	    }

		  if (HAL_TIM_Base_Stop_IT(&htim14) != HAL_OK)
 8000442:	4b24      	ldr	r3, [pc, #144]	@ (80004d4 <FEB_Main_Loop+0x100>)
 8000444:	0018      	movs	r0, r3
 8000446:	f002 f97b 	bl	8002740 <HAL_TIM_Base_Stop_IT>
 800044a:	1e03      	subs	r3, r0, #0
 800044c:	d001      	beq.n	8000452 <FEB_Main_Loop+0x7e>
		    {
		      /* Starting Error */
		      Error_Handler();
 800044e:	f000 fc33 	bl	8000cb8 <Error_Handler>
		    }


		//end fan 5 reading

		 sprintf(gu8_MSGG, "Starting 3");
 8000452:	4a22      	ldr	r2, [pc, #136]	@ (80004dc <FEB_Main_Loop+0x108>)
 8000454:	4b1d      	ldr	r3, [pc, #116]	@ (80004cc <FEB_Main_Loop+0xf8>)
 8000456:	0011      	movs	r1, r2
 8000458:	0018      	movs	r0, r3
 800045a:	f004 fcb3 	bl	8004dc4 <siprintf>
		 HAL_UART_Transmit(&huart2, gu8_MSGG, sizeof(gu8_MSGG), 100);
 800045e:	491b      	ldr	r1, [pc, #108]	@ (80004cc <FEB_Main_Loop+0xf8>)
 8000460:	481b      	ldr	r0, [pc, #108]	@ (80004d0 <FEB_Main_Loop+0xfc>)
 8000462:	2364      	movs	r3, #100	@ 0x64
 8000464:	2240      	movs	r2, #64	@ 0x40
 8000466:	f003 fd5d 	bl	8003f24 <HAL_UART_Transmit>
		HAL_Delay(1000);
 800046a:	23fa      	movs	r3, #250	@ 0xfa
 800046c:	009b      	lsls	r3, r3, #2
 800046e:	0018      	movs	r0, r3
 8000470:	f000 ffb2 	bl	80013d8 <HAL_Delay>

		//start fan 3 reading

		if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 8000474:	4b1a      	ldr	r3, [pc, #104]	@ (80004e0 <FEB_Main_Loop+0x10c>)
 8000476:	0018      	movs	r0, r3
 8000478:	f002 f916 	bl	80026a8 <HAL_TIM_Base_Start_IT>
 800047c:	1e03      	subs	r3, r0, #0
 800047e:	d001      	beq.n	8000484 <FEB_Main_Loop+0xb0>
				  		    {
				  		      /* Starting Error */
				  		      Error_Handler();
 8000480:	f000 fc1a 	bl	8000cb8 <Error_Handler>
				  		    }

		  if (HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1) != HAL_OK)
 8000484:	4b16      	ldr	r3, [pc, #88]	@ (80004e0 <FEB_Main_Loop+0x10c>)
 8000486:	2100      	movs	r1, #0
 8000488:	0018      	movs	r0, r3
 800048a:	f002 fae3 	bl	8002a54 <HAL_TIM_IC_Start_IT>
 800048e:	1e03      	subs	r3, r0, #0
 8000490:	d001      	beq.n	8000496 <FEB_Main_Loop+0xc2>
		  {
				  /* Starting Error */
				  Error_Handler();
 8000492:	f000 fc11 	bl	8000cb8 <Error_Handler>
				}

		HAL_Delay(10000);
 8000496:	4b10      	ldr	r3, [pc, #64]	@ (80004d8 <FEB_Main_Loop+0x104>)
 8000498:	0018      	movs	r0, r3
 800049a:	f000 ff9d 	bl	80013d8 <HAL_Delay>

		  if (HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1) != HAL_OK)
 800049e:	4b10      	ldr	r3, [pc, #64]	@ (80004e0 <FEB_Main_Loop+0x10c>)
 80004a0:	2100      	movs	r1, #0
 80004a2:	0018      	movs	r0, r3
 80004a4:	f002 fbde 	bl	8002c64 <HAL_TIM_IC_Stop_IT>
 80004a8:	1e03      	subs	r3, r0, #0
 80004aa:	d001      	beq.n	80004b0 <FEB_Main_Loop+0xdc>
		  {
				  /* Starting Error */
				  Error_Handler();
 80004ac:	f000 fc04 	bl	8000cb8 <Error_Handler>
				}

		  if (HAL_TIM_Base_Stop_IT(&htim2) != HAL_OK)
 80004b0:	4b0b      	ldr	r3, [pc, #44]	@ (80004e0 <FEB_Main_Loop+0x10c>)
 80004b2:	0018      	movs	r0, r3
 80004b4:	f002 f944 	bl	8002740 <HAL_TIM_Base_Stop_IT>
 80004b8:	1e03      	subs	r3, r0, #0
 80004ba:	d001      	beq.n	80004c0 <FEB_Main_Loop+0xec>
			{
			  /* Starting Error */
			  Error_Handler();
 80004bc:	f000 fbfc 	bl	8000cb8 <Error_Handler>
//	sprintf(uart_tx_buffer, "%lu\n", tach_val);
//	HAL_UART_Transmit(&huart2, (uint8_t *)uart_tx_buffer, sizeof(uart_tx_buffer), HAL_MAX_DELAY);

//HAL_Delay(1000);

}
 80004c0:	46c0      	nop			@ (mov r8, r8)
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	46c0      	nop			@ (mov r8, r8)
 80004c8:	08005718 	.word	0x08005718
 80004cc:	20000080 	.word	0x20000080
 80004d0:	20000260 	.word	0x20000260
 80004d4:	20000218 	.word	0x20000218
 80004d8:	00002710 	.word	0x00002710
 80004dc:	08005724 	.word	0x08005724
 80004e0:	20000188 	.word	0x20000188

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f000 ff12 	bl	8001310 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f828 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 fb26 	bl	8000b40 <MX_GPIO_Init>
  MX_TIM1_Init();
 80004f4:	f000 f8a2 	bl	800063c <MX_TIM1_Init>
  MX_TIM2_Init();
 80004f8:	f000 f96a 	bl	80007d0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80004fc:	f000 faf0 	bl	8000ae0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000500:	f000 f9ea 	bl	80008d8 <MX_TIM3_Init>
  MX_CAN_Init();
 8000504:	f000 f864 	bl	80005d0 <MX_CAN_Init>
  MX_TIM14_Init();
 8000508:	f000 faa0 	bl	8000a4c <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //FEB_Fan_Init();


  sprintf(gu8_MSG, "Init", gu32_T1);
 800050c:	4b08      	ldr	r3, [pc, #32]	@ (8000530 <main+0x4c>)
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	4908      	ldr	r1, [pc, #32]	@ (8000534 <main+0x50>)
 8000512:	4b09      	ldr	r3, [pc, #36]	@ (8000538 <main+0x54>)
 8000514:	0018      	movs	r0, r3
 8000516:	f004 fc55 	bl	8004dc4 <siprintf>
  HAL_UART_Transmit(&huart2, gu8_MSG, sizeof(gu8_MSG), 10);
 800051a:	4907      	ldr	r1, [pc, #28]	@ (8000538 <main+0x54>)
 800051c:	4807      	ldr	r0, [pc, #28]	@ (800053c <main+0x58>)
 800051e:	230a      	movs	r3, #10
 8000520:	2240      	movs	r2, #64	@ 0x40
 8000522:	f003 fcff 	bl	8003f24 <HAL_UART_Transmit>
//
//  //HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
//
//  //HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
//  HAL_TIM_IC_Start_IT(&htim14, TIM_CHANNEL_1);
  FEB_Init();
 8000526:	f7ff ff4d 	bl	80003c4 <FEB_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
	 FEB_Main_Loop();
 800052a:	f7ff ff53 	bl	80003d4 <FEB_Main_Loop>
 800052e:	e7fc      	b.n	800052a <main+0x46>
 8000530:	20000104 	.word	0x20000104
 8000534:	08005730 	.word	0x08005730
 8000538:	200000c4 	.word	0x200000c4
 800053c:	20000260 	.word	0x20000260

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b590      	push	{r4, r7, lr}
 8000542:	b093      	sub	sp, #76	@ 0x4c
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	2414      	movs	r4, #20
 8000548:	193b      	adds	r3, r7, r4
 800054a:	0018      	movs	r0, r3
 800054c:	2334      	movs	r3, #52	@ 0x34
 800054e:	001a      	movs	r2, r3
 8000550:	2100      	movs	r1, #0
 8000552:	f004 fc57 	bl	8004e04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	0018      	movs	r0, r3
 800055a:	2310      	movs	r3, #16
 800055c:	001a      	movs	r2, r3
 800055e:	2100      	movs	r1, #0
 8000560:	f004 fc50 	bl	8004e04 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000564:	0021      	movs	r1, r4
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2202      	movs	r2, #2
 800056a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2201      	movs	r2, #1
 8000570:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2210      	movs	r2, #16
 8000576:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2200      	movs	r2, #0
 800057c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057e:	187b      	adds	r3, r7, r1
 8000580:	0018      	movs	r0, r3
 8000582:	f001 fb0f 	bl	8001ba4 <HAL_RCC_OscConfig>
 8000586:	1e03      	subs	r3, r0, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800058a:	f000 fb95 	bl	8000cb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	2207      	movs	r2, #7
 8000592:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2200      	movs	r2, #0
 8000598:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	2200      	movs	r2, #0
 80005a4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	2100      	movs	r1, #0
 80005aa:	0018      	movs	r0, r3
 80005ac:	f001 fe80 	bl	80022b0 <HAL_RCC_ClockConfig>
 80005b0:	1e03      	subs	r3, r0, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80005b4:	f000 fb80 	bl	8000cb8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 80005b8:	2380      	movs	r3, #128	@ 0x80
 80005ba:	04db      	lsls	r3, r3, #19
 80005bc:	2200      	movs	r2, #0
 80005be:	0019      	movs	r1, r3
 80005c0:	2000      	movs	r0, #0
 80005c2:	f001 ff4f 	bl	8002464 <HAL_RCC_MCOConfig>
}
 80005c6:	46c0      	nop			@ (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	b013      	add	sp, #76	@ 0x4c
 80005cc:	bd90      	pop	{r4, r7, pc}
	...

080005d0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80005d4:	4b17      	ldr	r3, [pc, #92]	@ (8000634 <MX_CAN_Init+0x64>)
 80005d6:	4a18      	ldr	r2, [pc, #96]	@ (8000638 <MX_CAN_Init+0x68>)
 80005d8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80005da:	4b16      	ldr	r3, [pc, #88]	@ (8000634 <MX_CAN_Init+0x64>)
 80005dc:	2210      	movs	r2, #16
 80005de:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80005e0:	4b14      	ldr	r3, [pc, #80]	@ (8000634 <MX_CAN_Init+0x64>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005e6:	4b13      	ldr	r3, [pc, #76]	@ (8000634 <MX_CAN_Init+0x64>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80005ec:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <MX_CAN_Init+0x64>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80005f2:	4b10      	ldr	r3, [pc, #64]	@ (8000634 <MX_CAN_Init+0x64>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80005f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000634 <MX_CAN_Init+0x64>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80005fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000634 <MX_CAN_Init+0x64>)
 8000600:	2200      	movs	r2, #0
 8000602:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000604:	4b0b      	ldr	r3, [pc, #44]	@ (8000634 <MX_CAN_Init+0x64>)
 8000606:	2200      	movs	r2, #0
 8000608:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800060a:	4b0a      	ldr	r3, [pc, #40]	@ (8000634 <MX_CAN_Init+0x64>)
 800060c:	2200      	movs	r2, #0
 800060e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000610:	4b08      	ldr	r3, [pc, #32]	@ (8000634 <MX_CAN_Init+0x64>)
 8000612:	2200      	movs	r2, #0
 8000614:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000616:	4b07      	ldr	r3, [pc, #28]	@ (8000634 <MX_CAN_Init+0x64>)
 8000618:	2200      	movs	r2, #0
 800061a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800061c:	4b05      	ldr	r3, [pc, #20]	@ (8000634 <MX_CAN_Init+0x64>)
 800061e:	0018      	movs	r0, r3
 8000620:	f000 fefe 	bl	8001420 <HAL_CAN_Init>
 8000624:	1e03      	subs	r3, r0, #0
 8000626:	d001      	beq.n	800062c <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000628:	f000 fb46 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800062c:	46c0      	nop			@ (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	46c0      	nop			@ (mov r8, r8)
 8000634:	20000118 	.word	0x20000118
 8000638:	40006400 	.word	0x40006400

0800063c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b096      	sub	sp, #88	@ 0x58
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000642:	2348      	movs	r3, #72	@ 0x48
 8000644:	18fb      	adds	r3, r7, r3
 8000646:	0018      	movs	r0, r3
 8000648:	2310      	movs	r3, #16
 800064a:	001a      	movs	r2, r3
 800064c:	2100      	movs	r1, #0
 800064e:	f004 fbd9 	bl	8004e04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000652:	2340      	movs	r3, #64	@ 0x40
 8000654:	18fb      	adds	r3, r7, r3
 8000656:	0018      	movs	r0, r3
 8000658:	2308      	movs	r3, #8
 800065a:	001a      	movs	r2, r3
 800065c:	2100      	movs	r1, #0
 800065e:	f004 fbd1 	bl	8004e04 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000662:	2324      	movs	r3, #36	@ 0x24
 8000664:	18fb      	adds	r3, r7, r3
 8000666:	0018      	movs	r0, r3
 8000668:	231c      	movs	r3, #28
 800066a:	001a      	movs	r2, r3
 800066c:	2100      	movs	r1, #0
 800066e:	f004 fbc9 	bl	8004e04 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	0018      	movs	r0, r3
 8000676:	2320      	movs	r3, #32
 8000678:	001a      	movs	r2, r3
 800067a:	2100      	movs	r1, #0
 800067c:	f004 fbc2 	bl	8004e04 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000680:	4b51      	ldr	r3, [pc, #324]	@ (80007c8 <MX_TIM1_Init+0x18c>)
 8000682:	4a52      	ldr	r2, [pc, #328]	@ (80007cc <MX_TIM1_Init+0x190>)
 8000684:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000686:	4b50      	ldr	r3, [pc, #320]	@ (80007c8 <MX_TIM1_Init+0x18c>)
 8000688:	2200      	movs	r2, #0
 800068a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800068c:	4b4e      	ldr	r3, [pc, #312]	@ (80007c8 <MX_TIM1_Init+0x18c>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8000692:	4b4d      	ldr	r3, [pc, #308]	@ (80007c8 <MX_TIM1_Init+0x18c>)
 8000694:	22ff      	movs	r2, #255	@ 0xff
 8000696:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000698:	4b4b      	ldr	r3, [pc, #300]	@ (80007c8 <MX_TIM1_Init+0x18c>)
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800069e:	4b4a      	ldr	r3, [pc, #296]	@ (80007c8 <MX_TIM1_Init+0x18c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006a4:	4b48      	ldr	r3, [pc, #288]	@ (80007c8 <MX_TIM1_Init+0x18c>)
 80006a6:	2280      	movs	r2, #128	@ 0x80
 80006a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006aa:	4b47      	ldr	r3, [pc, #284]	@ (80007c8 <MX_TIM1_Init+0x18c>)
 80006ac:	0018      	movs	r0, r3
 80006ae:	f001 ffab 	bl	8002608 <HAL_TIM_Base_Init>
 80006b2:	1e03      	subs	r3, r0, #0
 80006b4:	d001      	beq.n	80006ba <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80006b6:	f000 faff 	bl	8000cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ba:	2148      	movs	r1, #72	@ 0x48
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	2280      	movs	r2, #128	@ 0x80
 80006c0:	0152      	lsls	r2, r2, #5
 80006c2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006c4:	187a      	adds	r2, r7, r1
 80006c6:	4b40      	ldr	r3, [pc, #256]	@ (80007c8 <MX_TIM1_Init+0x18c>)
 80006c8:	0011      	movs	r1, r2
 80006ca:	0018      	movs	r0, r3
 80006cc:	f002 fdf2 	bl	80032b4 <HAL_TIM_ConfigClockSource>
 80006d0:	1e03      	subs	r3, r0, #0
 80006d2:	d001      	beq.n	80006d8 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80006d4:	f000 faf0 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006d8:	4b3b      	ldr	r3, [pc, #236]	@ (80007c8 <MX_TIM1_Init+0x18c>)
 80006da:	0018      	movs	r0, r3
 80006dc:	f002 f85e 	bl	800279c <HAL_TIM_PWM_Init>
 80006e0:	1e03      	subs	r3, r0, #0
 80006e2:	d001      	beq.n	80006e8 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80006e4:	f000 fae8 	bl	8000cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006e8:	2140      	movs	r1, #64	@ 0x40
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	2200      	movs	r2, #0
 80006f4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006f6:	187a      	adds	r2, r7, r1
 80006f8:	4b33      	ldr	r3, [pc, #204]	@ (80007c8 <MX_TIM1_Init+0x18c>)
 80006fa:	0011      	movs	r1, r2
 80006fc:	0018      	movs	r0, r3
 80006fe:	f003 faf7 	bl	8003cf0 <HAL_TIMEx_MasterConfigSynchronization>
 8000702:	1e03      	subs	r3, r0, #0
 8000704:	d001      	beq.n	800070a <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000706:	f000 fad7 	bl	8000cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800070a:	2124      	movs	r1, #36	@ 0x24
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2260      	movs	r2, #96	@ 0x60
 8000710:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 25;
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2219      	movs	r2, #25
 8000716:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000718:	187b      	adds	r3, r7, r1
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2200      	movs	r2, #0
 8000722:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000724:	187b      	adds	r3, r7, r1
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2200      	movs	r2, #0
 800072e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2200      	movs	r2, #0
 8000734:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000736:	1879      	adds	r1, r7, r1
 8000738:	4b23      	ldr	r3, [pc, #140]	@ (80007c8 <MX_TIM1_Init+0x18c>)
 800073a:	2200      	movs	r2, #0
 800073c:	0018      	movs	r0, r3
 800073e:	f002 fcf3 	bl	8003128 <HAL_TIM_PWM_ConfigChannel>
 8000742:	1e03      	subs	r3, r0, #0
 8000744:	d001      	beq.n	800074a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000746:	f000 fab7 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800074a:	2324      	movs	r3, #36	@ 0x24
 800074c:	18f9      	adds	r1, r7, r3
 800074e:	4b1e      	ldr	r3, [pc, #120]	@ (80007c8 <MX_TIM1_Init+0x18c>)
 8000750:	2204      	movs	r2, #4
 8000752:	0018      	movs	r0, r3
 8000754:	f002 fce8 	bl	8003128 <HAL_TIM_PWM_ConfigChannel>
 8000758:	1e03      	subs	r3, r0, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 800075c:	f000 faac 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000760:	2324      	movs	r3, #36	@ 0x24
 8000762:	18f9      	adds	r1, r7, r3
 8000764:	4b18      	ldr	r3, [pc, #96]	@ (80007c8 <MX_TIM1_Init+0x18c>)
 8000766:	2208      	movs	r2, #8
 8000768:	0018      	movs	r0, r3
 800076a:	f002 fcdd 	bl	8003128 <HAL_TIM_PWM_ConfigChannel>
 800076e:	1e03      	subs	r3, r0, #0
 8000770:	d001      	beq.n	8000776 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8000772:	f000 faa1 	bl	8000cb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	2200      	movs	r2, #0
 8000780:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	2280      	movs	r2, #128	@ 0x80
 8000798:	0192      	lsls	r2, r2, #6
 800079a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007a2:	1d3a      	adds	r2, r7, #4
 80007a4:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <MX_TIM1_Init+0x18c>)
 80007a6:	0011      	movs	r1, r2
 80007a8:	0018      	movs	r0, r3
 80007aa:	f003 faf9 	bl	8003da0 <HAL_TIMEx_ConfigBreakDeadTime>
 80007ae:	1e03      	subs	r3, r0, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 80007b2:	f000 fa81 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007b6:	4b04      	ldr	r3, [pc, #16]	@ (80007c8 <MX_TIM1_Init+0x18c>)
 80007b8:	0018      	movs	r0, r3
 80007ba:	f000 fc07 	bl	8000fcc <HAL_TIM_MspPostInit>

}
 80007be:	46c0      	nop			@ (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	b016      	add	sp, #88	@ 0x58
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	46c0      	nop			@ (mov r8, r8)
 80007c8:	20000140 	.word	0x20000140
 80007cc:	40012c00 	.word	0x40012c00

080007d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	@ 0x28
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007d6:	2318      	movs	r3, #24
 80007d8:	18fb      	adds	r3, r7, r3
 80007da:	0018      	movs	r0, r3
 80007dc:	2310      	movs	r3, #16
 80007de:	001a      	movs	r2, r3
 80007e0:	2100      	movs	r1, #0
 80007e2:	f004 fb0f 	bl	8004e04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e6:	2310      	movs	r3, #16
 80007e8:	18fb      	adds	r3, r7, r3
 80007ea:	0018      	movs	r0, r3
 80007ec:	2308      	movs	r3, #8
 80007ee:	001a      	movs	r2, r3
 80007f0:	2100      	movs	r1, #0
 80007f2:	f004 fb07 	bl	8004e04 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80007f6:	003b      	movs	r3, r7
 80007f8:	0018      	movs	r0, r3
 80007fa:	2310      	movs	r3, #16
 80007fc:	001a      	movs	r2, r3
 80007fe:	2100      	movs	r1, #0
 8000800:	f004 fb00 	bl	8004e04 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000804:	4b33      	ldr	r3, [pc, #204]	@ (80008d4 <MX_TIM2_Init+0x104>)
 8000806:	2280      	movs	r2, #128	@ 0x80
 8000808:	05d2      	lsls	r2, r2, #23
 800080a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800080c:	4b31      	ldr	r3, [pc, #196]	@ (80008d4 <MX_TIM2_Init+0x104>)
 800080e:	2200      	movs	r2, #0
 8000810:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000812:	4b30      	ldr	r3, [pc, #192]	@ (80008d4 <MX_TIM2_Init+0x104>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8000818:	4b2e      	ldr	r3, [pc, #184]	@ (80008d4 <MX_TIM2_Init+0x104>)
 800081a:	22ff      	movs	r2, #255	@ 0xff
 800081c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081e:	4b2d      	ldr	r3, [pc, #180]	@ (80008d4 <MX_TIM2_Init+0x104>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000824:	4b2b      	ldr	r3, [pc, #172]	@ (80008d4 <MX_TIM2_Init+0x104>)
 8000826:	2280      	movs	r2, #128	@ 0x80
 8000828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800082a:	4b2a      	ldr	r3, [pc, #168]	@ (80008d4 <MX_TIM2_Init+0x104>)
 800082c:	0018      	movs	r0, r3
 800082e:	f001 feeb 	bl	8002608 <HAL_TIM_Base_Init>
 8000832:	1e03      	subs	r3, r0, #0
 8000834:	d001      	beq.n	800083a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000836:	f000 fa3f 	bl	8000cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800083a:	2118      	movs	r1, #24
 800083c:	187b      	adds	r3, r7, r1
 800083e:	2280      	movs	r2, #128	@ 0x80
 8000840:	0152      	lsls	r2, r2, #5
 8000842:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000844:	187a      	adds	r2, r7, r1
 8000846:	4b23      	ldr	r3, [pc, #140]	@ (80008d4 <MX_TIM2_Init+0x104>)
 8000848:	0011      	movs	r1, r2
 800084a:	0018      	movs	r0, r3
 800084c:	f002 fd32 	bl	80032b4 <HAL_TIM_ConfigClockSource>
 8000850:	1e03      	subs	r3, r0, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000854:	f000 fa30 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000858:	4b1e      	ldr	r3, [pc, #120]	@ (80008d4 <MX_TIM2_Init+0x104>)
 800085a:	0018      	movs	r0, r3
 800085c:	f002 f8a2 	bl	80029a4 <HAL_TIM_IC_Init>
 8000860:	1e03      	subs	r3, r0, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000864:	f000 fa28 	bl	8000cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000868:	2110      	movs	r1, #16
 800086a:	187b      	adds	r3, r7, r1
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000870:	187b      	adds	r3, r7, r1
 8000872:	2200      	movs	r2, #0
 8000874:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000876:	187a      	adds	r2, r7, r1
 8000878:	4b16      	ldr	r3, [pc, #88]	@ (80008d4 <MX_TIM2_Init+0x104>)
 800087a:	0011      	movs	r1, r2
 800087c:	0018      	movs	r0, r3
 800087e:	f003 fa37 	bl	8003cf0 <HAL_TIMEx_MasterConfigSynchronization>
 8000882:	1e03      	subs	r3, r0, #0
 8000884:	d001      	beq.n	800088a <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000886:	f000 fa17 	bl	8000cb8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800088a:	003b      	movs	r3, r7
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000890:	003b      	movs	r3, r7
 8000892:	2201      	movs	r2, #1
 8000894:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000896:	003b      	movs	r3, r7
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 800089c:	003b      	movs	r3, r7
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80008a2:	0039      	movs	r1, r7
 80008a4:	4b0b      	ldr	r3, [pc, #44]	@ (80008d4 <MX_TIM2_Init+0x104>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	0018      	movs	r0, r3
 80008aa:	f002 fb99 	bl	8002fe0 <HAL_TIM_IC_ConfigChannel>
 80008ae:	1e03      	subs	r3, r0, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80008b2:	f000 fa01 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80008b6:	0039      	movs	r1, r7
 80008b8:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <MX_TIM2_Init+0x104>)
 80008ba:	2204      	movs	r2, #4
 80008bc:	0018      	movs	r0, r3
 80008be:	f002 fb8f 	bl	8002fe0 <HAL_TIM_IC_ConfigChannel>
 80008c2:	1e03      	subs	r3, r0, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 80008c6:	f000 f9f7 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008ca:	46c0      	nop			@ (mov r8, r8)
 80008cc:	46bd      	mov	sp, r7
 80008ce:	b00a      	add	sp, #40	@ 0x28
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	46c0      	nop			@ (mov r8, r8)
 80008d4:	20000188 	.word	0x20000188

080008d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b092      	sub	sp, #72	@ 0x48
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008de:	2338      	movs	r3, #56	@ 0x38
 80008e0:	18fb      	adds	r3, r7, r3
 80008e2:	0018      	movs	r0, r3
 80008e4:	2310      	movs	r3, #16
 80008e6:	001a      	movs	r2, r3
 80008e8:	2100      	movs	r1, #0
 80008ea:	f004 fa8b 	bl	8004e04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ee:	2330      	movs	r3, #48	@ 0x30
 80008f0:	18fb      	adds	r3, r7, r3
 80008f2:	0018      	movs	r0, r3
 80008f4:	2308      	movs	r3, #8
 80008f6:	001a      	movs	r2, r3
 80008f8:	2100      	movs	r1, #0
 80008fa:	f004 fa83 	bl	8004e04 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008fe:	2314      	movs	r3, #20
 8000900:	18fb      	adds	r3, r7, r3
 8000902:	0018      	movs	r0, r3
 8000904:	231c      	movs	r3, #28
 8000906:	001a      	movs	r2, r3
 8000908:	2100      	movs	r1, #0
 800090a:	f004 fa7b 	bl	8004e04 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	0018      	movs	r0, r3
 8000912:	2310      	movs	r3, #16
 8000914:	001a      	movs	r2, r3
 8000916:	2100      	movs	r1, #0
 8000918:	f004 fa74 	bl	8004e04 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800091c:	4b49      	ldr	r3, [pc, #292]	@ (8000a44 <MX_TIM3_Init+0x16c>)
 800091e:	4a4a      	ldr	r2, [pc, #296]	@ (8000a48 <MX_TIM3_Init+0x170>)
 8000920:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000922:	4b48      	ldr	r3, [pc, #288]	@ (8000a44 <MX_TIM3_Init+0x16c>)
 8000924:	2200      	movs	r2, #0
 8000926:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000928:	4b46      	ldr	r3, [pc, #280]	@ (8000a44 <MX_TIM3_Init+0x16c>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 800092e:	4b45      	ldr	r3, [pc, #276]	@ (8000a44 <MX_TIM3_Init+0x16c>)
 8000930:	22ff      	movs	r2, #255	@ 0xff
 8000932:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000934:	4b43      	ldr	r3, [pc, #268]	@ (8000a44 <MX_TIM3_Init+0x16c>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800093a:	4b42      	ldr	r3, [pc, #264]	@ (8000a44 <MX_TIM3_Init+0x16c>)
 800093c:	2280      	movs	r2, #128	@ 0x80
 800093e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000940:	4b40      	ldr	r3, [pc, #256]	@ (8000a44 <MX_TIM3_Init+0x16c>)
 8000942:	0018      	movs	r0, r3
 8000944:	f001 fe60 	bl	8002608 <HAL_TIM_Base_Init>
 8000948:	1e03      	subs	r3, r0, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800094c:	f000 f9b4 	bl	8000cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000950:	2138      	movs	r1, #56	@ 0x38
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2280      	movs	r2, #128	@ 0x80
 8000956:	0152      	lsls	r2, r2, #5
 8000958:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800095a:	187a      	adds	r2, r7, r1
 800095c:	4b39      	ldr	r3, [pc, #228]	@ (8000a44 <MX_TIM3_Init+0x16c>)
 800095e:	0011      	movs	r1, r2
 8000960:	0018      	movs	r0, r3
 8000962:	f002 fca7 	bl	80032b4 <HAL_TIM_ConfigClockSource>
 8000966:	1e03      	subs	r3, r0, #0
 8000968:	d001      	beq.n	800096e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800096a:	f000 f9a5 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800096e:	4b35      	ldr	r3, [pc, #212]	@ (8000a44 <MX_TIM3_Init+0x16c>)
 8000970:	0018      	movs	r0, r3
 8000972:	f001 ff13 	bl	800279c <HAL_TIM_PWM_Init>
 8000976:	1e03      	subs	r3, r0, #0
 8000978:	d001      	beq.n	800097e <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800097a:	f000 f99d 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800097e:	4b31      	ldr	r3, [pc, #196]	@ (8000a44 <MX_TIM3_Init+0x16c>)
 8000980:	0018      	movs	r0, r3
 8000982:	f002 f80f 	bl	80029a4 <HAL_TIM_IC_Init>
 8000986:	1e03      	subs	r3, r0, #0
 8000988:	d001      	beq.n	800098e <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 800098a:	f000 f995 	bl	8000cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800098e:	2130      	movs	r1, #48	@ 0x30
 8000990:	187b      	adds	r3, r7, r1
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000996:	187b      	adds	r3, r7, r1
 8000998:	2200      	movs	r2, #0
 800099a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800099c:	187a      	adds	r2, r7, r1
 800099e:	4b29      	ldr	r3, [pc, #164]	@ (8000a44 <MX_TIM3_Init+0x16c>)
 80009a0:	0011      	movs	r1, r2
 80009a2:	0018      	movs	r0, r3
 80009a4:	f003 f9a4 	bl	8003cf0 <HAL_TIMEx_MasterConfigSynchronization>
 80009a8:	1e03      	subs	r3, r0, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80009ac:	f000 f984 	bl	8000cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009b0:	2114      	movs	r1, #20
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	2260      	movs	r2, #96	@ 0x60
 80009b6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	2200      	movs	r2, #0
 80009bc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	2200      	movs	r2, #0
 80009c8:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ca:	1879      	adds	r1, r7, r1
 80009cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000a44 <MX_TIM3_Init+0x16c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	0018      	movs	r0, r3
 80009d2:	f002 fba9 	bl	8003128 <HAL_TIM_PWM_ConfigChannel>
 80009d6:	1e03      	subs	r3, r0, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 80009da:	f000 f96d 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009de:	2314      	movs	r3, #20
 80009e0:	18f9      	adds	r1, r7, r3
 80009e2:	4b18      	ldr	r3, [pc, #96]	@ (8000a44 <MX_TIM3_Init+0x16c>)
 80009e4:	2204      	movs	r2, #4
 80009e6:	0018      	movs	r0, r3
 80009e8:	f002 fb9e 	bl	8003128 <HAL_TIM_PWM_ConfigChannel>
 80009ec:	1e03      	subs	r3, r0, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM3_Init+0x11c>
  {
    Error_Handler();
 80009f0:	f000 f962 	bl	8000cb8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	2201      	movs	r2, #1
 80009fe:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	2200      	movs	r2, #0
 8000a0a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000a0c:	1d39      	adds	r1, r7, #4
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a44 <MX_TIM3_Init+0x16c>)
 8000a10:	2208      	movs	r2, #8
 8000a12:	0018      	movs	r0, r3
 8000a14:	f002 fae4 	bl	8002fe0 <HAL_TIM_IC_ConfigChannel>
 8000a18:	1e03      	subs	r3, r0, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM3_Init+0x148>
  {
    Error_Handler();
 8000a1c:	f000 f94c 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000a20:	1d39      	adds	r1, r7, #4
 8000a22:	4b08      	ldr	r3, [pc, #32]	@ (8000a44 <MX_TIM3_Init+0x16c>)
 8000a24:	220c      	movs	r2, #12
 8000a26:	0018      	movs	r0, r3
 8000a28:	f002 fada 	bl	8002fe0 <HAL_TIM_IC_ConfigChannel>
 8000a2c:	1e03      	subs	r3, r0, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM3_Init+0x15c>
  {
    Error_Handler();
 8000a30:	f000 f942 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a34:	4b03      	ldr	r3, [pc, #12]	@ (8000a44 <MX_TIM3_Init+0x16c>)
 8000a36:	0018      	movs	r0, r3
 8000a38:	f000 fac8 	bl	8000fcc <HAL_TIM_MspPostInit>

}
 8000a3c:	46c0      	nop			@ (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	b012      	add	sp, #72	@ 0x48
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	200001d0 	.word	0x200001d0
 8000a48:	40000400 	.word	0x40000400

08000a4c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a52:	003b      	movs	r3, r7
 8000a54:	0018      	movs	r0, r3
 8000a56:	2310      	movs	r3, #16
 8000a58:	001a      	movs	r2, r3
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	f004 f9d2 	bl	8004e04 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000a60:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad8 <MX_TIM14_Init+0x8c>)
 8000a62:	4a1e      	ldr	r2, [pc, #120]	@ (8000adc <MX_TIM14_Init+0x90>)
 8000a64:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000a66:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad8 <MX_TIM14_Init+0x8c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad8 <MX_TIM14_Init+0x8c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 255;
 8000a72:	4b19      	ldr	r3, [pc, #100]	@ (8000ad8 <MX_TIM14_Init+0x8c>)
 8000a74:	22ff      	movs	r2, #255	@ 0xff
 8000a76:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a78:	4b17      	ldr	r3, [pc, #92]	@ (8000ad8 <MX_TIM14_Init+0x8c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a7e:	4b16      	ldr	r3, [pc, #88]	@ (8000ad8 <MX_TIM14_Init+0x8c>)
 8000a80:	2280      	movs	r2, #128	@ 0x80
 8000a82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000a84:	4b14      	ldr	r3, [pc, #80]	@ (8000ad8 <MX_TIM14_Init+0x8c>)
 8000a86:	0018      	movs	r0, r3
 8000a88:	f001 fdbe 	bl	8002608 <HAL_TIM_Base_Init>
 8000a8c:	1e03      	subs	r3, r0, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000a90:	f000 f912 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim14) != HAL_OK)
 8000a94:	4b10      	ldr	r3, [pc, #64]	@ (8000ad8 <MX_TIM14_Init+0x8c>)
 8000a96:	0018      	movs	r0, r3
 8000a98:	f001 ff84 	bl	80029a4 <HAL_TIM_IC_Init>
 8000a9c:	1e03      	subs	r3, r0, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000aa0:	f000 f90a 	bl	8000cb8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000aa4:	003b      	movs	r3, r7
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000aaa:	003b      	movs	r3, r7
 8000aac:	2201      	movs	r2, #1
 8000aae:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ab0:	003b      	movs	r3, r7
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8000ab6:	003b      	movs	r3, r7
 8000ab8:	2200      	movs	r2, #0
 8000aba:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim14, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000abc:	0039      	movs	r1, r7
 8000abe:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <MX_TIM14_Init+0x8c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f002 fa8c 	bl	8002fe0 <HAL_TIM_IC_ConfigChannel>
 8000ac8:	1e03      	subs	r3, r0, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000acc:	f000 f8f4 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000ad0:	46c0      	nop			@ (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	b004      	add	sp, #16
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000218 	.word	0x20000218
 8000adc:	40002000 	.word	0x40002000

08000ae0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ae4:	4b14      	ldr	r3, [pc, #80]	@ (8000b38 <MX_USART2_UART_Init+0x58>)
 8000ae6:	4a15      	ldr	r2, [pc, #84]	@ (8000b3c <MX_USART2_UART_Init+0x5c>)
 8000ae8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aea:	4b13      	ldr	r3, [pc, #76]	@ (8000b38 <MX_USART2_UART_Init+0x58>)
 8000aec:	22e1      	movs	r2, #225	@ 0xe1
 8000aee:	0252      	lsls	r2, r2, #9
 8000af0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000af2:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <MX_USART2_UART_Init+0x58>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b38 <MX_USART2_UART_Init+0x58>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	@ (8000b38 <MX_USART2_UART_Init+0x58>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	@ (8000b38 <MX_USART2_UART_Init+0x58>)
 8000b06:	220c      	movs	r2, #12
 8000b08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b38 <MX_USART2_UART_Init+0x58>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b10:	4b09      	ldr	r3, [pc, #36]	@ (8000b38 <MX_USART2_UART_Init+0x58>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b16:	4b08      	ldr	r3, [pc, #32]	@ (8000b38 <MX_USART2_UART_Init+0x58>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <MX_USART2_UART_Init+0x58>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b22:	4b05      	ldr	r3, [pc, #20]	@ (8000b38 <MX_USART2_UART_Init+0x58>)
 8000b24:	0018      	movs	r0, r3
 8000b26:	f003 f9a9 	bl	8003e7c <HAL_UART_Init>
 8000b2a:	1e03      	subs	r3, r0, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b2e:	f000 f8c3 	bl	8000cb8 <Error_Handler>
  /* USER CODE BEGIN USART2_Init 2 */


  /* USER CODE END USART2_Init 2 */

}
 8000b32:	46c0      	nop			@ (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000260 	.word	0x20000260
 8000b3c:	40004400 	.word	0x40004400

08000b40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b46:	4b17      	ldr	r3, [pc, #92]	@ (8000ba4 <MX_GPIO_Init+0x64>)
 8000b48:	695a      	ldr	r2, [r3, #20]
 8000b4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <MX_GPIO_Init+0x64>)
 8000b4c:	2180      	movs	r1, #128	@ 0x80
 8000b4e:	03c9      	lsls	r1, r1, #15
 8000b50:	430a      	orrs	r2, r1
 8000b52:	615a      	str	r2, [r3, #20]
 8000b54:	4b13      	ldr	r3, [pc, #76]	@ (8000ba4 <MX_GPIO_Init+0x64>)
 8000b56:	695a      	ldr	r2, [r3, #20]
 8000b58:	2380      	movs	r3, #128	@ 0x80
 8000b5a:	03db      	lsls	r3, r3, #15
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	4b10      	ldr	r3, [pc, #64]	@ (8000ba4 <MX_GPIO_Init+0x64>)
 8000b64:	695a      	ldr	r2, [r3, #20]
 8000b66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba4 <MX_GPIO_Init+0x64>)
 8000b68:	2180      	movs	r1, #128	@ 0x80
 8000b6a:	0289      	lsls	r1, r1, #10
 8000b6c:	430a      	orrs	r2, r1
 8000b6e:	615a      	str	r2, [r3, #20]
 8000b70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <MX_GPIO_Init+0x64>)
 8000b72:	695a      	ldr	r2, [r3, #20]
 8000b74:	2380      	movs	r3, #128	@ 0x80
 8000b76:	029b      	lsls	r3, r3, #10
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ba4 <MX_GPIO_Init+0x64>)
 8000b80:	695a      	ldr	r2, [r3, #20]
 8000b82:	4b08      	ldr	r3, [pc, #32]	@ (8000ba4 <MX_GPIO_Init+0x64>)
 8000b84:	2180      	movs	r1, #128	@ 0x80
 8000b86:	02c9      	lsls	r1, r1, #11
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	615a      	str	r2, [r3, #20]
 8000b8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ba4 <MX_GPIO_Init+0x64>)
 8000b8e:	695a      	ldr	r2, [r3, #20]
 8000b90:	2380      	movs	r3, #128	@ 0x80
 8000b92:	02db      	lsls	r3, r3, #11
 8000b94:	4013      	ands	r3, r2
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b9a:	46c0      	nop			@ (mov r8, r8)
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	b004      	add	sp, #16
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	46c0      	nop			@ (mov r8, r8)
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim)

{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]

    if(gu8_State == IDLE)
 8000bb0:	4b2d      	ldr	r3, [pc, #180]	@ (8000c68 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d10b      	bne.n	8000bd2 <HAL_TIM_IC_CaptureCallback+0x2a>
    {
        //gu32_T1 = TIM2->CCR1;
    	gu32_T1 = htim->Instance->CCR1;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bc0:	4b2a      	ldr	r3, [pc, #168]	@ (8000c6c <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000bc2:	601a      	str	r2, [r3, #0]
        gu16_TIM2_OVC = 0;
 8000bc4:	4b2a      	ldr	r3, [pc, #168]	@ (8000c70 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	801a      	strh	r2, [r3, #0]
        gu8_State = DONE;
 8000bca:	4b27      	ldr	r3, [pc, #156]	@ (8000c68 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	701a      	strb	r2, [r3, #0]
                  HAL_UART_Transmit(&huart2, gu8_MSG, sizeof(gu8_MSG), 100);
                }
        gu8_State = IDLE;
//        HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
    }
}
 8000bd0:	e045      	b.n	8000c5e <HAL_TIM_IC_CaptureCallback+0xb6>
    else if(gu8_State == DONE)
 8000bd2:	4b25      	ldr	r3, [pc, #148]	@ (8000c68 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d140      	bne.n	8000c5e <HAL_TIM_IC_CaptureCallback+0xb6>
    	gu32_T2 = htim->Instance->CCR1;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000be2:	4b24      	ldr	r3, [pc, #144]	@ (8000c74 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000be4:	601a      	str	r2, [r3, #0]
        gu32_Ticks = (gu32_T2 + (gu16_TIM2_OVC * 256)) - gu32_T1;
 8000be6:	4b22      	ldr	r3, [pc, #136]	@ (8000c70 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000be8:	881b      	ldrh	r3, [r3, #0]
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	021b      	lsls	r3, r3, #8
 8000bee:	001a      	movs	r2, r3
 8000bf0:	4b20      	ldr	r3, [pc, #128]	@ (8000c74 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	18d2      	adds	r2, r2, r3
 8000bf6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c6c <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	1ad2      	subs	r2, r2, r3
 8000bfc:	4b1e      	ldr	r3, [pc, #120]	@ (8000c78 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000bfe:	601a      	str	r2, [r3, #0]
        gu32_Freq = (uint32_t)(F_CLK/gu32_Ticks);
 8000c00:	4b1d      	ldr	r3, [pc, #116]	@ (8000c78 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	0019      	movs	r1, r3
 8000c06:	481d      	ldr	r0, [pc, #116]	@ (8000c7c <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000c08:	f7ff fa88 	bl	800011c <__udivsi3>
 8000c0c:	0003      	movs	r3, r0
 8000c0e:	001a      	movs	r2, r3
 8000c10:	4b1b      	ldr	r3, [pc, #108]	@ (8000c80 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000c12:	601a      	str	r2, [r3, #0]
        if(gu32_Freq != 0)
 8000c14:	4b1a      	ldr	r3, [pc, #104]	@ (8000c80 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d00c      	beq.n	8000c36 <HAL_TIM_IC_CaptureCallback+0x8e>
          sprintf(gu8_MSG, "Frequency = %lu Hz\n\r", gu32_Freq);
 8000c1c:	4b18      	ldr	r3, [pc, #96]	@ (8000c80 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4918      	ldr	r1, [pc, #96]	@ (8000c84 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000c22:	4b19      	ldr	r3, [pc, #100]	@ (8000c88 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000c24:	0018      	movs	r0, r3
 8000c26:	f004 f8cd 	bl	8004dc4 <siprintf>
          HAL_UART_Transmit(&huart2, gu8_MSG, sizeof(gu8_MSG), 100);
 8000c2a:	4917      	ldr	r1, [pc, #92]	@ (8000c88 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000c2c:	4817      	ldr	r0, [pc, #92]	@ (8000c8c <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000c2e:	2364      	movs	r3, #100	@ 0x64
 8000c30:	2240      	movs	r2, #64	@ 0x40
 8000c32:	f003 f977 	bl	8003f24 <HAL_UART_Transmit>
        if(gu32_Freq == 0)
 8000c36:	4b12      	ldr	r3, [pc, #72]	@ (8000c80 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d10c      	bne.n	8000c58 <HAL_TIM_IC_CaptureCallback+0xb0>
                  sprintf(gu8_MSG, "Failed = %lu Hz\n\r", gu32_Freq);
 8000c3e:	4b10      	ldr	r3, [pc, #64]	@ (8000c80 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	4913      	ldr	r1, [pc, #76]	@ (8000c90 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000c44:	4b10      	ldr	r3, [pc, #64]	@ (8000c88 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000c46:	0018      	movs	r0, r3
 8000c48:	f004 f8bc 	bl	8004dc4 <siprintf>
                  HAL_UART_Transmit(&huart2, gu8_MSG, sizeof(gu8_MSG), 100);
 8000c4c:	490e      	ldr	r1, [pc, #56]	@ (8000c88 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000c4e:	480f      	ldr	r0, [pc, #60]	@ (8000c8c <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000c50:	2364      	movs	r3, #100	@ 0x64
 8000c52:	2240      	movs	r2, #64	@ 0x40
 8000c54:	f003 f966 	bl	8003f24 <HAL_UART_Transmit>
        gu8_State = IDLE;
 8000c58:	4b03      	ldr	r3, [pc, #12]	@ (8000c68 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
}
 8000c5e:	46c0      	nop			@ (mov r8, r8)
 8000c60:	46bd      	mov	sp, r7
 8000c62:	b002      	add	sp, #8
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			@ (mov r8, r8)
 8000c68:	200000c0 	.word	0x200000c0
 8000c6c:	20000104 	.word	0x20000104
 8000c70:	20000110 	.word	0x20000110
 8000c74:	20000108 	.word	0x20000108
 8000c78:	2000010c 	.word	0x2000010c
 8000c7c:	007a1200 	.word	0x007a1200
 8000c80:	20000114 	.word	0x20000114
 8000c84:	08005738 	.word	0x08005738
 8000c88:	200000c4 	.word	0x200000c4
 8000c8c:	20000260 	.word	0x20000260
 8000c90:	08005750 	.word	0x08005750

08000c94 <HAL_TIM_PeriodElapsedCallback>:
//    }

//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
    gu16_TIM2_OVC++;
 8000c9c:	4b05      	ldr	r3, [pc, #20]	@ (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	b29a      	uxth	r2, r3
 8000ca6:	4b03      	ldr	r3, [pc, #12]	@ (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ca8:	801a      	strh	r2, [r3, #0]
}
 8000caa:	46c0      	nop			@ (mov r8, r8)
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b002      	add	sp, #8
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	46c0      	nop			@ (mov r8, r8)
 8000cb4:	20000110 	.word	0x20000110

08000cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cbc:	b672      	cpsid	i
}
 8000cbe:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  sprintf(gu8_MSG, "HAL ERROR\n\r", gu32_Freq);
 8000cc0:	4b07      	ldr	r3, [pc, #28]	@ (8000ce0 <Error_Handler+0x28>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4907      	ldr	r1, [pc, #28]	@ (8000ce4 <Error_Handler+0x2c>)
 8000cc6:	4b08      	ldr	r3, [pc, #32]	@ (8000ce8 <Error_Handler+0x30>)
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f004 f87b 	bl	8004dc4 <siprintf>
	  HAL_UART_Transmit(&huart2, gu8_MSG, sizeof(gu8_MSG), 100);
 8000cce:	4906      	ldr	r1, [pc, #24]	@ (8000ce8 <Error_Handler+0x30>)
 8000cd0:	4806      	ldr	r0, [pc, #24]	@ (8000cec <Error_Handler+0x34>)
 8000cd2:	2364      	movs	r3, #100	@ 0x64
 8000cd4:	2240      	movs	r2, #64	@ 0x40
 8000cd6:	f003 f925 	bl	8003f24 <HAL_UART_Transmit>
	  sprintf(gu8_MSG, "HAL ERROR\n\r", gu32_Freq);
 8000cda:	46c0      	nop			@ (mov r8, r8)
 8000cdc:	e7f0      	b.n	8000cc0 <Error_Handler+0x8>
 8000cde:	46c0      	nop			@ (mov r8, r8)
 8000ce0:	20000114 	.word	0x20000114
 8000ce4:	08005764 	.word	0x08005764
 8000ce8:	200000c4 	.word	0x200000c4
 8000cec:	20000260 	.word	0x20000260

08000cf0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d34 <HAL_MspInit+0x44>)
 8000cf8:	699a      	ldr	r2, [r3, #24]
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000d34 <HAL_MspInit+0x44>)
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	430a      	orrs	r2, r1
 8000d00:	619a      	str	r2, [r3, #24]
 8000d02:	4b0c      	ldr	r3, [pc, #48]	@ (8000d34 <HAL_MspInit+0x44>)
 8000d04:	699b      	ldr	r3, [r3, #24]
 8000d06:	2201      	movs	r2, #1
 8000d08:	4013      	ands	r3, r2
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0e:	4b09      	ldr	r3, [pc, #36]	@ (8000d34 <HAL_MspInit+0x44>)
 8000d10:	69da      	ldr	r2, [r3, #28]
 8000d12:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <HAL_MspInit+0x44>)
 8000d14:	2180      	movs	r1, #128	@ 0x80
 8000d16:	0549      	lsls	r1, r1, #21
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	61da      	str	r2, [r3, #28]
 8000d1c:	4b05      	ldr	r3, [pc, #20]	@ (8000d34 <HAL_MspInit+0x44>)
 8000d1e:	69da      	ldr	r2, [r3, #28]
 8000d20:	2380      	movs	r3, #128	@ 0x80
 8000d22:	055b      	lsls	r3, r3, #21
 8000d24:	4013      	ands	r3, r2
 8000d26:	603b      	str	r3, [r7, #0]
 8000d28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2a:	46c0      	nop			@ (mov r8, r8)
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	b002      	add	sp, #8
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	46c0      	nop			@ (mov r8, r8)
 8000d34:	40021000 	.word	0x40021000

08000d38 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d38:	b590      	push	{r4, r7, lr}
 8000d3a:	b08b      	sub	sp, #44	@ 0x2c
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	2414      	movs	r4, #20
 8000d42:	193b      	adds	r3, r7, r4
 8000d44:	0018      	movs	r0, r3
 8000d46:	2314      	movs	r3, #20
 8000d48:	001a      	movs	r2, r3
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	f004 f85a 	bl	8004e04 <memset>
  if(hcan->Instance==CAN)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a1d      	ldr	r2, [pc, #116]	@ (8000dcc <HAL_CAN_MspInit+0x94>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d133      	bne.n	8000dc2 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd0 <HAL_CAN_MspInit+0x98>)
 8000d5c:	69da      	ldr	r2, [r3, #28]
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd0 <HAL_CAN_MspInit+0x98>)
 8000d60:	2180      	movs	r1, #128	@ 0x80
 8000d62:	0489      	lsls	r1, r1, #18
 8000d64:	430a      	orrs	r2, r1
 8000d66:	61da      	str	r2, [r3, #28]
 8000d68:	4b19      	ldr	r3, [pc, #100]	@ (8000dd0 <HAL_CAN_MspInit+0x98>)
 8000d6a:	69da      	ldr	r2, [r3, #28]
 8000d6c:	2380      	movs	r3, #128	@ 0x80
 8000d6e:	049b      	lsls	r3, r3, #18
 8000d70:	4013      	ands	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d76:	4b16      	ldr	r3, [pc, #88]	@ (8000dd0 <HAL_CAN_MspInit+0x98>)
 8000d78:	695a      	ldr	r2, [r3, #20]
 8000d7a:	4b15      	ldr	r3, [pc, #84]	@ (8000dd0 <HAL_CAN_MspInit+0x98>)
 8000d7c:	2180      	movs	r1, #128	@ 0x80
 8000d7e:	0289      	lsls	r1, r1, #10
 8000d80:	430a      	orrs	r2, r1
 8000d82:	615a      	str	r2, [r3, #20]
 8000d84:	4b12      	ldr	r3, [pc, #72]	@ (8000dd0 <HAL_CAN_MspInit+0x98>)
 8000d86:	695a      	ldr	r2, [r3, #20]
 8000d88:	2380      	movs	r3, #128	@ 0x80
 8000d8a:	029b      	lsls	r3, r3, #10
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d92:	193b      	adds	r3, r7, r4
 8000d94:	22c0      	movs	r2, #192	@ 0xc0
 8000d96:	0152      	lsls	r2, r2, #5
 8000d98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	0021      	movs	r1, r4
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	2202      	movs	r2, #2
 8000da0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	2203      	movs	r2, #3
 8000dac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	2204      	movs	r2, #4
 8000db2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db4:	187a      	adds	r2, r7, r1
 8000db6:	2390      	movs	r3, #144	@ 0x90
 8000db8:	05db      	lsls	r3, r3, #23
 8000dba:	0011      	movs	r1, r2
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f000 fd89 	bl	80018d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000dc2:	46c0      	nop			@ (mov r8, r8)
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	b00b      	add	sp, #44	@ 0x2c
 8000dc8:	bd90      	pop	{r4, r7, pc}
 8000dca:	46c0      	nop			@ (mov r8, r8)
 8000dcc:	40006400 	.word	0x40006400
 8000dd0:	40021000 	.word	0x40021000

08000dd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08e      	sub	sp, #56	@ 0x38
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	2324      	movs	r3, #36	@ 0x24
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	0018      	movs	r0, r3
 8000de2:	2314      	movs	r3, #20
 8000de4:	001a      	movs	r2, r3
 8000de6:	2100      	movs	r1, #0
 8000de8:	f004 f80c 	bl	8004e04 <memset>
  if(htim_base->Instance==TIM1)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a71      	ldr	r2, [pc, #452]	@ (8000fb8 <HAL_TIM_Base_MspInit+0x1e4>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d11e      	bne.n	8000e34 <HAL_TIM_Base_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000df6:	4b71      	ldr	r3, [pc, #452]	@ (8000fbc <HAL_TIM_Base_MspInit+0x1e8>)
 8000df8:	699a      	ldr	r2, [r3, #24]
 8000dfa:	4b70      	ldr	r3, [pc, #448]	@ (8000fbc <HAL_TIM_Base_MspInit+0x1e8>)
 8000dfc:	2180      	movs	r1, #128	@ 0x80
 8000dfe:	0109      	lsls	r1, r1, #4
 8000e00:	430a      	orrs	r2, r1
 8000e02:	619a      	str	r2, [r3, #24]
 8000e04:	4b6d      	ldr	r3, [pc, #436]	@ (8000fbc <HAL_TIM_Base_MspInit+0x1e8>)
 8000e06:	699a      	ldr	r2, [r3, #24]
 8000e08:	2380      	movs	r3, #128	@ 0x80
 8000e0a:	011b      	lsls	r3, r3, #4
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	623b      	str	r3, [r7, #32]
 8000e10:	6a3b      	ldr	r3, [r7, #32]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	200d      	movs	r0, #13
 8000e18:	f000 fcac 	bl	8001774 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000e1c:	200d      	movs	r0, #13
 8000e1e:	f000 fcbe 	bl	800179e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2100      	movs	r1, #0
 8000e26:	200e      	movs	r0, #14
 8000e28:	f000 fca4 	bl	8001774 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000e2c:	200e      	movs	r0, #14
 8000e2e:	f000 fcb6 	bl	800179e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000e32:	e0bd      	b.n	8000fb0 <HAL_TIM_Base_MspInit+0x1dc>
  else if(htim_base->Instance==TIM2)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	2380      	movs	r3, #128	@ 0x80
 8000e3a:	05db      	lsls	r3, r3, #23
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d139      	bne.n	8000eb4 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e40:	4b5e      	ldr	r3, [pc, #376]	@ (8000fbc <HAL_TIM_Base_MspInit+0x1e8>)
 8000e42:	69da      	ldr	r2, [r3, #28]
 8000e44:	4b5d      	ldr	r3, [pc, #372]	@ (8000fbc <HAL_TIM_Base_MspInit+0x1e8>)
 8000e46:	2101      	movs	r1, #1
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	61da      	str	r2, [r3, #28]
 8000e4c:	4b5b      	ldr	r3, [pc, #364]	@ (8000fbc <HAL_TIM_Base_MspInit+0x1e8>)
 8000e4e:	69db      	ldr	r3, [r3, #28]
 8000e50:	2201      	movs	r2, #1
 8000e52:	4013      	ands	r3, r2
 8000e54:	61fb      	str	r3, [r7, #28]
 8000e56:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e58:	4b58      	ldr	r3, [pc, #352]	@ (8000fbc <HAL_TIM_Base_MspInit+0x1e8>)
 8000e5a:	695a      	ldr	r2, [r3, #20]
 8000e5c:	4b57      	ldr	r3, [pc, #348]	@ (8000fbc <HAL_TIM_Base_MspInit+0x1e8>)
 8000e5e:	2180      	movs	r1, #128	@ 0x80
 8000e60:	0289      	lsls	r1, r1, #10
 8000e62:	430a      	orrs	r2, r1
 8000e64:	615a      	str	r2, [r3, #20]
 8000e66:	4b55      	ldr	r3, [pc, #340]	@ (8000fbc <HAL_TIM_Base_MspInit+0x1e8>)
 8000e68:	695a      	ldr	r2, [r3, #20]
 8000e6a:	2380      	movs	r3, #128	@ 0x80
 8000e6c:	029b      	lsls	r3, r3, #10
 8000e6e:	4013      	ands	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
 8000e72:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e74:	2124      	movs	r1, #36	@ 0x24
 8000e76:	187b      	adds	r3, r7, r1
 8000e78:	2203      	movs	r2, #3
 8000e7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	187b      	adds	r3, r7, r1
 8000e7e:	2202      	movs	r2, #2
 8000e80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	187b      	adds	r3, r7, r1
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	187b      	adds	r3, r7, r1
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000e8e:	187b      	adds	r3, r7, r1
 8000e90:	2202      	movs	r2, #2
 8000e92:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e94:	187a      	adds	r2, r7, r1
 8000e96:	2390      	movs	r3, #144	@ 0x90
 8000e98:	05db      	lsls	r3, r3, #23
 8000e9a:	0011      	movs	r1, r2
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f000 fd19 	bl	80018d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	200f      	movs	r0, #15
 8000ea8:	f000 fc64 	bl	8001774 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000eac:	200f      	movs	r0, #15
 8000eae:	f000 fc76 	bl	800179e <HAL_NVIC_EnableIRQ>
}
 8000eb2:	e07d      	b.n	8000fb0 <HAL_TIM_Base_MspInit+0x1dc>
  else if(htim_base->Instance==TIM3)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a41      	ldr	r2, [pc, #260]	@ (8000fc0 <HAL_TIM_Base_MspInit+0x1ec>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d138      	bne.n	8000f30 <HAL_TIM_Base_MspInit+0x15c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ebe:	4b3f      	ldr	r3, [pc, #252]	@ (8000fbc <HAL_TIM_Base_MspInit+0x1e8>)
 8000ec0:	69da      	ldr	r2, [r3, #28]
 8000ec2:	4b3e      	ldr	r3, [pc, #248]	@ (8000fbc <HAL_TIM_Base_MspInit+0x1e8>)
 8000ec4:	2102      	movs	r1, #2
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	61da      	str	r2, [r3, #28]
 8000eca:	4b3c      	ldr	r3, [pc, #240]	@ (8000fbc <HAL_TIM_Base_MspInit+0x1e8>)
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	2202      	movs	r2, #2
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed6:	4b39      	ldr	r3, [pc, #228]	@ (8000fbc <HAL_TIM_Base_MspInit+0x1e8>)
 8000ed8:	695a      	ldr	r2, [r3, #20]
 8000eda:	4b38      	ldr	r3, [pc, #224]	@ (8000fbc <HAL_TIM_Base_MspInit+0x1e8>)
 8000edc:	2180      	movs	r1, #128	@ 0x80
 8000ede:	02c9      	lsls	r1, r1, #11
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	615a      	str	r2, [r3, #20]
 8000ee4:	4b35      	ldr	r3, [pc, #212]	@ (8000fbc <HAL_TIM_Base_MspInit+0x1e8>)
 8000ee6:	695a      	ldr	r2, [r3, #20]
 8000ee8:	2380      	movs	r3, #128	@ 0x80
 8000eea:	02db      	lsls	r3, r3, #11
 8000eec:	4013      	ands	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ef2:	2124      	movs	r1, #36	@ 0x24
 8000ef4:	187b      	adds	r3, r7, r1
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	187b      	adds	r3, r7, r1
 8000efc:	2202      	movs	r2, #2
 8000efe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	187b      	adds	r3, r7, r1
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	187b      	adds	r3, r7, r1
 8000f08:	2200      	movs	r2, #0
 8000f0a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	2201      	movs	r2, #1
 8000f10:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f12:	187b      	adds	r3, r7, r1
 8000f14:	4a2b      	ldr	r2, [pc, #172]	@ (8000fc4 <HAL_TIM_Base_MspInit+0x1f0>)
 8000f16:	0019      	movs	r1, r3
 8000f18:	0010      	movs	r0, r2
 8000f1a:	f000 fcdb 	bl	80018d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2100      	movs	r1, #0
 8000f22:	2010      	movs	r0, #16
 8000f24:	f000 fc26 	bl	8001774 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f28:	2010      	movs	r0, #16
 8000f2a:	f000 fc38 	bl	800179e <HAL_NVIC_EnableIRQ>
}
 8000f2e:	e03f      	b.n	8000fb0 <HAL_TIM_Base_MspInit+0x1dc>
  else if(htim_base->Instance==TIM14)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a24      	ldr	r2, [pc, #144]	@ (8000fc8 <HAL_TIM_Base_MspInit+0x1f4>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d13a      	bne.n	8000fb0 <HAL_TIM_Base_MspInit+0x1dc>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000f3a:	4b20      	ldr	r3, [pc, #128]	@ (8000fbc <HAL_TIM_Base_MspInit+0x1e8>)
 8000f3c:	69da      	ldr	r2, [r3, #28]
 8000f3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fbc <HAL_TIM_Base_MspInit+0x1e8>)
 8000f40:	2180      	movs	r1, #128	@ 0x80
 8000f42:	0049      	lsls	r1, r1, #1
 8000f44:	430a      	orrs	r2, r1
 8000f46:	61da      	str	r2, [r3, #28]
 8000f48:	4b1c      	ldr	r3, [pc, #112]	@ (8000fbc <HAL_TIM_Base_MspInit+0x1e8>)
 8000f4a:	69da      	ldr	r2, [r3, #28]
 8000f4c:	2380      	movs	r3, #128	@ 0x80
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	4013      	ands	r3, r2
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	4b19      	ldr	r3, [pc, #100]	@ (8000fbc <HAL_TIM_Base_MspInit+0x1e8>)
 8000f58:	695a      	ldr	r2, [r3, #20]
 8000f5a:	4b18      	ldr	r3, [pc, #96]	@ (8000fbc <HAL_TIM_Base_MspInit+0x1e8>)
 8000f5c:	2180      	movs	r1, #128	@ 0x80
 8000f5e:	0289      	lsls	r1, r1, #10
 8000f60:	430a      	orrs	r2, r1
 8000f62:	615a      	str	r2, [r3, #20]
 8000f64:	4b15      	ldr	r3, [pc, #84]	@ (8000fbc <HAL_TIM_Base_MspInit+0x1e8>)
 8000f66:	695a      	ldr	r2, [r3, #20]
 8000f68:	2380      	movs	r3, #128	@ 0x80
 8000f6a:	029b      	lsls	r3, r3, #10
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f72:	2124      	movs	r1, #36	@ 0x24
 8000f74:	187b      	adds	r3, r7, r1
 8000f76:	2210      	movs	r2, #16
 8000f78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	187b      	adds	r3, r7, r1
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	187b      	adds	r3, r7, r1
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	187b      	adds	r3, r7, r1
 8000f88:	2200      	movs	r2, #0
 8000f8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8000f8c:	187b      	adds	r3, r7, r1
 8000f8e:	2204      	movs	r2, #4
 8000f90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f92:	187a      	adds	r2, r7, r1
 8000f94:	2390      	movs	r3, #144	@ 0x90
 8000f96:	05db      	lsls	r3, r3, #23
 8000f98:	0011      	movs	r1, r2
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f000 fc9a 	bl	80018d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	2013      	movs	r0, #19
 8000fa6:	f000 fbe5 	bl	8001774 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000faa:	2013      	movs	r0, #19
 8000fac:	f000 fbf7 	bl	800179e <HAL_NVIC_EnableIRQ>
}
 8000fb0:	46c0      	nop			@ (mov r8, r8)
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b00e      	add	sp, #56	@ 0x38
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40012c00 	.word	0x40012c00
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40000400 	.word	0x40000400
 8000fc4:	48000400 	.word	0x48000400
 8000fc8:	40002000 	.word	0x40002000

08000fcc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fcc:	b590      	push	{r4, r7, lr}
 8000fce:	b08b      	sub	sp, #44	@ 0x2c
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	2414      	movs	r4, #20
 8000fd6:	193b      	adds	r3, r7, r4
 8000fd8:	0018      	movs	r0, r3
 8000fda:	2314      	movs	r3, #20
 8000fdc:	001a      	movs	r2, r3
 8000fde:	2100      	movs	r1, #0
 8000fe0:	f003 ff10 	bl	8004e04 <memset>
  if(htim->Instance==TIM1)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a2b      	ldr	r2, [pc, #172]	@ (8001098 <HAL_TIM_MspPostInit+0xcc>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d126      	bne.n	800103c <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	4b2b      	ldr	r3, [pc, #172]	@ (800109c <HAL_TIM_MspPostInit+0xd0>)
 8000ff0:	695a      	ldr	r2, [r3, #20]
 8000ff2:	4b2a      	ldr	r3, [pc, #168]	@ (800109c <HAL_TIM_MspPostInit+0xd0>)
 8000ff4:	2180      	movs	r1, #128	@ 0x80
 8000ff6:	0289      	lsls	r1, r1, #10
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	615a      	str	r2, [r3, #20]
 8000ffc:	4b27      	ldr	r3, [pc, #156]	@ (800109c <HAL_TIM_MspPostInit+0xd0>)
 8000ffe:	695a      	ldr	r2, [r3, #20]
 8001000:	2380      	movs	r3, #128	@ 0x80
 8001002:	029b      	lsls	r3, r3, #10
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800100a:	193b      	adds	r3, r7, r4
 800100c:	22e0      	movs	r2, #224	@ 0xe0
 800100e:	00d2      	lsls	r2, r2, #3
 8001010:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	0021      	movs	r1, r4
 8001014:	187b      	adds	r3, r7, r1
 8001016:	2202      	movs	r2, #2
 8001018:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	187b      	adds	r3, r7, r1
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	187b      	adds	r3, r7, r1
 8001022:	2200      	movs	r2, #0
 8001024:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001026:	187b      	adds	r3, r7, r1
 8001028:	2202      	movs	r2, #2
 800102a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102c:	187a      	adds	r2, r7, r1
 800102e:	2390      	movs	r3, #144	@ 0x90
 8001030:	05db      	lsls	r3, r3, #23
 8001032:	0011      	movs	r1, r2
 8001034:	0018      	movs	r0, r3
 8001036:	f000 fc4d 	bl	80018d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800103a:	e028      	b.n	800108e <HAL_TIM_MspPostInit+0xc2>
  else if(htim->Instance==TIM3)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a17      	ldr	r2, [pc, #92]	@ (80010a0 <HAL_TIM_MspPostInit+0xd4>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d123      	bne.n	800108e <HAL_TIM_MspPostInit+0xc2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001046:	4b15      	ldr	r3, [pc, #84]	@ (800109c <HAL_TIM_MspPostInit+0xd0>)
 8001048:	695a      	ldr	r2, [r3, #20]
 800104a:	4b14      	ldr	r3, [pc, #80]	@ (800109c <HAL_TIM_MspPostInit+0xd0>)
 800104c:	2180      	movs	r1, #128	@ 0x80
 800104e:	02c9      	lsls	r1, r1, #11
 8001050:	430a      	orrs	r2, r1
 8001052:	615a      	str	r2, [r3, #20]
 8001054:	4b11      	ldr	r3, [pc, #68]	@ (800109c <HAL_TIM_MspPostInit+0xd0>)
 8001056:	695a      	ldr	r2, [r3, #20]
 8001058:	2380      	movs	r3, #128	@ 0x80
 800105a:	02db      	lsls	r3, r3, #11
 800105c:	4013      	ands	r3, r2
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001062:	2114      	movs	r1, #20
 8001064:	187b      	adds	r3, r7, r1
 8001066:	2230      	movs	r2, #48	@ 0x30
 8001068:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106a:	187b      	adds	r3, r7, r1
 800106c:	2202      	movs	r2, #2
 800106e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	187b      	adds	r3, r7, r1
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	187b      	adds	r3, r7, r1
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800107c:	187b      	adds	r3, r7, r1
 800107e:	2201      	movs	r2, #1
 8001080:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001082:	187b      	adds	r3, r7, r1
 8001084:	4a07      	ldr	r2, [pc, #28]	@ (80010a4 <HAL_TIM_MspPostInit+0xd8>)
 8001086:	0019      	movs	r1, r3
 8001088:	0010      	movs	r0, r2
 800108a:	f000 fc23 	bl	80018d4 <HAL_GPIO_Init>
}
 800108e:	46c0      	nop			@ (mov r8, r8)
 8001090:	46bd      	mov	sp, r7
 8001092:	b00b      	add	sp, #44	@ 0x2c
 8001094:	bd90      	pop	{r4, r7, pc}
 8001096:	46c0      	nop			@ (mov r8, r8)
 8001098:	40012c00 	.word	0x40012c00
 800109c:	40021000 	.word	0x40021000
 80010a0:	40000400 	.word	0x40000400
 80010a4:	48000400 	.word	0x48000400

080010a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b08b      	sub	sp, #44	@ 0x2c
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	2414      	movs	r4, #20
 80010b2:	193b      	adds	r3, r7, r4
 80010b4:	0018      	movs	r0, r3
 80010b6:	2314      	movs	r3, #20
 80010b8:	001a      	movs	r2, r3
 80010ba:	2100      	movs	r1, #0
 80010bc:	f003 fea2 	bl	8004e04 <memset>
  if(huart->Instance==USART2)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a20      	ldr	r2, [pc, #128]	@ (8001148 <HAL_UART_MspInit+0xa0>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d13a      	bne.n	8001140 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010ca:	4b20      	ldr	r3, [pc, #128]	@ (800114c <HAL_UART_MspInit+0xa4>)
 80010cc:	69da      	ldr	r2, [r3, #28]
 80010ce:	4b1f      	ldr	r3, [pc, #124]	@ (800114c <HAL_UART_MspInit+0xa4>)
 80010d0:	2180      	movs	r1, #128	@ 0x80
 80010d2:	0289      	lsls	r1, r1, #10
 80010d4:	430a      	orrs	r2, r1
 80010d6:	61da      	str	r2, [r3, #28]
 80010d8:	4b1c      	ldr	r3, [pc, #112]	@ (800114c <HAL_UART_MspInit+0xa4>)
 80010da:	69da      	ldr	r2, [r3, #28]
 80010dc:	2380      	movs	r3, #128	@ 0x80
 80010de:	029b      	lsls	r3, r3, #10
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	4b19      	ldr	r3, [pc, #100]	@ (800114c <HAL_UART_MspInit+0xa4>)
 80010e8:	695a      	ldr	r2, [r3, #20]
 80010ea:	4b18      	ldr	r3, [pc, #96]	@ (800114c <HAL_UART_MspInit+0xa4>)
 80010ec:	2180      	movs	r1, #128	@ 0x80
 80010ee:	0289      	lsls	r1, r1, #10
 80010f0:	430a      	orrs	r2, r1
 80010f2:	615a      	str	r2, [r3, #20]
 80010f4:	4b15      	ldr	r3, [pc, #84]	@ (800114c <HAL_UART_MspInit+0xa4>)
 80010f6:	695a      	ldr	r2, [r3, #20]
 80010f8:	2380      	movs	r3, #128	@ 0x80
 80010fa:	029b      	lsls	r3, r3, #10
 80010fc:	4013      	ands	r3, r2
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001102:	0021      	movs	r1, r4
 8001104:	187b      	adds	r3, r7, r1
 8001106:	220c      	movs	r2, #12
 8001108:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	187b      	adds	r3, r7, r1
 800110c:	2202      	movs	r2, #2
 800110e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	187b      	adds	r3, r7, r1
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001116:	187b      	adds	r3, r7, r1
 8001118:	2203      	movs	r2, #3
 800111a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800111c:	187b      	adds	r3, r7, r1
 800111e:	2201      	movs	r2, #1
 8001120:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	187a      	adds	r2, r7, r1
 8001124:	2390      	movs	r3, #144	@ 0x90
 8001126:	05db      	lsls	r3, r3, #23
 8001128:	0011      	movs	r1, r2
 800112a:	0018      	movs	r0, r3
 800112c:	f000 fbd2 	bl	80018d4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001130:	2200      	movs	r2, #0
 8001132:	2100      	movs	r1, #0
 8001134:	201c      	movs	r0, #28
 8001136:	f000 fb1d 	bl	8001774 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800113a:	201c      	movs	r0, #28
 800113c:	f000 fb2f 	bl	800179e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001140:	46c0      	nop			@ (mov r8, r8)
 8001142:	46bd      	mov	sp, r7
 8001144:	b00b      	add	sp, #44	@ 0x2c
 8001146:	bd90      	pop	{r4, r7, pc}
 8001148:	40004400 	.word	0x40004400
 800114c:	40021000 	.word	0x40021000

08001150 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001154:	46c0      	nop			@ (mov r8, r8)
 8001156:	e7fd      	b.n	8001154 <NMI_Handler+0x4>

08001158 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800115c:	46c0      	nop			@ (mov r8, r8)
 800115e:	e7fd      	b.n	800115c <HardFault_Handler+0x4>

08001160 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001164:	46c0      	nop			@ (mov r8, r8)
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800116e:	46c0      	nop			@ (mov r8, r8)
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001178:	f000 f912 	bl	80013a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800117c:	46c0      	nop			@ (mov r8, r8)
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001188:	4b03      	ldr	r3, [pc, #12]	@ (8001198 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 800118a:	0018      	movs	r0, r3
 800118c:	f001 fe12 	bl	8002db4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001190:	46c0      	nop			@ (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	46c0      	nop			@ (mov r8, r8)
 8001198:	20000140 	.word	0x20000140

0800119c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011a0:	4b03      	ldr	r3, [pc, #12]	@ (80011b0 <TIM1_CC_IRQHandler+0x14>)
 80011a2:	0018      	movs	r0, r3
 80011a4:	f001 fe06 	bl	8002db4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80011a8:	46c0      	nop			@ (mov r8, r8)
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	46c0      	nop			@ (mov r8, r8)
 80011b0:	20000140 	.word	0x20000140

080011b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011b8:	4b03      	ldr	r3, [pc, #12]	@ (80011c8 <TIM2_IRQHandler+0x14>)
 80011ba:	0018      	movs	r0, r3
 80011bc:	f001 fdfa 	bl	8002db4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011c0:	46c0      	nop			@ (mov r8, r8)
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	46c0      	nop			@ (mov r8, r8)
 80011c8:	20000188 	.word	0x20000188

080011cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	//FEB_Test_PWM();

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011d0:	4b03      	ldr	r3, [pc, #12]	@ (80011e0 <TIM3_IRQHandler+0x14>)
 80011d2:	0018      	movs	r0, r3
 80011d4:	f001 fdee 	bl	8002db4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011d8:	46c0      	nop			@ (mov r8, r8)
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	46c0      	nop			@ (mov r8, r8)
 80011e0:	200001d0 	.word	0x200001d0

080011e4 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80011e8:	4b03      	ldr	r3, [pc, #12]	@ (80011f8 <TIM14_IRQHandler+0x14>)
 80011ea:	0018      	movs	r0, r3
 80011ec:	f001 fde2 	bl	8002db4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80011f0:	46c0      	nop			@ (mov r8, r8)
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	46c0      	nop			@ (mov r8, r8)
 80011f8:	20000218 	.word	0x20000218

080011fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001200:	4b03      	ldr	r3, [pc, #12]	@ (8001210 <USART2_IRQHandler+0x14>)
 8001202:	0018      	movs	r0, r3
 8001204:	f002 ff2e 	bl	8004064 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001208:	46c0      	nop			@ (mov r8, r8)
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	46c0      	nop			@ (mov r8, r8)
 8001210:	20000260 	.word	0x20000260

08001214 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800121c:	4a14      	ldr	r2, [pc, #80]	@ (8001270 <_sbrk+0x5c>)
 800121e:	4b15      	ldr	r3, [pc, #84]	@ (8001274 <_sbrk+0x60>)
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001228:	4b13      	ldr	r3, [pc, #76]	@ (8001278 <_sbrk+0x64>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d102      	bne.n	8001236 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001230:	4b11      	ldr	r3, [pc, #68]	@ (8001278 <_sbrk+0x64>)
 8001232:	4a12      	ldr	r2, [pc, #72]	@ (800127c <_sbrk+0x68>)
 8001234:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001236:	4b10      	ldr	r3, [pc, #64]	@ (8001278 <_sbrk+0x64>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	18d3      	adds	r3, r2, r3
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	429a      	cmp	r2, r3
 8001242:	d207      	bcs.n	8001254 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001244:	f003 fde6 	bl	8004e14 <__errno>
 8001248:	0003      	movs	r3, r0
 800124a:	220c      	movs	r2, #12
 800124c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800124e:	2301      	movs	r3, #1
 8001250:	425b      	negs	r3, r3
 8001252:	e009      	b.n	8001268 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001254:	4b08      	ldr	r3, [pc, #32]	@ (8001278 <_sbrk+0x64>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800125a:	4b07      	ldr	r3, [pc, #28]	@ (8001278 <_sbrk+0x64>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	18d2      	adds	r2, r2, r3
 8001262:	4b05      	ldr	r3, [pc, #20]	@ (8001278 <_sbrk+0x64>)
 8001264:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001266:	68fb      	ldr	r3, [r7, #12]
}
 8001268:	0018      	movs	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	b006      	add	sp, #24
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20001800 	.word	0x20001800
 8001274:	00000400 	.word	0x00000400
 8001278:	200002e8 	.word	0x200002e8
 800127c:	20000438 	.word	0x20000438

08001280 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001284:	46c0      	nop			@ (mov r8, r8)
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800128c:	4813      	ldr	r0, [pc, #76]	@ (80012dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800128e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001290:	f7ff fff6 	bl	8001280 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001294:	4812      	ldr	r0, [pc, #72]	@ (80012e0 <LoopForever+0x6>)
    LDR R1, [R0]
 8001296:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001298:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800129a:	4a12      	ldr	r2, [pc, #72]	@ (80012e4 <LoopForever+0xa>)
    CMP R1, R2
 800129c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800129e:	d105      	bne.n	80012ac <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80012a0:	4811      	ldr	r0, [pc, #68]	@ (80012e8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80012a2:	4912      	ldr	r1, [pc, #72]	@ (80012ec <LoopForever+0x12>)
    STR R1, [R0]
 80012a4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80012a6:	4812      	ldr	r0, [pc, #72]	@ (80012f0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80012a8:	4912      	ldr	r1, [pc, #72]	@ (80012f4 <LoopForever+0x1a>)
    STR R1, [R0]
 80012aa:	6001      	str	r1, [r0, #0]

080012ac <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012ac:	4812      	ldr	r0, [pc, #72]	@ (80012f8 <LoopForever+0x1e>)
  ldr r1, =_edata
 80012ae:	4913      	ldr	r1, [pc, #76]	@ (80012fc <LoopForever+0x22>)
  ldr r2, =_sidata
 80012b0:	4a13      	ldr	r2, [pc, #76]	@ (8001300 <LoopForever+0x26>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b4:	e002      	b.n	80012bc <LoopCopyDataInit>

080012b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ba:	3304      	adds	r3, #4

080012bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c0:	d3f9      	bcc.n	80012b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012c2:	4a10      	ldr	r2, [pc, #64]	@ (8001304 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80012c4:	4c10      	ldr	r4, [pc, #64]	@ (8001308 <LoopForever+0x2e>)
  movs r3, #0
 80012c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c8:	e001      	b.n	80012ce <LoopFillZerobss>

080012ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012cc:	3204      	adds	r2, #4

080012ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d0:	d3fb      	bcc.n	80012ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012d2:	f003 fda5 	bl	8004e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012d6:	f7ff f905 	bl	80004e4 <main>

080012da <LoopForever>:

LoopForever:
    b LoopForever
 80012da:	e7fe      	b.n	80012da <LoopForever>
  ldr   r0, =_estack
 80012dc:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80012e0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80012e4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80012e8:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80012ec:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80012f0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80012f4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80012f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012fc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001300:	080057e4 	.word	0x080057e4
  ldr r2, =_sbss
 8001304:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001308:	20000438 	.word	0x20000438

0800130c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800130c:	e7fe      	b.n	800130c <ADC1_IRQHandler>
	...

08001310 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001314:	4b07      	ldr	r3, [pc, #28]	@ (8001334 <HAL_Init+0x24>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <HAL_Init+0x24>)
 800131a:	2110      	movs	r1, #16
 800131c:	430a      	orrs	r2, r1
 800131e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001320:	2003      	movs	r0, #3
 8001322:	f000 f809 	bl	8001338 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001326:	f7ff fce3 	bl	8000cf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800132a:	2300      	movs	r3, #0
}
 800132c:	0018      	movs	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	46c0      	nop			@ (mov r8, r8)
 8001334:	40022000 	.word	0x40022000

08001338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001338:	b590      	push	{r4, r7, lr}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001340:	4b14      	ldr	r3, [pc, #80]	@ (8001394 <HAL_InitTick+0x5c>)
 8001342:	681c      	ldr	r4, [r3, #0]
 8001344:	4b14      	ldr	r3, [pc, #80]	@ (8001398 <HAL_InitTick+0x60>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	0019      	movs	r1, r3
 800134a:	23fa      	movs	r3, #250	@ 0xfa
 800134c:	0098      	lsls	r0, r3, #2
 800134e:	f7fe fee5 	bl	800011c <__udivsi3>
 8001352:	0003      	movs	r3, r0
 8001354:	0019      	movs	r1, r3
 8001356:	0020      	movs	r0, r4
 8001358:	f7fe fee0 	bl	800011c <__udivsi3>
 800135c:	0003      	movs	r3, r0
 800135e:	0018      	movs	r0, r3
 8001360:	f000 fa2d 	bl	80017be <HAL_SYSTICK_Config>
 8001364:	1e03      	subs	r3, r0, #0
 8001366:	d001      	beq.n	800136c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e00f      	b.n	800138c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b03      	cmp	r3, #3
 8001370:	d80b      	bhi.n	800138a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	2301      	movs	r3, #1
 8001376:	425b      	negs	r3, r3
 8001378:	2200      	movs	r2, #0
 800137a:	0018      	movs	r0, r3
 800137c:	f000 f9fa 	bl	8001774 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001380:	4b06      	ldr	r3, [pc, #24]	@ (800139c <HAL_InitTick+0x64>)
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001386:	2300      	movs	r3, #0
 8001388:	e000      	b.n	800138c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
}
 800138c:	0018      	movs	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	b003      	add	sp, #12
 8001392:	bd90      	pop	{r4, r7, pc}
 8001394:	20000000 	.word	0x20000000
 8001398:	20000008 	.word	0x20000008
 800139c:	20000004 	.word	0x20000004

080013a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013a4:	4b05      	ldr	r3, [pc, #20]	@ (80013bc <HAL_IncTick+0x1c>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	001a      	movs	r2, r3
 80013aa:	4b05      	ldr	r3, [pc, #20]	@ (80013c0 <HAL_IncTick+0x20>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	18d2      	adds	r2, r2, r3
 80013b0:	4b03      	ldr	r3, [pc, #12]	@ (80013c0 <HAL_IncTick+0x20>)
 80013b2:	601a      	str	r2, [r3, #0]
}
 80013b4:	46c0      	nop			@ (mov r8, r8)
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	46c0      	nop			@ (mov r8, r8)
 80013bc:	20000008 	.word	0x20000008
 80013c0:	200002ec 	.word	0x200002ec

080013c4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  return uwTick;
 80013c8:	4b02      	ldr	r3, [pc, #8]	@ (80013d4 <HAL_GetTick+0x10>)
 80013ca:	681b      	ldr	r3, [r3, #0]
}
 80013cc:	0018      	movs	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	46c0      	nop			@ (mov r8, r8)
 80013d4:	200002ec 	.word	0x200002ec

080013d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013e0:	f7ff fff0 	bl	80013c4 <HAL_GetTick>
 80013e4:	0003      	movs	r3, r0
 80013e6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	3301      	adds	r3, #1
 80013f0:	d005      	beq.n	80013fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013f2:	4b0a      	ldr	r3, [pc, #40]	@ (800141c <HAL_Delay+0x44>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	001a      	movs	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	189b      	adds	r3, r3, r2
 80013fc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80013fe:	46c0      	nop			@ (mov r8, r8)
 8001400:	f7ff ffe0 	bl	80013c4 <HAL_GetTick>
 8001404:	0002      	movs	r2, r0
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	429a      	cmp	r2, r3
 800140e:	d8f7      	bhi.n	8001400 <HAL_Delay+0x28>
  {
  }
}
 8001410:	46c0      	nop			@ (mov r8, r8)
 8001412:	46c0      	nop			@ (mov r8, r8)
 8001414:	46bd      	mov	sp, r7
 8001416:	b004      	add	sp, #16
 8001418:	bd80      	pop	{r7, pc}
 800141a:	46c0      	nop			@ (mov r8, r8)
 800141c:	20000008 	.word	0x20000008

08001420 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e0f0      	b.n	8001614 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2220      	movs	r2, #32
 8001436:	5c9b      	ldrb	r3, [r3, r2]
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d103      	bne.n	8001446 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	0018      	movs	r0, r3
 8001442:	f7ff fc79 	bl	8000d38 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2101      	movs	r1, #1
 8001452:	430a      	orrs	r2, r1
 8001454:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001456:	f7ff ffb5 	bl	80013c4 <HAL_GetTick>
 800145a:	0003      	movs	r3, r0
 800145c:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800145e:	e013      	b.n	8001488 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001460:	f7ff ffb0 	bl	80013c4 <HAL_GetTick>
 8001464:	0002      	movs	r2, r0
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b0a      	cmp	r3, #10
 800146c:	d90c      	bls.n	8001488 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001472:	2280      	movs	r2, #128	@ 0x80
 8001474:	0292      	lsls	r2, r2, #10
 8001476:	431a      	orrs	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2220      	movs	r2, #32
 8001480:	2105      	movs	r1, #5
 8001482:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e0c5      	b.n	8001614 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	4013      	ands	r3, r2
 8001492:	d0e5      	beq.n	8001460 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2102      	movs	r1, #2
 80014a0:	438a      	bics	r2, r1
 80014a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014a4:	f7ff ff8e 	bl	80013c4 <HAL_GetTick>
 80014a8:	0003      	movs	r3, r0
 80014aa:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014ac:	e013      	b.n	80014d6 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014ae:	f7ff ff89 	bl	80013c4 <HAL_GetTick>
 80014b2:	0002      	movs	r2, r0
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b0a      	cmp	r3, #10
 80014ba:	d90c      	bls.n	80014d6 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c0:	2280      	movs	r2, #128	@ 0x80
 80014c2:	0292      	lsls	r2, r2, #10
 80014c4:	431a      	orrs	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2220      	movs	r2, #32
 80014ce:	2105      	movs	r1, #5
 80014d0:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e09e      	b.n	8001614 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2202      	movs	r2, #2
 80014de:	4013      	ands	r3, r2
 80014e0:	d1e5      	bne.n	80014ae <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	7e1b      	ldrb	r3, [r3, #24]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d108      	bne.n	80014fc <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2180      	movs	r1, #128	@ 0x80
 80014f6:	430a      	orrs	r2, r1
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	e007      	b.n	800150c <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2180      	movs	r1, #128	@ 0x80
 8001508:	438a      	bics	r2, r1
 800150a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	7e5b      	ldrb	r3, [r3, #25]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d108      	bne.n	8001526 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2140      	movs	r1, #64	@ 0x40
 8001520:	430a      	orrs	r2, r1
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	e007      	b.n	8001536 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2140      	movs	r1, #64	@ 0x40
 8001532:	438a      	bics	r2, r1
 8001534:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	7e9b      	ldrb	r3, [r3, #26]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d108      	bne.n	8001550 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2120      	movs	r1, #32
 800154a:	430a      	orrs	r2, r1
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	e007      	b.n	8001560 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2120      	movs	r1, #32
 800155c:	438a      	bics	r2, r1
 800155e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7edb      	ldrb	r3, [r3, #27]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d108      	bne.n	800157a <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2110      	movs	r1, #16
 8001574:	438a      	bics	r2, r1
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	e007      	b.n	800158a <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2110      	movs	r1, #16
 8001586:	430a      	orrs	r2, r1
 8001588:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	7f1b      	ldrb	r3, [r3, #28]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d108      	bne.n	80015a4 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2108      	movs	r1, #8
 800159e:	430a      	orrs	r2, r1
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	e007      	b.n	80015b4 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2108      	movs	r1, #8
 80015b0:	438a      	bics	r2, r1
 80015b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	7f5b      	ldrb	r3, [r3, #29]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d108      	bne.n	80015ce <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2104      	movs	r1, #4
 80015c8:	430a      	orrs	r2, r1
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	e007      	b.n	80015de <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2104      	movs	r1, #4
 80015da:	438a      	bics	r2, r1
 80015dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689a      	ldr	r2, [r3, #8]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	431a      	orrs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	431a      	orrs	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	431a      	orrs	r2, r3
 80015f4:	0011      	movs	r1, r2
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	1e5a      	subs	r2, r3, #1
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	430a      	orrs	r2, r1
 8001602:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2220      	movs	r2, #32
 800160e:	2101      	movs	r1, #1
 8001610:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001612:	2300      	movs	r3, #0
}
 8001614:	0018      	movs	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	b004      	add	sp, #16
 800161a:	bd80      	pop	{r7, pc}

0800161c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	0002      	movs	r2, r0
 8001624:	1dfb      	adds	r3, r7, #7
 8001626:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001628:	1dfb      	adds	r3, r7, #7
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b7f      	cmp	r3, #127	@ 0x7f
 800162e:	d809      	bhi.n	8001644 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001630:	1dfb      	adds	r3, r7, #7
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	001a      	movs	r2, r3
 8001636:	231f      	movs	r3, #31
 8001638:	401a      	ands	r2, r3
 800163a:	4b04      	ldr	r3, [pc, #16]	@ (800164c <__NVIC_EnableIRQ+0x30>)
 800163c:	2101      	movs	r1, #1
 800163e:	4091      	lsls	r1, r2
 8001640:	000a      	movs	r2, r1
 8001642:	601a      	str	r2, [r3, #0]
  }
}
 8001644:	46c0      	nop			@ (mov r8, r8)
 8001646:	46bd      	mov	sp, r7
 8001648:	b002      	add	sp, #8
 800164a:	bd80      	pop	{r7, pc}
 800164c:	e000e100 	.word	0xe000e100

08001650 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001650:	b590      	push	{r4, r7, lr}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	0002      	movs	r2, r0
 8001658:	6039      	str	r1, [r7, #0]
 800165a:	1dfb      	adds	r3, r7, #7
 800165c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800165e:	1dfb      	adds	r3, r7, #7
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b7f      	cmp	r3, #127	@ 0x7f
 8001664:	d828      	bhi.n	80016b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001666:	4a2f      	ldr	r2, [pc, #188]	@ (8001724 <__NVIC_SetPriority+0xd4>)
 8001668:	1dfb      	adds	r3, r7, #7
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	b25b      	sxtb	r3, r3
 800166e:	089b      	lsrs	r3, r3, #2
 8001670:	33c0      	adds	r3, #192	@ 0xc0
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	589b      	ldr	r3, [r3, r2]
 8001676:	1dfa      	adds	r2, r7, #7
 8001678:	7812      	ldrb	r2, [r2, #0]
 800167a:	0011      	movs	r1, r2
 800167c:	2203      	movs	r2, #3
 800167e:	400a      	ands	r2, r1
 8001680:	00d2      	lsls	r2, r2, #3
 8001682:	21ff      	movs	r1, #255	@ 0xff
 8001684:	4091      	lsls	r1, r2
 8001686:	000a      	movs	r2, r1
 8001688:	43d2      	mvns	r2, r2
 800168a:	401a      	ands	r2, r3
 800168c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	019b      	lsls	r3, r3, #6
 8001692:	22ff      	movs	r2, #255	@ 0xff
 8001694:	401a      	ands	r2, r3
 8001696:	1dfb      	adds	r3, r7, #7
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	0018      	movs	r0, r3
 800169c:	2303      	movs	r3, #3
 800169e:	4003      	ands	r3, r0
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016a4:	481f      	ldr	r0, [pc, #124]	@ (8001724 <__NVIC_SetPriority+0xd4>)
 80016a6:	1dfb      	adds	r3, r7, #7
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	b25b      	sxtb	r3, r3
 80016ac:	089b      	lsrs	r3, r3, #2
 80016ae:	430a      	orrs	r2, r1
 80016b0:	33c0      	adds	r3, #192	@ 0xc0
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80016b6:	e031      	b.n	800171c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001728 <__NVIC_SetPriority+0xd8>)
 80016ba:	1dfb      	adds	r3, r7, #7
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	0019      	movs	r1, r3
 80016c0:	230f      	movs	r3, #15
 80016c2:	400b      	ands	r3, r1
 80016c4:	3b08      	subs	r3, #8
 80016c6:	089b      	lsrs	r3, r3, #2
 80016c8:	3306      	adds	r3, #6
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	18d3      	adds	r3, r2, r3
 80016ce:	3304      	adds	r3, #4
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	1dfa      	adds	r2, r7, #7
 80016d4:	7812      	ldrb	r2, [r2, #0]
 80016d6:	0011      	movs	r1, r2
 80016d8:	2203      	movs	r2, #3
 80016da:	400a      	ands	r2, r1
 80016dc:	00d2      	lsls	r2, r2, #3
 80016de:	21ff      	movs	r1, #255	@ 0xff
 80016e0:	4091      	lsls	r1, r2
 80016e2:	000a      	movs	r2, r1
 80016e4:	43d2      	mvns	r2, r2
 80016e6:	401a      	ands	r2, r3
 80016e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	019b      	lsls	r3, r3, #6
 80016ee:	22ff      	movs	r2, #255	@ 0xff
 80016f0:	401a      	ands	r2, r3
 80016f2:	1dfb      	adds	r3, r7, #7
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	0018      	movs	r0, r3
 80016f8:	2303      	movs	r3, #3
 80016fa:	4003      	ands	r3, r0
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001700:	4809      	ldr	r0, [pc, #36]	@ (8001728 <__NVIC_SetPriority+0xd8>)
 8001702:	1dfb      	adds	r3, r7, #7
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	001c      	movs	r4, r3
 8001708:	230f      	movs	r3, #15
 800170a:	4023      	ands	r3, r4
 800170c:	3b08      	subs	r3, #8
 800170e:	089b      	lsrs	r3, r3, #2
 8001710:	430a      	orrs	r2, r1
 8001712:	3306      	adds	r3, #6
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	18c3      	adds	r3, r0, r3
 8001718:	3304      	adds	r3, #4
 800171a:	601a      	str	r2, [r3, #0]
}
 800171c:	46c0      	nop			@ (mov r8, r8)
 800171e:	46bd      	mov	sp, r7
 8001720:	b003      	add	sp, #12
 8001722:	bd90      	pop	{r4, r7, pc}
 8001724:	e000e100 	.word	0xe000e100
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	1e5a      	subs	r2, r3, #1
 8001738:	2380      	movs	r3, #128	@ 0x80
 800173a:	045b      	lsls	r3, r3, #17
 800173c:	429a      	cmp	r2, r3
 800173e:	d301      	bcc.n	8001744 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001740:	2301      	movs	r3, #1
 8001742:	e010      	b.n	8001766 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001744:	4b0a      	ldr	r3, [pc, #40]	@ (8001770 <SysTick_Config+0x44>)
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	3a01      	subs	r2, #1
 800174a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800174c:	2301      	movs	r3, #1
 800174e:	425b      	negs	r3, r3
 8001750:	2103      	movs	r1, #3
 8001752:	0018      	movs	r0, r3
 8001754:	f7ff ff7c 	bl	8001650 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001758:	4b05      	ldr	r3, [pc, #20]	@ (8001770 <SysTick_Config+0x44>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800175e:	4b04      	ldr	r3, [pc, #16]	@ (8001770 <SysTick_Config+0x44>)
 8001760:	2207      	movs	r2, #7
 8001762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001764:	2300      	movs	r3, #0
}
 8001766:	0018      	movs	r0, r3
 8001768:	46bd      	mov	sp, r7
 800176a:	b002      	add	sp, #8
 800176c:	bd80      	pop	{r7, pc}
 800176e:	46c0      	nop			@ (mov r8, r8)
 8001770:	e000e010 	.word	0xe000e010

08001774 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	60b9      	str	r1, [r7, #8]
 800177c:	607a      	str	r2, [r7, #4]
 800177e:	210f      	movs	r1, #15
 8001780:	187b      	adds	r3, r7, r1
 8001782:	1c02      	adds	r2, r0, #0
 8001784:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	187b      	adds	r3, r7, r1
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	b25b      	sxtb	r3, r3
 800178e:	0011      	movs	r1, r2
 8001790:	0018      	movs	r0, r3
 8001792:	f7ff ff5d 	bl	8001650 <__NVIC_SetPriority>
}
 8001796:	46c0      	nop			@ (mov r8, r8)
 8001798:	46bd      	mov	sp, r7
 800179a:	b004      	add	sp, #16
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	0002      	movs	r2, r0
 80017a6:	1dfb      	adds	r3, r7, #7
 80017a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017aa:	1dfb      	adds	r3, r7, #7
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	b25b      	sxtb	r3, r3
 80017b0:	0018      	movs	r0, r3
 80017b2:	f7ff ff33 	bl	800161c <__NVIC_EnableIRQ>
}
 80017b6:	46c0      	nop			@ (mov r8, r8)
 80017b8:	46bd      	mov	sp, r7
 80017ba:	b002      	add	sp, #8
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	0018      	movs	r0, r3
 80017ca:	f7ff ffaf 	bl	800172c <SysTick_Config>
 80017ce:	0003      	movs	r3, r0
}
 80017d0:	0018      	movs	r0, r3
 80017d2:	46bd      	mov	sp, r7
 80017d4:	b002      	add	sp, #8
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2221      	movs	r2, #33	@ 0x21
 80017e4:	5c9b      	ldrb	r3, [r3, r2]
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d008      	beq.n	80017fe <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2204      	movs	r2, #4
 80017f0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2220      	movs	r2, #32
 80017f6:	2100      	movs	r1, #0
 80017f8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e020      	b.n	8001840 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	210e      	movs	r1, #14
 800180a:	438a      	bics	r2, r1
 800180c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2101      	movs	r1, #1
 800181a:	438a      	bics	r2, r1
 800181c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001826:	2101      	movs	r1, #1
 8001828:	4091      	lsls	r1, r2
 800182a:	000a      	movs	r2, r1
 800182c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2221      	movs	r2, #33	@ 0x21
 8001832:	2101      	movs	r1, #1
 8001834:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2220      	movs	r2, #32
 800183a:	2100      	movs	r1, #0
 800183c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800183e:	2300      	movs	r3, #0
}
 8001840:	0018      	movs	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	b002      	add	sp, #8
 8001846:	bd80      	pop	{r7, pc}

08001848 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001850:	210f      	movs	r1, #15
 8001852:	187b      	adds	r3, r7, r1
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2221      	movs	r2, #33	@ 0x21
 800185c:	5c9b      	ldrb	r3, [r3, r2]
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d006      	beq.n	8001872 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2204      	movs	r2, #4
 8001868:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800186a:	187b      	adds	r3, r7, r1
 800186c:	2201      	movs	r2, #1
 800186e:	701a      	strb	r2, [r3, #0]
 8001870:	e028      	b.n	80018c4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	210e      	movs	r1, #14
 800187e:	438a      	bics	r2, r1
 8001880:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2101      	movs	r1, #1
 800188e:	438a      	bics	r2, r1
 8001890:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800189a:	2101      	movs	r1, #1
 800189c:	4091      	lsls	r1, r2
 800189e:	000a      	movs	r2, r1
 80018a0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2221      	movs	r2, #33	@ 0x21
 80018a6:	2101      	movs	r1, #1
 80018a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2220      	movs	r2, #32
 80018ae:	2100      	movs	r1, #0
 80018b0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d004      	beq.n	80018c4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	0010      	movs	r0, r2
 80018c2:	4798      	blx	r3
    }
  }
  return status;
 80018c4:	230f      	movs	r3, #15
 80018c6:	18fb      	adds	r3, r7, r3
 80018c8:	781b      	ldrb	r3, [r3, #0]
}
 80018ca:	0018      	movs	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	b004      	add	sp, #16
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018e2:	e149      	b.n	8001b78 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2101      	movs	r1, #1
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	4091      	lsls	r1, r2
 80018ee:	000a      	movs	r2, r1
 80018f0:	4013      	ands	r3, r2
 80018f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d100      	bne.n	80018fc <HAL_GPIO_Init+0x28>
 80018fa:	e13a      	b.n	8001b72 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2203      	movs	r2, #3
 8001902:	4013      	ands	r3, r2
 8001904:	2b01      	cmp	r3, #1
 8001906:	d005      	beq.n	8001914 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2203      	movs	r2, #3
 800190e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001910:	2b02      	cmp	r3, #2
 8001912:	d130      	bne.n	8001976 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	2203      	movs	r2, #3
 8001920:	409a      	lsls	r2, r3
 8001922:	0013      	movs	r3, r2
 8001924:	43da      	mvns	r2, r3
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	4013      	ands	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	68da      	ldr	r2, [r3, #12]
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	409a      	lsls	r2, r3
 8001936:	0013      	movs	r3, r2
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	4313      	orrs	r3, r2
 800193c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800194a:	2201      	movs	r2, #1
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	409a      	lsls	r2, r3
 8001950:	0013      	movs	r3, r2
 8001952:	43da      	mvns	r2, r3
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	4013      	ands	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	091b      	lsrs	r3, r3, #4
 8001960:	2201      	movs	r2, #1
 8001962:	401a      	ands	r2, r3
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	409a      	lsls	r2, r3
 8001968:	0013      	movs	r3, r2
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	4313      	orrs	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2203      	movs	r2, #3
 800197c:	4013      	ands	r3, r2
 800197e:	2b03      	cmp	r3, #3
 8001980:	d017      	beq.n	80019b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	2203      	movs	r2, #3
 800198e:	409a      	lsls	r2, r3
 8001990:	0013      	movs	r3, r2
 8001992:	43da      	mvns	r2, r3
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	4013      	ands	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	689a      	ldr	r2, [r3, #8]
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	409a      	lsls	r2, r3
 80019a4:	0013      	movs	r3, r2
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2203      	movs	r2, #3
 80019b8:	4013      	ands	r3, r2
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d123      	bne.n	8001a06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	08da      	lsrs	r2, r3, #3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	3208      	adds	r2, #8
 80019c6:	0092      	lsls	r2, r2, #2
 80019c8:	58d3      	ldr	r3, [r2, r3]
 80019ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	2207      	movs	r2, #7
 80019d0:	4013      	ands	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	220f      	movs	r2, #15
 80019d6:	409a      	lsls	r2, r3
 80019d8:	0013      	movs	r3, r2
 80019da:	43da      	mvns	r2, r3
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	4013      	ands	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	691a      	ldr	r2, [r3, #16]
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	2107      	movs	r1, #7
 80019ea:	400b      	ands	r3, r1
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	409a      	lsls	r2, r3
 80019f0:	0013      	movs	r3, r2
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	08da      	lsrs	r2, r3, #3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3208      	adds	r2, #8
 8001a00:	0092      	lsls	r2, r2, #2
 8001a02:	6939      	ldr	r1, [r7, #16]
 8001a04:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	2203      	movs	r2, #3
 8001a12:	409a      	lsls	r2, r3
 8001a14:	0013      	movs	r3, r2
 8001a16:	43da      	mvns	r2, r3
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2203      	movs	r2, #3
 8001a24:	401a      	ands	r2, r3
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	0013      	movs	r3, r2
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	23c0      	movs	r3, #192	@ 0xc0
 8001a40:	029b      	lsls	r3, r3, #10
 8001a42:	4013      	ands	r3, r2
 8001a44:	d100      	bne.n	8001a48 <HAL_GPIO_Init+0x174>
 8001a46:	e094      	b.n	8001b72 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a48:	4b51      	ldr	r3, [pc, #324]	@ (8001b90 <HAL_GPIO_Init+0x2bc>)
 8001a4a:	699a      	ldr	r2, [r3, #24]
 8001a4c:	4b50      	ldr	r3, [pc, #320]	@ (8001b90 <HAL_GPIO_Init+0x2bc>)
 8001a4e:	2101      	movs	r1, #1
 8001a50:	430a      	orrs	r2, r1
 8001a52:	619a      	str	r2, [r3, #24]
 8001a54:	4b4e      	ldr	r3, [pc, #312]	@ (8001b90 <HAL_GPIO_Init+0x2bc>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a60:	4a4c      	ldr	r2, [pc, #304]	@ (8001b94 <HAL_GPIO_Init+0x2c0>)
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	089b      	lsrs	r3, r3, #2
 8001a66:	3302      	adds	r3, #2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	589b      	ldr	r3, [r3, r2]
 8001a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	2203      	movs	r2, #3
 8001a72:	4013      	ands	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	220f      	movs	r2, #15
 8001a78:	409a      	lsls	r2, r3
 8001a7a:	0013      	movs	r3, r2
 8001a7c:	43da      	mvns	r2, r3
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	4013      	ands	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	2390      	movs	r3, #144	@ 0x90
 8001a88:	05db      	lsls	r3, r3, #23
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d00d      	beq.n	8001aaa <HAL_GPIO_Init+0x1d6>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a41      	ldr	r2, [pc, #260]	@ (8001b98 <HAL_GPIO_Init+0x2c4>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d007      	beq.n	8001aa6 <HAL_GPIO_Init+0x1d2>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a40      	ldr	r2, [pc, #256]	@ (8001b9c <HAL_GPIO_Init+0x2c8>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d101      	bne.n	8001aa2 <HAL_GPIO_Init+0x1ce>
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	e004      	b.n	8001aac <HAL_GPIO_Init+0x1d8>
 8001aa2:	2305      	movs	r3, #5
 8001aa4:	e002      	b.n	8001aac <HAL_GPIO_Init+0x1d8>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <HAL_GPIO_Init+0x1d8>
 8001aaa:	2300      	movs	r3, #0
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	2103      	movs	r1, #3
 8001ab0:	400a      	ands	r2, r1
 8001ab2:	0092      	lsls	r2, r2, #2
 8001ab4:	4093      	lsls	r3, r2
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001abc:	4935      	ldr	r1, [pc, #212]	@ (8001b94 <HAL_GPIO_Init+0x2c0>)
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	089b      	lsrs	r3, r3, #2
 8001ac2:	3302      	adds	r3, #2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aca:	4b35      	ldr	r3, [pc, #212]	@ (8001ba0 <HAL_GPIO_Init+0x2cc>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	43da      	mvns	r2, r3
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	2380      	movs	r3, #128	@ 0x80
 8001ae0:	035b      	lsls	r3, r3, #13
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001aee:	4b2c      	ldr	r3, [pc, #176]	@ (8001ba0 <HAL_GPIO_Init+0x2cc>)
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001af4:	4b2a      	ldr	r3, [pc, #168]	@ (8001ba0 <HAL_GPIO_Init+0x2cc>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	43da      	mvns	r2, r3
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	2380      	movs	r3, #128	@ 0x80
 8001b0a:	039b      	lsls	r3, r3, #14
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d003      	beq.n	8001b18 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b18:	4b21      	ldr	r3, [pc, #132]	@ (8001ba0 <HAL_GPIO_Init+0x2cc>)
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001b1e:	4b20      	ldr	r3, [pc, #128]	@ (8001ba0 <HAL_GPIO_Init+0x2cc>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	43da      	mvns	r2, r3
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	2380      	movs	r3, #128	@ 0x80
 8001b34:	029b      	lsls	r3, r3, #10
 8001b36:	4013      	ands	r3, r2
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b42:	4b17      	ldr	r3, [pc, #92]	@ (8001ba0 <HAL_GPIO_Init+0x2cc>)
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001b48:	4b15      	ldr	r3, [pc, #84]	@ (8001ba0 <HAL_GPIO_Init+0x2cc>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	43da      	mvns	r2, r3
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	4013      	ands	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	2380      	movs	r3, #128	@ 0x80
 8001b5e:	025b      	lsls	r3, r3, #9
 8001b60:	4013      	ands	r3, r2
 8001b62:	d003      	beq.n	8001b6c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba0 <HAL_GPIO_Init+0x2cc>)
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	3301      	adds	r3, #1
 8001b76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	40da      	lsrs	r2, r3
 8001b80:	1e13      	subs	r3, r2, #0
 8001b82:	d000      	beq.n	8001b86 <HAL_GPIO_Init+0x2b2>
 8001b84:	e6ae      	b.n	80018e4 <HAL_GPIO_Init+0x10>
  } 
}
 8001b86:	46c0      	nop			@ (mov r8, r8)
 8001b88:	46c0      	nop			@ (mov r8, r8)
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	b006      	add	sp, #24
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40021000 	.word	0x40021000
 8001b94:	40010000 	.word	0x40010000
 8001b98:	48000400 	.word	0x48000400
 8001b9c:	48000800 	.word	0x48000800
 8001ba0:	40010400 	.word	0x40010400

08001ba4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b088      	sub	sp, #32
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d102      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	f000 fb76 	bl	80022a4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d100      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x20>
 8001bc2:	e08e      	b.n	8001ce2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001bc4:	4bc5      	ldr	r3, [pc, #788]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	220c      	movs	r2, #12
 8001bca:	4013      	ands	r3, r2
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d00e      	beq.n	8001bee <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bd0:	4bc2      	ldr	r3, [pc, #776]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	220c      	movs	r2, #12
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	d117      	bne.n	8001c0c <HAL_RCC_OscConfig+0x68>
 8001bdc:	4bbf      	ldr	r3, [pc, #764]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	23c0      	movs	r3, #192	@ 0xc0
 8001be2:	025b      	lsls	r3, r3, #9
 8001be4:	401a      	ands	r2, r3
 8001be6:	2380      	movs	r3, #128	@ 0x80
 8001be8:	025b      	lsls	r3, r3, #9
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d10e      	bne.n	8001c0c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bee:	4bbb      	ldr	r3, [pc, #748]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	2380      	movs	r3, #128	@ 0x80
 8001bf4:	029b      	lsls	r3, r3, #10
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d100      	bne.n	8001bfc <HAL_RCC_OscConfig+0x58>
 8001bfa:	e071      	b.n	8001ce0 <HAL_RCC_OscConfig+0x13c>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d000      	beq.n	8001c06 <HAL_RCC_OscConfig+0x62>
 8001c04:	e06c      	b.n	8001ce0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	f000 fb4c 	bl	80022a4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d107      	bne.n	8001c24 <HAL_RCC_OscConfig+0x80>
 8001c14:	4bb1      	ldr	r3, [pc, #708]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4bb0      	ldr	r3, [pc, #704]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001c1a:	2180      	movs	r1, #128	@ 0x80
 8001c1c:	0249      	lsls	r1, r1, #9
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	e02f      	b.n	8001c84 <HAL_RCC_OscConfig+0xe0>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10c      	bne.n	8001c46 <HAL_RCC_OscConfig+0xa2>
 8001c2c:	4bab      	ldr	r3, [pc, #684]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4baa      	ldr	r3, [pc, #680]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001c32:	49ab      	ldr	r1, [pc, #684]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001c34:	400a      	ands	r2, r1
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	4ba8      	ldr	r3, [pc, #672]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4ba7      	ldr	r3, [pc, #668]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001c3e:	49a9      	ldr	r1, [pc, #676]	@ (8001ee4 <HAL_RCC_OscConfig+0x340>)
 8001c40:	400a      	ands	r2, r1
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	e01e      	b.n	8001c84 <HAL_RCC_OscConfig+0xe0>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b05      	cmp	r3, #5
 8001c4c:	d10e      	bne.n	8001c6c <HAL_RCC_OscConfig+0xc8>
 8001c4e:	4ba3      	ldr	r3, [pc, #652]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	4ba2      	ldr	r3, [pc, #648]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001c54:	2180      	movs	r1, #128	@ 0x80
 8001c56:	02c9      	lsls	r1, r1, #11
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	4b9f      	ldr	r3, [pc, #636]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4b9e      	ldr	r3, [pc, #632]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001c62:	2180      	movs	r1, #128	@ 0x80
 8001c64:	0249      	lsls	r1, r1, #9
 8001c66:	430a      	orrs	r2, r1
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	e00b      	b.n	8001c84 <HAL_RCC_OscConfig+0xe0>
 8001c6c:	4b9b      	ldr	r3, [pc, #620]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b9a      	ldr	r3, [pc, #616]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001c72:	499b      	ldr	r1, [pc, #620]	@ (8001ee0 <HAL_RCC_OscConfig+0x33c>)
 8001c74:	400a      	ands	r2, r1
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	4b98      	ldr	r3, [pc, #608]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	4b97      	ldr	r3, [pc, #604]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001c7e:	4999      	ldr	r1, [pc, #612]	@ (8001ee4 <HAL_RCC_OscConfig+0x340>)
 8001c80:	400a      	ands	r2, r1
 8001c82:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d014      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8c:	f7ff fb9a 	bl	80013c4 <HAL_GetTick>
 8001c90:	0003      	movs	r3, r0
 8001c92:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c96:	f7ff fb95 	bl	80013c4 <HAL_GetTick>
 8001c9a:	0002      	movs	r2, r0
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b64      	cmp	r3, #100	@ 0x64
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e2fd      	b.n	80022a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca8:	4b8c      	ldr	r3, [pc, #560]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	2380      	movs	r3, #128	@ 0x80
 8001cae:	029b      	lsls	r3, r3, #10
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d0f0      	beq.n	8001c96 <HAL_RCC_OscConfig+0xf2>
 8001cb4:	e015      	b.n	8001ce2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb6:	f7ff fb85 	bl	80013c4 <HAL_GetTick>
 8001cba:	0003      	movs	r3, r0
 8001cbc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cc0:	f7ff fb80 	bl	80013c4 <HAL_GetTick>
 8001cc4:	0002      	movs	r2, r0
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b64      	cmp	r3, #100	@ 0x64
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e2e8      	b.n	80022a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cd2:	4b82      	ldr	r3, [pc, #520]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	2380      	movs	r3, #128	@ 0x80
 8001cd8:	029b      	lsls	r3, r3, #10
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x11c>
 8001cde:	e000      	b.n	8001ce2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d100      	bne.n	8001cee <HAL_RCC_OscConfig+0x14a>
 8001cec:	e06c      	b.n	8001dc8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001cee:	4b7b      	ldr	r3, [pc, #492]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	220c      	movs	r2, #12
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d00e      	beq.n	8001d16 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001cf8:	4b78      	ldr	r3, [pc, #480]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	220c      	movs	r2, #12
 8001cfe:	4013      	ands	r3, r2
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d11f      	bne.n	8001d44 <HAL_RCC_OscConfig+0x1a0>
 8001d04:	4b75      	ldr	r3, [pc, #468]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	23c0      	movs	r3, #192	@ 0xc0
 8001d0a:	025b      	lsls	r3, r3, #9
 8001d0c:	401a      	ands	r2, r3
 8001d0e:	2380      	movs	r3, #128	@ 0x80
 8001d10:	021b      	lsls	r3, r3, #8
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d116      	bne.n	8001d44 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d16:	4b71      	ldr	r3, [pc, #452]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	d005      	beq.n	8001d2c <HAL_RCC_OscConfig+0x188>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d001      	beq.n	8001d2c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e2bb      	b.n	80022a4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2c:	4b6b      	ldr	r3, [pc, #428]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	22f8      	movs	r2, #248	@ 0xf8
 8001d32:	4393      	bics	r3, r2
 8001d34:	0019      	movs	r1, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	00da      	lsls	r2, r3, #3
 8001d3c:	4b67      	ldr	r3, [pc, #412]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d42:	e041      	b.n	8001dc8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d024      	beq.n	8001d96 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d4c:	4b63      	ldr	r3, [pc, #396]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4b62      	ldr	r3, [pc, #392]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001d52:	2101      	movs	r1, #1
 8001d54:	430a      	orrs	r2, r1
 8001d56:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d58:	f7ff fb34 	bl	80013c4 <HAL_GetTick>
 8001d5c:	0003      	movs	r3, r0
 8001d5e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d62:	f7ff fb2f 	bl	80013c4 <HAL_GetTick>
 8001d66:	0002      	movs	r2, r0
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e297      	b.n	80022a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d74:	4b59      	ldr	r3, [pc, #356]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2202      	movs	r2, #2
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	d0f1      	beq.n	8001d62 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7e:	4b57      	ldr	r3, [pc, #348]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	22f8      	movs	r2, #248	@ 0xf8
 8001d84:	4393      	bics	r3, r2
 8001d86:	0019      	movs	r1, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	00da      	lsls	r2, r3, #3
 8001d8e:	4b53      	ldr	r3, [pc, #332]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001d90:	430a      	orrs	r2, r1
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	e018      	b.n	8001dc8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d96:	4b51      	ldr	r3, [pc, #324]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	4b50      	ldr	r3, [pc, #320]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	438a      	bics	r2, r1
 8001da0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da2:	f7ff fb0f 	bl	80013c4 <HAL_GetTick>
 8001da6:	0003      	movs	r3, r0
 8001da8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dac:	f7ff fb0a 	bl	80013c4 <HAL_GetTick>
 8001db0:	0002      	movs	r2, r0
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e272      	b.n	80022a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dbe:	4b47      	ldr	r3, [pc, #284]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d1f1      	bne.n	8001dac <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2208      	movs	r2, #8
 8001dce:	4013      	ands	r3, r2
 8001dd0:	d036      	beq.n	8001e40 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d019      	beq.n	8001e0e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dda:	4b40      	ldr	r3, [pc, #256]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001ddc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001dde:	4b3f      	ldr	r3, [pc, #252]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001de0:	2101      	movs	r1, #1
 8001de2:	430a      	orrs	r2, r1
 8001de4:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de6:	f7ff faed 	bl	80013c4 <HAL_GetTick>
 8001dea:	0003      	movs	r3, r0
 8001dec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001df0:	f7ff fae8 	bl	80013c4 <HAL_GetTick>
 8001df4:	0002      	movs	r2, r0
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e250      	b.n	80022a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e02:	4b36      	ldr	r3, [pc, #216]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e06:	2202      	movs	r2, #2
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d0f1      	beq.n	8001df0 <HAL_RCC_OscConfig+0x24c>
 8001e0c:	e018      	b.n	8001e40 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e0e:	4b33      	ldr	r3, [pc, #204]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001e10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e12:	4b32      	ldr	r3, [pc, #200]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001e14:	2101      	movs	r1, #1
 8001e16:	438a      	bics	r2, r1
 8001e18:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1a:	f7ff fad3 	bl	80013c4 <HAL_GetTick>
 8001e1e:	0003      	movs	r3, r0
 8001e20:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e24:	f7ff face 	bl	80013c4 <HAL_GetTick>
 8001e28:	0002      	movs	r2, r0
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e236      	b.n	80022a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e36:	4b29      	ldr	r3, [pc, #164]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d1f1      	bne.n	8001e24 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2204      	movs	r2, #4
 8001e46:	4013      	ands	r3, r2
 8001e48:	d100      	bne.n	8001e4c <HAL_RCC_OscConfig+0x2a8>
 8001e4a:	e0b5      	b.n	8001fb8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e4c:	201f      	movs	r0, #31
 8001e4e:	183b      	adds	r3, r7, r0
 8001e50:	2200      	movs	r2, #0
 8001e52:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e54:	4b21      	ldr	r3, [pc, #132]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001e56:	69da      	ldr	r2, [r3, #28]
 8001e58:	2380      	movs	r3, #128	@ 0x80
 8001e5a:	055b      	lsls	r3, r3, #21
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d110      	bne.n	8001e82 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e60:	4b1e      	ldr	r3, [pc, #120]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001e62:	69da      	ldr	r2, [r3, #28]
 8001e64:	4b1d      	ldr	r3, [pc, #116]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001e66:	2180      	movs	r1, #128	@ 0x80
 8001e68:	0549      	lsls	r1, r1, #21
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	61da      	str	r2, [r3, #28]
 8001e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001e70:	69da      	ldr	r2, [r3, #28]
 8001e72:	2380      	movs	r3, #128	@ 0x80
 8001e74:	055b      	lsls	r3, r3, #21
 8001e76:	4013      	ands	r3, r2
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e7c:	183b      	adds	r3, r7, r0
 8001e7e:	2201      	movs	r2, #1
 8001e80:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e82:	4b19      	ldr	r3, [pc, #100]	@ (8001ee8 <HAL_RCC_OscConfig+0x344>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	2380      	movs	r3, #128	@ 0x80
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d11a      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e8e:	4b16      	ldr	r3, [pc, #88]	@ (8001ee8 <HAL_RCC_OscConfig+0x344>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	4b15      	ldr	r3, [pc, #84]	@ (8001ee8 <HAL_RCC_OscConfig+0x344>)
 8001e94:	2180      	movs	r1, #128	@ 0x80
 8001e96:	0049      	lsls	r1, r1, #1
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e9c:	f7ff fa92 	bl	80013c4 <HAL_GetTick>
 8001ea0:	0003      	movs	r3, r0
 8001ea2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea6:	f7ff fa8d 	bl	80013c4 <HAL_GetTick>
 8001eaa:	0002      	movs	r2, r0
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b64      	cmp	r3, #100	@ 0x64
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e1f5      	b.n	80022a4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee8 <HAL_RCC_OscConfig+0x344>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	2380      	movs	r3, #128	@ 0x80
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d0f0      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d10f      	bne.n	8001eec <HAL_RCC_OscConfig+0x348>
 8001ecc:	4b03      	ldr	r3, [pc, #12]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001ece:	6a1a      	ldr	r2, [r3, #32]
 8001ed0:	4b02      	ldr	r3, [pc, #8]	@ (8001edc <HAL_RCC_OscConfig+0x338>)
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	621a      	str	r2, [r3, #32]
 8001ed8:	e036      	b.n	8001f48 <HAL_RCC_OscConfig+0x3a4>
 8001eda:	46c0      	nop			@ (mov r8, r8)
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	fffeffff 	.word	0xfffeffff
 8001ee4:	fffbffff 	.word	0xfffbffff
 8001ee8:	40007000 	.word	0x40007000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10c      	bne.n	8001f0e <HAL_RCC_OscConfig+0x36a>
 8001ef4:	4bca      	ldr	r3, [pc, #808]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 8001ef6:	6a1a      	ldr	r2, [r3, #32]
 8001ef8:	4bc9      	ldr	r3, [pc, #804]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 8001efa:	2101      	movs	r1, #1
 8001efc:	438a      	bics	r2, r1
 8001efe:	621a      	str	r2, [r3, #32]
 8001f00:	4bc7      	ldr	r3, [pc, #796]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 8001f02:	6a1a      	ldr	r2, [r3, #32]
 8001f04:	4bc6      	ldr	r3, [pc, #792]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 8001f06:	2104      	movs	r1, #4
 8001f08:	438a      	bics	r2, r1
 8001f0a:	621a      	str	r2, [r3, #32]
 8001f0c:	e01c      	b.n	8001f48 <HAL_RCC_OscConfig+0x3a4>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	2b05      	cmp	r3, #5
 8001f14:	d10c      	bne.n	8001f30 <HAL_RCC_OscConfig+0x38c>
 8001f16:	4bc2      	ldr	r3, [pc, #776]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 8001f18:	6a1a      	ldr	r2, [r3, #32]
 8001f1a:	4bc1      	ldr	r3, [pc, #772]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 8001f1c:	2104      	movs	r1, #4
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	621a      	str	r2, [r3, #32]
 8001f22:	4bbf      	ldr	r3, [pc, #764]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 8001f24:	6a1a      	ldr	r2, [r3, #32]
 8001f26:	4bbe      	ldr	r3, [pc, #760]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 8001f28:	2101      	movs	r1, #1
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	621a      	str	r2, [r3, #32]
 8001f2e:	e00b      	b.n	8001f48 <HAL_RCC_OscConfig+0x3a4>
 8001f30:	4bbb      	ldr	r3, [pc, #748]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 8001f32:	6a1a      	ldr	r2, [r3, #32]
 8001f34:	4bba      	ldr	r3, [pc, #744]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 8001f36:	2101      	movs	r1, #1
 8001f38:	438a      	bics	r2, r1
 8001f3a:	621a      	str	r2, [r3, #32]
 8001f3c:	4bb8      	ldr	r3, [pc, #736]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 8001f3e:	6a1a      	ldr	r2, [r3, #32]
 8001f40:	4bb7      	ldr	r3, [pc, #732]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 8001f42:	2104      	movs	r1, #4
 8001f44:	438a      	bics	r2, r1
 8001f46:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d014      	beq.n	8001f7a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f50:	f7ff fa38 	bl	80013c4 <HAL_GetTick>
 8001f54:	0003      	movs	r3, r0
 8001f56:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f58:	e009      	b.n	8001f6e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f5a:	f7ff fa33 	bl	80013c4 <HAL_GetTick>
 8001f5e:	0002      	movs	r2, r0
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	4aaf      	ldr	r2, [pc, #700]	@ (8002224 <HAL_RCC_OscConfig+0x680>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e19a      	b.n	80022a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f6e:	4bac      	ldr	r3, [pc, #688]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	2202      	movs	r2, #2
 8001f74:	4013      	ands	r3, r2
 8001f76:	d0f0      	beq.n	8001f5a <HAL_RCC_OscConfig+0x3b6>
 8001f78:	e013      	b.n	8001fa2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7a:	f7ff fa23 	bl	80013c4 <HAL_GetTick>
 8001f7e:	0003      	movs	r3, r0
 8001f80:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f82:	e009      	b.n	8001f98 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f84:	f7ff fa1e 	bl	80013c4 <HAL_GetTick>
 8001f88:	0002      	movs	r2, r0
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	4aa5      	ldr	r2, [pc, #660]	@ (8002224 <HAL_RCC_OscConfig+0x680>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e185      	b.n	80022a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f98:	4ba1      	ldr	r3, [pc, #644]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d1f0      	bne.n	8001f84 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fa2:	231f      	movs	r3, #31
 8001fa4:	18fb      	adds	r3, r7, r3
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d105      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fac:	4b9c      	ldr	r3, [pc, #624]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 8001fae:	69da      	ldr	r2, [r3, #28]
 8001fb0:	4b9b      	ldr	r3, [pc, #620]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 8001fb2:	499d      	ldr	r1, [pc, #628]	@ (8002228 <HAL_RCC_OscConfig+0x684>)
 8001fb4:	400a      	ands	r2, r1
 8001fb6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2210      	movs	r2, #16
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d063      	beq.n	800208a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d12a      	bne.n	8002020 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001fca:	4b95      	ldr	r3, [pc, #596]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 8001fcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fce:	4b94      	ldr	r3, [pc, #592]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 8001fd0:	2104      	movs	r1, #4
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001fd6:	4b92      	ldr	r3, [pc, #584]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 8001fd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fda:	4b91      	ldr	r3, [pc, #580]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 8001fdc:	2101      	movs	r1, #1
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe2:	f7ff f9ef 	bl	80013c4 <HAL_GetTick>
 8001fe6:	0003      	movs	r3, r0
 8001fe8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001fec:	f7ff f9ea 	bl	80013c4 <HAL_GetTick>
 8001ff0:	0002      	movs	r2, r0
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e152      	b.n	80022a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001ffe:	4b88      	ldr	r3, [pc, #544]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 8002000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002002:	2202      	movs	r2, #2
 8002004:	4013      	ands	r3, r2
 8002006:	d0f1      	beq.n	8001fec <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002008:	4b85      	ldr	r3, [pc, #532]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 800200a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800200c:	22f8      	movs	r2, #248	@ 0xf8
 800200e:	4393      	bics	r3, r2
 8002010:	0019      	movs	r1, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	00da      	lsls	r2, r3, #3
 8002018:	4b81      	ldr	r3, [pc, #516]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 800201a:	430a      	orrs	r2, r1
 800201c:	635a      	str	r2, [r3, #52]	@ 0x34
 800201e:	e034      	b.n	800208a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	3305      	adds	r3, #5
 8002026:	d111      	bne.n	800204c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002028:	4b7d      	ldr	r3, [pc, #500]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 800202a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800202c:	4b7c      	ldr	r3, [pc, #496]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 800202e:	2104      	movs	r1, #4
 8002030:	438a      	bics	r2, r1
 8002032:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002034:	4b7a      	ldr	r3, [pc, #488]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 8002036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002038:	22f8      	movs	r2, #248	@ 0xf8
 800203a:	4393      	bics	r3, r2
 800203c:	0019      	movs	r1, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	00da      	lsls	r2, r3, #3
 8002044:	4b76      	ldr	r3, [pc, #472]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 8002046:	430a      	orrs	r2, r1
 8002048:	635a      	str	r2, [r3, #52]	@ 0x34
 800204a:	e01e      	b.n	800208a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800204c:	4b74      	ldr	r3, [pc, #464]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 800204e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002050:	4b73      	ldr	r3, [pc, #460]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 8002052:	2104      	movs	r1, #4
 8002054:	430a      	orrs	r2, r1
 8002056:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002058:	4b71      	ldr	r3, [pc, #452]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 800205a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800205c:	4b70      	ldr	r3, [pc, #448]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 800205e:	2101      	movs	r1, #1
 8002060:	438a      	bics	r2, r1
 8002062:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002064:	f7ff f9ae 	bl	80013c4 <HAL_GetTick>
 8002068:	0003      	movs	r3, r0
 800206a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800206c:	e008      	b.n	8002080 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800206e:	f7ff f9a9 	bl	80013c4 <HAL_GetTick>
 8002072:	0002      	movs	r2, r0
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e111      	b.n	80022a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002080:	4b67      	ldr	r3, [pc, #412]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 8002082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002084:	2202      	movs	r2, #2
 8002086:	4013      	ands	r3, r2
 8002088:	d1f1      	bne.n	800206e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2220      	movs	r2, #32
 8002090:	4013      	ands	r3, r2
 8002092:	d05c      	beq.n	800214e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002094:	4b62      	ldr	r3, [pc, #392]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	220c      	movs	r2, #12
 800209a:	4013      	ands	r3, r2
 800209c:	2b0c      	cmp	r3, #12
 800209e:	d00e      	beq.n	80020be <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80020a0:	4b5f      	ldr	r3, [pc, #380]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	220c      	movs	r2, #12
 80020a6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80020a8:	2b08      	cmp	r3, #8
 80020aa:	d114      	bne.n	80020d6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80020ac:	4b5c      	ldr	r3, [pc, #368]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	23c0      	movs	r3, #192	@ 0xc0
 80020b2:	025b      	lsls	r3, r3, #9
 80020b4:	401a      	ands	r2, r3
 80020b6:	23c0      	movs	r3, #192	@ 0xc0
 80020b8:	025b      	lsls	r3, r3, #9
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d10b      	bne.n	80020d6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80020be:	4b58      	ldr	r3, [pc, #352]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 80020c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020c2:	2380      	movs	r3, #128	@ 0x80
 80020c4:	029b      	lsls	r3, r3, #10
 80020c6:	4013      	ands	r3, r2
 80020c8:	d040      	beq.n	800214c <HAL_RCC_OscConfig+0x5a8>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d03c      	beq.n	800214c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e0e6      	b.n	80022a4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d01b      	beq.n	8002116 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80020de:	4b50      	ldr	r3, [pc, #320]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 80020e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020e2:	4b4f      	ldr	r3, [pc, #316]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 80020e4:	2180      	movs	r1, #128	@ 0x80
 80020e6:	0249      	lsls	r1, r1, #9
 80020e8:	430a      	orrs	r2, r1
 80020ea:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ec:	f7ff f96a 	bl	80013c4 <HAL_GetTick>
 80020f0:	0003      	movs	r3, r0
 80020f2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020f6:	f7ff f965 	bl	80013c4 <HAL_GetTick>
 80020fa:	0002      	movs	r2, r0
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e0cd      	b.n	80022a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002108:	4b45      	ldr	r3, [pc, #276]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 800210a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800210c:	2380      	movs	r3, #128	@ 0x80
 800210e:	029b      	lsls	r3, r3, #10
 8002110:	4013      	ands	r3, r2
 8002112:	d0f0      	beq.n	80020f6 <HAL_RCC_OscConfig+0x552>
 8002114:	e01b      	b.n	800214e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002116:	4b42      	ldr	r3, [pc, #264]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 8002118:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800211a:	4b41      	ldr	r3, [pc, #260]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 800211c:	4943      	ldr	r1, [pc, #268]	@ (800222c <HAL_RCC_OscConfig+0x688>)
 800211e:	400a      	ands	r2, r1
 8002120:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002122:	f7ff f94f 	bl	80013c4 <HAL_GetTick>
 8002126:	0003      	movs	r3, r0
 8002128:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800212c:	f7ff f94a 	bl	80013c4 <HAL_GetTick>
 8002130:	0002      	movs	r2, r0
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e0b2      	b.n	80022a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800213e:	4b38      	ldr	r3, [pc, #224]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 8002140:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002142:	2380      	movs	r3, #128	@ 0x80
 8002144:	029b      	lsls	r3, r3, #10
 8002146:	4013      	ands	r3, r2
 8002148:	d1f0      	bne.n	800212c <HAL_RCC_OscConfig+0x588>
 800214a:	e000      	b.n	800214e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800214c:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002152:	2b00      	cmp	r3, #0
 8002154:	d100      	bne.n	8002158 <HAL_RCC_OscConfig+0x5b4>
 8002156:	e0a4      	b.n	80022a2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002158:	4b31      	ldr	r3, [pc, #196]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	220c      	movs	r2, #12
 800215e:	4013      	ands	r3, r2
 8002160:	2b08      	cmp	r3, #8
 8002162:	d100      	bne.n	8002166 <HAL_RCC_OscConfig+0x5c2>
 8002164:	e078      	b.n	8002258 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800216a:	2b02      	cmp	r3, #2
 800216c:	d14c      	bne.n	8002208 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800216e:	4b2c      	ldr	r3, [pc, #176]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	4b2b      	ldr	r3, [pc, #172]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 8002174:	492e      	ldr	r1, [pc, #184]	@ (8002230 <HAL_RCC_OscConfig+0x68c>)
 8002176:	400a      	ands	r2, r1
 8002178:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217a:	f7ff f923 	bl	80013c4 <HAL_GetTick>
 800217e:	0003      	movs	r3, r0
 8002180:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002184:	f7ff f91e 	bl	80013c4 <HAL_GetTick>
 8002188:	0002      	movs	r2, r0
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e086      	b.n	80022a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002196:	4b22      	ldr	r3, [pc, #136]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	2380      	movs	r3, #128	@ 0x80
 800219c:	049b      	lsls	r3, r3, #18
 800219e:	4013      	ands	r3, r2
 80021a0:	d1f0      	bne.n	8002184 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 80021a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a6:	220f      	movs	r2, #15
 80021a8:	4393      	bics	r3, r2
 80021aa:	0019      	movs	r1, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 80021b2:	430a      	orrs	r2, r1
 80021b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80021b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	4a1e      	ldr	r2, [pc, #120]	@ (8002234 <HAL_RCC_OscConfig+0x690>)
 80021bc:	4013      	ands	r3, r2
 80021be:	0019      	movs	r1, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c8:	431a      	orrs	r2, r3
 80021ca:	4b15      	ldr	r3, [pc, #84]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 80021cc:	430a      	orrs	r2, r1
 80021ce:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021d0:	4b13      	ldr	r3, [pc, #76]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	4b12      	ldr	r3, [pc, #72]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 80021d6:	2180      	movs	r1, #128	@ 0x80
 80021d8:	0449      	lsls	r1, r1, #17
 80021da:	430a      	orrs	r2, r1
 80021dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021de:	f7ff f8f1 	bl	80013c4 <HAL_GetTick>
 80021e2:	0003      	movs	r3, r0
 80021e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e8:	f7ff f8ec 	bl	80013c4 <HAL_GetTick>
 80021ec:	0002      	movs	r2, r0
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e054      	b.n	80022a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021fa:	4b09      	ldr	r3, [pc, #36]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	2380      	movs	r3, #128	@ 0x80
 8002200:	049b      	lsls	r3, r3, #18
 8002202:	4013      	ands	r3, r2
 8002204:	d0f0      	beq.n	80021e8 <HAL_RCC_OscConfig+0x644>
 8002206:	e04c      	b.n	80022a2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002208:	4b05      	ldr	r3, [pc, #20]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4b04      	ldr	r3, [pc, #16]	@ (8002220 <HAL_RCC_OscConfig+0x67c>)
 800220e:	4908      	ldr	r1, [pc, #32]	@ (8002230 <HAL_RCC_OscConfig+0x68c>)
 8002210:	400a      	ands	r2, r1
 8002212:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002214:	f7ff f8d6 	bl	80013c4 <HAL_GetTick>
 8002218:	0003      	movs	r3, r0
 800221a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800221c:	e015      	b.n	800224a <HAL_RCC_OscConfig+0x6a6>
 800221e:	46c0      	nop			@ (mov r8, r8)
 8002220:	40021000 	.word	0x40021000
 8002224:	00001388 	.word	0x00001388
 8002228:	efffffff 	.word	0xefffffff
 800222c:	fffeffff 	.word	0xfffeffff
 8002230:	feffffff 	.word	0xfeffffff
 8002234:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002238:	f7ff f8c4 	bl	80013c4 <HAL_GetTick>
 800223c:	0002      	movs	r2, r0
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e02c      	b.n	80022a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800224a:	4b18      	ldr	r3, [pc, #96]	@ (80022ac <HAL_RCC_OscConfig+0x708>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	2380      	movs	r3, #128	@ 0x80
 8002250:	049b      	lsls	r3, r3, #18
 8002252:	4013      	ands	r3, r2
 8002254:	d1f0      	bne.n	8002238 <HAL_RCC_OscConfig+0x694>
 8002256:	e024      	b.n	80022a2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225c:	2b01      	cmp	r3, #1
 800225e:	d101      	bne.n	8002264 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e01f      	b.n	80022a4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002264:	4b11      	ldr	r3, [pc, #68]	@ (80022ac <HAL_RCC_OscConfig+0x708>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800226a:	4b10      	ldr	r3, [pc, #64]	@ (80022ac <HAL_RCC_OscConfig+0x708>)
 800226c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800226e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	23c0      	movs	r3, #192	@ 0xc0
 8002274:	025b      	lsls	r3, r3, #9
 8002276:	401a      	ands	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800227c:	429a      	cmp	r2, r3
 800227e:	d10e      	bne.n	800229e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	220f      	movs	r2, #15
 8002284:	401a      	ands	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800228a:	429a      	cmp	r2, r3
 800228c:	d107      	bne.n	800229e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	23f0      	movs	r3, #240	@ 0xf0
 8002292:	039b      	lsls	r3, r3, #14
 8002294:	401a      	ands	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800229a:	429a      	cmp	r2, r3
 800229c:	d001      	beq.n	80022a2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	0018      	movs	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	b008      	add	sp, #32
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40021000 	.word	0x40021000

080022b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e0bf      	b.n	8002444 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022c4:	4b61      	ldr	r3, [pc, #388]	@ (800244c <HAL_RCC_ClockConfig+0x19c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2201      	movs	r2, #1
 80022ca:	4013      	ands	r3, r2
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d911      	bls.n	80022f6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d2:	4b5e      	ldr	r3, [pc, #376]	@ (800244c <HAL_RCC_ClockConfig+0x19c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2201      	movs	r2, #1
 80022d8:	4393      	bics	r3, r2
 80022da:	0019      	movs	r1, r3
 80022dc:	4b5b      	ldr	r3, [pc, #364]	@ (800244c <HAL_RCC_ClockConfig+0x19c>)
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e4:	4b59      	ldr	r3, [pc, #356]	@ (800244c <HAL_RCC_ClockConfig+0x19c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2201      	movs	r2, #1
 80022ea:	4013      	ands	r3, r2
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d001      	beq.n	80022f6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e0a6      	b.n	8002444 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2202      	movs	r2, #2
 80022fc:	4013      	ands	r3, r2
 80022fe:	d015      	beq.n	800232c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2204      	movs	r2, #4
 8002306:	4013      	ands	r3, r2
 8002308:	d006      	beq.n	8002318 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800230a:	4b51      	ldr	r3, [pc, #324]	@ (8002450 <HAL_RCC_ClockConfig+0x1a0>)
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	4b50      	ldr	r3, [pc, #320]	@ (8002450 <HAL_RCC_ClockConfig+0x1a0>)
 8002310:	21e0      	movs	r1, #224	@ 0xe0
 8002312:	00c9      	lsls	r1, r1, #3
 8002314:	430a      	orrs	r2, r1
 8002316:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002318:	4b4d      	ldr	r3, [pc, #308]	@ (8002450 <HAL_RCC_ClockConfig+0x1a0>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	22f0      	movs	r2, #240	@ 0xf0
 800231e:	4393      	bics	r3, r2
 8002320:	0019      	movs	r1, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	4b4a      	ldr	r3, [pc, #296]	@ (8002450 <HAL_RCC_ClockConfig+0x1a0>)
 8002328:	430a      	orrs	r2, r1
 800232a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2201      	movs	r2, #1
 8002332:	4013      	ands	r3, r2
 8002334:	d04c      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d107      	bne.n	800234e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800233e:	4b44      	ldr	r3, [pc, #272]	@ (8002450 <HAL_RCC_ClockConfig+0x1a0>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	2380      	movs	r3, #128	@ 0x80
 8002344:	029b      	lsls	r3, r3, #10
 8002346:	4013      	ands	r3, r2
 8002348:	d120      	bne.n	800238c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e07a      	b.n	8002444 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b02      	cmp	r3, #2
 8002354:	d107      	bne.n	8002366 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002356:	4b3e      	ldr	r3, [pc, #248]	@ (8002450 <HAL_RCC_ClockConfig+0x1a0>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	2380      	movs	r3, #128	@ 0x80
 800235c:	049b      	lsls	r3, r3, #18
 800235e:	4013      	ands	r3, r2
 8002360:	d114      	bne.n	800238c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e06e      	b.n	8002444 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b03      	cmp	r3, #3
 800236c:	d107      	bne.n	800237e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800236e:	4b38      	ldr	r3, [pc, #224]	@ (8002450 <HAL_RCC_ClockConfig+0x1a0>)
 8002370:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002372:	2380      	movs	r3, #128	@ 0x80
 8002374:	029b      	lsls	r3, r3, #10
 8002376:	4013      	ands	r3, r2
 8002378:	d108      	bne.n	800238c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e062      	b.n	8002444 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237e:	4b34      	ldr	r3, [pc, #208]	@ (8002450 <HAL_RCC_ClockConfig+0x1a0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2202      	movs	r2, #2
 8002384:	4013      	ands	r3, r2
 8002386:	d101      	bne.n	800238c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e05b      	b.n	8002444 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800238c:	4b30      	ldr	r3, [pc, #192]	@ (8002450 <HAL_RCC_ClockConfig+0x1a0>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2203      	movs	r2, #3
 8002392:	4393      	bics	r3, r2
 8002394:	0019      	movs	r1, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	4b2d      	ldr	r3, [pc, #180]	@ (8002450 <HAL_RCC_ClockConfig+0x1a0>)
 800239c:	430a      	orrs	r2, r1
 800239e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023a0:	f7ff f810 	bl	80013c4 <HAL_GetTick>
 80023a4:	0003      	movs	r3, r0
 80023a6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a8:	e009      	b.n	80023be <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023aa:	f7ff f80b 	bl	80013c4 <HAL_GetTick>
 80023ae:	0002      	movs	r2, r0
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	4a27      	ldr	r2, [pc, #156]	@ (8002454 <HAL_RCC_ClockConfig+0x1a4>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e042      	b.n	8002444 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023be:	4b24      	ldr	r3, [pc, #144]	@ (8002450 <HAL_RCC_ClockConfig+0x1a0>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	220c      	movs	r2, #12
 80023c4:	401a      	ands	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d1ec      	bne.n	80023aa <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023d0:	4b1e      	ldr	r3, [pc, #120]	@ (800244c <HAL_RCC_ClockConfig+0x19c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2201      	movs	r2, #1
 80023d6:	4013      	ands	r3, r2
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d211      	bcs.n	8002402 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023de:	4b1b      	ldr	r3, [pc, #108]	@ (800244c <HAL_RCC_ClockConfig+0x19c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2201      	movs	r2, #1
 80023e4:	4393      	bics	r3, r2
 80023e6:	0019      	movs	r1, r3
 80023e8:	4b18      	ldr	r3, [pc, #96]	@ (800244c <HAL_RCC_ClockConfig+0x19c>)
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f0:	4b16      	ldr	r3, [pc, #88]	@ (800244c <HAL_RCC_ClockConfig+0x19c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2201      	movs	r2, #1
 80023f6:	4013      	ands	r3, r2
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d001      	beq.n	8002402 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e020      	b.n	8002444 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2204      	movs	r2, #4
 8002408:	4013      	ands	r3, r2
 800240a:	d009      	beq.n	8002420 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800240c:	4b10      	ldr	r3, [pc, #64]	@ (8002450 <HAL_RCC_ClockConfig+0x1a0>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	4a11      	ldr	r2, [pc, #68]	@ (8002458 <HAL_RCC_ClockConfig+0x1a8>)
 8002412:	4013      	ands	r3, r2
 8002414:	0019      	movs	r1, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	4b0d      	ldr	r3, [pc, #52]	@ (8002450 <HAL_RCC_ClockConfig+0x1a0>)
 800241c:	430a      	orrs	r2, r1
 800241e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002420:	f000 f860 	bl	80024e4 <HAL_RCC_GetSysClockFreq>
 8002424:	0001      	movs	r1, r0
 8002426:	4b0a      	ldr	r3, [pc, #40]	@ (8002450 <HAL_RCC_ClockConfig+0x1a0>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	091b      	lsrs	r3, r3, #4
 800242c:	220f      	movs	r2, #15
 800242e:	4013      	ands	r3, r2
 8002430:	4a0a      	ldr	r2, [pc, #40]	@ (800245c <HAL_RCC_ClockConfig+0x1ac>)
 8002432:	5cd3      	ldrb	r3, [r2, r3]
 8002434:	000a      	movs	r2, r1
 8002436:	40da      	lsrs	r2, r3
 8002438:	4b09      	ldr	r3, [pc, #36]	@ (8002460 <HAL_RCC_ClockConfig+0x1b0>)
 800243a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800243c:	2003      	movs	r0, #3
 800243e:	f7fe ff7b 	bl	8001338 <HAL_InitTick>
  
  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	0018      	movs	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	b004      	add	sp, #16
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40022000 	.word	0x40022000
 8002450:	40021000 	.word	0x40021000
 8002454:	00001388 	.word	0x00001388
 8002458:	fffff8ff 	.word	0xfffff8ff
 800245c:	08005770 	.word	0x08005770
 8002460:	20000000 	.word	0x20000000

08002464 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b08a      	sub	sp, #40	@ 0x28
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8002470:	2014      	movs	r0, #20
 8002472:	183b      	adds	r3, r7, r0
 8002474:	2202      	movs	r2, #2
 8002476:	605a      	str	r2, [r3, #4]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002478:	183b      	adds	r3, r7, r0
 800247a:	2203      	movs	r2, #3
 800247c:	60da      	str	r2, [r3, #12]
  gpio.Pull      = GPIO_NOPULL;
 800247e:	183b      	adds	r3, r7, r0
 8002480:	2200      	movs	r2, #0
 8002482:	609a      	str	r2, [r3, #8]
  gpio.Pin       = MCO1_PIN;
 8002484:	183b      	adds	r3, r7, r0
 8002486:	2280      	movs	r2, #128	@ 0x80
 8002488:	0052      	lsls	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]
  gpio.Alternate = GPIO_AF0_MCO;
 800248c:	183b      	adds	r3, r7, r0
 800248e:	2200      	movs	r2, #0
 8002490:	611a      	str	r2, [r3, #16]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8002492:	4b12      	ldr	r3, [pc, #72]	@ (80024dc <HAL_RCC_MCOConfig+0x78>)
 8002494:	695a      	ldr	r2, [r3, #20]
 8002496:	4b11      	ldr	r3, [pc, #68]	@ (80024dc <HAL_RCC_MCOConfig+0x78>)
 8002498:	2180      	movs	r1, #128	@ 0x80
 800249a:	0289      	lsls	r1, r1, #10
 800249c:	430a      	orrs	r2, r1
 800249e:	615a      	str	r2, [r3, #20]
 80024a0:	4b0e      	ldr	r3, [pc, #56]	@ (80024dc <HAL_RCC_MCOConfig+0x78>)
 80024a2:	695a      	ldr	r2, [r3, #20]
 80024a4:	2380      	movs	r3, #128	@ 0x80
 80024a6:	029b      	lsls	r3, r3, #10
 80024a8:	4013      	ands	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80024ae:	183a      	adds	r2, r7, r0
 80024b0:	2390      	movs	r3, #144	@ 0x90
 80024b2:	05db      	lsls	r3, r3, #23
 80024b4:	0011      	movs	r1, r2
 80024b6:	0018      	movs	r0, r3
 80024b8:	f7ff fa0c 	bl	80018d4 <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80024bc:	4b07      	ldr	r3, [pc, #28]	@ (80024dc <HAL_RCC_MCOConfig+0x78>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	4a07      	ldr	r2, [pc, #28]	@ (80024e0 <HAL_RCC_MCOConfig+0x7c>)
 80024c2:	4013      	ands	r3, r2
 80024c4:	0019      	movs	r1, r3
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	431a      	orrs	r2, r3
 80024cc:	4b03      	ldr	r3, [pc, #12]	@ (80024dc <HAL_RCC_MCOConfig+0x78>)
 80024ce:	430a      	orrs	r2, r1
 80024d0:	605a      	str	r2, [r3, #4]
}
 80024d2:	46c0      	nop			@ (mov r8, r8)
 80024d4:	46bd      	mov	sp, r7
 80024d6:	b00a      	add	sp, #40	@ 0x28
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	46c0      	nop			@ (mov r8, r8)
 80024dc:	40021000 	.word	0x40021000
 80024e0:	80ffffff 	.word	0x80ffffff

080024e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	2300      	movs	r3, #0
 80024f0:	60bb      	str	r3, [r7, #8]
 80024f2:	2300      	movs	r3, #0
 80024f4:	617b      	str	r3, [r7, #20]
 80024f6:	2300      	movs	r3, #0
 80024f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80024fe:	4b2d      	ldr	r3, [pc, #180]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	220c      	movs	r2, #12
 8002508:	4013      	ands	r3, r2
 800250a:	2b0c      	cmp	r3, #12
 800250c:	d046      	beq.n	800259c <HAL_RCC_GetSysClockFreq+0xb8>
 800250e:	d848      	bhi.n	80025a2 <HAL_RCC_GetSysClockFreq+0xbe>
 8002510:	2b04      	cmp	r3, #4
 8002512:	d002      	beq.n	800251a <HAL_RCC_GetSysClockFreq+0x36>
 8002514:	2b08      	cmp	r3, #8
 8002516:	d003      	beq.n	8002520 <HAL_RCC_GetSysClockFreq+0x3c>
 8002518:	e043      	b.n	80025a2 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800251a:	4b27      	ldr	r3, [pc, #156]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800251c:	613b      	str	r3, [r7, #16]
      break;
 800251e:	e043      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	0c9b      	lsrs	r3, r3, #18
 8002524:	220f      	movs	r2, #15
 8002526:	4013      	ands	r3, r2
 8002528:	4a24      	ldr	r2, [pc, #144]	@ (80025bc <HAL_RCC_GetSysClockFreq+0xd8>)
 800252a:	5cd3      	ldrb	r3, [r2, r3]
 800252c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800252e:	4b21      	ldr	r3, [pc, #132]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002532:	220f      	movs	r2, #15
 8002534:	4013      	ands	r3, r2
 8002536:	4a22      	ldr	r2, [pc, #136]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002538:	5cd3      	ldrb	r3, [r2, r3]
 800253a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	23c0      	movs	r3, #192	@ 0xc0
 8002540:	025b      	lsls	r3, r3, #9
 8002542:	401a      	ands	r2, r3
 8002544:	2380      	movs	r3, #128	@ 0x80
 8002546:	025b      	lsls	r3, r3, #9
 8002548:	429a      	cmp	r2, r3
 800254a:	d109      	bne.n	8002560 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800254c:	68b9      	ldr	r1, [r7, #8]
 800254e:	481a      	ldr	r0, [pc, #104]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002550:	f7fd fde4 	bl	800011c <__udivsi3>
 8002554:	0003      	movs	r3, r0
 8002556:	001a      	movs	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4353      	muls	r3, r2
 800255c:	617b      	str	r3, [r7, #20]
 800255e:	e01a      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	23c0      	movs	r3, #192	@ 0xc0
 8002564:	025b      	lsls	r3, r3, #9
 8002566:	401a      	ands	r2, r3
 8002568:	23c0      	movs	r3, #192	@ 0xc0
 800256a:	025b      	lsls	r3, r3, #9
 800256c:	429a      	cmp	r2, r3
 800256e:	d109      	bne.n	8002584 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002570:	68b9      	ldr	r1, [r7, #8]
 8002572:	4814      	ldr	r0, [pc, #80]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002574:	f7fd fdd2 	bl	800011c <__udivsi3>
 8002578:	0003      	movs	r3, r0
 800257a:	001a      	movs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4353      	muls	r3, r2
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	e008      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002584:	68b9      	ldr	r1, [r7, #8]
 8002586:	480c      	ldr	r0, [pc, #48]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002588:	f7fd fdc8 	bl	800011c <__udivsi3>
 800258c:	0003      	movs	r3, r0
 800258e:	001a      	movs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4353      	muls	r3, r2
 8002594:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	613b      	str	r3, [r7, #16]
      break;
 800259a:	e005      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800259c:	4b09      	ldr	r3, [pc, #36]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0xe0>)
 800259e:	613b      	str	r3, [r7, #16]
      break;
 80025a0:	e002      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025a2:	4b05      	ldr	r3, [pc, #20]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0xd4>)
 80025a4:	613b      	str	r3, [r7, #16]
      break;
 80025a6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80025a8:	693b      	ldr	r3, [r7, #16]
}
 80025aa:	0018      	movs	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	b006      	add	sp, #24
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	46c0      	nop			@ (mov r8, r8)
 80025b4:	40021000 	.word	0x40021000
 80025b8:	007a1200 	.word	0x007a1200
 80025bc:	08005788 	.word	0x08005788
 80025c0:	08005798 	.word	0x08005798
 80025c4:	02dc6c00 	.word	0x02dc6c00

080025c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025cc:	4b02      	ldr	r3, [pc, #8]	@ (80025d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80025ce:	681b      	ldr	r3, [r3, #0]
}
 80025d0:	0018      	movs	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	46c0      	nop			@ (mov r8, r8)
 80025d8:	20000000 	.word	0x20000000

080025dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80025e0:	f7ff fff2 	bl	80025c8 <HAL_RCC_GetHCLKFreq>
 80025e4:	0001      	movs	r1, r0
 80025e6:	4b06      	ldr	r3, [pc, #24]	@ (8002600 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	0a1b      	lsrs	r3, r3, #8
 80025ec:	2207      	movs	r2, #7
 80025ee:	4013      	ands	r3, r2
 80025f0:	4a04      	ldr	r2, [pc, #16]	@ (8002604 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025f2:	5cd3      	ldrb	r3, [r2, r3]
 80025f4:	40d9      	lsrs	r1, r3
 80025f6:	000b      	movs	r3, r1
}    
 80025f8:	0018      	movs	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	46c0      	nop			@ (mov r8, r8)
 8002600:	40021000 	.word	0x40021000
 8002604:	08005780 	.word	0x08005780

08002608 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e042      	b.n	80026a0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	223d      	movs	r2, #61	@ 0x3d
 800261e:	5c9b      	ldrb	r3, [r3, r2]
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d107      	bne.n	8002636 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	223c      	movs	r2, #60	@ 0x3c
 800262a:	2100      	movs	r1, #0
 800262c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	0018      	movs	r0, r3
 8002632:	f7fe fbcf 	bl	8000dd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	223d      	movs	r2, #61	@ 0x3d
 800263a:	2102      	movs	r1, #2
 800263c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3304      	adds	r3, #4
 8002646:	0019      	movs	r1, r3
 8002648:	0010      	movs	r0, r2
 800264a:	f000 ff1f 	bl	800348c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2246      	movs	r2, #70	@ 0x46
 8002652:	2101      	movs	r1, #1
 8002654:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	223e      	movs	r2, #62	@ 0x3e
 800265a:	2101      	movs	r1, #1
 800265c:	5499      	strb	r1, [r3, r2]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	223f      	movs	r2, #63	@ 0x3f
 8002662:	2101      	movs	r1, #1
 8002664:	5499      	strb	r1, [r3, r2]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2240      	movs	r2, #64	@ 0x40
 800266a:	2101      	movs	r1, #1
 800266c:	5499      	strb	r1, [r3, r2]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2241      	movs	r2, #65	@ 0x41
 8002672:	2101      	movs	r1, #1
 8002674:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2242      	movs	r2, #66	@ 0x42
 800267a:	2101      	movs	r1, #1
 800267c:	5499      	strb	r1, [r3, r2]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2243      	movs	r2, #67	@ 0x43
 8002682:	2101      	movs	r1, #1
 8002684:	5499      	strb	r1, [r3, r2]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2244      	movs	r2, #68	@ 0x44
 800268a:	2101      	movs	r1, #1
 800268c:	5499      	strb	r1, [r3, r2]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2245      	movs	r2, #69	@ 0x45
 8002692:	2101      	movs	r1, #1
 8002694:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	223d      	movs	r2, #61	@ 0x3d
 800269a:	2101      	movs	r1, #1
 800269c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	0018      	movs	r0, r3
 80026a2:	46bd      	mov	sp, r7
 80026a4:	b002      	add	sp, #8
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	223d      	movs	r2, #61	@ 0x3d
 80026b4:	5c9b      	ldrb	r3, [r3, r2]
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d001      	beq.n	80026c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e036      	b.n	800272e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	223d      	movs	r2, #61	@ 0x3d
 80026c4:	2102      	movs	r1, #2
 80026c6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68da      	ldr	r2, [r3, #12]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2101      	movs	r1, #1
 80026d4:	430a      	orrs	r2, r1
 80026d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a16      	ldr	r2, [pc, #88]	@ (8002738 <HAL_TIM_Base_Start_IT+0x90>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d00a      	beq.n	80026f8 <HAL_TIM_Base_Start_IT+0x50>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	2380      	movs	r3, #128	@ 0x80
 80026e8:	05db      	lsls	r3, r3, #23
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d004      	beq.n	80026f8 <HAL_TIM_Base_Start_IT+0x50>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a12      	ldr	r2, [pc, #72]	@ (800273c <HAL_TIM_Base_Start_IT+0x94>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d111      	bne.n	800271c <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	2207      	movs	r2, #7
 8002700:	4013      	ands	r3, r2
 8002702:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2b06      	cmp	r3, #6
 8002708:	d010      	beq.n	800272c <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2101      	movs	r1, #1
 8002716:	430a      	orrs	r2, r1
 8002718:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800271a:	e007      	b.n	800272c <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2101      	movs	r1, #1
 8002728:	430a      	orrs	r2, r1
 800272a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	0018      	movs	r0, r3
 8002730:	46bd      	mov	sp, r7
 8002732:	b004      	add	sp, #16
 8002734:	bd80      	pop	{r7, pc}
 8002736:	46c0      	nop			@ (mov r8, r8)
 8002738:	40012c00 	.word	0x40012c00
 800273c:	40000400 	.word	0x40000400

08002740 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2101      	movs	r1, #1
 8002754:	438a      	bics	r2, r1
 8002756:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	4a0d      	ldr	r2, [pc, #52]	@ (8002794 <HAL_TIM_Base_Stop_IT+0x54>)
 8002760:	4013      	ands	r3, r2
 8002762:	d10d      	bne.n	8002780 <HAL_TIM_Base_Stop_IT+0x40>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	4a0b      	ldr	r2, [pc, #44]	@ (8002798 <HAL_TIM_Base_Stop_IT+0x58>)
 800276c:	4013      	ands	r3, r2
 800276e:	d107      	bne.n	8002780 <HAL_TIM_Base_Stop_IT+0x40>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2101      	movs	r1, #1
 800277c:	438a      	bics	r2, r1
 800277e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	223d      	movs	r2, #61	@ 0x3d
 8002784:	2101      	movs	r1, #1
 8002786:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	0018      	movs	r0, r3
 800278c:	46bd      	mov	sp, r7
 800278e:	b002      	add	sp, #8
 8002790:	bd80      	pop	{r7, pc}
 8002792:	46c0      	nop			@ (mov r8, r8)
 8002794:	00001111 	.word	0x00001111
 8002798:	00000444 	.word	0x00000444

0800279c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e042      	b.n	8002834 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	223d      	movs	r2, #61	@ 0x3d
 80027b2:	5c9b      	ldrb	r3, [r3, r2]
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d107      	bne.n	80027ca <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	223c      	movs	r2, #60	@ 0x3c
 80027be:	2100      	movs	r1, #0
 80027c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	0018      	movs	r0, r3
 80027c6:	f000 f839 	bl	800283c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	223d      	movs	r2, #61	@ 0x3d
 80027ce:	2102      	movs	r1, #2
 80027d0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	3304      	adds	r3, #4
 80027da:	0019      	movs	r1, r3
 80027dc:	0010      	movs	r0, r2
 80027de:	f000 fe55 	bl	800348c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2246      	movs	r2, #70	@ 0x46
 80027e6:	2101      	movs	r1, #1
 80027e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	223e      	movs	r2, #62	@ 0x3e
 80027ee:	2101      	movs	r1, #1
 80027f0:	5499      	strb	r1, [r3, r2]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	223f      	movs	r2, #63	@ 0x3f
 80027f6:	2101      	movs	r1, #1
 80027f8:	5499      	strb	r1, [r3, r2]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2240      	movs	r2, #64	@ 0x40
 80027fe:	2101      	movs	r1, #1
 8002800:	5499      	strb	r1, [r3, r2]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2241      	movs	r2, #65	@ 0x41
 8002806:	2101      	movs	r1, #1
 8002808:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2242      	movs	r2, #66	@ 0x42
 800280e:	2101      	movs	r1, #1
 8002810:	5499      	strb	r1, [r3, r2]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2243      	movs	r2, #67	@ 0x43
 8002816:	2101      	movs	r1, #1
 8002818:	5499      	strb	r1, [r3, r2]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2244      	movs	r2, #68	@ 0x44
 800281e:	2101      	movs	r1, #1
 8002820:	5499      	strb	r1, [r3, r2]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2245      	movs	r2, #69	@ 0x45
 8002826:	2101      	movs	r1, #1
 8002828:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	223d      	movs	r2, #61	@ 0x3d
 800282e:	2101      	movs	r1, #1
 8002830:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	0018      	movs	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	b002      	add	sp, #8
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002844:	46c0      	nop			@ (mov r8, r8)
 8002846:	46bd      	mov	sp, r7
 8002848:	b002      	add	sp, #8
 800284a:	bd80      	pop	{r7, pc}

0800284c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d108      	bne.n	800286e <HAL_TIM_PWM_Start+0x22>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	223e      	movs	r2, #62	@ 0x3e
 8002860:	5c9b      	ldrb	r3, [r3, r2]
 8002862:	b2db      	uxtb	r3, r3
 8002864:	3b01      	subs	r3, #1
 8002866:	1e5a      	subs	r2, r3, #1
 8002868:	4193      	sbcs	r3, r2
 800286a:	b2db      	uxtb	r3, r3
 800286c:	e01f      	b.n	80028ae <HAL_TIM_PWM_Start+0x62>
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	2b04      	cmp	r3, #4
 8002872:	d108      	bne.n	8002886 <HAL_TIM_PWM_Start+0x3a>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	223f      	movs	r2, #63	@ 0x3f
 8002878:	5c9b      	ldrb	r3, [r3, r2]
 800287a:	b2db      	uxtb	r3, r3
 800287c:	3b01      	subs	r3, #1
 800287e:	1e5a      	subs	r2, r3, #1
 8002880:	4193      	sbcs	r3, r2
 8002882:	b2db      	uxtb	r3, r3
 8002884:	e013      	b.n	80028ae <HAL_TIM_PWM_Start+0x62>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	2b08      	cmp	r3, #8
 800288a:	d108      	bne.n	800289e <HAL_TIM_PWM_Start+0x52>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2240      	movs	r2, #64	@ 0x40
 8002890:	5c9b      	ldrb	r3, [r3, r2]
 8002892:	b2db      	uxtb	r3, r3
 8002894:	3b01      	subs	r3, #1
 8002896:	1e5a      	subs	r2, r3, #1
 8002898:	4193      	sbcs	r3, r2
 800289a:	b2db      	uxtb	r3, r3
 800289c:	e007      	b.n	80028ae <HAL_TIM_PWM_Start+0x62>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2241      	movs	r2, #65	@ 0x41
 80028a2:	5c9b      	ldrb	r3, [r3, r2]
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	3b01      	subs	r3, #1
 80028a8:	1e5a      	subs	r2, r3, #1
 80028aa:	4193      	sbcs	r3, r2
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e06a      	b.n	800298c <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d104      	bne.n	80028c6 <HAL_TIM_PWM_Start+0x7a>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	223e      	movs	r2, #62	@ 0x3e
 80028c0:	2102      	movs	r1, #2
 80028c2:	5499      	strb	r1, [r3, r2]
 80028c4:	e013      	b.n	80028ee <HAL_TIM_PWM_Start+0xa2>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	d104      	bne.n	80028d6 <HAL_TIM_PWM_Start+0x8a>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	223f      	movs	r2, #63	@ 0x3f
 80028d0:	2102      	movs	r1, #2
 80028d2:	5499      	strb	r1, [r3, r2]
 80028d4:	e00b      	b.n	80028ee <HAL_TIM_PWM_Start+0xa2>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2b08      	cmp	r3, #8
 80028da:	d104      	bne.n	80028e6 <HAL_TIM_PWM_Start+0x9a>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2240      	movs	r2, #64	@ 0x40
 80028e0:	2102      	movs	r1, #2
 80028e2:	5499      	strb	r1, [r3, r2]
 80028e4:	e003      	b.n	80028ee <HAL_TIM_PWM_Start+0xa2>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2241      	movs	r2, #65	@ 0x41
 80028ea:	2102      	movs	r1, #2
 80028ec:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6839      	ldr	r1, [r7, #0]
 80028f4:	2201      	movs	r2, #1
 80028f6:	0018      	movs	r0, r3
 80028f8:	f001 f9d6 	bl	8003ca8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a24      	ldr	r2, [pc, #144]	@ (8002994 <HAL_TIM_PWM_Start+0x148>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d009      	beq.n	800291a <HAL_TIM_PWM_Start+0xce>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a23      	ldr	r2, [pc, #140]	@ (8002998 <HAL_TIM_PWM_Start+0x14c>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d004      	beq.n	800291a <HAL_TIM_PWM_Start+0xce>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a21      	ldr	r2, [pc, #132]	@ (800299c <HAL_TIM_PWM_Start+0x150>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d101      	bne.n	800291e <HAL_TIM_PWM_Start+0xd2>
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <HAL_TIM_PWM_Start+0xd4>
 800291e:	2300      	movs	r3, #0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d008      	beq.n	8002936 <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2180      	movs	r1, #128	@ 0x80
 8002930:	0209      	lsls	r1, r1, #8
 8002932:	430a      	orrs	r2, r1
 8002934:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a16      	ldr	r2, [pc, #88]	@ (8002994 <HAL_TIM_PWM_Start+0x148>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d00a      	beq.n	8002956 <HAL_TIM_PWM_Start+0x10a>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	2380      	movs	r3, #128	@ 0x80
 8002946:	05db      	lsls	r3, r3, #23
 8002948:	429a      	cmp	r2, r3
 800294a:	d004      	beq.n	8002956 <HAL_TIM_PWM_Start+0x10a>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a13      	ldr	r2, [pc, #76]	@ (80029a0 <HAL_TIM_PWM_Start+0x154>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d111      	bne.n	800297a <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	2207      	movs	r2, #7
 800295e:	4013      	ands	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2b06      	cmp	r3, #6
 8002966:	d010      	beq.n	800298a <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2101      	movs	r1, #1
 8002974:	430a      	orrs	r2, r1
 8002976:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002978:	e007      	b.n	800298a <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2101      	movs	r1, #1
 8002986:	430a      	orrs	r2, r1
 8002988:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	0018      	movs	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	b004      	add	sp, #16
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40012c00 	.word	0x40012c00
 8002998:	40014400 	.word	0x40014400
 800299c:	40014800 	.word	0x40014800
 80029a0:	40000400 	.word	0x40000400

080029a4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e042      	b.n	8002a3c <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	223d      	movs	r2, #61	@ 0x3d
 80029ba:	5c9b      	ldrb	r3, [r3, r2]
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d107      	bne.n	80029d2 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	223c      	movs	r2, #60	@ 0x3c
 80029c6:	2100      	movs	r1, #0
 80029c8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	0018      	movs	r0, r3
 80029ce:	f000 f839 	bl	8002a44 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	223d      	movs	r2, #61	@ 0x3d
 80029d6:	2102      	movs	r1, #2
 80029d8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	3304      	adds	r3, #4
 80029e2:	0019      	movs	r1, r3
 80029e4:	0010      	movs	r0, r2
 80029e6:	f000 fd51 	bl	800348c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2246      	movs	r2, #70	@ 0x46
 80029ee:	2101      	movs	r1, #1
 80029f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	223e      	movs	r2, #62	@ 0x3e
 80029f6:	2101      	movs	r1, #1
 80029f8:	5499      	strb	r1, [r3, r2]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	223f      	movs	r2, #63	@ 0x3f
 80029fe:	2101      	movs	r1, #1
 8002a00:	5499      	strb	r1, [r3, r2]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2240      	movs	r2, #64	@ 0x40
 8002a06:	2101      	movs	r1, #1
 8002a08:	5499      	strb	r1, [r3, r2]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2241      	movs	r2, #65	@ 0x41
 8002a0e:	2101      	movs	r1, #1
 8002a10:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2242      	movs	r2, #66	@ 0x42
 8002a16:	2101      	movs	r1, #1
 8002a18:	5499      	strb	r1, [r3, r2]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2243      	movs	r2, #67	@ 0x43
 8002a1e:	2101      	movs	r1, #1
 8002a20:	5499      	strb	r1, [r3, r2]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2244      	movs	r2, #68	@ 0x44
 8002a26:	2101      	movs	r1, #1
 8002a28:	5499      	strb	r1, [r3, r2]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2245      	movs	r2, #69	@ 0x45
 8002a2e:	2101      	movs	r1, #1
 8002a30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	223d      	movs	r2, #61	@ 0x3d
 8002a36:	2101      	movs	r1, #1
 8002a38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b002      	add	sp, #8
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002a4c:	46c0      	nop			@ (mov r8, r8)
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	b002      	add	sp, #8
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a5e:	230f      	movs	r3, #15
 8002a60:	18fb      	adds	r3, r7, r3
 8002a62:	2200      	movs	r2, #0
 8002a64:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d104      	bne.n	8002a76 <HAL_TIM_IC_Start_IT+0x22>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	223e      	movs	r2, #62	@ 0x3e
 8002a70:	5c9b      	ldrb	r3, [r3, r2]
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	e013      	b.n	8002a9e <HAL_TIM_IC_Start_IT+0x4a>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d104      	bne.n	8002a86 <HAL_TIM_IC_Start_IT+0x32>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	223f      	movs	r2, #63	@ 0x3f
 8002a80:	5c9b      	ldrb	r3, [r3, r2]
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	e00b      	b.n	8002a9e <HAL_TIM_IC_Start_IT+0x4a>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	d104      	bne.n	8002a96 <HAL_TIM_IC_Start_IT+0x42>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2240      	movs	r2, #64	@ 0x40
 8002a90:	5c9b      	ldrb	r3, [r3, r2]
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	e003      	b.n	8002a9e <HAL_TIM_IC_Start_IT+0x4a>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2241      	movs	r2, #65	@ 0x41
 8002a9a:	5c9b      	ldrb	r3, [r3, r2]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	220e      	movs	r2, #14
 8002aa0:	18ba      	adds	r2, r7, r2
 8002aa2:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d104      	bne.n	8002ab4 <HAL_TIM_IC_Start_IT+0x60>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2242      	movs	r2, #66	@ 0x42
 8002aae:	5c9b      	ldrb	r3, [r3, r2]
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	e013      	b.n	8002adc <HAL_TIM_IC_Start_IT+0x88>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d104      	bne.n	8002ac4 <HAL_TIM_IC_Start_IT+0x70>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2243      	movs	r2, #67	@ 0x43
 8002abe:	5c9b      	ldrb	r3, [r3, r2]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	e00b      	b.n	8002adc <HAL_TIM_IC_Start_IT+0x88>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	2b08      	cmp	r3, #8
 8002ac8:	d104      	bne.n	8002ad4 <HAL_TIM_IC_Start_IT+0x80>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2244      	movs	r2, #68	@ 0x44
 8002ace:	5c9b      	ldrb	r3, [r3, r2]
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	e003      	b.n	8002adc <HAL_TIM_IC_Start_IT+0x88>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2245      	movs	r2, #69	@ 0x45
 8002ad8:	5c9b      	ldrb	r3, [r3, r2]
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	210d      	movs	r1, #13
 8002ade:	187a      	adds	r2, r7, r1
 8002ae0:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ae2:	230e      	movs	r3, #14
 8002ae4:	18fb      	adds	r3, r7, r3
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d103      	bne.n	8002af4 <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002aec:	187b      	adds	r3, r7, r1
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d001      	beq.n	8002af8 <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e0ac      	b.n	8002c52 <HAL_TIM_IC_Start_IT+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d104      	bne.n	8002b08 <HAL_TIM_IC_Start_IT+0xb4>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	223e      	movs	r2, #62	@ 0x3e
 8002b02:	2102      	movs	r1, #2
 8002b04:	5499      	strb	r1, [r3, r2]
 8002b06:	e013      	b.n	8002b30 <HAL_TIM_IC_Start_IT+0xdc>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	d104      	bne.n	8002b18 <HAL_TIM_IC_Start_IT+0xc4>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	223f      	movs	r2, #63	@ 0x3f
 8002b12:	2102      	movs	r1, #2
 8002b14:	5499      	strb	r1, [r3, r2]
 8002b16:	e00b      	b.n	8002b30 <HAL_TIM_IC_Start_IT+0xdc>
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	2b08      	cmp	r3, #8
 8002b1c:	d104      	bne.n	8002b28 <HAL_TIM_IC_Start_IT+0xd4>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2240      	movs	r2, #64	@ 0x40
 8002b22:	2102      	movs	r1, #2
 8002b24:	5499      	strb	r1, [r3, r2]
 8002b26:	e003      	b.n	8002b30 <HAL_TIM_IC_Start_IT+0xdc>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2241      	movs	r2, #65	@ 0x41
 8002b2c:	2102      	movs	r1, #2
 8002b2e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d104      	bne.n	8002b40 <HAL_TIM_IC_Start_IT+0xec>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2242      	movs	r2, #66	@ 0x42
 8002b3a:	2102      	movs	r1, #2
 8002b3c:	5499      	strb	r1, [r3, r2]
 8002b3e:	e013      	b.n	8002b68 <HAL_TIM_IC_Start_IT+0x114>
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d104      	bne.n	8002b50 <HAL_TIM_IC_Start_IT+0xfc>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2243      	movs	r2, #67	@ 0x43
 8002b4a:	2102      	movs	r1, #2
 8002b4c:	5499      	strb	r1, [r3, r2]
 8002b4e:	e00b      	b.n	8002b68 <HAL_TIM_IC_Start_IT+0x114>
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	2b08      	cmp	r3, #8
 8002b54:	d104      	bne.n	8002b60 <HAL_TIM_IC_Start_IT+0x10c>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2244      	movs	r2, #68	@ 0x44
 8002b5a:	2102      	movs	r1, #2
 8002b5c:	5499      	strb	r1, [r3, r2]
 8002b5e:	e003      	b.n	8002b68 <HAL_TIM_IC_Start_IT+0x114>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2245      	movs	r2, #69	@ 0x45
 8002b64:	2102      	movs	r1, #2
 8002b66:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	2b0c      	cmp	r3, #12
 8002b6c:	d02a      	beq.n	8002bc4 <HAL_TIM_IC_Start_IT+0x170>
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	2b0c      	cmp	r3, #12
 8002b72:	d830      	bhi.n	8002bd6 <HAL_TIM_IC_Start_IT+0x182>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d01b      	beq.n	8002bb2 <HAL_TIM_IC_Start_IT+0x15e>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	d82a      	bhi.n	8002bd6 <HAL_TIM_IC_Start_IT+0x182>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_TIM_IC_Start_IT+0x13a>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2b04      	cmp	r3, #4
 8002b8a:	d009      	beq.n	8002ba0 <HAL_TIM_IC_Start_IT+0x14c>
 8002b8c:	e023      	b.n	8002bd6 <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68da      	ldr	r2, [r3, #12]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2102      	movs	r1, #2
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	60da      	str	r2, [r3, #12]
      break;
 8002b9e:	e01f      	b.n	8002be0 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2104      	movs	r1, #4
 8002bac:	430a      	orrs	r2, r1
 8002bae:	60da      	str	r2, [r3, #12]
      break;
 8002bb0:	e016      	b.n	8002be0 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68da      	ldr	r2, [r3, #12]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2108      	movs	r1, #8
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	60da      	str	r2, [r3, #12]
      break;
 8002bc2:	e00d      	b.n	8002be0 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68da      	ldr	r2, [r3, #12]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2110      	movs	r1, #16
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	60da      	str	r2, [r3, #12]
      break;
 8002bd4:	e004      	b.n	8002be0 <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 8002bd6:	230f      	movs	r3, #15
 8002bd8:	18fb      	adds	r3, r7, r3
 8002bda:	2201      	movs	r2, #1
 8002bdc:	701a      	strb	r2, [r3, #0]
      break;
 8002bde:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8002be0:	230f      	movs	r3, #15
 8002be2:	18fb      	adds	r3, r7, r3
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d130      	bne.n	8002c4c <HAL_TIM_IC_Start_IT+0x1f8>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6839      	ldr	r1, [r7, #0]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	f001 f858 	bl	8003ca8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a17      	ldr	r2, [pc, #92]	@ (8002c5c <HAL_TIM_IC_Start_IT+0x208>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d00a      	beq.n	8002c18 <HAL_TIM_IC_Start_IT+0x1c4>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	2380      	movs	r3, #128	@ 0x80
 8002c08:	05db      	lsls	r3, r3, #23
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d004      	beq.n	8002c18 <HAL_TIM_IC_Start_IT+0x1c4>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a13      	ldr	r2, [pc, #76]	@ (8002c60 <HAL_TIM_IC_Start_IT+0x20c>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d111      	bne.n	8002c3c <HAL_TIM_IC_Start_IT+0x1e8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	2207      	movs	r2, #7
 8002c20:	4013      	ands	r3, r2
 8002c22:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b06      	cmp	r3, #6
 8002c28:	d010      	beq.n	8002c4c <HAL_TIM_IC_Start_IT+0x1f8>
      {
        __HAL_TIM_ENABLE(htim);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2101      	movs	r1, #1
 8002c36:	430a      	orrs	r2, r1
 8002c38:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c3a:	e007      	b.n	8002c4c <HAL_TIM_IC_Start_IT+0x1f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2101      	movs	r1, #1
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002c4c:	230f      	movs	r3, #15
 8002c4e:	18fb      	adds	r3, r7, r3
 8002c50:	781b      	ldrb	r3, [r3, #0]
}
 8002c52:	0018      	movs	r0, r3
 8002c54:	46bd      	mov	sp, r7
 8002c56:	b004      	add	sp, #16
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	46c0      	nop			@ (mov r8, r8)
 8002c5c:	40012c00 	.word	0x40012c00
 8002c60:	40000400 	.word	0x40000400

08002c64 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c6e:	230f      	movs	r3, #15
 8002c70:	18fb      	adds	r3, r7, r3
 8002c72:	2200      	movs	r2, #0
 8002c74:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	2b0c      	cmp	r3, #12
 8002c7a:	d02a      	beq.n	8002cd2 <HAL_TIM_IC_Stop_IT+0x6e>
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	2b0c      	cmp	r3, #12
 8002c80:	d830      	bhi.n	8002ce4 <HAL_TIM_IC_Stop_IT+0x80>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	d01b      	beq.n	8002cc0 <HAL_TIM_IC_Stop_IT+0x5c>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	2b08      	cmp	r3, #8
 8002c8c:	d82a      	bhi.n	8002ce4 <HAL_TIM_IC_Stop_IT+0x80>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d003      	beq.n	8002c9c <HAL_TIM_IC_Stop_IT+0x38>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d009      	beq.n	8002cae <HAL_TIM_IC_Stop_IT+0x4a>
 8002c9a:	e023      	b.n	8002ce4 <HAL_TIM_IC_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68da      	ldr	r2, [r3, #12]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2102      	movs	r1, #2
 8002ca8:	438a      	bics	r2, r1
 8002caa:	60da      	str	r2, [r3, #12]
      break;
 8002cac:	e01f      	b.n	8002cee <HAL_TIM_IC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68da      	ldr	r2, [r3, #12]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2104      	movs	r1, #4
 8002cba:	438a      	bics	r2, r1
 8002cbc:	60da      	str	r2, [r3, #12]
      break;
 8002cbe:	e016      	b.n	8002cee <HAL_TIM_IC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68da      	ldr	r2, [r3, #12]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2108      	movs	r1, #8
 8002ccc:	438a      	bics	r2, r1
 8002cce:	60da      	str	r2, [r3, #12]
      break;
 8002cd0:	e00d      	b.n	8002cee <HAL_TIM_IC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68da      	ldr	r2, [r3, #12]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2110      	movs	r1, #16
 8002cde:	438a      	bics	r2, r1
 8002ce0:	60da      	str	r2, [r3, #12]
      break;
 8002ce2:	e004      	b.n	8002cee <HAL_TIM_IC_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 8002ce4:	230f      	movs	r3, #15
 8002ce6:	18fb      	adds	r3, r7, r3
 8002ce8:	2201      	movs	r2, #1
 8002cea:	701a      	strb	r2, [r3, #0]
      break;
 8002cec:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8002cee:	230f      	movs	r3, #15
 8002cf0:	18fb      	adds	r3, r7, r3
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d152      	bne.n	8002d9e <HAL_TIM_IC_Stop_IT+0x13a>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6839      	ldr	r1, [r7, #0]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	0018      	movs	r0, r3
 8002d02:	f000 ffd1 	bl	8003ca8 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	4a27      	ldr	r2, [pc, #156]	@ (8002dac <HAL_TIM_IC_Stop_IT+0x148>)
 8002d0e:	4013      	ands	r3, r2
 8002d10:	d10d      	bne.n	8002d2e <HAL_TIM_IC_Stop_IT+0xca>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	4a25      	ldr	r2, [pc, #148]	@ (8002db0 <HAL_TIM_IC_Stop_IT+0x14c>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d107      	bne.n	8002d2e <HAL_TIM_IC_Stop_IT+0xca>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2101      	movs	r1, #1
 8002d2a:	438a      	bics	r2, r1
 8002d2c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d104      	bne.n	8002d3e <HAL_TIM_IC_Stop_IT+0xda>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	223e      	movs	r2, #62	@ 0x3e
 8002d38:	2101      	movs	r1, #1
 8002d3a:	5499      	strb	r1, [r3, r2]
 8002d3c:	e013      	b.n	8002d66 <HAL_TIM_IC_Stop_IT+0x102>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b04      	cmp	r3, #4
 8002d42:	d104      	bne.n	8002d4e <HAL_TIM_IC_Stop_IT+0xea>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	223f      	movs	r2, #63	@ 0x3f
 8002d48:	2101      	movs	r1, #1
 8002d4a:	5499      	strb	r1, [r3, r2]
 8002d4c:	e00b      	b.n	8002d66 <HAL_TIM_IC_Stop_IT+0x102>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d104      	bne.n	8002d5e <HAL_TIM_IC_Stop_IT+0xfa>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2240      	movs	r2, #64	@ 0x40
 8002d58:	2101      	movs	r1, #1
 8002d5a:	5499      	strb	r1, [r3, r2]
 8002d5c:	e003      	b.n	8002d66 <HAL_TIM_IC_Stop_IT+0x102>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2241      	movs	r2, #65	@ 0x41
 8002d62:	2101      	movs	r1, #1
 8002d64:	5499      	strb	r1, [r3, r2]
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d104      	bne.n	8002d76 <HAL_TIM_IC_Stop_IT+0x112>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2242      	movs	r2, #66	@ 0x42
 8002d70:	2101      	movs	r1, #1
 8002d72:	5499      	strb	r1, [r3, r2]
 8002d74:	e013      	b.n	8002d9e <HAL_TIM_IC_Stop_IT+0x13a>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2b04      	cmp	r3, #4
 8002d7a:	d104      	bne.n	8002d86 <HAL_TIM_IC_Stop_IT+0x122>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2243      	movs	r2, #67	@ 0x43
 8002d80:	2101      	movs	r1, #1
 8002d82:	5499      	strb	r1, [r3, r2]
 8002d84:	e00b      	b.n	8002d9e <HAL_TIM_IC_Stop_IT+0x13a>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d104      	bne.n	8002d96 <HAL_TIM_IC_Stop_IT+0x132>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2244      	movs	r2, #68	@ 0x44
 8002d90:	2101      	movs	r1, #1
 8002d92:	5499      	strb	r1, [r3, r2]
 8002d94:	e003      	b.n	8002d9e <HAL_TIM_IC_Stop_IT+0x13a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2245      	movs	r2, #69	@ 0x45
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8002d9e:	230f      	movs	r3, #15
 8002da0:	18fb      	adds	r3, r7, r3
 8002da2:	781b      	ldrb	r3, [r3, #0]
}
 8002da4:	0018      	movs	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b004      	add	sp, #16
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	00001111 	.word	0x00001111
 8002db0:	00000444 	.word	0x00000444

08002db4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d124      	bne.n	8002e14 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d11d      	bne.n	8002e14 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2203      	movs	r2, #3
 8002dde:	4252      	negs	r2, r2
 8002de0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	2203      	movs	r2, #3
 8002df0:	4013      	ands	r3, r2
 8002df2:	d004      	beq.n	8002dfe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	0018      	movs	r0, r3
 8002df8:	f7fd fed6 	bl	8000ba8 <HAL_TIM_IC_CaptureCallback>
 8002dfc:	e007      	b.n	8002e0e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	0018      	movs	r0, r3
 8002e02:	f000 fb2b 	bl	800345c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f000 fb2f 	bl	800346c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	2204      	movs	r2, #4
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d125      	bne.n	8002e6e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	2204      	movs	r2, #4
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	2b04      	cmp	r3, #4
 8002e2e:	d11e      	bne.n	8002e6e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2205      	movs	r2, #5
 8002e36:	4252      	negs	r2, r2
 8002e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	699a      	ldr	r2, [r3, #24]
 8002e46:	23c0      	movs	r3, #192	@ 0xc0
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	d004      	beq.n	8002e58 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	0018      	movs	r0, r3
 8002e52:	f7fd fea9 	bl	8000ba8 <HAL_TIM_IC_CaptureCallback>
 8002e56:	e007      	b.n	8002e68 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f000 fafe 	bl	800345c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	0018      	movs	r0, r3
 8002e64:	f000 fb02 	bl	800346c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	2208      	movs	r2, #8
 8002e76:	4013      	ands	r3, r2
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	d124      	bne.n	8002ec6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	2208      	movs	r2, #8
 8002e84:	4013      	ands	r3, r2
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	d11d      	bne.n	8002ec6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2209      	movs	r2, #9
 8002e90:	4252      	negs	r2, r2
 8002e92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2204      	movs	r2, #4
 8002e98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	2203      	movs	r2, #3
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	d004      	beq.n	8002eb0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	f7fd fe7d 	bl	8000ba8 <HAL_TIM_IC_CaptureCallback>
 8002eae:	e007      	b.n	8002ec0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f000 fad2 	bl	800345c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f000 fad6 	bl	800346c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	2210      	movs	r2, #16
 8002ece:	4013      	ands	r3, r2
 8002ed0:	2b10      	cmp	r3, #16
 8002ed2:	d125      	bne.n	8002f20 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	2210      	movs	r2, #16
 8002edc:	4013      	ands	r3, r2
 8002ede:	2b10      	cmp	r3, #16
 8002ee0:	d11e      	bne.n	8002f20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2211      	movs	r2, #17
 8002ee8:	4252      	negs	r2, r2
 8002eea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2208      	movs	r2, #8
 8002ef0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	69da      	ldr	r2, [r3, #28]
 8002ef8:	23c0      	movs	r3, #192	@ 0xc0
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4013      	ands	r3, r2
 8002efe:	d004      	beq.n	8002f0a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	0018      	movs	r0, r3
 8002f04:	f7fd fe50 	bl	8000ba8 <HAL_TIM_IC_CaptureCallback>
 8002f08:	e007      	b.n	8002f1a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	f000 faa5 	bl	800345c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	0018      	movs	r0, r3
 8002f16:	f000 faa9 	bl	800346c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	2201      	movs	r2, #1
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d10f      	bne.n	8002f4e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	2201      	movs	r2, #1
 8002f36:	4013      	ands	r3, r2
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d108      	bne.n	8002f4e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2202      	movs	r2, #2
 8002f42:	4252      	negs	r2, r2
 8002f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	0018      	movs	r0, r3
 8002f4a:	f7fd fea3 	bl	8000c94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	2280      	movs	r2, #128	@ 0x80
 8002f56:	4013      	ands	r3, r2
 8002f58:	2b80      	cmp	r3, #128	@ 0x80
 8002f5a:	d10f      	bne.n	8002f7c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	2280      	movs	r2, #128	@ 0x80
 8002f64:	4013      	ands	r3, r2
 8002f66:	2b80      	cmp	r3, #128	@ 0x80
 8002f68:	d108      	bne.n	8002f7c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2281      	movs	r2, #129	@ 0x81
 8002f70:	4252      	negs	r2, r2
 8002f72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	0018      	movs	r0, r3
 8002f78:	f000 ff78 	bl	8003e6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	2240      	movs	r2, #64	@ 0x40
 8002f84:	4013      	ands	r3, r2
 8002f86:	2b40      	cmp	r3, #64	@ 0x40
 8002f88:	d10f      	bne.n	8002faa <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	2240      	movs	r2, #64	@ 0x40
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b40      	cmp	r3, #64	@ 0x40
 8002f96:	d108      	bne.n	8002faa <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2241      	movs	r2, #65	@ 0x41
 8002f9e:	4252      	negs	r2, r2
 8002fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f000 fa69 	bl	800347c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	2b20      	cmp	r3, #32
 8002fb6:	d10f      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	2b20      	cmp	r3, #32
 8002fc4:	d108      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2221      	movs	r2, #33	@ 0x21
 8002fcc:	4252      	negs	r2, r2
 8002fce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	f000 ff42 	bl	8003e5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fd8:	46c0      	nop			@ (mov r8, r8)
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	b002      	add	sp, #8
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fec:	2317      	movs	r3, #23
 8002fee:	18fb      	adds	r3, r7, r3
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	223c      	movs	r2, #60	@ 0x3c
 8002ff8:	5c9b      	ldrb	r3, [r3, r2]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d101      	bne.n	8003002 <HAL_TIM_IC_ConfigChannel+0x22>
 8002ffe:	2302      	movs	r3, #2
 8003000:	e08c      	b.n	800311c <HAL_TIM_IC_ConfigChannel+0x13c>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	223c      	movs	r2, #60	@ 0x3c
 8003006:	2101      	movs	r1, #1
 8003008:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d11b      	bne.n	8003048 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003020:	f000 fc8a 	bl	8003938 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	699a      	ldr	r2, [r3, #24]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	210c      	movs	r1, #12
 8003030:	438a      	bics	r2, r1
 8003032:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6999      	ldr	r1, [r3, #24]
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	619a      	str	r2, [r3, #24]
 8003046:	e062      	b.n	800310e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b04      	cmp	r3, #4
 800304c:	d11c      	bne.n	8003088 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800305e:	f000 fcef 	bl	8003a40 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	699a      	ldr	r2, [r3, #24]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	492d      	ldr	r1, [pc, #180]	@ (8003124 <HAL_TIM_IC_ConfigChannel+0x144>)
 800306e:	400a      	ands	r2, r1
 8003070:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6999      	ldr	r1, [r3, #24]
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	021a      	lsls	r2, r3, #8
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	619a      	str	r2, [r3, #24]
 8003086:	e042      	b.n	800310e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b08      	cmp	r3, #8
 800308c:	d11b      	bne.n	80030c6 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800309e:	f000 fd43 	bl	8003b28 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	69da      	ldr	r2, [r3, #28]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	210c      	movs	r1, #12
 80030ae:	438a      	bics	r2, r1
 80030b0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	69d9      	ldr	r1, [r3, #28]
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	61da      	str	r2, [r3, #28]
 80030c4:	e023      	b.n	800310e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b0c      	cmp	r3, #12
 80030ca:	d11c      	bne.n	8003106 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80030dc:	f000 fd64 	bl	8003ba8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	69da      	ldr	r2, [r3, #28]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	490e      	ldr	r1, [pc, #56]	@ (8003124 <HAL_TIM_IC_ConfigChannel+0x144>)
 80030ec:	400a      	ands	r2, r1
 80030ee:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	69d9      	ldr	r1, [r3, #28]
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	021a      	lsls	r2, r3, #8
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	430a      	orrs	r2, r1
 8003102:	61da      	str	r2, [r3, #28]
 8003104:	e003      	b.n	800310e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8003106:	2317      	movs	r3, #23
 8003108:	18fb      	adds	r3, r7, r3
 800310a:	2201      	movs	r2, #1
 800310c:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	223c      	movs	r2, #60	@ 0x3c
 8003112:	2100      	movs	r1, #0
 8003114:	5499      	strb	r1, [r3, r2]

  return status;
 8003116:	2317      	movs	r3, #23
 8003118:	18fb      	adds	r3, r7, r3
 800311a:	781b      	ldrb	r3, [r3, #0]
}
 800311c:	0018      	movs	r0, r3
 800311e:	46bd      	mov	sp, r7
 8003120:	b006      	add	sp, #24
 8003122:	bd80      	pop	{r7, pc}
 8003124:	fffff3ff 	.word	0xfffff3ff

08003128 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003134:	2317      	movs	r3, #23
 8003136:	18fb      	adds	r3, r7, r3
 8003138:	2200      	movs	r2, #0
 800313a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	223c      	movs	r2, #60	@ 0x3c
 8003140:	5c9b      	ldrb	r3, [r3, r2]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d101      	bne.n	800314a <HAL_TIM_PWM_ConfigChannel+0x22>
 8003146:	2302      	movs	r3, #2
 8003148:	e0ad      	b.n	80032a6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	223c      	movs	r2, #60	@ 0x3c
 800314e:	2101      	movs	r1, #1
 8003150:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b0c      	cmp	r3, #12
 8003156:	d100      	bne.n	800315a <HAL_TIM_PWM_ConfigChannel+0x32>
 8003158:	e076      	b.n	8003248 <HAL_TIM_PWM_ConfigChannel+0x120>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b0c      	cmp	r3, #12
 800315e:	d900      	bls.n	8003162 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003160:	e095      	b.n	800328e <HAL_TIM_PWM_ConfigChannel+0x166>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b08      	cmp	r3, #8
 8003166:	d04e      	beq.n	8003206 <HAL_TIM_PWM_ConfigChannel+0xde>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b08      	cmp	r3, #8
 800316c:	d900      	bls.n	8003170 <HAL_TIM_PWM_ConfigChannel+0x48>
 800316e:	e08e      	b.n	800328e <HAL_TIM_PWM_ConfigChannel+0x166>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_TIM_PWM_ConfigChannel+0x56>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b04      	cmp	r3, #4
 800317a:	d021      	beq.n	80031c0 <HAL_TIM_PWM_ConfigChannel+0x98>
 800317c:	e087      	b.n	800328e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	0011      	movs	r1, r2
 8003186:	0018      	movs	r0, r3
 8003188:	f000 f9f6 	bl	8003578 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699a      	ldr	r2, [r3, #24]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2108      	movs	r1, #8
 8003198:	430a      	orrs	r2, r1
 800319a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699a      	ldr	r2, [r3, #24]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2104      	movs	r1, #4
 80031a8:	438a      	bics	r2, r1
 80031aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6999      	ldr	r1, [r3, #24]
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	691a      	ldr	r2, [r3, #16]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	619a      	str	r2, [r3, #24]
      break;
 80031be:	e06b      	b.n	8003298 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	0011      	movs	r1, r2
 80031c8:	0018      	movs	r0, r3
 80031ca:	f000 fa53 	bl	8003674 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	699a      	ldr	r2, [r3, #24]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2180      	movs	r1, #128	@ 0x80
 80031da:	0109      	lsls	r1, r1, #4
 80031dc:	430a      	orrs	r2, r1
 80031de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	699a      	ldr	r2, [r3, #24]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4931      	ldr	r1, [pc, #196]	@ (80032b0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80031ec:	400a      	ands	r2, r1
 80031ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6999      	ldr	r1, [r3, #24]
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	021a      	lsls	r2, r3, #8
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	619a      	str	r2, [r3, #24]
      break;
 8003204:	e048      	b.n	8003298 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	0011      	movs	r1, r2
 800320e:	0018      	movs	r0, r3
 8003210:	f000 faae 	bl	8003770 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	69da      	ldr	r2, [r3, #28]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2108      	movs	r1, #8
 8003220:	430a      	orrs	r2, r1
 8003222:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	69da      	ldr	r2, [r3, #28]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2104      	movs	r1, #4
 8003230:	438a      	bics	r2, r1
 8003232:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	69d9      	ldr	r1, [r3, #28]
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	691a      	ldr	r2, [r3, #16]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	61da      	str	r2, [r3, #28]
      break;
 8003246:	e027      	b.n	8003298 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	0011      	movs	r1, r2
 8003250:	0018      	movs	r0, r3
 8003252:	f000 fb0d 	bl	8003870 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	69da      	ldr	r2, [r3, #28]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2180      	movs	r1, #128	@ 0x80
 8003262:	0109      	lsls	r1, r1, #4
 8003264:	430a      	orrs	r2, r1
 8003266:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	69da      	ldr	r2, [r3, #28]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	490f      	ldr	r1, [pc, #60]	@ (80032b0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003274:	400a      	ands	r2, r1
 8003276:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	69d9      	ldr	r1, [r3, #28]
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	021a      	lsls	r2, r3, #8
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	61da      	str	r2, [r3, #28]
      break;
 800328c:	e004      	b.n	8003298 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800328e:	2317      	movs	r3, #23
 8003290:	18fb      	adds	r3, r7, r3
 8003292:	2201      	movs	r2, #1
 8003294:	701a      	strb	r2, [r3, #0]
      break;
 8003296:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	223c      	movs	r2, #60	@ 0x3c
 800329c:	2100      	movs	r1, #0
 800329e:	5499      	strb	r1, [r3, r2]

  return status;
 80032a0:	2317      	movs	r3, #23
 80032a2:	18fb      	adds	r3, r7, r3
 80032a4:	781b      	ldrb	r3, [r3, #0]
}
 80032a6:	0018      	movs	r0, r3
 80032a8:	46bd      	mov	sp, r7
 80032aa:	b006      	add	sp, #24
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	46c0      	nop			@ (mov r8, r8)
 80032b0:	fffffbff 	.word	0xfffffbff

080032b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032be:	230f      	movs	r3, #15
 80032c0:	18fb      	adds	r3, r7, r3
 80032c2:	2200      	movs	r2, #0
 80032c4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	223c      	movs	r2, #60	@ 0x3c
 80032ca:	5c9b      	ldrb	r3, [r3, r2]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d101      	bne.n	80032d4 <HAL_TIM_ConfigClockSource+0x20>
 80032d0:	2302      	movs	r3, #2
 80032d2:	e0bc      	b.n	800344e <HAL_TIM_ConfigClockSource+0x19a>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	223c      	movs	r2, #60	@ 0x3c
 80032d8:	2101      	movs	r1, #1
 80032da:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	223d      	movs	r2, #61	@ 0x3d
 80032e0:	2102      	movs	r1, #2
 80032e2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	2277      	movs	r2, #119	@ 0x77
 80032f0:	4393      	bics	r3, r2
 80032f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	4a58      	ldr	r2, [pc, #352]	@ (8003458 <HAL_TIM_ConfigClockSource+0x1a4>)
 80032f8:	4013      	ands	r3, r2
 80032fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2280      	movs	r2, #128	@ 0x80
 800330a:	0192      	lsls	r2, r2, #6
 800330c:	4293      	cmp	r3, r2
 800330e:	d040      	beq.n	8003392 <HAL_TIM_ConfigClockSource+0xde>
 8003310:	2280      	movs	r2, #128	@ 0x80
 8003312:	0192      	lsls	r2, r2, #6
 8003314:	4293      	cmp	r3, r2
 8003316:	d900      	bls.n	800331a <HAL_TIM_ConfigClockSource+0x66>
 8003318:	e088      	b.n	800342c <HAL_TIM_ConfigClockSource+0x178>
 800331a:	2280      	movs	r2, #128	@ 0x80
 800331c:	0152      	lsls	r2, r2, #5
 800331e:	4293      	cmp	r3, r2
 8003320:	d100      	bne.n	8003324 <HAL_TIM_ConfigClockSource+0x70>
 8003322:	e088      	b.n	8003436 <HAL_TIM_ConfigClockSource+0x182>
 8003324:	2280      	movs	r2, #128	@ 0x80
 8003326:	0152      	lsls	r2, r2, #5
 8003328:	4293      	cmp	r3, r2
 800332a:	d900      	bls.n	800332e <HAL_TIM_ConfigClockSource+0x7a>
 800332c:	e07e      	b.n	800342c <HAL_TIM_ConfigClockSource+0x178>
 800332e:	2b70      	cmp	r3, #112	@ 0x70
 8003330:	d018      	beq.n	8003364 <HAL_TIM_ConfigClockSource+0xb0>
 8003332:	d900      	bls.n	8003336 <HAL_TIM_ConfigClockSource+0x82>
 8003334:	e07a      	b.n	800342c <HAL_TIM_ConfigClockSource+0x178>
 8003336:	2b60      	cmp	r3, #96	@ 0x60
 8003338:	d04f      	beq.n	80033da <HAL_TIM_ConfigClockSource+0x126>
 800333a:	d900      	bls.n	800333e <HAL_TIM_ConfigClockSource+0x8a>
 800333c:	e076      	b.n	800342c <HAL_TIM_ConfigClockSource+0x178>
 800333e:	2b50      	cmp	r3, #80	@ 0x50
 8003340:	d03b      	beq.n	80033ba <HAL_TIM_ConfigClockSource+0x106>
 8003342:	d900      	bls.n	8003346 <HAL_TIM_ConfigClockSource+0x92>
 8003344:	e072      	b.n	800342c <HAL_TIM_ConfigClockSource+0x178>
 8003346:	2b40      	cmp	r3, #64	@ 0x40
 8003348:	d057      	beq.n	80033fa <HAL_TIM_ConfigClockSource+0x146>
 800334a:	d900      	bls.n	800334e <HAL_TIM_ConfigClockSource+0x9a>
 800334c:	e06e      	b.n	800342c <HAL_TIM_ConfigClockSource+0x178>
 800334e:	2b30      	cmp	r3, #48	@ 0x30
 8003350:	d063      	beq.n	800341a <HAL_TIM_ConfigClockSource+0x166>
 8003352:	d86b      	bhi.n	800342c <HAL_TIM_ConfigClockSource+0x178>
 8003354:	2b20      	cmp	r3, #32
 8003356:	d060      	beq.n	800341a <HAL_TIM_ConfigClockSource+0x166>
 8003358:	d868      	bhi.n	800342c <HAL_TIM_ConfigClockSource+0x178>
 800335a:	2b00      	cmp	r3, #0
 800335c:	d05d      	beq.n	800341a <HAL_TIM_ConfigClockSource+0x166>
 800335e:	2b10      	cmp	r3, #16
 8003360:	d05b      	beq.n	800341a <HAL_TIM_ConfigClockSource+0x166>
 8003362:	e063      	b.n	800342c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003374:	f000 fc78 	bl	8003c68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2277      	movs	r2, #119	@ 0x77
 8003384:	4313      	orrs	r3, r2
 8003386:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	609a      	str	r2, [r3, #8]
      break;
 8003390:	e052      	b.n	8003438 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033a2:	f000 fc61 	bl	8003c68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2180      	movs	r1, #128	@ 0x80
 80033b2:	01c9      	lsls	r1, r1, #7
 80033b4:	430a      	orrs	r2, r1
 80033b6:	609a      	str	r2, [r3, #8]
      break;
 80033b8:	e03e      	b.n	8003438 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033c6:	001a      	movs	r2, r3
 80033c8:	f000 fb0c 	bl	80039e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2150      	movs	r1, #80	@ 0x50
 80033d2:	0018      	movs	r0, r3
 80033d4:	f000 fc2e 	bl	8003c34 <TIM_ITRx_SetConfig>
      break;
 80033d8:	e02e      	b.n	8003438 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033e6:	001a      	movs	r2, r3
 80033e8:	f000 fb6c 	bl	8003ac4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2160      	movs	r1, #96	@ 0x60
 80033f2:	0018      	movs	r0, r3
 80033f4:	f000 fc1e 	bl	8003c34 <TIM_ITRx_SetConfig>
      break;
 80033f8:	e01e      	b.n	8003438 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003406:	001a      	movs	r2, r3
 8003408:	f000 faec 	bl	80039e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2140      	movs	r1, #64	@ 0x40
 8003412:	0018      	movs	r0, r3
 8003414:	f000 fc0e 	bl	8003c34 <TIM_ITRx_SetConfig>
      break;
 8003418:	e00e      	b.n	8003438 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	0019      	movs	r1, r3
 8003424:	0010      	movs	r0, r2
 8003426:	f000 fc05 	bl	8003c34 <TIM_ITRx_SetConfig>
      break;
 800342a:	e005      	b.n	8003438 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800342c:	230f      	movs	r3, #15
 800342e:	18fb      	adds	r3, r7, r3
 8003430:	2201      	movs	r2, #1
 8003432:	701a      	strb	r2, [r3, #0]
      break;
 8003434:	e000      	b.n	8003438 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003436:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	223d      	movs	r2, #61	@ 0x3d
 800343c:	2101      	movs	r1, #1
 800343e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	223c      	movs	r2, #60	@ 0x3c
 8003444:	2100      	movs	r1, #0
 8003446:	5499      	strb	r1, [r3, r2]

  return status;
 8003448:	230f      	movs	r3, #15
 800344a:	18fb      	adds	r3, r7, r3
 800344c:	781b      	ldrb	r3, [r3, #0]
}
 800344e:	0018      	movs	r0, r3
 8003450:	46bd      	mov	sp, r7
 8003452:	b004      	add	sp, #16
 8003454:	bd80      	pop	{r7, pc}
 8003456:	46c0      	nop			@ (mov r8, r8)
 8003458:	ffff00ff 	.word	0xffff00ff

0800345c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003464:	46c0      	nop			@ (mov r8, r8)
 8003466:	46bd      	mov	sp, r7
 8003468:	b002      	add	sp, #8
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003474:	46c0      	nop			@ (mov r8, r8)
 8003476:	46bd      	mov	sp, r7
 8003478:	b002      	add	sp, #8
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003484:	46c0      	nop			@ (mov r8, r8)
 8003486:	46bd      	mov	sp, r7
 8003488:	b002      	add	sp, #8
 800348a:	bd80      	pop	{r7, pc}

0800348c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a30      	ldr	r2, [pc, #192]	@ (8003560 <TIM_Base_SetConfig+0xd4>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d008      	beq.n	80034b6 <TIM_Base_SetConfig+0x2a>
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	2380      	movs	r3, #128	@ 0x80
 80034a8:	05db      	lsls	r3, r3, #23
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d003      	beq.n	80034b6 <TIM_Base_SetConfig+0x2a>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a2c      	ldr	r2, [pc, #176]	@ (8003564 <TIM_Base_SetConfig+0xd8>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d108      	bne.n	80034c8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2270      	movs	r2, #112	@ 0x70
 80034ba:	4393      	bics	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a25      	ldr	r2, [pc, #148]	@ (8003560 <TIM_Base_SetConfig+0xd4>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d014      	beq.n	80034fa <TIM_Base_SetConfig+0x6e>
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	2380      	movs	r3, #128	@ 0x80
 80034d4:	05db      	lsls	r3, r3, #23
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d00f      	beq.n	80034fa <TIM_Base_SetConfig+0x6e>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a21      	ldr	r2, [pc, #132]	@ (8003564 <TIM_Base_SetConfig+0xd8>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d00b      	beq.n	80034fa <TIM_Base_SetConfig+0x6e>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a20      	ldr	r2, [pc, #128]	@ (8003568 <TIM_Base_SetConfig+0xdc>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d007      	beq.n	80034fa <TIM_Base_SetConfig+0x6e>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a1f      	ldr	r2, [pc, #124]	@ (800356c <TIM_Base_SetConfig+0xe0>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d003      	beq.n	80034fa <TIM_Base_SetConfig+0x6e>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a1e      	ldr	r2, [pc, #120]	@ (8003570 <TIM_Base_SetConfig+0xe4>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d108      	bne.n	800350c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003574 <TIM_Base_SetConfig+0xe8>)
 80034fe:	4013      	ands	r3, r2
 8003500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	4313      	orrs	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2280      	movs	r2, #128	@ 0x80
 8003510:	4393      	bics	r3, r2
 8003512:	001a      	movs	r2, r3
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	4313      	orrs	r3, r2
 800351a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	689a      	ldr	r2, [r3, #8]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a0a      	ldr	r2, [pc, #40]	@ (8003560 <TIM_Base_SetConfig+0xd4>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d007      	beq.n	800354a <TIM_Base_SetConfig+0xbe>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a0b      	ldr	r2, [pc, #44]	@ (800356c <TIM_Base_SetConfig+0xe0>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d003      	beq.n	800354a <TIM_Base_SetConfig+0xbe>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a0a      	ldr	r2, [pc, #40]	@ (8003570 <TIM_Base_SetConfig+0xe4>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d103      	bne.n	8003552 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	691a      	ldr	r2, [r3, #16]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	615a      	str	r2, [r3, #20]
}
 8003558:	46c0      	nop			@ (mov r8, r8)
 800355a:	46bd      	mov	sp, r7
 800355c:	b004      	add	sp, #16
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40012c00 	.word	0x40012c00
 8003564:	40000400 	.word	0x40000400
 8003568:	40002000 	.word	0x40002000
 800356c:	40014400 	.word	0x40014400
 8003570:	40014800 	.word	0x40014800
 8003574:	fffffcff 	.word	0xfffffcff

08003578 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	2201      	movs	r2, #1
 8003588:	4393      	bics	r3, r2
 800358a:	001a      	movs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2270      	movs	r2, #112	@ 0x70
 80035a6:	4393      	bics	r3, r2
 80035a8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2203      	movs	r2, #3
 80035ae:	4393      	bics	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	2202      	movs	r2, #2
 80035c0:	4393      	bics	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a23      	ldr	r2, [pc, #140]	@ (8003660 <TIM_OC1_SetConfig+0xe8>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d007      	beq.n	80035e6 <TIM_OC1_SetConfig+0x6e>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a22      	ldr	r2, [pc, #136]	@ (8003664 <TIM_OC1_SetConfig+0xec>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d003      	beq.n	80035e6 <TIM_OC1_SetConfig+0x6e>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a21      	ldr	r2, [pc, #132]	@ (8003668 <TIM_OC1_SetConfig+0xf0>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d10c      	bne.n	8003600 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	2208      	movs	r2, #8
 80035ea:	4393      	bics	r3, r2
 80035ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	2204      	movs	r2, #4
 80035fc:	4393      	bics	r3, r2
 80035fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a17      	ldr	r2, [pc, #92]	@ (8003660 <TIM_OC1_SetConfig+0xe8>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d007      	beq.n	8003618 <TIM_OC1_SetConfig+0xa0>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a16      	ldr	r2, [pc, #88]	@ (8003664 <TIM_OC1_SetConfig+0xec>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d003      	beq.n	8003618 <TIM_OC1_SetConfig+0xa0>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a15      	ldr	r2, [pc, #84]	@ (8003668 <TIM_OC1_SetConfig+0xf0>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d111      	bne.n	800363c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	4a14      	ldr	r2, [pc, #80]	@ (800366c <TIM_OC1_SetConfig+0xf4>)
 800361c:	4013      	ands	r3, r2
 800361e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	4a13      	ldr	r2, [pc, #76]	@ (8003670 <TIM_OC1_SetConfig+0xf8>)
 8003624:	4013      	ands	r3, r2
 8003626:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	621a      	str	r2, [r3, #32]
}
 8003656:	46c0      	nop			@ (mov r8, r8)
 8003658:	46bd      	mov	sp, r7
 800365a:	b006      	add	sp, #24
 800365c:	bd80      	pop	{r7, pc}
 800365e:	46c0      	nop			@ (mov r8, r8)
 8003660:	40012c00 	.word	0x40012c00
 8003664:	40014400 	.word	0x40014400
 8003668:	40014800 	.word	0x40014800
 800366c:	fffffeff 	.word	0xfffffeff
 8003670:	fffffdff 	.word	0xfffffdff

08003674 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	2210      	movs	r2, #16
 8003684:	4393      	bics	r3, r2
 8003686:	001a      	movs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	4a2c      	ldr	r2, [pc, #176]	@ (8003754 <TIM_OC2_SetConfig+0xe0>)
 80036a2:	4013      	ands	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	4a2b      	ldr	r2, [pc, #172]	@ (8003758 <TIM_OC2_SetConfig+0xe4>)
 80036aa:	4013      	ands	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	021b      	lsls	r3, r3, #8
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	2220      	movs	r2, #32
 80036be:	4393      	bics	r3, r2
 80036c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a22      	ldr	r2, [pc, #136]	@ (800375c <TIM_OC2_SetConfig+0xe8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d10d      	bne.n	80036f2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2280      	movs	r2, #128	@ 0x80
 80036da:	4393      	bics	r3, r2
 80036dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	011b      	lsls	r3, r3, #4
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	2240      	movs	r2, #64	@ 0x40
 80036ee:	4393      	bics	r3, r2
 80036f0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a19      	ldr	r2, [pc, #100]	@ (800375c <TIM_OC2_SetConfig+0xe8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d007      	beq.n	800370a <TIM_OC2_SetConfig+0x96>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a18      	ldr	r2, [pc, #96]	@ (8003760 <TIM_OC2_SetConfig+0xec>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d003      	beq.n	800370a <TIM_OC2_SetConfig+0x96>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a17      	ldr	r2, [pc, #92]	@ (8003764 <TIM_OC2_SetConfig+0xf0>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d113      	bne.n	8003732 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	4a16      	ldr	r2, [pc, #88]	@ (8003768 <TIM_OC2_SetConfig+0xf4>)
 800370e:	4013      	ands	r3, r2
 8003710:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	4a15      	ldr	r2, [pc, #84]	@ (800376c <TIM_OC2_SetConfig+0xf8>)
 8003716:	4013      	ands	r3, r2
 8003718:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	4313      	orrs	r3, r2
 8003724:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	4313      	orrs	r3, r2
 8003730:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	621a      	str	r2, [r3, #32]
}
 800374c:	46c0      	nop			@ (mov r8, r8)
 800374e:	46bd      	mov	sp, r7
 8003750:	b006      	add	sp, #24
 8003752:	bd80      	pop	{r7, pc}
 8003754:	ffff8fff 	.word	0xffff8fff
 8003758:	fffffcff 	.word	0xfffffcff
 800375c:	40012c00 	.word	0x40012c00
 8003760:	40014400 	.word	0x40014400
 8003764:	40014800 	.word	0x40014800
 8003768:	fffffbff 	.word	0xfffffbff
 800376c:	fffff7ff 	.word	0xfffff7ff

08003770 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	4a33      	ldr	r2, [pc, #204]	@ (800384c <TIM_OC3_SetConfig+0xdc>)
 8003780:	401a      	ands	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2270      	movs	r2, #112	@ 0x70
 800379c:	4393      	bics	r3, r2
 800379e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2203      	movs	r2, #3
 80037a4:	4393      	bics	r3, r2
 80037a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	4a26      	ldr	r2, [pc, #152]	@ (8003850 <TIM_OC3_SetConfig+0xe0>)
 80037b6:	4013      	ands	r3, r2
 80037b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	021b      	lsls	r3, r3, #8
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a22      	ldr	r2, [pc, #136]	@ (8003854 <TIM_OC3_SetConfig+0xe4>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d10d      	bne.n	80037ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	4a21      	ldr	r2, [pc, #132]	@ (8003858 <TIM_OC3_SetConfig+0xe8>)
 80037d2:	4013      	ands	r3, r2
 80037d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	021b      	lsls	r3, r3, #8
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	4313      	orrs	r3, r2
 80037e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	4a1d      	ldr	r2, [pc, #116]	@ (800385c <TIM_OC3_SetConfig+0xec>)
 80037e6:	4013      	ands	r3, r2
 80037e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a19      	ldr	r2, [pc, #100]	@ (8003854 <TIM_OC3_SetConfig+0xe4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d007      	beq.n	8003802 <TIM_OC3_SetConfig+0x92>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a1a      	ldr	r2, [pc, #104]	@ (8003860 <TIM_OC3_SetConfig+0xf0>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d003      	beq.n	8003802 <TIM_OC3_SetConfig+0x92>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a19      	ldr	r2, [pc, #100]	@ (8003864 <TIM_OC3_SetConfig+0xf4>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d113      	bne.n	800382a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	4a18      	ldr	r2, [pc, #96]	@ (8003868 <TIM_OC3_SetConfig+0xf8>)
 8003806:	4013      	ands	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	4a17      	ldr	r2, [pc, #92]	@ (800386c <TIM_OC3_SetConfig+0xfc>)
 800380e:	4013      	ands	r3, r2
 8003810:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	4313      	orrs	r3, r2
 800381c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	4313      	orrs	r3, r2
 8003828:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	621a      	str	r2, [r3, #32]
}
 8003844:	46c0      	nop			@ (mov r8, r8)
 8003846:	46bd      	mov	sp, r7
 8003848:	b006      	add	sp, #24
 800384a:	bd80      	pop	{r7, pc}
 800384c:	fffffeff 	.word	0xfffffeff
 8003850:	fffffdff 	.word	0xfffffdff
 8003854:	40012c00 	.word	0x40012c00
 8003858:	fffff7ff 	.word	0xfffff7ff
 800385c:	fffffbff 	.word	0xfffffbff
 8003860:	40014400 	.word	0x40014400
 8003864:	40014800 	.word	0x40014800
 8003868:	ffffefff 	.word	0xffffefff
 800386c:	ffffdfff 	.word	0xffffdfff

08003870 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	4a26      	ldr	r2, [pc, #152]	@ (8003918 <TIM_OC4_SetConfig+0xa8>)
 8003880:	401a      	ands	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4a20      	ldr	r2, [pc, #128]	@ (800391c <TIM_OC4_SetConfig+0xac>)
 800389c:	4013      	ands	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4a1f      	ldr	r2, [pc, #124]	@ (8003920 <TIM_OC4_SetConfig+0xb0>)
 80038a4:	4013      	ands	r3, r2
 80038a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	021b      	lsls	r3, r3, #8
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	4a1b      	ldr	r2, [pc, #108]	@ (8003924 <TIM_OC4_SetConfig+0xb4>)
 80038b8:	4013      	ands	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	031b      	lsls	r3, r3, #12
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a17      	ldr	r2, [pc, #92]	@ (8003928 <TIM_OC4_SetConfig+0xb8>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d007      	beq.n	80038e0 <TIM_OC4_SetConfig+0x70>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a16      	ldr	r2, [pc, #88]	@ (800392c <TIM_OC4_SetConfig+0xbc>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d003      	beq.n	80038e0 <TIM_OC4_SetConfig+0x70>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a15      	ldr	r2, [pc, #84]	@ (8003930 <TIM_OC4_SetConfig+0xc0>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d109      	bne.n	80038f4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	4a14      	ldr	r2, [pc, #80]	@ (8003934 <TIM_OC4_SetConfig+0xc4>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	695b      	ldr	r3, [r3, #20]
 80038ec:	019b      	lsls	r3, r3, #6
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	621a      	str	r2, [r3, #32]
}
 800390e:	46c0      	nop			@ (mov r8, r8)
 8003910:	46bd      	mov	sp, r7
 8003912:	b006      	add	sp, #24
 8003914:	bd80      	pop	{r7, pc}
 8003916:	46c0      	nop			@ (mov r8, r8)
 8003918:	ffffefff 	.word	0xffffefff
 800391c:	ffff8fff 	.word	0xffff8fff
 8003920:	fffffcff 	.word	0xfffffcff
 8003924:	ffffdfff 	.word	0xffffdfff
 8003928:	40012c00 	.word	0x40012c00
 800392c:	40014400 	.word	0x40014400
 8003930:	40014800 	.word	0x40014800
 8003934:	ffffbfff 	.word	0xffffbfff

08003938 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
 8003944:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	2201      	movs	r2, #1
 800394c:	4393      	bics	r3, r2
 800394e:	001a      	movs	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	4a1e      	ldr	r2, [pc, #120]	@ (80039dc <TIM_TI1_SetConfig+0xa4>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d008      	beq.n	800397a <TIM_TI1_SetConfig+0x42>
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	2380      	movs	r3, #128	@ 0x80
 800396c:	05db      	lsls	r3, r3, #23
 800396e:	429a      	cmp	r2, r3
 8003970:	d003      	beq.n	800397a <TIM_TI1_SetConfig+0x42>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	4a1a      	ldr	r2, [pc, #104]	@ (80039e0 <TIM_TI1_SetConfig+0xa8>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d101      	bne.n	800397e <TIM_TI1_SetConfig+0x46>
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <TIM_TI1_SetConfig+0x48>
 800397e:	2300      	movs	r3, #0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d008      	beq.n	8003996 <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	2203      	movs	r2, #3
 8003988:	4393      	bics	r3, r2
 800398a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4313      	orrs	r3, r2
 8003992:	617b      	str	r3, [r7, #20]
 8003994:	e003      	b.n	800399e <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	2201      	movs	r2, #1
 800399a:	4313      	orrs	r3, r2
 800399c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	22f0      	movs	r2, #240	@ 0xf0
 80039a2:	4393      	bics	r3, r2
 80039a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	011b      	lsls	r3, r3, #4
 80039aa:	22ff      	movs	r2, #255	@ 0xff
 80039ac:	4013      	ands	r3, r2
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	220a      	movs	r2, #10
 80039b8:	4393      	bics	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	220a      	movs	r2, #10
 80039c0:	4013      	ands	r3, r2
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	621a      	str	r2, [r3, #32]
}
 80039d4:	46c0      	nop			@ (mov r8, r8)
 80039d6:	46bd      	mov	sp, r7
 80039d8:	b006      	add	sp, #24
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40012c00 	.word	0x40012c00
 80039e0:	40000400 	.word	0x40000400

080039e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	2201      	movs	r2, #1
 80039fc:	4393      	bics	r3, r2
 80039fe:	001a      	movs	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	22f0      	movs	r2, #240	@ 0xf0
 8003a0e:	4393      	bics	r3, r2
 8003a10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	220a      	movs	r2, #10
 8003a20:	4393      	bics	r3, r2
 8003a22:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	621a      	str	r2, [r3, #32]
}
 8003a38:	46c0      	nop			@ (mov r8, r8)
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	b006      	add	sp, #24
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
 8003a4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	2210      	movs	r2, #16
 8003a54:	4393      	bics	r3, r2
 8003a56:	001a      	movs	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	4a14      	ldr	r2, [pc, #80]	@ (8003abc <TIM_TI2_SetConfig+0x7c>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	021b      	lsls	r3, r3, #8
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	4a10      	ldr	r2, [pc, #64]	@ (8003ac0 <TIM_TI2_SetConfig+0x80>)
 8003a7e:	4013      	ands	r3, r2
 8003a80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	031b      	lsls	r3, r3, #12
 8003a86:	041b      	lsls	r3, r3, #16
 8003a88:	0c1b      	lsrs	r3, r3, #16
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	22a0      	movs	r2, #160	@ 0xa0
 8003a94:	4393      	bics	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	011b      	lsls	r3, r3, #4
 8003a9c:	22a0      	movs	r2, #160	@ 0xa0
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	621a      	str	r2, [r3, #32]
}
 8003ab2:	46c0      	nop			@ (mov r8, r8)
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	b006      	add	sp, #24
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	46c0      	nop			@ (mov r8, r8)
 8003abc:	fffffcff 	.word	0xfffffcff
 8003ac0:	ffff0fff 	.word	0xffff0fff

08003ac4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	2210      	movs	r2, #16
 8003ad6:	4393      	bics	r3, r2
 8003ad8:	001a      	movs	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	4a0d      	ldr	r2, [pc, #52]	@ (8003b24 <TIM_TI2_ConfigInputStage+0x60>)
 8003aee:	4013      	ands	r3, r2
 8003af0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	031b      	lsls	r3, r3, #12
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	22a0      	movs	r2, #160	@ 0xa0
 8003b00:	4393      	bics	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	621a      	str	r2, [r3, #32]
}
 8003b1a:	46c0      	nop			@ (mov r8, r8)
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	b006      	add	sp, #24
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	46c0      	nop			@ (mov r8, r8)
 8003b24:	ffff0fff 	.word	0xffff0fff

08003b28 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
 8003b34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	4a19      	ldr	r2, [pc, #100]	@ (8003ba0 <TIM_TI3_SetConfig+0x78>)
 8003b3c:	401a      	ands	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	2203      	movs	r2, #3
 8003b52:	4393      	bics	r3, r2
 8003b54:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	22f0      	movs	r2, #240	@ 0xf0
 8003b62:	4393      	bics	r3, r2
 8003b64:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	011b      	lsls	r3, r3, #4
 8003b6a:	22ff      	movs	r2, #255	@ 0xff
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	4a0b      	ldr	r2, [pc, #44]	@ (8003ba4 <TIM_TI3_SetConfig+0x7c>)
 8003b78:	4013      	ands	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	021a      	lsls	r2, r3, #8
 8003b80:	23a0      	movs	r3, #160	@ 0xa0
 8003b82:	011b      	lsls	r3, r3, #4
 8003b84:	4013      	ands	r3, r2
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	621a      	str	r2, [r3, #32]
}
 8003b98:	46c0      	nop			@ (mov r8, r8)
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	b006      	add	sp, #24
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	fffffeff 	.word	0xfffffeff
 8003ba4:	fffff5ff 	.word	0xfffff5ff

08003ba8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
 8003bb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	4a1a      	ldr	r2, [pc, #104]	@ (8003c24 <TIM_TI4_SetConfig+0x7c>)
 8003bbc:	401a      	ands	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	4a15      	ldr	r2, [pc, #84]	@ (8003c28 <TIM_TI4_SetConfig+0x80>)
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	021b      	lsls	r3, r3, #8
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	4a12      	ldr	r2, [pc, #72]	@ (8003c2c <TIM_TI4_SetConfig+0x84>)
 8003be4:	4013      	ands	r3, r2
 8003be6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	031b      	lsls	r3, r3, #12
 8003bec:	041b      	lsls	r3, r3, #16
 8003bee:	0c1b      	lsrs	r3, r3, #16
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8003c30 <TIM_TI4_SetConfig+0x88>)
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	031a      	lsls	r2, r3, #12
 8003c02:	23a0      	movs	r3, #160	@ 0xa0
 8003c04:	021b      	lsls	r3, r3, #8
 8003c06:	4013      	ands	r3, r2
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	621a      	str	r2, [r3, #32]
}
 8003c1a:	46c0      	nop			@ (mov r8, r8)
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	b006      	add	sp, #24
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	46c0      	nop			@ (mov r8, r8)
 8003c24:	ffffefff 	.word	0xffffefff
 8003c28:	fffffcff 	.word	0xfffffcff
 8003c2c:	ffff0fff 	.word	0xffff0fff
 8003c30:	ffff5fff 	.word	0xffff5fff

08003c34 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2270      	movs	r2, #112	@ 0x70
 8003c48:	4393      	bics	r3, r2
 8003c4a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	2207      	movs	r2, #7
 8003c54:	4313      	orrs	r3, r2
 8003c56:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	609a      	str	r2, [r3, #8]
}
 8003c5e:	46c0      	nop			@ (mov r8, r8)
 8003c60:	46bd      	mov	sp, r7
 8003c62:	b004      	add	sp, #16
 8003c64:	bd80      	pop	{r7, pc}
	...

08003c68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
 8003c74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	4a09      	ldr	r2, [pc, #36]	@ (8003ca4 <TIM_ETR_SetConfig+0x3c>)
 8003c80:	4013      	ands	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	021a      	lsls	r2, r3, #8
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	609a      	str	r2, [r3, #8]
}
 8003c9c:	46c0      	nop			@ (mov r8, r8)
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	b006      	add	sp, #24
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	ffff00ff 	.word	0xffff00ff

08003ca8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	221f      	movs	r2, #31
 8003cb8:	4013      	ands	r3, r2
 8003cba:	2201      	movs	r2, #1
 8003cbc:	409a      	lsls	r2, r3
 8003cbe:	0013      	movs	r3, r2
 8003cc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	43d2      	mvns	r2, r2
 8003cca:	401a      	ands	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6a1a      	ldr	r2, [r3, #32]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	211f      	movs	r1, #31
 8003cd8:	400b      	ands	r3, r1
 8003cda:	6879      	ldr	r1, [r7, #4]
 8003cdc:	4099      	lsls	r1, r3
 8003cde:	000b      	movs	r3, r1
 8003ce0:	431a      	orrs	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	621a      	str	r2, [r3, #32]
}
 8003ce6:	46c0      	nop			@ (mov r8, r8)
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	b006      	add	sp, #24
 8003cec:	bd80      	pop	{r7, pc}
	...

08003cf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	223c      	movs	r2, #60	@ 0x3c
 8003cfe:	5c9b      	ldrb	r3, [r3, r2]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d101      	bne.n	8003d08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d04:	2302      	movs	r3, #2
 8003d06:	e042      	b.n	8003d8e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	223c      	movs	r2, #60	@ 0x3c
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	223d      	movs	r2, #61	@ 0x3d
 8003d14:	2102      	movs	r1, #2
 8003d16:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2270      	movs	r2, #112	@ 0x70
 8003d2c:	4393      	bics	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a14      	ldr	r2, [pc, #80]	@ (8003d98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d00a      	beq.n	8003d62 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	2380      	movs	r3, #128	@ 0x80
 8003d52:	05db      	lsls	r3, r3, #23
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d004      	beq.n	8003d62 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a0f      	ldr	r2, [pc, #60]	@ (8003d9c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d10c      	bne.n	8003d7c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2280      	movs	r2, #128	@ 0x80
 8003d66:	4393      	bics	r3, r2
 8003d68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	223d      	movs	r2, #61	@ 0x3d
 8003d80:	2101      	movs	r1, #1
 8003d82:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	223c      	movs	r2, #60	@ 0x3c
 8003d88:	2100      	movs	r1, #0
 8003d8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	0018      	movs	r0, r3
 8003d90:	46bd      	mov	sp, r7
 8003d92:	b004      	add	sp, #16
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	46c0      	nop			@ (mov r8, r8)
 8003d98:	40012c00 	.word	0x40012c00
 8003d9c:	40000400 	.word	0x40000400

08003da0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	223c      	movs	r2, #60	@ 0x3c
 8003db2:	5c9b      	ldrb	r3, [r3, r2]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d101      	bne.n	8003dbc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003db8:	2302      	movs	r3, #2
 8003dba:	e03e      	b.n	8003e3a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	223c      	movs	r2, #60	@ 0x3c
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	22ff      	movs	r2, #255	@ 0xff
 8003dc8:	4393      	bics	r3, r2
 8003dca:	001a      	movs	r2, r3
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4a1b      	ldr	r2, [pc, #108]	@ (8003e44 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003dd8:	401a      	ands	r2, r3
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	4a18      	ldr	r2, [pc, #96]	@ (8003e48 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8003de6:	401a      	ands	r2, r3
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4a16      	ldr	r2, [pc, #88]	@ (8003e4c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003df4:	401a      	ands	r2, r3
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	4a13      	ldr	r2, [pc, #76]	@ (8003e50 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8003e02:	401a      	ands	r2, r3
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4a11      	ldr	r2, [pc, #68]	@ (8003e54 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003e10:	401a      	ands	r2, r3
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	4a0e      	ldr	r2, [pc, #56]	@ (8003e58 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003e1e:	401a      	ands	r2, r3
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	69db      	ldr	r3, [r3, #28]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	223c      	movs	r2, #60	@ 0x3c
 8003e34:	2100      	movs	r1, #0
 8003e36:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	b004      	add	sp, #16
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	46c0      	nop			@ (mov r8, r8)
 8003e44:	fffffcff 	.word	0xfffffcff
 8003e48:	fffffbff 	.word	0xfffffbff
 8003e4c:	fffff7ff 	.word	0xfffff7ff
 8003e50:	ffffefff 	.word	0xffffefff
 8003e54:	ffffdfff 	.word	0xffffdfff
 8003e58:	ffffbfff 	.word	0xffffbfff

08003e5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e64:	46c0      	nop			@ (mov r8, r8)
 8003e66:	46bd      	mov	sp, r7
 8003e68:	b002      	add	sp, #8
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e74:	46c0      	nop			@ (mov r8, r8)
 8003e76:	46bd      	mov	sp, r7
 8003e78:	b002      	add	sp, #8
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e044      	b.n	8003f18 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d107      	bne.n	8003ea6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2278      	movs	r2, #120	@ 0x78
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	f7fd f901 	bl	80010a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2224      	movs	r2, #36	@ 0x24
 8003eaa:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	438a      	bics	r2, r1
 8003eba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	f000 fbcc 	bl	800465c <UART_SetConfig>
 8003ec4:	0003      	movs	r3, r0
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d101      	bne.n	8003ece <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e024      	b.n	8003f18 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	0018      	movs	r0, r3
 8003eda:	f000 fcff 	bl	80048dc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	490d      	ldr	r1, [pc, #52]	@ (8003f20 <HAL_UART_Init+0xa4>)
 8003eea:	400a      	ands	r2, r1
 8003eec:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	212a      	movs	r1, #42	@ 0x2a
 8003efa:	438a      	bics	r2, r1
 8003efc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2101      	movs	r1, #1
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	0018      	movs	r0, r3
 8003f12:	f000 fd97 	bl	8004a44 <UART_CheckIdleState>
 8003f16:	0003      	movs	r3, r0
}
 8003f18:	0018      	movs	r0, r3
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	b002      	add	sp, #8
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	ffffb7ff 	.word	0xffffb7ff

08003f24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b08a      	sub	sp, #40	@ 0x28
 8003f28:	af02      	add	r7, sp, #8
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	603b      	str	r3, [r7, #0]
 8003f30:	1dbb      	adds	r3, r7, #6
 8003f32:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f38:	2b20      	cmp	r3, #32
 8003f3a:	d000      	beq.n	8003f3e <HAL_UART_Transmit+0x1a>
 8003f3c:	e08c      	b.n	8004058 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d003      	beq.n	8003f4c <HAL_UART_Transmit+0x28>
 8003f44:	1dbb      	adds	r3, r7, #6
 8003f46:	881b      	ldrh	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d101      	bne.n	8003f50 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e084      	b.n	800405a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	2380      	movs	r3, #128	@ 0x80
 8003f56:	015b      	lsls	r3, r3, #5
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d109      	bne.n	8003f70 <HAL_UART_Transmit+0x4c>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d105      	bne.n	8003f70 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	2201      	movs	r2, #1
 8003f68:	4013      	ands	r3, r2
 8003f6a:	d001      	beq.n	8003f70 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e074      	b.n	800405a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2284      	movs	r2, #132	@ 0x84
 8003f74:	2100      	movs	r1, #0
 8003f76:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2221      	movs	r2, #33	@ 0x21
 8003f7c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f7e:	f7fd fa21 	bl	80013c4 <HAL_GetTick>
 8003f82:	0003      	movs	r3, r0
 8003f84:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	1dba      	adds	r2, r7, #6
 8003f8a:	2150      	movs	r1, #80	@ 0x50
 8003f8c:	8812      	ldrh	r2, [r2, #0]
 8003f8e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	1dba      	adds	r2, r7, #6
 8003f94:	2152      	movs	r1, #82	@ 0x52
 8003f96:	8812      	ldrh	r2, [r2, #0]
 8003f98:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	689a      	ldr	r2, [r3, #8]
 8003f9e:	2380      	movs	r3, #128	@ 0x80
 8003fa0:	015b      	lsls	r3, r3, #5
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d108      	bne.n	8003fb8 <HAL_UART_Transmit+0x94>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d104      	bne.n	8003fb8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	61bb      	str	r3, [r7, #24]
 8003fb6:	e003      	b.n	8003fc0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fc0:	e02f      	b.n	8004022 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	0013      	movs	r3, r2
 8003fcc:	2200      	movs	r2, #0
 8003fce:	2180      	movs	r1, #128	@ 0x80
 8003fd0:	f000 fde0 	bl	8004b94 <UART_WaitOnFlagUntilTimeout>
 8003fd4:	1e03      	subs	r3, r0, #0
 8003fd6:	d004      	beq.n	8003fe2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e03b      	b.n	800405a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10b      	bne.n	8004000 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	881a      	ldrh	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	05d2      	lsls	r2, r2, #23
 8003ff2:	0dd2      	lsrs	r2, r2, #23
 8003ff4:	b292      	uxth	r2, r2
 8003ff6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	3302      	adds	r3, #2
 8003ffc:	61bb      	str	r3, [r7, #24]
 8003ffe:	e007      	b.n	8004010 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	781a      	ldrb	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	3301      	adds	r3, #1
 800400e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2252      	movs	r2, #82	@ 0x52
 8004014:	5a9b      	ldrh	r3, [r3, r2]
 8004016:	b29b      	uxth	r3, r3
 8004018:	3b01      	subs	r3, #1
 800401a:	b299      	uxth	r1, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2252      	movs	r2, #82	@ 0x52
 8004020:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2252      	movs	r2, #82	@ 0x52
 8004026:	5a9b      	ldrh	r3, [r3, r2]
 8004028:	b29b      	uxth	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1c9      	bne.n	8003fc2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	0013      	movs	r3, r2
 8004038:	2200      	movs	r2, #0
 800403a:	2140      	movs	r1, #64	@ 0x40
 800403c:	f000 fdaa 	bl	8004b94 <UART_WaitOnFlagUntilTimeout>
 8004040:	1e03      	subs	r3, r0, #0
 8004042:	d004      	beq.n	800404e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2220      	movs	r2, #32
 8004048:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e005      	b.n	800405a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2220      	movs	r2, #32
 8004052:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004054:	2300      	movs	r3, #0
 8004056:	e000      	b.n	800405a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004058:	2302      	movs	r3, #2
  }
}
 800405a:	0018      	movs	r0, r3
 800405c:	46bd      	mov	sp, r7
 800405e:	b008      	add	sp, #32
 8004060:	bd80      	pop	{r7, pc}
	...

08004064 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004064:	b590      	push	{r4, r7, lr}
 8004066:	b0ab      	sub	sp, #172	@ 0xac
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	22a4      	movs	r2, #164	@ 0xa4
 8004074:	18b9      	adds	r1, r7, r2
 8004076:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	20a0      	movs	r0, #160	@ 0xa0
 8004080:	1839      	adds	r1, r7, r0
 8004082:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	219c      	movs	r1, #156	@ 0x9c
 800408c:	1879      	adds	r1, r7, r1
 800408e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004090:	0011      	movs	r1, r2
 8004092:	18bb      	adds	r3, r7, r2
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a99      	ldr	r2, [pc, #612]	@ (80042fc <HAL_UART_IRQHandler+0x298>)
 8004098:	4013      	ands	r3, r2
 800409a:	2298      	movs	r2, #152	@ 0x98
 800409c:	18bc      	adds	r4, r7, r2
 800409e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80040a0:	18bb      	adds	r3, r7, r2
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d114      	bne.n	80040d2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80040a8:	187b      	adds	r3, r7, r1
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2220      	movs	r2, #32
 80040ae:	4013      	ands	r3, r2
 80040b0:	d00f      	beq.n	80040d2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80040b2:	183b      	adds	r3, r7, r0
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2220      	movs	r2, #32
 80040b8:	4013      	ands	r3, r2
 80040ba:	d00a      	beq.n	80040d2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d100      	bne.n	80040c6 <HAL_UART_IRQHandler+0x62>
 80040c4:	e29e      	b.n	8004604 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	0010      	movs	r0, r2
 80040ce:	4798      	blx	r3
      }
      return;
 80040d0:	e298      	b.n	8004604 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80040d2:	2398      	movs	r3, #152	@ 0x98
 80040d4:	18fb      	adds	r3, r7, r3
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d100      	bne.n	80040de <HAL_UART_IRQHandler+0x7a>
 80040dc:	e114      	b.n	8004308 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80040de:	239c      	movs	r3, #156	@ 0x9c
 80040e0:	18fb      	adds	r3, r7, r3
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2201      	movs	r2, #1
 80040e6:	4013      	ands	r3, r2
 80040e8:	d106      	bne.n	80040f8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80040ea:	23a0      	movs	r3, #160	@ 0xa0
 80040ec:	18fb      	adds	r3, r7, r3
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a83      	ldr	r2, [pc, #524]	@ (8004300 <HAL_UART_IRQHandler+0x29c>)
 80040f2:	4013      	ands	r3, r2
 80040f4:	d100      	bne.n	80040f8 <HAL_UART_IRQHandler+0x94>
 80040f6:	e107      	b.n	8004308 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80040f8:	23a4      	movs	r3, #164	@ 0xa4
 80040fa:	18fb      	adds	r3, r7, r3
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2201      	movs	r2, #1
 8004100:	4013      	ands	r3, r2
 8004102:	d012      	beq.n	800412a <HAL_UART_IRQHandler+0xc6>
 8004104:	23a0      	movs	r3, #160	@ 0xa0
 8004106:	18fb      	adds	r3, r7, r3
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	2380      	movs	r3, #128	@ 0x80
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	4013      	ands	r3, r2
 8004110:	d00b      	beq.n	800412a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2201      	movs	r2, #1
 8004118:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2284      	movs	r2, #132	@ 0x84
 800411e:	589b      	ldr	r3, [r3, r2]
 8004120:	2201      	movs	r2, #1
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2184      	movs	r1, #132	@ 0x84
 8004128:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800412a:	23a4      	movs	r3, #164	@ 0xa4
 800412c:	18fb      	adds	r3, r7, r3
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2202      	movs	r2, #2
 8004132:	4013      	ands	r3, r2
 8004134:	d011      	beq.n	800415a <HAL_UART_IRQHandler+0xf6>
 8004136:	239c      	movs	r3, #156	@ 0x9c
 8004138:	18fb      	adds	r3, r7, r3
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2201      	movs	r2, #1
 800413e:	4013      	ands	r3, r2
 8004140:	d00b      	beq.n	800415a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2202      	movs	r2, #2
 8004148:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2284      	movs	r2, #132	@ 0x84
 800414e:	589b      	ldr	r3, [r3, r2]
 8004150:	2204      	movs	r2, #4
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2184      	movs	r1, #132	@ 0x84
 8004158:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800415a:	23a4      	movs	r3, #164	@ 0xa4
 800415c:	18fb      	adds	r3, r7, r3
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2204      	movs	r2, #4
 8004162:	4013      	ands	r3, r2
 8004164:	d011      	beq.n	800418a <HAL_UART_IRQHandler+0x126>
 8004166:	239c      	movs	r3, #156	@ 0x9c
 8004168:	18fb      	adds	r3, r7, r3
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2201      	movs	r2, #1
 800416e:	4013      	ands	r3, r2
 8004170:	d00b      	beq.n	800418a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2204      	movs	r2, #4
 8004178:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2284      	movs	r2, #132	@ 0x84
 800417e:	589b      	ldr	r3, [r3, r2]
 8004180:	2202      	movs	r2, #2
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2184      	movs	r1, #132	@ 0x84
 8004188:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800418a:	23a4      	movs	r3, #164	@ 0xa4
 800418c:	18fb      	adds	r3, r7, r3
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2208      	movs	r2, #8
 8004192:	4013      	ands	r3, r2
 8004194:	d017      	beq.n	80041c6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004196:	23a0      	movs	r3, #160	@ 0xa0
 8004198:	18fb      	adds	r3, r7, r3
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2220      	movs	r2, #32
 800419e:	4013      	ands	r3, r2
 80041a0:	d105      	bne.n	80041ae <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80041a2:	239c      	movs	r3, #156	@ 0x9c
 80041a4:	18fb      	adds	r3, r7, r3
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2201      	movs	r2, #1
 80041aa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80041ac:	d00b      	beq.n	80041c6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2208      	movs	r2, #8
 80041b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2284      	movs	r2, #132	@ 0x84
 80041ba:	589b      	ldr	r3, [r3, r2]
 80041bc:	2208      	movs	r2, #8
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2184      	movs	r1, #132	@ 0x84
 80041c4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80041c6:	23a4      	movs	r3, #164	@ 0xa4
 80041c8:	18fb      	adds	r3, r7, r3
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	2380      	movs	r3, #128	@ 0x80
 80041ce:	011b      	lsls	r3, r3, #4
 80041d0:	4013      	ands	r3, r2
 80041d2:	d013      	beq.n	80041fc <HAL_UART_IRQHandler+0x198>
 80041d4:	23a0      	movs	r3, #160	@ 0xa0
 80041d6:	18fb      	adds	r3, r7, r3
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	2380      	movs	r3, #128	@ 0x80
 80041dc:	04db      	lsls	r3, r3, #19
 80041de:	4013      	ands	r3, r2
 80041e0:	d00c      	beq.n	80041fc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2280      	movs	r2, #128	@ 0x80
 80041e8:	0112      	lsls	r2, r2, #4
 80041ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2284      	movs	r2, #132	@ 0x84
 80041f0:	589b      	ldr	r3, [r3, r2]
 80041f2:	2220      	movs	r2, #32
 80041f4:	431a      	orrs	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2184      	movs	r1, #132	@ 0x84
 80041fa:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2284      	movs	r2, #132	@ 0x84
 8004200:	589b      	ldr	r3, [r3, r2]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d100      	bne.n	8004208 <HAL_UART_IRQHandler+0x1a4>
 8004206:	e1ff      	b.n	8004608 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004208:	23a4      	movs	r3, #164	@ 0xa4
 800420a:	18fb      	adds	r3, r7, r3
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2220      	movs	r2, #32
 8004210:	4013      	ands	r3, r2
 8004212:	d00e      	beq.n	8004232 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004214:	23a0      	movs	r3, #160	@ 0xa0
 8004216:	18fb      	adds	r3, r7, r3
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2220      	movs	r2, #32
 800421c:	4013      	ands	r3, r2
 800421e:	d008      	beq.n	8004232 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004224:	2b00      	cmp	r3, #0
 8004226:	d004      	beq.n	8004232 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	0010      	movs	r0, r2
 8004230:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2284      	movs	r2, #132	@ 0x84
 8004236:	589b      	ldr	r3, [r3, r2]
 8004238:	2194      	movs	r1, #148	@ 0x94
 800423a:	187a      	adds	r2, r7, r1
 800423c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	2240      	movs	r2, #64	@ 0x40
 8004246:	4013      	ands	r3, r2
 8004248:	2b40      	cmp	r3, #64	@ 0x40
 800424a:	d004      	beq.n	8004256 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800424c:	187b      	adds	r3, r7, r1
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2228      	movs	r2, #40	@ 0x28
 8004252:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004254:	d047      	beq.n	80042e6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	0018      	movs	r0, r3
 800425a:	f000 fd05 	bl	8004c68 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	2240      	movs	r2, #64	@ 0x40
 8004266:	4013      	ands	r3, r2
 8004268:	2b40      	cmp	r3, #64	@ 0x40
 800426a:	d137      	bne.n	80042dc <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800426c:	f3ef 8310 	mrs	r3, PRIMASK
 8004270:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8004272:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004274:	2090      	movs	r0, #144	@ 0x90
 8004276:	183a      	adds	r2, r7, r0
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	2301      	movs	r3, #1
 800427c:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800427e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004280:	f383 8810 	msr	PRIMASK, r3
}
 8004284:	46c0      	nop			@ (mov r8, r8)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689a      	ldr	r2, [r3, #8]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2140      	movs	r1, #64	@ 0x40
 8004292:	438a      	bics	r2, r1
 8004294:	609a      	str	r2, [r3, #8]
 8004296:	183b      	adds	r3, r7, r0
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800429c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800429e:	f383 8810 	msr	PRIMASK, r3
}
 80042a2:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d012      	beq.n	80042d2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042b0:	4a14      	ldr	r2, [pc, #80]	@ (8004304 <HAL_UART_IRQHandler+0x2a0>)
 80042b2:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042b8:	0018      	movs	r0, r3
 80042ba:	f7fd fac5 	bl	8001848 <HAL_DMA_Abort_IT>
 80042be:	1e03      	subs	r3, r0, #0
 80042c0:	d01a      	beq.n	80042f8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042cc:	0018      	movs	r0, r3
 80042ce:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042d0:	e012      	b.n	80042f8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	0018      	movs	r0, r3
 80042d6:	f000 f9ad 	bl	8004634 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042da:	e00d      	b.n	80042f8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	0018      	movs	r0, r3
 80042e0:	f000 f9a8 	bl	8004634 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042e4:	e008      	b.n	80042f8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	0018      	movs	r0, r3
 80042ea:	f000 f9a3 	bl	8004634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2284      	movs	r2, #132	@ 0x84
 80042f2:	2100      	movs	r1, #0
 80042f4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80042f6:	e187      	b.n	8004608 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042f8:	46c0      	nop			@ (mov r8, r8)
    return;
 80042fa:	e185      	b.n	8004608 <HAL_UART_IRQHandler+0x5a4>
 80042fc:	0000080f 	.word	0x0000080f
 8004300:	04000120 	.word	0x04000120
 8004304:	08004d31 	.word	0x08004d31

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800430c:	2b01      	cmp	r3, #1
 800430e:	d000      	beq.n	8004312 <HAL_UART_IRQHandler+0x2ae>
 8004310:	e139      	b.n	8004586 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004312:	23a4      	movs	r3, #164	@ 0xa4
 8004314:	18fb      	adds	r3, r7, r3
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2210      	movs	r2, #16
 800431a:	4013      	ands	r3, r2
 800431c:	d100      	bne.n	8004320 <HAL_UART_IRQHandler+0x2bc>
 800431e:	e132      	b.n	8004586 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004320:	23a0      	movs	r3, #160	@ 0xa0
 8004322:	18fb      	adds	r3, r7, r3
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2210      	movs	r2, #16
 8004328:	4013      	ands	r3, r2
 800432a:	d100      	bne.n	800432e <HAL_UART_IRQHandler+0x2ca>
 800432c:	e12b      	b.n	8004586 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2210      	movs	r2, #16
 8004334:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	2240      	movs	r2, #64	@ 0x40
 800433e:	4013      	ands	r3, r2
 8004340:	2b40      	cmp	r3, #64	@ 0x40
 8004342:	d000      	beq.n	8004346 <HAL_UART_IRQHandler+0x2e2>
 8004344:	e09f      	b.n	8004486 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	217e      	movs	r1, #126	@ 0x7e
 8004350:	187b      	adds	r3, r7, r1
 8004352:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004354:	187b      	adds	r3, r7, r1
 8004356:	881b      	ldrh	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d100      	bne.n	800435e <HAL_UART_IRQHandler+0x2fa>
 800435c:	e156      	b.n	800460c <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2258      	movs	r2, #88	@ 0x58
 8004362:	5a9b      	ldrh	r3, [r3, r2]
 8004364:	187a      	adds	r2, r7, r1
 8004366:	8812      	ldrh	r2, [r2, #0]
 8004368:	429a      	cmp	r2, r3
 800436a:	d300      	bcc.n	800436e <HAL_UART_IRQHandler+0x30a>
 800436c:	e14e      	b.n	800460c <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	187a      	adds	r2, r7, r1
 8004372:	215a      	movs	r1, #90	@ 0x5a
 8004374:	8812      	ldrh	r2, [r2, #0]
 8004376:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	2b20      	cmp	r3, #32
 8004380:	d06f      	beq.n	8004462 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004382:	f3ef 8310 	mrs	r3, PRIMASK
 8004386:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800438a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800438c:	2301      	movs	r3, #1
 800438e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004392:	f383 8810 	msr	PRIMASK, r3
}
 8004396:	46c0      	nop			@ (mov r8, r8)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	499e      	ldr	r1, [pc, #632]	@ (800461c <HAL_UART_IRQHandler+0x5b8>)
 80043a4:	400a      	ands	r2, r1
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ae:	f383 8810 	msr	PRIMASK, r3
}
 80043b2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043b4:	f3ef 8310 	mrs	r3, PRIMASK
 80043b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80043ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043bc:	677b      	str	r3, [r7, #116]	@ 0x74
 80043be:	2301      	movs	r3, #1
 80043c0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043c4:	f383 8810 	msr	PRIMASK, r3
}
 80043c8:	46c0      	nop			@ (mov r8, r8)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2101      	movs	r1, #1
 80043d6:	438a      	bics	r2, r1
 80043d8:	609a      	str	r2, [r3, #8]
 80043da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043dc:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043e0:	f383 8810 	msr	PRIMASK, r3
}
 80043e4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043e6:	f3ef 8310 	mrs	r3, PRIMASK
 80043ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80043ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80043f0:	2301      	movs	r3, #1
 80043f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043f6:	f383 8810 	msr	PRIMASK, r3
}
 80043fa:	46c0      	nop			@ (mov r8, r8)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	689a      	ldr	r2, [r3, #8]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2140      	movs	r1, #64	@ 0x40
 8004408:	438a      	bics	r2, r1
 800440a:	609a      	str	r2, [r3, #8]
 800440c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800440e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004410:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004412:	f383 8810 	msr	PRIMASK, r3
}
 8004416:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2280      	movs	r2, #128	@ 0x80
 800441c:	2120      	movs	r1, #32
 800441e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004426:	f3ef 8310 	mrs	r3, PRIMASK
 800442a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800442c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800442e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004430:	2301      	movs	r3, #1
 8004432:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004434:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004436:	f383 8810 	msr	PRIMASK, r3
}
 800443a:	46c0      	nop			@ (mov r8, r8)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2110      	movs	r1, #16
 8004448:	438a      	bics	r2, r1
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800444e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004450:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004452:	f383 8810 	msr	PRIMASK, r3
}
 8004456:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800445c:	0018      	movs	r0, r3
 800445e:	f7fd f9bb 	bl	80017d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2202      	movs	r2, #2
 8004466:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2258      	movs	r2, #88	@ 0x58
 800446c:	5a9a      	ldrh	r2, [r3, r2]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	215a      	movs	r1, #90	@ 0x5a
 8004472:	5a5b      	ldrh	r3, [r3, r1]
 8004474:	b29b      	uxth	r3, r3
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	b29a      	uxth	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	0011      	movs	r1, r2
 800447e:	0018      	movs	r0, r3
 8004480:	f000 f8e0 	bl	8004644 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004484:	e0c2      	b.n	800460c <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2258      	movs	r2, #88	@ 0x58
 800448a:	5a99      	ldrh	r1, [r3, r2]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	225a      	movs	r2, #90	@ 0x5a
 8004490:	5a9b      	ldrh	r3, [r3, r2]
 8004492:	b29a      	uxth	r2, r3
 8004494:	208e      	movs	r0, #142	@ 0x8e
 8004496:	183b      	adds	r3, r7, r0
 8004498:	1a8a      	subs	r2, r1, r2
 800449a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	225a      	movs	r2, #90	@ 0x5a
 80044a0:	5a9b      	ldrh	r3, [r3, r2]
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d100      	bne.n	80044aa <HAL_UART_IRQHandler+0x446>
 80044a8:	e0b2      	b.n	8004610 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 80044aa:	183b      	adds	r3, r7, r0
 80044ac:	881b      	ldrh	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d100      	bne.n	80044b4 <HAL_UART_IRQHandler+0x450>
 80044b2:	e0ad      	b.n	8004610 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044b4:	f3ef 8310 	mrs	r3, PRIMASK
 80044b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80044ba:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044bc:	2488      	movs	r4, #136	@ 0x88
 80044be:	193a      	adds	r2, r7, r4
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	2301      	movs	r3, #1
 80044c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	f383 8810 	msr	PRIMASK, r3
}
 80044cc:	46c0      	nop			@ (mov r8, r8)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4951      	ldr	r1, [pc, #324]	@ (8004620 <HAL_UART_IRQHandler+0x5bc>)
 80044da:	400a      	ands	r2, r1
 80044dc:	601a      	str	r2, [r3, #0]
 80044de:	193b      	adds	r3, r7, r4
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f383 8810 	msr	PRIMASK, r3
}
 80044ea:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044ec:	f3ef 8310 	mrs	r3, PRIMASK
 80044f0:	61bb      	str	r3, [r7, #24]
  return(result);
 80044f2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f4:	2484      	movs	r4, #132	@ 0x84
 80044f6:	193a      	adds	r2, r7, r4
 80044f8:	6013      	str	r3, [r2, #0]
 80044fa:	2301      	movs	r3, #1
 80044fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	f383 8810 	msr	PRIMASK, r3
}
 8004504:	46c0      	nop			@ (mov r8, r8)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2101      	movs	r1, #1
 8004512:	438a      	bics	r2, r1
 8004514:	609a      	str	r2, [r3, #8]
 8004516:	193b      	adds	r3, r7, r4
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800451c:	6a3b      	ldr	r3, [r7, #32]
 800451e:	f383 8810 	msr	PRIMASK, r3
}
 8004522:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2280      	movs	r2, #128	@ 0x80
 8004528:	2120      	movs	r1, #32
 800452a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004538:	f3ef 8310 	mrs	r3, PRIMASK
 800453c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800453e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004540:	2480      	movs	r4, #128	@ 0x80
 8004542:	193a      	adds	r2, r7, r4
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	2301      	movs	r3, #1
 8004548:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800454a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800454c:	f383 8810 	msr	PRIMASK, r3
}
 8004550:	46c0      	nop			@ (mov r8, r8)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2110      	movs	r1, #16
 800455e:	438a      	bics	r2, r1
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	193b      	adds	r3, r7, r4
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800456a:	f383 8810 	msr	PRIMASK, r3
}
 800456e:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2202      	movs	r2, #2
 8004574:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004576:	183b      	adds	r3, r7, r0
 8004578:	881a      	ldrh	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	0011      	movs	r1, r2
 800457e:	0018      	movs	r0, r3
 8004580:	f000 f860 	bl	8004644 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004584:	e044      	b.n	8004610 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004586:	23a4      	movs	r3, #164	@ 0xa4
 8004588:	18fb      	adds	r3, r7, r3
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	2380      	movs	r3, #128	@ 0x80
 800458e:	035b      	lsls	r3, r3, #13
 8004590:	4013      	ands	r3, r2
 8004592:	d010      	beq.n	80045b6 <HAL_UART_IRQHandler+0x552>
 8004594:	239c      	movs	r3, #156	@ 0x9c
 8004596:	18fb      	adds	r3, r7, r3
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	2380      	movs	r3, #128	@ 0x80
 800459c:	03db      	lsls	r3, r3, #15
 800459e:	4013      	ands	r3, r2
 80045a0:	d009      	beq.n	80045b6 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2280      	movs	r2, #128	@ 0x80
 80045a8:	0352      	lsls	r2, r2, #13
 80045aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	0018      	movs	r0, r3
 80045b0:	f000 fc00 	bl	8004db4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045b4:	e02f      	b.n	8004616 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80045b6:	23a4      	movs	r3, #164	@ 0xa4
 80045b8:	18fb      	adds	r3, r7, r3
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2280      	movs	r2, #128	@ 0x80
 80045be:	4013      	ands	r3, r2
 80045c0:	d00f      	beq.n	80045e2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80045c2:	23a0      	movs	r3, #160	@ 0xa0
 80045c4:	18fb      	adds	r3, r7, r3
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2280      	movs	r2, #128	@ 0x80
 80045ca:	4013      	ands	r3, r2
 80045cc:	d009      	beq.n	80045e2 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d01e      	beq.n	8004614 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	0010      	movs	r0, r2
 80045de:	4798      	blx	r3
    }
    return;
 80045e0:	e018      	b.n	8004614 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80045e2:	23a4      	movs	r3, #164	@ 0xa4
 80045e4:	18fb      	adds	r3, r7, r3
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2240      	movs	r2, #64	@ 0x40
 80045ea:	4013      	ands	r3, r2
 80045ec:	d013      	beq.n	8004616 <HAL_UART_IRQHandler+0x5b2>
 80045ee:	23a0      	movs	r3, #160	@ 0xa0
 80045f0:	18fb      	adds	r3, r7, r3
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2240      	movs	r2, #64	@ 0x40
 80045f6:	4013      	ands	r3, r2
 80045f8:	d00d      	beq.n	8004616 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	0018      	movs	r0, r3
 80045fe:	f000 fbae 	bl	8004d5e <UART_EndTransmit_IT>
    return;
 8004602:	e008      	b.n	8004616 <HAL_UART_IRQHandler+0x5b2>
      return;
 8004604:	46c0      	nop			@ (mov r8, r8)
 8004606:	e006      	b.n	8004616 <HAL_UART_IRQHandler+0x5b2>
    return;
 8004608:	46c0      	nop			@ (mov r8, r8)
 800460a:	e004      	b.n	8004616 <HAL_UART_IRQHandler+0x5b2>
      return;
 800460c:	46c0      	nop			@ (mov r8, r8)
 800460e:	e002      	b.n	8004616 <HAL_UART_IRQHandler+0x5b2>
      return;
 8004610:	46c0      	nop			@ (mov r8, r8)
 8004612:	e000      	b.n	8004616 <HAL_UART_IRQHandler+0x5b2>
    return;
 8004614:	46c0      	nop			@ (mov r8, r8)
  }

}
 8004616:	46bd      	mov	sp, r7
 8004618:	b02b      	add	sp, #172	@ 0xac
 800461a:	bd90      	pop	{r4, r7, pc}
 800461c:	fffffeff 	.word	0xfffffeff
 8004620:	fffffedf 	.word	0xfffffedf

08004624 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800462c:	46c0      	nop			@ (mov r8, r8)
 800462e:	46bd      	mov	sp, r7
 8004630:	b002      	add	sp, #8
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800463c:	46c0      	nop			@ (mov r8, r8)
 800463e:	46bd      	mov	sp, r7
 8004640:	b002      	add	sp, #8
 8004642:	bd80      	pop	{r7, pc}

08004644 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	000a      	movs	r2, r1
 800464e:	1cbb      	adds	r3, r7, #2
 8004650:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004652:	46c0      	nop			@ (mov r8, r8)
 8004654:	46bd      	mov	sp, r7
 8004656:	b002      	add	sp, #8
 8004658:	bd80      	pop	{r7, pc}
	...

0800465c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b088      	sub	sp, #32
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004664:	231e      	movs	r3, #30
 8004666:	18fb      	adds	r3, r7, r3
 8004668:	2200      	movs	r2, #0
 800466a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689a      	ldr	r2, [r3, #8]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	431a      	orrs	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	69db      	ldr	r3, [r3, #28]
 8004680:	4313      	orrs	r3, r2
 8004682:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a8d      	ldr	r2, [pc, #564]	@ (80048c0 <UART_SetConfig+0x264>)
 800468c:	4013      	ands	r3, r2
 800468e:	0019      	movs	r1, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	430a      	orrs	r2, r1
 8004698:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	4a88      	ldr	r2, [pc, #544]	@ (80048c4 <UART_SetConfig+0x268>)
 80046a2:	4013      	ands	r3, r2
 80046a4:	0019      	movs	r1, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68da      	ldr	r2, [r3, #12]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a1b      	ldr	r3, [r3, #32]
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	4313      	orrs	r3, r2
 80046c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	4a7f      	ldr	r2, [pc, #508]	@ (80048c8 <UART_SetConfig+0x26c>)
 80046ca:	4013      	ands	r3, r2
 80046cc:	0019      	movs	r1, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a7b      	ldr	r2, [pc, #492]	@ (80048cc <UART_SetConfig+0x270>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d127      	bne.n	8004732 <UART_SetConfig+0xd6>
 80046e2:	4b7b      	ldr	r3, [pc, #492]	@ (80048d0 <UART_SetConfig+0x274>)
 80046e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e6:	2203      	movs	r2, #3
 80046e8:	4013      	ands	r3, r2
 80046ea:	2b03      	cmp	r3, #3
 80046ec:	d00d      	beq.n	800470a <UART_SetConfig+0xae>
 80046ee:	d81b      	bhi.n	8004728 <UART_SetConfig+0xcc>
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d014      	beq.n	800471e <UART_SetConfig+0xc2>
 80046f4:	d818      	bhi.n	8004728 <UART_SetConfig+0xcc>
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d002      	beq.n	8004700 <UART_SetConfig+0xa4>
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d00a      	beq.n	8004714 <UART_SetConfig+0xb8>
 80046fe:	e013      	b.n	8004728 <UART_SetConfig+0xcc>
 8004700:	231f      	movs	r3, #31
 8004702:	18fb      	adds	r3, r7, r3
 8004704:	2200      	movs	r2, #0
 8004706:	701a      	strb	r2, [r3, #0]
 8004708:	e021      	b.n	800474e <UART_SetConfig+0xf2>
 800470a:	231f      	movs	r3, #31
 800470c:	18fb      	adds	r3, r7, r3
 800470e:	2202      	movs	r2, #2
 8004710:	701a      	strb	r2, [r3, #0]
 8004712:	e01c      	b.n	800474e <UART_SetConfig+0xf2>
 8004714:	231f      	movs	r3, #31
 8004716:	18fb      	adds	r3, r7, r3
 8004718:	2204      	movs	r2, #4
 800471a:	701a      	strb	r2, [r3, #0]
 800471c:	e017      	b.n	800474e <UART_SetConfig+0xf2>
 800471e:	231f      	movs	r3, #31
 8004720:	18fb      	adds	r3, r7, r3
 8004722:	2208      	movs	r2, #8
 8004724:	701a      	strb	r2, [r3, #0]
 8004726:	e012      	b.n	800474e <UART_SetConfig+0xf2>
 8004728:	231f      	movs	r3, #31
 800472a:	18fb      	adds	r3, r7, r3
 800472c:	2210      	movs	r2, #16
 800472e:	701a      	strb	r2, [r3, #0]
 8004730:	e00d      	b.n	800474e <UART_SetConfig+0xf2>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a67      	ldr	r2, [pc, #412]	@ (80048d4 <UART_SetConfig+0x278>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d104      	bne.n	8004746 <UART_SetConfig+0xea>
 800473c:	231f      	movs	r3, #31
 800473e:	18fb      	adds	r3, r7, r3
 8004740:	2200      	movs	r2, #0
 8004742:	701a      	strb	r2, [r3, #0]
 8004744:	e003      	b.n	800474e <UART_SetConfig+0xf2>
 8004746:	231f      	movs	r3, #31
 8004748:	18fb      	adds	r3, r7, r3
 800474a:	2210      	movs	r2, #16
 800474c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	69da      	ldr	r2, [r3, #28]
 8004752:	2380      	movs	r3, #128	@ 0x80
 8004754:	021b      	lsls	r3, r3, #8
 8004756:	429a      	cmp	r2, r3
 8004758:	d15c      	bne.n	8004814 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800475a:	231f      	movs	r3, #31
 800475c:	18fb      	adds	r3, r7, r3
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	2b08      	cmp	r3, #8
 8004762:	d015      	beq.n	8004790 <UART_SetConfig+0x134>
 8004764:	dc18      	bgt.n	8004798 <UART_SetConfig+0x13c>
 8004766:	2b04      	cmp	r3, #4
 8004768:	d00d      	beq.n	8004786 <UART_SetConfig+0x12a>
 800476a:	dc15      	bgt.n	8004798 <UART_SetConfig+0x13c>
 800476c:	2b00      	cmp	r3, #0
 800476e:	d002      	beq.n	8004776 <UART_SetConfig+0x11a>
 8004770:	2b02      	cmp	r3, #2
 8004772:	d005      	beq.n	8004780 <UART_SetConfig+0x124>
 8004774:	e010      	b.n	8004798 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004776:	f7fd ff31 	bl	80025dc <HAL_RCC_GetPCLK1Freq>
 800477a:	0003      	movs	r3, r0
 800477c:	61bb      	str	r3, [r7, #24]
        break;
 800477e:	e012      	b.n	80047a6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004780:	4b55      	ldr	r3, [pc, #340]	@ (80048d8 <UART_SetConfig+0x27c>)
 8004782:	61bb      	str	r3, [r7, #24]
        break;
 8004784:	e00f      	b.n	80047a6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004786:	f7fd fead 	bl	80024e4 <HAL_RCC_GetSysClockFreq>
 800478a:	0003      	movs	r3, r0
 800478c:	61bb      	str	r3, [r7, #24]
        break;
 800478e:	e00a      	b.n	80047a6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004790:	2380      	movs	r3, #128	@ 0x80
 8004792:	021b      	lsls	r3, r3, #8
 8004794:	61bb      	str	r3, [r7, #24]
        break;
 8004796:	e006      	b.n	80047a6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004798:	2300      	movs	r3, #0
 800479a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800479c:	231e      	movs	r3, #30
 800479e:	18fb      	adds	r3, r7, r3
 80047a0:	2201      	movs	r2, #1
 80047a2:	701a      	strb	r2, [r3, #0]
        break;
 80047a4:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d100      	bne.n	80047ae <UART_SetConfig+0x152>
 80047ac:	e07a      	b.n	80048a4 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	005a      	lsls	r2, r3, #1
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	085b      	lsrs	r3, r3, #1
 80047b8:	18d2      	adds	r2, r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	0019      	movs	r1, r3
 80047c0:	0010      	movs	r0, r2
 80047c2:	f7fb fcab 	bl	800011c <__udivsi3>
 80047c6:	0003      	movs	r3, r0
 80047c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	2b0f      	cmp	r3, #15
 80047ce:	d91c      	bls.n	800480a <UART_SetConfig+0x1ae>
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	2380      	movs	r3, #128	@ 0x80
 80047d4:	025b      	lsls	r3, r3, #9
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d217      	bcs.n	800480a <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	b29a      	uxth	r2, r3
 80047de:	200e      	movs	r0, #14
 80047e0:	183b      	adds	r3, r7, r0
 80047e2:	210f      	movs	r1, #15
 80047e4:	438a      	bics	r2, r1
 80047e6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	085b      	lsrs	r3, r3, #1
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	2207      	movs	r2, #7
 80047f0:	4013      	ands	r3, r2
 80047f2:	b299      	uxth	r1, r3
 80047f4:	183b      	adds	r3, r7, r0
 80047f6:	183a      	adds	r2, r7, r0
 80047f8:	8812      	ldrh	r2, [r2, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	183a      	adds	r2, r7, r0
 8004804:	8812      	ldrh	r2, [r2, #0]
 8004806:	60da      	str	r2, [r3, #12]
 8004808:	e04c      	b.n	80048a4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800480a:	231e      	movs	r3, #30
 800480c:	18fb      	adds	r3, r7, r3
 800480e:	2201      	movs	r2, #1
 8004810:	701a      	strb	r2, [r3, #0]
 8004812:	e047      	b.n	80048a4 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004814:	231f      	movs	r3, #31
 8004816:	18fb      	adds	r3, r7, r3
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	2b08      	cmp	r3, #8
 800481c:	d015      	beq.n	800484a <UART_SetConfig+0x1ee>
 800481e:	dc18      	bgt.n	8004852 <UART_SetConfig+0x1f6>
 8004820:	2b04      	cmp	r3, #4
 8004822:	d00d      	beq.n	8004840 <UART_SetConfig+0x1e4>
 8004824:	dc15      	bgt.n	8004852 <UART_SetConfig+0x1f6>
 8004826:	2b00      	cmp	r3, #0
 8004828:	d002      	beq.n	8004830 <UART_SetConfig+0x1d4>
 800482a:	2b02      	cmp	r3, #2
 800482c:	d005      	beq.n	800483a <UART_SetConfig+0x1de>
 800482e:	e010      	b.n	8004852 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004830:	f7fd fed4 	bl	80025dc <HAL_RCC_GetPCLK1Freq>
 8004834:	0003      	movs	r3, r0
 8004836:	61bb      	str	r3, [r7, #24]
        break;
 8004838:	e012      	b.n	8004860 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800483a:	4b27      	ldr	r3, [pc, #156]	@ (80048d8 <UART_SetConfig+0x27c>)
 800483c:	61bb      	str	r3, [r7, #24]
        break;
 800483e:	e00f      	b.n	8004860 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004840:	f7fd fe50 	bl	80024e4 <HAL_RCC_GetSysClockFreq>
 8004844:	0003      	movs	r3, r0
 8004846:	61bb      	str	r3, [r7, #24]
        break;
 8004848:	e00a      	b.n	8004860 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800484a:	2380      	movs	r3, #128	@ 0x80
 800484c:	021b      	lsls	r3, r3, #8
 800484e:	61bb      	str	r3, [r7, #24]
        break;
 8004850:	e006      	b.n	8004860 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004852:	2300      	movs	r3, #0
 8004854:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004856:	231e      	movs	r3, #30
 8004858:	18fb      	adds	r3, r7, r3
 800485a:	2201      	movs	r2, #1
 800485c:	701a      	strb	r2, [r3, #0]
        break;
 800485e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d01e      	beq.n	80048a4 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	085a      	lsrs	r2, r3, #1
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	18d2      	adds	r2, r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	0019      	movs	r1, r3
 8004876:	0010      	movs	r0, r2
 8004878:	f7fb fc50 	bl	800011c <__udivsi3>
 800487c:	0003      	movs	r3, r0
 800487e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	2b0f      	cmp	r3, #15
 8004884:	d90a      	bls.n	800489c <UART_SetConfig+0x240>
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	2380      	movs	r3, #128	@ 0x80
 800488a:	025b      	lsls	r3, r3, #9
 800488c:	429a      	cmp	r2, r3
 800488e:	d205      	bcs.n	800489c <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	b29a      	uxth	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	60da      	str	r2, [r3, #12]
 800489a:	e003      	b.n	80048a4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800489c:	231e      	movs	r3, #30
 800489e:	18fb      	adds	r3, r7, r3
 80048a0:	2201      	movs	r2, #1
 80048a2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80048b0:	231e      	movs	r3, #30
 80048b2:	18fb      	adds	r3, r7, r3
 80048b4:	781b      	ldrb	r3, [r3, #0]
}
 80048b6:	0018      	movs	r0, r3
 80048b8:	46bd      	mov	sp, r7
 80048ba:	b008      	add	sp, #32
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	46c0      	nop			@ (mov r8, r8)
 80048c0:	efff69f3 	.word	0xefff69f3
 80048c4:	ffffcfff 	.word	0xffffcfff
 80048c8:	fffff4ff 	.word	0xfffff4ff
 80048cc:	40013800 	.word	0x40013800
 80048d0:	40021000 	.word	0x40021000
 80048d4:	40004400 	.word	0x40004400
 80048d8:	007a1200 	.word	0x007a1200

080048dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e8:	2201      	movs	r2, #1
 80048ea:	4013      	ands	r3, r2
 80048ec:	d00b      	beq.n	8004906 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	4a4a      	ldr	r2, [pc, #296]	@ (8004a20 <UART_AdvFeatureConfig+0x144>)
 80048f6:	4013      	ands	r3, r2
 80048f8:	0019      	movs	r1, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	430a      	orrs	r2, r1
 8004904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800490a:	2202      	movs	r2, #2
 800490c:	4013      	ands	r3, r2
 800490e:	d00b      	beq.n	8004928 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	4a43      	ldr	r2, [pc, #268]	@ (8004a24 <UART_AdvFeatureConfig+0x148>)
 8004918:	4013      	ands	r3, r2
 800491a:	0019      	movs	r1, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	430a      	orrs	r2, r1
 8004926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492c:	2204      	movs	r2, #4
 800492e:	4013      	ands	r3, r2
 8004930:	d00b      	beq.n	800494a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	4a3b      	ldr	r2, [pc, #236]	@ (8004a28 <UART_AdvFeatureConfig+0x14c>)
 800493a:	4013      	ands	r3, r2
 800493c:	0019      	movs	r1, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494e:	2208      	movs	r2, #8
 8004950:	4013      	ands	r3, r2
 8004952:	d00b      	beq.n	800496c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	4a34      	ldr	r2, [pc, #208]	@ (8004a2c <UART_AdvFeatureConfig+0x150>)
 800495c:	4013      	ands	r3, r2
 800495e:	0019      	movs	r1, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	430a      	orrs	r2, r1
 800496a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004970:	2210      	movs	r2, #16
 8004972:	4013      	ands	r3, r2
 8004974:	d00b      	beq.n	800498e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	4a2c      	ldr	r2, [pc, #176]	@ (8004a30 <UART_AdvFeatureConfig+0x154>)
 800497e:	4013      	ands	r3, r2
 8004980:	0019      	movs	r1, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004992:	2220      	movs	r2, #32
 8004994:	4013      	ands	r3, r2
 8004996:	d00b      	beq.n	80049b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	4a25      	ldr	r2, [pc, #148]	@ (8004a34 <UART_AdvFeatureConfig+0x158>)
 80049a0:	4013      	ands	r3, r2
 80049a2:	0019      	movs	r1, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b4:	2240      	movs	r2, #64	@ 0x40
 80049b6:	4013      	ands	r3, r2
 80049b8:	d01d      	beq.n	80049f6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004a38 <UART_AdvFeatureConfig+0x15c>)
 80049c2:	4013      	ands	r3, r2
 80049c4:	0019      	movs	r1, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049d6:	2380      	movs	r3, #128	@ 0x80
 80049d8:	035b      	lsls	r3, r3, #13
 80049da:	429a      	cmp	r2, r3
 80049dc:	d10b      	bne.n	80049f6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	4a15      	ldr	r2, [pc, #84]	@ (8004a3c <UART_AdvFeatureConfig+0x160>)
 80049e6:	4013      	ands	r3, r2
 80049e8:	0019      	movs	r1, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fa:	2280      	movs	r2, #128	@ 0x80
 80049fc:	4013      	ands	r3, r2
 80049fe:	d00b      	beq.n	8004a18 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	4a0e      	ldr	r2, [pc, #56]	@ (8004a40 <UART_AdvFeatureConfig+0x164>)
 8004a08:	4013      	ands	r3, r2
 8004a0a:	0019      	movs	r1, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	605a      	str	r2, [r3, #4]
  }
}
 8004a18:	46c0      	nop			@ (mov r8, r8)
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	b002      	add	sp, #8
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	fffdffff 	.word	0xfffdffff
 8004a24:	fffeffff 	.word	0xfffeffff
 8004a28:	fffbffff 	.word	0xfffbffff
 8004a2c:	ffff7fff 	.word	0xffff7fff
 8004a30:	ffffefff 	.word	0xffffefff
 8004a34:	ffffdfff 	.word	0xffffdfff
 8004a38:	ffefffff 	.word	0xffefffff
 8004a3c:	ff9fffff 	.word	0xff9fffff
 8004a40:	fff7ffff 	.word	0xfff7ffff

08004a44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b092      	sub	sp, #72	@ 0x48
 8004a48:	af02      	add	r7, sp, #8
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2284      	movs	r2, #132	@ 0x84
 8004a50:	2100      	movs	r1, #0
 8004a52:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a54:	f7fc fcb6 	bl	80013c4 <HAL_GetTick>
 8004a58:	0003      	movs	r3, r0
 8004a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2208      	movs	r2, #8
 8004a64:	4013      	ands	r3, r2
 8004a66:	2b08      	cmp	r3, #8
 8004a68:	d12c      	bne.n	8004ac4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a6c:	2280      	movs	r2, #128	@ 0x80
 8004a6e:	0391      	lsls	r1, r2, #14
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	4a46      	ldr	r2, [pc, #280]	@ (8004b8c <UART_CheckIdleState+0x148>)
 8004a74:	9200      	str	r2, [sp, #0]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f000 f88c 	bl	8004b94 <UART_WaitOnFlagUntilTimeout>
 8004a7c:	1e03      	subs	r3, r0, #0
 8004a7e:	d021      	beq.n	8004ac4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a80:	f3ef 8310 	mrs	r3, PRIMASK
 8004a84:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004a88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a90:	f383 8810 	msr	PRIMASK, r3
}
 8004a94:	46c0      	nop			@ (mov r8, r8)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2180      	movs	r1, #128	@ 0x80
 8004aa2:	438a      	bics	r2, r1
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aac:	f383 8810 	msr	PRIMASK, r3
}
 8004ab0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2278      	movs	r2, #120	@ 0x78
 8004abc:	2100      	movs	r1, #0
 8004abe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e05f      	b.n	8004b84 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2204      	movs	r2, #4
 8004acc:	4013      	ands	r3, r2
 8004ace:	2b04      	cmp	r3, #4
 8004ad0:	d146      	bne.n	8004b60 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ad2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ad4:	2280      	movs	r2, #128	@ 0x80
 8004ad6:	03d1      	lsls	r1, r2, #15
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	4a2c      	ldr	r2, [pc, #176]	@ (8004b8c <UART_CheckIdleState+0x148>)
 8004adc:	9200      	str	r2, [sp, #0]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f000 f858 	bl	8004b94 <UART_WaitOnFlagUntilTimeout>
 8004ae4:	1e03      	subs	r3, r0, #0
 8004ae6:	d03b      	beq.n	8004b60 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ae8:	f3ef 8310 	mrs	r3, PRIMASK
 8004aec:	60fb      	str	r3, [r7, #12]
  return(result);
 8004aee:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004af0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004af2:	2301      	movs	r3, #1
 8004af4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	f383 8810 	msr	PRIMASK, r3
}
 8004afc:	46c0      	nop			@ (mov r8, r8)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4921      	ldr	r1, [pc, #132]	@ (8004b90 <UART_CheckIdleState+0x14c>)
 8004b0a:	400a      	ands	r2, r1
 8004b0c:	601a      	str	r2, [r3, #0]
 8004b0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f383 8810 	msr	PRIMASK, r3
}
 8004b18:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b1a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b1e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b20:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b22:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b24:	2301      	movs	r3, #1
 8004b26:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	f383 8810 	msr	PRIMASK, r3
}
 8004b2e:	46c0      	nop			@ (mov r8, r8)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	689a      	ldr	r2, [r3, #8]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	438a      	bics	r2, r1
 8004b3e:	609a      	str	r2, [r3, #8]
 8004b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b42:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b44:	6a3b      	ldr	r3, [r7, #32]
 8004b46:	f383 8810 	msr	PRIMASK, r3
}
 8004b4a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2280      	movs	r2, #128	@ 0x80
 8004b50:	2120      	movs	r1, #32
 8004b52:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2278      	movs	r2, #120	@ 0x78
 8004b58:	2100      	movs	r1, #0
 8004b5a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e011      	b.n	8004b84 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2220      	movs	r2, #32
 8004b64:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2280      	movs	r2, #128	@ 0x80
 8004b6a:	2120      	movs	r1, #32
 8004b6c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2278      	movs	r2, #120	@ 0x78
 8004b7e:	2100      	movs	r1, #0
 8004b80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	0018      	movs	r0, r3
 8004b86:	46bd      	mov	sp, r7
 8004b88:	b010      	add	sp, #64	@ 0x40
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	01ffffff 	.word	0x01ffffff
 8004b90:	fffffedf 	.word	0xfffffedf

08004b94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	603b      	str	r3, [r7, #0]
 8004ba0:	1dfb      	adds	r3, r7, #7
 8004ba2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ba4:	e04b      	b.n	8004c3e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	d048      	beq.n	8004c3e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bac:	f7fc fc0a 	bl	80013c4 <HAL_GetTick>
 8004bb0:	0002      	movs	r2, r0
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	69ba      	ldr	r2, [r7, #24]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d302      	bcc.n	8004bc2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e04b      	b.n	8004c5e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2204      	movs	r2, #4
 8004bce:	4013      	ands	r3, r2
 8004bd0:	d035      	beq.n	8004c3e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	2208      	movs	r2, #8
 8004bda:	4013      	ands	r3, r2
 8004bdc:	2b08      	cmp	r3, #8
 8004bde:	d111      	bne.n	8004c04 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2208      	movs	r2, #8
 8004be6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	0018      	movs	r0, r3
 8004bec:	f000 f83c 	bl	8004c68 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2284      	movs	r2, #132	@ 0x84
 8004bf4:	2108      	movs	r1, #8
 8004bf6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2278      	movs	r2, #120	@ 0x78
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e02c      	b.n	8004c5e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	69da      	ldr	r2, [r3, #28]
 8004c0a:	2380      	movs	r3, #128	@ 0x80
 8004c0c:	011b      	lsls	r3, r3, #4
 8004c0e:	401a      	ands	r2, r3
 8004c10:	2380      	movs	r3, #128	@ 0x80
 8004c12:	011b      	lsls	r3, r3, #4
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d112      	bne.n	8004c3e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2280      	movs	r2, #128	@ 0x80
 8004c1e:	0112      	lsls	r2, r2, #4
 8004c20:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	0018      	movs	r0, r3
 8004c26:	f000 f81f 	bl	8004c68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2284      	movs	r2, #132	@ 0x84
 8004c2e:	2120      	movs	r1, #32
 8004c30:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2278      	movs	r2, #120	@ 0x78
 8004c36:	2100      	movs	r1, #0
 8004c38:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e00f      	b.n	8004c5e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	69db      	ldr	r3, [r3, #28]
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	4013      	ands	r3, r2
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	425a      	negs	r2, r3
 8004c4e:	4153      	adcs	r3, r2
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	001a      	movs	r2, r3
 8004c54:	1dfb      	adds	r3, r7, #7
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d0a4      	beq.n	8004ba6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	0018      	movs	r0, r3
 8004c60:	46bd      	mov	sp, r7
 8004c62:	b004      	add	sp, #16
 8004c64:	bd80      	pop	{r7, pc}
	...

08004c68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b08e      	sub	sp, #56	@ 0x38
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c70:	f3ef 8310 	mrs	r3, PRIMASK
 8004c74:	617b      	str	r3, [r7, #20]
  return(result);
 8004c76:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c78:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	f383 8810 	msr	PRIMASK, r3
}
 8004c84:	46c0      	nop			@ (mov r8, r8)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4926      	ldr	r1, [pc, #152]	@ (8004d2c <UART_EndRxTransfer+0xc4>)
 8004c92:	400a      	ands	r2, r1
 8004c94:	601a      	str	r2, [r3, #0]
 8004c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	f383 8810 	msr	PRIMASK, r3
}
 8004ca0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ca2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ca6:	623b      	str	r3, [r7, #32]
  return(result);
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004caa:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cac:	2301      	movs	r3, #1
 8004cae:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb2:	f383 8810 	msr	PRIMASK, r3
}
 8004cb6:	46c0      	nop			@ (mov r8, r8)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689a      	ldr	r2, [r3, #8]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	438a      	bics	r2, r1
 8004cc6:	609a      	str	r2, [r3, #8]
 8004cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cca:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cce:	f383 8810 	msr	PRIMASK, r3
}
 8004cd2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d118      	bne.n	8004d0e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cdc:	f3ef 8310 	mrs	r3, PRIMASK
 8004ce0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ce2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f383 8810 	msr	PRIMASK, r3
}
 8004cf0:	46c0      	nop			@ (mov r8, r8)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2110      	movs	r1, #16
 8004cfe:	438a      	bics	r2, r1
 8004d00:	601a      	str	r2, [r3, #0]
 8004d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f383 8810 	msr	PRIMASK, r3
}
 8004d0c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2280      	movs	r2, #128	@ 0x80
 8004d12:	2120      	movs	r1, #32
 8004d14:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004d22:	46c0      	nop			@ (mov r8, r8)
 8004d24:	46bd      	mov	sp, r7
 8004d26:	b00e      	add	sp, #56	@ 0x38
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	46c0      	nop			@ (mov r8, r8)
 8004d2c:	fffffedf 	.word	0xfffffedf

08004d30 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	225a      	movs	r2, #90	@ 0x5a
 8004d42:	2100      	movs	r1, #0
 8004d44:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2252      	movs	r2, #82	@ 0x52
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	0018      	movs	r0, r3
 8004d52:	f7ff fc6f 	bl	8004634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d56:	46c0      	nop			@ (mov r8, r8)
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	b004      	add	sp, #16
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b086      	sub	sp, #24
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d66:	f3ef 8310 	mrs	r3, PRIMASK
 8004d6a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d6c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d6e:	617b      	str	r3, [r7, #20]
 8004d70:	2301      	movs	r3, #1
 8004d72:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f383 8810 	msr	PRIMASK, r3
}
 8004d7a:	46c0      	nop			@ (mov r8, r8)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2140      	movs	r1, #64	@ 0x40
 8004d88:	438a      	bics	r2, r1
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	f383 8810 	msr	PRIMASK, r3
}
 8004d96:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	0018      	movs	r0, r3
 8004da8:	f7ff fc3c 	bl	8004624 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dac:	46c0      	nop			@ (mov r8, r8)
 8004dae:	46bd      	mov	sp, r7
 8004db0:	b006      	add	sp, #24
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004dbc:	46c0      	nop			@ (mov r8, r8)
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	b002      	add	sp, #8
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <siprintf>:
 8004dc4:	b40e      	push	{r1, r2, r3}
 8004dc6:	b500      	push	{lr}
 8004dc8:	490b      	ldr	r1, [pc, #44]	@ (8004df8 <siprintf+0x34>)
 8004dca:	b09c      	sub	sp, #112	@ 0x70
 8004dcc:	ab1d      	add	r3, sp, #116	@ 0x74
 8004dce:	9002      	str	r0, [sp, #8]
 8004dd0:	9006      	str	r0, [sp, #24]
 8004dd2:	9107      	str	r1, [sp, #28]
 8004dd4:	9104      	str	r1, [sp, #16]
 8004dd6:	4809      	ldr	r0, [pc, #36]	@ (8004dfc <siprintf+0x38>)
 8004dd8:	4909      	ldr	r1, [pc, #36]	@ (8004e00 <siprintf+0x3c>)
 8004dda:	cb04      	ldmia	r3!, {r2}
 8004ddc:	9105      	str	r1, [sp, #20]
 8004dde:	6800      	ldr	r0, [r0, #0]
 8004de0:	a902      	add	r1, sp, #8
 8004de2:	9301      	str	r3, [sp, #4]
 8004de4:	f000 f99e 	bl	8005124 <_svfiprintf_r>
 8004de8:	2200      	movs	r2, #0
 8004dea:	9b02      	ldr	r3, [sp, #8]
 8004dec:	701a      	strb	r2, [r3, #0]
 8004dee:	b01c      	add	sp, #112	@ 0x70
 8004df0:	bc08      	pop	{r3}
 8004df2:	b003      	add	sp, #12
 8004df4:	4718      	bx	r3
 8004df6:	46c0      	nop			@ (mov r8, r8)
 8004df8:	7fffffff 	.word	0x7fffffff
 8004dfc:	2000000c 	.word	0x2000000c
 8004e00:	ffff0208 	.word	0xffff0208

08004e04 <memset>:
 8004e04:	0003      	movs	r3, r0
 8004e06:	1882      	adds	r2, r0, r2
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d100      	bne.n	8004e0e <memset+0xa>
 8004e0c:	4770      	bx	lr
 8004e0e:	7019      	strb	r1, [r3, #0]
 8004e10:	3301      	adds	r3, #1
 8004e12:	e7f9      	b.n	8004e08 <memset+0x4>

08004e14 <__errno>:
 8004e14:	4b01      	ldr	r3, [pc, #4]	@ (8004e1c <__errno+0x8>)
 8004e16:	6818      	ldr	r0, [r3, #0]
 8004e18:	4770      	bx	lr
 8004e1a:	46c0      	nop			@ (mov r8, r8)
 8004e1c:	2000000c 	.word	0x2000000c

08004e20 <__libc_init_array>:
 8004e20:	b570      	push	{r4, r5, r6, lr}
 8004e22:	2600      	movs	r6, #0
 8004e24:	4c0c      	ldr	r4, [pc, #48]	@ (8004e58 <__libc_init_array+0x38>)
 8004e26:	4d0d      	ldr	r5, [pc, #52]	@ (8004e5c <__libc_init_array+0x3c>)
 8004e28:	1b64      	subs	r4, r4, r5
 8004e2a:	10a4      	asrs	r4, r4, #2
 8004e2c:	42a6      	cmp	r6, r4
 8004e2e:	d109      	bne.n	8004e44 <__libc_init_array+0x24>
 8004e30:	2600      	movs	r6, #0
 8004e32:	f000 fc65 	bl	8005700 <_init>
 8004e36:	4c0a      	ldr	r4, [pc, #40]	@ (8004e60 <__libc_init_array+0x40>)
 8004e38:	4d0a      	ldr	r5, [pc, #40]	@ (8004e64 <__libc_init_array+0x44>)
 8004e3a:	1b64      	subs	r4, r4, r5
 8004e3c:	10a4      	asrs	r4, r4, #2
 8004e3e:	42a6      	cmp	r6, r4
 8004e40:	d105      	bne.n	8004e4e <__libc_init_array+0x2e>
 8004e42:	bd70      	pop	{r4, r5, r6, pc}
 8004e44:	00b3      	lsls	r3, r6, #2
 8004e46:	58eb      	ldr	r3, [r5, r3]
 8004e48:	4798      	blx	r3
 8004e4a:	3601      	adds	r6, #1
 8004e4c:	e7ee      	b.n	8004e2c <__libc_init_array+0xc>
 8004e4e:	00b3      	lsls	r3, r6, #2
 8004e50:	58eb      	ldr	r3, [r5, r3]
 8004e52:	4798      	blx	r3
 8004e54:	3601      	adds	r6, #1
 8004e56:	e7f2      	b.n	8004e3e <__libc_init_array+0x1e>
 8004e58:	080057dc 	.word	0x080057dc
 8004e5c:	080057dc 	.word	0x080057dc
 8004e60:	080057e0 	.word	0x080057e0
 8004e64:	080057dc 	.word	0x080057dc

08004e68 <__retarget_lock_acquire_recursive>:
 8004e68:	4770      	bx	lr

08004e6a <__retarget_lock_release_recursive>:
 8004e6a:	4770      	bx	lr

08004e6c <_free_r>:
 8004e6c:	b570      	push	{r4, r5, r6, lr}
 8004e6e:	0005      	movs	r5, r0
 8004e70:	1e0c      	subs	r4, r1, #0
 8004e72:	d010      	beq.n	8004e96 <_free_r+0x2a>
 8004e74:	3c04      	subs	r4, #4
 8004e76:	6823      	ldr	r3, [r4, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	da00      	bge.n	8004e7e <_free_r+0x12>
 8004e7c:	18e4      	adds	r4, r4, r3
 8004e7e:	0028      	movs	r0, r5
 8004e80:	f000 f8e0 	bl	8005044 <__malloc_lock>
 8004e84:	4a1d      	ldr	r2, [pc, #116]	@ (8004efc <_free_r+0x90>)
 8004e86:	6813      	ldr	r3, [r2, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d105      	bne.n	8004e98 <_free_r+0x2c>
 8004e8c:	6063      	str	r3, [r4, #4]
 8004e8e:	6014      	str	r4, [r2, #0]
 8004e90:	0028      	movs	r0, r5
 8004e92:	f000 f8df 	bl	8005054 <__malloc_unlock>
 8004e96:	bd70      	pop	{r4, r5, r6, pc}
 8004e98:	42a3      	cmp	r3, r4
 8004e9a:	d908      	bls.n	8004eae <_free_r+0x42>
 8004e9c:	6820      	ldr	r0, [r4, #0]
 8004e9e:	1821      	adds	r1, r4, r0
 8004ea0:	428b      	cmp	r3, r1
 8004ea2:	d1f3      	bne.n	8004e8c <_free_r+0x20>
 8004ea4:	6819      	ldr	r1, [r3, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	1809      	adds	r1, r1, r0
 8004eaa:	6021      	str	r1, [r4, #0]
 8004eac:	e7ee      	b.n	8004e8c <_free_r+0x20>
 8004eae:	001a      	movs	r2, r3
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <_free_r+0x4e>
 8004eb6:	42a3      	cmp	r3, r4
 8004eb8:	d9f9      	bls.n	8004eae <_free_r+0x42>
 8004eba:	6811      	ldr	r1, [r2, #0]
 8004ebc:	1850      	adds	r0, r2, r1
 8004ebe:	42a0      	cmp	r0, r4
 8004ec0:	d10b      	bne.n	8004eda <_free_r+0x6e>
 8004ec2:	6820      	ldr	r0, [r4, #0]
 8004ec4:	1809      	adds	r1, r1, r0
 8004ec6:	1850      	adds	r0, r2, r1
 8004ec8:	6011      	str	r1, [r2, #0]
 8004eca:	4283      	cmp	r3, r0
 8004ecc:	d1e0      	bne.n	8004e90 <_free_r+0x24>
 8004ece:	6818      	ldr	r0, [r3, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	1841      	adds	r1, r0, r1
 8004ed4:	6011      	str	r1, [r2, #0]
 8004ed6:	6053      	str	r3, [r2, #4]
 8004ed8:	e7da      	b.n	8004e90 <_free_r+0x24>
 8004eda:	42a0      	cmp	r0, r4
 8004edc:	d902      	bls.n	8004ee4 <_free_r+0x78>
 8004ede:	230c      	movs	r3, #12
 8004ee0:	602b      	str	r3, [r5, #0]
 8004ee2:	e7d5      	b.n	8004e90 <_free_r+0x24>
 8004ee4:	6820      	ldr	r0, [r4, #0]
 8004ee6:	1821      	adds	r1, r4, r0
 8004ee8:	428b      	cmp	r3, r1
 8004eea:	d103      	bne.n	8004ef4 <_free_r+0x88>
 8004eec:	6819      	ldr	r1, [r3, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	1809      	adds	r1, r1, r0
 8004ef2:	6021      	str	r1, [r4, #0]
 8004ef4:	6063      	str	r3, [r4, #4]
 8004ef6:	6054      	str	r4, [r2, #4]
 8004ef8:	e7ca      	b.n	8004e90 <_free_r+0x24>
 8004efa:	46c0      	nop			@ (mov r8, r8)
 8004efc:	20000434 	.word	0x20000434

08004f00 <sbrk_aligned>:
 8004f00:	b570      	push	{r4, r5, r6, lr}
 8004f02:	4e0f      	ldr	r6, [pc, #60]	@ (8004f40 <sbrk_aligned+0x40>)
 8004f04:	000d      	movs	r5, r1
 8004f06:	6831      	ldr	r1, [r6, #0]
 8004f08:	0004      	movs	r4, r0
 8004f0a:	2900      	cmp	r1, #0
 8004f0c:	d102      	bne.n	8004f14 <sbrk_aligned+0x14>
 8004f0e:	f000 fb99 	bl	8005644 <_sbrk_r>
 8004f12:	6030      	str	r0, [r6, #0]
 8004f14:	0029      	movs	r1, r5
 8004f16:	0020      	movs	r0, r4
 8004f18:	f000 fb94 	bl	8005644 <_sbrk_r>
 8004f1c:	1c43      	adds	r3, r0, #1
 8004f1e:	d103      	bne.n	8004f28 <sbrk_aligned+0x28>
 8004f20:	2501      	movs	r5, #1
 8004f22:	426d      	negs	r5, r5
 8004f24:	0028      	movs	r0, r5
 8004f26:	bd70      	pop	{r4, r5, r6, pc}
 8004f28:	2303      	movs	r3, #3
 8004f2a:	1cc5      	adds	r5, r0, #3
 8004f2c:	439d      	bics	r5, r3
 8004f2e:	42a8      	cmp	r0, r5
 8004f30:	d0f8      	beq.n	8004f24 <sbrk_aligned+0x24>
 8004f32:	1a29      	subs	r1, r5, r0
 8004f34:	0020      	movs	r0, r4
 8004f36:	f000 fb85 	bl	8005644 <_sbrk_r>
 8004f3a:	3001      	adds	r0, #1
 8004f3c:	d1f2      	bne.n	8004f24 <sbrk_aligned+0x24>
 8004f3e:	e7ef      	b.n	8004f20 <sbrk_aligned+0x20>
 8004f40:	20000430 	.word	0x20000430

08004f44 <_malloc_r>:
 8004f44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f46:	2203      	movs	r2, #3
 8004f48:	1ccb      	adds	r3, r1, #3
 8004f4a:	4393      	bics	r3, r2
 8004f4c:	3308      	adds	r3, #8
 8004f4e:	0005      	movs	r5, r0
 8004f50:	001f      	movs	r7, r3
 8004f52:	2b0c      	cmp	r3, #12
 8004f54:	d234      	bcs.n	8004fc0 <_malloc_r+0x7c>
 8004f56:	270c      	movs	r7, #12
 8004f58:	42b9      	cmp	r1, r7
 8004f5a:	d833      	bhi.n	8004fc4 <_malloc_r+0x80>
 8004f5c:	0028      	movs	r0, r5
 8004f5e:	f000 f871 	bl	8005044 <__malloc_lock>
 8004f62:	4e37      	ldr	r6, [pc, #220]	@ (8005040 <_malloc_r+0xfc>)
 8004f64:	6833      	ldr	r3, [r6, #0]
 8004f66:	001c      	movs	r4, r3
 8004f68:	2c00      	cmp	r4, #0
 8004f6a:	d12f      	bne.n	8004fcc <_malloc_r+0x88>
 8004f6c:	0039      	movs	r1, r7
 8004f6e:	0028      	movs	r0, r5
 8004f70:	f7ff ffc6 	bl	8004f00 <sbrk_aligned>
 8004f74:	0004      	movs	r4, r0
 8004f76:	1c43      	adds	r3, r0, #1
 8004f78:	d15f      	bne.n	800503a <_malloc_r+0xf6>
 8004f7a:	6834      	ldr	r4, [r6, #0]
 8004f7c:	9400      	str	r4, [sp, #0]
 8004f7e:	9b00      	ldr	r3, [sp, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d14a      	bne.n	800501a <_malloc_r+0xd6>
 8004f84:	2c00      	cmp	r4, #0
 8004f86:	d052      	beq.n	800502e <_malloc_r+0xea>
 8004f88:	6823      	ldr	r3, [r4, #0]
 8004f8a:	0028      	movs	r0, r5
 8004f8c:	18e3      	adds	r3, r4, r3
 8004f8e:	9900      	ldr	r1, [sp, #0]
 8004f90:	9301      	str	r3, [sp, #4]
 8004f92:	f000 fb57 	bl	8005644 <_sbrk_r>
 8004f96:	9b01      	ldr	r3, [sp, #4]
 8004f98:	4283      	cmp	r3, r0
 8004f9a:	d148      	bne.n	800502e <_malloc_r+0xea>
 8004f9c:	6823      	ldr	r3, [r4, #0]
 8004f9e:	0028      	movs	r0, r5
 8004fa0:	1aff      	subs	r7, r7, r3
 8004fa2:	0039      	movs	r1, r7
 8004fa4:	f7ff ffac 	bl	8004f00 <sbrk_aligned>
 8004fa8:	3001      	adds	r0, #1
 8004faa:	d040      	beq.n	800502e <_malloc_r+0xea>
 8004fac:	6823      	ldr	r3, [r4, #0]
 8004fae:	19db      	adds	r3, r3, r7
 8004fb0:	6023      	str	r3, [r4, #0]
 8004fb2:	6833      	ldr	r3, [r6, #0]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	2a00      	cmp	r2, #0
 8004fb8:	d133      	bne.n	8005022 <_malloc_r+0xde>
 8004fba:	9b00      	ldr	r3, [sp, #0]
 8004fbc:	6033      	str	r3, [r6, #0]
 8004fbe:	e019      	b.n	8004ff4 <_malloc_r+0xb0>
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	dac9      	bge.n	8004f58 <_malloc_r+0x14>
 8004fc4:	230c      	movs	r3, #12
 8004fc6:	602b      	str	r3, [r5, #0]
 8004fc8:	2000      	movs	r0, #0
 8004fca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004fcc:	6821      	ldr	r1, [r4, #0]
 8004fce:	1bc9      	subs	r1, r1, r7
 8004fd0:	d420      	bmi.n	8005014 <_malloc_r+0xd0>
 8004fd2:	290b      	cmp	r1, #11
 8004fd4:	d90a      	bls.n	8004fec <_malloc_r+0xa8>
 8004fd6:	19e2      	adds	r2, r4, r7
 8004fd8:	6027      	str	r7, [r4, #0]
 8004fda:	42a3      	cmp	r3, r4
 8004fdc:	d104      	bne.n	8004fe8 <_malloc_r+0xa4>
 8004fde:	6032      	str	r2, [r6, #0]
 8004fe0:	6863      	ldr	r3, [r4, #4]
 8004fe2:	6011      	str	r1, [r2, #0]
 8004fe4:	6053      	str	r3, [r2, #4]
 8004fe6:	e005      	b.n	8004ff4 <_malloc_r+0xb0>
 8004fe8:	605a      	str	r2, [r3, #4]
 8004fea:	e7f9      	b.n	8004fe0 <_malloc_r+0x9c>
 8004fec:	6862      	ldr	r2, [r4, #4]
 8004fee:	42a3      	cmp	r3, r4
 8004ff0:	d10e      	bne.n	8005010 <_malloc_r+0xcc>
 8004ff2:	6032      	str	r2, [r6, #0]
 8004ff4:	0028      	movs	r0, r5
 8004ff6:	f000 f82d 	bl	8005054 <__malloc_unlock>
 8004ffa:	0020      	movs	r0, r4
 8004ffc:	2207      	movs	r2, #7
 8004ffe:	300b      	adds	r0, #11
 8005000:	1d23      	adds	r3, r4, #4
 8005002:	4390      	bics	r0, r2
 8005004:	1ac2      	subs	r2, r0, r3
 8005006:	4298      	cmp	r0, r3
 8005008:	d0df      	beq.n	8004fca <_malloc_r+0x86>
 800500a:	1a1b      	subs	r3, r3, r0
 800500c:	50a3      	str	r3, [r4, r2]
 800500e:	e7dc      	b.n	8004fca <_malloc_r+0x86>
 8005010:	605a      	str	r2, [r3, #4]
 8005012:	e7ef      	b.n	8004ff4 <_malloc_r+0xb0>
 8005014:	0023      	movs	r3, r4
 8005016:	6864      	ldr	r4, [r4, #4]
 8005018:	e7a6      	b.n	8004f68 <_malloc_r+0x24>
 800501a:	9c00      	ldr	r4, [sp, #0]
 800501c:	6863      	ldr	r3, [r4, #4]
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	e7ad      	b.n	8004f7e <_malloc_r+0x3a>
 8005022:	001a      	movs	r2, r3
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	42a3      	cmp	r3, r4
 8005028:	d1fb      	bne.n	8005022 <_malloc_r+0xde>
 800502a:	2300      	movs	r3, #0
 800502c:	e7da      	b.n	8004fe4 <_malloc_r+0xa0>
 800502e:	230c      	movs	r3, #12
 8005030:	0028      	movs	r0, r5
 8005032:	602b      	str	r3, [r5, #0]
 8005034:	f000 f80e 	bl	8005054 <__malloc_unlock>
 8005038:	e7c6      	b.n	8004fc8 <_malloc_r+0x84>
 800503a:	6007      	str	r7, [r0, #0]
 800503c:	e7da      	b.n	8004ff4 <_malloc_r+0xb0>
 800503e:	46c0      	nop			@ (mov r8, r8)
 8005040:	20000434 	.word	0x20000434

08005044 <__malloc_lock>:
 8005044:	b510      	push	{r4, lr}
 8005046:	4802      	ldr	r0, [pc, #8]	@ (8005050 <__malloc_lock+0xc>)
 8005048:	f7ff ff0e 	bl	8004e68 <__retarget_lock_acquire_recursive>
 800504c:	bd10      	pop	{r4, pc}
 800504e:	46c0      	nop			@ (mov r8, r8)
 8005050:	2000042c 	.word	0x2000042c

08005054 <__malloc_unlock>:
 8005054:	b510      	push	{r4, lr}
 8005056:	4802      	ldr	r0, [pc, #8]	@ (8005060 <__malloc_unlock+0xc>)
 8005058:	f7ff ff07 	bl	8004e6a <__retarget_lock_release_recursive>
 800505c:	bd10      	pop	{r4, pc}
 800505e:	46c0      	nop			@ (mov r8, r8)
 8005060:	2000042c 	.word	0x2000042c

08005064 <__ssputs_r>:
 8005064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005066:	688e      	ldr	r6, [r1, #8]
 8005068:	b085      	sub	sp, #20
 800506a:	001f      	movs	r7, r3
 800506c:	000c      	movs	r4, r1
 800506e:	680b      	ldr	r3, [r1, #0]
 8005070:	9002      	str	r0, [sp, #8]
 8005072:	9203      	str	r2, [sp, #12]
 8005074:	42be      	cmp	r6, r7
 8005076:	d830      	bhi.n	80050da <__ssputs_r+0x76>
 8005078:	210c      	movs	r1, #12
 800507a:	5e62      	ldrsh	r2, [r4, r1]
 800507c:	2190      	movs	r1, #144	@ 0x90
 800507e:	00c9      	lsls	r1, r1, #3
 8005080:	420a      	tst	r2, r1
 8005082:	d028      	beq.n	80050d6 <__ssputs_r+0x72>
 8005084:	2003      	movs	r0, #3
 8005086:	6921      	ldr	r1, [r4, #16]
 8005088:	1a5b      	subs	r3, r3, r1
 800508a:	9301      	str	r3, [sp, #4]
 800508c:	6963      	ldr	r3, [r4, #20]
 800508e:	4343      	muls	r3, r0
 8005090:	9801      	ldr	r0, [sp, #4]
 8005092:	0fdd      	lsrs	r5, r3, #31
 8005094:	18ed      	adds	r5, r5, r3
 8005096:	1c7b      	adds	r3, r7, #1
 8005098:	181b      	adds	r3, r3, r0
 800509a:	106d      	asrs	r5, r5, #1
 800509c:	42ab      	cmp	r3, r5
 800509e:	d900      	bls.n	80050a2 <__ssputs_r+0x3e>
 80050a0:	001d      	movs	r5, r3
 80050a2:	0552      	lsls	r2, r2, #21
 80050a4:	d528      	bpl.n	80050f8 <__ssputs_r+0x94>
 80050a6:	0029      	movs	r1, r5
 80050a8:	9802      	ldr	r0, [sp, #8]
 80050aa:	f7ff ff4b 	bl	8004f44 <_malloc_r>
 80050ae:	1e06      	subs	r6, r0, #0
 80050b0:	d02c      	beq.n	800510c <__ssputs_r+0xa8>
 80050b2:	9a01      	ldr	r2, [sp, #4]
 80050b4:	6921      	ldr	r1, [r4, #16]
 80050b6:	f000 fae2 	bl	800567e <memcpy>
 80050ba:	89a2      	ldrh	r2, [r4, #12]
 80050bc:	4b18      	ldr	r3, [pc, #96]	@ (8005120 <__ssputs_r+0xbc>)
 80050be:	401a      	ands	r2, r3
 80050c0:	2380      	movs	r3, #128	@ 0x80
 80050c2:	4313      	orrs	r3, r2
 80050c4:	81a3      	strh	r3, [r4, #12]
 80050c6:	9b01      	ldr	r3, [sp, #4]
 80050c8:	6126      	str	r6, [r4, #16]
 80050ca:	18f6      	adds	r6, r6, r3
 80050cc:	6026      	str	r6, [r4, #0]
 80050ce:	003e      	movs	r6, r7
 80050d0:	6165      	str	r5, [r4, #20]
 80050d2:	1aed      	subs	r5, r5, r3
 80050d4:	60a5      	str	r5, [r4, #8]
 80050d6:	42be      	cmp	r6, r7
 80050d8:	d900      	bls.n	80050dc <__ssputs_r+0x78>
 80050da:	003e      	movs	r6, r7
 80050dc:	0032      	movs	r2, r6
 80050de:	9903      	ldr	r1, [sp, #12]
 80050e0:	6820      	ldr	r0, [r4, #0]
 80050e2:	f000 fa9b 	bl	800561c <memmove>
 80050e6:	2000      	movs	r0, #0
 80050e8:	68a3      	ldr	r3, [r4, #8]
 80050ea:	1b9b      	subs	r3, r3, r6
 80050ec:	60a3      	str	r3, [r4, #8]
 80050ee:	6823      	ldr	r3, [r4, #0]
 80050f0:	199b      	adds	r3, r3, r6
 80050f2:	6023      	str	r3, [r4, #0]
 80050f4:	b005      	add	sp, #20
 80050f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050f8:	002a      	movs	r2, r5
 80050fa:	9802      	ldr	r0, [sp, #8]
 80050fc:	f000 fac8 	bl	8005690 <_realloc_r>
 8005100:	1e06      	subs	r6, r0, #0
 8005102:	d1e0      	bne.n	80050c6 <__ssputs_r+0x62>
 8005104:	6921      	ldr	r1, [r4, #16]
 8005106:	9802      	ldr	r0, [sp, #8]
 8005108:	f7ff feb0 	bl	8004e6c <_free_r>
 800510c:	230c      	movs	r3, #12
 800510e:	2001      	movs	r0, #1
 8005110:	9a02      	ldr	r2, [sp, #8]
 8005112:	4240      	negs	r0, r0
 8005114:	6013      	str	r3, [r2, #0]
 8005116:	89a2      	ldrh	r2, [r4, #12]
 8005118:	3334      	adds	r3, #52	@ 0x34
 800511a:	4313      	orrs	r3, r2
 800511c:	81a3      	strh	r3, [r4, #12]
 800511e:	e7e9      	b.n	80050f4 <__ssputs_r+0x90>
 8005120:	fffffb7f 	.word	0xfffffb7f

08005124 <_svfiprintf_r>:
 8005124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005126:	b0a1      	sub	sp, #132	@ 0x84
 8005128:	9003      	str	r0, [sp, #12]
 800512a:	001d      	movs	r5, r3
 800512c:	898b      	ldrh	r3, [r1, #12]
 800512e:	000f      	movs	r7, r1
 8005130:	0016      	movs	r6, r2
 8005132:	061b      	lsls	r3, r3, #24
 8005134:	d511      	bpl.n	800515a <_svfiprintf_r+0x36>
 8005136:	690b      	ldr	r3, [r1, #16]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10e      	bne.n	800515a <_svfiprintf_r+0x36>
 800513c:	2140      	movs	r1, #64	@ 0x40
 800513e:	f7ff ff01 	bl	8004f44 <_malloc_r>
 8005142:	6038      	str	r0, [r7, #0]
 8005144:	6138      	str	r0, [r7, #16]
 8005146:	2800      	cmp	r0, #0
 8005148:	d105      	bne.n	8005156 <_svfiprintf_r+0x32>
 800514a:	230c      	movs	r3, #12
 800514c:	9a03      	ldr	r2, [sp, #12]
 800514e:	6013      	str	r3, [r2, #0]
 8005150:	2001      	movs	r0, #1
 8005152:	4240      	negs	r0, r0
 8005154:	e0cf      	b.n	80052f6 <_svfiprintf_r+0x1d2>
 8005156:	2340      	movs	r3, #64	@ 0x40
 8005158:	617b      	str	r3, [r7, #20]
 800515a:	2300      	movs	r3, #0
 800515c:	ac08      	add	r4, sp, #32
 800515e:	6163      	str	r3, [r4, #20]
 8005160:	3320      	adds	r3, #32
 8005162:	7663      	strb	r3, [r4, #25]
 8005164:	3310      	adds	r3, #16
 8005166:	76a3      	strb	r3, [r4, #26]
 8005168:	9507      	str	r5, [sp, #28]
 800516a:	0035      	movs	r5, r6
 800516c:	782b      	ldrb	r3, [r5, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <_svfiprintf_r+0x52>
 8005172:	2b25      	cmp	r3, #37	@ 0x25
 8005174:	d148      	bne.n	8005208 <_svfiprintf_r+0xe4>
 8005176:	1bab      	subs	r3, r5, r6
 8005178:	9305      	str	r3, [sp, #20]
 800517a:	42b5      	cmp	r5, r6
 800517c:	d00b      	beq.n	8005196 <_svfiprintf_r+0x72>
 800517e:	0032      	movs	r2, r6
 8005180:	0039      	movs	r1, r7
 8005182:	9803      	ldr	r0, [sp, #12]
 8005184:	f7ff ff6e 	bl	8005064 <__ssputs_r>
 8005188:	3001      	adds	r0, #1
 800518a:	d100      	bne.n	800518e <_svfiprintf_r+0x6a>
 800518c:	e0ae      	b.n	80052ec <_svfiprintf_r+0x1c8>
 800518e:	6963      	ldr	r3, [r4, #20]
 8005190:	9a05      	ldr	r2, [sp, #20]
 8005192:	189b      	adds	r3, r3, r2
 8005194:	6163      	str	r3, [r4, #20]
 8005196:	782b      	ldrb	r3, [r5, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d100      	bne.n	800519e <_svfiprintf_r+0x7a>
 800519c:	e0a6      	b.n	80052ec <_svfiprintf_r+0x1c8>
 800519e:	2201      	movs	r2, #1
 80051a0:	2300      	movs	r3, #0
 80051a2:	4252      	negs	r2, r2
 80051a4:	6062      	str	r2, [r4, #4]
 80051a6:	a904      	add	r1, sp, #16
 80051a8:	3254      	adds	r2, #84	@ 0x54
 80051aa:	1852      	adds	r2, r2, r1
 80051ac:	1c6e      	adds	r6, r5, #1
 80051ae:	6023      	str	r3, [r4, #0]
 80051b0:	60e3      	str	r3, [r4, #12]
 80051b2:	60a3      	str	r3, [r4, #8]
 80051b4:	7013      	strb	r3, [r2, #0]
 80051b6:	65a3      	str	r3, [r4, #88]	@ 0x58
 80051b8:	4b54      	ldr	r3, [pc, #336]	@ (800530c <_svfiprintf_r+0x1e8>)
 80051ba:	2205      	movs	r2, #5
 80051bc:	0018      	movs	r0, r3
 80051be:	7831      	ldrb	r1, [r6, #0]
 80051c0:	9305      	str	r3, [sp, #20]
 80051c2:	f000 fa51 	bl	8005668 <memchr>
 80051c6:	1c75      	adds	r5, r6, #1
 80051c8:	2800      	cmp	r0, #0
 80051ca:	d11f      	bne.n	800520c <_svfiprintf_r+0xe8>
 80051cc:	6822      	ldr	r2, [r4, #0]
 80051ce:	06d3      	lsls	r3, r2, #27
 80051d0:	d504      	bpl.n	80051dc <_svfiprintf_r+0xb8>
 80051d2:	2353      	movs	r3, #83	@ 0x53
 80051d4:	a904      	add	r1, sp, #16
 80051d6:	185b      	adds	r3, r3, r1
 80051d8:	2120      	movs	r1, #32
 80051da:	7019      	strb	r1, [r3, #0]
 80051dc:	0713      	lsls	r3, r2, #28
 80051de:	d504      	bpl.n	80051ea <_svfiprintf_r+0xc6>
 80051e0:	2353      	movs	r3, #83	@ 0x53
 80051e2:	a904      	add	r1, sp, #16
 80051e4:	185b      	adds	r3, r3, r1
 80051e6:	212b      	movs	r1, #43	@ 0x2b
 80051e8:	7019      	strb	r1, [r3, #0]
 80051ea:	7833      	ldrb	r3, [r6, #0]
 80051ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80051ee:	d016      	beq.n	800521e <_svfiprintf_r+0xfa>
 80051f0:	0035      	movs	r5, r6
 80051f2:	2100      	movs	r1, #0
 80051f4:	200a      	movs	r0, #10
 80051f6:	68e3      	ldr	r3, [r4, #12]
 80051f8:	782a      	ldrb	r2, [r5, #0]
 80051fa:	1c6e      	adds	r6, r5, #1
 80051fc:	3a30      	subs	r2, #48	@ 0x30
 80051fe:	2a09      	cmp	r2, #9
 8005200:	d950      	bls.n	80052a4 <_svfiprintf_r+0x180>
 8005202:	2900      	cmp	r1, #0
 8005204:	d111      	bne.n	800522a <_svfiprintf_r+0x106>
 8005206:	e017      	b.n	8005238 <_svfiprintf_r+0x114>
 8005208:	3501      	adds	r5, #1
 800520a:	e7af      	b.n	800516c <_svfiprintf_r+0x48>
 800520c:	9b05      	ldr	r3, [sp, #20]
 800520e:	6822      	ldr	r2, [r4, #0]
 8005210:	1ac0      	subs	r0, r0, r3
 8005212:	2301      	movs	r3, #1
 8005214:	4083      	lsls	r3, r0
 8005216:	4313      	orrs	r3, r2
 8005218:	002e      	movs	r6, r5
 800521a:	6023      	str	r3, [r4, #0]
 800521c:	e7cc      	b.n	80051b8 <_svfiprintf_r+0x94>
 800521e:	9b07      	ldr	r3, [sp, #28]
 8005220:	1d19      	adds	r1, r3, #4
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	9107      	str	r1, [sp, #28]
 8005226:	2b00      	cmp	r3, #0
 8005228:	db01      	blt.n	800522e <_svfiprintf_r+0x10a>
 800522a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800522c:	e004      	b.n	8005238 <_svfiprintf_r+0x114>
 800522e:	425b      	negs	r3, r3
 8005230:	60e3      	str	r3, [r4, #12]
 8005232:	2302      	movs	r3, #2
 8005234:	4313      	orrs	r3, r2
 8005236:	6023      	str	r3, [r4, #0]
 8005238:	782b      	ldrb	r3, [r5, #0]
 800523a:	2b2e      	cmp	r3, #46	@ 0x2e
 800523c:	d10c      	bne.n	8005258 <_svfiprintf_r+0x134>
 800523e:	786b      	ldrb	r3, [r5, #1]
 8005240:	2b2a      	cmp	r3, #42	@ 0x2a
 8005242:	d134      	bne.n	80052ae <_svfiprintf_r+0x18a>
 8005244:	9b07      	ldr	r3, [sp, #28]
 8005246:	3502      	adds	r5, #2
 8005248:	1d1a      	adds	r2, r3, #4
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	9207      	str	r2, [sp, #28]
 800524e:	2b00      	cmp	r3, #0
 8005250:	da01      	bge.n	8005256 <_svfiprintf_r+0x132>
 8005252:	2301      	movs	r3, #1
 8005254:	425b      	negs	r3, r3
 8005256:	9309      	str	r3, [sp, #36]	@ 0x24
 8005258:	4e2d      	ldr	r6, [pc, #180]	@ (8005310 <_svfiprintf_r+0x1ec>)
 800525a:	2203      	movs	r2, #3
 800525c:	0030      	movs	r0, r6
 800525e:	7829      	ldrb	r1, [r5, #0]
 8005260:	f000 fa02 	bl	8005668 <memchr>
 8005264:	2800      	cmp	r0, #0
 8005266:	d006      	beq.n	8005276 <_svfiprintf_r+0x152>
 8005268:	2340      	movs	r3, #64	@ 0x40
 800526a:	1b80      	subs	r0, r0, r6
 800526c:	4083      	lsls	r3, r0
 800526e:	6822      	ldr	r2, [r4, #0]
 8005270:	3501      	adds	r5, #1
 8005272:	4313      	orrs	r3, r2
 8005274:	6023      	str	r3, [r4, #0]
 8005276:	7829      	ldrb	r1, [r5, #0]
 8005278:	2206      	movs	r2, #6
 800527a:	4826      	ldr	r0, [pc, #152]	@ (8005314 <_svfiprintf_r+0x1f0>)
 800527c:	1c6e      	adds	r6, r5, #1
 800527e:	7621      	strb	r1, [r4, #24]
 8005280:	f000 f9f2 	bl	8005668 <memchr>
 8005284:	2800      	cmp	r0, #0
 8005286:	d038      	beq.n	80052fa <_svfiprintf_r+0x1d6>
 8005288:	4b23      	ldr	r3, [pc, #140]	@ (8005318 <_svfiprintf_r+0x1f4>)
 800528a:	2b00      	cmp	r3, #0
 800528c:	d122      	bne.n	80052d4 <_svfiprintf_r+0x1b0>
 800528e:	2207      	movs	r2, #7
 8005290:	9b07      	ldr	r3, [sp, #28]
 8005292:	3307      	adds	r3, #7
 8005294:	4393      	bics	r3, r2
 8005296:	3308      	adds	r3, #8
 8005298:	9307      	str	r3, [sp, #28]
 800529a:	6963      	ldr	r3, [r4, #20]
 800529c:	9a04      	ldr	r2, [sp, #16]
 800529e:	189b      	adds	r3, r3, r2
 80052a0:	6163      	str	r3, [r4, #20]
 80052a2:	e762      	b.n	800516a <_svfiprintf_r+0x46>
 80052a4:	4343      	muls	r3, r0
 80052a6:	0035      	movs	r5, r6
 80052a8:	2101      	movs	r1, #1
 80052aa:	189b      	adds	r3, r3, r2
 80052ac:	e7a4      	b.n	80051f8 <_svfiprintf_r+0xd4>
 80052ae:	2300      	movs	r3, #0
 80052b0:	200a      	movs	r0, #10
 80052b2:	0019      	movs	r1, r3
 80052b4:	3501      	adds	r5, #1
 80052b6:	6063      	str	r3, [r4, #4]
 80052b8:	782a      	ldrb	r2, [r5, #0]
 80052ba:	1c6e      	adds	r6, r5, #1
 80052bc:	3a30      	subs	r2, #48	@ 0x30
 80052be:	2a09      	cmp	r2, #9
 80052c0:	d903      	bls.n	80052ca <_svfiprintf_r+0x1a6>
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d0c8      	beq.n	8005258 <_svfiprintf_r+0x134>
 80052c6:	9109      	str	r1, [sp, #36]	@ 0x24
 80052c8:	e7c6      	b.n	8005258 <_svfiprintf_r+0x134>
 80052ca:	4341      	muls	r1, r0
 80052cc:	0035      	movs	r5, r6
 80052ce:	2301      	movs	r3, #1
 80052d0:	1889      	adds	r1, r1, r2
 80052d2:	e7f1      	b.n	80052b8 <_svfiprintf_r+0x194>
 80052d4:	aa07      	add	r2, sp, #28
 80052d6:	9200      	str	r2, [sp, #0]
 80052d8:	0021      	movs	r1, r4
 80052da:	003a      	movs	r2, r7
 80052dc:	4b0f      	ldr	r3, [pc, #60]	@ (800531c <_svfiprintf_r+0x1f8>)
 80052de:	9803      	ldr	r0, [sp, #12]
 80052e0:	e000      	b.n	80052e4 <_svfiprintf_r+0x1c0>
 80052e2:	bf00      	nop
 80052e4:	9004      	str	r0, [sp, #16]
 80052e6:	9b04      	ldr	r3, [sp, #16]
 80052e8:	3301      	adds	r3, #1
 80052ea:	d1d6      	bne.n	800529a <_svfiprintf_r+0x176>
 80052ec:	89bb      	ldrh	r3, [r7, #12]
 80052ee:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80052f0:	065b      	lsls	r3, r3, #25
 80052f2:	d500      	bpl.n	80052f6 <_svfiprintf_r+0x1d2>
 80052f4:	e72c      	b.n	8005150 <_svfiprintf_r+0x2c>
 80052f6:	b021      	add	sp, #132	@ 0x84
 80052f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052fa:	aa07      	add	r2, sp, #28
 80052fc:	9200      	str	r2, [sp, #0]
 80052fe:	0021      	movs	r1, r4
 8005300:	003a      	movs	r2, r7
 8005302:	4b06      	ldr	r3, [pc, #24]	@ (800531c <_svfiprintf_r+0x1f8>)
 8005304:	9803      	ldr	r0, [sp, #12]
 8005306:	f000 f87b 	bl	8005400 <_printf_i>
 800530a:	e7eb      	b.n	80052e4 <_svfiprintf_r+0x1c0>
 800530c:	080057a8 	.word	0x080057a8
 8005310:	080057ae 	.word	0x080057ae
 8005314:	080057b2 	.word	0x080057b2
 8005318:	00000000 	.word	0x00000000
 800531c:	08005065 	.word	0x08005065

08005320 <_printf_common>:
 8005320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005322:	0016      	movs	r6, r2
 8005324:	9301      	str	r3, [sp, #4]
 8005326:	688a      	ldr	r2, [r1, #8]
 8005328:	690b      	ldr	r3, [r1, #16]
 800532a:	000c      	movs	r4, r1
 800532c:	9000      	str	r0, [sp, #0]
 800532e:	4293      	cmp	r3, r2
 8005330:	da00      	bge.n	8005334 <_printf_common+0x14>
 8005332:	0013      	movs	r3, r2
 8005334:	0022      	movs	r2, r4
 8005336:	6033      	str	r3, [r6, #0]
 8005338:	3243      	adds	r2, #67	@ 0x43
 800533a:	7812      	ldrb	r2, [r2, #0]
 800533c:	2a00      	cmp	r2, #0
 800533e:	d001      	beq.n	8005344 <_printf_common+0x24>
 8005340:	3301      	adds	r3, #1
 8005342:	6033      	str	r3, [r6, #0]
 8005344:	6823      	ldr	r3, [r4, #0]
 8005346:	069b      	lsls	r3, r3, #26
 8005348:	d502      	bpl.n	8005350 <_printf_common+0x30>
 800534a:	6833      	ldr	r3, [r6, #0]
 800534c:	3302      	adds	r3, #2
 800534e:	6033      	str	r3, [r6, #0]
 8005350:	6822      	ldr	r2, [r4, #0]
 8005352:	2306      	movs	r3, #6
 8005354:	0015      	movs	r5, r2
 8005356:	401d      	ands	r5, r3
 8005358:	421a      	tst	r2, r3
 800535a:	d027      	beq.n	80053ac <_printf_common+0x8c>
 800535c:	0023      	movs	r3, r4
 800535e:	3343      	adds	r3, #67	@ 0x43
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	1e5a      	subs	r2, r3, #1
 8005364:	4193      	sbcs	r3, r2
 8005366:	6822      	ldr	r2, [r4, #0]
 8005368:	0692      	lsls	r2, r2, #26
 800536a:	d430      	bmi.n	80053ce <_printf_common+0xae>
 800536c:	0022      	movs	r2, r4
 800536e:	9901      	ldr	r1, [sp, #4]
 8005370:	9800      	ldr	r0, [sp, #0]
 8005372:	9d08      	ldr	r5, [sp, #32]
 8005374:	3243      	adds	r2, #67	@ 0x43
 8005376:	47a8      	blx	r5
 8005378:	3001      	adds	r0, #1
 800537a:	d025      	beq.n	80053c8 <_printf_common+0xa8>
 800537c:	2206      	movs	r2, #6
 800537e:	6823      	ldr	r3, [r4, #0]
 8005380:	2500      	movs	r5, #0
 8005382:	4013      	ands	r3, r2
 8005384:	2b04      	cmp	r3, #4
 8005386:	d105      	bne.n	8005394 <_printf_common+0x74>
 8005388:	6833      	ldr	r3, [r6, #0]
 800538a:	68e5      	ldr	r5, [r4, #12]
 800538c:	1aed      	subs	r5, r5, r3
 800538e:	43eb      	mvns	r3, r5
 8005390:	17db      	asrs	r3, r3, #31
 8005392:	401d      	ands	r5, r3
 8005394:	68a3      	ldr	r3, [r4, #8]
 8005396:	6922      	ldr	r2, [r4, #16]
 8005398:	4293      	cmp	r3, r2
 800539a:	dd01      	ble.n	80053a0 <_printf_common+0x80>
 800539c:	1a9b      	subs	r3, r3, r2
 800539e:	18ed      	adds	r5, r5, r3
 80053a0:	2600      	movs	r6, #0
 80053a2:	42b5      	cmp	r5, r6
 80053a4:	d120      	bne.n	80053e8 <_printf_common+0xc8>
 80053a6:	2000      	movs	r0, #0
 80053a8:	e010      	b.n	80053cc <_printf_common+0xac>
 80053aa:	3501      	adds	r5, #1
 80053ac:	68e3      	ldr	r3, [r4, #12]
 80053ae:	6832      	ldr	r2, [r6, #0]
 80053b0:	1a9b      	subs	r3, r3, r2
 80053b2:	42ab      	cmp	r3, r5
 80053b4:	ddd2      	ble.n	800535c <_printf_common+0x3c>
 80053b6:	0022      	movs	r2, r4
 80053b8:	2301      	movs	r3, #1
 80053ba:	9901      	ldr	r1, [sp, #4]
 80053bc:	9800      	ldr	r0, [sp, #0]
 80053be:	9f08      	ldr	r7, [sp, #32]
 80053c0:	3219      	adds	r2, #25
 80053c2:	47b8      	blx	r7
 80053c4:	3001      	adds	r0, #1
 80053c6:	d1f0      	bne.n	80053aa <_printf_common+0x8a>
 80053c8:	2001      	movs	r0, #1
 80053ca:	4240      	negs	r0, r0
 80053cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80053ce:	2030      	movs	r0, #48	@ 0x30
 80053d0:	18e1      	adds	r1, r4, r3
 80053d2:	3143      	adds	r1, #67	@ 0x43
 80053d4:	7008      	strb	r0, [r1, #0]
 80053d6:	0021      	movs	r1, r4
 80053d8:	1c5a      	adds	r2, r3, #1
 80053da:	3145      	adds	r1, #69	@ 0x45
 80053dc:	7809      	ldrb	r1, [r1, #0]
 80053de:	18a2      	adds	r2, r4, r2
 80053e0:	3243      	adds	r2, #67	@ 0x43
 80053e2:	3302      	adds	r3, #2
 80053e4:	7011      	strb	r1, [r2, #0]
 80053e6:	e7c1      	b.n	800536c <_printf_common+0x4c>
 80053e8:	0022      	movs	r2, r4
 80053ea:	2301      	movs	r3, #1
 80053ec:	9901      	ldr	r1, [sp, #4]
 80053ee:	9800      	ldr	r0, [sp, #0]
 80053f0:	9f08      	ldr	r7, [sp, #32]
 80053f2:	321a      	adds	r2, #26
 80053f4:	47b8      	blx	r7
 80053f6:	3001      	adds	r0, #1
 80053f8:	d0e6      	beq.n	80053c8 <_printf_common+0xa8>
 80053fa:	3601      	adds	r6, #1
 80053fc:	e7d1      	b.n	80053a2 <_printf_common+0x82>
	...

08005400 <_printf_i>:
 8005400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005402:	b08b      	sub	sp, #44	@ 0x2c
 8005404:	9206      	str	r2, [sp, #24]
 8005406:	000a      	movs	r2, r1
 8005408:	3243      	adds	r2, #67	@ 0x43
 800540a:	9307      	str	r3, [sp, #28]
 800540c:	9005      	str	r0, [sp, #20]
 800540e:	9203      	str	r2, [sp, #12]
 8005410:	7e0a      	ldrb	r2, [r1, #24]
 8005412:	000c      	movs	r4, r1
 8005414:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005416:	2a78      	cmp	r2, #120	@ 0x78
 8005418:	d809      	bhi.n	800542e <_printf_i+0x2e>
 800541a:	2a62      	cmp	r2, #98	@ 0x62
 800541c:	d80b      	bhi.n	8005436 <_printf_i+0x36>
 800541e:	2a00      	cmp	r2, #0
 8005420:	d100      	bne.n	8005424 <_printf_i+0x24>
 8005422:	e0bc      	b.n	800559e <_printf_i+0x19e>
 8005424:	497b      	ldr	r1, [pc, #492]	@ (8005614 <_printf_i+0x214>)
 8005426:	9104      	str	r1, [sp, #16]
 8005428:	2a58      	cmp	r2, #88	@ 0x58
 800542a:	d100      	bne.n	800542e <_printf_i+0x2e>
 800542c:	e090      	b.n	8005550 <_printf_i+0x150>
 800542e:	0025      	movs	r5, r4
 8005430:	3542      	adds	r5, #66	@ 0x42
 8005432:	702a      	strb	r2, [r5, #0]
 8005434:	e022      	b.n	800547c <_printf_i+0x7c>
 8005436:	0010      	movs	r0, r2
 8005438:	3863      	subs	r0, #99	@ 0x63
 800543a:	2815      	cmp	r0, #21
 800543c:	d8f7      	bhi.n	800542e <_printf_i+0x2e>
 800543e:	f7fa fe63 	bl	8000108 <__gnu_thumb1_case_shi>
 8005442:	0016      	.short	0x0016
 8005444:	fff6001f 	.word	0xfff6001f
 8005448:	fff6fff6 	.word	0xfff6fff6
 800544c:	001ffff6 	.word	0x001ffff6
 8005450:	fff6fff6 	.word	0xfff6fff6
 8005454:	fff6fff6 	.word	0xfff6fff6
 8005458:	003600a1 	.word	0x003600a1
 800545c:	fff60080 	.word	0xfff60080
 8005460:	00b2fff6 	.word	0x00b2fff6
 8005464:	0036fff6 	.word	0x0036fff6
 8005468:	fff6fff6 	.word	0xfff6fff6
 800546c:	0084      	.short	0x0084
 800546e:	0025      	movs	r5, r4
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	3542      	adds	r5, #66	@ 0x42
 8005474:	1d11      	adds	r1, r2, #4
 8005476:	6019      	str	r1, [r3, #0]
 8005478:	6813      	ldr	r3, [r2, #0]
 800547a:	702b      	strb	r3, [r5, #0]
 800547c:	2301      	movs	r3, #1
 800547e:	e0a0      	b.n	80055c2 <_printf_i+0x1c2>
 8005480:	6818      	ldr	r0, [r3, #0]
 8005482:	6809      	ldr	r1, [r1, #0]
 8005484:	1d02      	adds	r2, r0, #4
 8005486:	060d      	lsls	r5, r1, #24
 8005488:	d50b      	bpl.n	80054a2 <_printf_i+0xa2>
 800548a:	6806      	ldr	r6, [r0, #0]
 800548c:	601a      	str	r2, [r3, #0]
 800548e:	2e00      	cmp	r6, #0
 8005490:	da03      	bge.n	800549a <_printf_i+0x9a>
 8005492:	232d      	movs	r3, #45	@ 0x2d
 8005494:	9a03      	ldr	r2, [sp, #12]
 8005496:	4276      	negs	r6, r6
 8005498:	7013      	strb	r3, [r2, #0]
 800549a:	4b5e      	ldr	r3, [pc, #376]	@ (8005614 <_printf_i+0x214>)
 800549c:	270a      	movs	r7, #10
 800549e:	9304      	str	r3, [sp, #16]
 80054a0:	e018      	b.n	80054d4 <_printf_i+0xd4>
 80054a2:	6806      	ldr	r6, [r0, #0]
 80054a4:	601a      	str	r2, [r3, #0]
 80054a6:	0649      	lsls	r1, r1, #25
 80054a8:	d5f1      	bpl.n	800548e <_printf_i+0x8e>
 80054aa:	b236      	sxth	r6, r6
 80054ac:	e7ef      	b.n	800548e <_printf_i+0x8e>
 80054ae:	6808      	ldr	r0, [r1, #0]
 80054b0:	6819      	ldr	r1, [r3, #0]
 80054b2:	c940      	ldmia	r1!, {r6}
 80054b4:	0605      	lsls	r5, r0, #24
 80054b6:	d402      	bmi.n	80054be <_printf_i+0xbe>
 80054b8:	0640      	lsls	r0, r0, #25
 80054ba:	d500      	bpl.n	80054be <_printf_i+0xbe>
 80054bc:	b2b6      	uxth	r6, r6
 80054be:	6019      	str	r1, [r3, #0]
 80054c0:	4b54      	ldr	r3, [pc, #336]	@ (8005614 <_printf_i+0x214>)
 80054c2:	270a      	movs	r7, #10
 80054c4:	9304      	str	r3, [sp, #16]
 80054c6:	2a6f      	cmp	r2, #111	@ 0x6f
 80054c8:	d100      	bne.n	80054cc <_printf_i+0xcc>
 80054ca:	3f02      	subs	r7, #2
 80054cc:	0023      	movs	r3, r4
 80054ce:	2200      	movs	r2, #0
 80054d0:	3343      	adds	r3, #67	@ 0x43
 80054d2:	701a      	strb	r2, [r3, #0]
 80054d4:	6863      	ldr	r3, [r4, #4]
 80054d6:	60a3      	str	r3, [r4, #8]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	db03      	blt.n	80054e4 <_printf_i+0xe4>
 80054dc:	2104      	movs	r1, #4
 80054de:	6822      	ldr	r2, [r4, #0]
 80054e0:	438a      	bics	r2, r1
 80054e2:	6022      	str	r2, [r4, #0]
 80054e4:	2e00      	cmp	r6, #0
 80054e6:	d102      	bne.n	80054ee <_printf_i+0xee>
 80054e8:	9d03      	ldr	r5, [sp, #12]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00c      	beq.n	8005508 <_printf_i+0x108>
 80054ee:	9d03      	ldr	r5, [sp, #12]
 80054f0:	0030      	movs	r0, r6
 80054f2:	0039      	movs	r1, r7
 80054f4:	f7fa fe98 	bl	8000228 <__aeabi_uidivmod>
 80054f8:	9b04      	ldr	r3, [sp, #16]
 80054fa:	3d01      	subs	r5, #1
 80054fc:	5c5b      	ldrb	r3, [r3, r1]
 80054fe:	702b      	strb	r3, [r5, #0]
 8005500:	0033      	movs	r3, r6
 8005502:	0006      	movs	r6, r0
 8005504:	429f      	cmp	r7, r3
 8005506:	d9f3      	bls.n	80054f0 <_printf_i+0xf0>
 8005508:	2f08      	cmp	r7, #8
 800550a:	d109      	bne.n	8005520 <_printf_i+0x120>
 800550c:	6823      	ldr	r3, [r4, #0]
 800550e:	07db      	lsls	r3, r3, #31
 8005510:	d506      	bpl.n	8005520 <_printf_i+0x120>
 8005512:	6862      	ldr	r2, [r4, #4]
 8005514:	6923      	ldr	r3, [r4, #16]
 8005516:	429a      	cmp	r2, r3
 8005518:	dc02      	bgt.n	8005520 <_printf_i+0x120>
 800551a:	2330      	movs	r3, #48	@ 0x30
 800551c:	3d01      	subs	r5, #1
 800551e:	702b      	strb	r3, [r5, #0]
 8005520:	9b03      	ldr	r3, [sp, #12]
 8005522:	1b5b      	subs	r3, r3, r5
 8005524:	6123      	str	r3, [r4, #16]
 8005526:	9b07      	ldr	r3, [sp, #28]
 8005528:	0021      	movs	r1, r4
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	9805      	ldr	r0, [sp, #20]
 800552e:	9b06      	ldr	r3, [sp, #24]
 8005530:	aa09      	add	r2, sp, #36	@ 0x24
 8005532:	f7ff fef5 	bl	8005320 <_printf_common>
 8005536:	3001      	adds	r0, #1
 8005538:	d148      	bne.n	80055cc <_printf_i+0x1cc>
 800553a:	2001      	movs	r0, #1
 800553c:	4240      	negs	r0, r0
 800553e:	b00b      	add	sp, #44	@ 0x2c
 8005540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005542:	2220      	movs	r2, #32
 8005544:	6809      	ldr	r1, [r1, #0]
 8005546:	430a      	orrs	r2, r1
 8005548:	6022      	str	r2, [r4, #0]
 800554a:	2278      	movs	r2, #120	@ 0x78
 800554c:	4932      	ldr	r1, [pc, #200]	@ (8005618 <_printf_i+0x218>)
 800554e:	9104      	str	r1, [sp, #16]
 8005550:	0021      	movs	r1, r4
 8005552:	3145      	adds	r1, #69	@ 0x45
 8005554:	700a      	strb	r2, [r1, #0]
 8005556:	6819      	ldr	r1, [r3, #0]
 8005558:	6822      	ldr	r2, [r4, #0]
 800555a:	c940      	ldmia	r1!, {r6}
 800555c:	0610      	lsls	r0, r2, #24
 800555e:	d402      	bmi.n	8005566 <_printf_i+0x166>
 8005560:	0650      	lsls	r0, r2, #25
 8005562:	d500      	bpl.n	8005566 <_printf_i+0x166>
 8005564:	b2b6      	uxth	r6, r6
 8005566:	6019      	str	r1, [r3, #0]
 8005568:	07d3      	lsls	r3, r2, #31
 800556a:	d502      	bpl.n	8005572 <_printf_i+0x172>
 800556c:	2320      	movs	r3, #32
 800556e:	4313      	orrs	r3, r2
 8005570:	6023      	str	r3, [r4, #0]
 8005572:	2e00      	cmp	r6, #0
 8005574:	d001      	beq.n	800557a <_printf_i+0x17a>
 8005576:	2710      	movs	r7, #16
 8005578:	e7a8      	b.n	80054cc <_printf_i+0xcc>
 800557a:	2220      	movs	r2, #32
 800557c:	6823      	ldr	r3, [r4, #0]
 800557e:	4393      	bics	r3, r2
 8005580:	6023      	str	r3, [r4, #0]
 8005582:	e7f8      	b.n	8005576 <_printf_i+0x176>
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	680d      	ldr	r5, [r1, #0]
 8005588:	1d10      	adds	r0, r2, #4
 800558a:	6949      	ldr	r1, [r1, #20]
 800558c:	6018      	str	r0, [r3, #0]
 800558e:	6813      	ldr	r3, [r2, #0]
 8005590:	062e      	lsls	r6, r5, #24
 8005592:	d501      	bpl.n	8005598 <_printf_i+0x198>
 8005594:	6019      	str	r1, [r3, #0]
 8005596:	e002      	b.n	800559e <_printf_i+0x19e>
 8005598:	066d      	lsls	r5, r5, #25
 800559a:	d5fb      	bpl.n	8005594 <_printf_i+0x194>
 800559c:	8019      	strh	r1, [r3, #0]
 800559e:	2300      	movs	r3, #0
 80055a0:	9d03      	ldr	r5, [sp, #12]
 80055a2:	6123      	str	r3, [r4, #16]
 80055a4:	e7bf      	b.n	8005526 <_printf_i+0x126>
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	1d11      	adds	r1, r2, #4
 80055aa:	6019      	str	r1, [r3, #0]
 80055ac:	6815      	ldr	r5, [r2, #0]
 80055ae:	2100      	movs	r1, #0
 80055b0:	0028      	movs	r0, r5
 80055b2:	6862      	ldr	r2, [r4, #4]
 80055b4:	f000 f858 	bl	8005668 <memchr>
 80055b8:	2800      	cmp	r0, #0
 80055ba:	d001      	beq.n	80055c0 <_printf_i+0x1c0>
 80055bc:	1b40      	subs	r0, r0, r5
 80055be:	6060      	str	r0, [r4, #4]
 80055c0:	6863      	ldr	r3, [r4, #4]
 80055c2:	6123      	str	r3, [r4, #16]
 80055c4:	2300      	movs	r3, #0
 80055c6:	9a03      	ldr	r2, [sp, #12]
 80055c8:	7013      	strb	r3, [r2, #0]
 80055ca:	e7ac      	b.n	8005526 <_printf_i+0x126>
 80055cc:	002a      	movs	r2, r5
 80055ce:	6923      	ldr	r3, [r4, #16]
 80055d0:	9906      	ldr	r1, [sp, #24]
 80055d2:	9805      	ldr	r0, [sp, #20]
 80055d4:	9d07      	ldr	r5, [sp, #28]
 80055d6:	47a8      	blx	r5
 80055d8:	3001      	adds	r0, #1
 80055da:	d0ae      	beq.n	800553a <_printf_i+0x13a>
 80055dc:	6823      	ldr	r3, [r4, #0]
 80055de:	079b      	lsls	r3, r3, #30
 80055e0:	d415      	bmi.n	800560e <_printf_i+0x20e>
 80055e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055e4:	68e0      	ldr	r0, [r4, #12]
 80055e6:	4298      	cmp	r0, r3
 80055e8:	daa9      	bge.n	800553e <_printf_i+0x13e>
 80055ea:	0018      	movs	r0, r3
 80055ec:	e7a7      	b.n	800553e <_printf_i+0x13e>
 80055ee:	0022      	movs	r2, r4
 80055f0:	2301      	movs	r3, #1
 80055f2:	9906      	ldr	r1, [sp, #24]
 80055f4:	9805      	ldr	r0, [sp, #20]
 80055f6:	9e07      	ldr	r6, [sp, #28]
 80055f8:	3219      	adds	r2, #25
 80055fa:	47b0      	blx	r6
 80055fc:	3001      	adds	r0, #1
 80055fe:	d09c      	beq.n	800553a <_printf_i+0x13a>
 8005600:	3501      	adds	r5, #1
 8005602:	68e3      	ldr	r3, [r4, #12]
 8005604:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005606:	1a9b      	subs	r3, r3, r2
 8005608:	42ab      	cmp	r3, r5
 800560a:	dcf0      	bgt.n	80055ee <_printf_i+0x1ee>
 800560c:	e7e9      	b.n	80055e2 <_printf_i+0x1e2>
 800560e:	2500      	movs	r5, #0
 8005610:	e7f7      	b.n	8005602 <_printf_i+0x202>
 8005612:	46c0      	nop			@ (mov r8, r8)
 8005614:	080057b9 	.word	0x080057b9
 8005618:	080057ca 	.word	0x080057ca

0800561c <memmove>:
 800561c:	b510      	push	{r4, lr}
 800561e:	4288      	cmp	r0, r1
 8005620:	d806      	bhi.n	8005630 <memmove+0x14>
 8005622:	2300      	movs	r3, #0
 8005624:	429a      	cmp	r2, r3
 8005626:	d008      	beq.n	800563a <memmove+0x1e>
 8005628:	5ccc      	ldrb	r4, [r1, r3]
 800562a:	54c4      	strb	r4, [r0, r3]
 800562c:	3301      	adds	r3, #1
 800562e:	e7f9      	b.n	8005624 <memmove+0x8>
 8005630:	188b      	adds	r3, r1, r2
 8005632:	4298      	cmp	r0, r3
 8005634:	d2f5      	bcs.n	8005622 <memmove+0x6>
 8005636:	3a01      	subs	r2, #1
 8005638:	d200      	bcs.n	800563c <memmove+0x20>
 800563a:	bd10      	pop	{r4, pc}
 800563c:	5c8b      	ldrb	r3, [r1, r2]
 800563e:	5483      	strb	r3, [r0, r2]
 8005640:	e7f9      	b.n	8005636 <memmove+0x1a>
	...

08005644 <_sbrk_r>:
 8005644:	2300      	movs	r3, #0
 8005646:	b570      	push	{r4, r5, r6, lr}
 8005648:	4d06      	ldr	r5, [pc, #24]	@ (8005664 <_sbrk_r+0x20>)
 800564a:	0004      	movs	r4, r0
 800564c:	0008      	movs	r0, r1
 800564e:	602b      	str	r3, [r5, #0]
 8005650:	f7fb fde0 	bl	8001214 <_sbrk>
 8005654:	1c43      	adds	r3, r0, #1
 8005656:	d103      	bne.n	8005660 <_sbrk_r+0x1c>
 8005658:	682b      	ldr	r3, [r5, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d000      	beq.n	8005660 <_sbrk_r+0x1c>
 800565e:	6023      	str	r3, [r4, #0]
 8005660:	bd70      	pop	{r4, r5, r6, pc}
 8005662:	46c0      	nop			@ (mov r8, r8)
 8005664:	20000428 	.word	0x20000428

08005668 <memchr>:
 8005668:	b2c9      	uxtb	r1, r1
 800566a:	1882      	adds	r2, r0, r2
 800566c:	4290      	cmp	r0, r2
 800566e:	d101      	bne.n	8005674 <memchr+0xc>
 8005670:	2000      	movs	r0, #0
 8005672:	4770      	bx	lr
 8005674:	7803      	ldrb	r3, [r0, #0]
 8005676:	428b      	cmp	r3, r1
 8005678:	d0fb      	beq.n	8005672 <memchr+0xa>
 800567a:	3001      	adds	r0, #1
 800567c:	e7f6      	b.n	800566c <memchr+0x4>

0800567e <memcpy>:
 800567e:	2300      	movs	r3, #0
 8005680:	b510      	push	{r4, lr}
 8005682:	429a      	cmp	r2, r3
 8005684:	d100      	bne.n	8005688 <memcpy+0xa>
 8005686:	bd10      	pop	{r4, pc}
 8005688:	5ccc      	ldrb	r4, [r1, r3]
 800568a:	54c4      	strb	r4, [r0, r3]
 800568c:	3301      	adds	r3, #1
 800568e:	e7f8      	b.n	8005682 <memcpy+0x4>

08005690 <_realloc_r>:
 8005690:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005692:	0006      	movs	r6, r0
 8005694:	000c      	movs	r4, r1
 8005696:	0015      	movs	r5, r2
 8005698:	2900      	cmp	r1, #0
 800569a:	d105      	bne.n	80056a8 <_realloc_r+0x18>
 800569c:	0011      	movs	r1, r2
 800569e:	f7ff fc51 	bl	8004f44 <_malloc_r>
 80056a2:	0004      	movs	r4, r0
 80056a4:	0020      	movs	r0, r4
 80056a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80056a8:	2a00      	cmp	r2, #0
 80056aa:	d103      	bne.n	80056b4 <_realloc_r+0x24>
 80056ac:	f7ff fbde 	bl	8004e6c <_free_r>
 80056b0:	2400      	movs	r4, #0
 80056b2:	e7f7      	b.n	80056a4 <_realloc_r+0x14>
 80056b4:	f000 f81b 	bl	80056ee <_malloc_usable_size_r>
 80056b8:	0007      	movs	r7, r0
 80056ba:	4285      	cmp	r5, r0
 80056bc:	d802      	bhi.n	80056c4 <_realloc_r+0x34>
 80056be:	0843      	lsrs	r3, r0, #1
 80056c0:	42ab      	cmp	r3, r5
 80056c2:	d3ef      	bcc.n	80056a4 <_realloc_r+0x14>
 80056c4:	0029      	movs	r1, r5
 80056c6:	0030      	movs	r0, r6
 80056c8:	f7ff fc3c 	bl	8004f44 <_malloc_r>
 80056cc:	9001      	str	r0, [sp, #4]
 80056ce:	2800      	cmp	r0, #0
 80056d0:	d0ee      	beq.n	80056b0 <_realloc_r+0x20>
 80056d2:	002a      	movs	r2, r5
 80056d4:	42bd      	cmp	r5, r7
 80056d6:	d900      	bls.n	80056da <_realloc_r+0x4a>
 80056d8:	003a      	movs	r2, r7
 80056da:	0021      	movs	r1, r4
 80056dc:	9801      	ldr	r0, [sp, #4]
 80056de:	f7ff ffce 	bl	800567e <memcpy>
 80056e2:	0021      	movs	r1, r4
 80056e4:	0030      	movs	r0, r6
 80056e6:	f7ff fbc1 	bl	8004e6c <_free_r>
 80056ea:	9c01      	ldr	r4, [sp, #4]
 80056ec:	e7da      	b.n	80056a4 <_realloc_r+0x14>

080056ee <_malloc_usable_size_r>:
 80056ee:	1f0b      	subs	r3, r1, #4
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	1f18      	subs	r0, r3, #4
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	da01      	bge.n	80056fc <_malloc_usable_size_r+0xe>
 80056f8:	580b      	ldr	r3, [r1, r0]
 80056fa:	18c0      	adds	r0, r0, r3
 80056fc:	4770      	bx	lr
	...

08005700 <_init>:
 8005700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005702:	46c0      	nop			@ (mov r8, r8)
 8005704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005706:	bc08      	pop	{r3}
 8005708:	469e      	mov	lr, r3
 800570a:	4770      	bx	lr

0800570c <_fini>:
 800570c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570e:	46c0      	nop			@ (mov r8, r8)
 8005710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005712:	bc08      	pop	{r3}
 8005714:	469e      	mov	lr, r3
 8005716:	4770      	bx	lr
