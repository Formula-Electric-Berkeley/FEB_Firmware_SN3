
DART_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042d8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004398  08004398  00014398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043d0  080043d0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080043d0  080043d0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043d0  080043d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043d0  080043d0  000143d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043d4  080043d4  000143d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080043d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  2000000c  080043e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  080043e4  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010022  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025c0  00000000  00000000  00030099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e68  00000000  00000000  00032660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b3f  00000000  00000000  000334c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a1cc  00000000  00000000  00034007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011f88  00000000  00000000  0004e1d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094215  00000000  00000000  0006015b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003328  00000000  00000000  000f4370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000f7698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004380 	.word	0x08004380

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004380 	.word	0x08004380

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <FEB_CAN_Init>:

uint32_t FEB_CAN_Tx_Mailbox;

// **************************************** Functions ****************************************

void FEB_CAN_Init(void) {
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	FEB_CAN_Filter_Config();
 8000224:	f000 f812 	bl	800024c <FEB_CAN_Filter_Config>
	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8000228:	4b07      	ldr	r3, [pc, #28]	; (8000248 <FEB_CAN_Init+0x28>)
 800022a:	0018      	movs	r0, r3
 800022c:	f001 f95c 	bl	80014e8 <HAL_CAN_Start>
 8000230:	1e03      	subs	r3, r0, #0
 8000232:	d001      	beq.n	8000238 <FEB_CAN_Init+0x18>
		Error_Handler();
 8000234:	f000 fc02 	bl	8000a3c <Error_Handler>
	}
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000238:	4b03      	ldr	r3, [pc, #12]	; (8000248 <FEB_CAN_Init+0x28>)
 800023a:	2102      	movs	r1, #2
 800023c:	0018      	movs	r0, r3
 800023e:	f001 f999 	bl	8001574 <HAL_CAN_ActivateNotification>
}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	20000028 	.word	0x20000028

0800024c <FEB_CAN_Filter_Config>:

void FEB_CAN_Filter_Config(void) {
 800024c:	b590      	push	{r4, r7, lr}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
	uint8_t filter_bank = 0;
 8000252:	1dfb      	adds	r3, r7, #7
 8000254:	2200      	movs	r2, #0
 8000256:	701a      	strb	r2, [r3, #0]
	filter_bank = FEB_CAN_BMS_Filter(&hcan, CAN_RX_FIFO0, filter_bank);
 8000258:	1dfc      	adds	r4, r7, #7
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	781a      	ldrb	r2, [r3, #0]
 800025e:	4b05      	ldr	r3, [pc, #20]	; (8000274 <FEB_CAN_Filter_Config+0x28>)
 8000260:	2100      	movs	r1, #0
 8000262:	0018      	movs	r0, r3
 8000264:	f000 f808 	bl	8000278 <FEB_CAN_BMS_Filter>
 8000268:	0003      	movs	r3, r0
 800026a:	7023      	strb	r3, [r4, #0]
}
 800026c:	46c0      	nop			; (mov r8, r8)
 800026e:	46bd      	mov	sp, r7
 8000270:	b003      	add	sp, #12
 8000272:	bd90      	pop	{r4, r7, pc}
 8000274:	20000028 	.word	0x20000028

08000278 <FEB_CAN_BMS_Filter>:
extern uint8_t FEB_CAN_Tx_Data[8];
extern uint32_t FEB_CAN_Tx_Mailbox;
extern UART_HandleTypeDef huart2;


uint8_t FEB_CAN_BMS_Filter(CAN_HandleTypeDef* hcan, uint8_t FIFO_assignment, uint8_t filter_bank) {
 8000278:	b590      	push	{r4, r7, lr}
 800027a:	b08f      	sub	sp, #60	; 0x3c
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
 8000280:	0008      	movs	r0, r1
 8000282:	0011      	movs	r1, r2
 8000284:	1cfb      	adds	r3, r7, #3
 8000286:	1c02      	adds	r2, r0, #0
 8000288:	701a      	strb	r2, [r3, #0]
 800028a:	1cbb      	adds	r3, r7, #2
 800028c:	1c0a      	adds	r2, r1, #0
 800028e:	701a      	strb	r2, [r3, #0]
    // For multiple filters, create array of filter IDs and loop over IDs.

	uint16_t filter_arr[] = {FEB_CAN_ID_BMS_DART1_REQUESTED_FAN_SPEEDS};
 8000290:	2334      	movs	r3, #52	; 0x34
 8000292:	18fb      	adds	r3, r7, r3
 8000294:	2205      	movs	r2, #5
 8000296:	801a      	strh	r2, [r3, #0]

	for (uint8_t i = 0; i < 1; i++) {
 8000298:	2337      	movs	r3, #55	; 0x37
 800029a:	18fb      	adds	r3, r7, r3
 800029c:	2200      	movs	r2, #0
 800029e:	701a      	strb	r2, [r3, #0]
 80002a0:	e038      	b.n	8000314 <FEB_CAN_BMS_Filter+0x9c>

		CAN_FilterTypeDef filter_config;

		// Standard CAN - 2.0A - 11 bit
		filter_config.FilterActivation = CAN_FILTER_ENABLE;
 80002a2:	210c      	movs	r1, #12
 80002a4:	187b      	adds	r3, r7, r1
 80002a6:	2201      	movs	r2, #1
 80002a8:	621a      	str	r2, [r3, #32]
		filter_config.FilterBank = filter_bank;
 80002aa:	1cbb      	adds	r3, r7, #2
 80002ac:	781a      	ldrb	r2, [r3, #0]
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	615a      	str	r2, [r3, #20]
		filter_config.FilterFIFOAssignment = FIFO_assignment;
 80002b2:	1cfb      	adds	r3, r7, #3
 80002b4:	781a      	ldrb	r2, [r3, #0]
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	611a      	str	r2, [r3, #16]
		filter_config.FilterIdHigh = filter_arr[i] << 5;
 80002ba:	2437      	movs	r4, #55	; 0x37
 80002bc:	193b      	adds	r3, r7, r4
 80002be:	781a      	ldrb	r2, [r3, #0]
 80002c0:	2334      	movs	r3, #52	; 0x34
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	0052      	lsls	r2, r2, #1
 80002c6:	5ad3      	ldrh	r3, [r2, r3]
 80002c8:	015b      	lsls	r3, r3, #5
 80002ca:	001a      	movs	r2, r3
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	601a      	str	r2, [r3, #0]
		filter_config.FilterIdLow = 0;
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	2200      	movs	r2, #0
 80002d4:	605a      	str	r2, [r3, #4]
		filter_config.FilterMaskIdHigh = 0xFFE0;
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	4a14      	ldr	r2, [pc, #80]	; (800032c <FEB_CAN_BMS_Filter+0xb4>)
 80002da:	609a      	str	r2, [r3, #8]
		filter_config.FilterMaskIdLow = 0;
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2200      	movs	r2, #0
 80002e0:	60da      	str	r2, [r3, #12]
		filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2200      	movs	r2, #0
 80002e6:	619a      	str	r2, [r3, #24]
		filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	2201      	movs	r2, #1
 80002ec:	61da      	str	r2, [r3, #28]
		filter_config.SlaveStartFilterBank = 27;
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	221b      	movs	r2, #27
 80002f2:	625a      	str	r2, [r3, #36]	; 0x24
		filter_bank++;
 80002f4:	1cbb      	adds	r3, r7, #2
 80002f6:	781a      	ldrb	r2, [r3, #0]
 80002f8:	1cbb      	adds	r3, r7, #2
 80002fa:	3201      	adds	r2, #1
 80002fc:	701a      	strb	r2, [r3, #0]


			if (HAL_CAN_ConfigFilter(hcan, &filter_config) != HAL_OK) {
 80002fe:	187a      	adds	r2, r7, r1
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	0011      	movs	r1, r2
 8000304:	0018      	movs	r0, r3
 8000306:	f000 fffd 	bl	8001304 <HAL_CAN_ConfigFilter>
	for (uint8_t i = 0; i < 1; i++) {
 800030a:	193b      	adds	r3, r7, r4
 800030c:	781a      	ldrb	r2, [r3, #0]
 800030e:	193b      	adds	r3, r7, r4
 8000310:	3201      	adds	r2, #1
 8000312:	701a      	strb	r2, [r3, #0]
 8000314:	2337      	movs	r3, #55	; 0x37
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d0c1      	beq.n	80002a2 <FEB_CAN_BMS_Filter+0x2a>
				// Code Error - Shutdown
			}
	}

	return filter_bank;
 800031e:	1cbb      	adds	r3, r7, #2
 8000320:	781b      	ldrb	r3, [r3, #0]
}
 8000322:	0018      	movs	r0, r3
 8000324:	46bd      	mov	sp, r7
 8000326:	b00f      	add	sp, #60	; 0x3c
 8000328:	bd90      	pop	{r4, r7, pc}
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	0000ffe0 	.word	0x0000ffe0

08000330 <FEB_Fan_Init>:

extern UART_HandleTypeDef huart2;

// ********************************** Initialize **********************************

void FEB_Fan_Init(){
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	FEB_Fan_PWM_Init();
 8000334:	f000 f806 	bl	8000344 <FEB_Fan_PWM_Init>
	FEB_Fan_All_Speed_Set(255 * 0);
 8000338:	2000      	movs	r0, #0
 800033a:	f000 f825 	bl	8000388 <FEB_Fan_All_Speed_Set>
}
 800033e:	46c0      	nop			; (mov r8, r8)
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}

08000344 <FEB_Fan_PWM_Init>:
	FEB_Fan_4_Speed_Set(FEB_CAN_Rx_Data[3]);
	FEB_Fan_5_Speed_Set(FEB_CAN_Rx_Data[4]);
}

// ********************************** PWM **********************************
void FEB_Fan_PWM_Init(void) {
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); //fan 1
 8000348:	4b0d      	ldr	r3, [pc, #52]	; (8000380 <FEB_Fan_PWM_Init+0x3c>)
 800034a:	2108      	movs	r1, #8
 800034c:	0018      	movs	r0, r3
 800034e:	f002 f999 	bl	8002684 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); //fan 2
 8000352:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <FEB_Fan_PWM_Init+0x3c>)
 8000354:	2104      	movs	r1, #4
 8000356:	0018      	movs	r0, r3
 8000358:	f002 f994 	bl	8002684 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); //fan 3
 800035c:	4b08      	ldr	r3, [pc, #32]	; (8000380 <FEB_Fan_PWM_Init+0x3c>)
 800035e:	2100      	movs	r1, #0
 8000360:	0018      	movs	r0, r3
 8000362:	f002 f98f 	bl	8002684 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //fan 4
 8000366:	4b07      	ldr	r3, [pc, #28]	; (8000384 <FEB_Fan_PWM_Init+0x40>)
 8000368:	2104      	movs	r1, #4
 800036a:	0018      	movs	r0, r3
 800036c:	f002 f98a 	bl	8002684 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //fan 5
 8000370:	4b04      	ldr	r3, [pc, #16]	; (8000384 <FEB_Fan_PWM_Init+0x40>)
 8000372:	2100      	movs	r1, #0
 8000374:	0018      	movs	r0, r3
 8000376:	f002 f985 	bl	8002684 <HAL_TIM_PWM_Start>
}
 800037a:	46c0      	nop			; (mov r8, r8)
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	20000050 	.word	0x20000050
 8000384:	200000e0 	.word	0x200000e0

08000388 <FEB_Fan_All_Speed_Set>:

void FEB_Fan_All_Speed_Set(uint8_t speed) {
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	0002      	movs	r2, r0
 8000390:	1dfb      	adds	r3, r7, #7
 8000392:	701a      	strb	r2, [r3, #0]
	FEB_Fan_1_Speed_Set(speed);
 8000394:	1dfb      	adds	r3, r7, #7
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	0018      	movs	r0, r3
 800039a:	f000 f819 	bl	80003d0 <FEB_Fan_1_Speed_Set>
	FEB_Fan_2_Speed_Set(speed);
 800039e:	1dfb      	adds	r3, r7, #7
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	0018      	movs	r0, r3
 80003a4:	f000 f826 	bl	80003f4 <FEB_Fan_2_Speed_Set>
	FEB_Fan_3_Speed_Set(speed);
 80003a8:	1dfb      	adds	r3, r7, #7
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	0018      	movs	r0, r3
 80003ae:	f000 f833 	bl	8000418 <FEB_Fan_3_Speed_Set>
	FEB_Fan_4_Speed_Set(speed);
 80003b2:	1dfb      	adds	r3, r7, #7
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	0018      	movs	r0, r3
 80003b8:	f000 f840 	bl	800043c <FEB_Fan_4_Speed_Set>
	FEB_Fan_5_Speed_Set(speed);
 80003bc:	1dfb      	adds	r3, r7, #7
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	0018      	movs	r0, r3
 80003c2:	f000 f84d 	bl	8000460 <FEB_Fan_5_Speed_Set>
}
 80003c6:	46c0      	nop			; (mov r8, r8)
 80003c8:	46bd      	mov	sp, r7
 80003ca:	b002      	add	sp, #8
 80003cc:	bd80      	pop	{r7, pc}
	...

080003d0 <FEB_Fan_1_Speed_Set>:

void FEB_Fan_1_Speed_Set(uint8_t speed) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	0002      	movs	r2, r0
 80003d8:	1dfb      	adds	r3, r7, #7
 80003da:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, speed);
 80003dc:	4b04      	ldr	r3, [pc, #16]	; (80003f0 <FEB_Fan_1_Speed_Set+0x20>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	1dfa      	adds	r2, r7, #7
 80003e2:	7812      	ldrb	r2, [r2, #0]
 80003e4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80003e6:	46c0      	nop			; (mov r8, r8)
 80003e8:	46bd      	mov	sp, r7
 80003ea:	b002      	add	sp, #8
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	20000050 	.word	0x20000050

080003f4 <FEB_Fan_2_Speed_Set>:

void FEB_Fan_2_Speed_Set(uint8_t speed) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	0002      	movs	r2, r0
 80003fc:	1dfb      	adds	r3, r7, #7
 80003fe:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, speed);
 8000400:	4b04      	ldr	r3, [pc, #16]	; (8000414 <FEB_Fan_2_Speed_Set+0x20>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	1dfa      	adds	r2, r7, #7
 8000406:	7812      	ldrb	r2, [r2, #0]
 8000408:	639a      	str	r2, [r3, #56]	; 0x38
}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	46bd      	mov	sp, r7
 800040e:	b002      	add	sp, #8
 8000410:	bd80      	pop	{r7, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	20000050 	.word	0x20000050

08000418 <FEB_Fan_3_Speed_Set>:

void FEB_Fan_3_Speed_Set(uint8_t speed) {
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	0002      	movs	r2, r0
 8000420:	1dfb      	adds	r3, r7, #7
 8000422:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 8000424:	4b04      	ldr	r3, [pc, #16]	; (8000438 <FEB_Fan_3_Speed_Set+0x20>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	1dfa      	adds	r2, r7, #7
 800042a:	7812      	ldrb	r2, [r2, #0]
 800042c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	46bd      	mov	sp, r7
 8000432:	b002      	add	sp, #8
 8000434:	bd80      	pop	{r7, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	20000050 	.word	0x20000050

0800043c <FEB_Fan_4_Speed_Set>:

void FEB_Fan_4_Speed_Set(uint8_t speed) {
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	0002      	movs	r2, r0
 8000444:	1dfb      	adds	r3, r7, #7
 8000446:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, speed);
 8000448:	4b04      	ldr	r3, [pc, #16]	; (800045c <FEB_Fan_4_Speed_Set+0x20>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	1dfa      	adds	r2, r7, #7
 800044e:	7812      	ldrb	r2, [r2, #0]
 8000450:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	46bd      	mov	sp, r7
 8000456:	b002      	add	sp, #8
 8000458:	bd80      	pop	{r7, pc}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	200000e0 	.word	0x200000e0

08000460 <FEB_Fan_5_Speed_Set>:

void FEB_Fan_5_Speed_Set(uint8_t speed) {
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	0002      	movs	r2, r0
 8000468:	1dfb      	adds	r3, r7, #7
 800046a:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, speed);
 800046c:	4b04      	ldr	r3, [pc, #16]	; (8000480 <FEB_Fan_5_Speed_Set+0x20>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	1dfa      	adds	r2, r7, #7
 8000472:	7812      	ldrb	r2, [r2, #0]
 8000474:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	46bd      	mov	sp, r7
 800047a:	b002      	add	sp, #8
 800047c:	bd80      	pop	{r7, pc}
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	200000e0 	.word	0x200000e0

08000484 <FEB_Init>:
#include "FEB_main.h"

void FEB_Init(void){
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
	FEB_CAN_Init();
 8000488:	f7ff feca 	bl	8000220 <FEB_CAN_Init>
	FEB_Fan_Init();
 800048c:	f7ff ff50 	bl	8000330 <FEB_Fan_Init>
}
 8000490:	46c0      	nop			; (mov r8, r8)
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}

08000496 <FEB_Main_Loop>:

void FEB_Main_Loop(void){
 8000496:	b580      	push	{r7, lr}
 8000498:	af00      	add	r7, sp, #0
	//Fan speed set by CAN receive function
	HAL_Delay(100);
 800049a:	2064      	movs	r0, #100	; 0x64
 800049c:	f000 fe10 	bl	80010c0 <HAL_Delay>
}
 80004a0:	46c0      	nop			; (mov r8, r8)
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}

080004a6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a6:	b580      	push	{r7, lr}
 80004a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004aa:	f000 fda5 	bl	8000ff8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ae:	f000 f813 	bl	80004d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b2:	f000 fa7f 	bl	80009b4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80004b6:	f000 f885 	bl	80005c4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80004ba:	f000 f94d 	bl	8000758 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80004be:	f000 fa49 	bl	8000954 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80004c2:	f000 f99b 	bl	80007fc <MX_TIM3_Init>
  MX_CAN_Init();
 80004c6:	f000 f847 	bl	8000558 <MX_CAN_Init>
  MX_TIM14_Init();
 80004ca:	f000 fa1f 	bl	800090c <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  FEB_Init();
 80004ce:	f7ff ffd9 	bl	8000484 <FEB_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  FEB_Main_Loop();
 80004d2:	f7ff ffe0 	bl	8000496 <FEB_Main_Loop>
 80004d6:	e7fc      	b.n	80004d2 <main+0x2c>

080004d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b093      	sub	sp, #76	; 0x4c
 80004dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004de:	2414      	movs	r4, #20
 80004e0:	193b      	adds	r3, r7, r4
 80004e2:	0018      	movs	r0, r3
 80004e4:	2334      	movs	r3, #52	; 0x34
 80004e6:	001a      	movs	r2, r3
 80004e8:	2100      	movs	r1, #0
 80004ea:	f003 ff1d 	bl	8004328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	0018      	movs	r0, r3
 80004f2:	2310      	movs	r3, #16
 80004f4:	001a      	movs	r2, r3
 80004f6:	2100      	movs	r1, #0
 80004f8:	f003 ff16 	bl	8004328 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004fc:	0021      	movs	r1, r4
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	2202      	movs	r2, #2
 8000502:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000504:	187b      	adds	r3, r7, r1
 8000506:	2201      	movs	r2, #1
 8000508:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800050a:	187b      	adds	r3, r7, r1
 800050c:	2210      	movs	r2, #16
 800050e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000510:	187b      	adds	r3, r7, r1
 8000512:	2200      	movs	r2, #0
 8000514:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000516:	187b      	adds	r3, r7, r1
 8000518:	0018      	movs	r0, r3
 800051a:	f001 fb19 	bl	8001b50 <HAL_RCC_OscConfig>
 800051e:	1e03      	subs	r3, r0, #0
 8000520:	d001      	beq.n	8000526 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000522:	f000 fa8b 	bl	8000a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	2207      	movs	r2, #7
 800052a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	2200      	movs	r2, #0
 8000530:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	2200      	movs	r2, #0
 8000536:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	2200      	movs	r2, #0
 800053c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	2100      	movs	r1, #0
 8000542:	0018      	movs	r0, r3
 8000544:	f001 fe8a 	bl	800225c <HAL_RCC_ClockConfig>
 8000548:	1e03      	subs	r3, r0, #0
 800054a:	d001      	beq.n	8000550 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800054c:	f000 fa76 	bl	8000a3c <Error_Handler>
  }
}
 8000550:	46c0      	nop			; (mov r8, r8)
 8000552:	46bd      	mov	sp, r7
 8000554:	b013      	add	sp, #76	; 0x4c
 8000556:	bd90      	pop	{r4, r7, pc}

08000558 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800055c:	4b17      	ldr	r3, [pc, #92]	; (80005bc <MX_CAN_Init+0x64>)
 800055e:	4a18      	ldr	r2, [pc, #96]	; (80005c0 <MX_CAN_Init+0x68>)
 8000560:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000562:	4b16      	ldr	r3, [pc, #88]	; (80005bc <MX_CAN_Init+0x64>)
 8000564:	2210      	movs	r2, #16
 8000566:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000568:	4b14      	ldr	r3, [pc, #80]	; (80005bc <MX_CAN_Init+0x64>)
 800056a:	2200      	movs	r2, #0
 800056c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800056e:	4b13      	ldr	r3, [pc, #76]	; (80005bc <MX_CAN_Init+0x64>)
 8000570:	2200      	movs	r2, #0
 8000572:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000574:	4b11      	ldr	r3, [pc, #68]	; (80005bc <MX_CAN_Init+0x64>)
 8000576:	2200      	movs	r2, #0
 8000578:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800057a:	4b10      	ldr	r3, [pc, #64]	; (80005bc <MX_CAN_Init+0x64>)
 800057c:	2200      	movs	r2, #0
 800057e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000580:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <MX_CAN_Init+0x64>)
 8000582:	2200      	movs	r2, #0
 8000584:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000586:	4b0d      	ldr	r3, [pc, #52]	; (80005bc <MX_CAN_Init+0x64>)
 8000588:	2200      	movs	r2, #0
 800058a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800058c:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <MX_CAN_Init+0x64>)
 800058e:	2200      	movs	r2, #0
 8000590:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000592:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <MX_CAN_Init+0x64>)
 8000594:	2200      	movs	r2, #0
 8000596:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <MX_CAN_Init+0x64>)
 800059a:	2200      	movs	r2, #0
 800059c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800059e:	4b07      	ldr	r3, [pc, #28]	; (80005bc <MX_CAN_Init+0x64>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <MX_CAN_Init+0x64>)
 80005a6:	0018      	movs	r0, r3
 80005a8:	f000 fdae 	bl	8001108 <HAL_CAN_Init>
 80005ac:	1e03      	subs	r3, r0, #0
 80005ae:	d001      	beq.n	80005b4 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80005b0:	f000 fa44 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80005b4:	46c0      	nop			; (mov r8, r8)
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	20000028 	.word	0x20000028
 80005c0:	40006400 	.word	0x40006400

080005c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b096      	sub	sp, #88	; 0x58
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ca:	2348      	movs	r3, #72	; 0x48
 80005cc:	18fb      	adds	r3, r7, r3
 80005ce:	0018      	movs	r0, r3
 80005d0:	2310      	movs	r3, #16
 80005d2:	001a      	movs	r2, r3
 80005d4:	2100      	movs	r1, #0
 80005d6:	f003 fea7 	bl	8004328 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005da:	2340      	movs	r3, #64	; 0x40
 80005dc:	18fb      	adds	r3, r7, r3
 80005de:	0018      	movs	r0, r3
 80005e0:	2308      	movs	r3, #8
 80005e2:	001a      	movs	r2, r3
 80005e4:	2100      	movs	r1, #0
 80005e6:	f003 fe9f 	bl	8004328 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005ea:	2324      	movs	r3, #36	; 0x24
 80005ec:	18fb      	adds	r3, r7, r3
 80005ee:	0018      	movs	r0, r3
 80005f0:	231c      	movs	r3, #28
 80005f2:	001a      	movs	r2, r3
 80005f4:	2100      	movs	r1, #0
 80005f6:	f003 fe97 	bl	8004328 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	0018      	movs	r0, r3
 80005fe:	2320      	movs	r3, #32
 8000600:	001a      	movs	r2, r3
 8000602:	2100      	movs	r1, #0
 8000604:	f003 fe90 	bl	8004328 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000608:	4b51      	ldr	r3, [pc, #324]	; (8000750 <MX_TIM1_Init+0x18c>)
 800060a:	4a52      	ldr	r2, [pc, #328]	; (8000754 <MX_TIM1_Init+0x190>)
 800060c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800060e:	4b50      	ldr	r3, [pc, #320]	; (8000750 <MX_TIM1_Init+0x18c>)
 8000610:	2200      	movs	r2, #0
 8000612:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000614:	4b4e      	ldr	r3, [pc, #312]	; (8000750 <MX_TIM1_Init+0x18c>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 800061a:	4b4d      	ldr	r3, [pc, #308]	; (8000750 <MX_TIM1_Init+0x18c>)
 800061c:	22ff      	movs	r2, #255	; 0xff
 800061e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000620:	4b4b      	ldr	r3, [pc, #300]	; (8000750 <MX_TIM1_Init+0x18c>)
 8000622:	2200      	movs	r2, #0
 8000624:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000626:	4b4a      	ldr	r3, [pc, #296]	; (8000750 <MX_TIM1_Init+0x18c>)
 8000628:	2200      	movs	r2, #0
 800062a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800062c:	4b48      	ldr	r3, [pc, #288]	; (8000750 <MX_TIM1_Init+0x18c>)
 800062e:	2280      	movs	r2, #128	; 0x80
 8000630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000632:	4b47      	ldr	r3, [pc, #284]	; (8000750 <MX_TIM1_Init+0x18c>)
 8000634:	0018      	movs	r0, r3
 8000636:	f001 ff7d 	bl	8002534 <HAL_TIM_Base_Init>
 800063a:	1e03      	subs	r3, r0, #0
 800063c:	d001      	beq.n	8000642 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800063e:	f000 f9fd 	bl	8000a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000642:	2148      	movs	r1, #72	; 0x48
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2280      	movs	r2, #128	; 0x80
 8000648:	0152      	lsls	r2, r2, #5
 800064a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800064c:	187a      	adds	r2, r7, r1
 800064e:	4b40      	ldr	r3, [pc, #256]	; (8000750 <MX_TIM1_Init+0x18c>)
 8000650:	0011      	movs	r1, r2
 8000652:	0018      	movs	r0, r3
 8000654:	f002 fa9e 	bl	8002b94 <HAL_TIM_ConfigClockSource>
 8000658:	1e03      	subs	r3, r0, #0
 800065a:	d001      	beq.n	8000660 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800065c:	f000 f9ee 	bl	8000a3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000660:	4b3b      	ldr	r3, [pc, #236]	; (8000750 <MX_TIM1_Init+0x18c>)
 8000662:	0018      	movs	r0, r3
 8000664:	f001 ffb6 	bl	80025d4 <HAL_TIM_PWM_Init>
 8000668:	1e03      	subs	r3, r0, #0
 800066a:	d001      	beq.n	8000670 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 800066c:	f000 f9e6 	bl	8000a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000670:	2140      	movs	r1, #64	; 0x40
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000678:	187b      	adds	r3, r7, r1
 800067a:	2200      	movs	r2, #0
 800067c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800067e:	187a      	adds	r2, r7, r1
 8000680:	4b33      	ldr	r3, [pc, #204]	; (8000750 <MX_TIM1_Init+0x18c>)
 8000682:	0011      	movs	r1, r2
 8000684:	0018      	movs	r0, r3
 8000686:	f002 fe85 	bl	8003394 <HAL_TIMEx_MasterConfigSynchronization>
 800068a:	1e03      	subs	r3, r0, #0
 800068c:	d001      	beq.n	8000692 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 800068e:	f000 f9d5 	bl	8000a3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000692:	2124      	movs	r1, #36	; 0x24
 8000694:	187b      	adds	r3, r7, r1
 8000696:	2260      	movs	r2, #96	; 0x60
 8000698:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 25;
 800069a:	187b      	adds	r3, r7, r1
 800069c:	2219      	movs	r2, #25
 800069e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2200      	movs	r2, #0
 80006aa:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2200      	movs	r2, #0
 80006b0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2200      	movs	r2, #0
 80006b6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2200      	movs	r2, #0
 80006bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006be:	1879      	adds	r1, r7, r1
 80006c0:	4b23      	ldr	r3, [pc, #140]	; (8000750 <MX_TIM1_Init+0x18c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	0018      	movs	r0, r3
 80006c6:	f002 f99f 	bl	8002a08 <HAL_TIM_PWM_ConfigChannel>
 80006ca:	1e03      	subs	r3, r0, #0
 80006cc:	d001      	beq.n	80006d2 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80006ce:	f000 f9b5 	bl	8000a3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006d2:	2324      	movs	r3, #36	; 0x24
 80006d4:	18f9      	adds	r1, r7, r3
 80006d6:	4b1e      	ldr	r3, [pc, #120]	; (8000750 <MX_TIM1_Init+0x18c>)
 80006d8:	2204      	movs	r2, #4
 80006da:	0018      	movs	r0, r3
 80006dc:	f002 f994 	bl	8002a08 <HAL_TIM_PWM_ConfigChannel>
 80006e0:	1e03      	subs	r3, r0, #0
 80006e2:	d001      	beq.n	80006e8 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 80006e4:	f000 f9aa 	bl	8000a3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006e8:	2324      	movs	r3, #36	; 0x24
 80006ea:	18f9      	adds	r1, r7, r3
 80006ec:	4b18      	ldr	r3, [pc, #96]	; (8000750 <MX_TIM1_Init+0x18c>)
 80006ee:	2208      	movs	r2, #8
 80006f0:	0018      	movs	r0, r3
 80006f2:	f002 f989 	bl	8002a08 <HAL_TIM_PWM_ConfigChannel>
 80006f6:	1e03      	subs	r3, r0, #0
 80006f8:	d001      	beq.n	80006fe <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 80006fa:	f000 f99f 	bl	8000a3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2200      	movs	r2, #0
 8000708:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2280      	movs	r2, #128	; 0x80
 8000720:	0192      	lsls	r2, r2, #6
 8000722:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800072a:	1d3a      	adds	r2, r7, #4
 800072c:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_TIM1_Init+0x18c>)
 800072e:	0011      	movs	r1, r2
 8000730:	0018      	movs	r0, r3
 8000732:	f002 fe87 	bl	8003444 <HAL_TIMEx_ConfigBreakDeadTime>
 8000736:	1e03      	subs	r3, r0, #0
 8000738:	d001      	beq.n	800073e <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 800073a:	f000 f97f 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800073e:	4b04      	ldr	r3, [pc, #16]	; (8000750 <MX_TIM1_Init+0x18c>)
 8000740:	0018      	movs	r0, r3
 8000742:	f000 faef 	bl	8000d24 <HAL_TIM_MspPostInit>

}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	46bd      	mov	sp, r7
 800074a:	b016      	add	sp, #88	; 0x58
 800074c:	bd80      	pop	{r7, pc}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	20000050 	.word	0x20000050
 8000754:	40012c00 	.word	0x40012c00

08000758 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800075e:	2308      	movs	r3, #8
 8000760:	18fb      	adds	r3, r7, r3
 8000762:	0018      	movs	r0, r3
 8000764:	2310      	movs	r3, #16
 8000766:	001a      	movs	r2, r3
 8000768:	2100      	movs	r1, #0
 800076a:	f003 fddd 	bl	8004328 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800076e:	003b      	movs	r3, r7
 8000770:	0018      	movs	r0, r3
 8000772:	2308      	movs	r3, #8
 8000774:	001a      	movs	r2, r3
 8000776:	2100      	movs	r1, #0
 8000778:	f003 fdd6 	bl	8004328 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800077c:	4b1e      	ldr	r3, [pc, #120]	; (80007f8 <MX_TIM2_Init+0xa0>)
 800077e:	2280      	movs	r2, #128	; 0x80
 8000780:	05d2      	lsls	r2, r2, #23
 8000782:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000784:	4b1c      	ldr	r3, [pc, #112]	; (80007f8 <MX_TIM2_Init+0xa0>)
 8000786:	2200      	movs	r2, #0
 8000788:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800078a:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <MX_TIM2_Init+0xa0>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8000790:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <MX_TIM2_Init+0xa0>)
 8000792:	22ff      	movs	r2, #255	; 0xff
 8000794:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000796:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <MX_TIM2_Init+0xa0>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800079c:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <MX_TIM2_Init+0xa0>)
 800079e:	2280      	movs	r2, #128	; 0x80
 80007a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007a2:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <MX_TIM2_Init+0xa0>)
 80007a4:	0018      	movs	r0, r3
 80007a6:	f001 fec5 	bl	8002534 <HAL_TIM_Base_Init>
 80007aa:	1e03      	subs	r3, r0, #0
 80007ac:	d001      	beq.n	80007b2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80007ae:	f000 f945 	bl	8000a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007b2:	2108      	movs	r1, #8
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	2280      	movs	r2, #128	; 0x80
 80007b8:	0152      	lsls	r2, r2, #5
 80007ba:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007bc:	187a      	adds	r2, r7, r1
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_TIM2_Init+0xa0>)
 80007c0:	0011      	movs	r1, r2
 80007c2:	0018      	movs	r0, r3
 80007c4:	f002 f9e6 	bl	8002b94 <HAL_TIM_ConfigClockSource>
 80007c8:	1e03      	subs	r3, r0, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80007cc:	f000 f936 	bl	8000a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d0:	003b      	movs	r3, r7
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d6:	003b      	movs	r3, r7
 80007d8:	2200      	movs	r2, #0
 80007da:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007dc:	003a      	movs	r2, r7
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_TIM2_Init+0xa0>)
 80007e0:	0011      	movs	r1, r2
 80007e2:	0018      	movs	r0, r3
 80007e4:	f002 fdd6 	bl	8003394 <HAL_TIMEx_MasterConfigSynchronization>
 80007e8:	1e03      	subs	r3, r0, #0
 80007ea:	d001      	beq.n	80007f0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80007ec:	f000 f926 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007f0:	46c0      	nop			; (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b006      	add	sp, #24
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000098 	.word	0x20000098

080007fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08e      	sub	sp, #56	; 0x38
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000802:	2328      	movs	r3, #40	; 0x28
 8000804:	18fb      	adds	r3, r7, r3
 8000806:	0018      	movs	r0, r3
 8000808:	2310      	movs	r3, #16
 800080a:	001a      	movs	r2, r3
 800080c:	2100      	movs	r1, #0
 800080e:	f003 fd8b 	bl	8004328 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000812:	2320      	movs	r3, #32
 8000814:	18fb      	adds	r3, r7, r3
 8000816:	0018      	movs	r0, r3
 8000818:	2308      	movs	r3, #8
 800081a:	001a      	movs	r2, r3
 800081c:	2100      	movs	r1, #0
 800081e:	f003 fd83 	bl	8004328 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	0018      	movs	r0, r3
 8000826:	231c      	movs	r3, #28
 8000828:	001a      	movs	r2, r3
 800082a:	2100      	movs	r1, #0
 800082c:	f003 fd7c 	bl	8004328 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000830:	4b34      	ldr	r3, [pc, #208]	; (8000904 <MX_TIM3_Init+0x108>)
 8000832:	4a35      	ldr	r2, [pc, #212]	; (8000908 <MX_TIM3_Init+0x10c>)
 8000834:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000836:	4b33      	ldr	r3, [pc, #204]	; (8000904 <MX_TIM3_Init+0x108>)
 8000838:	2200      	movs	r2, #0
 800083a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800083c:	4b31      	ldr	r3, [pc, #196]	; (8000904 <MX_TIM3_Init+0x108>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8000842:	4b30      	ldr	r3, [pc, #192]	; (8000904 <MX_TIM3_Init+0x108>)
 8000844:	22ff      	movs	r2, #255	; 0xff
 8000846:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000848:	4b2e      	ldr	r3, [pc, #184]	; (8000904 <MX_TIM3_Init+0x108>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800084e:	4b2d      	ldr	r3, [pc, #180]	; (8000904 <MX_TIM3_Init+0x108>)
 8000850:	2280      	movs	r2, #128	; 0x80
 8000852:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000854:	4b2b      	ldr	r3, [pc, #172]	; (8000904 <MX_TIM3_Init+0x108>)
 8000856:	0018      	movs	r0, r3
 8000858:	f001 fe6c 	bl	8002534 <HAL_TIM_Base_Init>
 800085c:	1e03      	subs	r3, r0, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000860:	f000 f8ec 	bl	8000a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000864:	2128      	movs	r1, #40	; 0x28
 8000866:	187b      	adds	r3, r7, r1
 8000868:	2280      	movs	r2, #128	; 0x80
 800086a:	0152      	lsls	r2, r2, #5
 800086c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800086e:	187a      	adds	r2, r7, r1
 8000870:	4b24      	ldr	r3, [pc, #144]	; (8000904 <MX_TIM3_Init+0x108>)
 8000872:	0011      	movs	r1, r2
 8000874:	0018      	movs	r0, r3
 8000876:	f002 f98d 	bl	8002b94 <HAL_TIM_ConfigClockSource>
 800087a:	1e03      	subs	r3, r0, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800087e:	f000 f8dd 	bl	8000a3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000882:	4b20      	ldr	r3, [pc, #128]	; (8000904 <MX_TIM3_Init+0x108>)
 8000884:	0018      	movs	r0, r3
 8000886:	f001 fea5 	bl	80025d4 <HAL_TIM_PWM_Init>
 800088a:	1e03      	subs	r3, r0, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800088e:	f000 f8d5 	bl	8000a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000892:	2120      	movs	r1, #32
 8000894:	187b      	adds	r3, r7, r1
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800089a:	187b      	adds	r3, r7, r1
 800089c:	2200      	movs	r2, #0
 800089e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008a0:	187a      	adds	r2, r7, r1
 80008a2:	4b18      	ldr	r3, [pc, #96]	; (8000904 <MX_TIM3_Init+0x108>)
 80008a4:	0011      	movs	r1, r2
 80008a6:	0018      	movs	r0, r3
 80008a8:	f002 fd74 	bl	8003394 <HAL_TIMEx_MasterConfigSynchronization>
 80008ac:	1e03      	subs	r3, r0, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80008b0:	f000 f8c4 	bl	8000a3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	2260      	movs	r2, #96	; 0x60
 80008b8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 25;
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	2219      	movs	r2, #25
 80008be:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008cc:	1d39      	adds	r1, r7, #4
 80008ce:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <MX_TIM3_Init+0x108>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	0018      	movs	r0, r3
 80008d4:	f002 f898 	bl	8002a08 <HAL_TIM_PWM_ConfigChannel>
 80008d8:	1e03      	subs	r3, r0, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80008dc:	f000 f8ae 	bl	8000a3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008e0:	1d39      	adds	r1, r7, #4
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_TIM3_Init+0x108>)
 80008e4:	2204      	movs	r2, #4
 80008e6:	0018      	movs	r0, r3
 80008e8:	f002 f88e 	bl	8002a08 <HAL_TIM_PWM_ConfigChannel>
 80008ec:	1e03      	subs	r3, r0, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 80008f0:	f000 f8a4 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008f4:	4b03      	ldr	r3, [pc, #12]	; (8000904 <MX_TIM3_Init+0x108>)
 80008f6:	0018      	movs	r0, r3
 80008f8:	f000 fa14 	bl	8000d24 <HAL_TIM_MspPostInit>

}
 80008fc:	46c0      	nop			; (mov r8, r8)
 80008fe:	46bd      	mov	sp, r7
 8000900:	b00e      	add	sp, #56	; 0x38
 8000902:	bd80      	pop	{r7, pc}
 8000904:	200000e0 	.word	0x200000e0
 8000908:	40000400 	.word	0x40000400

0800090c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000910:	4b0e      	ldr	r3, [pc, #56]	; (800094c <MX_TIM14_Init+0x40>)
 8000912:	4a0f      	ldr	r2, [pc, #60]	; (8000950 <MX_TIM14_Init+0x44>)
 8000914:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000916:	4b0d      	ldr	r3, [pc, #52]	; (800094c <MX_TIM14_Init+0x40>)
 8000918:	2200      	movs	r2, #0
 800091a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091c:	4b0b      	ldr	r3, [pc, #44]	; (800094c <MX_TIM14_Init+0x40>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 255;
 8000922:	4b0a      	ldr	r3, [pc, #40]	; (800094c <MX_TIM14_Init+0x40>)
 8000924:	22ff      	movs	r2, #255	; 0xff
 8000926:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000928:	4b08      	ldr	r3, [pc, #32]	; (800094c <MX_TIM14_Init+0x40>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800092e:	4b07      	ldr	r3, [pc, #28]	; (800094c <MX_TIM14_Init+0x40>)
 8000930:	2280      	movs	r2, #128	; 0x80
 8000932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <MX_TIM14_Init+0x40>)
 8000936:	0018      	movs	r0, r3
 8000938:	f001 fdfc 	bl	8002534 <HAL_TIM_Base_Init>
 800093c:	1e03      	subs	r3, r0, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000940:	f000 f87c 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000944:	46c0      	nop			; (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	20000128 	.word	0x20000128
 8000950:	40002000 	.word	0x40002000

08000954 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000958:	4b14      	ldr	r3, [pc, #80]	; (80009ac <MX_USART2_UART_Init+0x58>)
 800095a:	4a15      	ldr	r2, [pc, #84]	; (80009b0 <MX_USART2_UART_Init+0x5c>)
 800095c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800095e:	4b13      	ldr	r3, [pc, #76]	; (80009ac <MX_USART2_UART_Init+0x58>)
 8000960:	22e1      	movs	r2, #225	; 0xe1
 8000962:	0252      	lsls	r2, r2, #9
 8000964:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <MX_USART2_UART_Init+0x58>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800096c:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <MX_USART2_UART_Init+0x58>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <MX_USART2_UART_Init+0x58>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <MX_USART2_UART_Init+0x58>)
 800097a:	220c      	movs	r2, #12
 800097c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097e:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <MX_USART2_UART_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <MX_USART2_UART_Init+0x58>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800098a:	4b08      	ldr	r3, [pc, #32]	; (80009ac <MX_USART2_UART_Init+0x58>)
 800098c:	2200      	movs	r2, #0
 800098e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <MX_USART2_UART_Init+0x58>)
 8000992:	2200      	movs	r2, #0
 8000994:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000996:	4b05      	ldr	r3, [pc, #20]	; (80009ac <MX_USART2_UART_Init+0x58>)
 8000998:	0018      	movs	r0, r3
 800099a:	f002 fdc1 	bl	8003520 <HAL_UART_Init>
 800099e:	1e03      	subs	r3, r0, #0
 80009a0:	d001      	beq.n	80009a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009a2:	f000 f84b 	bl	8000a3c <Error_Handler>
  /* USER CODE BEGIN USART2_Init 2 */


  /* USER CODE END USART2_Init 2 */

}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000170 	.word	0x20000170
 80009b0:	40004400 	.word	0x40004400

080009b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ba:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <MX_GPIO_Init+0x64>)
 80009bc:	695a      	ldr	r2, [r3, #20]
 80009be:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <MX_GPIO_Init+0x64>)
 80009c0:	2180      	movs	r1, #128	; 0x80
 80009c2:	03c9      	lsls	r1, r1, #15
 80009c4:	430a      	orrs	r2, r1
 80009c6:	615a      	str	r2, [r3, #20]
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <MX_GPIO_Init+0x64>)
 80009ca:	695a      	ldr	r2, [r3, #20]
 80009cc:	2380      	movs	r3, #128	; 0x80
 80009ce:	03db      	lsls	r3, r3, #15
 80009d0:	4013      	ands	r3, r2
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <MX_GPIO_Init+0x64>)
 80009d8:	695a      	ldr	r2, [r3, #20]
 80009da:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <MX_GPIO_Init+0x64>)
 80009dc:	2180      	movs	r1, #128	; 0x80
 80009de:	0289      	lsls	r1, r1, #10
 80009e0:	430a      	orrs	r2, r1
 80009e2:	615a      	str	r2, [r3, #20]
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <MX_GPIO_Init+0x64>)
 80009e6:	695a      	ldr	r2, [r3, #20]
 80009e8:	2380      	movs	r3, #128	; 0x80
 80009ea:	029b      	lsls	r3, r3, #10
 80009ec:	4013      	ands	r3, r2
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <MX_GPIO_Init+0x64>)
 80009f4:	695a      	ldr	r2, [r3, #20]
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <MX_GPIO_Init+0x64>)
 80009f8:	2180      	movs	r1, #128	; 0x80
 80009fa:	02c9      	lsls	r1, r1, #11
 80009fc:	430a      	orrs	r2, r1
 80009fe:	615a      	str	r2, [r3, #20]
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <MX_GPIO_Init+0x64>)
 8000a02:	695a      	ldr	r2, [r3, #20]
 8000a04:	2380      	movs	r3, #128	; 0x80
 8000a06:	02db      	lsls	r3, r3, #11
 8000a08:	4013      	ands	r3, r2
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	46bd      	mov	sp, r7
 8000a12:	b004      	add	sp, #16
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	40021000 	.word	0x40021000

08000a1c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
}
 8000a24:	46c0      	nop			; (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	b002      	add	sp, #8
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
}
 8000a34:	46c0      	nop			; (mov r8, r8)
 8000a36:	46bd      	mov	sp, r7
 8000a38:	b002      	add	sp, #8
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a40:	b672      	cpsid	i
}
 8000a42:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  while (1)
 8000a44:	e7fe      	b.n	8000a44 <Error_Handler+0x8>
	...

08000a48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <HAL_MspInit+0x44>)
 8000a50:	699a      	ldr	r2, [r3, #24]
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <HAL_MspInit+0x44>)
 8000a54:	2101      	movs	r1, #1
 8000a56:	430a      	orrs	r2, r1
 8000a58:	619a      	str	r2, [r3, #24]
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <HAL_MspInit+0x44>)
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	2201      	movs	r2, #1
 8000a60:	4013      	ands	r3, r2
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <HAL_MspInit+0x44>)
 8000a68:	69da      	ldr	r2, [r3, #28]
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <HAL_MspInit+0x44>)
 8000a6c:	2180      	movs	r1, #128	; 0x80
 8000a6e:	0549      	lsls	r1, r1, #21
 8000a70:	430a      	orrs	r2, r1
 8000a72:	61da      	str	r2, [r3, #28]
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <HAL_MspInit+0x44>)
 8000a76:	69da      	ldr	r2, [r3, #28]
 8000a78:	2380      	movs	r3, #128	; 0x80
 8000a7a:	055b      	lsls	r3, r3, #21
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	46bd      	mov	sp, r7
 8000a86:	b002      	add	sp, #8
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	40021000 	.word	0x40021000

08000a90 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a90:	b590      	push	{r4, r7, lr}
 8000a92:	b08b      	sub	sp, #44	; 0x2c
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	2414      	movs	r4, #20
 8000a9a:	193b      	adds	r3, r7, r4
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	2314      	movs	r3, #20
 8000aa0:	001a      	movs	r2, r3
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	f003 fc40 	bl	8004328 <memset>
  if(hcan->Instance==CAN)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a1d      	ldr	r2, [pc, #116]	; (8000b24 <HAL_CAN_MspInit+0x94>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d133      	bne.n	8000b1a <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ab2:	4b1d      	ldr	r3, [pc, #116]	; (8000b28 <HAL_CAN_MspInit+0x98>)
 8000ab4:	69da      	ldr	r2, [r3, #28]
 8000ab6:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <HAL_CAN_MspInit+0x98>)
 8000ab8:	2180      	movs	r1, #128	; 0x80
 8000aba:	0489      	lsls	r1, r1, #18
 8000abc:	430a      	orrs	r2, r1
 8000abe:	61da      	str	r2, [r3, #28]
 8000ac0:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <HAL_CAN_MspInit+0x98>)
 8000ac2:	69da      	ldr	r2, [r3, #28]
 8000ac4:	2380      	movs	r3, #128	; 0x80
 8000ac6:	049b      	lsls	r3, r3, #18
 8000ac8:	4013      	ands	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <HAL_CAN_MspInit+0x98>)
 8000ad0:	695a      	ldr	r2, [r3, #20]
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <HAL_CAN_MspInit+0x98>)
 8000ad4:	2180      	movs	r1, #128	; 0x80
 8000ad6:	0289      	lsls	r1, r1, #10
 8000ad8:	430a      	orrs	r2, r1
 8000ada:	615a      	str	r2, [r3, #20]
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <HAL_CAN_MspInit+0x98>)
 8000ade:	695a      	ldr	r2, [r3, #20]
 8000ae0:	2380      	movs	r3, #128	; 0x80
 8000ae2:	029b      	lsls	r3, r3, #10
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000aea:	193b      	adds	r3, r7, r4
 8000aec:	22c0      	movs	r2, #192	; 0xc0
 8000aee:	0152      	lsls	r2, r2, #5
 8000af0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	0021      	movs	r1, r4
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	2202      	movs	r2, #2
 8000af8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	187b      	adds	r3, r7, r1
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	2203      	movs	r2, #3
 8000b04:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000b06:	187b      	adds	r3, r7, r1
 8000b08:	2204      	movs	r2, #4
 8000b0a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0c:	187a      	adds	r2, r7, r1
 8000b0e:	2390      	movs	r3, #144	; 0x90
 8000b10:	05db      	lsls	r3, r3, #23
 8000b12:	0011      	movs	r1, r2
 8000b14:	0018      	movs	r0, r3
 8000b16:	f000 feb3 	bl	8001880 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	b00b      	add	sp, #44	; 0x2c
 8000b20:	bd90      	pop	{r4, r7, pc}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	40006400 	.word	0x40006400
 8000b28:	40021000 	.word	0x40021000

08000b2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08e      	sub	sp, #56	; 0x38
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	2324      	movs	r3, #36	; 0x24
 8000b36:	18fb      	adds	r3, r7, r3
 8000b38:	0018      	movs	r0, r3
 8000b3a:	2314      	movs	r3, #20
 8000b3c:	001a      	movs	r2, r3
 8000b3e:	2100      	movs	r1, #0
 8000b40:	f003 fbf2 	bl	8004328 <memset>
  if(htim_base->Instance==TIM1)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a71      	ldr	r2, [pc, #452]	; (8000d10 <HAL_TIM_Base_MspInit+0x1e4>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d11e      	bne.n	8000b8c <HAL_TIM_Base_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b4e:	4b71      	ldr	r3, [pc, #452]	; (8000d14 <HAL_TIM_Base_MspInit+0x1e8>)
 8000b50:	699a      	ldr	r2, [r3, #24]
 8000b52:	4b70      	ldr	r3, [pc, #448]	; (8000d14 <HAL_TIM_Base_MspInit+0x1e8>)
 8000b54:	2180      	movs	r1, #128	; 0x80
 8000b56:	0109      	lsls	r1, r1, #4
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	619a      	str	r2, [r3, #24]
 8000b5c:	4b6d      	ldr	r3, [pc, #436]	; (8000d14 <HAL_TIM_Base_MspInit+0x1e8>)
 8000b5e:	699a      	ldr	r2, [r3, #24]
 8000b60:	2380      	movs	r3, #128	; 0x80
 8000b62:	011b      	lsls	r3, r3, #4
 8000b64:	4013      	ands	r3, r2
 8000b66:	623b      	str	r3, [r7, #32]
 8000b68:	6a3b      	ldr	r3, [r7, #32]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	200d      	movs	r0, #13
 8000b70:	f000 fdd6 	bl	8001720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000b74:	200d      	movs	r0, #13
 8000b76:	f000 fde8 	bl	800174a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	200e      	movs	r0, #14
 8000b80:	f000 fdce 	bl	8001720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000b84:	200e      	movs	r0, #14
 8000b86:	f000 fde0 	bl	800174a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000b8a:	e0bd      	b.n	8000d08 <HAL_TIM_Base_MspInit+0x1dc>
  else if(htim_base->Instance==TIM2)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	2380      	movs	r3, #128	; 0x80
 8000b92:	05db      	lsls	r3, r3, #23
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d139      	bne.n	8000c0c <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b98:	4b5e      	ldr	r3, [pc, #376]	; (8000d14 <HAL_TIM_Base_MspInit+0x1e8>)
 8000b9a:	69da      	ldr	r2, [r3, #28]
 8000b9c:	4b5d      	ldr	r3, [pc, #372]	; (8000d14 <HAL_TIM_Base_MspInit+0x1e8>)
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	61da      	str	r2, [r3, #28]
 8000ba4:	4b5b      	ldr	r3, [pc, #364]	; (8000d14 <HAL_TIM_Base_MspInit+0x1e8>)
 8000ba6:	69db      	ldr	r3, [r3, #28]
 8000ba8:	2201      	movs	r2, #1
 8000baa:	4013      	ands	r3, r2
 8000bac:	61fb      	str	r3, [r7, #28]
 8000bae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb0:	4b58      	ldr	r3, [pc, #352]	; (8000d14 <HAL_TIM_Base_MspInit+0x1e8>)
 8000bb2:	695a      	ldr	r2, [r3, #20]
 8000bb4:	4b57      	ldr	r3, [pc, #348]	; (8000d14 <HAL_TIM_Base_MspInit+0x1e8>)
 8000bb6:	2180      	movs	r1, #128	; 0x80
 8000bb8:	0289      	lsls	r1, r1, #10
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	615a      	str	r2, [r3, #20]
 8000bbe:	4b55      	ldr	r3, [pc, #340]	; (8000d14 <HAL_TIM_Base_MspInit+0x1e8>)
 8000bc0:	695a      	ldr	r2, [r3, #20]
 8000bc2:	2380      	movs	r3, #128	; 0x80
 8000bc4:	029b      	lsls	r3, r3, #10
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	61bb      	str	r3, [r7, #24]
 8000bca:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bcc:	2124      	movs	r1, #36	; 0x24
 8000bce:	187b      	adds	r3, r7, r1
 8000bd0:	2203      	movs	r2, #3
 8000bd2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	2202      	movs	r2, #2
 8000bd8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	187b      	adds	r3, r7, r1
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	187b      	adds	r3, r7, r1
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000be6:	187b      	adds	r3, r7, r1
 8000be8:	2202      	movs	r2, #2
 8000bea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bec:	187a      	adds	r2, r7, r1
 8000bee:	2390      	movs	r3, #144	; 0x90
 8000bf0:	05db      	lsls	r3, r3, #23
 8000bf2:	0011      	movs	r1, r2
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f000 fe43 	bl	8001880 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	200f      	movs	r0, #15
 8000c00:	f000 fd8e 	bl	8001720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c04:	200f      	movs	r0, #15
 8000c06:	f000 fda0 	bl	800174a <HAL_NVIC_EnableIRQ>
}
 8000c0a:	e07d      	b.n	8000d08 <HAL_TIM_Base_MspInit+0x1dc>
  else if(htim_base->Instance==TIM3)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a41      	ldr	r2, [pc, #260]	; (8000d18 <HAL_TIM_Base_MspInit+0x1ec>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d138      	bne.n	8000c88 <HAL_TIM_Base_MspInit+0x15c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c16:	4b3f      	ldr	r3, [pc, #252]	; (8000d14 <HAL_TIM_Base_MspInit+0x1e8>)
 8000c18:	69da      	ldr	r2, [r3, #28]
 8000c1a:	4b3e      	ldr	r3, [pc, #248]	; (8000d14 <HAL_TIM_Base_MspInit+0x1e8>)
 8000c1c:	2102      	movs	r1, #2
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	61da      	str	r2, [r3, #28]
 8000c22:	4b3c      	ldr	r3, [pc, #240]	; (8000d14 <HAL_TIM_Base_MspInit+0x1e8>)
 8000c24:	69db      	ldr	r3, [r3, #28]
 8000c26:	2202      	movs	r2, #2
 8000c28:	4013      	ands	r3, r2
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2e:	4b39      	ldr	r3, [pc, #228]	; (8000d14 <HAL_TIM_Base_MspInit+0x1e8>)
 8000c30:	695a      	ldr	r2, [r3, #20]
 8000c32:	4b38      	ldr	r3, [pc, #224]	; (8000d14 <HAL_TIM_Base_MspInit+0x1e8>)
 8000c34:	2180      	movs	r1, #128	; 0x80
 8000c36:	02c9      	lsls	r1, r1, #11
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	615a      	str	r2, [r3, #20]
 8000c3c:	4b35      	ldr	r3, [pc, #212]	; (8000d14 <HAL_TIM_Base_MspInit+0x1e8>)
 8000c3e:	695a      	ldr	r2, [r3, #20]
 8000c40:	2380      	movs	r3, #128	; 0x80
 8000c42:	02db      	lsls	r3, r3, #11
 8000c44:	4013      	ands	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c4a:	2124      	movs	r1, #36	; 0x24
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	2203      	movs	r2, #3
 8000c50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	187b      	adds	r3, r7, r1
 8000c54:	2202      	movs	r2, #2
 8000c56:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	187b      	adds	r3, r7, r1
 8000c60:	2200      	movs	r2, #0
 8000c62:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000c64:	187b      	adds	r3, r7, r1
 8000c66:	2201      	movs	r2, #1
 8000c68:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6a:	187b      	adds	r3, r7, r1
 8000c6c:	4a2b      	ldr	r2, [pc, #172]	; (8000d1c <HAL_TIM_Base_MspInit+0x1f0>)
 8000c6e:	0019      	movs	r1, r3
 8000c70:	0010      	movs	r0, r2
 8000c72:	f000 fe05 	bl	8001880 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2010      	movs	r0, #16
 8000c7c:	f000 fd50 	bl	8001720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c80:	2010      	movs	r0, #16
 8000c82:	f000 fd62 	bl	800174a <HAL_NVIC_EnableIRQ>
}
 8000c86:	e03f      	b.n	8000d08 <HAL_TIM_Base_MspInit+0x1dc>
  else if(htim_base->Instance==TIM14)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a24      	ldr	r2, [pc, #144]	; (8000d20 <HAL_TIM_Base_MspInit+0x1f4>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d13a      	bne.n	8000d08 <HAL_TIM_Base_MspInit+0x1dc>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000c92:	4b20      	ldr	r3, [pc, #128]	; (8000d14 <HAL_TIM_Base_MspInit+0x1e8>)
 8000c94:	69da      	ldr	r2, [r3, #28]
 8000c96:	4b1f      	ldr	r3, [pc, #124]	; (8000d14 <HAL_TIM_Base_MspInit+0x1e8>)
 8000c98:	2180      	movs	r1, #128	; 0x80
 8000c9a:	0049      	lsls	r1, r1, #1
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	61da      	str	r2, [r3, #28]
 8000ca0:	4b1c      	ldr	r3, [pc, #112]	; (8000d14 <HAL_TIM_Base_MspInit+0x1e8>)
 8000ca2:	69da      	ldr	r2, [r3, #28]
 8000ca4:	2380      	movs	r3, #128	; 0x80
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cae:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <HAL_TIM_Base_MspInit+0x1e8>)
 8000cb0:	695a      	ldr	r2, [r3, #20]
 8000cb2:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <HAL_TIM_Base_MspInit+0x1e8>)
 8000cb4:	2180      	movs	r1, #128	; 0x80
 8000cb6:	0289      	lsls	r1, r1, #10
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	615a      	str	r2, [r3, #20]
 8000cbc:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <HAL_TIM_Base_MspInit+0x1e8>)
 8000cbe:	695a      	ldr	r2, [r3, #20]
 8000cc0:	2380      	movs	r3, #128	; 0x80
 8000cc2:	029b      	lsls	r3, r3, #10
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cca:	2124      	movs	r1, #36	; 0x24
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	2210      	movs	r2, #16
 8000cd0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	187b      	adds	r3, r7, r1
 8000cd4:	2202      	movs	r2, #2
 8000cd6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	187b      	adds	r3, r7, r1
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8000ce4:	187b      	adds	r3, r7, r1
 8000ce6:	2204      	movs	r2, #4
 8000ce8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cea:	187a      	adds	r2, r7, r1
 8000cec:	2390      	movs	r3, #144	; 0x90
 8000cee:	05db      	lsls	r3, r3, #23
 8000cf0:	0011      	movs	r1, r2
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f000 fdc4 	bl	8001880 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	2013      	movs	r0, #19
 8000cfe:	f000 fd0f 	bl	8001720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000d02:	2013      	movs	r0, #19
 8000d04:	f000 fd21 	bl	800174a <HAL_NVIC_EnableIRQ>
}
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b00e      	add	sp, #56	; 0x38
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40012c00 	.word	0x40012c00
 8000d14:	40021000 	.word	0x40021000
 8000d18:	40000400 	.word	0x40000400
 8000d1c:	48000400 	.word	0x48000400
 8000d20:	40002000 	.word	0x40002000

08000d24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d24:	b590      	push	{r4, r7, lr}
 8000d26:	b08b      	sub	sp, #44	; 0x2c
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	2414      	movs	r4, #20
 8000d2e:	193b      	adds	r3, r7, r4
 8000d30:	0018      	movs	r0, r3
 8000d32:	2314      	movs	r3, #20
 8000d34:	001a      	movs	r2, r3
 8000d36:	2100      	movs	r1, #0
 8000d38:	f003 faf6 	bl	8004328 <memset>
  if(htim->Instance==TIM1)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a2b      	ldr	r2, [pc, #172]	; (8000df0 <HAL_TIM_MspPostInit+0xcc>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d126      	bne.n	8000d94 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	4b2b      	ldr	r3, [pc, #172]	; (8000df4 <HAL_TIM_MspPostInit+0xd0>)
 8000d48:	695a      	ldr	r2, [r3, #20]
 8000d4a:	4b2a      	ldr	r3, [pc, #168]	; (8000df4 <HAL_TIM_MspPostInit+0xd0>)
 8000d4c:	2180      	movs	r1, #128	; 0x80
 8000d4e:	0289      	lsls	r1, r1, #10
 8000d50:	430a      	orrs	r2, r1
 8000d52:	615a      	str	r2, [r3, #20]
 8000d54:	4b27      	ldr	r3, [pc, #156]	; (8000df4 <HAL_TIM_MspPostInit+0xd0>)
 8000d56:	695a      	ldr	r2, [r3, #20]
 8000d58:	2380      	movs	r3, #128	; 0x80
 8000d5a:	029b      	lsls	r3, r3, #10
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000d62:	193b      	adds	r3, r7, r4
 8000d64:	22e0      	movs	r2, #224	; 0xe0
 8000d66:	00d2      	lsls	r2, r2, #3
 8000d68:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	0021      	movs	r1, r4
 8000d6c:	187b      	adds	r3, r7, r1
 8000d6e:	2202      	movs	r2, #2
 8000d70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	187b      	adds	r3, r7, r1
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	187b      	adds	r3, r7, r1
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000d7e:	187b      	adds	r3, r7, r1
 8000d80:	2202      	movs	r2, #2
 8000d82:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d84:	187a      	adds	r2, r7, r1
 8000d86:	2390      	movs	r3, #144	; 0x90
 8000d88:	05db      	lsls	r3, r3, #23
 8000d8a:	0011      	movs	r1, r2
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f000 fd77 	bl	8001880 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d92:	e028      	b.n	8000de6 <HAL_TIM_MspPostInit+0xc2>
  else if(htim->Instance==TIM3)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a17      	ldr	r2, [pc, #92]	; (8000df8 <HAL_TIM_MspPostInit+0xd4>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d123      	bne.n	8000de6 <HAL_TIM_MspPostInit+0xc2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <HAL_TIM_MspPostInit+0xd0>)
 8000da0:	695a      	ldr	r2, [r3, #20]
 8000da2:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <HAL_TIM_MspPostInit+0xd0>)
 8000da4:	2180      	movs	r1, #128	; 0x80
 8000da6:	02c9      	lsls	r1, r1, #11
 8000da8:	430a      	orrs	r2, r1
 8000daa:	615a      	str	r2, [r3, #20]
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <HAL_TIM_MspPostInit+0xd0>)
 8000dae:	695a      	ldr	r2, [r3, #20]
 8000db0:	2380      	movs	r3, #128	; 0x80
 8000db2:	02db      	lsls	r3, r3, #11
 8000db4:	4013      	ands	r3, r2
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000dba:	2114      	movs	r1, #20
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	2230      	movs	r2, #48	; 0x30
 8000dc0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dda:	187b      	adds	r3, r7, r1
 8000ddc:	4a07      	ldr	r2, [pc, #28]	; (8000dfc <HAL_TIM_MspPostInit+0xd8>)
 8000dde:	0019      	movs	r1, r3
 8000de0:	0010      	movs	r0, r2
 8000de2:	f000 fd4d 	bl	8001880 <HAL_GPIO_Init>
}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	46bd      	mov	sp, r7
 8000dea:	b00b      	add	sp, #44	; 0x2c
 8000dec:	bd90      	pop	{r4, r7, pc}
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	40012c00 	.word	0x40012c00
 8000df4:	40021000 	.word	0x40021000
 8000df8:	40000400 	.word	0x40000400
 8000dfc:	48000400 	.word	0x48000400

08000e00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e00:	b590      	push	{r4, r7, lr}
 8000e02:	b08b      	sub	sp, #44	; 0x2c
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	2414      	movs	r4, #20
 8000e0a:	193b      	adds	r3, r7, r4
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	2314      	movs	r3, #20
 8000e10:	001a      	movs	r2, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	f003 fa88 	bl	8004328 <memset>
  if(huart->Instance==USART2)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a20      	ldr	r2, [pc, #128]	; (8000ea0 <HAL_UART_MspInit+0xa0>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d13a      	bne.n	8000e98 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e22:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <HAL_UART_MspInit+0xa4>)
 8000e24:	69da      	ldr	r2, [r3, #28]
 8000e26:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <HAL_UART_MspInit+0xa4>)
 8000e28:	2180      	movs	r1, #128	; 0x80
 8000e2a:	0289      	lsls	r1, r1, #10
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	61da      	str	r2, [r3, #28]
 8000e30:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <HAL_UART_MspInit+0xa4>)
 8000e32:	69da      	ldr	r2, [r3, #28]
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	029b      	lsls	r3, r3, #10
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3e:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <HAL_UART_MspInit+0xa4>)
 8000e40:	695a      	ldr	r2, [r3, #20]
 8000e42:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <HAL_UART_MspInit+0xa4>)
 8000e44:	2180      	movs	r1, #128	; 0x80
 8000e46:	0289      	lsls	r1, r1, #10
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	615a      	str	r2, [r3, #20]
 8000e4c:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <HAL_UART_MspInit+0xa4>)
 8000e4e:	695a      	ldr	r2, [r3, #20]
 8000e50:	2380      	movs	r3, #128	; 0x80
 8000e52:	029b      	lsls	r3, r3, #10
 8000e54:	4013      	ands	r3, r2
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e5a:	0021      	movs	r1, r4
 8000e5c:	187b      	adds	r3, r7, r1
 8000e5e:	220c      	movs	r2, #12
 8000e60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	187b      	adds	r3, r7, r1
 8000e64:	2202      	movs	r2, #2
 8000e66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e6e:	187b      	adds	r3, r7, r1
 8000e70:	2203      	movs	r2, #3
 8000e72:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000e74:	187b      	adds	r3, r7, r1
 8000e76:	2201      	movs	r2, #1
 8000e78:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7a:	187a      	adds	r2, r7, r1
 8000e7c:	2390      	movs	r3, #144	; 0x90
 8000e7e:	05db      	lsls	r3, r3, #23
 8000e80:	0011      	movs	r1, r2
 8000e82:	0018      	movs	r0, r3
 8000e84:	f000 fcfc 	bl	8001880 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	201c      	movs	r0, #28
 8000e8e:	f000 fc47 	bl	8001720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e92:	201c      	movs	r0, #28
 8000e94:	f000 fc59 	bl	800174a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e98:	46c0      	nop			; (mov r8, r8)
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	b00b      	add	sp, #44	; 0x2c
 8000e9e:	bd90      	pop	{r4, r7, pc}
 8000ea0:	40004400 	.word	0x40004400
 8000ea4:	40021000 	.word	0x40021000

08000ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <NMI_Handler+0x4>

08000eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <HardFault_Handler+0x4>

08000eb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000eb8:	46c0      	nop			; (mov r8, r8)
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ecc:	f000 f8dc 	bl	8001088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed0:	46c0      	nop			; (mov r8, r8)
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f001 fc7c 	bl	80027dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000ee4:	46c0      	nop			; (mov r8, r8)
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	20000050 	.word	0x20000050

08000ef0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <TIM1_CC_IRQHandler+0x14>)
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f001 fc70 	bl	80027dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000efc:	46c0      	nop			; (mov r8, r8)
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	20000050 	.word	0x20000050

08000f08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f0c:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <TIM2_IRQHandler+0x14>)
 8000f0e:	0018      	movs	r0, r3
 8000f10:	f001 fc64 	bl	80027dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f14:	46c0      	nop			; (mov r8, r8)
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	20000098 	.word	0x20000098

08000f20 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	//FEB_Test_PWM();

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <TIM3_IRQHandler+0x14>)
 8000f26:	0018      	movs	r0, r3
 8000f28:	f001 fc58 	bl	80027dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f2c:	46c0      	nop			; (mov r8, r8)
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	200000e0 	.word	0x200000e0

08000f38 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000f3c:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <TIM14_IRQHandler+0x14>)
 8000f3e:	0018      	movs	r0, r3
 8000f40:	f001 fc4c 	bl	80027dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000f44:	46c0      	nop			; (mov r8, r8)
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	20000128 	.word	0x20000128

08000f50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f54:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <USART2_IRQHandler+0x14>)
 8000f56:	0018      	movs	r0, r3
 8000f58:	f002 fb36 	bl	80035c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f5c:	46c0      	nop			; (mov r8, r8)
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	20000170 	.word	0x20000170

08000f68 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000f6c:	46c0      	nop			; (mov r8, r8)
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f74:	4813      	ldr	r0, [pc, #76]	; (8000fc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f76:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f78:	f7ff fff6 	bl	8000f68 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000f7c:	4812      	ldr	r0, [pc, #72]	; (8000fc8 <LoopForever+0x6>)
    LDR R1, [R0]
 8000f7e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000f80:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000f82:	4a12      	ldr	r2, [pc, #72]	; (8000fcc <LoopForever+0xa>)
    CMP R1, R2
 8000f84:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000f86:	d105      	bne.n	8000f94 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000f88:	4811      	ldr	r0, [pc, #68]	; (8000fd0 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000f8a:	4912      	ldr	r1, [pc, #72]	; (8000fd4 <LoopForever+0x12>)
    STR R1, [R0]
 8000f8c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000f8e:	4812      	ldr	r0, [pc, #72]	; (8000fd8 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000f90:	4912      	ldr	r1, [pc, #72]	; (8000fdc <LoopForever+0x1a>)
    STR R1, [R0]
 8000f92:	6001      	str	r1, [r0, #0]

08000f94 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f94:	4812      	ldr	r0, [pc, #72]	; (8000fe0 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000f96:	4913      	ldr	r1, [pc, #76]	; (8000fe4 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000f98:	4a13      	ldr	r2, [pc, #76]	; (8000fe8 <LoopForever+0x26>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f9c:	e002      	b.n	8000fa4 <LoopCopyDataInit>

08000f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa2:	3304      	adds	r3, #4

08000fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa8:	d3f9      	bcc.n	8000f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000faa:	4a10      	ldr	r2, [pc, #64]	; (8000fec <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000fac:	4c10      	ldr	r4, [pc, #64]	; (8000ff0 <LoopForever+0x2e>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb0:	e001      	b.n	8000fb6 <LoopFillZerobss>

08000fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb4:	3204      	adds	r2, #4

08000fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb8:	d3fb      	bcc.n	8000fb2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fba:	f003 f9bd 	bl	8004338 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fbe:	f7ff fa72 	bl	80004a6 <main>

08000fc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fc2:	e7fe      	b.n	8000fc2 <LoopForever>
  ldr   r0, =_estack
 8000fc4:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000fc8:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000fcc:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000fd0:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000fd4:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000fd8:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000fdc:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000fe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fe8:	080043d8 	.word	0x080043d8
  ldr r2, =_sbss
 8000fec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ff0:	200001fc 	.word	0x200001fc

08000ff4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ff4:	e7fe      	b.n	8000ff4 <ADC1_IRQHandler>
	...

08000ff8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <HAL_Init+0x24>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_Init+0x24>)
 8001002:	2110      	movs	r1, #16
 8001004:	430a      	orrs	r2, r1
 8001006:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001008:	2003      	movs	r0, #3
 800100a:	f000 f809 	bl	8001020 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800100e:	f7ff fd1b 	bl	8000a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001012:	2300      	movs	r3, #0
}
 8001014:	0018      	movs	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	40022000 	.word	0x40022000

08001020 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001028:	4b14      	ldr	r3, [pc, #80]	; (800107c <HAL_InitTick+0x5c>)
 800102a:	681c      	ldr	r4, [r3, #0]
 800102c:	4b14      	ldr	r3, [pc, #80]	; (8001080 <HAL_InitTick+0x60>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	0019      	movs	r1, r3
 8001032:	23fa      	movs	r3, #250	; 0xfa
 8001034:	0098      	lsls	r0, r3, #2
 8001036:	f7ff f867 	bl	8000108 <__udivsi3>
 800103a:	0003      	movs	r3, r0
 800103c:	0019      	movs	r1, r3
 800103e:	0020      	movs	r0, r4
 8001040:	f7ff f862 	bl	8000108 <__udivsi3>
 8001044:	0003      	movs	r3, r0
 8001046:	0018      	movs	r0, r3
 8001048:	f000 fb8f 	bl	800176a <HAL_SYSTICK_Config>
 800104c:	1e03      	subs	r3, r0, #0
 800104e:	d001      	beq.n	8001054 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e00f      	b.n	8001074 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b03      	cmp	r3, #3
 8001058:	d80b      	bhi.n	8001072 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	2301      	movs	r3, #1
 800105e:	425b      	negs	r3, r3
 8001060:	2200      	movs	r2, #0
 8001062:	0018      	movs	r0, r3
 8001064:	f000 fb5c 	bl	8001720 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_InitTick+0x64>)
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800106e:	2300      	movs	r3, #0
 8001070:	e000      	b.n	8001074 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
}
 8001074:	0018      	movs	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	b003      	add	sp, #12
 800107a:	bd90      	pop	{r4, r7, pc}
 800107c:	20000000 	.word	0x20000000
 8001080:	20000008 	.word	0x20000008
 8001084:	20000004 	.word	0x20000004

08001088 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <HAL_IncTick+0x1c>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	001a      	movs	r2, r3
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <HAL_IncTick+0x20>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	18d2      	adds	r2, r2, r3
 8001098:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <HAL_IncTick+0x20>)
 800109a:	601a      	str	r2, [r3, #0]
}
 800109c:	46c0      	nop			; (mov r8, r8)
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	20000008 	.word	0x20000008
 80010a8:	200001f8 	.word	0x200001f8

080010ac <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  return uwTick;
 80010b0:	4b02      	ldr	r3, [pc, #8]	; (80010bc <HAL_GetTick+0x10>)
 80010b2:	681b      	ldr	r3, [r3, #0]
}
 80010b4:	0018      	movs	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	200001f8 	.word	0x200001f8

080010c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c8:	f7ff fff0 	bl	80010ac <HAL_GetTick>
 80010cc:	0003      	movs	r3, r0
 80010ce:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	3301      	adds	r3, #1
 80010d8:	d005      	beq.n	80010e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010da:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <HAL_Delay+0x44>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	001a      	movs	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	189b      	adds	r3, r3, r2
 80010e4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	f7ff ffe0 	bl	80010ac <HAL_GetTick>
 80010ec:	0002      	movs	r2, r0
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d8f7      	bhi.n	80010e8 <HAL_Delay+0x28>
  {
  }
}
 80010f8:	46c0      	nop			; (mov r8, r8)
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	46bd      	mov	sp, r7
 80010fe:	b004      	add	sp, #16
 8001100:	bd80      	pop	{r7, pc}
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	20000008 	.word	0x20000008

08001108 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d101      	bne.n	800111a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e0f0      	b.n	80012fc <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2220      	movs	r2, #32
 800111e:	5c9b      	ldrb	r3, [r3, r2]
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b00      	cmp	r3, #0
 8001124:	d103      	bne.n	800112e <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	0018      	movs	r0, r3
 800112a:	f7ff fcb1 	bl	8000a90 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2101      	movs	r1, #1
 800113a:	430a      	orrs	r2, r1
 800113c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800113e:	f7ff ffb5 	bl	80010ac <HAL_GetTick>
 8001142:	0003      	movs	r3, r0
 8001144:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001146:	e013      	b.n	8001170 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001148:	f7ff ffb0 	bl	80010ac <HAL_GetTick>
 800114c:	0002      	movs	r2, r0
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b0a      	cmp	r3, #10
 8001154:	d90c      	bls.n	8001170 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115a:	2280      	movs	r2, #128	; 0x80
 800115c:	0292      	lsls	r2, r2, #10
 800115e:	431a      	orrs	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2220      	movs	r2, #32
 8001168:	2105      	movs	r1, #5
 800116a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e0c5      	b.n	80012fc <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	2201      	movs	r2, #1
 8001178:	4013      	ands	r3, r2
 800117a:	d0e5      	beq.n	8001148 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2102      	movs	r1, #2
 8001188:	438a      	bics	r2, r1
 800118a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800118c:	f7ff ff8e 	bl	80010ac <HAL_GetTick>
 8001190:	0003      	movs	r3, r0
 8001192:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001194:	e013      	b.n	80011be <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001196:	f7ff ff89 	bl	80010ac <HAL_GetTick>
 800119a:	0002      	movs	r2, r0
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b0a      	cmp	r3, #10
 80011a2:	d90c      	bls.n	80011be <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a8:	2280      	movs	r2, #128	; 0x80
 80011aa:	0292      	lsls	r2, r2, #10
 80011ac:	431a      	orrs	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2220      	movs	r2, #32
 80011b6:	2105      	movs	r1, #5
 80011b8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e09e      	b.n	80012fc <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2202      	movs	r2, #2
 80011c6:	4013      	ands	r3, r2
 80011c8:	d1e5      	bne.n	8001196 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	7e1b      	ldrb	r3, [r3, #24]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d108      	bne.n	80011e4 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2180      	movs	r1, #128	; 0x80
 80011de:	430a      	orrs	r2, r1
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	e007      	b.n	80011f4 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2180      	movs	r1, #128	; 0x80
 80011f0:	438a      	bics	r2, r1
 80011f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	7e5b      	ldrb	r3, [r3, #25]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d108      	bne.n	800120e <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2140      	movs	r1, #64	; 0x40
 8001208:	430a      	orrs	r2, r1
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	e007      	b.n	800121e <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2140      	movs	r1, #64	; 0x40
 800121a:	438a      	bics	r2, r1
 800121c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	7e9b      	ldrb	r3, [r3, #26]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d108      	bne.n	8001238 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2120      	movs	r1, #32
 8001232:	430a      	orrs	r2, r1
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	e007      	b.n	8001248 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2120      	movs	r1, #32
 8001244:	438a      	bics	r2, r1
 8001246:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	7edb      	ldrb	r3, [r3, #27]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d108      	bne.n	8001262 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2110      	movs	r1, #16
 800125c:	438a      	bics	r2, r1
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	e007      	b.n	8001272 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2110      	movs	r1, #16
 800126e:	430a      	orrs	r2, r1
 8001270:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	7f1b      	ldrb	r3, [r3, #28]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d108      	bne.n	800128c <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2108      	movs	r1, #8
 8001286:	430a      	orrs	r2, r1
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	e007      	b.n	800129c <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2108      	movs	r1, #8
 8001298:	438a      	bics	r2, r1
 800129a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	7f5b      	ldrb	r3, [r3, #29]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d108      	bne.n	80012b6 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2104      	movs	r1, #4
 80012b0:	430a      	orrs	r2, r1
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	e007      	b.n	80012c6 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2104      	movs	r1, #4
 80012c2:	438a      	bics	r2, r1
 80012c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	431a      	orrs	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	691b      	ldr	r3, [r3, #16]
 80012d4:	431a      	orrs	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	431a      	orrs	r2, r3
 80012dc:	0011      	movs	r1, r2
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	1e5a      	subs	r2, r3, #1
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	430a      	orrs	r2, r1
 80012ea:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2220      	movs	r2, #32
 80012f6:	2101      	movs	r1, #1
 80012f8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	0018      	movs	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	b004      	add	sp, #16
 8001302:	bd80      	pop	{r7, pc}

08001304 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001314:	2013      	movs	r0, #19
 8001316:	183b      	adds	r3, r7, r0
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	2120      	movs	r1, #32
 800131c:	5c52      	ldrb	r2, [r2, r1]
 800131e:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8001320:	0002      	movs	r2, r0
 8001322:	18bb      	adds	r3, r7, r2
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d004      	beq.n	8001334 <HAL_CAN_ConfigFilter+0x30>
 800132a:	18bb      	adds	r3, r7, r2
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b02      	cmp	r3, #2
 8001330:	d000      	beq.n	8001334 <HAL_CAN_ConfigFilter+0x30>
 8001332:	e0cd      	b.n	80014d0 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001334:	697a      	ldr	r2, [r7, #20]
 8001336:	2380      	movs	r3, #128	; 0x80
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	58d3      	ldr	r3, [r2, r3]
 800133c:	2201      	movs	r2, #1
 800133e:	431a      	orrs	r2, r3
 8001340:	0011      	movs	r1, r2
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	2380      	movs	r3, #128	; 0x80
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	221f      	movs	r2, #31
 8001350:	4013      	ands	r3, r2
 8001352:	2201      	movs	r2, #1
 8001354:	409a      	lsls	r2, r3
 8001356:	0013      	movs	r3, r2
 8001358:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	2387      	movs	r3, #135	; 0x87
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	58d3      	ldr	r3, [r2, r3]
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	43d2      	mvns	r2, r2
 8001366:	401a      	ands	r2, r3
 8001368:	0011      	movs	r1, r2
 800136a:	697a      	ldr	r2, [r7, #20]
 800136c:	2387      	movs	r3, #135	; 0x87
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d129      	bne.n	80013ce <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	2383      	movs	r3, #131	; 0x83
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	58d3      	ldr	r3, [r2, r3]
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	43d2      	mvns	r2, r2
 8001386:	401a      	ands	r2, r3
 8001388:	0011      	movs	r1, r2
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	2383      	movs	r3, #131	; 0x83
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	041b      	lsls	r3, r3, #16
 800139e:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80013a4:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	3248      	adds	r2, #72	; 0x48
 80013aa:	00d2      	lsls	r2, r2, #3
 80013ac:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	041b      	lsls	r3, r3, #16
 80013ba:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013c0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013c2:	6979      	ldr	r1, [r7, #20]
 80013c4:	3348      	adds	r3, #72	; 0x48
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	18cb      	adds	r3, r1, r3
 80013ca:	3304      	adds	r3, #4
 80013cc:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d128      	bne.n	8001428 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	2383      	movs	r3, #131	; 0x83
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	58d2      	ldr	r2, [r2, r3]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	431a      	orrs	r2, r3
 80013e2:	0011      	movs	r1, r2
 80013e4:	697a      	ldr	r2, [r7, #20]
 80013e6:	2383      	movs	r3, #131	; 0x83
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	041b      	lsls	r3, r3, #16
 80013f8:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80013fe:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	3248      	adds	r2, #72	; 0x48
 8001404:	00d2      	lsls	r2, r2, #3
 8001406:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	041b      	lsls	r3, r3, #16
 8001414:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800141a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800141c:	6979      	ldr	r1, [r7, #20]
 800141e:	3348      	adds	r3, #72	; 0x48
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	18cb      	adds	r3, r1, r3
 8001424:	3304      	adds	r3, #4
 8001426:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d10c      	bne.n	800144a <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001430:	697a      	ldr	r2, [r7, #20]
 8001432:	2381      	movs	r3, #129	; 0x81
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	58d3      	ldr	r3, [r2, r3]
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	43d2      	mvns	r2, r2
 800143c:	401a      	ands	r2, r3
 800143e:	0011      	movs	r1, r2
 8001440:	697a      	ldr	r2, [r7, #20]
 8001442:	2381      	movs	r3, #129	; 0x81
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	50d1      	str	r1, [r2, r3]
 8001448:	e00a      	b.n	8001460 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	2381      	movs	r3, #129	; 0x81
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	58d2      	ldr	r2, [r2, r3]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	431a      	orrs	r2, r3
 8001456:	0011      	movs	r1, r2
 8001458:	697a      	ldr	r2, [r7, #20]
 800145a:	2381      	movs	r3, #129	; 0x81
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d10c      	bne.n	8001482 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001468:	697a      	ldr	r2, [r7, #20]
 800146a:	2385      	movs	r3, #133	; 0x85
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	58d3      	ldr	r3, [r2, r3]
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	43d2      	mvns	r2, r2
 8001474:	401a      	ands	r2, r3
 8001476:	0011      	movs	r1, r2
 8001478:	697a      	ldr	r2, [r7, #20]
 800147a:	2385      	movs	r3, #133	; 0x85
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	50d1      	str	r1, [r2, r3]
 8001480:	e00a      	b.n	8001498 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001482:	697a      	ldr	r2, [r7, #20]
 8001484:	2385      	movs	r3, #133	; 0x85
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	58d2      	ldr	r2, [r2, r3]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	431a      	orrs	r2, r3
 800148e:	0011      	movs	r1, r2
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	2385      	movs	r3, #133	; 0x85
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d10a      	bne.n	80014b6 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80014a0:	697a      	ldr	r2, [r7, #20]
 80014a2:	2387      	movs	r3, #135	; 0x87
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	58d2      	ldr	r2, [r2, r3]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	431a      	orrs	r2, r3
 80014ac:	0011      	movs	r1, r2
 80014ae:	697a      	ldr	r2, [r7, #20]
 80014b0:	2387      	movs	r3, #135	; 0x87
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	2380      	movs	r3, #128	; 0x80
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	58d3      	ldr	r3, [r2, r3]
 80014be:	2201      	movs	r2, #1
 80014c0:	4393      	bics	r3, r2
 80014c2:	0019      	movs	r1, r3
 80014c4:	697a      	ldr	r2, [r7, #20]
 80014c6:	2380      	movs	r3, #128	; 0x80
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 80014cc:	2300      	movs	r3, #0
 80014ce:	e007      	b.n	80014e0 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d4:	2280      	movs	r2, #128	; 0x80
 80014d6:	02d2      	lsls	r2, r2, #11
 80014d8:	431a      	orrs	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
  }
}
 80014e0:	0018      	movs	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	b006      	add	sp, #24
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2220      	movs	r2, #32
 80014f4:	5c9b      	ldrb	r3, [r3, r2]
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d12f      	bne.n	800155c <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2220      	movs	r2, #32
 8001500:	2102      	movs	r1, #2
 8001502:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2101      	movs	r1, #1
 8001510:	438a      	bics	r2, r1
 8001512:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001514:	f7ff fdca 	bl	80010ac <HAL_GetTick>
 8001518:	0003      	movs	r3, r0
 800151a:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800151c:	e013      	b.n	8001546 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800151e:	f7ff fdc5 	bl	80010ac <HAL_GetTick>
 8001522:	0002      	movs	r2, r0
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b0a      	cmp	r3, #10
 800152a:	d90c      	bls.n	8001546 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001530:	2280      	movs	r2, #128	; 0x80
 8001532:	0292      	lsls	r2, r2, #10
 8001534:	431a      	orrs	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2220      	movs	r2, #32
 800153e:	2105      	movs	r1, #5
 8001540:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e012      	b.n	800156c <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2201      	movs	r2, #1
 800154e:	4013      	ands	r3, r2
 8001550:	d1e5      	bne.n	800151e <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001558:	2300      	movs	r3, #0
 800155a:	e007      	b.n	800156c <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001560:	2280      	movs	r2, #128	; 0x80
 8001562:	0312      	lsls	r2, r2, #12
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
  }
}
 800156c:	0018      	movs	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	b004      	add	sp, #16
 8001572:	bd80      	pop	{r7, pc}

08001574 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800157e:	200f      	movs	r0, #15
 8001580:	183b      	adds	r3, r7, r0
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	2120      	movs	r1, #32
 8001586:	5c52      	ldrb	r2, [r2, r1]
 8001588:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800158a:	0002      	movs	r2, r0
 800158c:	18bb      	adds	r3, r7, r2
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d003      	beq.n	800159c <HAL_CAN_ActivateNotification+0x28>
 8001594:	18bb      	adds	r3, r7, r2
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b02      	cmp	r3, #2
 800159a:	d109      	bne.n	80015b0 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6959      	ldr	r1, [r3, #20]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80015ac:	2300      	movs	r3, #0
 80015ae:	e007      	b.n	80015c0 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b4:	2280      	movs	r2, #128	; 0x80
 80015b6:	02d2      	lsls	r2, r2, #11
 80015b8:	431a      	orrs	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
  }
}
 80015c0:	0018      	movs	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	b004      	add	sp, #16
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	0002      	movs	r2, r0
 80015d0:	1dfb      	adds	r3, r7, #7
 80015d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015d4:	1dfb      	adds	r3, r7, #7
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b7f      	cmp	r3, #127	; 0x7f
 80015da:	d809      	bhi.n	80015f0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015dc:	1dfb      	adds	r3, r7, #7
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	001a      	movs	r2, r3
 80015e2:	231f      	movs	r3, #31
 80015e4:	401a      	ands	r2, r3
 80015e6:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <__NVIC_EnableIRQ+0x30>)
 80015e8:	2101      	movs	r1, #1
 80015ea:	4091      	lsls	r1, r2
 80015ec:	000a      	movs	r2, r1
 80015ee:	601a      	str	r2, [r3, #0]
  }
}
 80015f0:	46c0      	nop			; (mov r8, r8)
 80015f2:	46bd      	mov	sp, r7
 80015f4:	b002      	add	sp, #8
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	e000e100 	.word	0xe000e100

080015fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015fc:	b590      	push	{r4, r7, lr}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	0002      	movs	r2, r0
 8001604:	6039      	str	r1, [r7, #0]
 8001606:	1dfb      	adds	r3, r7, #7
 8001608:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800160a:	1dfb      	adds	r3, r7, #7
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b7f      	cmp	r3, #127	; 0x7f
 8001610:	d828      	bhi.n	8001664 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001612:	4a2f      	ldr	r2, [pc, #188]	; (80016d0 <__NVIC_SetPriority+0xd4>)
 8001614:	1dfb      	adds	r3, r7, #7
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	b25b      	sxtb	r3, r3
 800161a:	089b      	lsrs	r3, r3, #2
 800161c:	33c0      	adds	r3, #192	; 0xc0
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	589b      	ldr	r3, [r3, r2]
 8001622:	1dfa      	adds	r2, r7, #7
 8001624:	7812      	ldrb	r2, [r2, #0]
 8001626:	0011      	movs	r1, r2
 8001628:	2203      	movs	r2, #3
 800162a:	400a      	ands	r2, r1
 800162c:	00d2      	lsls	r2, r2, #3
 800162e:	21ff      	movs	r1, #255	; 0xff
 8001630:	4091      	lsls	r1, r2
 8001632:	000a      	movs	r2, r1
 8001634:	43d2      	mvns	r2, r2
 8001636:	401a      	ands	r2, r3
 8001638:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	019b      	lsls	r3, r3, #6
 800163e:	22ff      	movs	r2, #255	; 0xff
 8001640:	401a      	ands	r2, r3
 8001642:	1dfb      	adds	r3, r7, #7
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	0018      	movs	r0, r3
 8001648:	2303      	movs	r3, #3
 800164a:	4003      	ands	r3, r0
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001650:	481f      	ldr	r0, [pc, #124]	; (80016d0 <__NVIC_SetPriority+0xd4>)
 8001652:	1dfb      	adds	r3, r7, #7
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	b25b      	sxtb	r3, r3
 8001658:	089b      	lsrs	r3, r3, #2
 800165a:	430a      	orrs	r2, r1
 800165c:	33c0      	adds	r3, #192	; 0xc0
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001662:	e031      	b.n	80016c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001664:	4a1b      	ldr	r2, [pc, #108]	; (80016d4 <__NVIC_SetPriority+0xd8>)
 8001666:	1dfb      	adds	r3, r7, #7
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	0019      	movs	r1, r3
 800166c:	230f      	movs	r3, #15
 800166e:	400b      	ands	r3, r1
 8001670:	3b08      	subs	r3, #8
 8001672:	089b      	lsrs	r3, r3, #2
 8001674:	3306      	adds	r3, #6
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	18d3      	adds	r3, r2, r3
 800167a:	3304      	adds	r3, #4
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	1dfa      	adds	r2, r7, #7
 8001680:	7812      	ldrb	r2, [r2, #0]
 8001682:	0011      	movs	r1, r2
 8001684:	2203      	movs	r2, #3
 8001686:	400a      	ands	r2, r1
 8001688:	00d2      	lsls	r2, r2, #3
 800168a:	21ff      	movs	r1, #255	; 0xff
 800168c:	4091      	lsls	r1, r2
 800168e:	000a      	movs	r2, r1
 8001690:	43d2      	mvns	r2, r2
 8001692:	401a      	ands	r2, r3
 8001694:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	019b      	lsls	r3, r3, #6
 800169a:	22ff      	movs	r2, #255	; 0xff
 800169c:	401a      	ands	r2, r3
 800169e:	1dfb      	adds	r3, r7, #7
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	0018      	movs	r0, r3
 80016a4:	2303      	movs	r3, #3
 80016a6:	4003      	ands	r3, r0
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016ac:	4809      	ldr	r0, [pc, #36]	; (80016d4 <__NVIC_SetPriority+0xd8>)
 80016ae:	1dfb      	adds	r3, r7, #7
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	001c      	movs	r4, r3
 80016b4:	230f      	movs	r3, #15
 80016b6:	4023      	ands	r3, r4
 80016b8:	3b08      	subs	r3, #8
 80016ba:	089b      	lsrs	r3, r3, #2
 80016bc:	430a      	orrs	r2, r1
 80016be:	3306      	adds	r3, #6
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	18c3      	adds	r3, r0, r3
 80016c4:	3304      	adds	r3, #4
 80016c6:	601a      	str	r2, [r3, #0]
}
 80016c8:	46c0      	nop			; (mov r8, r8)
 80016ca:	46bd      	mov	sp, r7
 80016cc:	b003      	add	sp, #12
 80016ce:	bd90      	pop	{r4, r7, pc}
 80016d0:	e000e100 	.word	0xe000e100
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	1e5a      	subs	r2, r3, #1
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	045b      	lsls	r3, r3, #17
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d301      	bcc.n	80016f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ec:	2301      	movs	r3, #1
 80016ee:	e010      	b.n	8001712 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f0:	4b0a      	ldr	r3, [pc, #40]	; (800171c <SysTick_Config+0x44>)
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	3a01      	subs	r2, #1
 80016f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016f8:	2301      	movs	r3, #1
 80016fa:	425b      	negs	r3, r3
 80016fc:	2103      	movs	r1, #3
 80016fe:	0018      	movs	r0, r3
 8001700:	f7ff ff7c 	bl	80015fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <SysTick_Config+0x44>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800170a:	4b04      	ldr	r3, [pc, #16]	; (800171c <SysTick_Config+0x44>)
 800170c:	2207      	movs	r2, #7
 800170e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001710:	2300      	movs	r3, #0
}
 8001712:	0018      	movs	r0, r3
 8001714:	46bd      	mov	sp, r7
 8001716:	b002      	add	sp, #8
 8001718:	bd80      	pop	{r7, pc}
 800171a:	46c0      	nop			; (mov r8, r8)
 800171c:	e000e010 	.word	0xe000e010

08001720 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	60b9      	str	r1, [r7, #8]
 8001728:	607a      	str	r2, [r7, #4]
 800172a:	210f      	movs	r1, #15
 800172c:	187b      	adds	r3, r7, r1
 800172e:	1c02      	adds	r2, r0, #0
 8001730:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	187b      	adds	r3, r7, r1
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	b25b      	sxtb	r3, r3
 800173a:	0011      	movs	r1, r2
 800173c:	0018      	movs	r0, r3
 800173e:	f7ff ff5d 	bl	80015fc <__NVIC_SetPriority>
}
 8001742:	46c0      	nop			; (mov r8, r8)
 8001744:	46bd      	mov	sp, r7
 8001746:	b004      	add	sp, #16
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	0002      	movs	r2, r0
 8001752:	1dfb      	adds	r3, r7, #7
 8001754:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001756:	1dfb      	adds	r3, r7, #7
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	b25b      	sxtb	r3, r3
 800175c:	0018      	movs	r0, r3
 800175e:	f7ff ff33 	bl	80015c8 <__NVIC_EnableIRQ>
}
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	46bd      	mov	sp, r7
 8001766:	b002      	add	sp, #8
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	0018      	movs	r0, r3
 8001776:	f7ff ffaf 	bl	80016d8 <SysTick_Config>
 800177a:	0003      	movs	r3, r0
}
 800177c:	0018      	movs	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	b002      	add	sp, #8
 8001782:	bd80      	pop	{r7, pc}

08001784 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2221      	movs	r2, #33	; 0x21
 8001790:	5c9b      	ldrb	r3, [r3, r2]
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d008      	beq.n	80017aa <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2204      	movs	r2, #4
 800179c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2220      	movs	r2, #32
 80017a2:	2100      	movs	r1, #0
 80017a4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e020      	b.n	80017ec <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	210e      	movs	r1, #14
 80017b6:	438a      	bics	r2, r1
 80017b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2101      	movs	r1, #1
 80017c6:	438a      	bics	r2, r1
 80017c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017d2:	2101      	movs	r1, #1
 80017d4:	4091      	lsls	r1, r2
 80017d6:	000a      	movs	r2, r1
 80017d8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2221      	movs	r2, #33	; 0x21
 80017de:	2101      	movs	r1, #1
 80017e0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2220      	movs	r2, #32
 80017e6:	2100      	movs	r1, #0
 80017e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	0018      	movs	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b002      	add	sp, #8
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017fc:	210f      	movs	r1, #15
 80017fe:	187b      	adds	r3, r7, r1
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2221      	movs	r2, #33	; 0x21
 8001808:	5c9b      	ldrb	r3, [r3, r2]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d006      	beq.n	800181e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2204      	movs	r2, #4
 8001814:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001816:	187b      	adds	r3, r7, r1
 8001818:	2201      	movs	r2, #1
 800181a:	701a      	strb	r2, [r3, #0]
 800181c:	e028      	b.n	8001870 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	210e      	movs	r1, #14
 800182a:	438a      	bics	r2, r1
 800182c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2101      	movs	r1, #1
 800183a:	438a      	bics	r2, r1
 800183c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001846:	2101      	movs	r1, #1
 8001848:	4091      	lsls	r1, r2
 800184a:	000a      	movs	r2, r1
 800184c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2221      	movs	r2, #33	; 0x21
 8001852:	2101      	movs	r1, #1
 8001854:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2220      	movs	r2, #32
 800185a:	2100      	movs	r1, #0
 800185c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001862:	2b00      	cmp	r3, #0
 8001864:	d004      	beq.n	8001870 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	0010      	movs	r0, r2
 800186e:	4798      	blx	r3
    }
  }
  return status;
 8001870:	230f      	movs	r3, #15
 8001872:	18fb      	adds	r3, r7, r3
 8001874:	781b      	ldrb	r3, [r3, #0]
}
 8001876:	0018      	movs	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	b004      	add	sp, #16
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800188e:	e149      	b.n	8001b24 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2101      	movs	r1, #1
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	4091      	lsls	r1, r2
 800189a:	000a      	movs	r2, r1
 800189c:	4013      	ands	r3, r2
 800189e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d100      	bne.n	80018a8 <HAL_GPIO_Init+0x28>
 80018a6:	e13a      	b.n	8001b1e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2203      	movs	r2, #3
 80018ae:	4013      	ands	r3, r2
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d005      	beq.n	80018c0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2203      	movs	r2, #3
 80018ba:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d130      	bne.n	8001922 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	2203      	movs	r2, #3
 80018cc:	409a      	lsls	r2, r3
 80018ce:	0013      	movs	r3, r2
 80018d0:	43da      	mvns	r2, r3
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	4013      	ands	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	68da      	ldr	r2, [r3, #12]
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	409a      	lsls	r2, r3
 80018e2:	0013      	movs	r3, r2
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018f6:	2201      	movs	r2, #1
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	409a      	lsls	r2, r3
 80018fc:	0013      	movs	r3, r2
 80018fe:	43da      	mvns	r2, r3
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4013      	ands	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	091b      	lsrs	r3, r3, #4
 800190c:	2201      	movs	r2, #1
 800190e:	401a      	ands	r2, r3
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	409a      	lsls	r2, r3
 8001914:	0013      	movs	r3, r2
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2203      	movs	r2, #3
 8001928:	4013      	ands	r3, r2
 800192a:	2b03      	cmp	r3, #3
 800192c:	d017      	beq.n	800195e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	2203      	movs	r2, #3
 800193a:	409a      	lsls	r2, r3
 800193c:	0013      	movs	r3, r2
 800193e:	43da      	mvns	r2, r3
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	4013      	ands	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	689a      	ldr	r2, [r3, #8]
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	409a      	lsls	r2, r3
 8001950:	0013      	movs	r3, r2
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4313      	orrs	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2203      	movs	r2, #3
 8001964:	4013      	ands	r3, r2
 8001966:	2b02      	cmp	r3, #2
 8001968:	d123      	bne.n	80019b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	08da      	lsrs	r2, r3, #3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3208      	adds	r2, #8
 8001972:	0092      	lsls	r2, r2, #2
 8001974:	58d3      	ldr	r3, [r2, r3]
 8001976:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	2207      	movs	r2, #7
 800197c:	4013      	ands	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	220f      	movs	r2, #15
 8001982:	409a      	lsls	r2, r3
 8001984:	0013      	movs	r3, r2
 8001986:	43da      	mvns	r2, r3
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	4013      	ands	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	691a      	ldr	r2, [r3, #16]
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	2107      	movs	r1, #7
 8001996:	400b      	ands	r3, r1
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	409a      	lsls	r2, r3
 800199c:	0013      	movs	r3, r2
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	08da      	lsrs	r2, r3, #3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3208      	adds	r2, #8
 80019ac:	0092      	lsls	r2, r2, #2
 80019ae:	6939      	ldr	r1, [r7, #16]
 80019b0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	2203      	movs	r2, #3
 80019be:	409a      	lsls	r2, r3
 80019c0:	0013      	movs	r3, r2
 80019c2:	43da      	mvns	r2, r3
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	4013      	ands	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2203      	movs	r2, #3
 80019d0:	401a      	ands	r2, r3
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	409a      	lsls	r2, r3
 80019d8:	0013      	movs	r3, r2
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4313      	orrs	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685a      	ldr	r2, [r3, #4]
 80019ea:	23c0      	movs	r3, #192	; 0xc0
 80019ec:	029b      	lsls	r3, r3, #10
 80019ee:	4013      	ands	r3, r2
 80019f0:	d100      	bne.n	80019f4 <HAL_GPIO_Init+0x174>
 80019f2:	e094      	b.n	8001b1e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f4:	4b51      	ldr	r3, [pc, #324]	; (8001b3c <HAL_GPIO_Init+0x2bc>)
 80019f6:	699a      	ldr	r2, [r3, #24]
 80019f8:	4b50      	ldr	r3, [pc, #320]	; (8001b3c <HAL_GPIO_Init+0x2bc>)
 80019fa:	2101      	movs	r1, #1
 80019fc:	430a      	orrs	r2, r1
 80019fe:	619a      	str	r2, [r3, #24]
 8001a00:	4b4e      	ldr	r3, [pc, #312]	; (8001b3c <HAL_GPIO_Init+0x2bc>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	2201      	movs	r2, #1
 8001a06:	4013      	ands	r3, r2
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a0c:	4a4c      	ldr	r2, [pc, #304]	; (8001b40 <HAL_GPIO_Init+0x2c0>)
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	089b      	lsrs	r3, r3, #2
 8001a12:	3302      	adds	r3, #2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	589b      	ldr	r3, [r3, r2]
 8001a18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	2203      	movs	r2, #3
 8001a1e:	4013      	ands	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	220f      	movs	r2, #15
 8001a24:	409a      	lsls	r2, r3
 8001a26:	0013      	movs	r3, r2
 8001a28:	43da      	mvns	r2, r3
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	2390      	movs	r3, #144	; 0x90
 8001a34:	05db      	lsls	r3, r3, #23
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d00d      	beq.n	8001a56 <HAL_GPIO_Init+0x1d6>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a41      	ldr	r2, [pc, #260]	; (8001b44 <HAL_GPIO_Init+0x2c4>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d007      	beq.n	8001a52 <HAL_GPIO_Init+0x1d2>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a40      	ldr	r2, [pc, #256]	; (8001b48 <HAL_GPIO_Init+0x2c8>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d101      	bne.n	8001a4e <HAL_GPIO_Init+0x1ce>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e004      	b.n	8001a58 <HAL_GPIO_Init+0x1d8>
 8001a4e:	2305      	movs	r3, #5
 8001a50:	e002      	b.n	8001a58 <HAL_GPIO_Init+0x1d8>
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <HAL_GPIO_Init+0x1d8>
 8001a56:	2300      	movs	r3, #0
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	2103      	movs	r1, #3
 8001a5c:	400a      	ands	r2, r1
 8001a5e:	0092      	lsls	r2, r2, #2
 8001a60:	4093      	lsls	r3, r2
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a68:	4935      	ldr	r1, [pc, #212]	; (8001b40 <HAL_GPIO_Init+0x2c0>)
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	089b      	lsrs	r3, r3, #2
 8001a6e:	3302      	adds	r3, #2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a76:	4b35      	ldr	r3, [pc, #212]	; (8001b4c <HAL_GPIO_Init+0x2cc>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	43da      	mvns	r2, r3
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	4013      	ands	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	2380      	movs	r3, #128	; 0x80
 8001a8c:	035b      	lsls	r3, r3, #13
 8001a8e:	4013      	ands	r3, r2
 8001a90:	d003      	beq.n	8001a9a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a9a:	4b2c      	ldr	r3, [pc, #176]	; (8001b4c <HAL_GPIO_Init+0x2cc>)
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001aa0:	4b2a      	ldr	r3, [pc, #168]	; (8001b4c <HAL_GPIO_Init+0x2cc>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	43da      	mvns	r2, r3
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	4013      	ands	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	2380      	movs	r3, #128	; 0x80
 8001ab6:	039b      	lsls	r3, r3, #14
 8001ab8:	4013      	ands	r3, r2
 8001aba:	d003      	beq.n	8001ac4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ac4:	4b21      	ldr	r3, [pc, #132]	; (8001b4c <HAL_GPIO_Init+0x2cc>)
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001aca:	4b20      	ldr	r3, [pc, #128]	; (8001b4c <HAL_GPIO_Init+0x2cc>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	43da      	mvns	r2, r3
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	2380      	movs	r3, #128	; 0x80
 8001ae0:	029b      	lsls	r3, r3, #10
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001aee:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <HAL_GPIO_Init+0x2cc>)
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001af4:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <HAL_GPIO_Init+0x2cc>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	43da      	mvns	r2, r3
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	2380      	movs	r3, #128	; 0x80
 8001b0a:	025b      	lsls	r3, r3, #9
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d003      	beq.n	8001b18 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <HAL_GPIO_Init+0x2cc>)
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	3301      	adds	r3, #1
 8001b22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	40da      	lsrs	r2, r3
 8001b2c:	1e13      	subs	r3, r2, #0
 8001b2e:	d000      	beq.n	8001b32 <HAL_GPIO_Init+0x2b2>
 8001b30:	e6ae      	b.n	8001890 <HAL_GPIO_Init+0x10>
  } 
}
 8001b32:	46c0      	nop			; (mov r8, r8)
 8001b34:	46c0      	nop			; (mov r8, r8)
 8001b36:	46bd      	mov	sp, r7
 8001b38:	b006      	add	sp, #24
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40010000 	.word	0x40010000
 8001b44:	48000400 	.word	0x48000400
 8001b48:	48000800 	.word	0x48000800
 8001b4c:	40010400 	.word	0x40010400

08001b50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b088      	sub	sp, #32
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d102      	bne.n	8001b64 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	f000 fb76 	bl	8002250 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d100      	bne.n	8001b70 <HAL_RCC_OscConfig+0x20>
 8001b6e:	e08e      	b.n	8001c8e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b70:	4bc5      	ldr	r3, [pc, #788]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	220c      	movs	r2, #12
 8001b76:	4013      	ands	r3, r2
 8001b78:	2b04      	cmp	r3, #4
 8001b7a:	d00e      	beq.n	8001b9a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b7c:	4bc2      	ldr	r3, [pc, #776]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	220c      	movs	r2, #12
 8001b82:	4013      	ands	r3, r2
 8001b84:	2b08      	cmp	r3, #8
 8001b86:	d117      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x68>
 8001b88:	4bbf      	ldr	r3, [pc, #764]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	23c0      	movs	r3, #192	; 0xc0
 8001b8e:	025b      	lsls	r3, r3, #9
 8001b90:	401a      	ands	r2, r3
 8001b92:	2380      	movs	r3, #128	; 0x80
 8001b94:	025b      	lsls	r3, r3, #9
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d10e      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b9a:	4bbb      	ldr	r3, [pc, #748]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	2380      	movs	r3, #128	; 0x80
 8001ba0:	029b      	lsls	r3, r3, #10
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d100      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x58>
 8001ba6:	e071      	b.n	8001c8c <HAL_RCC_OscConfig+0x13c>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d000      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x62>
 8001bb0:	e06c      	b.n	8001c8c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	f000 fb4c 	bl	8002250 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d107      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x80>
 8001bc0:	4bb1      	ldr	r3, [pc, #708]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4bb0      	ldr	r3, [pc, #704]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001bc6:	2180      	movs	r1, #128	; 0x80
 8001bc8:	0249      	lsls	r1, r1, #9
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	e02f      	b.n	8001c30 <HAL_RCC_OscConfig+0xe0>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d10c      	bne.n	8001bf2 <HAL_RCC_OscConfig+0xa2>
 8001bd8:	4bab      	ldr	r3, [pc, #684]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	4baa      	ldr	r3, [pc, #680]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001bde:	49ab      	ldr	r1, [pc, #684]	; (8001e8c <HAL_RCC_OscConfig+0x33c>)
 8001be0:	400a      	ands	r2, r1
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	4ba8      	ldr	r3, [pc, #672]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4ba7      	ldr	r3, [pc, #668]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001bea:	49a9      	ldr	r1, [pc, #676]	; (8001e90 <HAL_RCC_OscConfig+0x340>)
 8001bec:	400a      	ands	r2, r1
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	e01e      	b.n	8001c30 <HAL_RCC_OscConfig+0xe0>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b05      	cmp	r3, #5
 8001bf8:	d10e      	bne.n	8001c18 <HAL_RCC_OscConfig+0xc8>
 8001bfa:	4ba3      	ldr	r3, [pc, #652]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	4ba2      	ldr	r3, [pc, #648]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001c00:	2180      	movs	r1, #128	; 0x80
 8001c02:	02c9      	lsls	r1, r1, #11
 8001c04:	430a      	orrs	r2, r1
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	4b9f      	ldr	r3, [pc, #636]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4b9e      	ldr	r3, [pc, #632]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001c0e:	2180      	movs	r1, #128	; 0x80
 8001c10:	0249      	lsls	r1, r1, #9
 8001c12:	430a      	orrs	r2, r1
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	e00b      	b.n	8001c30 <HAL_RCC_OscConfig+0xe0>
 8001c18:	4b9b      	ldr	r3, [pc, #620]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4b9a      	ldr	r3, [pc, #616]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001c1e:	499b      	ldr	r1, [pc, #620]	; (8001e8c <HAL_RCC_OscConfig+0x33c>)
 8001c20:	400a      	ands	r2, r1
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	4b98      	ldr	r3, [pc, #608]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	4b97      	ldr	r3, [pc, #604]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001c2a:	4999      	ldr	r1, [pc, #612]	; (8001e90 <HAL_RCC_OscConfig+0x340>)
 8001c2c:	400a      	ands	r2, r1
 8001c2e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d014      	beq.n	8001c62 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c38:	f7ff fa38 	bl	80010ac <HAL_GetTick>
 8001c3c:	0003      	movs	r3, r0
 8001c3e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c42:	f7ff fa33 	bl	80010ac <HAL_GetTick>
 8001c46:	0002      	movs	r2, r0
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b64      	cmp	r3, #100	; 0x64
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e2fd      	b.n	8002250 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c54:	4b8c      	ldr	r3, [pc, #560]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	2380      	movs	r3, #128	; 0x80
 8001c5a:	029b      	lsls	r3, r3, #10
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0xf2>
 8001c60:	e015      	b.n	8001c8e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c62:	f7ff fa23 	bl	80010ac <HAL_GetTick>
 8001c66:	0003      	movs	r3, r0
 8001c68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c6c:	f7ff fa1e 	bl	80010ac <HAL_GetTick>
 8001c70:	0002      	movs	r2, r0
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b64      	cmp	r3, #100	; 0x64
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e2e8      	b.n	8002250 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c7e:	4b82      	ldr	r3, [pc, #520]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	2380      	movs	r3, #128	; 0x80
 8001c84:	029b      	lsls	r3, r3, #10
 8001c86:	4013      	ands	r3, r2
 8001c88:	d1f0      	bne.n	8001c6c <HAL_RCC_OscConfig+0x11c>
 8001c8a:	e000      	b.n	8001c8e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2202      	movs	r2, #2
 8001c94:	4013      	ands	r3, r2
 8001c96:	d100      	bne.n	8001c9a <HAL_RCC_OscConfig+0x14a>
 8001c98:	e06c      	b.n	8001d74 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c9a:	4b7b      	ldr	r3, [pc, #492]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	d00e      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ca4:	4b78      	ldr	r3, [pc, #480]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	220c      	movs	r2, #12
 8001caa:	4013      	ands	r3, r2
 8001cac:	2b08      	cmp	r3, #8
 8001cae:	d11f      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x1a0>
 8001cb0:	4b75      	ldr	r3, [pc, #468]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	23c0      	movs	r3, #192	; 0xc0
 8001cb6:	025b      	lsls	r3, r3, #9
 8001cb8:	401a      	ands	r2, r3
 8001cba:	2380      	movs	r3, #128	; 0x80
 8001cbc:	021b      	lsls	r3, r3, #8
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d116      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc2:	4b71      	ldr	r3, [pc, #452]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d005      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x188>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d001      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e2bb      	b.n	8002250 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd8:	4b6b      	ldr	r3, [pc, #428]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	22f8      	movs	r2, #248	; 0xf8
 8001cde:	4393      	bics	r3, r2
 8001ce0:	0019      	movs	r1, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	00da      	lsls	r2, r3, #3
 8001ce8:	4b67      	ldr	r3, [pc, #412]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001cea:	430a      	orrs	r2, r1
 8001cec:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cee:	e041      	b.n	8001d74 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d024      	beq.n	8001d42 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cf8:	4b63      	ldr	r3, [pc, #396]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b62      	ldr	r3, [pc, #392]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001cfe:	2101      	movs	r1, #1
 8001d00:	430a      	orrs	r2, r1
 8001d02:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d04:	f7ff f9d2 	bl	80010ac <HAL_GetTick>
 8001d08:	0003      	movs	r3, r0
 8001d0a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d0e:	f7ff f9cd 	bl	80010ac <HAL_GetTick>
 8001d12:	0002      	movs	r2, r0
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e297      	b.n	8002250 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d20:	4b59      	ldr	r3, [pc, #356]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2202      	movs	r2, #2
 8001d26:	4013      	ands	r3, r2
 8001d28:	d0f1      	beq.n	8001d0e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2a:	4b57      	ldr	r3, [pc, #348]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	22f8      	movs	r2, #248	; 0xf8
 8001d30:	4393      	bics	r3, r2
 8001d32:	0019      	movs	r1, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	00da      	lsls	r2, r3, #3
 8001d3a:	4b53      	ldr	r3, [pc, #332]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	e018      	b.n	8001d74 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d42:	4b51      	ldr	r3, [pc, #324]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	4b50      	ldr	r3, [pc, #320]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001d48:	2101      	movs	r1, #1
 8001d4a:	438a      	bics	r2, r1
 8001d4c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4e:	f7ff f9ad 	bl	80010ac <HAL_GetTick>
 8001d52:	0003      	movs	r3, r0
 8001d54:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d58:	f7ff f9a8 	bl	80010ac <HAL_GetTick>
 8001d5c:	0002      	movs	r2, r0
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e272      	b.n	8002250 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d6a:	4b47      	ldr	r3, [pc, #284]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2202      	movs	r2, #2
 8001d70:	4013      	ands	r3, r2
 8001d72:	d1f1      	bne.n	8001d58 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2208      	movs	r2, #8
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	d036      	beq.n	8001dec <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d019      	beq.n	8001dba <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d86:	4b40      	ldr	r3, [pc, #256]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001d88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d8a:	4b3f      	ldr	r3, [pc, #252]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d92:	f7ff f98b 	bl	80010ac <HAL_GetTick>
 8001d96:	0003      	movs	r3, r0
 8001d98:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d9c:	f7ff f986 	bl	80010ac <HAL_GetTick>
 8001da0:	0002      	movs	r2, r0
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e250      	b.n	8002250 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dae:	4b36      	ldr	r3, [pc, #216]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	2202      	movs	r2, #2
 8001db4:	4013      	ands	r3, r2
 8001db6:	d0f1      	beq.n	8001d9c <HAL_RCC_OscConfig+0x24c>
 8001db8:	e018      	b.n	8001dec <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dba:	4b33      	ldr	r3, [pc, #204]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001dbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dbe:	4b32      	ldr	r3, [pc, #200]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	438a      	bics	r2, r1
 8001dc4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc6:	f7ff f971 	bl	80010ac <HAL_GetTick>
 8001dca:	0003      	movs	r3, r0
 8001dcc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dd0:	f7ff f96c 	bl	80010ac <HAL_GetTick>
 8001dd4:	0002      	movs	r2, r0
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e236      	b.n	8002250 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de2:	4b29      	ldr	r3, [pc, #164]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de6:	2202      	movs	r2, #2
 8001de8:	4013      	ands	r3, r2
 8001dea:	d1f1      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2204      	movs	r2, #4
 8001df2:	4013      	ands	r3, r2
 8001df4:	d100      	bne.n	8001df8 <HAL_RCC_OscConfig+0x2a8>
 8001df6:	e0b5      	b.n	8001f64 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001df8:	201f      	movs	r0, #31
 8001dfa:	183b      	adds	r3, r7, r0
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e00:	4b21      	ldr	r3, [pc, #132]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001e02:	69da      	ldr	r2, [r3, #28]
 8001e04:	2380      	movs	r3, #128	; 0x80
 8001e06:	055b      	lsls	r3, r3, #21
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d110      	bne.n	8001e2e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e0c:	4b1e      	ldr	r3, [pc, #120]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001e0e:	69da      	ldr	r2, [r3, #28]
 8001e10:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001e12:	2180      	movs	r1, #128	; 0x80
 8001e14:	0549      	lsls	r1, r1, #21
 8001e16:	430a      	orrs	r2, r1
 8001e18:	61da      	str	r2, [r3, #28]
 8001e1a:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001e1c:	69da      	ldr	r2, [r3, #28]
 8001e1e:	2380      	movs	r3, #128	; 0x80
 8001e20:	055b      	lsls	r3, r3, #21
 8001e22:	4013      	ands	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e28:	183b      	adds	r3, r7, r0
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2e:	4b19      	ldr	r3, [pc, #100]	; (8001e94 <HAL_RCC_OscConfig+0x344>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	2380      	movs	r3, #128	; 0x80
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	4013      	ands	r3, r2
 8001e38:	d11a      	bne.n	8001e70 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e3a:	4b16      	ldr	r3, [pc, #88]	; (8001e94 <HAL_RCC_OscConfig+0x344>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <HAL_RCC_OscConfig+0x344>)
 8001e40:	2180      	movs	r1, #128	; 0x80
 8001e42:	0049      	lsls	r1, r1, #1
 8001e44:	430a      	orrs	r2, r1
 8001e46:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e48:	f7ff f930 	bl	80010ac <HAL_GetTick>
 8001e4c:	0003      	movs	r3, r0
 8001e4e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e52:	f7ff f92b 	bl	80010ac <HAL_GetTick>
 8001e56:	0002      	movs	r2, r0
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b64      	cmp	r3, #100	; 0x64
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e1f5      	b.n	8002250 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e64:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <HAL_RCC_OscConfig+0x344>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	2380      	movs	r3, #128	; 0x80
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d10f      	bne.n	8001e98 <HAL_RCC_OscConfig+0x348>
 8001e78:	4b03      	ldr	r3, [pc, #12]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001e7a:	6a1a      	ldr	r2, [r3, #32]
 8001e7c:	4b02      	ldr	r3, [pc, #8]	; (8001e88 <HAL_RCC_OscConfig+0x338>)
 8001e7e:	2101      	movs	r1, #1
 8001e80:	430a      	orrs	r2, r1
 8001e82:	621a      	str	r2, [r3, #32]
 8001e84:	e036      	b.n	8001ef4 <HAL_RCC_OscConfig+0x3a4>
 8001e86:	46c0      	nop			; (mov r8, r8)
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	fffeffff 	.word	0xfffeffff
 8001e90:	fffbffff 	.word	0xfffbffff
 8001e94:	40007000 	.word	0x40007000
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10c      	bne.n	8001eba <HAL_RCC_OscConfig+0x36a>
 8001ea0:	4bca      	ldr	r3, [pc, #808]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 8001ea2:	6a1a      	ldr	r2, [r3, #32]
 8001ea4:	4bc9      	ldr	r3, [pc, #804]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	438a      	bics	r2, r1
 8001eaa:	621a      	str	r2, [r3, #32]
 8001eac:	4bc7      	ldr	r3, [pc, #796]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 8001eae:	6a1a      	ldr	r2, [r3, #32]
 8001eb0:	4bc6      	ldr	r3, [pc, #792]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 8001eb2:	2104      	movs	r1, #4
 8001eb4:	438a      	bics	r2, r1
 8001eb6:	621a      	str	r2, [r3, #32]
 8001eb8:	e01c      	b.n	8001ef4 <HAL_RCC_OscConfig+0x3a4>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	2b05      	cmp	r3, #5
 8001ec0:	d10c      	bne.n	8001edc <HAL_RCC_OscConfig+0x38c>
 8001ec2:	4bc2      	ldr	r3, [pc, #776]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 8001ec4:	6a1a      	ldr	r2, [r3, #32]
 8001ec6:	4bc1      	ldr	r3, [pc, #772]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 8001ec8:	2104      	movs	r1, #4
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	621a      	str	r2, [r3, #32]
 8001ece:	4bbf      	ldr	r3, [pc, #764]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 8001ed0:	6a1a      	ldr	r2, [r3, #32]
 8001ed2:	4bbe      	ldr	r3, [pc, #760]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	621a      	str	r2, [r3, #32]
 8001eda:	e00b      	b.n	8001ef4 <HAL_RCC_OscConfig+0x3a4>
 8001edc:	4bbb      	ldr	r3, [pc, #748]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 8001ede:	6a1a      	ldr	r2, [r3, #32]
 8001ee0:	4bba      	ldr	r3, [pc, #744]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	438a      	bics	r2, r1
 8001ee6:	621a      	str	r2, [r3, #32]
 8001ee8:	4bb8      	ldr	r3, [pc, #736]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 8001eea:	6a1a      	ldr	r2, [r3, #32]
 8001eec:	4bb7      	ldr	r3, [pc, #732]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 8001eee:	2104      	movs	r1, #4
 8001ef0:	438a      	bics	r2, r1
 8001ef2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d014      	beq.n	8001f26 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efc:	f7ff f8d6 	bl	80010ac <HAL_GetTick>
 8001f00:	0003      	movs	r3, r0
 8001f02:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f04:	e009      	b.n	8001f1a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f06:	f7ff f8d1 	bl	80010ac <HAL_GetTick>
 8001f0a:	0002      	movs	r2, r0
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	4aaf      	ldr	r2, [pc, #700]	; (80021d0 <HAL_RCC_OscConfig+0x680>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e19a      	b.n	8002250 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f1a:	4bac      	ldr	r3, [pc, #688]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	2202      	movs	r2, #2
 8001f20:	4013      	ands	r3, r2
 8001f22:	d0f0      	beq.n	8001f06 <HAL_RCC_OscConfig+0x3b6>
 8001f24:	e013      	b.n	8001f4e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f26:	f7ff f8c1 	bl	80010ac <HAL_GetTick>
 8001f2a:	0003      	movs	r3, r0
 8001f2c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f2e:	e009      	b.n	8001f44 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f30:	f7ff f8bc 	bl	80010ac <HAL_GetTick>
 8001f34:	0002      	movs	r2, r0
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	4aa5      	ldr	r2, [pc, #660]	; (80021d0 <HAL_RCC_OscConfig+0x680>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e185      	b.n	8002250 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f44:	4ba1      	ldr	r3, [pc, #644]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	2202      	movs	r2, #2
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f4e:	231f      	movs	r3, #31
 8001f50:	18fb      	adds	r3, r7, r3
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d105      	bne.n	8001f64 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f58:	4b9c      	ldr	r3, [pc, #624]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 8001f5a:	69da      	ldr	r2, [r3, #28]
 8001f5c:	4b9b      	ldr	r3, [pc, #620]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 8001f5e:	499d      	ldr	r1, [pc, #628]	; (80021d4 <HAL_RCC_OscConfig+0x684>)
 8001f60:	400a      	ands	r2, r1
 8001f62:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2210      	movs	r2, #16
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d063      	beq.n	8002036 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d12a      	bne.n	8001fcc <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f76:	4b95      	ldr	r3, [pc, #596]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 8001f78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f7a:	4b94      	ldr	r3, [pc, #592]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 8001f7c:	2104      	movs	r1, #4
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001f82:	4b92      	ldr	r3, [pc, #584]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 8001f84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f86:	4b91      	ldr	r3, [pc, #580]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 8001f88:	2101      	movs	r1, #1
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f8e:	f7ff f88d 	bl	80010ac <HAL_GetTick>
 8001f92:	0003      	movs	r3, r0
 8001f94:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f98:	f7ff f888 	bl	80010ac <HAL_GetTick>
 8001f9c:	0002      	movs	r2, r0
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e152      	b.n	8002250 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001faa:	4b88      	ldr	r3, [pc, #544]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 8001fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fae:	2202      	movs	r2, #2
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	d0f1      	beq.n	8001f98 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001fb4:	4b85      	ldr	r3, [pc, #532]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 8001fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb8:	22f8      	movs	r2, #248	; 0xf8
 8001fba:	4393      	bics	r3, r2
 8001fbc:	0019      	movs	r1, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	00da      	lsls	r2, r3, #3
 8001fc4:	4b81      	ldr	r3, [pc, #516]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	635a      	str	r2, [r3, #52]	; 0x34
 8001fca:	e034      	b.n	8002036 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	3305      	adds	r3, #5
 8001fd2:	d111      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001fd4:	4b7d      	ldr	r3, [pc, #500]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 8001fd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fd8:	4b7c      	ldr	r3, [pc, #496]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 8001fda:	2104      	movs	r1, #4
 8001fdc:	438a      	bics	r2, r1
 8001fde:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001fe0:	4b7a      	ldr	r3, [pc, #488]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 8001fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe4:	22f8      	movs	r2, #248	; 0xf8
 8001fe6:	4393      	bics	r3, r2
 8001fe8:	0019      	movs	r1, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	00da      	lsls	r2, r3, #3
 8001ff0:	4b76      	ldr	r3, [pc, #472]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ff6:	e01e      	b.n	8002036 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ff8:	4b74      	ldr	r3, [pc, #464]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 8001ffa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ffc:	4b73      	ldr	r3, [pc, #460]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 8001ffe:	2104      	movs	r1, #4
 8002000:	430a      	orrs	r2, r1
 8002002:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002004:	4b71      	ldr	r3, [pc, #452]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 8002006:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002008:	4b70      	ldr	r3, [pc, #448]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 800200a:	2101      	movs	r1, #1
 800200c:	438a      	bics	r2, r1
 800200e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002010:	f7ff f84c 	bl	80010ac <HAL_GetTick>
 8002014:	0003      	movs	r3, r0
 8002016:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800201a:	f7ff f847 	bl	80010ac <HAL_GetTick>
 800201e:	0002      	movs	r2, r0
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e111      	b.n	8002250 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800202c:	4b67      	ldr	r3, [pc, #412]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 800202e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002030:	2202      	movs	r2, #2
 8002032:	4013      	ands	r3, r2
 8002034:	d1f1      	bne.n	800201a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2220      	movs	r2, #32
 800203c:	4013      	ands	r3, r2
 800203e:	d05c      	beq.n	80020fa <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002040:	4b62      	ldr	r3, [pc, #392]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	220c      	movs	r2, #12
 8002046:	4013      	ands	r3, r2
 8002048:	2b0c      	cmp	r3, #12
 800204a:	d00e      	beq.n	800206a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800204c:	4b5f      	ldr	r3, [pc, #380]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	220c      	movs	r2, #12
 8002052:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002054:	2b08      	cmp	r3, #8
 8002056:	d114      	bne.n	8002082 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002058:	4b5c      	ldr	r3, [pc, #368]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	23c0      	movs	r3, #192	; 0xc0
 800205e:	025b      	lsls	r3, r3, #9
 8002060:	401a      	ands	r2, r3
 8002062:	23c0      	movs	r3, #192	; 0xc0
 8002064:	025b      	lsls	r3, r3, #9
 8002066:	429a      	cmp	r2, r3
 8002068:	d10b      	bne.n	8002082 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800206a:	4b58      	ldr	r3, [pc, #352]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 800206c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800206e:	2380      	movs	r3, #128	; 0x80
 8002070:	029b      	lsls	r3, r3, #10
 8002072:	4013      	ands	r3, r2
 8002074:	d040      	beq.n	80020f8 <HAL_RCC_OscConfig+0x5a8>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d03c      	beq.n	80020f8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e0e6      	b.n	8002250 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d01b      	beq.n	80020c2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800208a:	4b50      	ldr	r3, [pc, #320]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 800208c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800208e:	4b4f      	ldr	r3, [pc, #316]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 8002090:	2180      	movs	r1, #128	; 0x80
 8002092:	0249      	lsls	r1, r1, #9
 8002094:	430a      	orrs	r2, r1
 8002096:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002098:	f7ff f808 	bl	80010ac <HAL_GetTick>
 800209c:	0003      	movs	r3, r0
 800209e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020a2:	f7ff f803 	bl	80010ac <HAL_GetTick>
 80020a6:	0002      	movs	r2, r0
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e0cd      	b.n	8002250 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80020b4:	4b45      	ldr	r3, [pc, #276]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 80020b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020b8:	2380      	movs	r3, #128	; 0x80
 80020ba:	029b      	lsls	r3, r3, #10
 80020bc:	4013      	ands	r3, r2
 80020be:	d0f0      	beq.n	80020a2 <HAL_RCC_OscConfig+0x552>
 80020c0:	e01b      	b.n	80020fa <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80020c2:	4b42      	ldr	r3, [pc, #264]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 80020c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020c6:	4b41      	ldr	r3, [pc, #260]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 80020c8:	4943      	ldr	r1, [pc, #268]	; (80021d8 <HAL_RCC_OscConfig+0x688>)
 80020ca:	400a      	ands	r2, r1
 80020cc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ce:	f7fe ffed 	bl	80010ac <HAL_GetTick>
 80020d2:	0003      	movs	r3, r0
 80020d4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020d8:	f7fe ffe8 	bl	80010ac <HAL_GetTick>
 80020dc:	0002      	movs	r2, r0
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e0b2      	b.n	8002250 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80020ea:	4b38      	ldr	r3, [pc, #224]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 80020ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020ee:	2380      	movs	r3, #128	; 0x80
 80020f0:	029b      	lsls	r3, r3, #10
 80020f2:	4013      	ands	r3, r2
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0x588>
 80020f6:	e000      	b.n	80020fa <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80020f8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d100      	bne.n	8002104 <HAL_RCC_OscConfig+0x5b4>
 8002102:	e0a4      	b.n	800224e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002104:	4b31      	ldr	r3, [pc, #196]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	220c      	movs	r2, #12
 800210a:	4013      	ands	r3, r2
 800210c:	2b08      	cmp	r3, #8
 800210e:	d100      	bne.n	8002112 <HAL_RCC_OscConfig+0x5c2>
 8002110:	e078      	b.n	8002204 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	2b02      	cmp	r3, #2
 8002118:	d14c      	bne.n	80021b4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800211a:	4b2c      	ldr	r3, [pc, #176]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	4b2b      	ldr	r3, [pc, #172]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 8002120:	492e      	ldr	r1, [pc, #184]	; (80021dc <HAL_RCC_OscConfig+0x68c>)
 8002122:	400a      	ands	r2, r1
 8002124:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002126:	f7fe ffc1 	bl	80010ac <HAL_GetTick>
 800212a:	0003      	movs	r3, r0
 800212c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002130:	f7fe ffbc 	bl	80010ac <HAL_GetTick>
 8002134:	0002      	movs	r2, r0
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e086      	b.n	8002250 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002142:	4b22      	ldr	r3, [pc, #136]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	2380      	movs	r3, #128	; 0x80
 8002148:	049b      	lsls	r3, r3, #18
 800214a:	4013      	ands	r3, r2
 800214c:	d1f0      	bne.n	8002130 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800214e:	4b1f      	ldr	r3, [pc, #124]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 8002150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002152:	220f      	movs	r2, #15
 8002154:	4393      	bics	r3, r2
 8002156:	0019      	movs	r1, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800215c:	4b1b      	ldr	r3, [pc, #108]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 800215e:	430a      	orrs	r2, r1
 8002160:	62da      	str	r2, [r3, #44]	; 0x2c
 8002162:	4b1a      	ldr	r3, [pc, #104]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	4a1e      	ldr	r2, [pc, #120]	; (80021e0 <HAL_RCC_OscConfig+0x690>)
 8002168:	4013      	ands	r3, r2
 800216a:	0019      	movs	r1, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002174:	431a      	orrs	r2, r3
 8002176:	4b15      	ldr	r3, [pc, #84]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 8002178:	430a      	orrs	r2, r1
 800217a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800217c:	4b13      	ldr	r3, [pc, #76]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	4b12      	ldr	r3, [pc, #72]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 8002182:	2180      	movs	r1, #128	; 0x80
 8002184:	0449      	lsls	r1, r1, #17
 8002186:	430a      	orrs	r2, r1
 8002188:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218a:	f7fe ff8f 	bl	80010ac <HAL_GetTick>
 800218e:	0003      	movs	r3, r0
 8002190:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002194:	f7fe ff8a 	bl	80010ac <HAL_GetTick>
 8002198:	0002      	movs	r2, r0
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e054      	b.n	8002250 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021a6:	4b09      	ldr	r3, [pc, #36]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	2380      	movs	r3, #128	; 0x80
 80021ac:	049b      	lsls	r3, r3, #18
 80021ae:	4013      	ands	r3, r2
 80021b0:	d0f0      	beq.n	8002194 <HAL_RCC_OscConfig+0x644>
 80021b2:	e04c      	b.n	800224e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b4:	4b05      	ldr	r3, [pc, #20]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	4b04      	ldr	r3, [pc, #16]	; (80021cc <HAL_RCC_OscConfig+0x67c>)
 80021ba:	4908      	ldr	r1, [pc, #32]	; (80021dc <HAL_RCC_OscConfig+0x68c>)
 80021bc:	400a      	ands	r2, r1
 80021be:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c0:	f7fe ff74 	bl	80010ac <HAL_GetTick>
 80021c4:	0003      	movs	r3, r0
 80021c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c8:	e015      	b.n	80021f6 <HAL_RCC_OscConfig+0x6a6>
 80021ca:	46c0      	nop			; (mov r8, r8)
 80021cc:	40021000 	.word	0x40021000
 80021d0:	00001388 	.word	0x00001388
 80021d4:	efffffff 	.word	0xefffffff
 80021d8:	fffeffff 	.word	0xfffeffff
 80021dc:	feffffff 	.word	0xfeffffff
 80021e0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e4:	f7fe ff62 	bl	80010ac <HAL_GetTick>
 80021e8:	0002      	movs	r2, r0
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e02c      	b.n	8002250 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f6:	4b18      	ldr	r3, [pc, #96]	; (8002258 <HAL_RCC_OscConfig+0x708>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	2380      	movs	r3, #128	; 0x80
 80021fc:	049b      	lsls	r3, r3, #18
 80021fe:	4013      	ands	r3, r2
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0x694>
 8002202:	e024      	b.n	800224e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	2b01      	cmp	r3, #1
 800220a:	d101      	bne.n	8002210 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e01f      	b.n	8002250 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002210:	4b11      	ldr	r3, [pc, #68]	; (8002258 <HAL_RCC_OscConfig+0x708>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002216:	4b10      	ldr	r3, [pc, #64]	; (8002258 <HAL_RCC_OscConfig+0x708>)
 8002218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	23c0      	movs	r3, #192	; 0xc0
 8002220:	025b      	lsls	r3, r3, #9
 8002222:	401a      	ands	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002228:	429a      	cmp	r2, r3
 800222a:	d10e      	bne.n	800224a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	220f      	movs	r2, #15
 8002230:	401a      	ands	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002236:	429a      	cmp	r2, r3
 8002238:	d107      	bne.n	800224a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	23f0      	movs	r3, #240	; 0xf0
 800223e:	039b      	lsls	r3, r3, #14
 8002240:	401a      	ands	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002246:	429a      	cmp	r2, r3
 8002248:	d001      	beq.n	800224e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e000      	b.n	8002250 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	0018      	movs	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	b008      	add	sp, #32
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40021000 	.word	0x40021000

0800225c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e0bf      	b.n	80023f0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002270:	4b61      	ldr	r3, [pc, #388]	; (80023f8 <HAL_RCC_ClockConfig+0x19c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2201      	movs	r2, #1
 8002276:	4013      	ands	r3, r2
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d911      	bls.n	80022a2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227e:	4b5e      	ldr	r3, [pc, #376]	; (80023f8 <HAL_RCC_ClockConfig+0x19c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2201      	movs	r2, #1
 8002284:	4393      	bics	r3, r2
 8002286:	0019      	movs	r1, r3
 8002288:	4b5b      	ldr	r3, [pc, #364]	; (80023f8 <HAL_RCC_ClockConfig+0x19c>)
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002290:	4b59      	ldr	r3, [pc, #356]	; (80023f8 <HAL_RCC_ClockConfig+0x19c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2201      	movs	r2, #1
 8002296:	4013      	ands	r3, r2
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	d001      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e0a6      	b.n	80023f0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2202      	movs	r2, #2
 80022a8:	4013      	ands	r3, r2
 80022aa:	d015      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2204      	movs	r2, #4
 80022b2:	4013      	ands	r3, r2
 80022b4:	d006      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80022b6:	4b51      	ldr	r3, [pc, #324]	; (80023fc <HAL_RCC_ClockConfig+0x1a0>)
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	4b50      	ldr	r3, [pc, #320]	; (80023fc <HAL_RCC_ClockConfig+0x1a0>)
 80022bc:	21e0      	movs	r1, #224	; 0xe0
 80022be:	00c9      	lsls	r1, r1, #3
 80022c0:	430a      	orrs	r2, r1
 80022c2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022c4:	4b4d      	ldr	r3, [pc, #308]	; (80023fc <HAL_RCC_ClockConfig+0x1a0>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	22f0      	movs	r2, #240	; 0xf0
 80022ca:	4393      	bics	r3, r2
 80022cc:	0019      	movs	r1, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	4b4a      	ldr	r3, [pc, #296]	; (80023fc <HAL_RCC_ClockConfig+0x1a0>)
 80022d4:	430a      	orrs	r2, r1
 80022d6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2201      	movs	r2, #1
 80022de:	4013      	ands	r3, r2
 80022e0:	d04c      	beq.n	800237c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d107      	bne.n	80022fa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ea:	4b44      	ldr	r3, [pc, #272]	; (80023fc <HAL_RCC_ClockConfig+0x1a0>)
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	2380      	movs	r3, #128	; 0x80
 80022f0:	029b      	lsls	r3, r3, #10
 80022f2:	4013      	ands	r3, r2
 80022f4:	d120      	bne.n	8002338 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e07a      	b.n	80023f0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d107      	bne.n	8002312 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002302:	4b3e      	ldr	r3, [pc, #248]	; (80023fc <HAL_RCC_ClockConfig+0x1a0>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	2380      	movs	r3, #128	; 0x80
 8002308:	049b      	lsls	r3, r3, #18
 800230a:	4013      	ands	r3, r2
 800230c:	d114      	bne.n	8002338 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e06e      	b.n	80023f0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b03      	cmp	r3, #3
 8002318:	d107      	bne.n	800232a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800231a:	4b38      	ldr	r3, [pc, #224]	; (80023fc <HAL_RCC_ClockConfig+0x1a0>)
 800231c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800231e:	2380      	movs	r3, #128	; 0x80
 8002320:	029b      	lsls	r3, r3, #10
 8002322:	4013      	ands	r3, r2
 8002324:	d108      	bne.n	8002338 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e062      	b.n	80023f0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800232a:	4b34      	ldr	r3, [pc, #208]	; (80023fc <HAL_RCC_ClockConfig+0x1a0>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2202      	movs	r2, #2
 8002330:	4013      	ands	r3, r2
 8002332:	d101      	bne.n	8002338 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e05b      	b.n	80023f0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002338:	4b30      	ldr	r3, [pc, #192]	; (80023fc <HAL_RCC_ClockConfig+0x1a0>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2203      	movs	r2, #3
 800233e:	4393      	bics	r3, r2
 8002340:	0019      	movs	r1, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	4b2d      	ldr	r3, [pc, #180]	; (80023fc <HAL_RCC_ClockConfig+0x1a0>)
 8002348:	430a      	orrs	r2, r1
 800234a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800234c:	f7fe feae 	bl	80010ac <HAL_GetTick>
 8002350:	0003      	movs	r3, r0
 8002352:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002354:	e009      	b.n	800236a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002356:	f7fe fea9 	bl	80010ac <HAL_GetTick>
 800235a:	0002      	movs	r2, r0
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	4a27      	ldr	r2, [pc, #156]	; (8002400 <HAL_RCC_ClockConfig+0x1a4>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d901      	bls.n	800236a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e042      	b.n	80023f0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236a:	4b24      	ldr	r3, [pc, #144]	; (80023fc <HAL_RCC_ClockConfig+0x1a0>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	220c      	movs	r2, #12
 8002370:	401a      	ands	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	429a      	cmp	r2, r3
 800237a:	d1ec      	bne.n	8002356 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800237c:	4b1e      	ldr	r3, [pc, #120]	; (80023f8 <HAL_RCC_ClockConfig+0x19c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2201      	movs	r2, #1
 8002382:	4013      	ands	r3, r2
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d211      	bcs.n	80023ae <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238a:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <HAL_RCC_ClockConfig+0x19c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2201      	movs	r2, #1
 8002390:	4393      	bics	r3, r2
 8002392:	0019      	movs	r1, r3
 8002394:	4b18      	ldr	r3, [pc, #96]	; (80023f8 <HAL_RCC_ClockConfig+0x19c>)
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800239c:	4b16      	ldr	r3, [pc, #88]	; (80023f8 <HAL_RCC_ClockConfig+0x19c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2201      	movs	r2, #1
 80023a2:	4013      	ands	r3, r2
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d001      	beq.n	80023ae <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e020      	b.n	80023f0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2204      	movs	r2, #4
 80023b4:	4013      	ands	r3, r2
 80023b6:	d009      	beq.n	80023cc <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80023b8:	4b10      	ldr	r3, [pc, #64]	; (80023fc <HAL_RCC_ClockConfig+0x1a0>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	4a11      	ldr	r2, [pc, #68]	; (8002404 <HAL_RCC_ClockConfig+0x1a8>)
 80023be:	4013      	ands	r3, r2
 80023c0:	0019      	movs	r1, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	4b0d      	ldr	r3, [pc, #52]	; (80023fc <HAL_RCC_ClockConfig+0x1a0>)
 80023c8:	430a      	orrs	r2, r1
 80023ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80023cc:	f000 f820 	bl	8002410 <HAL_RCC_GetSysClockFreq>
 80023d0:	0001      	movs	r1, r0
 80023d2:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <HAL_RCC_ClockConfig+0x1a0>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	091b      	lsrs	r3, r3, #4
 80023d8:	220f      	movs	r2, #15
 80023da:	4013      	ands	r3, r2
 80023dc:	4a0a      	ldr	r2, [pc, #40]	; (8002408 <HAL_RCC_ClockConfig+0x1ac>)
 80023de:	5cd3      	ldrb	r3, [r2, r3]
 80023e0:	000a      	movs	r2, r1
 80023e2:	40da      	lsrs	r2, r3
 80023e4:	4b09      	ldr	r3, [pc, #36]	; (800240c <HAL_RCC_ClockConfig+0x1b0>)
 80023e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80023e8:	2003      	movs	r0, #3
 80023ea:	f7fe fe19 	bl	8001020 <HAL_InitTick>
  
  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	0018      	movs	r0, r3
 80023f2:	46bd      	mov	sp, r7
 80023f4:	b004      	add	sp, #16
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40022000 	.word	0x40022000
 80023fc:	40021000 	.word	0x40021000
 8002400:	00001388 	.word	0x00001388
 8002404:	fffff8ff 	.word	0xfffff8ff
 8002408:	08004398 	.word	0x08004398
 800240c:	20000000 	.word	0x20000000

08002410 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	2300      	movs	r3, #0
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	2300      	movs	r3, #0
 8002424:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002426:	2300      	movs	r3, #0
 8002428:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800242a:	4b2d      	ldr	r3, [pc, #180]	; (80024e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	220c      	movs	r2, #12
 8002434:	4013      	ands	r3, r2
 8002436:	2b0c      	cmp	r3, #12
 8002438:	d046      	beq.n	80024c8 <HAL_RCC_GetSysClockFreq+0xb8>
 800243a:	d848      	bhi.n	80024ce <HAL_RCC_GetSysClockFreq+0xbe>
 800243c:	2b04      	cmp	r3, #4
 800243e:	d002      	beq.n	8002446 <HAL_RCC_GetSysClockFreq+0x36>
 8002440:	2b08      	cmp	r3, #8
 8002442:	d003      	beq.n	800244c <HAL_RCC_GetSysClockFreq+0x3c>
 8002444:	e043      	b.n	80024ce <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002446:	4b27      	ldr	r3, [pc, #156]	; (80024e4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002448:	613b      	str	r3, [r7, #16]
      break;
 800244a:	e043      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	0c9b      	lsrs	r3, r3, #18
 8002450:	220f      	movs	r2, #15
 8002452:	4013      	ands	r3, r2
 8002454:	4a24      	ldr	r2, [pc, #144]	; (80024e8 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002456:	5cd3      	ldrb	r3, [r2, r3]
 8002458:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800245a:	4b21      	ldr	r3, [pc, #132]	; (80024e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800245c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245e:	220f      	movs	r2, #15
 8002460:	4013      	ands	r3, r2
 8002462:	4a22      	ldr	r2, [pc, #136]	; (80024ec <HAL_RCC_GetSysClockFreq+0xdc>)
 8002464:	5cd3      	ldrb	r3, [r2, r3]
 8002466:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	23c0      	movs	r3, #192	; 0xc0
 800246c:	025b      	lsls	r3, r3, #9
 800246e:	401a      	ands	r2, r3
 8002470:	2380      	movs	r3, #128	; 0x80
 8002472:	025b      	lsls	r3, r3, #9
 8002474:	429a      	cmp	r2, r3
 8002476:	d109      	bne.n	800248c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002478:	68b9      	ldr	r1, [r7, #8]
 800247a:	481a      	ldr	r0, [pc, #104]	; (80024e4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800247c:	f7fd fe44 	bl	8000108 <__udivsi3>
 8002480:	0003      	movs	r3, r0
 8002482:	001a      	movs	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4353      	muls	r3, r2
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	e01a      	b.n	80024c2 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	23c0      	movs	r3, #192	; 0xc0
 8002490:	025b      	lsls	r3, r3, #9
 8002492:	401a      	ands	r2, r3
 8002494:	23c0      	movs	r3, #192	; 0xc0
 8002496:	025b      	lsls	r3, r3, #9
 8002498:	429a      	cmp	r2, r3
 800249a:	d109      	bne.n	80024b0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800249c:	68b9      	ldr	r1, [r7, #8]
 800249e:	4814      	ldr	r0, [pc, #80]	; (80024f0 <HAL_RCC_GetSysClockFreq+0xe0>)
 80024a0:	f7fd fe32 	bl	8000108 <__udivsi3>
 80024a4:	0003      	movs	r3, r0
 80024a6:	001a      	movs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4353      	muls	r3, r2
 80024ac:	617b      	str	r3, [r7, #20]
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024b0:	68b9      	ldr	r1, [r7, #8]
 80024b2:	480c      	ldr	r0, [pc, #48]	; (80024e4 <HAL_RCC_GetSysClockFreq+0xd4>)
 80024b4:	f7fd fe28 	bl	8000108 <__udivsi3>
 80024b8:	0003      	movs	r3, r0
 80024ba:	001a      	movs	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4353      	muls	r3, r2
 80024c0:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	613b      	str	r3, [r7, #16]
      break;
 80024c6:	e005      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80024c8:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <HAL_RCC_GetSysClockFreq+0xe0>)
 80024ca:	613b      	str	r3, [r7, #16]
      break;
 80024cc:	e002      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024ce:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <HAL_RCC_GetSysClockFreq+0xd4>)
 80024d0:	613b      	str	r3, [r7, #16]
      break;
 80024d2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80024d4:	693b      	ldr	r3, [r7, #16]
}
 80024d6:	0018      	movs	r0, r3
 80024d8:	46bd      	mov	sp, r7
 80024da:	b006      	add	sp, #24
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	46c0      	nop			; (mov r8, r8)
 80024e0:	40021000 	.word	0x40021000
 80024e4:	007a1200 	.word	0x007a1200
 80024e8:	080043b0 	.word	0x080043b0
 80024ec:	080043c0 	.word	0x080043c0
 80024f0:	02dc6c00 	.word	0x02dc6c00

080024f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024f8:	4b02      	ldr	r3, [pc, #8]	; (8002504 <HAL_RCC_GetHCLKFreq+0x10>)
 80024fa:	681b      	ldr	r3, [r3, #0]
}
 80024fc:	0018      	movs	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	46c0      	nop			; (mov r8, r8)
 8002504:	20000000 	.word	0x20000000

08002508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800250c:	f7ff fff2 	bl	80024f4 <HAL_RCC_GetHCLKFreq>
 8002510:	0001      	movs	r1, r0
 8002512:	4b06      	ldr	r3, [pc, #24]	; (800252c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	0a1b      	lsrs	r3, r3, #8
 8002518:	2207      	movs	r2, #7
 800251a:	4013      	ands	r3, r2
 800251c:	4a04      	ldr	r2, [pc, #16]	; (8002530 <HAL_RCC_GetPCLK1Freq+0x28>)
 800251e:	5cd3      	ldrb	r3, [r2, r3]
 8002520:	40d9      	lsrs	r1, r3
 8002522:	000b      	movs	r3, r1
}    
 8002524:	0018      	movs	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	40021000 	.word	0x40021000
 8002530:	080043a8 	.word	0x080043a8

08002534 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e042      	b.n	80025cc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	223d      	movs	r2, #61	; 0x3d
 800254a:	5c9b      	ldrb	r3, [r3, r2]
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d107      	bne.n	8002562 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	223c      	movs	r2, #60	; 0x3c
 8002556:	2100      	movs	r1, #0
 8002558:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	0018      	movs	r0, r3
 800255e:	f7fe fae5 	bl	8000b2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	223d      	movs	r2, #61	; 0x3d
 8002566:	2102      	movs	r1, #2
 8002568:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	3304      	adds	r3, #4
 8002572:	0019      	movs	r1, r3
 8002574:	0010      	movs	r0, r2
 8002576:	f000 fbf9 	bl	8002d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2246      	movs	r2, #70	; 0x46
 800257e:	2101      	movs	r1, #1
 8002580:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	223e      	movs	r2, #62	; 0x3e
 8002586:	2101      	movs	r1, #1
 8002588:	5499      	strb	r1, [r3, r2]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	223f      	movs	r2, #63	; 0x3f
 800258e:	2101      	movs	r1, #1
 8002590:	5499      	strb	r1, [r3, r2]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2240      	movs	r2, #64	; 0x40
 8002596:	2101      	movs	r1, #1
 8002598:	5499      	strb	r1, [r3, r2]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2241      	movs	r2, #65	; 0x41
 800259e:	2101      	movs	r1, #1
 80025a0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2242      	movs	r2, #66	; 0x42
 80025a6:	2101      	movs	r1, #1
 80025a8:	5499      	strb	r1, [r3, r2]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2243      	movs	r2, #67	; 0x43
 80025ae:	2101      	movs	r1, #1
 80025b0:	5499      	strb	r1, [r3, r2]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2244      	movs	r2, #68	; 0x44
 80025b6:	2101      	movs	r1, #1
 80025b8:	5499      	strb	r1, [r3, r2]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2245      	movs	r2, #69	; 0x45
 80025be:	2101      	movs	r1, #1
 80025c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	223d      	movs	r2, #61	; 0x3d
 80025c6:	2101      	movs	r1, #1
 80025c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	0018      	movs	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	b002      	add	sp, #8
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e042      	b.n	800266c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	223d      	movs	r2, #61	; 0x3d
 80025ea:	5c9b      	ldrb	r3, [r3, r2]
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d107      	bne.n	8002602 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	223c      	movs	r2, #60	; 0x3c
 80025f6:	2100      	movs	r1, #0
 80025f8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	0018      	movs	r0, r3
 80025fe:	f000 f839 	bl	8002674 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	223d      	movs	r2, #61	; 0x3d
 8002606:	2102      	movs	r1, #2
 8002608:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3304      	adds	r3, #4
 8002612:	0019      	movs	r1, r3
 8002614:	0010      	movs	r0, r2
 8002616:	f000 fba9 	bl	8002d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2246      	movs	r2, #70	; 0x46
 800261e:	2101      	movs	r1, #1
 8002620:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	223e      	movs	r2, #62	; 0x3e
 8002626:	2101      	movs	r1, #1
 8002628:	5499      	strb	r1, [r3, r2]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	223f      	movs	r2, #63	; 0x3f
 800262e:	2101      	movs	r1, #1
 8002630:	5499      	strb	r1, [r3, r2]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2240      	movs	r2, #64	; 0x40
 8002636:	2101      	movs	r1, #1
 8002638:	5499      	strb	r1, [r3, r2]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2241      	movs	r2, #65	; 0x41
 800263e:	2101      	movs	r1, #1
 8002640:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2242      	movs	r2, #66	; 0x42
 8002646:	2101      	movs	r1, #1
 8002648:	5499      	strb	r1, [r3, r2]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2243      	movs	r2, #67	; 0x43
 800264e:	2101      	movs	r1, #1
 8002650:	5499      	strb	r1, [r3, r2]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2244      	movs	r2, #68	; 0x44
 8002656:	2101      	movs	r1, #1
 8002658:	5499      	strb	r1, [r3, r2]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2245      	movs	r2, #69	; 0x45
 800265e:	2101      	movs	r1, #1
 8002660:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	223d      	movs	r2, #61	; 0x3d
 8002666:	2101      	movs	r1, #1
 8002668:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	0018      	movs	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	b002      	add	sp, #8
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800267c:	46c0      	nop			; (mov r8, r8)
 800267e:	46bd      	mov	sp, r7
 8002680:	b002      	add	sp, #8
 8002682:	bd80      	pop	{r7, pc}

08002684 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d108      	bne.n	80026a6 <HAL_TIM_PWM_Start+0x22>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	223e      	movs	r2, #62	; 0x3e
 8002698:	5c9b      	ldrb	r3, [r3, r2]
 800269a:	b2db      	uxtb	r3, r3
 800269c:	3b01      	subs	r3, #1
 800269e:	1e5a      	subs	r2, r3, #1
 80026a0:	4193      	sbcs	r3, r2
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	e01f      	b.n	80026e6 <HAL_TIM_PWM_Start+0x62>
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	2b04      	cmp	r3, #4
 80026aa:	d108      	bne.n	80026be <HAL_TIM_PWM_Start+0x3a>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	223f      	movs	r2, #63	; 0x3f
 80026b0:	5c9b      	ldrb	r3, [r3, r2]
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	3b01      	subs	r3, #1
 80026b6:	1e5a      	subs	r2, r3, #1
 80026b8:	4193      	sbcs	r3, r2
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	e013      	b.n	80026e6 <HAL_TIM_PWM_Start+0x62>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d108      	bne.n	80026d6 <HAL_TIM_PWM_Start+0x52>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2240      	movs	r2, #64	; 0x40
 80026c8:	5c9b      	ldrb	r3, [r3, r2]
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	3b01      	subs	r3, #1
 80026ce:	1e5a      	subs	r2, r3, #1
 80026d0:	4193      	sbcs	r3, r2
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	e007      	b.n	80026e6 <HAL_TIM_PWM_Start+0x62>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2241      	movs	r2, #65	; 0x41
 80026da:	5c9b      	ldrb	r3, [r3, r2]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	3b01      	subs	r3, #1
 80026e0:	1e5a      	subs	r2, r3, #1
 80026e2:	4193      	sbcs	r3, r2
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e06a      	b.n	80027c4 <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d104      	bne.n	80026fe <HAL_TIM_PWM_Start+0x7a>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	223e      	movs	r2, #62	; 0x3e
 80026f8:	2102      	movs	r1, #2
 80026fa:	5499      	strb	r1, [r3, r2]
 80026fc:	e013      	b.n	8002726 <HAL_TIM_PWM_Start+0xa2>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	2b04      	cmp	r3, #4
 8002702:	d104      	bne.n	800270e <HAL_TIM_PWM_Start+0x8a>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	223f      	movs	r2, #63	; 0x3f
 8002708:	2102      	movs	r1, #2
 800270a:	5499      	strb	r1, [r3, r2]
 800270c:	e00b      	b.n	8002726 <HAL_TIM_PWM_Start+0xa2>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	2b08      	cmp	r3, #8
 8002712:	d104      	bne.n	800271e <HAL_TIM_PWM_Start+0x9a>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2240      	movs	r2, #64	; 0x40
 8002718:	2102      	movs	r1, #2
 800271a:	5499      	strb	r1, [r3, r2]
 800271c:	e003      	b.n	8002726 <HAL_TIM_PWM_Start+0xa2>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2241      	movs	r2, #65	; 0x41
 8002722:	2102      	movs	r1, #2
 8002724:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6839      	ldr	r1, [r7, #0]
 800272c:	2201      	movs	r2, #1
 800272e:	0018      	movs	r0, r3
 8002730:	f000 fe0c 	bl	800334c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a24      	ldr	r2, [pc, #144]	; (80027cc <HAL_TIM_PWM_Start+0x148>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d009      	beq.n	8002752 <HAL_TIM_PWM_Start+0xce>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a23      	ldr	r2, [pc, #140]	; (80027d0 <HAL_TIM_PWM_Start+0x14c>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d004      	beq.n	8002752 <HAL_TIM_PWM_Start+0xce>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a21      	ldr	r2, [pc, #132]	; (80027d4 <HAL_TIM_PWM_Start+0x150>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d101      	bne.n	8002756 <HAL_TIM_PWM_Start+0xd2>
 8002752:	2301      	movs	r3, #1
 8002754:	e000      	b.n	8002758 <HAL_TIM_PWM_Start+0xd4>
 8002756:	2300      	movs	r3, #0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d008      	beq.n	800276e <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2180      	movs	r1, #128	; 0x80
 8002768:	0209      	lsls	r1, r1, #8
 800276a:	430a      	orrs	r2, r1
 800276c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a16      	ldr	r2, [pc, #88]	; (80027cc <HAL_TIM_PWM_Start+0x148>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d00a      	beq.n	800278e <HAL_TIM_PWM_Start+0x10a>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	2380      	movs	r3, #128	; 0x80
 800277e:	05db      	lsls	r3, r3, #23
 8002780:	429a      	cmp	r2, r3
 8002782:	d004      	beq.n	800278e <HAL_TIM_PWM_Start+0x10a>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a13      	ldr	r2, [pc, #76]	; (80027d8 <HAL_TIM_PWM_Start+0x154>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d111      	bne.n	80027b2 <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	2207      	movs	r2, #7
 8002796:	4013      	ands	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2b06      	cmp	r3, #6
 800279e:	d010      	beq.n	80027c2 <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2101      	movs	r1, #1
 80027ac:	430a      	orrs	r2, r1
 80027ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027b0:	e007      	b.n	80027c2 <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2101      	movs	r1, #1
 80027be:	430a      	orrs	r2, r1
 80027c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	0018      	movs	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	b004      	add	sp, #16
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40012c00 	.word	0x40012c00
 80027d0:	40014400 	.word	0x40014400
 80027d4:	40014800 	.word	0x40014800
 80027d8:	40000400 	.word	0x40000400

080027dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	2202      	movs	r2, #2
 80027ec:	4013      	ands	r3, r2
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d124      	bne.n	800283c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	2202      	movs	r2, #2
 80027fa:	4013      	ands	r3, r2
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d11d      	bne.n	800283c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2203      	movs	r2, #3
 8002806:	4252      	negs	r2, r2
 8002808:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	2203      	movs	r2, #3
 8002818:	4013      	ands	r3, r2
 800281a:	d004      	beq.n	8002826 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	0018      	movs	r0, r3
 8002820:	f7fe f8fc 	bl	8000a1c <HAL_TIM_IC_CaptureCallback>
 8002824:	e007      	b.n	8002836 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	0018      	movs	r0, r3
 800282a:	f000 fa87 	bl	8002d3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	0018      	movs	r0, r3
 8002832:	f000 fa8b 	bl	8002d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	2204      	movs	r2, #4
 8002844:	4013      	ands	r3, r2
 8002846:	2b04      	cmp	r3, #4
 8002848:	d125      	bne.n	8002896 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	2204      	movs	r2, #4
 8002852:	4013      	ands	r3, r2
 8002854:	2b04      	cmp	r3, #4
 8002856:	d11e      	bne.n	8002896 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2205      	movs	r2, #5
 800285e:	4252      	negs	r2, r2
 8002860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2202      	movs	r2, #2
 8002866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	699a      	ldr	r2, [r3, #24]
 800286e:	23c0      	movs	r3, #192	; 0xc0
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4013      	ands	r3, r2
 8002874:	d004      	beq.n	8002880 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	0018      	movs	r0, r3
 800287a:	f7fe f8cf 	bl	8000a1c <HAL_TIM_IC_CaptureCallback>
 800287e:	e007      	b.n	8002890 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	0018      	movs	r0, r3
 8002884:	f000 fa5a 	bl	8002d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	0018      	movs	r0, r3
 800288c:	f000 fa5e 	bl	8002d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	2208      	movs	r2, #8
 800289e:	4013      	ands	r3, r2
 80028a0:	2b08      	cmp	r3, #8
 80028a2:	d124      	bne.n	80028ee <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	2208      	movs	r2, #8
 80028ac:	4013      	ands	r3, r2
 80028ae:	2b08      	cmp	r3, #8
 80028b0:	d11d      	bne.n	80028ee <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2209      	movs	r2, #9
 80028b8:	4252      	negs	r2, r2
 80028ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2204      	movs	r2, #4
 80028c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	69db      	ldr	r3, [r3, #28]
 80028c8:	2203      	movs	r2, #3
 80028ca:	4013      	ands	r3, r2
 80028cc:	d004      	beq.n	80028d8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	0018      	movs	r0, r3
 80028d2:	f7fe f8a3 	bl	8000a1c <HAL_TIM_IC_CaptureCallback>
 80028d6:	e007      	b.n	80028e8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	0018      	movs	r0, r3
 80028dc:	f000 fa2e 	bl	8002d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	0018      	movs	r0, r3
 80028e4:	f000 fa32 	bl	8002d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	2210      	movs	r2, #16
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b10      	cmp	r3, #16
 80028fa:	d125      	bne.n	8002948 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	2210      	movs	r2, #16
 8002904:	4013      	ands	r3, r2
 8002906:	2b10      	cmp	r3, #16
 8002908:	d11e      	bne.n	8002948 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2211      	movs	r2, #17
 8002910:	4252      	negs	r2, r2
 8002912:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2208      	movs	r2, #8
 8002918:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	69da      	ldr	r2, [r3, #28]
 8002920:	23c0      	movs	r3, #192	; 0xc0
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4013      	ands	r3, r2
 8002926:	d004      	beq.n	8002932 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	0018      	movs	r0, r3
 800292c:	f7fe f876 	bl	8000a1c <HAL_TIM_IC_CaptureCallback>
 8002930:	e007      	b.n	8002942 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	0018      	movs	r0, r3
 8002936:	f000 fa01 	bl	8002d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	0018      	movs	r0, r3
 800293e:	f000 fa05 	bl	8002d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	2201      	movs	r2, #1
 8002950:	4013      	ands	r3, r2
 8002952:	2b01      	cmp	r3, #1
 8002954:	d10f      	bne.n	8002976 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	2201      	movs	r2, #1
 800295e:	4013      	ands	r3, r2
 8002960:	2b01      	cmp	r3, #1
 8002962:	d108      	bne.n	8002976 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2202      	movs	r2, #2
 800296a:	4252      	negs	r2, r2
 800296c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	0018      	movs	r0, r3
 8002972:	f7fe f85b 	bl	8000a2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	2280      	movs	r2, #128	; 0x80
 800297e:	4013      	ands	r3, r2
 8002980:	2b80      	cmp	r3, #128	; 0x80
 8002982:	d10f      	bne.n	80029a4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	2280      	movs	r2, #128	; 0x80
 800298c:	4013      	ands	r3, r2
 800298e:	2b80      	cmp	r3, #128	; 0x80
 8002990:	d108      	bne.n	80029a4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2281      	movs	r2, #129	; 0x81
 8002998:	4252      	negs	r2, r2
 800299a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	0018      	movs	r0, r3
 80029a0:	f000 fdb6 	bl	8003510 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	2240      	movs	r2, #64	; 0x40
 80029ac:	4013      	ands	r3, r2
 80029ae:	2b40      	cmp	r3, #64	; 0x40
 80029b0:	d10f      	bne.n	80029d2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	2240      	movs	r2, #64	; 0x40
 80029ba:	4013      	ands	r3, r2
 80029bc:	2b40      	cmp	r3, #64	; 0x40
 80029be:	d108      	bne.n	80029d2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2241      	movs	r2, #65	; 0x41
 80029c6:	4252      	negs	r2, r2
 80029c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	0018      	movs	r0, r3
 80029ce:	f000 f9c5 	bl	8002d5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	2220      	movs	r2, #32
 80029da:	4013      	ands	r3, r2
 80029dc:	2b20      	cmp	r3, #32
 80029de:	d10f      	bne.n	8002a00 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	2220      	movs	r2, #32
 80029e8:	4013      	ands	r3, r2
 80029ea:	2b20      	cmp	r3, #32
 80029ec:	d108      	bne.n	8002a00 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2221      	movs	r2, #33	; 0x21
 80029f4:	4252      	negs	r2, r2
 80029f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	0018      	movs	r0, r3
 80029fc:	f000 fd80 	bl	8003500 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a00:	46c0      	nop			; (mov r8, r8)
 8002a02:	46bd      	mov	sp, r7
 8002a04:	b002      	add	sp, #8
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a14:	2317      	movs	r3, #23
 8002a16:	18fb      	adds	r3, r7, r3
 8002a18:	2200      	movs	r2, #0
 8002a1a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	223c      	movs	r2, #60	; 0x3c
 8002a20:	5c9b      	ldrb	r3, [r3, r2]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d101      	bne.n	8002a2a <HAL_TIM_PWM_ConfigChannel+0x22>
 8002a26:	2302      	movs	r3, #2
 8002a28:	e0ad      	b.n	8002b86 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	223c      	movs	r2, #60	; 0x3c
 8002a2e:	2101      	movs	r1, #1
 8002a30:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b0c      	cmp	r3, #12
 8002a36:	d100      	bne.n	8002a3a <HAL_TIM_PWM_ConfigChannel+0x32>
 8002a38:	e076      	b.n	8002b28 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b0c      	cmp	r3, #12
 8002a3e:	d900      	bls.n	8002a42 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002a40:	e095      	b.n	8002b6e <HAL_TIM_PWM_ConfigChannel+0x166>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	d04e      	beq.n	8002ae6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b08      	cmp	r3, #8
 8002a4c:	d900      	bls.n	8002a50 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002a4e:	e08e      	b.n	8002b6e <HAL_TIM_PWM_ConfigChannel+0x166>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_TIM_PWM_ConfigChannel+0x56>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d021      	beq.n	8002aa0 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002a5c:	e087      	b.n	8002b6e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	0011      	movs	r1, r2
 8002a66:	0018      	movs	r0, r3
 8002a68:	f000 f9f6 	bl	8002e58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699a      	ldr	r2, [r3, #24]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2108      	movs	r1, #8
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699a      	ldr	r2, [r3, #24]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2104      	movs	r1, #4
 8002a88:	438a      	bics	r2, r1
 8002a8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6999      	ldr	r1, [r3, #24]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	691a      	ldr	r2, [r3, #16]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	619a      	str	r2, [r3, #24]
      break;
 8002a9e:	e06b      	b.n	8002b78 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68ba      	ldr	r2, [r7, #8]
 8002aa6:	0011      	movs	r1, r2
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f000 fa53 	bl	8002f54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	699a      	ldr	r2, [r3, #24]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2180      	movs	r1, #128	; 0x80
 8002aba:	0109      	lsls	r1, r1, #4
 8002abc:	430a      	orrs	r2, r1
 8002abe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	699a      	ldr	r2, [r3, #24]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4931      	ldr	r1, [pc, #196]	; (8002b90 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002acc:	400a      	ands	r2, r1
 8002ace:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6999      	ldr	r1, [r3, #24]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	021a      	lsls	r2, r3, #8
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	619a      	str	r2, [r3, #24]
      break;
 8002ae4:	e048      	b.n	8002b78 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	0011      	movs	r1, r2
 8002aee:	0018      	movs	r0, r3
 8002af0:	f000 faae 	bl	8003050 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	69da      	ldr	r2, [r3, #28]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2108      	movs	r1, #8
 8002b00:	430a      	orrs	r2, r1
 8002b02:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	69da      	ldr	r2, [r3, #28]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2104      	movs	r1, #4
 8002b10:	438a      	bics	r2, r1
 8002b12:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	69d9      	ldr	r1, [r3, #28]
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	691a      	ldr	r2, [r3, #16]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	61da      	str	r2, [r3, #28]
      break;
 8002b26:	e027      	b.n	8002b78 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	0011      	movs	r1, r2
 8002b30:	0018      	movs	r0, r3
 8002b32:	f000 fb0d 	bl	8003150 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	69da      	ldr	r2, [r3, #28]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2180      	movs	r1, #128	; 0x80
 8002b42:	0109      	lsls	r1, r1, #4
 8002b44:	430a      	orrs	r2, r1
 8002b46:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	69da      	ldr	r2, [r3, #28]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	490f      	ldr	r1, [pc, #60]	; (8002b90 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002b54:	400a      	ands	r2, r1
 8002b56:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	69d9      	ldr	r1, [r3, #28]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	021a      	lsls	r2, r3, #8
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	61da      	str	r2, [r3, #28]
      break;
 8002b6c:	e004      	b.n	8002b78 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002b6e:	2317      	movs	r3, #23
 8002b70:	18fb      	adds	r3, r7, r3
 8002b72:	2201      	movs	r2, #1
 8002b74:	701a      	strb	r2, [r3, #0]
      break;
 8002b76:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	223c      	movs	r2, #60	; 0x3c
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	5499      	strb	r1, [r3, r2]

  return status;
 8002b80:	2317      	movs	r3, #23
 8002b82:	18fb      	adds	r3, r7, r3
 8002b84:	781b      	ldrb	r3, [r3, #0]
}
 8002b86:	0018      	movs	r0, r3
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	b006      	add	sp, #24
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	46c0      	nop			; (mov r8, r8)
 8002b90:	fffffbff 	.word	0xfffffbff

08002b94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b9e:	230f      	movs	r3, #15
 8002ba0:	18fb      	adds	r3, r7, r3
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	223c      	movs	r2, #60	; 0x3c
 8002baa:	5c9b      	ldrb	r3, [r3, r2]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d101      	bne.n	8002bb4 <HAL_TIM_ConfigClockSource+0x20>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e0bc      	b.n	8002d2e <HAL_TIM_ConfigClockSource+0x19a>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	223c      	movs	r2, #60	; 0x3c
 8002bb8:	2101      	movs	r1, #1
 8002bba:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	223d      	movs	r2, #61	; 0x3d
 8002bc0:	2102      	movs	r1, #2
 8002bc2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2277      	movs	r2, #119	; 0x77
 8002bd0:	4393      	bics	r3, r2
 8002bd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	4a58      	ldr	r2, [pc, #352]	; (8002d38 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2280      	movs	r2, #128	; 0x80
 8002bea:	0192      	lsls	r2, r2, #6
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d040      	beq.n	8002c72 <HAL_TIM_ConfigClockSource+0xde>
 8002bf0:	2280      	movs	r2, #128	; 0x80
 8002bf2:	0192      	lsls	r2, r2, #6
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d900      	bls.n	8002bfa <HAL_TIM_ConfigClockSource+0x66>
 8002bf8:	e088      	b.n	8002d0c <HAL_TIM_ConfigClockSource+0x178>
 8002bfa:	2280      	movs	r2, #128	; 0x80
 8002bfc:	0152      	lsls	r2, r2, #5
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d100      	bne.n	8002c04 <HAL_TIM_ConfigClockSource+0x70>
 8002c02:	e088      	b.n	8002d16 <HAL_TIM_ConfigClockSource+0x182>
 8002c04:	2280      	movs	r2, #128	; 0x80
 8002c06:	0152      	lsls	r2, r2, #5
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d900      	bls.n	8002c0e <HAL_TIM_ConfigClockSource+0x7a>
 8002c0c:	e07e      	b.n	8002d0c <HAL_TIM_ConfigClockSource+0x178>
 8002c0e:	2b70      	cmp	r3, #112	; 0x70
 8002c10:	d018      	beq.n	8002c44 <HAL_TIM_ConfigClockSource+0xb0>
 8002c12:	d900      	bls.n	8002c16 <HAL_TIM_ConfigClockSource+0x82>
 8002c14:	e07a      	b.n	8002d0c <HAL_TIM_ConfigClockSource+0x178>
 8002c16:	2b60      	cmp	r3, #96	; 0x60
 8002c18:	d04f      	beq.n	8002cba <HAL_TIM_ConfigClockSource+0x126>
 8002c1a:	d900      	bls.n	8002c1e <HAL_TIM_ConfigClockSource+0x8a>
 8002c1c:	e076      	b.n	8002d0c <HAL_TIM_ConfigClockSource+0x178>
 8002c1e:	2b50      	cmp	r3, #80	; 0x50
 8002c20:	d03b      	beq.n	8002c9a <HAL_TIM_ConfigClockSource+0x106>
 8002c22:	d900      	bls.n	8002c26 <HAL_TIM_ConfigClockSource+0x92>
 8002c24:	e072      	b.n	8002d0c <HAL_TIM_ConfigClockSource+0x178>
 8002c26:	2b40      	cmp	r3, #64	; 0x40
 8002c28:	d057      	beq.n	8002cda <HAL_TIM_ConfigClockSource+0x146>
 8002c2a:	d900      	bls.n	8002c2e <HAL_TIM_ConfigClockSource+0x9a>
 8002c2c:	e06e      	b.n	8002d0c <HAL_TIM_ConfigClockSource+0x178>
 8002c2e:	2b30      	cmp	r3, #48	; 0x30
 8002c30:	d063      	beq.n	8002cfa <HAL_TIM_ConfigClockSource+0x166>
 8002c32:	d86b      	bhi.n	8002d0c <HAL_TIM_ConfigClockSource+0x178>
 8002c34:	2b20      	cmp	r3, #32
 8002c36:	d060      	beq.n	8002cfa <HAL_TIM_ConfigClockSource+0x166>
 8002c38:	d868      	bhi.n	8002d0c <HAL_TIM_ConfigClockSource+0x178>
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d05d      	beq.n	8002cfa <HAL_TIM_ConfigClockSource+0x166>
 8002c3e:	2b10      	cmp	r3, #16
 8002c40:	d05b      	beq.n	8002cfa <HAL_TIM_ConfigClockSource+0x166>
 8002c42:	e063      	b.n	8002d0c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c54:	f000 fb5a 	bl	800330c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	2277      	movs	r2, #119	; 0x77
 8002c64:	4313      	orrs	r3, r2
 8002c66:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	609a      	str	r2, [r3, #8]
      break;
 8002c70:	e052      	b.n	8002d18 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c82:	f000 fb43 	bl	800330c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2180      	movs	r1, #128	; 0x80
 8002c92:	01c9      	lsls	r1, r1, #7
 8002c94:	430a      	orrs	r2, r1
 8002c96:	609a      	str	r2, [r3, #8]
      break;
 8002c98:	e03e      	b.n	8002d18 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ca6:	001a      	movs	r2, r3
 8002ca8:	f000 fab6 	bl	8003218 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2150      	movs	r1, #80	; 0x50
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	f000 fb10 	bl	80032d8 <TIM_ITRx_SetConfig>
      break;
 8002cb8:	e02e      	b.n	8002d18 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cc6:	001a      	movs	r2, r3
 8002cc8:	f000 fad4 	bl	8003274 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2160      	movs	r1, #96	; 0x60
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f000 fb00 	bl	80032d8 <TIM_ITRx_SetConfig>
      break;
 8002cd8:	e01e      	b.n	8002d18 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ce6:	001a      	movs	r2, r3
 8002ce8:	f000 fa96 	bl	8003218 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2140      	movs	r1, #64	; 0x40
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	f000 faf0 	bl	80032d8 <TIM_ITRx_SetConfig>
      break;
 8002cf8:	e00e      	b.n	8002d18 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	0019      	movs	r1, r3
 8002d04:	0010      	movs	r0, r2
 8002d06:	f000 fae7 	bl	80032d8 <TIM_ITRx_SetConfig>
      break;
 8002d0a:	e005      	b.n	8002d18 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002d0c:	230f      	movs	r3, #15
 8002d0e:	18fb      	adds	r3, r7, r3
 8002d10:	2201      	movs	r2, #1
 8002d12:	701a      	strb	r2, [r3, #0]
      break;
 8002d14:	e000      	b.n	8002d18 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002d16:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	223d      	movs	r2, #61	; 0x3d
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	223c      	movs	r2, #60	; 0x3c
 8002d24:	2100      	movs	r1, #0
 8002d26:	5499      	strb	r1, [r3, r2]

  return status;
 8002d28:	230f      	movs	r3, #15
 8002d2a:	18fb      	adds	r3, r7, r3
 8002d2c:	781b      	ldrb	r3, [r3, #0]
}
 8002d2e:	0018      	movs	r0, r3
 8002d30:	46bd      	mov	sp, r7
 8002d32:	b004      	add	sp, #16
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	46c0      	nop			; (mov r8, r8)
 8002d38:	ffff00ff 	.word	0xffff00ff

08002d3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d44:	46c0      	nop			; (mov r8, r8)
 8002d46:	46bd      	mov	sp, r7
 8002d48:	b002      	add	sp, #8
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d54:	46c0      	nop			; (mov r8, r8)
 8002d56:	46bd      	mov	sp, r7
 8002d58:	b002      	add	sp, #8
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d64:	46c0      	nop			; (mov r8, r8)
 8002d66:	46bd      	mov	sp, r7
 8002d68:	b002      	add	sp, #8
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a30      	ldr	r2, [pc, #192]	; (8002e40 <TIM_Base_SetConfig+0xd4>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d008      	beq.n	8002d96 <TIM_Base_SetConfig+0x2a>
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	2380      	movs	r3, #128	; 0x80
 8002d88:	05db      	lsls	r3, r3, #23
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d003      	beq.n	8002d96 <TIM_Base_SetConfig+0x2a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a2c      	ldr	r2, [pc, #176]	; (8002e44 <TIM_Base_SetConfig+0xd8>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d108      	bne.n	8002da8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2270      	movs	r2, #112	; 0x70
 8002d9a:	4393      	bics	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a25      	ldr	r2, [pc, #148]	; (8002e40 <TIM_Base_SetConfig+0xd4>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d014      	beq.n	8002dda <TIM_Base_SetConfig+0x6e>
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	2380      	movs	r3, #128	; 0x80
 8002db4:	05db      	lsls	r3, r3, #23
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d00f      	beq.n	8002dda <TIM_Base_SetConfig+0x6e>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a21      	ldr	r2, [pc, #132]	; (8002e44 <TIM_Base_SetConfig+0xd8>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d00b      	beq.n	8002dda <TIM_Base_SetConfig+0x6e>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a20      	ldr	r2, [pc, #128]	; (8002e48 <TIM_Base_SetConfig+0xdc>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d007      	beq.n	8002dda <TIM_Base_SetConfig+0x6e>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a1f      	ldr	r2, [pc, #124]	; (8002e4c <TIM_Base_SetConfig+0xe0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d003      	beq.n	8002dda <TIM_Base_SetConfig+0x6e>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a1e      	ldr	r2, [pc, #120]	; (8002e50 <TIM_Base_SetConfig+0xe4>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d108      	bne.n	8002dec <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	4a1d      	ldr	r2, [pc, #116]	; (8002e54 <TIM_Base_SetConfig+0xe8>)
 8002dde:	4013      	ands	r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2280      	movs	r2, #128	; 0x80
 8002df0:	4393      	bics	r3, r2
 8002df2:	001a      	movs	r2, r3
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a0a      	ldr	r2, [pc, #40]	; (8002e40 <TIM_Base_SetConfig+0xd4>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d007      	beq.n	8002e2a <TIM_Base_SetConfig+0xbe>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a0b      	ldr	r2, [pc, #44]	; (8002e4c <TIM_Base_SetConfig+0xe0>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d003      	beq.n	8002e2a <TIM_Base_SetConfig+0xbe>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a0a      	ldr	r2, [pc, #40]	; (8002e50 <TIM_Base_SetConfig+0xe4>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d103      	bne.n	8002e32 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	691a      	ldr	r2, [r3, #16]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	615a      	str	r2, [r3, #20]
}
 8002e38:	46c0      	nop			; (mov r8, r8)
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	b004      	add	sp, #16
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40012c00 	.word	0x40012c00
 8002e44:	40000400 	.word	0x40000400
 8002e48:	40002000 	.word	0x40002000
 8002e4c:	40014400 	.word	0x40014400
 8002e50:	40014800 	.word	0x40014800
 8002e54:	fffffcff 	.word	0xfffffcff

08002e58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	2201      	movs	r2, #1
 8002e68:	4393      	bics	r3, r2
 8002e6a:	001a      	movs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2270      	movs	r2, #112	; 0x70
 8002e86:	4393      	bics	r3, r2
 8002e88:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	4393      	bics	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	4393      	bics	r3, r2
 8002ea2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a23      	ldr	r2, [pc, #140]	; (8002f40 <TIM_OC1_SetConfig+0xe8>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d007      	beq.n	8002ec6 <TIM_OC1_SetConfig+0x6e>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a22      	ldr	r2, [pc, #136]	; (8002f44 <TIM_OC1_SetConfig+0xec>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d003      	beq.n	8002ec6 <TIM_OC1_SetConfig+0x6e>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a21      	ldr	r2, [pc, #132]	; (8002f48 <TIM_OC1_SetConfig+0xf0>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d10c      	bne.n	8002ee0 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2208      	movs	r2, #8
 8002eca:	4393      	bics	r3, r2
 8002ecc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	2204      	movs	r2, #4
 8002edc:	4393      	bics	r3, r2
 8002ede:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a17      	ldr	r2, [pc, #92]	; (8002f40 <TIM_OC1_SetConfig+0xe8>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d007      	beq.n	8002ef8 <TIM_OC1_SetConfig+0xa0>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a16      	ldr	r2, [pc, #88]	; (8002f44 <TIM_OC1_SetConfig+0xec>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d003      	beq.n	8002ef8 <TIM_OC1_SetConfig+0xa0>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a15      	ldr	r2, [pc, #84]	; (8002f48 <TIM_OC1_SetConfig+0xf0>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d111      	bne.n	8002f1c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	4a14      	ldr	r2, [pc, #80]	; (8002f4c <TIM_OC1_SetConfig+0xf4>)
 8002efc:	4013      	ands	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	4a13      	ldr	r2, [pc, #76]	; (8002f50 <TIM_OC1_SetConfig+0xf8>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	621a      	str	r2, [r3, #32]
}
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	b006      	add	sp, #24
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	40012c00 	.word	0x40012c00
 8002f44:	40014400 	.word	0x40014400
 8002f48:	40014800 	.word	0x40014800
 8002f4c:	fffffeff 	.word	0xfffffeff
 8002f50:	fffffdff 	.word	0xfffffdff

08002f54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	2210      	movs	r2, #16
 8002f64:	4393      	bics	r3, r2
 8002f66:	001a      	movs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	4a2c      	ldr	r2, [pc, #176]	; (8003034 <TIM_OC2_SetConfig+0xe0>)
 8002f82:	4013      	ands	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	4a2b      	ldr	r2, [pc, #172]	; (8003038 <TIM_OC2_SetConfig+0xe4>)
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	021b      	lsls	r3, r3, #8
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	4393      	bics	r3, r2
 8002fa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a22      	ldr	r2, [pc, #136]	; (800303c <TIM_OC2_SetConfig+0xe8>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d10d      	bne.n	8002fd2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	2280      	movs	r2, #128	; 0x80
 8002fba:	4393      	bics	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2240      	movs	r2, #64	; 0x40
 8002fce:	4393      	bics	r3, r2
 8002fd0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a19      	ldr	r2, [pc, #100]	; (800303c <TIM_OC2_SetConfig+0xe8>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d007      	beq.n	8002fea <TIM_OC2_SetConfig+0x96>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a18      	ldr	r2, [pc, #96]	; (8003040 <TIM_OC2_SetConfig+0xec>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d003      	beq.n	8002fea <TIM_OC2_SetConfig+0x96>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a17      	ldr	r2, [pc, #92]	; (8003044 <TIM_OC2_SetConfig+0xf0>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d113      	bne.n	8003012 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	4a16      	ldr	r2, [pc, #88]	; (8003048 <TIM_OC2_SetConfig+0xf4>)
 8002fee:	4013      	ands	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	4a15      	ldr	r2, [pc, #84]	; (800304c <TIM_OC2_SetConfig+0xf8>)
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	4313      	orrs	r3, r2
 8003004:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	4313      	orrs	r3, r2
 8003010:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	621a      	str	r2, [r3, #32]
}
 800302c:	46c0      	nop			; (mov r8, r8)
 800302e:	46bd      	mov	sp, r7
 8003030:	b006      	add	sp, #24
 8003032:	bd80      	pop	{r7, pc}
 8003034:	ffff8fff 	.word	0xffff8fff
 8003038:	fffffcff 	.word	0xfffffcff
 800303c:	40012c00 	.word	0x40012c00
 8003040:	40014400 	.word	0x40014400
 8003044:	40014800 	.word	0x40014800
 8003048:	fffffbff 	.word	0xfffffbff
 800304c:	fffff7ff 	.word	0xfffff7ff

08003050 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	4a33      	ldr	r2, [pc, #204]	; (800312c <TIM_OC3_SetConfig+0xdc>)
 8003060:	401a      	ands	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2270      	movs	r2, #112	; 0x70
 800307c:	4393      	bics	r3, r2
 800307e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2203      	movs	r2, #3
 8003084:	4393      	bics	r3, r2
 8003086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	4313      	orrs	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	4a26      	ldr	r2, [pc, #152]	; (8003130 <TIM_OC3_SetConfig+0xe0>)
 8003096:	4013      	ands	r3, r2
 8003098:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	021b      	lsls	r3, r3, #8
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a22      	ldr	r2, [pc, #136]	; (8003134 <TIM_OC3_SetConfig+0xe4>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d10d      	bne.n	80030ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	4a21      	ldr	r2, [pc, #132]	; (8003138 <TIM_OC3_SetConfig+0xe8>)
 80030b2:	4013      	ands	r3, r2
 80030b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	021b      	lsls	r3, r3, #8
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	4313      	orrs	r3, r2
 80030c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	4a1d      	ldr	r2, [pc, #116]	; (800313c <TIM_OC3_SetConfig+0xec>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a19      	ldr	r2, [pc, #100]	; (8003134 <TIM_OC3_SetConfig+0xe4>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d007      	beq.n	80030e2 <TIM_OC3_SetConfig+0x92>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a1a      	ldr	r2, [pc, #104]	; (8003140 <TIM_OC3_SetConfig+0xf0>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d003      	beq.n	80030e2 <TIM_OC3_SetConfig+0x92>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a19      	ldr	r2, [pc, #100]	; (8003144 <TIM_OC3_SetConfig+0xf4>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d113      	bne.n	800310a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	4a18      	ldr	r2, [pc, #96]	; (8003148 <TIM_OC3_SetConfig+0xf8>)
 80030e6:	4013      	ands	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	4a17      	ldr	r2, [pc, #92]	; (800314c <TIM_OC3_SetConfig+0xfc>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	011b      	lsls	r3, r3, #4
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	4313      	orrs	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	621a      	str	r2, [r3, #32]
}
 8003124:	46c0      	nop			; (mov r8, r8)
 8003126:	46bd      	mov	sp, r7
 8003128:	b006      	add	sp, #24
 800312a:	bd80      	pop	{r7, pc}
 800312c:	fffffeff 	.word	0xfffffeff
 8003130:	fffffdff 	.word	0xfffffdff
 8003134:	40012c00 	.word	0x40012c00
 8003138:	fffff7ff 	.word	0xfffff7ff
 800313c:	fffffbff 	.word	0xfffffbff
 8003140:	40014400 	.word	0x40014400
 8003144:	40014800 	.word	0x40014800
 8003148:	ffffefff 	.word	0xffffefff
 800314c:	ffffdfff 	.word	0xffffdfff

08003150 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	4a26      	ldr	r2, [pc, #152]	; (80031f8 <TIM_OC4_SetConfig+0xa8>)
 8003160:	401a      	ands	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4a20      	ldr	r2, [pc, #128]	; (80031fc <TIM_OC4_SetConfig+0xac>)
 800317c:	4013      	ands	r3, r2
 800317e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4a1f      	ldr	r2, [pc, #124]	; (8003200 <TIM_OC4_SetConfig+0xb0>)
 8003184:	4013      	ands	r3, r2
 8003186:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	021b      	lsls	r3, r3, #8
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	4313      	orrs	r3, r2
 8003192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	4a1b      	ldr	r2, [pc, #108]	; (8003204 <TIM_OC4_SetConfig+0xb4>)
 8003198:	4013      	ands	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	031b      	lsls	r3, r3, #12
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a17      	ldr	r2, [pc, #92]	; (8003208 <TIM_OC4_SetConfig+0xb8>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d007      	beq.n	80031c0 <TIM_OC4_SetConfig+0x70>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a16      	ldr	r2, [pc, #88]	; (800320c <TIM_OC4_SetConfig+0xbc>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d003      	beq.n	80031c0 <TIM_OC4_SetConfig+0x70>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a15      	ldr	r2, [pc, #84]	; (8003210 <TIM_OC4_SetConfig+0xc0>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d109      	bne.n	80031d4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	4a14      	ldr	r2, [pc, #80]	; (8003214 <TIM_OC4_SetConfig+0xc4>)
 80031c4:	4013      	ands	r3, r2
 80031c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	019b      	lsls	r3, r3, #6
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	621a      	str	r2, [r3, #32]
}
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	46bd      	mov	sp, r7
 80031f2:	b006      	add	sp, #24
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	46c0      	nop			; (mov r8, r8)
 80031f8:	ffffefff 	.word	0xffffefff
 80031fc:	ffff8fff 	.word	0xffff8fff
 8003200:	fffffcff 	.word	0xfffffcff
 8003204:	ffffdfff 	.word	0xffffdfff
 8003208:	40012c00 	.word	0x40012c00
 800320c:	40014400 	.word	0x40014400
 8003210:	40014800 	.word	0x40014800
 8003214:	ffffbfff 	.word	0xffffbfff

08003218 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	2201      	movs	r2, #1
 8003230:	4393      	bics	r3, r2
 8003232:	001a      	movs	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	22f0      	movs	r2, #240	; 0xf0
 8003242:	4393      	bics	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	4313      	orrs	r3, r2
 800324e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	220a      	movs	r2, #10
 8003254:	4393      	bics	r3, r2
 8003256:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	4313      	orrs	r3, r2
 800325e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	621a      	str	r2, [r3, #32]
}
 800326c:	46c0      	nop			; (mov r8, r8)
 800326e:	46bd      	mov	sp, r7
 8003270:	b006      	add	sp, #24
 8003272:	bd80      	pop	{r7, pc}

08003274 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	2210      	movs	r2, #16
 8003286:	4393      	bics	r3, r2
 8003288:	001a      	movs	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	4a0d      	ldr	r2, [pc, #52]	; (80032d4 <TIM_TI2_ConfigInputStage+0x60>)
 800329e:	4013      	ands	r3, r2
 80032a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	031b      	lsls	r3, r3, #12
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	22a0      	movs	r2, #160	; 0xa0
 80032b0:	4393      	bics	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	621a      	str	r2, [r3, #32]
}
 80032ca:	46c0      	nop			; (mov r8, r8)
 80032cc:	46bd      	mov	sp, r7
 80032ce:	b006      	add	sp, #24
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	46c0      	nop			; (mov r8, r8)
 80032d4:	ffff0fff 	.word	0xffff0fff

080032d8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2270      	movs	r2, #112	; 0x70
 80032ec:	4393      	bics	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	2207      	movs	r2, #7
 80032f8:	4313      	orrs	r3, r2
 80032fa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	609a      	str	r2, [r3, #8]
}
 8003302:	46c0      	nop			; (mov r8, r8)
 8003304:	46bd      	mov	sp, r7
 8003306:	b004      	add	sp, #16
 8003308:	bd80      	pop	{r7, pc}
	...

0800330c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
 8003318:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	4a09      	ldr	r2, [pc, #36]	; (8003348 <TIM_ETR_SetConfig+0x3c>)
 8003324:	4013      	ands	r3, r2
 8003326:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	021a      	lsls	r2, r3, #8
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	431a      	orrs	r2, r3
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	4313      	orrs	r3, r2
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	4313      	orrs	r3, r2
 8003338:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	609a      	str	r2, [r3, #8]
}
 8003340:	46c0      	nop			; (mov r8, r8)
 8003342:	46bd      	mov	sp, r7
 8003344:	b006      	add	sp, #24
 8003346:	bd80      	pop	{r7, pc}
 8003348:	ffff00ff 	.word	0xffff00ff

0800334c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	221f      	movs	r2, #31
 800335c:	4013      	ands	r3, r2
 800335e:	2201      	movs	r2, #1
 8003360:	409a      	lsls	r2, r3
 8003362:	0013      	movs	r3, r2
 8003364:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	43d2      	mvns	r2, r2
 800336e:	401a      	ands	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6a1a      	ldr	r2, [r3, #32]
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	211f      	movs	r1, #31
 800337c:	400b      	ands	r3, r1
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	4099      	lsls	r1, r3
 8003382:	000b      	movs	r3, r1
 8003384:	431a      	orrs	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	621a      	str	r2, [r3, #32]
}
 800338a:	46c0      	nop			; (mov r8, r8)
 800338c:	46bd      	mov	sp, r7
 800338e:	b006      	add	sp, #24
 8003390:	bd80      	pop	{r7, pc}
	...

08003394 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	223c      	movs	r2, #60	; 0x3c
 80033a2:	5c9b      	ldrb	r3, [r3, r2]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d101      	bne.n	80033ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033a8:	2302      	movs	r3, #2
 80033aa:	e042      	b.n	8003432 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	223c      	movs	r2, #60	; 0x3c
 80033b0:	2101      	movs	r1, #1
 80033b2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	223d      	movs	r2, #61	; 0x3d
 80033b8:	2102      	movs	r1, #2
 80033ba:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2270      	movs	r2, #112	; 0x70
 80033d0:	4393      	bics	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4313      	orrs	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a14      	ldr	r2, [pc, #80]	; (800343c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d00a      	beq.n	8003406 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	2380      	movs	r3, #128	; 0x80
 80033f6:	05db      	lsls	r3, r3, #23
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d004      	beq.n	8003406 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a0f      	ldr	r2, [pc, #60]	; (8003440 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d10c      	bne.n	8003420 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	2280      	movs	r2, #128	; 0x80
 800340a:	4393      	bics	r3, r2
 800340c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	4313      	orrs	r3, r2
 8003416:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	223d      	movs	r2, #61	; 0x3d
 8003424:	2101      	movs	r1, #1
 8003426:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	223c      	movs	r2, #60	; 0x3c
 800342c:	2100      	movs	r1, #0
 800342e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	0018      	movs	r0, r3
 8003434:	46bd      	mov	sp, r7
 8003436:	b004      	add	sp, #16
 8003438:	bd80      	pop	{r7, pc}
 800343a:	46c0      	nop			; (mov r8, r8)
 800343c:	40012c00 	.word	0x40012c00
 8003440:	40000400 	.word	0x40000400

08003444 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800344e:	2300      	movs	r3, #0
 8003450:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	223c      	movs	r2, #60	; 0x3c
 8003456:	5c9b      	ldrb	r3, [r3, r2]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800345c:	2302      	movs	r3, #2
 800345e:	e03e      	b.n	80034de <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	223c      	movs	r2, #60	; 0x3c
 8003464:	2101      	movs	r1, #1
 8003466:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	22ff      	movs	r2, #255	; 0xff
 800346c:	4393      	bics	r3, r2
 800346e:	001a      	movs	r2, r3
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	4313      	orrs	r3, r2
 8003476:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4a1b      	ldr	r2, [pc, #108]	; (80034e8 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 800347c:	401a      	ands	r2, r3
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	4313      	orrs	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	4a18      	ldr	r2, [pc, #96]	; (80034ec <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800348a:	401a      	ands	r2, r3
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	4313      	orrs	r3, r2
 8003492:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4a16      	ldr	r2, [pc, #88]	; (80034f0 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003498:	401a      	ands	r2, r3
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4313      	orrs	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	4a13      	ldr	r2, [pc, #76]	; (80034f4 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80034a6:	401a      	ands	r2, r3
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4a11      	ldr	r2, [pc, #68]	; (80034f8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80034b4:	401a      	ands	r2, r3
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	4a0e      	ldr	r2, [pc, #56]	; (80034fc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80034c2:	401a      	ands	r2, r3
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	223c      	movs	r2, #60	; 0x3c
 80034d8:	2100      	movs	r1, #0
 80034da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	0018      	movs	r0, r3
 80034e0:	46bd      	mov	sp, r7
 80034e2:	b004      	add	sp, #16
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	fffffcff 	.word	0xfffffcff
 80034ec:	fffffbff 	.word	0xfffffbff
 80034f0:	fffff7ff 	.word	0xfffff7ff
 80034f4:	ffffefff 	.word	0xffffefff
 80034f8:	ffffdfff 	.word	0xffffdfff
 80034fc:	ffffbfff 	.word	0xffffbfff

08003500 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003508:	46c0      	nop			; (mov r8, r8)
 800350a:	46bd      	mov	sp, r7
 800350c:	b002      	add	sp, #8
 800350e:	bd80      	pop	{r7, pc}

08003510 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003518:	46c0      	nop			; (mov r8, r8)
 800351a:	46bd      	mov	sp, r7
 800351c:	b002      	add	sp, #8
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e044      	b.n	80035bc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003536:	2b00      	cmp	r3, #0
 8003538:	d107      	bne.n	800354a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2278      	movs	r2, #120	; 0x78
 800353e:	2100      	movs	r1, #0
 8003540:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	0018      	movs	r0, r3
 8003546:	f7fd fc5b 	bl	8000e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2224      	movs	r2, #36	; 0x24
 800354e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2101      	movs	r1, #1
 800355c:	438a      	bics	r2, r1
 800355e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	0018      	movs	r0, r3
 8003564:	f000 fb2c 	bl	8003bc0 <UART_SetConfig>
 8003568:	0003      	movs	r3, r0
 800356a:	2b01      	cmp	r3, #1
 800356c:	d101      	bne.n	8003572 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e024      	b.n	80035bc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	0018      	movs	r0, r3
 800357e:	f000 fc5f 	bl	8003e40 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	490d      	ldr	r1, [pc, #52]	; (80035c4 <HAL_UART_Init+0xa4>)
 800358e:	400a      	ands	r2, r1
 8003590:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	212a      	movs	r1, #42	; 0x2a
 800359e:	438a      	bics	r2, r1
 80035a0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2101      	movs	r1, #1
 80035ae:	430a      	orrs	r2, r1
 80035b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	0018      	movs	r0, r3
 80035b6:	f000 fcf7 	bl	8003fa8 <UART_CheckIdleState>
 80035ba:	0003      	movs	r3, r0
}
 80035bc:	0018      	movs	r0, r3
 80035be:	46bd      	mov	sp, r7
 80035c0:	b002      	add	sp, #8
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	ffffb7ff 	.word	0xffffb7ff

080035c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035c8:	b590      	push	{r4, r7, lr}
 80035ca:	b0ab      	sub	sp, #172	; 0xac
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	22a4      	movs	r2, #164	; 0xa4
 80035d8:	18b9      	adds	r1, r7, r2
 80035da:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	20a0      	movs	r0, #160	; 0xa0
 80035e4:	1839      	adds	r1, r7, r0
 80035e6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	219c      	movs	r1, #156	; 0x9c
 80035f0:	1879      	adds	r1, r7, r1
 80035f2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80035f4:	0011      	movs	r1, r2
 80035f6:	18bb      	adds	r3, r7, r2
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a99      	ldr	r2, [pc, #612]	; (8003860 <HAL_UART_IRQHandler+0x298>)
 80035fc:	4013      	ands	r3, r2
 80035fe:	2298      	movs	r2, #152	; 0x98
 8003600:	18bc      	adds	r4, r7, r2
 8003602:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003604:	18bb      	adds	r3, r7, r2
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d114      	bne.n	8003636 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800360c:	187b      	adds	r3, r7, r1
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2220      	movs	r2, #32
 8003612:	4013      	ands	r3, r2
 8003614:	d00f      	beq.n	8003636 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003616:	183b      	adds	r3, r7, r0
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2220      	movs	r2, #32
 800361c:	4013      	ands	r3, r2
 800361e:	d00a      	beq.n	8003636 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003624:	2b00      	cmp	r3, #0
 8003626:	d100      	bne.n	800362a <HAL_UART_IRQHandler+0x62>
 8003628:	e29e      	b.n	8003b68 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	0010      	movs	r0, r2
 8003632:	4798      	blx	r3
      }
      return;
 8003634:	e298      	b.n	8003b68 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003636:	2398      	movs	r3, #152	; 0x98
 8003638:	18fb      	adds	r3, r7, r3
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d100      	bne.n	8003642 <HAL_UART_IRQHandler+0x7a>
 8003640:	e114      	b.n	800386c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003642:	239c      	movs	r3, #156	; 0x9c
 8003644:	18fb      	adds	r3, r7, r3
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2201      	movs	r2, #1
 800364a:	4013      	ands	r3, r2
 800364c:	d106      	bne.n	800365c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800364e:	23a0      	movs	r3, #160	; 0xa0
 8003650:	18fb      	adds	r3, r7, r3
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a83      	ldr	r2, [pc, #524]	; (8003864 <HAL_UART_IRQHandler+0x29c>)
 8003656:	4013      	ands	r3, r2
 8003658:	d100      	bne.n	800365c <HAL_UART_IRQHandler+0x94>
 800365a:	e107      	b.n	800386c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800365c:	23a4      	movs	r3, #164	; 0xa4
 800365e:	18fb      	adds	r3, r7, r3
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2201      	movs	r2, #1
 8003664:	4013      	ands	r3, r2
 8003666:	d012      	beq.n	800368e <HAL_UART_IRQHandler+0xc6>
 8003668:	23a0      	movs	r3, #160	; 0xa0
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	2380      	movs	r3, #128	; 0x80
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	4013      	ands	r3, r2
 8003674:	d00b      	beq.n	800368e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2201      	movs	r2, #1
 800367c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2284      	movs	r2, #132	; 0x84
 8003682:	589b      	ldr	r3, [r3, r2]
 8003684:	2201      	movs	r2, #1
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2184      	movs	r1, #132	; 0x84
 800368c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800368e:	23a4      	movs	r3, #164	; 0xa4
 8003690:	18fb      	adds	r3, r7, r3
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2202      	movs	r2, #2
 8003696:	4013      	ands	r3, r2
 8003698:	d011      	beq.n	80036be <HAL_UART_IRQHandler+0xf6>
 800369a:	239c      	movs	r3, #156	; 0x9c
 800369c:	18fb      	adds	r3, r7, r3
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2201      	movs	r2, #1
 80036a2:	4013      	ands	r3, r2
 80036a4:	d00b      	beq.n	80036be <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2202      	movs	r2, #2
 80036ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2284      	movs	r2, #132	; 0x84
 80036b2:	589b      	ldr	r3, [r3, r2]
 80036b4:	2204      	movs	r2, #4
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2184      	movs	r1, #132	; 0x84
 80036bc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036be:	23a4      	movs	r3, #164	; 0xa4
 80036c0:	18fb      	adds	r3, r7, r3
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2204      	movs	r2, #4
 80036c6:	4013      	ands	r3, r2
 80036c8:	d011      	beq.n	80036ee <HAL_UART_IRQHandler+0x126>
 80036ca:	239c      	movs	r3, #156	; 0x9c
 80036cc:	18fb      	adds	r3, r7, r3
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2201      	movs	r2, #1
 80036d2:	4013      	ands	r3, r2
 80036d4:	d00b      	beq.n	80036ee <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2204      	movs	r2, #4
 80036dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2284      	movs	r2, #132	; 0x84
 80036e2:	589b      	ldr	r3, [r3, r2]
 80036e4:	2202      	movs	r2, #2
 80036e6:	431a      	orrs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2184      	movs	r1, #132	; 0x84
 80036ec:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80036ee:	23a4      	movs	r3, #164	; 0xa4
 80036f0:	18fb      	adds	r3, r7, r3
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2208      	movs	r2, #8
 80036f6:	4013      	ands	r3, r2
 80036f8:	d017      	beq.n	800372a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036fa:	23a0      	movs	r3, #160	; 0xa0
 80036fc:	18fb      	adds	r3, r7, r3
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2220      	movs	r2, #32
 8003702:	4013      	ands	r3, r2
 8003704:	d105      	bne.n	8003712 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003706:	239c      	movs	r3, #156	; 0x9c
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2201      	movs	r2, #1
 800370e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003710:	d00b      	beq.n	800372a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2208      	movs	r2, #8
 8003718:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2284      	movs	r2, #132	; 0x84
 800371e:	589b      	ldr	r3, [r3, r2]
 8003720:	2208      	movs	r2, #8
 8003722:	431a      	orrs	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2184      	movs	r1, #132	; 0x84
 8003728:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800372a:	23a4      	movs	r3, #164	; 0xa4
 800372c:	18fb      	adds	r3, r7, r3
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	2380      	movs	r3, #128	; 0x80
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	4013      	ands	r3, r2
 8003736:	d013      	beq.n	8003760 <HAL_UART_IRQHandler+0x198>
 8003738:	23a0      	movs	r3, #160	; 0xa0
 800373a:	18fb      	adds	r3, r7, r3
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	2380      	movs	r3, #128	; 0x80
 8003740:	04db      	lsls	r3, r3, #19
 8003742:	4013      	ands	r3, r2
 8003744:	d00c      	beq.n	8003760 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2280      	movs	r2, #128	; 0x80
 800374c:	0112      	lsls	r2, r2, #4
 800374e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2284      	movs	r2, #132	; 0x84
 8003754:	589b      	ldr	r3, [r3, r2]
 8003756:	2220      	movs	r2, #32
 8003758:	431a      	orrs	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2184      	movs	r1, #132	; 0x84
 800375e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2284      	movs	r2, #132	; 0x84
 8003764:	589b      	ldr	r3, [r3, r2]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d100      	bne.n	800376c <HAL_UART_IRQHandler+0x1a4>
 800376a:	e1ff      	b.n	8003b6c <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800376c:	23a4      	movs	r3, #164	; 0xa4
 800376e:	18fb      	adds	r3, r7, r3
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2220      	movs	r2, #32
 8003774:	4013      	ands	r3, r2
 8003776:	d00e      	beq.n	8003796 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003778:	23a0      	movs	r3, #160	; 0xa0
 800377a:	18fb      	adds	r3, r7, r3
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2220      	movs	r2, #32
 8003780:	4013      	ands	r3, r2
 8003782:	d008      	beq.n	8003796 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003788:	2b00      	cmp	r3, #0
 800378a:	d004      	beq.n	8003796 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	0010      	movs	r0, r2
 8003794:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2284      	movs	r2, #132	; 0x84
 800379a:	589b      	ldr	r3, [r3, r2]
 800379c:	2194      	movs	r1, #148	; 0x94
 800379e:	187a      	adds	r2, r7, r1
 80037a0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	2240      	movs	r2, #64	; 0x40
 80037aa:	4013      	ands	r3, r2
 80037ac:	2b40      	cmp	r3, #64	; 0x40
 80037ae:	d004      	beq.n	80037ba <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80037b0:	187b      	adds	r3, r7, r1
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2228      	movs	r2, #40	; 0x28
 80037b6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037b8:	d047      	beq.n	800384a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	0018      	movs	r0, r3
 80037be:	f000 fd05 	bl	80041cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	2240      	movs	r2, #64	; 0x40
 80037ca:	4013      	ands	r3, r2
 80037cc:	2b40      	cmp	r3, #64	; 0x40
 80037ce:	d137      	bne.n	8003840 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037d0:	f3ef 8310 	mrs	r3, PRIMASK
 80037d4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80037d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037d8:	2090      	movs	r0, #144	; 0x90
 80037da:	183a      	adds	r2, r7, r0
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	2301      	movs	r3, #1
 80037e0:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037e4:	f383 8810 	msr	PRIMASK, r3
}
 80037e8:	46c0      	nop			; (mov r8, r8)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2140      	movs	r1, #64	; 0x40
 80037f6:	438a      	bics	r2, r1
 80037f8:	609a      	str	r2, [r3, #8]
 80037fa:	183b      	adds	r3, r7, r0
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003800:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003802:	f383 8810 	msr	PRIMASK, r3
}
 8003806:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800380c:	2b00      	cmp	r3, #0
 800380e:	d012      	beq.n	8003836 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003814:	4a14      	ldr	r2, [pc, #80]	; (8003868 <HAL_UART_IRQHandler+0x2a0>)
 8003816:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800381c:	0018      	movs	r0, r3
 800381e:	f7fd ffe9 	bl	80017f4 <HAL_DMA_Abort_IT>
 8003822:	1e03      	subs	r3, r0, #0
 8003824:	d01a      	beq.n	800385c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800382a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003830:	0018      	movs	r0, r3
 8003832:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003834:	e012      	b.n	800385c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	0018      	movs	r0, r3
 800383a:	f000 f9ad 	bl	8003b98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800383e:	e00d      	b.n	800385c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	0018      	movs	r0, r3
 8003844:	f000 f9a8 	bl	8003b98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003848:	e008      	b.n	800385c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	0018      	movs	r0, r3
 800384e:	f000 f9a3 	bl	8003b98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2284      	movs	r2, #132	; 0x84
 8003856:	2100      	movs	r1, #0
 8003858:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800385a:	e187      	b.n	8003b6c <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800385c:	46c0      	nop			; (mov r8, r8)
    return;
 800385e:	e185      	b.n	8003b6c <HAL_UART_IRQHandler+0x5a4>
 8003860:	0000080f 	.word	0x0000080f
 8003864:	04000120 	.word	0x04000120
 8003868:	08004295 	.word	0x08004295

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003870:	2b01      	cmp	r3, #1
 8003872:	d000      	beq.n	8003876 <HAL_UART_IRQHandler+0x2ae>
 8003874:	e139      	b.n	8003aea <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003876:	23a4      	movs	r3, #164	; 0xa4
 8003878:	18fb      	adds	r3, r7, r3
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2210      	movs	r2, #16
 800387e:	4013      	ands	r3, r2
 8003880:	d100      	bne.n	8003884 <HAL_UART_IRQHandler+0x2bc>
 8003882:	e132      	b.n	8003aea <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003884:	23a0      	movs	r3, #160	; 0xa0
 8003886:	18fb      	adds	r3, r7, r3
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2210      	movs	r2, #16
 800388c:	4013      	ands	r3, r2
 800388e:	d100      	bne.n	8003892 <HAL_UART_IRQHandler+0x2ca>
 8003890:	e12b      	b.n	8003aea <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2210      	movs	r2, #16
 8003898:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	2240      	movs	r2, #64	; 0x40
 80038a2:	4013      	ands	r3, r2
 80038a4:	2b40      	cmp	r3, #64	; 0x40
 80038a6:	d000      	beq.n	80038aa <HAL_UART_IRQHandler+0x2e2>
 80038a8:	e09f      	b.n	80039ea <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	217e      	movs	r1, #126	; 0x7e
 80038b4:	187b      	adds	r3, r7, r1
 80038b6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80038b8:	187b      	adds	r3, r7, r1
 80038ba:	881b      	ldrh	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d100      	bne.n	80038c2 <HAL_UART_IRQHandler+0x2fa>
 80038c0:	e156      	b.n	8003b70 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2258      	movs	r2, #88	; 0x58
 80038c6:	5a9b      	ldrh	r3, [r3, r2]
 80038c8:	187a      	adds	r2, r7, r1
 80038ca:	8812      	ldrh	r2, [r2, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d300      	bcc.n	80038d2 <HAL_UART_IRQHandler+0x30a>
 80038d0:	e14e      	b.n	8003b70 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	187a      	adds	r2, r7, r1
 80038d6:	215a      	movs	r1, #90	; 0x5a
 80038d8:	8812      	ldrh	r2, [r2, #0]
 80038da:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	2b20      	cmp	r3, #32
 80038e4:	d06f      	beq.n	80039c6 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038e6:	f3ef 8310 	mrs	r3, PRIMASK
 80038ea:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80038ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038ee:	67bb      	str	r3, [r7, #120]	; 0x78
 80038f0:	2301      	movs	r3, #1
 80038f2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f6:	f383 8810 	msr	PRIMASK, r3
}
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	499e      	ldr	r1, [pc, #632]	; (8003b80 <HAL_UART_IRQHandler+0x5b8>)
 8003908:	400a      	ands	r2, r1
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800390e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003912:	f383 8810 	msr	PRIMASK, r3
}
 8003916:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003918:	f3ef 8310 	mrs	r3, PRIMASK
 800391c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800391e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003920:	677b      	str	r3, [r7, #116]	; 0x74
 8003922:	2301      	movs	r3, #1
 8003924:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003928:	f383 8810 	msr	PRIMASK, r3
}
 800392c:	46c0      	nop			; (mov r8, r8)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	689a      	ldr	r2, [r3, #8]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2101      	movs	r1, #1
 800393a:	438a      	bics	r2, r1
 800393c:	609a      	str	r2, [r3, #8]
 800393e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003940:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003944:	f383 8810 	msr	PRIMASK, r3
}
 8003948:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800394a:	f3ef 8310 	mrs	r3, PRIMASK
 800394e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003950:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003952:	673b      	str	r3, [r7, #112]	; 0x70
 8003954:	2301      	movs	r3, #1
 8003956:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800395a:	f383 8810 	msr	PRIMASK, r3
}
 800395e:	46c0      	nop			; (mov r8, r8)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689a      	ldr	r2, [r3, #8]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2140      	movs	r1, #64	; 0x40
 800396c:	438a      	bics	r2, r1
 800396e:	609a      	str	r2, [r3, #8]
 8003970:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003972:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003976:	f383 8810 	msr	PRIMASK, r3
}
 800397a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2280      	movs	r2, #128	; 0x80
 8003980:	2120      	movs	r1, #32
 8003982:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800398a:	f3ef 8310 	mrs	r3, PRIMASK
 800398e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003990:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003992:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003994:	2301      	movs	r3, #1
 8003996:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003998:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800399a:	f383 8810 	msr	PRIMASK, r3
}
 800399e:	46c0      	nop			; (mov r8, r8)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2110      	movs	r1, #16
 80039ac:	438a      	bics	r2, r1
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039b6:	f383 8810 	msr	PRIMASK, r3
}
 80039ba:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039c0:	0018      	movs	r0, r3
 80039c2:	f7fd fedf 	bl	8001784 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2202      	movs	r2, #2
 80039ca:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2258      	movs	r2, #88	; 0x58
 80039d0:	5a9a      	ldrh	r2, [r3, r2]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	215a      	movs	r1, #90	; 0x5a
 80039d6:	5a5b      	ldrh	r3, [r3, r1]
 80039d8:	b29b      	uxth	r3, r3
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	b29a      	uxth	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	0011      	movs	r1, r2
 80039e2:	0018      	movs	r0, r3
 80039e4:	f000 f8e0 	bl	8003ba8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80039e8:	e0c2      	b.n	8003b70 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2258      	movs	r2, #88	; 0x58
 80039ee:	5a99      	ldrh	r1, [r3, r2]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	225a      	movs	r2, #90	; 0x5a
 80039f4:	5a9b      	ldrh	r3, [r3, r2]
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	208e      	movs	r0, #142	; 0x8e
 80039fa:	183b      	adds	r3, r7, r0
 80039fc:	1a8a      	subs	r2, r1, r2
 80039fe:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	225a      	movs	r2, #90	; 0x5a
 8003a04:	5a9b      	ldrh	r3, [r3, r2]
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d100      	bne.n	8003a0e <HAL_UART_IRQHandler+0x446>
 8003a0c:	e0b2      	b.n	8003b74 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8003a0e:	183b      	adds	r3, r7, r0
 8003a10:	881b      	ldrh	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d100      	bne.n	8003a18 <HAL_UART_IRQHandler+0x450>
 8003a16:	e0ad      	b.n	8003b74 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a18:	f3ef 8310 	mrs	r3, PRIMASK
 8003a1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a20:	2488      	movs	r4, #136	; 0x88
 8003a22:	193a      	adds	r2, r7, r4
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	2301      	movs	r3, #1
 8003a28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	f383 8810 	msr	PRIMASK, r3
}
 8003a30:	46c0      	nop			; (mov r8, r8)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4951      	ldr	r1, [pc, #324]	; (8003b84 <HAL_UART_IRQHandler+0x5bc>)
 8003a3e:	400a      	ands	r2, r1
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	193b      	adds	r3, r7, r4
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f383 8810 	msr	PRIMASK, r3
}
 8003a4e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a50:	f3ef 8310 	mrs	r3, PRIMASK
 8003a54:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a56:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a58:	2484      	movs	r4, #132	; 0x84
 8003a5a:	193a      	adds	r2, r7, r4
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	2301      	movs	r3, #1
 8003a60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	f383 8810 	msr	PRIMASK, r3
}
 8003a68:	46c0      	nop			; (mov r8, r8)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2101      	movs	r1, #1
 8003a76:	438a      	bics	r2, r1
 8003a78:	609a      	str	r2, [r3, #8]
 8003a7a:	193b      	adds	r3, r7, r4
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a80:	6a3b      	ldr	r3, [r7, #32]
 8003a82:	f383 8810 	msr	PRIMASK, r3
}
 8003a86:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2280      	movs	r2, #128	; 0x80
 8003a8c:	2120      	movs	r1, #32
 8003a8e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a9c:	f3ef 8310 	mrs	r3, PRIMASK
 8003aa0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa4:	2480      	movs	r4, #128	; 0x80
 8003aa6:	193a      	adds	r2, r7, r4
 8003aa8:	6013      	str	r3, [r2, #0]
 8003aaa:	2301      	movs	r3, #1
 8003aac:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab0:	f383 8810 	msr	PRIMASK, r3
}
 8003ab4:	46c0      	nop			; (mov r8, r8)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2110      	movs	r1, #16
 8003ac2:	438a      	bics	r2, r1
 8003ac4:	601a      	str	r2, [r3, #0]
 8003ac6:	193b      	adds	r3, r7, r4
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ace:	f383 8810 	msr	PRIMASK, r3
}
 8003ad2:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ada:	183b      	adds	r3, r7, r0
 8003adc:	881a      	ldrh	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	0011      	movs	r1, r2
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	f000 f860 	bl	8003ba8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ae8:	e044      	b.n	8003b74 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003aea:	23a4      	movs	r3, #164	; 0xa4
 8003aec:	18fb      	adds	r3, r7, r3
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	2380      	movs	r3, #128	; 0x80
 8003af2:	035b      	lsls	r3, r3, #13
 8003af4:	4013      	ands	r3, r2
 8003af6:	d010      	beq.n	8003b1a <HAL_UART_IRQHandler+0x552>
 8003af8:	239c      	movs	r3, #156	; 0x9c
 8003afa:	18fb      	adds	r3, r7, r3
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	2380      	movs	r3, #128	; 0x80
 8003b00:	03db      	lsls	r3, r3, #15
 8003b02:	4013      	ands	r3, r2
 8003b04:	d009      	beq.n	8003b1a <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2280      	movs	r2, #128	; 0x80
 8003b0c:	0352      	lsls	r2, r2, #13
 8003b0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	0018      	movs	r0, r3
 8003b14:	f000 fc00 	bl	8004318 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b18:	e02f      	b.n	8003b7a <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003b1a:	23a4      	movs	r3, #164	; 0xa4
 8003b1c:	18fb      	adds	r3, r7, r3
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2280      	movs	r2, #128	; 0x80
 8003b22:	4013      	ands	r3, r2
 8003b24:	d00f      	beq.n	8003b46 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003b26:	23a0      	movs	r3, #160	; 0xa0
 8003b28:	18fb      	adds	r3, r7, r3
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2280      	movs	r2, #128	; 0x80
 8003b2e:	4013      	ands	r3, r2
 8003b30:	d009      	beq.n	8003b46 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d01e      	beq.n	8003b78 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	0010      	movs	r0, r2
 8003b42:	4798      	blx	r3
    }
    return;
 8003b44:	e018      	b.n	8003b78 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b46:	23a4      	movs	r3, #164	; 0xa4
 8003b48:	18fb      	adds	r3, r7, r3
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2240      	movs	r2, #64	; 0x40
 8003b4e:	4013      	ands	r3, r2
 8003b50:	d013      	beq.n	8003b7a <HAL_UART_IRQHandler+0x5b2>
 8003b52:	23a0      	movs	r3, #160	; 0xa0
 8003b54:	18fb      	adds	r3, r7, r3
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2240      	movs	r2, #64	; 0x40
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	d00d      	beq.n	8003b7a <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	0018      	movs	r0, r3
 8003b62:	f000 fbae 	bl	80042c2 <UART_EndTransmit_IT>
    return;
 8003b66:	e008      	b.n	8003b7a <HAL_UART_IRQHandler+0x5b2>
      return;
 8003b68:	46c0      	nop			; (mov r8, r8)
 8003b6a:	e006      	b.n	8003b7a <HAL_UART_IRQHandler+0x5b2>
    return;
 8003b6c:	46c0      	nop			; (mov r8, r8)
 8003b6e:	e004      	b.n	8003b7a <HAL_UART_IRQHandler+0x5b2>
      return;
 8003b70:	46c0      	nop			; (mov r8, r8)
 8003b72:	e002      	b.n	8003b7a <HAL_UART_IRQHandler+0x5b2>
      return;
 8003b74:	46c0      	nop			; (mov r8, r8)
 8003b76:	e000      	b.n	8003b7a <HAL_UART_IRQHandler+0x5b2>
    return;
 8003b78:	46c0      	nop			; (mov r8, r8)
  }

}
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	b02b      	add	sp, #172	; 0xac
 8003b7e:	bd90      	pop	{r4, r7, pc}
 8003b80:	fffffeff 	.word	0xfffffeff
 8003b84:	fffffedf 	.word	0xfffffedf

08003b88 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003b90:	46c0      	nop			; (mov r8, r8)
 8003b92:	46bd      	mov	sp, r7
 8003b94:	b002      	add	sp, #8
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ba0:	46c0      	nop			; (mov r8, r8)
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	b002      	add	sp, #8
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	000a      	movs	r2, r1
 8003bb2:	1cbb      	adds	r3, r7, #2
 8003bb4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003bb6:	46c0      	nop			; (mov r8, r8)
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	b002      	add	sp, #8
 8003bbc:	bd80      	pop	{r7, pc}
	...

08003bc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b088      	sub	sp, #32
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bc8:	231e      	movs	r3, #30
 8003bca:	18fb      	adds	r3, r7, r3
 8003bcc:	2200      	movs	r2, #0
 8003bce:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a8d      	ldr	r2, [pc, #564]	; (8003e24 <UART_SetConfig+0x264>)
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	0019      	movs	r1, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	4a88      	ldr	r2, [pc, #544]	; (8003e28 <UART_SetConfig+0x268>)
 8003c06:	4013      	ands	r3, r2
 8003c08:	0019      	movs	r1, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	4a7f      	ldr	r2, [pc, #508]	; (8003e2c <UART_SetConfig+0x26c>)
 8003c2e:	4013      	ands	r3, r2
 8003c30:	0019      	movs	r1, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a7b      	ldr	r2, [pc, #492]	; (8003e30 <UART_SetConfig+0x270>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d127      	bne.n	8003c96 <UART_SetConfig+0xd6>
 8003c46:	4b7b      	ldr	r3, [pc, #492]	; (8003e34 <UART_SetConfig+0x274>)
 8003c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4a:	2203      	movs	r2, #3
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	2b03      	cmp	r3, #3
 8003c50:	d00d      	beq.n	8003c6e <UART_SetConfig+0xae>
 8003c52:	d81b      	bhi.n	8003c8c <UART_SetConfig+0xcc>
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d014      	beq.n	8003c82 <UART_SetConfig+0xc2>
 8003c58:	d818      	bhi.n	8003c8c <UART_SetConfig+0xcc>
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d002      	beq.n	8003c64 <UART_SetConfig+0xa4>
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d00a      	beq.n	8003c78 <UART_SetConfig+0xb8>
 8003c62:	e013      	b.n	8003c8c <UART_SetConfig+0xcc>
 8003c64:	231f      	movs	r3, #31
 8003c66:	18fb      	adds	r3, r7, r3
 8003c68:	2200      	movs	r2, #0
 8003c6a:	701a      	strb	r2, [r3, #0]
 8003c6c:	e021      	b.n	8003cb2 <UART_SetConfig+0xf2>
 8003c6e:	231f      	movs	r3, #31
 8003c70:	18fb      	adds	r3, r7, r3
 8003c72:	2202      	movs	r2, #2
 8003c74:	701a      	strb	r2, [r3, #0]
 8003c76:	e01c      	b.n	8003cb2 <UART_SetConfig+0xf2>
 8003c78:	231f      	movs	r3, #31
 8003c7a:	18fb      	adds	r3, r7, r3
 8003c7c:	2204      	movs	r2, #4
 8003c7e:	701a      	strb	r2, [r3, #0]
 8003c80:	e017      	b.n	8003cb2 <UART_SetConfig+0xf2>
 8003c82:	231f      	movs	r3, #31
 8003c84:	18fb      	adds	r3, r7, r3
 8003c86:	2208      	movs	r2, #8
 8003c88:	701a      	strb	r2, [r3, #0]
 8003c8a:	e012      	b.n	8003cb2 <UART_SetConfig+0xf2>
 8003c8c:	231f      	movs	r3, #31
 8003c8e:	18fb      	adds	r3, r7, r3
 8003c90:	2210      	movs	r2, #16
 8003c92:	701a      	strb	r2, [r3, #0]
 8003c94:	e00d      	b.n	8003cb2 <UART_SetConfig+0xf2>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a67      	ldr	r2, [pc, #412]	; (8003e38 <UART_SetConfig+0x278>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d104      	bne.n	8003caa <UART_SetConfig+0xea>
 8003ca0:	231f      	movs	r3, #31
 8003ca2:	18fb      	adds	r3, r7, r3
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	701a      	strb	r2, [r3, #0]
 8003ca8:	e003      	b.n	8003cb2 <UART_SetConfig+0xf2>
 8003caa:	231f      	movs	r3, #31
 8003cac:	18fb      	adds	r3, r7, r3
 8003cae:	2210      	movs	r2, #16
 8003cb0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	69da      	ldr	r2, [r3, #28]
 8003cb6:	2380      	movs	r3, #128	; 0x80
 8003cb8:	021b      	lsls	r3, r3, #8
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d15c      	bne.n	8003d78 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8003cbe:	231f      	movs	r3, #31
 8003cc0:	18fb      	adds	r3, r7, r3
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d015      	beq.n	8003cf4 <UART_SetConfig+0x134>
 8003cc8:	dc18      	bgt.n	8003cfc <UART_SetConfig+0x13c>
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d00d      	beq.n	8003cea <UART_SetConfig+0x12a>
 8003cce:	dc15      	bgt.n	8003cfc <UART_SetConfig+0x13c>
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d002      	beq.n	8003cda <UART_SetConfig+0x11a>
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d005      	beq.n	8003ce4 <UART_SetConfig+0x124>
 8003cd8:	e010      	b.n	8003cfc <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cda:	f7fe fc15 	bl	8002508 <HAL_RCC_GetPCLK1Freq>
 8003cde:	0003      	movs	r3, r0
 8003ce0:	61bb      	str	r3, [r7, #24]
        break;
 8003ce2:	e012      	b.n	8003d0a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ce4:	4b55      	ldr	r3, [pc, #340]	; (8003e3c <UART_SetConfig+0x27c>)
 8003ce6:	61bb      	str	r3, [r7, #24]
        break;
 8003ce8:	e00f      	b.n	8003d0a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cea:	f7fe fb91 	bl	8002410 <HAL_RCC_GetSysClockFreq>
 8003cee:	0003      	movs	r3, r0
 8003cf0:	61bb      	str	r3, [r7, #24]
        break;
 8003cf2:	e00a      	b.n	8003d0a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cf4:	2380      	movs	r3, #128	; 0x80
 8003cf6:	021b      	lsls	r3, r3, #8
 8003cf8:	61bb      	str	r3, [r7, #24]
        break;
 8003cfa:	e006      	b.n	8003d0a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d00:	231e      	movs	r3, #30
 8003d02:	18fb      	adds	r3, r7, r3
 8003d04:	2201      	movs	r2, #1
 8003d06:	701a      	strb	r2, [r3, #0]
        break;
 8003d08:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d100      	bne.n	8003d12 <UART_SetConfig+0x152>
 8003d10:	e07a      	b.n	8003e08 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	005a      	lsls	r2, r3, #1
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	085b      	lsrs	r3, r3, #1
 8003d1c:	18d2      	adds	r2, r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	0019      	movs	r1, r3
 8003d24:	0010      	movs	r0, r2
 8003d26:	f7fc f9ef 	bl	8000108 <__udivsi3>
 8003d2a:	0003      	movs	r3, r0
 8003d2c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	2b0f      	cmp	r3, #15
 8003d32:	d91c      	bls.n	8003d6e <UART_SetConfig+0x1ae>
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	2380      	movs	r3, #128	; 0x80
 8003d38:	025b      	lsls	r3, r3, #9
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d217      	bcs.n	8003d6e <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	200e      	movs	r0, #14
 8003d44:	183b      	adds	r3, r7, r0
 8003d46:	210f      	movs	r1, #15
 8003d48:	438a      	bics	r2, r1
 8003d4a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	085b      	lsrs	r3, r3, #1
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	2207      	movs	r2, #7
 8003d54:	4013      	ands	r3, r2
 8003d56:	b299      	uxth	r1, r3
 8003d58:	183b      	adds	r3, r7, r0
 8003d5a:	183a      	adds	r2, r7, r0
 8003d5c:	8812      	ldrh	r2, [r2, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	183a      	adds	r2, r7, r0
 8003d68:	8812      	ldrh	r2, [r2, #0]
 8003d6a:	60da      	str	r2, [r3, #12]
 8003d6c:	e04c      	b.n	8003e08 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003d6e:	231e      	movs	r3, #30
 8003d70:	18fb      	adds	r3, r7, r3
 8003d72:	2201      	movs	r2, #1
 8003d74:	701a      	strb	r2, [r3, #0]
 8003d76:	e047      	b.n	8003e08 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d78:	231f      	movs	r3, #31
 8003d7a:	18fb      	adds	r3, r7, r3
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	d015      	beq.n	8003dae <UART_SetConfig+0x1ee>
 8003d82:	dc18      	bgt.n	8003db6 <UART_SetConfig+0x1f6>
 8003d84:	2b04      	cmp	r3, #4
 8003d86:	d00d      	beq.n	8003da4 <UART_SetConfig+0x1e4>
 8003d88:	dc15      	bgt.n	8003db6 <UART_SetConfig+0x1f6>
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d002      	beq.n	8003d94 <UART_SetConfig+0x1d4>
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d005      	beq.n	8003d9e <UART_SetConfig+0x1de>
 8003d92:	e010      	b.n	8003db6 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d94:	f7fe fbb8 	bl	8002508 <HAL_RCC_GetPCLK1Freq>
 8003d98:	0003      	movs	r3, r0
 8003d9a:	61bb      	str	r3, [r7, #24]
        break;
 8003d9c:	e012      	b.n	8003dc4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d9e:	4b27      	ldr	r3, [pc, #156]	; (8003e3c <UART_SetConfig+0x27c>)
 8003da0:	61bb      	str	r3, [r7, #24]
        break;
 8003da2:	e00f      	b.n	8003dc4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003da4:	f7fe fb34 	bl	8002410 <HAL_RCC_GetSysClockFreq>
 8003da8:	0003      	movs	r3, r0
 8003daa:	61bb      	str	r3, [r7, #24]
        break;
 8003dac:	e00a      	b.n	8003dc4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dae:	2380      	movs	r3, #128	; 0x80
 8003db0:	021b      	lsls	r3, r3, #8
 8003db2:	61bb      	str	r3, [r7, #24]
        break;
 8003db4:	e006      	b.n	8003dc4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003db6:	2300      	movs	r3, #0
 8003db8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003dba:	231e      	movs	r3, #30
 8003dbc:	18fb      	adds	r3, r7, r3
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	701a      	strb	r2, [r3, #0]
        break;
 8003dc2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d01e      	beq.n	8003e08 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	085a      	lsrs	r2, r3, #1
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	18d2      	adds	r2, r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	0019      	movs	r1, r3
 8003dda:	0010      	movs	r0, r2
 8003ddc:	f7fc f994 	bl	8000108 <__udivsi3>
 8003de0:	0003      	movs	r3, r0
 8003de2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	2b0f      	cmp	r3, #15
 8003de8:	d90a      	bls.n	8003e00 <UART_SetConfig+0x240>
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	2380      	movs	r3, #128	; 0x80
 8003dee:	025b      	lsls	r3, r3, #9
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d205      	bcs.n	8003e00 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	60da      	str	r2, [r3, #12]
 8003dfe:	e003      	b.n	8003e08 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003e00:	231e      	movs	r3, #30
 8003e02:	18fb      	adds	r3, r7, r3
 8003e04:	2201      	movs	r2, #1
 8003e06:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003e14:	231e      	movs	r3, #30
 8003e16:	18fb      	adds	r3, r7, r3
 8003e18:	781b      	ldrb	r3, [r3, #0]
}
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	b008      	add	sp, #32
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	46c0      	nop			; (mov r8, r8)
 8003e24:	efff69f3 	.word	0xefff69f3
 8003e28:	ffffcfff 	.word	0xffffcfff
 8003e2c:	fffff4ff 	.word	0xfffff4ff
 8003e30:	40013800 	.word	0x40013800
 8003e34:	40021000 	.word	0x40021000
 8003e38:	40004400 	.word	0x40004400
 8003e3c:	007a1200 	.word	0x007a1200

08003e40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	4013      	ands	r3, r2
 8003e50:	d00b      	beq.n	8003e6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	4a4a      	ldr	r2, [pc, #296]	; (8003f84 <UART_AdvFeatureConfig+0x144>)
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	0019      	movs	r1, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	2202      	movs	r2, #2
 8003e70:	4013      	ands	r3, r2
 8003e72:	d00b      	beq.n	8003e8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	4a43      	ldr	r2, [pc, #268]	; (8003f88 <UART_AdvFeatureConfig+0x148>)
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	0019      	movs	r1, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	2204      	movs	r2, #4
 8003e92:	4013      	ands	r3, r2
 8003e94:	d00b      	beq.n	8003eae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	4a3b      	ldr	r2, [pc, #236]	; (8003f8c <UART_AdvFeatureConfig+0x14c>)
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	0019      	movs	r1, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	2208      	movs	r2, #8
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	d00b      	beq.n	8003ed0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	4a34      	ldr	r2, [pc, #208]	; (8003f90 <UART_AdvFeatureConfig+0x150>)
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	0019      	movs	r1, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed4:	2210      	movs	r2, #16
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	d00b      	beq.n	8003ef2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	4a2c      	ldr	r2, [pc, #176]	; (8003f94 <UART_AdvFeatureConfig+0x154>)
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	0019      	movs	r1, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	4013      	ands	r3, r2
 8003efa:	d00b      	beq.n	8003f14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	4a25      	ldr	r2, [pc, #148]	; (8003f98 <UART_AdvFeatureConfig+0x158>)
 8003f04:	4013      	ands	r3, r2
 8003f06:	0019      	movs	r1, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	2240      	movs	r2, #64	; 0x40
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	d01d      	beq.n	8003f5a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	4a1d      	ldr	r2, [pc, #116]	; (8003f9c <UART_AdvFeatureConfig+0x15c>)
 8003f26:	4013      	ands	r3, r2
 8003f28:	0019      	movs	r1, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f3a:	2380      	movs	r3, #128	; 0x80
 8003f3c:	035b      	lsls	r3, r3, #13
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d10b      	bne.n	8003f5a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	4a15      	ldr	r2, [pc, #84]	; (8003fa0 <UART_AdvFeatureConfig+0x160>)
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	0019      	movs	r1, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	2280      	movs	r2, #128	; 0x80
 8003f60:	4013      	ands	r3, r2
 8003f62:	d00b      	beq.n	8003f7c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	4a0e      	ldr	r2, [pc, #56]	; (8003fa4 <UART_AdvFeatureConfig+0x164>)
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	0019      	movs	r1, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	605a      	str	r2, [r3, #4]
  }
}
 8003f7c:	46c0      	nop			; (mov r8, r8)
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	b002      	add	sp, #8
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	fffdffff 	.word	0xfffdffff
 8003f88:	fffeffff 	.word	0xfffeffff
 8003f8c:	fffbffff 	.word	0xfffbffff
 8003f90:	ffff7fff 	.word	0xffff7fff
 8003f94:	ffffefff 	.word	0xffffefff
 8003f98:	ffffdfff 	.word	0xffffdfff
 8003f9c:	ffefffff 	.word	0xffefffff
 8003fa0:	ff9fffff 	.word	0xff9fffff
 8003fa4:	fff7ffff 	.word	0xfff7ffff

08003fa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b092      	sub	sp, #72	; 0x48
 8003fac:	af02      	add	r7, sp, #8
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2284      	movs	r2, #132	; 0x84
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fb8:	f7fd f878 	bl	80010ac <HAL_GetTick>
 8003fbc:	0003      	movs	r3, r0
 8003fbe:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2208      	movs	r2, #8
 8003fc8:	4013      	ands	r3, r2
 8003fca:	2b08      	cmp	r3, #8
 8003fcc:	d12c      	bne.n	8004028 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fd0:	2280      	movs	r2, #128	; 0x80
 8003fd2:	0391      	lsls	r1, r2, #14
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	4a46      	ldr	r2, [pc, #280]	; (80040f0 <UART_CheckIdleState+0x148>)
 8003fd8:	9200      	str	r2, [sp, #0]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f000 f88c 	bl	80040f8 <UART_WaitOnFlagUntilTimeout>
 8003fe0:	1e03      	subs	r3, r0, #0
 8003fe2:	d021      	beq.n	8004028 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fe4:	f3ef 8310 	mrs	r3, PRIMASK
 8003fe8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003fec:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fee:	2301      	movs	r3, #1
 8003ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff4:	f383 8810 	msr	PRIMASK, r3
}
 8003ff8:	46c0      	nop			; (mov r8, r8)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2180      	movs	r1, #128	; 0x80
 8004006:	438a      	bics	r2, r1
 8004008:	601a      	str	r2, [r3, #0]
 800400a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800400e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004010:	f383 8810 	msr	PRIMASK, r3
}
 8004014:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2220      	movs	r2, #32
 800401a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2278      	movs	r2, #120	; 0x78
 8004020:	2100      	movs	r1, #0
 8004022:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e05f      	b.n	80040e8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2204      	movs	r2, #4
 8004030:	4013      	ands	r3, r2
 8004032:	2b04      	cmp	r3, #4
 8004034:	d146      	bne.n	80040c4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004038:	2280      	movs	r2, #128	; 0x80
 800403a:	03d1      	lsls	r1, r2, #15
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	4a2c      	ldr	r2, [pc, #176]	; (80040f0 <UART_CheckIdleState+0x148>)
 8004040:	9200      	str	r2, [sp, #0]
 8004042:	2200      	movs	r2, #0
 8004044:	f000 f858 	bl	80040f8 <UART_WaitOnFlagUntilTimeout>
 8004048:	1e03      	subs	r3, r0, #0
 800404a:	d03b      	beq.n	80040c4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800404c:	f3ef 8310 	mrs	r3, PRIMASK
 8004050:	60fb      	str	r3, [r7, #12]
  return(result);
 8004052:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004054:	637b      	str	r3, [r7, #52]	; 0x34
 8004056:	2301      	movs	r3, #1
 8004058:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f383 8810 	msr	PRIMASK, r3
}
 8004060:	46c0      	nop			; (mov r8, r8)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4921      	ldr	r1, [pc, #132]	; (80040f4 <UART_CheckIdleState+0x14c>)
 800406e:	400a      	ands	r2, r1
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004074:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f383 8810 	msr	PRIMASK, r3
}
 800407c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800407e:	f3ef 8310 	mrs	r3, PRIMASK
 8004082:	61bb      	str	r3, [r7, #24]
  return(result);
 8004084:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004086:	633b      	str	r3, [r7, #48]	; 0x30
 8004088:	2301      	movs	r3, #1
 800408a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	f383 8810 	msr	PRIMASK, r3
}
 8004092:	46c0      	nop			; (mov r8, r8)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689a      	ldr	r2, [r3, #8]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2101      	movs	r1, #1
 80040a0:	438a      	bics	r2, r1
 80040a2:	609a      	str	r2, [r3, #8]
 80040a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	f383 8810 	msr	PRIMASK, r3
}
 80040ae:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2280      	movs	r2, #128	; 0x80
 80040b4:	2120      	movs	r1, #32
 80040b6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2278      	movs	r2, #120	; 0x78
 80040bc:	2100      	movs	r1, #0
 80040be:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e011      	b.n	80040e8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2220      	movs	r2, #32
 80040c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2280      	movs	r2, #128	; 0x80
 80040ce:	2120      	movs	r1, #32
 80040d0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2278      	movs	r2, #120	; 0x78
 80040e2:	2100      	movs	r1, #0
 80040e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	0018      	movs	r0, r3
 80040ea:	46bd      	mov	sp, r7
 80040ec:	b010      	add	sp, #64	; 0x40
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	01ffffff 	.word	0x01ffffff
 80040f4:	fffffedf 	.word	0xfffffedf

080040f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	603b      	str	r3, [r7, #0]
 8004104:	1dfb      	adds	r3, r7, #7
 8004106:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004108:	e04b      	b.n	80041a2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	3301      	adds	r3, #1
 800410e:	d048      	beq.n	80041a2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004110:	f7fc ffcc 	bl	80010ac <HAL_GetTick>
 8004114:	0002      	movs	r2, r0
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	429a      	cmp	r2, r3
 800411e:	d302      	bcc.n	8004126 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e04b      	b.n	80041c2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2204      	movs	r2, #4
 8004132:	4013      	ands	r3, r2
 8004134:	d035      	beq.n	80041a2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	2208      	movs	r2, #8
 800413e:	4013      	ands	r3, r2
 8004140:	2b08      	cmp	r3, #8
 8004142:	d111      	bne.n	8004168 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2208      	movs	r2, #8
 800414a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	0018      	movs	r0, r3
 8004150:	f000 f83c 	bl	80041cc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2284      	movs	r2, #132	; 0x84
 8004158:	2108      	movs	r1, #8
 800415a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2278      	movs	r2, #120	; 0x78
 8004160:	2100      	movs	r1, #0
 8004162:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e02c      	b.n	80041c2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	69da      	ldr	r2, [r3, #28]
 800416e:	2380      	movs	r3, #128	; 0x80
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	401a      	ands	r2, r3
 8004174:	2380      	movs	r3, #128	; 0x80
 8004176:	011b      	lsls	r3, r3, #4
 8004178:	429a      	cmp	r2, r3
 800417a:	d112      	bne.n	80041a2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2280      	movs	r2, #128	; 0x80
 8004182:	0112      	lsls	r2, r2, #4
 8004184:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	0018      	movs	r0, r3
 800418a:	f000 f81f 	bl	80041cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2284      	movs	r2, #132	; 0x84
 8004192:	2120      	movs	r1, #32
 8004194:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2278      	movs	r2, #120	; 0x78
 800419a:	2100      	movs	r1, #0
 800419c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e00f      	b.n	80041c2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69db      	ldr	r3, [r3, #28]
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	4013      	ands	r3, r2
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	425a      	negs	r2, r3
 80041b2:	4153      	adcs	r3, r2
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	001a      	movs	r2, r3
 80041b8:	1dfb      	adds	r3, r7, #7
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d0a4      	beq.n	800410a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	0018      	movs	r0, r3
 80041c4:	46bd      	mov	sp, r7
 80041c6:	b004      	add	sp, #16
 80041c8:	bd80      	pop	{r7, pc}
	...

080041cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b08e      	sub	sp, #56	; 0x38
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041d4:	f3ef 8310 	mrs	r3, PRIMASK
 80041d8:	617b      	str	r3, [r7, #20]
  return(result);
 80041da:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041dc:	637b      	str	r3, [r7, #52]	; 0x34
 80041de:	2301      	movs	r3, #1
 80041e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	f383 8810 	msr	PRIMASK, r3
}
 80041e8:	46c0      	nop			; (mov r8, r8)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4926      	ldr	r1, [pc, #152]	; (8004290 <UART_EndRxTransfer+0xc4>)
 80041f6:	400a      	ands	r2, r1
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	f383 8810 	msr	PRIMASK, r3
}
 8004204:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004206:	f3ef 8310 	mrs	r3, PRIMASK
 800420a:	623b      	str	r3, [r7, #32]
  return(result);
 800420c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800420e:	633b      	str	r3, [r7, #48]	; 0x30
 8004210:	2301      	movs	r3, #1
 8004212:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004216:	f383 8810 	msr	PRIMASK, r3
}
 800421a:	46c0      	nop			; (mov r8, r8)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689a      	ldr	r2, [r3, #8]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2101      	movs	r1, #1
 8004228:	438a      	bics	r2, r1
 800422a:	609a      	str	r2, [r3, #8]
 800422c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004232:	f383 8810 	msr	PRIMASK, r3
}
 8004236:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800423c:	2b01      	cmp	r3, #1
 800423e:	d118      	bne.n	8004272 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004240:	f3ef 8310 	mrs	r3, PRIMASK
 8004244:	60bb      	str	r3, [r7, #8]
  return(result);
 8004246:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004248:	62fb      	str	r3, [r7, #44]	; 0x2c
 800424a:	2301      	movs	r3, #1
 800424c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f383 8810 	msr	PRIMASK, r3
}
 8004254:	46c0      	nop			; (mov r8, r8)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2110      	movs	r1, #16
 8004262:	438a      	bics	r2, r1
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004268:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	f383 8810 	msr	PRIMASK, r3
}
 8004270:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2280      	movs	r2, #128	; 0x80
 8004276:	2120      	movs	r1, #32
 8004278:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004286:	46c0      	nop			; (mov r8, r8)
 8004288:	46bd      	mov	sp, r7
 800428a:	b00e      	add	sp, #56	; 0x38
 800428c:	bd80      	pop	{r7, pc}
 800428e:	46c0      	nop			; (mov r8, r8)
 8004290:	fffffedf 	.word	0xfffffedf

08004294 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	225a      	movs	r2, #90	; 0x5a
 80042a6:	2100      	movs	r1, #0
 80042a8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2252      	movs	r2, #82	; 0x52
 80042ae:	2100      	movs	r1, #0
 80042b0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	0018      	movs	r0, r3
 80042b6:	f7ff fc6f 	bl	8003b98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042ba:	46c0      	nop			; (mov r8, r8)
 80042bc:	46bd      	mov	sp, r7
 80042be:	b004      	add	sp, #16
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b086      	sub	sp, #24
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042ca:	f3ef 8310 	mrs	r3, PRIMASK
 80042ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80042d0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042d2:	617b      	str	r3, [r7, #20]
 80042d4:	2301      	movs	r3, #1
 80042d6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f383 8810 	msr	PRIMASK, r3
}
 80042de:	46c0      	nop			; (mov r8, r8)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2140      	movs	r1, #64	; 0x40
 80042ec:	438a      	bics	r2, r1
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	f383 8810 	msr	PRIMASK, r3
}
 80042fa:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2220      	movs	r2, #32
 8004300:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	0018      	movs	r0, r3
 800430c:	f7ff fc3c 	bl	8003b88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004310:	46c0      	nop			; (mov r8, r8)
 8004312:	46bd      	mov	sp, r7
 8004314:	b006      	add	sp, #24
 8004316:	bd80      	pop	{r7, pc}

08004318 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004320:	46c0      	nop			; (mov r8, r8)
 8004322:	46bd      	mov	sp, r7
 8004324:	b002      	add	sp, #8
 8004326:	bd80      	pop	{r7, pc}

08004328 <memset>:
 8004328:	0003      	movs	r3, r0
 800432a:	1882      	adds	r2, r0, r2
 800432c:	4293      	cmp	r3, r2
 800432e:	d100      	bne.n	8004332 <memset+0xa>
 8004330:	4770      	bx	lr
 8004332:	7019      	strb	r1, [r3, #0]
 8004334:	3301      	adds	r3, #1
 8004336:	e7f9      	b.n	800432c <memset+0x4>

08004338 <__libc_init_array>:
 8004338:	b570      	push	{r4, r5, r6, lr}
 800433a:	2600      	movs	r6, #0
 800433c:	4c0c      	ldr	r4, [pc, #48]	; (8004370 <__libc_init_array+0x38>)
 800433e:	4d0d      	ldr	r5, [pc, #52]	; (8004374 <__libc_init_array+0x3c>)
 8004340:	1b64      	subs	r4, r4, r5
 8004342:	10a4      	asrs	r4, r4, #2
 8004344:	42a6      	cmp	r6, r4
 8004346:	d109      	bne.n	800435c <__libc_init_array+0x24>
 8004348:	2600      	movs	r6, #0
 800434a:	f000 f819 	bl	8004380 <_init>
 800434e:	4c0a      	ldr	r4, [pc, #40]	; (8004378 <__libc_init_array+0x40>)
 8004350:	4d0a      	ldr	r5, [pc, #40]	; (800437c <__libc_init_array+0x44>)
 8004352:	1b64      	subs	r4, r4, r5
 8004354:	10a4      	asrs	r4, r4, #2
 8004356:	42a6      	cmp	r6, r4
 8004358:	d105      	bne.n	8004366 <__libc_init_array+0x2e>
 800435a:	bd70      	pop	{r4, r5, r6, pc}
 800435c:	00b3      	lsls	r3, r6, #2
 800435e:	58eb      	ldr	r3, [r5, r3]
 8004360:	4798      	blx	r3
 8004362:	3601      	adds	r6, #1
 8004364:	e7ee      	b.n	8004344 <__libc_init_array+0xc>
 8004366:	00b3      	lsls	r3, r6, #2
 8004368:	58eb      	ldr	r3, [r5, r3]
 800436a:	4798      	blx	r3
 800436c:	3601      	adds	r6, #1
 800436e:	e7f2      	b.n	8004356 <__libc_init_array+0x1e>
 8004370:	080043d0 	.word	0x080043d0
 8004374:	080043d0 	.word	0x080043d0
 8004378:	080043d4 	.word	0x080043d4
 800437c:	080043d0 	.word	0x080043d0

08004380 <_init>:
 8004380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004386:	bc08      	pop	{r3}
 8004388:	469e      	mov	lr, r3
 800438a:	4770      	bx	lr

0800438c <_fini>:
 800438c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800438e:	46c0      	nop			; (mov r8, r8)
 8004390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004392:	bc08      	pop	{r3}
 8004394:	469e      	mov	lr, r3
 8004396:	4770      	bx	lr
