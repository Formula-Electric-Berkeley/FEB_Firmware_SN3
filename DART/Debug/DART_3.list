
DART_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c64  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08005d24  08005d24  00015d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dbc  08005dbc  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08005dbc  08005dbc  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005dbc  08005dbc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dbc  08005dbc  00015dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005dc0  08005dc0  00015dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005dc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  2000005c  08005e20  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d0  08005e20  000203d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011f5b  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ac9  00000000  00000000  00032022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe0  00000000  00000000  00034af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c62  00000000  00000000  00035ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000030f1  00000000  00000000  00036732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013d38  00000000  00000000  00039823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097773  00000000  00000000  0004d55b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d54  00000000  00000000  000e4cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000e8a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005d0c 	.word	0x08005d0c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08005d0c 	.word	0x08005d0c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <FEB_CAN_Init>:

uint32_t FEB_CAN_Tx_Mailbox;

// **************************************** Functions ****************************************

void FEB_CAN_Init(void) {
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	FEB_CAN_Filter_Config();
 8000238:	f000 f80e 	bl	8000258 <FEB_CAN_Filter_Config>
	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 800023c:	4b05      	ldr	r3, [pc, #20]	; (8000254 <FEB_CAN_Init+0x20>)
 800023e:	0018      	movs	r0, r3
 8000240:	f001 fcea 	bl	8001c18 <HAL_CAN_Start>
        // Code Error - Shutdown
	}
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000244:	4b03      	ldr	r3, [pc, #12]	; (8000254 <FEB_CAN_Init+0x20>)
 8000246:	2102      	movs	r1, #2
 8000248:	0018      	movs	r0, r3
 800024a:	f001 fd2b 	bl	8001ca4 <HAL_CAN_ActivateNotification>
}
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	200000f8 	.word	0x200000f8

08000258 <FEB_CAN_Filter_Config>:

void FEB_CAN_Filter_Config(void) {
 8000258:	b590      	push	{r4, r7, lr}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
	uint8_t filter_bank = 0;
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	2200      	movs	r2, #0
 8000262:	701a      	strb	r2, [r3, #0]
	filter_bank = FEB_CAN_BBB_Filter(&hcan, CAN_RX_FIFO0, filter_bank);
 8000264:	1dfc      	adds	r4, r7, #7
 8000266:	1dfb      	adds	r3, r7, #7
 8000268:	781a      	ldrb	r2, [r3, #0]
 800026a:	4b05      	ldr	r3, [pc, #20]	; (8000280 <FEB_CAN_Filter_Config+0x28>)
 800026c:	2100      	movs	r1, #0
 800026e:	0018      	movs	r0, r3
 8000270:	f000 f808 	bl	8000284 <FEB_CAN_BBB_Filter>
 8000274:	0003      	movs	r3, r0
 8000276:	7023      	strb	r3, [r4, #0]
	// Assign Filter
    // filter_bank = Function(&hcan1, CAN_RX_FIFO0, filter_bank);
}
 8000278:	46c0      	nop			; (mov r8, r8)
 800027a:	46bd      	mov	sp, r7
 800027c:	b003      	add	sp, #12
 800027e:	bd90      	pop	{r4, r7, pc}
 8000280:	200000f8 	.word	0x200000f8

08000284 <FEB_CAN_BBB_Filter>:
#define FEB_CAN_ID_BBB_SPEED 0x0
#define FEB_CAN_ID_FAN1_FREQ 0x0



uint8_t FEB_CAN_BBB_Filter(CAN_HandleTypeDef* hcan, uint8_t FIFO_assignment, uint8_t filter_bank) {
 8000284:	b590      	push	{r4, r7, lr}
 8000286:	b08f      	sub	sp, #60	; 0x3c
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
 800028c:	0008      	movs	r0, r1
 800028e:	0011      	movs	r1, r2
 8000290:	1cfb      	adds	r3, r7, #3
 8000292:	1c02      	adds	r2, r0, #0
 8000294:	701a      	strb	r2, [r3, #0]
 8000296:	1cbb      	adds	r3, r7, #2
 8000298:	1c0a      	adds	r2, r1, #0
 800029a:	701a      	strb	r2, [r3, #0]
    // For multiple filters, create array of filter IDs and loop over IDs.

	uint16_t filter_arr[] = {FEB_CAN_ID_BBB_SPEED};
 800029c:	2334      	movs	r3, #52	; 0x34
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	2200      	movs	r2, #0
 80002a2:	801a      	strh	r2, [r3, #0]

	for (uint8_t i = 0; i < 1; i++) {
 80002a4:	2337      	movs	r3, #55	; 0x37
 80002a6:	18fb      	adds	r3, r7, r3
 80002a8:	2200      	movs	r2, #0
 80002aa:	701a      	strb	r2, [r3, #0]
 80002ac:	e038      	b.n	8000320 <FEB_CAN_BBB_Filter+0x9c>

		CAN_FilterTypeDef filter_config;

		// Standard CAN - 2.0A - 11 bit
		filter_config.FilterActivation = CAN_FILTER_ENABLE;
 80002ae:	210c      	movs	r1, #12
 80002b0:	187b      	adds	r3, r7, r1
 80002b2:	2201      	movs	r2, #1
 80002b4:	621a      	str	r2, [r3, #32]
		filter_config.FilterBank = filter_bank;
 80002b6:	1cbb      	adds	r3, r7, #2
 80002b8:	781a      	ldrb	r2, [r3, #0]
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	615a      	str	r2, [r3, #20]
		filter_config.FilterFIFOAssignment = FIFO_assignment;
 80002be:	1cfb      	adds	r3, r7, #3
 80002c0:	781a      	ldrb	r2, [r3, #0]
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	611a      	str	r2, [r3, #16]
		filter_config.FilterIdHigh = filter_arr[i] << 5;
 80002c6:	2437      	movs	r4, #55	; 0x37
 80002c8:	193b      	adds	r3, r7, r4
 80002ca:	781a      	ldrb	r2, [r3, #0]
 80002cc:	2334      	movs	r3, #52	; 0x34
 80002ce:	18fb      	adds	r3, r7, r3
 80002d0:	0052      	lsls	r2, r2, #1
 80002d2:	5ad3      	ldrh	r3, [r2, r3]
 80002d4:	015b      	lsls	r3, r3, #5
 80002d6:	001a      	movs	r2, r3
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	601a      	str	r2, [r3, #0]
		filter_config.FilterIdLow = 0;
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2200      	movs	r2, #0
 80002e0:	605a      	str	r2, [r3, #4]
		filter_config.FilterMaskIdHigh = 0xFFE0;
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	4a14      	ldr	r2, [pc, #80]	; (8000338 <FEB_CAN_BBB_Filter+0xb4>)
 80002e6:	609a      	str	r2, [r3, #8]
		filter_config.FilterMaskIdLow = 0;
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	2200      	movs	r2, #0
 80002ec:	60da      	str	r2, [r3, #12]
		filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2200      	movs	r2, #0
 80002f2:	619a      	str	r2, [r3, #24]
		filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2201      	movs	r2, #1
 80002f8:	61da      	str	r2, [r3, #28]
		filter_config.SlaveStartFilterBank = 27;
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	221b      	movs	r2, #27
 80002fe:	625a      	str	r2, [r3, #36]	; 0x24
		filter_bank++;
 8000300:	1cbb      	adds	r3, r7, #2
 8000302:	781a      	ldrb	r2, [r3, #0]
 8000304:	1cbb      	adds	r3, r7, #2
 8000306:	3201      	adds	r2, #1
 8000308:	701a      	strb	r2, [r3, #0]


			if (HAL_CAN_ConfigFilter(hcan, &filter_config) != HAL_OK) {
 800030a:	187a      	adds	r2, r7, r1
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	0011      	movs	r1, r2
 8000310:	0018      	movs	r0, r3
 8000312:	f001 fb8f 	bl	8001a34 <HAL_CAN_ConfigFilter>
	for (uint8_t i = 0; i < 1; i++) {
 8000316:	193b      	adds	r3, r7, r4
 8000318:	781a      	ldrb	r2, [r3, #0]
 800031a:	193b      	adds	r3, r7, r4
 800031c:	3201      	adds	r2, #1
 800031e:	701a      	strb	r2, [r3, #0]
 8000320:	2337      	movs	r3, #55	; 0x37
 8000322:	18fb      	adds	r3, r7, r3
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	2b00      	cmp	r3, #0
 8000328:	d0c1      	beq.n	80002ae <FEB_CAN_BBB_Filter+0x2a>
				// Code Error - Shutdown
			}
	}

	return filter_bank;
 800032a:	1cbb      	adds	r3, r7, #2
 800032c:	781b      	ldrb	r3, [r3, #0]
}
 800032e:	0018      	movs	r0, r3
 8000330:	46bd      	mov	sp, r7
 8000332:	b00f      	add	sp, #60	; 0x3c
 8000334:	bd90      	pop	{r4, r7, pc}
 8000336:	46c0      	nop			; (mov r8, r8)
 8000338:	0000ffe0 	.word	0x0000ffe0

0800033c <FEB_Fan_Init>:


uint8_t counter = 0;
// ********************************** Initialize **********************************

void FEB_Fan_Init(){
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0

	FEB_Fan_PWM_Init();
 8000340:	f000 f806 	bl	8000350 <FEB_Fan_PWM_Init>
	FEB_Fan_All_Speed_Set(255 * 0.2);
 8000344:	2033      	movs	r0, #51	; 0x33
 8000346:	f000 f825 	bl	8000394 <FEB_Fan_All_Speed_Set>
	//FEB_PID_Init_All();

}
 800034a:	46c0      	nop			; (mov r8, r8)
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}

08000350 <FEB_Fan_PWM_Init>:
	float new_PWM = FEB_PID_Update(&FEB_Fan_5_PID, setpoint, tachometer_reading);
	FEB_Fan_5_Speed_Set(new_PWM);
}

// ********************************** PWM **********************************
void FEB_Fan_PWM_Init(void) {
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000354:	4b0d      	ldr	r3, [pc, #52]	; (800038c <FEB_Fan_PWM_Init+0x3c>)
 8000356:	2100      	movs	r1, #0
 8000358:	0018      	movs	r0, r3
 800035a:	f002 fd77 	bl	8002e4c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800035e:	4b0b      	ldr	r3, [pc, #44]	; (800038c <FEB_Fan_PWM_Init+0x3c>)
 8000360:	2104      	movs	r1, #4
 8000362:	0018      	movs	r0, r3
 8000364:	f002 fd72 	bl	8002e4c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000368:	4b08      	ldr	r3, [pc, #32]	; (800038c <FEB_Fan_PWM_Init+0x3c>)
 800036a:	2108      	movs	r1, #8
 800036c:	0018      	movs	r0, r3
 800036e:	f002 fd6d 	bl	8002e4c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000372:	4b07      	ldr	r3, [pc, #28]	; (8000390 <FEB_Fan_PWM_Init+0x40>)
 8000374:	2100      	movs	r1, #0
 8000376:	0018      	movs	r0, r3
 8000378:	f002 fd68 	bl	8002e4c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800037c:	4b04      	ldr	r3, [pc, #16]	; (8000390 <FEB_Fan_PWM_Init+0x40>)
 800037e:	2104      	movs	r1, #4
 8000380:	0018      	movs	r0, r3
 8000382:	f002 fd63 	bl	8002e4c <HAL_TIM_PWM_Start>
}
 8000386:	46c0      	nop			; (mov r8, r8)
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	20000120 	.word	0x20000120
 8000390:	20000168 	.word	0x20000168

08000394 <FEB_Fan_All_Speed_Set>:

void FEB_Fan_All_Speed_Set(uint8_t speed) {
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	0002      	movs	r2, r0
 800039c:	1dfb      	adds	r3, r7, #7
 800039e:	701a      	strb	r2, [r3, #0]
	FEB_Fan_1_Speed_Set(speed);
 80003a0:	1dfb      	adds	r3, r7, #7
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	0018      	movs	r0, r3
 80003a6:	f000 f819 	bl	80003dc <FEB_Fan_1_Speed_Set>
	FEB_Fan_2_Speed_Set(speed);
 80003aa:	1dfb      	adds	r3, r7, #7
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	0018      	movs	r0, r3
 80003b0:	f000 f82c 	bl	800040c <FEB_Fan_2_Speed_Set>
	FEB_Fan_3_Speed_Set(speed);
 80003b4:	1dfb      	adds	r3, r7, #7
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	0018      	movs	r0, r3
 80003ba:	f000 f83f 	bl	800043c <FEB_Fan_3_Speed_Set>
	FEB_Fan_4_Speed_Set(speed);
 80003be:	1dfb      	adds	r3, r7, #7
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	0018      	movs	r0, r3
 80003c4:	f000 f852 	bl	800046c <FEB_Fan_4_Speed_Set>
	FEB_Fan_5_Speed_Set(speed);
 80003c8:	1dfb      	adds	r3, r7, #7
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	0018      	movs	r0, r3
 80003ce:	f000 f865 	bl	800049c <FEB_Fan_5_Speed_Set>
}
 80003d2:	46c0      	nop			; (mov r8, r8)
 80003d4:	46bd      	mov	sp, r7
 80003d6:	b002      	add	sp, #8
 80003d8:	bd80      	pop	{r7, pc}
	...

080003dc <FEB_Fan_1_Speed_Set>:

void FEB_Fan_1_Speed_Set(uint8_t speed) {
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	0002      	movs	r2, r0
 80003e4:	1dfb      	adds	r3, r7, #7
 80003e6:	701a      	strb	r2, [r3, #0]
	FEB_Fan_1_Speed = speed;
 80003e8:	4b06      	ldr	r3, [pc, #24]	; (8000404 <FEB_Fan_1_Speed_Set+0x28>)
 80003ea:	1dfa      	adds	r2, r7, #7
 80003ec:	7812      	ldrb	r2, [r2, #0]
 80003ee:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, FEB_Fan_1_Speed);
 80003f0:	4b04      	ldr	r3, [pc, #16]	; (8000404 <FEB_Fan_1_Speed_Set+0x28>)
 80003f2:	781a      	ldrb	r2, [r3, #0]
 80003f4:	4b04      	ldr	r3, [pc, #16]	; (8000408 <FEB_Fan_1_Speed_Set+0x2c>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	46bd      	mov	sp, r7
 80003fe:	b002      	add	sp, #8
 8000400:	bd80      	pop	{r7, pc}
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	20000078 	.word	0x20000078
 8000408:	20000120 	.word	0x20000120

0800040c <FEB_Fan_2_Speed_Set>:

void FEB_Fan_2_Speed_Set(uint8_t speed) {
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	0002      	movs	r2, r0
 8000414:	1dfb      	adds	r3, r7, #7
 8000416:	701a      	strb	r2, [r3, #0]
	FEB_Fan_2_Speed = speed;
 8000418:	4b06      	ldr	r3, [pc, #24]	; (8000434 <FEB_Fan_2_Speed_Set+0x28>)
 800041a:	1dfa      	adds	r2, r7, #7
 800041c:	7812      	ldrb	r2, [r2, #0]
 800041e:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, FEB_Fan_2_Speed);
 8000420:	4b04      	ldr	r3, [pc, #16]	; (8000434 <FEB_Fan_2_Speed_Set+0x28>)
 8000422:	781a      	ldrb	r2, [r3, #0]
 8000424:	4b04      	ldr	r3, [pc, #16]	; (8000438 <FEB_Fan_2_Speed_Set+0x2c>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	639a      	str	r2, [r3, #56]	; 0x38
}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	46bd      	mov	sp, r7
 800042e:	b002      	add	sp, #8
 8000430:	bd80      	pop	{r7, pc}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	20000079 	.word	0x20000079
 8000438:	20000120 	.word	0x20000120

0800043c <FEB_Fan_3_Speed_Set>:

void FEB_Fan_3_Speed_Set(uint8_t speed) {
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	0002      	movs	r2, r0
 8000444:	1dfb      	adds	r3, r7, #7
 8000446:	701a      	strb	r2, [r3, #0]
	FEB_Fan_3_Speed = speed;
 8000448:	4b06      	ldr	r3, [pc, #24]	; (8000464 <FEB_Fan_3_Speed_Set+0x28>)
 800044a:	1dfa      	adds	r2, r7, #7
 800044c:	7812      	ldrb	r2, [r2, #0]
 800044e:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, FEB_Fan_3_Speed);
 8000450:	4b04      	ldr	r3, [pc, #16]	; (8000464 <FEB_Fan_3_Speed_Set+0x28>)
 8000452:	781a      	ldrb	r2, [r3, #0]
 8000454:	4b04      	ldr	r3, [pc, #16]	; (8000468 <FEB_Fan_3_Speed_Set+0x2c>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	635a      	str	r2, [r3, #52]	; 0x34
}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	46bd      	mov	sp, r7
 800045e:	b002      	add	sp, #8
 8000460:	bd80      	pop	{r7, pc}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	2000007a 	.word	0x2000007a
 8000468:	20000120 	.word	0x20000120

0800046c <FEB_Fan_4_Speed_Set>:

void FEB_Fan_4_Speed_Set(uint8_t speed) {
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	0002      	movs	r2, r0
 8000474:	1dfb      	adds	r3, r7, #7
 8000476:	701a      	strb	r2, [r3, #0]
	FEB_Fan_4_Speed = speed;
 8000478:	4b06      	ldr	r3, [pc, #24]	; (8000494 <FEB_Fan_4_Speed_Set+0x28>)
 800047a:	1dfa      	adds	r2, r7, #7
 800047c:	7812      	ldrb	r2, [r2, #0]
 800047e:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, FEB_Fan_4_Speed);
 8000480:	4b04      	ldr	r3, [pc, #16]	; (8000494 <FEB_Fan_4_Speed_Set+0x28>)
 8000482:	781a      	ldrb	r2, [r3, #0]
 8000484:	4b04      	ldr	r3, [pc, #16]	; (8000498 <FEB_Fan_4_Speed_Set+0x2c>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	639a      	str	r2, [r3, #56]	; 0x38
}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	46bd      	mov	sp, r7
 800048e:	b002      	add	sp, #8
 8000490:	bd80      	pop	{r7, pc}
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	2000007b 	.word	0x2000007b
 8000498:	20000168 	.word	0x20000168

0800049c <FEB_Fan_5_Speed_Set>:

void FEB_Fan_5_Speed_Set(uint8_t speed) {
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	0002      	movs	r2, r0
 80004a4:	1dfb      	adds	r3, r7, #7
 80004a6:	701a      	strb	r2, [r3, #0]
	FEB_Fan_5_Speed = speed;
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <FEB_Fan_5_Speed_Set+0x28>)
 80004aa:	1dfa      	adds	r2, r7, #7
 80004ac:	7812      	ldrb	r2, [r2, #0]
 80004ae:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, FEB_Fan_5_Speed);
 80004b0:	4b04      	ldr	r3, [pc, #16]	; (80004c4 <FEB_Fan_5_Speed_Set+0x28>)
 80004b2:	781a      	ldrb	r2, [r3, #0]
 80004b4:	4b04      	ldr	r3, [pc, #16]	; (80004c8 <FEB_Fan_5_Speed_Set+0x2c>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	46bd      	mov	sp, r7
 80004be:	b002      	add	sp, #8
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	2000007c 	.word	0x2000007c
 80004c8:	20000168 	.word	0x20000168

080004cc <FEB_Init>:

char uart_tx_buffer[5];
uint32_t tach_val;


void FEB_Init(void){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	FEB_CAN_Init();
 80004d0:	f7ff feb0 	bl	8000234 <FEB_CAN_Init>
	//FEB_ADC_Init();
	FEB_Fan_Init();
 80004d4:	f7ff ff32 	bl	800033c <FEB_Fan_Init>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80004d8:	4b03      	ldr	r3, [pc, #12]	; (80004e8 <FEB_Init+0x1c>)
 80004da:	2100      	movs	r1, #0
 80004dc:	0018      	movs	r0, r3
 80004de:	f002 fdb9 	bl	8003054 <HAL_TIM_IC_Start_IT>
}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	200001b0 	.word	0x200001b0

080004ec <FEB_Main_Loop>:

void FEB_Main_Loop(void){
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0

	//HAL_Delay(100);
	//FEB_Test_PWM();
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <FEB_Main_Loop+0x20>)
 80004f2:	2100      	movs	r1, #0
 80004f4:	0018      	movs	r0, r3
 80004f6:	f002 fdad 	bl	8003054 <HAL_TIM_IC_Start_IT>
	HAL_Delay(800);
 80004fa:	23c8      	movs	r3, #200	; 0xc8
 80004fc:	009b      	lsls	r3, r3, #2
 80004fe:	0018      	movs	r0, r3
 8000500:	f000 ff28 	bl	8001354 <HAL_Delay>
//	sprintf(uart_tx_buffer, "%lu\n", tach_val);
//	HAL_UART_Transmit(&huart2, (uint8_t *)uart_tx_buffer, sizeof(uart_tx_buffer), HAL_MAX_DELAY);

//HAL_Delay(1000);

}
 8000504:	46c0      	nop			; (mov r8, r8)
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	200001b0 	.word	0x200001b0

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f000 feba 	bl	800128c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f81e 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f000 fb26 	bl	8000b6c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000520:	f000 f918 	bl	8000754 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000524:	f000 f9e0 	bl	80008e8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000528:	f000 faf0 	bl	8000b0c <MX_USART2_UART_Init>
  MX_ADC_Init();
 800052c:	f000 f85a 	bl	80005e4 <MX_ADC_Init>
  MX_TIM3_Init();
 8000530:	f000 fa62 	bl	80009f8 <MX_TIM3_Init>
  MX_CAN_Init();
 8000534:	f000 f8d8 	bl	80006e8 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  //FEB_Fan_Init();
  FEB_Init();
 8000538:	f7ff ffc8 	bl	80004cc <FEB_Init>

  if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 800053c:	4b05      	ldr	r3, [pc, #20]	; (8000554 <main+0x44>)
 800053e:	0018      	movs	r0, r3
 8000540:	f002 fbe0 	bl	8002d04 <HAL_TIM_Base_Start_IT>
 8000544:	1e03      	subs	r3, r0, #0
 8000546:	d001      	beq.n	800054c <main+0x3c>
    {
      /* Starting Error */
      Error_Handler();
 8000548:	f000 fbd0 	bl	8000cec <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 FEB_Main_Loop();
 800054c:	f7ff ffce 	bl	80004ec <FEB_Main_Loop>
 8000550:	e7fc      	b.n	800054c <main+0x3c>
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	200001b0 	.word	0x200001b0

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b590      	push	{r4, r7, lr}
 800055a:	b093      	sub	sp, #76	; 0x4c
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	2414      	movs	r4, #20
 8000560:	193b      	adds	r3, r7, r4
 8000562:	0018      	movs	r0, r3
 8000564:	2334      	movs	r3, #52	; 0x34
 8000566:	001a      	movs	r2, r3
 8000568:	2100      	movs	r1, #0
 800056a:	f004 ff4b 	bl	8005404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	0018      	movs	r0, r3
 8000572:	2310      	movs	r3, #16
 8000574:	001a      	movs	r2, r3
 8000576:	2100      	movs	r1, #0
 8000578:	f004 ff44 	bl	8005404 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 800057c:	0021      	movs	r1, r4
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2212      	movs	r2, #18
 8000582:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2201      	movs	r2, #1
 8000588:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2201      	movs	r2, #1
 800058e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2210      	movs	r2, #16
 8000594:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2210      	movs	r2, #16
 800059a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2200      	movs	r2, #0
 80005a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	0018      	movs	r0, r3
 80005a6:	f001 fe6b 	bl	8002280 <HAL_RCC_OscConfig>
 80005aa:	1e03      	subs	r3, r0, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80005ae:	f000 fb9d 	bl	8000cec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2207      	movs	r2, #7
 80005b6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2200      	movs	r2, #0
 80005bc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	2200      	movs	r2, #0
 80005c8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2100      	movs	r1, #0
 80005ce:	0018      	movs	r0, r3
 80005d0:	f002 f9dc 	bl	800298c <HAL_RCC_ClockConfig>
 80005d4:	1e03      	subs	r3, r0, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005d8:	f000 fb88 	bl	8000cec <Error_Handler>
  }
}
 80005dc:	46c0      	nop			; (mov r8, r8)
 80005de:	46bd      	mov	sp, r7
 80005e0:	b013      	add	sp, #76	; 0x4c
 80005e2:	bd90      	pop	{r4, r7, pc}

080005e4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	0018      	movs	r0, r3
 80005ee:	230c      	movs	r3, #12
 80005f0:	001a      	movs	r2, r3
 80005f2:	2100      	movs	r1, #0
 80005f4:	f004 ff06 	bl	8005404 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80005f8:	4b39      	ldr	r3, [pc, #228]	; (80006e0 <MX_ADC_Init+0xfc>)
 80005fa:	4a3a      	ldr	r2, [pc, #232]	; (80006e4 <MX_ADC_Init+0x100>)
 80005fc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005fe:	4b38      	ldr	r3, [pc, #224]	; (80006e0 <MX_ADC_Init+0xfc>)
 8000600:	2200      	movs	r2, #0
 8000602:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <MX_ADC_Init+0xfc>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800060a:	4b35      	ldr	r3, [pc, #212]	; (80006e0 <MX_ADC_Init+0xfc>)
 800060c:	2200      	movs	r2, #0
 800060e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000610:	4b33      	ldr	r3, [pc, #204]	; (80006e0 <MX_ADC_Init+0xfc>)
 8000612:	2201      	movs	r2, #1
 8000614:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000616:	4b32      	ldr	r3, [pc, #200]	; (80006e0 <MX_ADC_Init+0xfc>)
 8000618:	2204      	movs	r2, #4
 800061a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800061c:	4b30      	ldr	r3, [pc, #192]	; (80006e0 <MX_ADC_Init+0xfc>)
 800061e:	2200      	movs	r2, #0
 8000620:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000622:	4b2f      	ldr	r3, [pc, #188]	; (80006e0 <MX_ADC_Init+0xfc>)
 8000624:	2200      	movs	r2, #0
 8000626:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000628:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <MX_ADC_Init+0xfc>)
 800062a:	2201      	movs	r2, #1
 800062c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800062e:	4b2c      	ldr	r3, [pc, #176]	; (80006e0 <MX_ADC_Init+0xfc>)
 8000630:	2200      	movs	r2, #0
 8000632:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000634:	4b2a      	ldr	r3, [pc, #168]	; (80006e0 <MX_ADC_Init+0xfc>)
 8000636:	22c2      	movs	r2, #194	; 0xc2
 8000638:	32ff      	adds	r2, #255	; 0xff
 800063a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800063c:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <MX_ADC_Init+0xfc>)
 800063e:	2200      	movs	r2, #0
 8000640:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000642:	4b27      	ldr	r3, [pc, #156]	; (80006e0 <MX_ADC_Init+0xfc>)
 8000644:	2224      	movs	r2, #36	; 0x24
 8000646:	2100      	movs	r1, #0
 8000648:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800064a:	4b25      	ldr	r3, [pc, #148]	; (80006e0 <MX_ADC_Init+0xfc>)
 800064c:	2201      	movs	r2, #1
 800064e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000650:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <MX_ADC_Init+0xfc>)
 8000652:	0018      	movs	r0, r3
 8000654:	f000 fea2 	bl	800139c <HAL_ADC_Init>
 8000658:	1e03      	subs	r3, r0, #0
 800065a:	d001      	beq.n	8000660 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800065c:	f000 fb46 	bl	8000cec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	2280      	movs	r2, #128	; 0x80
 800066a:	0152      	lsls	r2, r2, #5
 800066c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2280      	movs	r2, #128	; 0x80
 8000672:	0552      	lsls	r2, r2, #21
 8000674:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000676:	1d3a      	adds	r2, r7, #4
 8000678:	4b19      	ldr	r3, [pc, #100]	; (80006e0 <MX_ADC_Init+0xfc>)
 800067a:	0011      	movs	r1, r2
 800067c:	0018      	movs	r0, r3
 800067e:	f000 ffcd 	bl	800161c <HAL_ADC_ConfigChannel>
 8000682:	1e03      	subs	r3, r0, #0
 8000684:	d001      	beq.n	800068a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000686:	f000 fb31 	bl	8000cec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	2201      	movs	r2, #1
 800068e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000690:	1d3a      	adds	r2, r7, #4
 8000692:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <MX_ADC_Init+0xfc>)
 8000694:	0011      	movs	r1, r2
 8000696:	0018      	movs	r0, r3
 8000698:	f000 ffc0 	bl	800161c <HAL_ADC_ConfigChannel>
 800069c:	1e03      	subs	r3, r0, #0
 800069e:	d001      	beq.n	80006a4 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 80006a0:	f000 fb24 	bl	8000cec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	2204      	movs	r2, #4
 80006a8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006aa:	1d3a      	adds	r2, r7, #4
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_ADC_Init+0xfc>)
 80006ae:	0011      	movs	r1, r2
 80006b0:	0018      	movs	r0, r3
 80006b2:	f000 ffb3 	bl	800161c <HAL_ADC_ConfigChannel>
 80006b6:	1e03      	subs	r3, r0, #0
 80006b8:	d001      	beq.n	80006be <MX_ADC_Init+0xda>
  {
    Error_Handler();
 80006ba:	f000 fb17 	bl	8000cec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2205      	movs	r2, #5
 80006c2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006c4:	1d3a      	adds	r2, r7, #4
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_ADC_Init+0xfc>)
 80006c8:	0011      	movs	r1, r2
 80006ca:	0018      	movs	r0, r3
 80006cc:	f000 ffa6 	bl	800161c <HAL_ADC_ConfigChannel>
 80006d0:	1e03      	subs	r3, r0, #0
 80006d2:	d001      	beq.n	80006d8 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 80006d4:	f000 fb0a 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */
//
  /* USER CODE END ADC_Init 2 */

}
 80006d8:	46c0      	nop			; (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	b004      	add	sp, #16
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	200000b8 	.word	0x200000b8
 80006e4:	40012400 	.word	0x40012400

080006e8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80006ec:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_CAN_Init+0x64>)
 80006ee:	4a18      	ldr	r2, [pc, #96]	; (8000750 <MX_CAN_Init+0x68>)
 80006f0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80006f2:	4b16      	ldr	r3, [pc, #88]	; (800074c <MX_CAN_Init+0x64>)
 80006f4:	2210      	movs	r2, #16
 80006f6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_CAN_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006fe:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_CAN_Init+0x64>)
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_CAN_Init+0x64>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_CAN_Init+0x64>)
 800070c:	2200      	movs	r2, #0
 800070e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000710:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_CAN_Init+0x64>)
 8000712:	2200      	movs	r2, #0
 8000714:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000716:	4b0d      	ldr	r3, [pc, #52]	; (800074c <MX_CAN_Init+0x64>)
 8000718:	2200      	movs	r2, #0
 800071a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800071c:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_CAN_Init+0x64>)
 800071e:	2200      	movs	r2, #0
 8000720:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000722:	4b0a      	ldr	r3, [pc, #40]	; (800074c <MX_CAN_Init+0x64>)
 8000724:	2200      	movs	r2, #0
 8000726:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000728:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_CAN_Init+0x64>)
 800072a:	2200      	movs	r2, #0
 800072c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800072e:	4b07      	ldr	r3, [pc, #28]	; (800074c <MX_CAN_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000734:	4b05      	ldr	r3, [pc, #20]	; (800074c <MX_CAN_Init+0x64>)
 8000736:	0018      	movs	r0, r3
 8000738:	f001 f87e 	bl	8001838 <HAL_CAN_Init>
 800073c:	1e03      	subs	r3, r0, #0
 800073e:	d001      	beq.n	8000744 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000740:	f000 fad4 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000744:	46c0      	nop			; (mov r8, r8)
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	200000f8 	.word	0x200000f8
 8000750:	40006400 	.word	0x40006400

08000754 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b096      	sub	sp, #88	; 0x58
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800075a:	2348      	movs	r3, #72	; 0x48
 800075c:	18fb      	adds	r3, r7, r3
 800075e:	0018      	movs	r0, r3
 8000760:	2310      	movs	r3, #16
 8000762:	001a      	movs	r2, r3
 8000764:	2100      	movs	r1, #0
 8000766:	f004 fe4d 	bl	8005404 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800076a:	2340      	movs	r3, #64	; 0x40
 800076c:	18fb      	adds	r3, r7, r3
 800076e:	0018      	movs	r0, r3
 8000770:	2308      	movs	r3, #8
 8000772:	001a      	movs	r2, r3
 8000774:	2100      	movs	r1, #0
 8000776:	f004 fe45 	bl	8005404 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800077a:	2324      	movs	r3, #36	; 0x24
 800077c:	18fb      	adds	r3, r7, r3
 800077e:	0018      	movs	r0, r3
 8000780:	231c      	movs	r3, #28
 8000782:	001a      	movs	r2, r3
 8000784:	2100      	movs	r1, #0
 8000786:	f004 fe3d 	bl	8005404 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	0018      	movs	r0, r3
 800078e:	2320      	movs	r3, #32
 8000790:	001a      	movs	r2, r3
 8000792:	2100      	movs	r1, #0
 8000794:	f004 fe36 	bl	8005404 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000798:	4b51      	ldr	r3, [pc, #324]	; (80008e0 <MX_TIM1_Init+0x18c>)
 800079a:	4a52      	ldr	r2, [pc, #328]	; (80008e4 <MX_TIM1_Init+0x190>)
 800079c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800079e:	4b50      	ldr	r3, [pc, #320]	; (80008e0 <MX_TIM1_Init+0x18c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a4:	4b4e      	ldr	r3, [pc, #312]	; (80008e0 <MX_TIM1_Init+0x18c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 80007aa:	4b4d      	ldr	r3, [pc, #308]	; (80008e0 <MX_TIM1_Init+0x18c>)
 80007ac:	22ff      	movs	r2, #255	; 0xff
 80007ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b0:	4b4b      	ldr	r3, [pc, #300]	; (80008e0 <MX_TIM1_Init+0x18c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007b6:	4b4a      	ldr	r3, [pc, #296]	; (80008e0 <MX_TIM1_Init+0x18c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007bc:	4b48      	ldr	r3, [pc, #288]	; (80008e0 <MX_TIM1_Init+0x18c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007c2:	4b47      	ldr	r3, [pc, #284]	; (80008e0 <MX_TIM1_Init+0x18c>)
 80007c4:	0018      	movs	r0, r3
 80007c6:	f002 fa4d 	bl	8002c64 <HAL_TIM_Base_Init>
 80007ca:	1e03      	subs	r3, r0, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80007ce:	f000 fa8d 	bl	8000cec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007d2:	2148      	movs	r1, #72	; 0x48
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2280      	movs	r2, #128	; 0x80
 80007d8:	0152      	lsls	r2, r2, #5
 80007da:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007dc:	187a      	adds	r2, r7, r1
 80007de:	4b40      	ldr	r3, [pc, #256]	; (80008e0 <MX_TIM1_Init+0x18c>)
 80007e0:	0011      	movs	r1, r2
 80007e2:	0018      	movs	r0, r3
 80007e4:	f003 f866 	bl	80038b4 <HAL_TIM_ConfigClockSource>
 80007e8:	1e03      	subs	r3, r0, #0
 80007ea:	d001      	beq.n	80007f0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80007ec:	f000 fa7e 	bl	8000cec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007f0:	4b3b      	ldr	r3, [pc, #236]	; (80008e0 <MX_TIM1_Init+0x18c>)
 80007f2:	0018      	movs	r0, r3
 80007f4:	f002 fad2 	bl	8002d9c <HAL_TIM_PWM_Init>
 80007f8:	1e03      	subs	r3, r0, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80007fc:	f000 fa76 	bl	8000cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000800:	2140      	movs	r1, #64	; 0x40
 8000802:	187b      	adds	r3, r7, r1
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000808:	187b      	adds	r3, r7, r1
 800080a:	2200      	movs	r2, #0
 800080c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800080e:	187a      	adds	r2, r7, r1
 8000810:	4b33      	ldr	r3, [pc, #204]	; (80008e0 <MX_TIM1_Init+0x18c>)
 8000812:	0011      	movs	r1, r2
 8000814:	0018      	movs	r0, r3
 8000816:	f003 fd6b 	bl	80042f0 <HAL_TIMEx_MasterConfigSynchronization>
 800081a:	1e03      	subs	r3, r0, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 800081e:	f000 fa65 	bl	8000cec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000822:	2124      	movs	r1, #36	; 0x24
 8000824:	187b      	adds	r3, r7, r1
 8000826:	2260      	movs	r2, #96	; 0x60
 8000828:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 25;
 800082a:	187b      	adds	r3, r7, r1
 800082c:	2219      	movs	r2, #25
 800082e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000830:	187b      	adds	r3, r7, r1
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2200      	movs	r2, #0
 800083a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800083c:	187b      	adds	r3, r7, r1
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000842:	187b      	adds	r3, r7, r1
 8000844:	2200      	movs	r2, #0
 8000846:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000848:	187b      	adds	r3, r7, r1
 800084a:	2200      	movs	r2, #0
 800084c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800084e:	1879      	adds	r1, r7, r1
 8000850:	4b23      	ldr	r3, [pc, #140]	; (80008e0 <MX_TIM1_Init+0x18c>)
 8000852:	2200      	movs	r2, #0
 8000854:	0018      	movs	r0, r3
 8000856:	f002 ff67 	bl	8003728 <HAL_TIM_PWM_ConfigChannel>
 800085a:	1e03      	subs	r3, r0, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800085e:	f000 fa45 	bl	8000cec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000862:	2324      	movs	r3, #36	; 0x24
 8000864:	18f9      	adds	r1, r7, r3
 8000866:	4b1e      	ldr	r3, [pc, #120]	; (80008e0 <MX_TIM1_Init+0x18c>)
 8000868:	2204      	movs	r2, #4
 800086a:	0018      	movs	r0, r3
 800086c:	f002 ff5c 	bl	8003728 <HAL_TIM_PWM_ConfigChannel>
 8000870:	1e03      	subs	r3, r0, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8000874:	f000 fa3a 	bl	8000cec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000878:	2324      	movs	r3, #36	; 0x24
 800087a:	18f9      	adds	r1, r7, r3
 800087c:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <MX_TIM1_Init+0x18c>)
 800087e:	2208      	movs	r2, #8
 8000880:	0018      	movs	r0, r3
 8000882:	f002 ff51 	bl	8003728 <HAL_TIM_PWM_ConfigChannel>
 8000886:	1e03      	subs	r3, r0, #0
 8000888:	d001      	beq.n	800088e <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 800088a:	f000 fa2f 	bl	8000cec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	2200      	movs	r2, #0
 8000898:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	2280      	movs	r2, #128	; 0x80
 80008b0:	0192      	lsls	r2, r2, #6
 80008b2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008ba:	1d3a      	adds	r2, r7, #4
 80008bc:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_TIM1_Init+0x18c>)
 80008be:	0011      	movs	r1, r2
 80008c0:	0018      	movs	r0, r3
 80008c2:	f003 fd6d 	bl	80043a0 <HAL_TIMEx_ConfigBreakDeadTime>
 80008c6:	1e03      	subs	r3, r0, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 80008ca:	f000 fa0f 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008ce:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <MX_TIM1_Init+0x18c>)
 80008d0:	0018      	movs	r0, r3
 80008d2:	f000 fb45 	bl	8000f60 <HAL_TIM_MspPostInit>

}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	46bd      	mov	sp, r7
 80008da:	b016      	add	sp, #88	; 0x58
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	20000120 	.word	0x20000120
 80008e4:	40012c00 	.word	0x40012c00

080008e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08e      	sub	sp, #56	; 0x38
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ee:	2328      	movs	r3, #40	; 0x28
 80008f0:	18fb      	adds	r3, r7, r3
 80008f2:	0018      	movs	r0, r3
 80008f4:	2310      	movs	r3, #16
 80008f6:	001a      	movs	r2, r3
 80008f8:	2100      	movs	r1, #0
 80008fa:	f004 fd83 	bl	8005404 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008fe:	2320      	movs	r3, #32
 8000900:	18fb      	adds	r3, r7, r3
 8000902:	0018      	movs	r0, r3
 8000904:	2308      	movs	r3, #8
 8000906:	001a      	movs	r2, r3
 8000908:	2100      	movs	r1, #0
 800090a:	f004 fd7b 	bl	8005404 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	0018      	movs	r0, r3
 8000912:	231c      	movs	r3, #28
 8000914:	001a      	movs	r2, r3
 8000916:	2100      	movs	r1, #0
 8000918:	f004 fd74 	bl	8005404 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800091c:	4b35      	ldr	r3, [pc, #212]	; (80009f4 <MX_TIM2_Init+0x10c>)
 800091e:	2280      	movs	r2, #128	; 0x80
 8000920:	05d2      	lsls	r2, r2, #23
 8000922:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000924:	4b33      	ldr	r3, [pc, #204]	; (80009f4 <MX_TIM2_Init+0x10c>)
 8000926:	2200      	movs	r2, #0
 8000928:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092a:	4b32      	ldr	r3, [pc, #200]	; (80009f4 <MX_TIM2_Init+0x10c>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8000930:	4b30      	ldr	r3, [pc, #192]	; (80009f4 <MX_TIM2_Init+0x10c>)
 8000932:	22ff      	movs	r2, #255	; 0xff
 8000934:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000936:	4b2f      	ldr	r3, [pc, #188]	; (80009f4 <MX_TIM2_Init+0x10c>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800093c:	4b2d      	ldr	r3, [pc, #180]	; (80009f4 <MX_TIM2_Init+0x10c>)
 800093e:	2280      	movs	r2, #128	; 0x80
 8000940:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000942:	4b2c      	ldr	r3, [pc, #176]	; (80009f4 <MX_TIM2_Init+0x10c>)
 8000944:	0018      	movs	r0, r3
 8000946:	f002 f98d 	bl	8002c64 <HAL_TIM_Base_Init>
 800094a:	1e03      	subs	r3, r0, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800094e:	f000 f9cd 	bl	8000cec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000952:	2128      	movs	r1, #40	; 0x28
 8000954:	187b      	adds	r3, r7, r1
 8000956:	2280      	movs	r2, #128	; 0x80
 8000958:	0152      	lsls	r2, r2, #5
 800095a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800095c:	187a      	adds	r2, r7, r1
 800095e:	4b25      	ldr	r3, [pc, #148]	; (80009f4 <MX_TIM2_Init+0x10c>)
 8000960:	0011      	movs	r1, r2
 8000962:	0018      	movs	r0, r3
 8000964:	f002 ffa6 	bl	80038b4 <HAL_TIM_ConfigClockSource>
 8000968:	1e03      	subs	r3, r0, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 800096c:	f000 f9be 	bl	8000cec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000970:	4b20      	ldr	r3, [pc, #128]	; (80009f4 <MX_TIM2_Init+0x10c>)
 8000972:	0018      	movs	r0, r3
 8000974:	f002 fa12 	bl	8002d9c <HAL_TIM_PWM_Init>
 8000978:	1e03      	subs	r3, r0, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800097c:	f000 f9b6 	bl	8000cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000980:	2120      	movs	r1, #32
 8000982:	187b      	adds	r3, r7, r1
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2200      	movs	r2, #0
 800098c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800098e:	187a      	adds	r2, r7, r1
 8000990:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <MX_TIM2_Init+0x10c>)
 8000992:	0011      	movs	r1, r2
 8000994:	0018      	movs	r0, r3
 8000996:	f003 fcab 	bl	80042f0 <HAL_TIMEx_MasterConfigSynchronization>
 800099a:	1e03      	subs	r3, r0, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 800099e:	f000 f9a5 	bl	8000cec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	2260      	movs	r2, #96	; 0x60
 80009a6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 25;
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2219      	movs	r2, #25
 80009ac:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ba:	1d39      	adds	r1, r7, #4
 80009bc:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <MX_TIM2_Init+0x10c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	0018      	movs	r0, r3
 80009c2:	f002 feb1 	bl	8003728 <HAL_TIM_PWM_ConfigChannel>
 80009c6:	1e03      	subs	r3, r0, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80009ca:	f000 f98f 	bl	8000cec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009ce:	1d39      	adds	r1, r7, #4
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <MX_TIM2_Init+0x10c>)
 80009d2:	2204      	movs	r2, #4
 80009d4:	0018      	movs	r0, r3
 80009d6:	f002 fea7 	bl	8003728 <HAL_TIM_PWM_ConfigChannel>
 80009da:	1e03      	subs	r3, r0, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 80009de:	f000 f985 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009e2:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <MX_TIM2_Init+0x10c>)
 80009e4:	0018      	movs	r0, r3
 80009e6:	f000 fabb 	bl	8000f60 <HAL_TIM_MspPostInit>

}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	b00e      	add	sp, #56	; 0x38
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	20000168 	.word	0x20000168

080009f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	; 0x28
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009fe:	2318      	movs	r3, #24
 8000a00:	18fb      	adds	r3, r7, r3
 8000a02:	0018      	movs	r0, r3
 8000a04:	2310      	movs	r3, #16
 8000a06:	001a      	movs	r2, r3
 8000a08:	2100      	movs	r1, #0
 8000a0a:	f004 fcfb 	bl	8005404 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a0e:	2310      	movs	r3, #16
 8000a10:	18fb      	adds	r3, r7, r3
 8000a12:	0018      	movs	r0, r3
 8000a14:	2308      	movs	r3, #8
 8000a16:	001a      	movs	r2, r3
 8000a18:	2100      	movs	r1, #0
 8000a1a:	f004 fcf3 	bl	8005404 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a1e:	003b      	movs	r3, r7
 8000a20:	0018      	movs	r0, r3
 8000a22:	2310      	movs	r3, #16
 8000a24:	001a      	movs	r2, r3
 8000a26:	2100      	movs	r1, #0
 8000a28:	f004 fcec 	bl	8005404 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a2c:	4b34      	ldr	r3, [pc, #208]	; (8000b00 <MX_TIM3_Init+0x108>)
 8000a2e:	4a35      	ldr	r2, [pc, #212]	; (8000b04 <MX_TIM3_Init+0x10c>)
 8000a30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a32:	4b33      	ldr	r3, [pc, #204]	; (8000b00 <MX_TIM3_Init+0x108>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a38:	4b31      	ldr	r3, [pc, #196]	; (8000b00 <MX_TIM3_Init+0x108>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a3e:	4b30      	ldr	r3, [pc, #192]	; (8000b00 <MX_TIM3_Init+0x108>)
 8000a40:	4a31      	ldr	r2, [pc, #196]	; (8000b08 <MX_TIM3_Init+0x110>)
 8000a42:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a44:	4b2e      	ldr	r3, [pc, #184]	; (8000b00 <MX_TIM3_Init+0x108>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a4a:	4b2d      	ldr	r3, [pc, #180]	; (8000b00 <MX_TIM3_Init+0x108>)
 8000a4c:	2280      	movs	r2, #128	; 0x80
 8000a4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a50:	4b2b      	ldr	r3, [pc, #172]	; (8000b00 <MX_TIM3_Init+0x108>)
 8000a52:	0018      	movs	r0, r3
 8000a54:	f002 f906 	bl	8002c64 <HAL_TIM_Base_Init>
 8000a58:	1e03      	subs	r3, r0, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000a5c:	f000 f946 	bl	8000cec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a60:	2118      	movs	r1, #24
 8000a62:	187b      	adds	r3, r7, r1
 8000a64:	2280      	movs	r2, #128	; 0x80
 8000a66:	0152      	lsls	r2, r2, #5
 8000a68:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a6a:	187a      	adds	r2, r7, r1
 8000a6c:	4b24      	ldr	r3, [pc, #144]	; (8000b00 <MX_TIM3_Init+0x108>)
 8000a6e:	0011      	movs	r1, r2
 8000a70:	0018      	movs	r0, r3
 8000a72:	f002 ff1f 	bl	80038b4 <HAL_TIM_ConfigClockSource>
 8000a76:	1e03      	subs	r3, r0, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000a7a:	f000 f937 	bl	8000cec <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000a7e:	4b20      	ldr	r3, [pc, #128]	; (8000b00 <MX_TIM3_Init+0x108>)
 8000a80:	0018      	movs	r0, r3
 8000a82:	f002 fa8f 	bl	8002fa4 <HAL_TIM_IC_Init>
 8000a86:	1e03      	subs	r3, r0, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000a8a:	f000 f92f 	bl	8000cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a8e:	2110      	movs	r1, #16
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	2200      	movs	r2, #0
 8000a9a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a9c:	187a      	adds	r2, r7, r1
 8000a9e:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <MX_TIM3_Init+0x108>)
 8000aa0:	0011      	movs	r1, r2
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f003 fc24 	bl	80042f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa8:	1e03      	subs	r3, r0, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000aac:	f000 f91e 	bl	8000cec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ab0:	003b      	movs	r3, r7
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ab6:	003b      	movs	r3, r7
 8000ab8:	2201      	movs	r2, #1
 8000aba:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000abc:	003b      	movs	r3, r7
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8000ac2:	003b      	movs	r3, r7
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ac8:	0039      	movs	r1, r7
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <MX_TIM3_Init+0x108>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f002 fd86 	bl	80035e0 <HAL_TIM_IC_ConfigChannel>
 8000ad4:	1e03      	subs	r3, r0, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000ad8:	f000 f908 	bl	8000cec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000adc:	003b      	movs	r3, r7
 8000ade:	2202      	movs	r2, #2
 8000ae0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000ae2:	0039      	movs	r1, r7
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <MX_TIM3_Init+0x108>)
 8000ae6:	2204      	movs	r2, #4
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f002 fd79 	bl	80035e0 <HAL_TIM_IC_ConfigChannel>
 8000aee:	1e03      	subs	r3, r0, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM3_Init+0xfe>
  {
    Error_Handler();
 8000af2:	f000 f8fb 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b00a      	add	sp, #40	; 0x28
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	200001b0 	.word	0x200001b0
 8000b04:	40000400 	.word	0x40000400
 8000b08:	0000ffff 	.word	0x0000ffff

08000b0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b12:	4a15      	ldr	r2, [pc, #84]	; (8000b68 <MX_USART2_UART_Init+0x5c>)
 8000b14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b16:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b18:	22e1      	movs	r2, #225	; 0xe1
 8000b1a:	0252      	lsls	r2, r2, #9
 8000b1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b32:	220c      	movs	r2, #12
 8000b34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b3c:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b4e:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b50:	0018      	movs	r0, r3
 8000b52:	f003 fc93 	bl	800447c <HAL_UART_Init>
 8000b56:	1e03      	subs	r3, r0, #0
 8000b58:	d001      	beq.n	8000b5e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b5a:	f000 f8c7 	bl	8000cec <Error_Handler>
  /* USER CODE BEGIN USART2_Init 2 */


  /* USER CODE END USART2_Init 2 */

}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	200001f8 	.word	0x200001f8
 8000b68:	40004400 	.word	0x40004400

08000b6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b72:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <MX_GPIO_Init+0x64>)
 8000b74:	695a      	ldr	r2, [r3, #20]
 8000b76:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <MX_GPIO_Init+0x64>)
 8000b78:	2180      	movs	r1, #128	; 0x80
 8000b7a:	03c9      	lsls	r1, r1, #15
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	615a      	str	r2, [r3, #20]
 8000b80:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <MX_GPIO_Init+0x64>)
 8000b82:	695a      	ldr	r2, [r3, #20]
 8000b84:	2380      	movs	r3, #128	; 0x80
 8000b86:	03db      	lsls	r3, r3, #15
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <MX_GPIO_Init+0x64>)
 8000b90:	695a      	ldr	r2, [r3, #20]
 8000b92:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <MX_GPIO_Init+0x64>)
 8000b94:	2180      	movs	r1, #128	; 0x80
 8000b96:	0289      	lsls	r1, r1, #10
 8000b98:	430a      	orrs	r2, r1
 8000b9a:	615a      	str	r2, [r3, #20]
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_GPIO_Init+0x64>)
 8000b9e:	695a      	ldr	r2, [r3, #20]
 8000ba0:	2380      	movs	r3, #128	; 0x80
 8000ba2:	029b      	lsls	r3, r3, #10
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_GPIO_Init+0x64>)
 8000bac:	695a      	ldr	r2, [r3, #20]
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <MX_GPIO_Init+0x64>)
 8000bb0:	2180      	movs	r1, #128	; 0x80
 8000bb2:	02c9      	lsls	r1, r1, #11
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	615a      	str	r2, [r3, #20]
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <MX_GPIO_Init+0x64>)
 8000bba:	695a      	ldr	r2, [r3, #20]
 8000bbc:	2380      	movs	r3, #128	; 0x80
 8000bbe:	02db      	lsls	r3, r3, #11
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	b004      	add	sp, #16
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
    if(gu8_State == IDLE)
 8000bdc:	4b2d      	ldr	r3, [pc, #180]	; (8000c94 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d10a      	bne.n	8000bfc <HAL_TIM_IC_CaptureCallback+0x28>
    {
        gu32_T1 = TIM3->CCR1;
 8000be6:	4b2c      	ldr	r3, [pc, #176]	; (8000c98 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000be8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bea:	4b2c      	ldr	r3, [pc, #176]	; (8000c9c <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000bec:	601a      	str	r2, [r3, #0]
        gu16_TIM3_OVC = 0;
 8000bee:	4b2c      	ldr	r3, [pc, #176]	; (8000ca0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	801a      	strh	r2, [r3, #0]
        gu8_State = DONE;
 8000bf4:	4b27      	ldr	r3, [pc, #156]	; (8000c94 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	701a      	strb	r2, [r3, #0]
        }
        gu8_State = IDLE;
        HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);
    }

}
 8000bfa:	e046      	b.n	8000c8a <HAL_TIM_IC_CaptureCallback+0xb6>
    else if(gu8_State == DONE)
 8000bfc:	4b25      	ldr	r3, [pc, #148]	; (8000c94 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d141      	bne.n	8000c8a <HAL_TIM_IC_CaptureCallback+0xb6>
        gu32_T2 = TIM3->CCR1;
 8000c06:	4b24      	ldr	r3, [pc, #144]	; (8000c98 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000c08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c0a:	4b26      	ldr	r3, [pc, #152]	; (8000ca4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000c0c:	601a      	str	r2, [r3, #0]
        gu32_Ticks = (gu32_T2 + (gu16_TIM3_OVC * 65536)) - gu32_T1;
 8000c0e:	4b24      	ldr	r3, [pc, #144]	; (8000ca0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000c10:	881b      	ldrh	r3, [r3, #0]
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	041b      	lsls	r3, r3, #16
 8000c16:	001a      	movs	r2, r3
 8000c18:	4b22      	ldr	r3, [pc, #136]	; (8000ca4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	18d2      	adds	r2, r2, r3
 8000c1e:	4b1f      	ldr	r3, [pc, #124]	; (8000c9c <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	1ad2      	subs	r2, r2, r3
 8000c24:	4b20      	ldr	r3, [pc, #128]	; (8000ca8 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000c26:	601a      	str	r2, [r3, #0]
        gu32_Freq = (uint32_t)(F_CLK/gu32_Ticks);
 8000c28:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	0019      	movs	r1, r3
 8000c2e:	481f      	ldr	r0, [pc, #124]	; (8000cac <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000c30:	f7ff fa74 	bl	800011c <__udivsi3>
 8000c34:	0003      	movs	r3, r0
 8000c36:	001a      	movs	r2, r3
 8000c38:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000c3a:	601a      	str	r2, [r3, #0]
        if(gu32_Freq != 0)
 8000c3c:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d00d      	beq.n	8000c60 <HAL_TIM_IC_CaptureCallback+0x8c>
          sprintf(gu8_MSG, "Frequency = %lu Hz\n\r", gu32_Freq);
 8000c44:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	491a      	ldr	r1, [pc, #104]	; (8000cb4 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000c4a:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f004 fbb9 	bl	80053c4 <siprintf>
          HAL_UART_Transmit(&huart2, gu8_MSG, sizeof(gu8_MSG), 10);
 8000c52:	4919      	ldr	r1, [pc, #100]	; (8000cb8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000c54:	4819      	ldr	r0, [pc, #100]	; (8000cbc <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000c56:	230a      	movs	r3, #10
 8000c58:	2223      	movs	r2, #35	; 0x23
 8000c5a:	f003 fc63 	bl	8004524 <HAL_UART_Transmit>
 8000c5e:	e00c      	b.n	8000c7a <HAL_TIM_IC_CaptureCallback+0xa6>
        	sprintf(gu8_MSG, "Failure = %lu Hz\n\r", gu32_Freq);
 8000c60:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4916      	ldr	r1, [pc, #88]	; (8000cc0 <HAL_TIM_IC_CaptureCallback+0xec>)
 8000c66:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f004 fbab 	bl	80053c4 <siprintf>
        	HAL_UART_Transmit(&huart2, gu8_MSG, sizeof(gu8_MSG), 10);
 8000c6e:	4912      	ldr	r1, [pc, #72]	; (8000cb8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000c70:	4812      	ldr	r0, [pc, #72]	; (8000cbc <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000c72:	230a      	movs	r3, #10
 8000c74:	2223      	movs	r2, #35	; 0x23
 8000c76:	f003 fc55 	bl	8004524 <HAL_UART_Transmit>
        gu8_State = IDLE;
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	701a      	strb	r2, [r3, #0]
        HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000c80:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000c82:	2100      	movs	r1, #0
 8000c84:	0018      	movs	r0, r3
 8000c86:	f002 faed 	bl	8003264 <HAL_TIM_IC_Stop_IT>
}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b002      	add	sp, #8
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	2000007d 	.word	0x2000007d
 8000c98:	40000400 	.word	0x40000400
 8000c9c:	200000a4 	.word	0x200000a4
 8000ca0:	200000b0 	.word	0x200000b0
 8000ca4:	200000a8 	.word	0x200000a8
 8000ca8:	200000ac 	.word	0x200000ac
 8000cac:	007a1200 	.word	0x007a1200
 8000cb0:	200000b4 	.word	0x200000b4
 8000cb4:	08005d24 	.word	0x08005d24
 8000cb8:	20000080 	.word	0x20000080
 8000cbc:	200001f8 	.word	0x200001f8
 8000cc0:	08005d3c 	.word	0x08005d3c
 8000cc4:	200001b0 	.word	0x200001b0

08000cc8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
    gu16_TIM3_OVC++;
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cd2:	881b      	ldrh	r3, [r3, #0]
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cdc:	801a      	strh	r2, [r3, #0]
}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	b002      	add	sp, #8
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	200000b0 	.word	0x200000b0

08000cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf0:	b672      	cpsid	i
}
 8000cf2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <Error_Handler+0x8>
	...

08000cf8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <HAL_MspInit+0x44>)
 8000d00:	699a      	ldr	r2, [r3, #24]
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <HAL_MspInit+0x44>)
 8000d04:	2101      	movs	r1, #1
 8000d06:	430a      	orrs	r2, r1
 8000d08:	619a      	str	r2, [r3, #24]
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <HAL_MspInit+0x44>)
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	2201      	movs	r2, #1
 8000d10:	4013      	ands	r3, r2
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d16:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <HAL_MspInit+0x44>)
 8000d18:	69da      	ldr	r2, [r3, #28]
 8000d1a:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <HAL_MspInit+0x44>)
 8000d1c:	2180      	movs	r1, #128	; 0x80
 8000d1e:	0549      	lsls	r1, r1, #21
 8000d20:	430a      	orrs	r2, r1
 8000d22:	61da      	str	r2, [r3, #28]
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <HAL_MspInit+0x44>)
 8000d26:	69da      	ldr	r2, [r3, #28]
 8000d28:	2380      	movs	r3, #128	; 0x80
 8000d2a:	055b      	lsls	r3, r3, #21
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	603b      	str	r3, [r7, #0]
 8000d30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	46bd      	mov	sp, r7
 8000d36:	b002      	add	sp, #8
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	40021000 	.word	0x40021000

08000d40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d40:	b590      	push	{r4, r7, lr}
 8000d42:	b08b      	sub	sp, #44	; 0x2c
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	2414      	movs	r4, #20
 8000d4a:	193b      	adds	r3, r7, r4
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	2314      	movs	r3, #20
 8000d50:	001a      	movs	r2, r3
 8000d52:	2100      	movs	r1, #0
 8000d54:	f004 fb56 	bl	8005404 <memset>
  if(hadc->Instance==ADC1)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a19      	ldr	r2, [pc, #100]	; (8000dc4 <HAL_ADC_MspInit+0x84>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d12b      	bne.n	8000dba <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d62:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <HAL_ADC_MspInit+0x88>)
 8000d64:	699a      	ldr	r2, [r3, #24]
 8000d66:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <HAL_ADC_MspInit+0x88>)
 8000d68:	2180      	movs	r1, #128	; 0x80
 8000d6a:	0089      	lsls	r1, r1, #2
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	619a      	str	r2, [r3, #24]
 8000d70:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <HAL_ADC_MspInit+0x88>)
 8000d72:	699a      	ldr	r2, [r3, #24]
 8000d74:	2380      	movs	r3, #128	; 0x80
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	4013      	ands	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <HAL_ADC_MspInit+0x88>)
 8000d80:	695a      	ldr	r2, [r3, #20]
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <HAL_ADC_MspInit+0x88>)
 8000d84:	2180      	movs	r1, #128	; 0x80
 8000d86:	0289      	lsls	r1, r1, #10
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	615a      	str	r2, [r3, #20]
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <HAL_ADC_MspInit+0x88>)
 8000d8e:	695a      	ldr	r2, [r3, #20]
 8000d90:	2380      	movs	r3, #128	; 0x80
 8000d92:	029b      	lsls	r3, r3, #10
 8000d94:	4013      	ands	r3, r2
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000d9a:	193b      	adds	r3, r7, r4
 8000d9c:	2233      	movs	r2, #51	; 0x33
 8000d9e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000da0:	193b      	adds	r3, r7, r4
 8000da2:	2203      	movs	r2, #3
 8000da4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	193b      	adds	r3, r7, r4
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	193a      	adds	r2, r7, r4
 8000dae:	2390      	movs	r3, #144	; 0x90
 8000db0:	05db      	lsls	r3, r3, #23
 8000db2:	0011      	movs	r1, r2
 8000db4:	0018      	movs	r0, r3
 8000db6:	f001 f8fb 	bl	8001fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b00b      	add	sp, #44	; 0x2c
 8000dc0:	bd90      	pop	{r4, r7, pc}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	40012400 	.word	0x40012400
 8000dc8:	40021000 	.word	0x40021000

08000dcc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000dcc:	b590      	push	{r4, r7, lr}
 8000dce:	b08b      	sub	sp, #44	; 0x2c
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	2414      	movs	r4, #20
 8000dd6:	193b      	adds	r3, r7, r4
 8000dd8:	0018      	movs	r0, r3
 8000dda:	2314      	movs	r3, #20
 8000ddc:	001a      	movs	r2, r3
 8000dde:	2100      	movs	r1, #0
 8000de0:	f004 fb10 	bl	8005404 <memset>
  if(hcan->Instance==CAN)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a1d      	ldr	r2, [pc, #116]	; (8000e60 <HAL_CAN_MspInit+0x94>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d133      	bne.n	8000e56 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000dee:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <HAL_CAN_MspInit+0x98>)
 8000df0:	69da      	ldr	r2, [r3, #28]
 8000df2:	4b1c      	ldr	r3, [pc, #112]	; (8000e64 <HAL_CAN_MspInit+0x98>)
 8000df4:	2180      	movs	r1, #128	; 0x80
 8000df6:	0489      	lsls	r1, r1, #18
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	61da      	str	r2, [r3, #28]
 8000dfc:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <HAL_CAN_MspInit+0x98>)
 8000dfe:	69da      	ldr	r2, [r3, #28]
 8000e00:	2380      	movs	r3, #128	; 0x80
 8000e02:	049b      	lsls	r3, r3, #18
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <HAL_CAN_MspInit+0x98>)
 8000e0c:	695a      	ldr	r2, [r3, #20]
 8000e0e:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <HAL_CAN_MspInit+0x98>)
 8000e10:	2180      	movs	r1, #128	; 0x80
 8000e12:	0289      	lsls	r1, r1, #10
 8000e14:	430a      	orrs	r2, r1
 8000e16:	615a      	str	r2, [r3, #20]
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <HAL_CAN_MspInit+0x98>)
 8000e1a:	695a      	ldr	r2, [r3, #20]
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	029b      	lsls	r3, r3, #10
 8000e20:	4013      	ands	r3, r2
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e26:	193b      	adds	r3, r7, r4
 8000e28:	22c0      	movs	r2, #192	; 0xc0
 8000e2a:	0152      	lsls	r2, r2, #5
 8000e2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	0021      	movs	r1, r4
 8000e30:	187b      	adds	r3, r7, r1
 8000e32:	2202      	movs	r2, #2
 8000e34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	187b      	adds	r3, r7, r1
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e3c:	187b      	adds	r3, r7, r1
 8000e3e:	2203      	movs	r2, #3
 8000e40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000e42:	187b      	adds	r3, r7, r1
 8000e44:	2204      	movs	r2, #4
 8000e46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e48:	187a      	adds	r2, r7, r1
 8000e4a:	2390      	movs	r3, #144	; 0x90
 8000e4c:	05db      	lsls	r3, r3, #23
 8000e4e:	0011      	movs	r1, r2
 8000e50:	0018      	movs	r0, r3
 8000e52:	f001 f8ad 	bl	8001fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	b00b      	add	sp, #44	; 0x2c
 8000e5c:	bd90      	pop	{r4, r7, pc}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	40006400 	.word	0x40006400
 8000e64:	40021000 	.word	0x40021000

08000e68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08c      	sub	sp, #48	; 0x30
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	231c      	movs	r3, #28
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	0018      	movs	r0, r3
 8000e76:	2314      	movs	r3, #20
 8000e78:	001a      	movs	r2, r3
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	f004 fac2 	bl	8005404 <memset>
  if(htim_base->Instance==TIM1)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a33      	ldr	r2, [pc, #204]	; (8000f54 <HAL_TIM_Base_MspInit+0xec>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d10e      	bne.n	8000ea8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e8a:	4b33      	ldr	r3, [pc, #204]	; (8000f58 <HAL_TIM_Base_MspInit+0xf0>)
 8000e8c:	699a      	ldr	r2, [r3, #24]
 8000e8e:	4b32      	ldr	r3, [pc, #200]	; (8000f58 <HAL_TIM_Base_MspInit+0xf0>)
 8000e90:	2180      	movs	r1, #128	; 0x80
 8000e92:	0109      	lsls	r1, r1, #4
 8000e94:	430a      	orrs	r2, r1
 8000e96:	619a      	str	r2, [r3, #24]
 8000e98:	4b2f      	ldr	r3, [pc, #188]	; (8000f58 <HAL_TIM_Base_MspInit+0xf0>)
 8000e9a:	699a      	ldr	r2, [r3, #24]
 8000e9c:	2380      	movs	r3, #128	; 0x80
 8000e9e:	011b      	lsls	r3, r3, #4
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
 8000ea4:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ea6:	e050      	b.n	8000f4a <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM2)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	2380      	movs	r3, #128	; 0x80
 8000eae:	05db      	lsls	r3, r3, #23
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d10c      	bne.n	8000ece <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eb4:	4b28      	ldr	r3, [pc, #160]	; (8000f58 <HAL_TIM_Base_MspInit+0xf0>)
 8000eb6:	69da      	ldr	r2, [r3, #28]
 8000eb8:	4b27      	ldr	r3, [pc, #156]	; (8000f58 <HAL_TIM_Base_MspInit+0xf0>)
 8000eba:	2101      	movs	r1, #1
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	61da      	str	r2, [r3, #28]
 8000ec0:	4b25      	ldr	r3, [pc, #148]	; (8000f58 <HAL_TIM_Base_MspInit+0xf0>)
 8000ec2:	69db      	ldr	r3, [r3, #28]
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	697b      	ldr	r3, [r7, #20]
}
 8000ecc:	e03d      	b.n	8000f4a <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM3)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a22      	ldr	r2, [pc, #136]	; (8000f5c <HAL_TIM_Base_MspInit+0xf4>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d138      	bne.n	8000f4a <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ed8:	4b1f      	ldr	r3, [pc, #124]	; (8000f58 <HAL_TIM_Base_MspInit+0xf0>)
 8000eda:	69da      	ldr	r2, [r3, #28]
 8000edc:	4b1e      	ldr	r3, [pc, #120]	; (8000f58 <HAL_TIM_Base_MspInit+0xf0>)
 8000ede:	2102      	movs	r1, #2
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	61da      	str	r2, [r3, #28]
 8000ee4:	4b1c      	ldr	r3, [pc, #112]	; (8000f58 <HAL_TIM_Base_MspInit+0xf0>)
 8000ee6:	69db      	ldr	r3, [r3, #28]
 8000ee8:	2202      	movs	r2, #2
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
 8000eee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef0:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <HAL_TIM_Base_MspInit+0xf0>)
 8000ef2:	695a      	ldr	r2, [r3, #20]
 8000ef4:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <HAL_TIM_Base_MspInit+0xf0>)
 8000ef6:	2180      	movs	r1, #128	; 0x80
 8000ef8:	0289      	lsls	r1, r1, #10
 8000efa:	430a      	orrs	r2, r1
 8000efc:	615a      	str	r2, [r3, #20]
 8000efe:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <HAL_TIM_Base_MspInit+0xf0>)
 8000f00:	695a      	ldr	r2, [r3, #20]
 8000f02:	2380      	movs	r3, #128	; 0x80
 8000f04:	029b      	lsls	r3, r3, #10
 8000f06:	4013      	ands	r3, r2
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f0c:	211c      	movs	r1, #28
 8000f0e:	187b      	adds	r3, r7, r1
 8000f10:	22c0      	movs	r2, #192	; 0xc0
 8000f12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f14:	187b      	adds	r3, r7, r1
 8000f16:	2202      	movs	r2, #2
 8000f18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	187b      	adds	r3, r7, r1
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	187b      	adds	r3, r7, r1
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000f26:	187b      	adds	r3, r7, r1
 8000f28:	2201      	movs	r2, #1
 8000f2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2c:	187a      	adds	r2, r7, r1
 8000f2e:	2390      	movs	r3, #144	; 0x90
 8000f30:	05db      	lsls	r3, r3, #23
 8000f32:	0011      	movs	r1, r2
 8000f34:	0018      	movs	r0, r3
 8000f36:	f001 f83b 	bl	8001fb0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	2010      	movs	r0, #16
 8000f40:	f000 ff86 	bl	8001e50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f44:	2010      	movs	r0, #16
 8000f46:	f000 ff98 	bl	8001e7a <HAL_NVIC_EnableIRQ>
}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	b00c      	add	sp, #48	; 0x30
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	40012c00 	.word	0x40012c00
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	40000400 	.word	0x40000400

08000f60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f60:	b590      	push	{r4, r7, lr}
 8000f62:	b08b      	sub	sp, #44	; 0x2c
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	2414      	movs	r4, #20
 8000f6a:	193b      	adds	r3, r7, r4
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	2314      	movs	r3, #20
 8000f70:	001a      	movs	r2, r3
 8000f72:	2100      	movs	r1, #0
 8000f74:	f004 fa46 	bl	8005404 <memset>
  if(htim->Instance==TIM1)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a3f      	ldr	r2, [pc, #252]	; (800107c <HAL_TIM_MspPostInit+0x11c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d126      	bne.n	8000fd0 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f82:	4b3f      	ldr	r3, [pc, #252]	; (8001080 <HAL_TIM_MspPostInit+0x120>)
 8000f84:	695a      	ldr	r2, [r3, #20]
 8000f86:	4b3e      	ldr	r3, [pc, #248]	; (8001080 <HAL_TIM_MspPostInit+0x120>)
 8000f88:	2180      	movs	r1, #128	; 0x80
 8000f8a:	0289      	lsls	r1, r1, #10
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	615a      	str	r2, [r3, #20]
 8000f90:	4b3b      	ldr	r3, [pc, #236]	; (8001080 <HAL_TIM_MspPostInit+0x120>)
 8000f92:	695a      	ldr	r2, [r3, #20]
 8000f94:	2380      	movs	r3, #128	; 0x80
 8000f96:	029b      	lsls	r3, r3, #10
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000f9e:	193b      	adds	r3, r7, r4
 8000fa0:	22e0      	movs	r2, #224	; 0xe0
 8000fa2:	00d2      	lsls	r2, r2, #3
 8000fa4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	0021      	movs	r1, r4
 8000fa8:	187b      	adds	r3, r7, r1
 8000faa:	2202      	movs	r2, #2
 8000fac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	187b      	adds	r3, r7, r1
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	187b      	adds	r3, r7, r1
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000fba:	187b      	adds	r3, r7, r1
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc0:	187a      	adds	r2, r7, r1
 8000fc2:	2390      	movs	r3, #144	; 0x90
 8000fc4:	05db      	lsls	r3, r3, #23
 8000fc6:	0011      	movs	r1, r2
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f000 fff1 	bl	8001fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000fce:	e050      	b.n	8001072 <HAL_TIM_MspPostInit+0x112>
  else if(htim->Instance==TIM2)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	2380      	movs	r3, #128	; 0x80
 8000fd6:	05db      	lsls	r3, r3, #23
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d14a      	bne.n	8001072 <HAL_TIM_MspPostInit+0x112>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fdc:	4b28      	ldr	r3, [pc, #160]	; (8001080 <HAL_TIM_MspPostInit+0x120>)
 8000fde:	695a      	ldr	r2, [r3, #20]
 8000fe0:	4b27      	ldr	r3, [pc, #156]	; (8001080 <HAL_TIM_MspPostInit+0x120>)
 8000fe2:	2180      	movs	r1, #128	; 0x80
 8000fe4:	0289      	lsls	r1, r1, #10
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	615a      	str	r2, [r3, #20]
 8000fea:	4b25      	ldr	r3, [pc, #148]	; (8001080 <HAL_TIM_MspPostInit+0x120>)
 8000fec:	695a      	ldr	r2, [r3, #20]
 8000fee:	2380      	movs	r3, #128	; 0x80
 8000ff0:	029b      	lsls	r3, r3, #10
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff8:	4b21      	ldr	r3, [pc, #132]	; (8001080 <HAL_TIM_MspPostInit+0x120>)
 8000ffa:	695a      	ldr	r2, [r3, #20]
 8000ffc:	4b20      	ldr	r3, [pc, #128]	; (8001080 <HAL_TIM_MspPostInit+0x120>)
 8000ffe:	2180      	movs	r1, #128	; 0x80
 8001000:	02c9      	lsls	r1, r1, #11
 8001002:	430a      	orrs	r2, r1
 8001004:	615a      	str	r2, [r3, #20]
 8001006:	4b1e      	ldr	r3, [pc, #120]	; (8001080 <HAL_TIM_MspPostInit+0x120>)
 8001008:	695a      	ldr	r2, [r3, #20]
 800100a:	2380      	movs	r3, #128	; 0x80
 800100c:	02db      	lsls	r3, r3, #11
 800100e:	4013      	ands	r3, r2
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001014:	2114      	movs	r1, #20
 8001016:	187b      	adds	r3, r7, r1
 8001018:	2280      	movs	r2, #128	; 0x80
 800101a:	0212      	lsls	r2, r2, #8
 800101c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	000c      	movs	r4, r1
 8001020:	193b      	adds	r3, r7, r4
 8001022:	2202      	movs	r2, #2
 8001024:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	193b      	adds	r3, r7, r4
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	193b      	adds	r3, r7, r4
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001032:	193b      	adds	r3, r7, r4
 8001034:	2202      	movs	r2, #2
 8001036:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001038:	193a      	adds	r2, r7, r4
 800103a:	2390      	movs	r3, #144	; 0x90
 800103c:	05db      	lsls	r3, r3, #23
 800103e:	0011      	movs	r1, r2
 8001040:	0018      	movs	r0, r3
 8001042:	f000 ffb5 	bl	8001fb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001046:	0021      	movs	r1, r4
 8001048:	187b      	adds	r3, r7, r1
 800104a:	2208      	movs	r2, #8
 800104c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	187b      	adds	r3, r7, r1
 8001050:	2202      	movs	r2, #2
 8001052:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	187b      	adds	r3, r7, r1
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	187b      	adds	r3, r7, r1
 800105c:	2200      	movs	r2, #0
 800105e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001060:	187b      	adds	r3, r7, r1
 8001062:	2202      	movs	r2, #2
 8001064:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001066:	187b      	adds	r3, r7, r1
 8001068:	4a06      	ldr	r2, [pc, #24]	; (8001084 <HAL_TIM_MspPostInit+0x124>)
 800106a:	0019      	movs	r1, r3
 800106c:	0010      	movs	r0, r2
 800106e:	f000 ff9f 	bl	8001fb0 <HAL_GPIO_Init>
}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	46bd      	mov	sp, r7
 8001076:	b00b      	add	sp, #44	; 0x2c
 8001078:	bd90      	pop	{r4, r7, pc}
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	40012c00 	.word	0x40012c00
 8001080:	40021000 	.word	0x40021000
 8001084:	48000400 	.word	0x48000400

08001088 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001088:	b590      	push	{r4, r7, lr}
 800108a:	b08b      	sub	sp, #44	; 0x2c
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	2414      	movs	r4, #20
 8001092:	193b      	adds	r3, r7, r4
 8001094:	0018      	movs	r0, r3
 8001096:	2314      	movs	r3, #20
 8001098:	001a      	movs	r2, r3
 800109a:	2100      	movs	r1, #0
 800109c:	f004 f9b2 	bl	8005404 <memset>
  if(huart->Instance==USART2)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a20      	ldr	r2, [pc, #128]	; (8001128 <HAL_UART_MspInit+0xa0>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d13a      	bne.n	8001120 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010aa:	4b20      	ldr	r3, [pc, #128]	; (800112c <HAL_UART_MspInit+0xa4>)
 80010ac:	69da      	ldr	r2, [r3, #28]
 80010ae:	4b1f      	ldr	r3, [pc, #124]	; (800112c <HAL_UART_MspInit+0xa4>)
 80010b0:	2180      	movs	r1, #128	; 0x80
 80010b2:	0289      	lsls	r1, r1, #10
 80010b4:	430a      	orrs	r2, r1
 80010b6:	61da      	str	r2, [r3, #28]
 80010b8:	4b1c      	ldr	r3, [pc, #112]	; (800112c <HAL_UART_MspInit+0xa4>)
 80010ba:	69da      	ldr	r2, [r3, #28]
 80010bc:	2380      	movs	r3, #128	; 0x80
 80010be:	029b      	lsls	r3, r3, #10
 80010c0:	4013      	ands	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	4b19      	ldr	r3, [pc, #100]	; (800112c <HAL_UART_MspInit+0xa4>)
 80010c8:	695a      	ldr	r2, [r3, #20]
 80010ca:	4b18      	ldr	r3, [pc, #96]	; (800112c <HAL_UART_MspInit+0xa4>)
 80010cc:	2180      	movs	r1, #128	; 0x80
 80010ce:	0289      	lsls	r1, r1, #10
 80010d0:	430a      	orrs	r2, r1
 80010d2:	615a      	str	r2, [r3, #20]
 80010d4:	4b15      	ldr	r3, [pc, #84]	; (800112c <HAL_UART_MspInit+0xa4>)
 80010d6:	695a      	ldr	r2, [r3, #20]
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	029b      	lsls	r3, r3, #10
 80010dc:	4013      	ands	r3, r2
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010e2:	0021      	movs	r1, r4
 80010e4:	187b      	adds	r3, r7, r1
 80010e6:	220c      	movs	r2, #12
 80010e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	187b      	adds	r3, r7, r1
 80010ec:	2202      	movs	r2, #2
 80010ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	187b      	adds	r3, r7, r1
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010f6:	187b      	adds	r3, r7, r1
 80010f8:	2203      	movs	r2, #3
 80010fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80010fc:	187b      	adds	r3, r7, r1
 80010fe:	2201      	movs	r2, #1
 8001100:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001102:	187a      	adds	r2, r7, r1
 8001104:	2390      	movs	r3, #144	; 0x90
 8001106:	05db      	lsls	r3, r3, #23
 8001108:	0011      	movs	r1, r2
 800110a:	0018      	movs	r0, r3
 800110c:	f000 ff50 	bl	8001fb0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001110:	2200      	movs	r2, #0
 8001112:	2100      	movs	r1, #0
 8001114:	201c      	movs	r0, #28
 8001116:	f000 fe9b 	bl	8001e50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800111a:	201c      	movs	r0, #28
 800111c:	f000 fead 	bl	8001e7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001120:	46c0      	nop			; (mov r8, r8)
 8001122:	46bd      	mov	sp, r7
 8001124:	b00b      	add	sp, #44	; 0x2c
 8001126:	bd90      	pop	{r4, r7, pc}
 8001128:	40004400 	.word	0x40004400
 800112c:	40021000 	.word	0x40021000

08001130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001134:	e7fe      	b.n	8001134 <NMI_Handler+0x4>

08001136 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113a:	e7fe      	b.n	800113a <HardFault_Handler+0x4>

0800113c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001140:	46c0      	nop			; (mov r8, r8)
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001154:	f000 f8e2 	bl	800131c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001158:	46c0      	nop			; (mov r8, r8)
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	//FEB_Test_PWM();

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001164:	4b03      	ldr	r3, [pc, #12]	; (8001174 <TIM3_IRQHandler+0x14>)
 8001166:	0018      	movs	r0, r3
 8001168:	f002 f924 	bl	80033b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800116c:	46c0      	nop			; (mov r8, r8)
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	200001b0 	.word	0x200001b0

08001178 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800117c:	4b03      	ldr	r3, [pc, #12]	; (800118c <USART2_IRQHandler+0x14>)
 800117e:	0018      	movs	r0, r3
 8001180:	f003 fa70 	bl	8004664 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001184:	46c0      	nop			; (mov r8, r8)
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	200001f8 	.word	0x200001f8

08001190 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001198:	4a14      	ldr	r2, [pc, #80]	; (80011ec <_sbrk+0x5c>)
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <_sbrk+0x60>)
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011a4:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <_sbrk+0x64>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d102      	bne.n	80011b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <_sbrk+0x64>)
 80011ae:	4a12      	ldr	r2, [pc, #72]	; (80011f8 <_sbrk+0x68>)
 80011b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <_sbrk+0x64>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	18d3      	adds	r3, r2, r3
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d207      	bcs.n	80011d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011c0:	f004 f928 	bl	8005414 <__errno>
 80011c4:	0003      	movs	r3, r0
 80011c6:	220c      	movs	r2, #12
 80011c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ca:	2301      	movs	r3, #1
 80011cc:	425b      	negs	r3, r3
 80011ce:	e009      	b.n	80011e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <_sbrk+0x64>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011d6:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <_sbrk+0x64>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	18d2      	adds	r2, r2, r3
 80011de:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <_sbrk+0x64>)
 80011e0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80011e2:	68fb      	ldr	r3, [r7, #12]
}
 80011e4:	0018      	movs	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	b006      	add	sp, #24
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20001800 	.word	0x20001800
 80011f0:	00000400 	.word	0x00000400
 80011f4:	20000280 	.word	0x20000280
 80011f8:	200003d0 	.word	0x200003d0

080011fc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001200:	46c0      	nop			; (mov r8, r8)
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001208:	4813      	ldr	r0, [pc, #76]	; (8001258 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800120a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800120c:	f7ff fff6 	bl	80011fc <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001210:	4812      	ldr	r0, [pc, #72]	; (800125c <LoopForever+0x6>)
    LDR R1, [R0]
 8001212:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001214:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001216:	4a12      	ldr	r2, [pc, #72]	; (8001260 <LoopForever+0xa>)
    CMP R1, R2
 8001218:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800121a:	d105      	bne.n	8001228 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 800121c:	4811      	ldr	r0, [pc, #68]	; (8001264 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800121e:	4912      	ldr	r1, [pc, #72]	; (8001268 <LoopForever+0x12>)
    STR R1, [R0]
 8001220:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001222:	4812      	ldr	r0, [pc, #72]	; (800126c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001224:	4912      	ldr	r1, [pc, #72]	; (8001270 <LoopForever+0x1a>)
    STR R1, [R0]
 8001226:	6001      	str	r1, [r0, #0]

08001228 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001228:	4812      	ldr	r0, [pc, #72]	; (8001274 <LoopForever+0x1e>)
  ldr r1, =_edata
 800122a:	4913      	ldr	r1, [pc, #76]	; (8001278 <LoopForever+0x22>)
  ldr r2, =_sidata
 800122c:	4a13      	ldr	r2, [pc, #76]	; (800127c <LoopForever+0x26>)
  movs r3, #0
 800122e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001230:	e002      	b.n	8001238 <LoopCopyDataInit>

08001232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001236:	3304      	adds	r3, #4

08001238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800123a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800123c:	d3f9      	bcc.n	8001232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800123e:	4a10      	ldr	r2, [pc, #64]	; (8001280 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001240:	4c10      	ldr	r4, [pc, #64]	; (8001284 <LoopForever+0x2e>)
  movs r3, #0
 8001242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001244:	e001      	b.n	800124a <LoopFillZerobss>

08001246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001248:	3204      	adds	r2, #4

0800124a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800124a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800124c:	d3fb      	bcc.n	8001246 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800124e:	f004 f8e7 	bl	8005420 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001252:	f7ff f95d 	bl	8000510 <main>

08001256 <LoopForever>:

LoopForever:
    b LoopForever
 8001256:	e7fe      	b.n	8001256 <LoopForever>
  ldr   r0, =_estack
 8001258:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 800125c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001260:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001264:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8001268:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 800126c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001270:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001278:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800127c:	08005dc4 	.word	0x08005dc4
  ldr r2, =_sbss
 8001280:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001284:	200003d0 	.word	0x200003d0

08001288 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001288:	e7fe      	b.n	8001288 <ADC1_IRQHandler>
	...

0800128c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001290:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <HAL_Init+0x24>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_Init+0x24>)
 8001296:	2110      	movs	r1, #16
 8001298:	430a      	orrs	r2, r1
 800129a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800129c:	2003      	movs	r0, #3
 800129e:	f000 f809 	bl	80012b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a2:	f7ff fd29 	bl	8000cf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
}
 80012a8:	0018      	movs	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	40022000 	.word	0x40022000

080012b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012bc:	4b14      	ldr	r3, [pc, #80]	; (8001310 <HAL_InitTick+0x5c>)
 80012be:	681c      	ldr	r4, [r3, #0]
 80012c0:	4b14      	ldr	r3, [pc, #80]	; (8001314 <HAL_InitTick+0x60>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	0019      	movs	r1, r3
 80012c6:	23fa      	movs	r3, #250	; 0xfa
 80012c8:	0098      	lsls	r0, r3, #2
 80012ca:	f7fe ff27 	bl	800011c <__udivsi3>
 80012ce:	0003      	movs	r3, r0
 80012d0:	0019      	movs	r1, r3
 80012d2:	0020      	movs	r0, r4
 80012d4:	f7fe ff22 	bl	800011c <__udivsi3>
 80012d8:	0003      	movs	r3, r0
 80012da:	0018      	movs	r0, r3
 80012dc:	f000 fddd 	bl	8001e9a <HAL_SYSTICK_Config>
 80012e0:	1e03      	subs	r3, r0, #0
 80012e2:	d001      	beq.n	80012e8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e00f      	b.n	8001308 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b03      	cmp	r3, #3
 80012ec:	d80b      	bhi.n	8001306 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	2301      	movs	r3, #1
 80012f2:	425b      	negs	r3, r3
 80012f4:	2200      	movs	r2, #0
 80012f6:	0018      	movs	r0, r3
 80012f8:	f000 fdaa 	bl	8001e50 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_InitTick+0x64>)
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001302:	2300      	movs	r3, #0
 8001304:	e000      	b.n	8001308 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
}
 8001308:	0018      	movs	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	b003      	add	sp, #12
 800130e:	bd90      	pop	{r4, r7, pc}
 8001310:	20000000 	.word	0x20000000
 8001314:	20000008 	.word	0x20000008
 8001318:	20000004 	.word	0x20000004

0800131c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <HAL_IncTick+0x1c>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	001a      	movs	r2, r3
 8001326:	4b05      	ldr	r3, [pc, #20]	; (800133c <HAL_IncTick+0x20>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	18d2      	adds	r2, r2, r3
 800132c:	4b03      	ldr	r3, [pc, #12]	; (800133c <HAL_IncTick+0x20>)
 800132e:	601a      	str	r2, [r3, #0]
}
 8001330:	46c0      	nop			; (mov r8, r8)
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	20000008 	.word	0x20000008
 800133c:	20000284 	.word	0x20000284

08001340 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  return uwTick;
 8001344:	4b02      	ldr	r3, [pc, #8]	; (8001350 <HAL_GetTick+0x10>)
 8001346:	681b      	ldr	r3, [r3, #0]
}
 8001348:	0018      	movs	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	20000284 	.word	0x20000284

08001354 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800135c:	f7ff fff0 	bl	8001340 <HAL_GetTick>
 8001360:	0003      	movs	r3, r0
 8001362:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	3301      	adds	r3, #1
 800136c:	d005      	beq.n	800137a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800136e:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <HAL_Delay+0x44>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	001a      	movs	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	189b      	adds	r3, r3, r2
 8001378:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	f7ff ffe0 	bl	8001340 <HAL_GetTick>
 8001380:	0002      	movs	r2, r0
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	429a      	cmp	r2, r3
 800138a:	d8f7      	bhi.n	800137c <HAL_Delay+0x28>
  {
  }
}
 800138c:	46c0      	nop			; (mov r8, r8)
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	46bd      	mov	sp, r7
 8001392:	b004      	add	sp, #16
 8001394:	bd80      	pop	{r7, pc}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	20000008 	.word	0x20000008

0800139c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013a4:	230f      	movs	r3, #15
 80013a6:	18fb      	adds	r3, r7, r3
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e125      	b.n	8001606 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10a      	bne.n	80013d8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2234      	movs	r2, #52	; 0x34
 80013cc:	2100      	movs	r1, #0
 80013ce:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	0018      	movs	r0, r3
 80013d4:	f7ff fcb4 	bl	8000d40 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013dc:	2210      	movs	r2, #16
 80013de:	4013      	ands	r3, r2
 80013e0:	d000      	beq.n	80013e4 <HAL_ADC_Init+0x48>
 80013e2:	e103      	b.n	80015ec <HAL_ADC_Init+0x250>
 80013e4:	230f      	movs	r3, #15
 80013e6:	18fb      	adds	r3, r7, r3
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d000      	beq.n	80013f0 <HAL_ADC_Init+0x54>
 80013ee:	e0fd      	b.n	80015ec <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	2204      	movs	r2, #4
 80013f8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80013fa:	d000      	beq.n	80013fe <HAL_ADC_Init+0x62>
 80013fc:	e0f6      	b.n	80015ec <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001402:	4a83      	ldr	r2, [pc, #524]	; (8001610 <HAL_ADC_Init+0x274>)
 8001404:	4013      	ands	r3, r2
 8001406:	2202      	movs	r2, #2
 8001408:	431a      	orrs	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	2203      	movs	r2, #3
 8001416:	4013      	ands	r3, r2
 8001418:	2b01      	cmp	r3, #1
 800141a:	d112      	bne.n	8001442 <HAL_ADC_Init+0xa6>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2201      	movs	r2, #1
 8001424:	4013      	ands	r3, r2
 8001426:	2b01      	cmp	r3, #1
 8001428:	d009      	beq.n	800143e <HAL_ADC_Init+0xa2>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	68da      	ldr	r2, [r3, #12]
 8001430:	2380      	movs	r3, #128	; 0x80
 8001432:	021b      	lsls	r3, r3, #8
 8001434:	401a      	ands	r2, r3
 8001436:	2380      	movs	r3, #128	; 0x80
 8001438:	021b      	lsls	r3, r3, #8
 800143a:	429a      	cmp	r2, r3
 800143c:	d101      	bne.n	8001442 <HAL_ADC_Init+0xa6>
 800143e:	2301      	movs	r3, #1
 8001440:	e000      	b.n	8001444 <HAL_ADC_Init+0xa8>
 8001442:	2300      	movs	r3, #0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d116      	bne.n	8001476 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	2218      	movs	r2, #24
 8001450:	4393      	bics	r3, r2
 8001452:	0019      	movs	r1, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	430a      	orrs	r2, r1
 800145e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	0899      	lsrs	r1, r3, #2
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	430a      	orrs	r2, r1
 8001474:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	68da      	ldr	r2, [r3, #12]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4964      	ldr	r1, [pc, #400]	; (8001614 <HAL_ADC_Init+0x278>)
 8001482:	400a      	ands	r2, r1
 8001484:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	7e1b      	ldrb	r3, [r3, #24]
 800148a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	7e5b      	ldrb	r3, [r3, #25]
 8001490:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001492:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	7e9b      	ldrb	r3, [r3, #26]
 8001498:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800149a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d002      	beq.n	80014aa <HAL_ADC_Init+0x10e>
 80014a4:	2380      	movs	r3, #128	; 0x80
 80014a6:	015b      	lsls	r3, r3, #5
 80014a8:	e000      	b.n	80014ac <HAL_ADC_Init+0x110>
 80014aa:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80014ac:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80014b2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d101      	bne.n	80014c0 <HAL_ADC_Init+0x124>
 80014bc:	2304      	movs	r3, #4
 80014be:	e000      	b.n	80014c2 <HAL_ADC_Init+0x126>
 80014c0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80014c2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2124      	movs	r1, #36	; 0x24
 80014c8:	5c5b      	ldrb	r3, [r3, r1]
 80014ca:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80014cc:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	7edb      	ldrb	r3, [r3, #27]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d115      	bne.n	8001508 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	7e9b      	ldrb	r3, [r3, #26]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d105      	bne.n	80014f0 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	2280      	movs	r2, #128	; 0x80
 80014e8:	0252      	lsls	r2, r2, #9
 80014ea:	4313      	orrs	r3, r2
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	e00b      	b.n	8001508 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f4:	2220      	movs	r2, #32
 80014f6:	431a      	orrs	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001500:	2201      	movs	r2, #1
 8001502:	431a      	orrs	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69da      	ldr	r2, [r3, #28]
 800150c:	23c2      	movs	r3, #194	; 0xc2
 800150e:	33ff      	adds	r3, #255	; 0xff
 8001510:	429a      	cmp	r2, r3
 8001512:	d007      	beq.n	8001524 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800151c:	4313      	orrs	r3, r2
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	4313      	orrs	r3, r2
 8001522:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	68d9      	ldr	r1, [r3, #12]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	68ba      	ldr	r2, [r7, #8]
 8001530:	430a      	orrs	r2, r1
 8001532:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001538:	2380      	movs	r3, #128	; 0x80
 800153a:	055b      	lsls	r3, r3, #21
 800153c:	429a      	cmp	r2, r3
 800153e:	d01b      	beq.n	8001578 <HAL_ADC_Init+0x1dc>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001544:	2b01      	cmp	r3, #1
 8001546:	d017      	beq.n	8001578 <HAL_ADC_Init+0x1dc>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154c:	2b02      	cmp	r3, #2
 800154e:	d013      	beq.n	8001578 <HAL_ADC_Init+0x1dc>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001554:	2b03      	cmp	r3, #3
 8001556:	d00f      	beq.n	8001578 <HAL_ADC_Init+0x1dc>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155c:	2b04      	cmp	r3, #4
 800155e:	d00b      	beq.n	8001578 <HAL_ADC_Init+0x1dc>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001564:	2b05      	cmp	r3, #5
 8001566:	d007      	beq.n	8001578 <HAL_ADC_Init+0x1dc>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156c:	2b06      	cmp	r3, #6
 800156e:	d003      	beq.n	8001578 <HAL_ADC_Init+0x1dc>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001574:	2b07      	cmp	r3, #7
 8001576:	d112      	bne.n	800159e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	695a      	ldr	r2, [r3, #20]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2107      	movs	r1, #7
 8001584:	438a      	bics	r2, r1
 8001586:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6959      	ldr	r1, [r3, #20]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001592:	2207      	movs	r2, #7
 8001594:	401a      	ands	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	430a      	orrs	r2, r1
 800159c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	4a1c      	ldr	r2, [pc, #112]	; (8001618 <HAL_ADC_Init+0x27c>)
 80015a6:	4013      	ands	r3, r2
 80015a8:	68ba      	ldr	r2, [r7, #8]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d10b      	bne.n	80015c6 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015b8:	2203      	movs	r2, #3
 80015ba:	4393      	bics	r3, r2
 80015bc:	2201      	movs	r2, #1
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80015c4:	e01c      	b.n	8001600 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ca:	2212      	movs	r2, #18
 80015cc:	4393      	bics	r3, r2
 80015ce:	2210      	movs	r2, #16
 80015d0:	431a      	orrs	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015da:	2201      	movs	r2, #1
 80015dc:	431a      	orrs	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80015e2:	230f      	movs	r3, #15
 80015e4:	18fb      	adds	r3, r7, r3
 80015e6:	2201      	movs	r2, #1
 80015e8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80015ea:	e009      	b.n	8001600 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015f0:	2210      	movs	r2, #16
 80015f2:	431a      	orrs	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80015f8:	230f      	movs	r3, #15
 80015fa:	18fb      	adds	r3, r7, r3
 80015fc:	2201      	movs	r2, #1
 80015fe:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001600:	230f      	movs	r3, #15
 8001602:	18fb      	adds	r3, r7, r3
 8001604:	781b      	ldrb	r3, [r3, #0]
}
 8001606:	0018      	movs	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	b004      	add	sp, #16
 800160c:	bd80      	pop	{r7, pc}
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	fffffefd 	.word	0xfffffefd
 8001614:	fffe0219 	.word	0xfffe0219
 8001618:	833fffe7 	.word	0x833fffe7

0800161c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001626:	230f      	movs	r3, #15
 8001628:	18fb      	adds	r3, r7, r3
 800162a:	2200      	movs	r2, #0
 800162c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001636:	2380      	movs	r3, #128	; 0x80
 8001638:	055b      	lsls	r3, r3, #21
 800163a:	429a      	cmp	r2, r3
 800163c:	d011      	beq.n	8001662 <HAL_ADC_ConfigChannel+0x46>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001642:	2b01      	cmp	r3, #1
 8001644:	d00d      	beq.n	8001662 <HAL_ADC_ConfigChannel+0x46>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164a:	2b02      	cmp	r3, #2
 800164c:	d009      	beq.n	8001662 <HAL_ADC_ConfigChannel+0x46>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001652:	2b03      	cmp	r3, #3
 8001654:	d005      	beq.n	8001662 <HAL_ADC_ConfigChannel+0x46>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165a:	2b04      	cmp	r3, #4
 800165c:	d001      	beq.n	8001662 <HAL_ADC_ConfigChannel+0x46>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2234      	movs	r2, #52	; 0x34
 8001666:	5c9b      	ldrb	r3, [r3, r2]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d101      	bne.n	8001670 <HAL_ADC_ConfigChannel+0x54>
 800166c:	2302      	movs	r3, #2
 800166e:	e0d0      	b.n	8001812 <HAL_ADC_ConfigChannel+0x1f6>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2234      	movs	r2, #52	; 0x34
 8001674:	2101      	movs	r1, #1
 8001676:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	2204      	movs	r2, #4
 8001680:	4013      	ands	r3, r2
 8001682:	d000      	beq.n	8001686 <HAL_ADC_ConfigChannel+0x6a>
 8001684:	e0b4      	b.n	80017f0 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	4a64      	ldr	r2, [pc, #400]	; (800181c <HAL_ADC_ConfigChannel+0x200>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d100      	bne.n	8001692 <HAL_ADC_ConfigChannel+0x76>
 8001690:	e082      	b.n	8001798 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2201      	movs	r2, #1
 800169e:	409a      	lsls	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	430a      	orrs	r2, r1
 80016a6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016ac:	2380      	movs	r3, #128	; 0x80
 80016ae:	055b      	lsls	r3, r3, #21
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d037      	beq.n	8001724 <HAL_ADC_ConfigChannel+0x108>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d033      	beq.n	8001724 <HAL_ADC_ConfigChannel+0x108>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d02f      	beq.n	8001724 <HAL_ADC_ConfigChannel+0x108>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c8:	2b03      	cmp	r3, #3
 80016ca:	d02b      	beq.n	8001724 <HAL_ADC_ConfigChannel+0x108>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d027      	beq.n	8001724 <HAL_ADC_ConfigChannel+0x108>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d8:	2b05      	cmp	r3, #5
 80016da:	d023      	beq.n	8001724 <HAL_ADC_ConfigChannel+0x108>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e0:	2b06      	cmp	r3, #6
 80016e2:	d01f      	beq.n	8001724 <HAL_ADC_ConfigChannel+0x108>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e8:	2b07      	cmp	r3, #7
 80016ea:	d01b      	beq.n	8001724 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	2107      	movs	r1, #7
 80016f8:	400b      	ands	r3, r1
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d012      	beq.n	8001724 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	695a      	ldr	r2, [r3, #20]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2107      	movs	r1, #7
 800170a:	438a      	bics	r2, r1
 800170c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6959      	ldr	r1, [r3, #20]
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	2207      	movs	r2, #7
 800171a:	401a      	ands	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	430a      	orrs	r2, r1
 8001722:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b10      	cmp	r3, #16
 800172a:	d007      	beq.n	800173c <HAL_ADC_ConfigChannel+0x120>
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b11      	cmp	r3, #17
 8001732:	d003      	beq.n	800173c <HAL_ADC_ConfigChannel+0x120>
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b12      	cmp	r3, #18
 800173a:	d163      	bne.n	8001804 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800173c:	4b38      	ldr	r3, [pc, #224]	; (8001820 <HAL_ADC_ConfigChannel+0x204>)
 800173e:	6819      	ldr	r1, [r3, #0]
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b10      	cmp	r3, #16
 8001746:	d009      	beq.n	800175c <HAL_ADC_ConfigChannel+0x140>
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b11      	cmp	r3, #17
 800174e:	d102      	bne.n	8001756 <HAL_ADC_ConfigChannel+0x13a>
 8001750:	2380      	movs	r3, #128	; 0x80
 8001752:	03db      	lsls	r3, r3, #15
 8001754:	e004      	b.n	8001760 <HAL_ADC_ConfigChannel+0x144>
 8001756:	2380      	movs	r3, #128	; 0x80
 8001758:	045b      	lsls	r3, r3, #17
 800175a:	e001      	b.n	8001760 <HAL_ADC_ConfigChannel+0x144>
 800175c:	2380      	movs	r3, #128	; 0x80
 800175e:	041b      	lsls	r3, r3, #16
 8001760:	4a2f      	ldr	r2, [pc, #188]	; (8001820 <HAL_ADC_ConfigChannel+0x204>)
 8001762:	430b      	orrs	r3, r1
 8001764:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b10      	cmp	r3, #16
 800176c:	d14a      	bne.n	8001804 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800176e:	4b2d      	ldr	r3, [pc, #180]	; (8001824 <HAL_ADC_ConfigChannel+0x208>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	492d      	ldr	r1, [pc, #180]	; (8001828 <HAL_ADC_ConfigChannel+0x20c>)
 8001774:	0018      	movs	r0, r3
 8001776:	f7fe fcd1 	bl	800011c <__udivsi3>
 800177a:	0003      	movs	r3, r0
 800177c:	001a      	movs	r2, r3
 800177e:	0013      	movs	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	189b      	adds	r3, r3, r2
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001788:	e002      	b.n	8001790 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	3b01      	subs	r3, #1
 800178e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f9      	bne.n	800178a <HAL_ADC_ConfigChannel+0x16e>
 8001796:	e035      	b.n	8001804 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2101      	movs	r1, #1
 80017a4:	4099      	lsls	r1, r3
 80017a6:	000b      	movs	r3, r1
 80017a8:	43d9      	mvns	r1, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	400a      	ands	r2, r1
 80017b0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b10      	cmp	r3, #16
 80017b8:	d007      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x1ae>
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2b11      	cmp	r3, #17
 80017c0:	d003      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x1ae>
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2b12      	cmp	r3, #18
 80017c8:	d11c      	bne.n	8001804 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80017ca:	4b15      	ldr	r3, [pc, #84]	; (8001820 <HAL_ADC_ConfigChannel+0x204>)
 80017cc:	6819      	ldr	r1, [r3, #0]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2b10      	cmp	r3, #16
 80017d4:	d007      	beq.n	80017e6 <HAL_ADC_ConfigChannel+0x1ca>
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2b11      	cmp	r3, #17
 80017dc:	d101      	bne.n	80017e2 <HAL_ADC_ConfigChannel+0x1c6>
 80017de:	4b13      	ldr	r3, [pc, #76]	; (800182c <HAL_ADC_ConfigChannel+0x210>)
 80017e0:	e002      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x1cc>
 80017e2:	4b13      	ldr	r3, [pc, #76]	; (8001830 <HAL_ADC_ConfigChannel+0x214>)
 80017e4:	e000      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x1cc>
 80017e6:	4b13      	ldr	r3, [pc, #76]	; (8001834 <HAL_ADC_ConfigChannel+0x218>)
 80017e8:	4a0d      	ldr	r2, [pc, #52]	; (8001820 <HAL_ADC_ConfigChannel+0x204>)
 80017ea:	400b      	ands	r3, r1
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	e009      	b.n	8001804 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f4:	2220      	movs	r2, #32
 80017f6:	431a      	orrs	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80017fc:	230f      	movs	r3, #15
 80017fe:	18fb      	adds	r3, r7, r3
 8001800:	2201      	movs	r2, #1
 8001802:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2234      	movs	r2, #52	; 0x34
 8001808:	2100      	movs	r1, #0
 800180a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800180c:	230f      	movs	r3, #15
 800180e:	18fb      	adds	r3, r7, r3
 8001810:	781b      	ldrb	r3, [r3, #0]
}
 8001812:	0018      	movs	r0, r3
 8001814:	46bd      	mov	sp, r7
 8001816:	b004      	add	sp, #16
 8001818:	bd80      	pop	{r7, pc}
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	00001001 	.word	0x00001001
 8001820:	40012708 	.word	0x40012708
 8001824:	20000000 	.word	0x20000000
 8001828:	000f4240 	.word	0x000f4240
 800182c:	ffbfffff 	.word	0xffbfffff
 8001830:	feffffff 	.word	0xfeffffff
 8001834:	ff7fffff 	.word	0xff7fffff

08001838 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e0f0      	b.n	8001a2c <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2220      	movs	r2, #32
 800184e:	5c9b      	ldrb	r3, [r3, r2]
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d103      	bne.n	800185e <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	0018      	movs	r0, r3
 800185a:	f7ff fab7 	bl	8000dcc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2101      	movs	r1, #1
 800186a:	430a      	orrs	r2, r1
 800186c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800186e:	f7ff fd67 	bl	8001340 <HAL_GetTick>
 8001872:	0003      	movs	r3, r0
 8001874:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001876:	e013      	b.n	80018a0 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001878:	f7ff fd62 	bl	8001340 <HAL_GetTick>
 800187c:	0002      	movs	r2, r0
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b0a      	cmp	r3, #10
 8001884:	d90c      	bls.n	80018a0 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188a:	2280      	movs	r2, #128	; 0x80
 800188c:	0292      	lsls	r2, r2, #10
 800188e:	431a      	orrs	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2220      	movs	r2, #32
 8001898:	2105      	movs	r1, #5
 800189a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e0c5      	b.n	8001a2c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	4013      	ands	r3, r2
 80018aa:	d0e5      	beq.n	8001878 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2102      	movs	r1, #2
 80018b8:	438a      	bics	r2, r1
 80018ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018bc:	f7ff fd40 	bl	8001340 <HAL_GetTick>
 80018c0:	0003      	movs	r3, r0
 80018c2:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018c4:	e013      	b.n	80018ee <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018c6:	f7ff fd3b 	bl	8001340 <HAL_GetTick>
 80018ca:	0002      	movs	r2, r0
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b0a      	cmp	r3, #10
 80018d2:	d90c      	bls.n	80018ee <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d8:	2280      	movs	r2, #128	; 0x80
 80018da:	0292      	lsls	r2, r2, #10
 80018dc:	431a      	orrs	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2220      	movs	r2, #32
 80018e6:	2105      	movs	r1, #5
 80018e8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e09e      	b.n	8001a2c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2202      	movs	r2, #2
 80018f6:	4013      	ands	r3, r2
 80018f8:	d1e5      	bne.n	80018c6 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	7e1b      	ldrb	r3, [r3, #24]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d108      	bne.n	8001914 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2180      	movs	r1, #128	; 0x80
 800190e:	430a      	orrs	r2, r1
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	e007      	b.n	8001924 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2180      	movs	r1, #128	; 0x80
 8001920:	438a      	bics	r2, r1
 8001922:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	7e5b      	ldrb	r3, [r3, #25]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d108      	bne.n	800193e <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2140      	movs	r1, #64	; 0x40
 8001938:	430a      	orrs	r2, r1
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	e007      	b.n	800194e <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2140      	movs	r1, #64	; 0x40
 800194a:	438a      	bics	r2, r1
 800194c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	7e9b      	ldrb	r3, [r3, #26]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d108      	bne.n	8001968 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2120      	movs	r1, #32
 8001962:	430a      	orrs	r2, r1
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	e007      	b.n	8001978 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2120      	movs	r1, #32
 8001974:	438a      	bics	r2, r1
 8001976:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	7edb      	ldrb	r3, [r3, #27]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d108      	bne.n	8001992 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2110      	movs	r1, #16
 800198c:	438a      	bics	r2, r1
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	e007      	b.n	80019a2 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2110      	movs	r1, #16
 800199e:	430a      	orrs	r2, r1
 80019a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7f1b      	ldrb	r3, [r3, #28]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d108      	bne.n	80019bc <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2108      	movs	r1, #8
 80019b6:	430a      	orrs	r2, r1
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	e007      	b.n	80019cc <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2108      	movs	r1, #8
 80019c8:	438a      	bics	r2, r1
 80019ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	7f5b      	ldrb	r3, [r3, #29]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d108      	bne.n	80019e6 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2104      	movs	r1, #4
 80019e0:	430a      	orrs	r2, r1
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	e007      	b.n	80019f6 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2104      	movs	r1, #4
 80019f2:	438a      	bics	r2, r1
 80019f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	431a      	orrs	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	431a      	orrs	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	0011      	movs	r1, r2
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	1e5a      	subs	r2, r3, #1
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2220      	movs	r2, #32
 8001a26:	2101      	movs	r1, #1
 8001a28:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	b004      	add	sp, #16
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a44:	2013      	movs	r0, #19
 8001a46:	183b      	adds	r3, r7, r0
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	2120      	movs	r1, #32
 8001a4c:	5c52      	ldrb	r2, [r2, r1]
 8001a4e:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8001a50:	0002      	movs	r2, r0
 8001a52:	18bb      	adds	r3, r7, r2
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d004      	beq.n	8001a64 <HAL_CAN_ConfigFilter+0x30>
 8001a5a:	18bb      	adds	r3, r7, r2
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d000      	beq.n	8001a64 <HAL_CAN_ConfigFilter+0x30>
 8001a62:	e0cd      	b.n	8001c00 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	2380      	movs	r3, #128	; 0x80
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	58d3      	ldr	r3, [r2, r3]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	0011      	movs	r1, r2
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	2380      	movs	r3, #128	; 0x80
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	221f      	movs	r2, #31
 8001a80:	4013      	ands	r3, r2
 8001a82:	2201      	movs	r2, #1
 8001a84:	409a      	lsls	r2, r3
 8001a86:	0013      	movs	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	2387      	movs	r3, #135	; 0x87
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	58d3      	ldr	r3, [r2, r3]
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	43d2      	mvns	r2, r2
 8001a96:	401a      	ands	r2, r3
 8001a98:	0011      	movs	r1, r2
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	2387      	movs	r3, #135	; 0x87
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d129      	bne.n	8001afe <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	2383      	movs	r3, #131	; 0x83
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	58d3      	ldr	r3, [r2, r3]
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	43d2      	mvns	r2, r2
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	0011      	movs	r1, r2
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	2383      	movs	r3, #131	; 0x83
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	041b      	lsls	r3, r3, #16
 8001ace:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ad4:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	3248      	adds	r2, #72	; 0x48
 8001ada:	00d2      	lsls	r2, r2, #3
 8001adc:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	041b      	lsls	r3, r3, #16
 8001aea:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001af0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001af2:	6979      	ldr	r1, [r7, #20]
 8001af4:	3348      	adds	r3, #72	; 0x48
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	18cb      	adds	r3, r1, r3
 8001afa:	3304      	adds	r3, #4
 8001afc:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d128      	bne.n	8001b58 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	2383      	movs	r3, #131	; 0x83
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	58d2      	ldr	r2, [r2, r3]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	431a      	orrs	r2, r3
 8001b12:	0011      	movs	r1, r2
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	2383      	movs	r3, #131	; 0x83
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	041b      	lsls	r3, r3, #16
 8001b28:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b2e:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	3248      	adds	r2, #72	; 0x48
 8001b34:	00d2      	lsls	r2, r2, #3
 8001b36:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	041b      	lsls	r3, r3, #16
 8001b44:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b4a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b4c:	6979      	ldr	r1, [r7, #20]
 8001b4e:	3348      	adds	r3, #72	; 0x48
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	18cb      	adds	r3, r1, r3
 8001b54:	3304      	adds	r3, #4
 8001b56:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d10c      	bne.n	8001b7a <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	2381      	movs	r3, #129	; 0x81
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	58d3      	ldr	r3, [r2, r3]
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	43d2      	mvns	r2, r2
 8001b6c:	401a      	ands	r2, r3
 8001b6e:	0011      	movs	r1, r2
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	2381      	movs	r3, #129	; 0x81
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	50d1      	str	r1, [r2, r3]
 8001b78:	e00a      	b.n	8001b90 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	2381      	movs	r3, #129	; 0x81
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	58d2      	ldr	r2, [r2, r3]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	431a      	orrs	r2, r3
 8001b86:	0011      	movs	r1, r2
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	2381      	movs	r3, #129	; 0x81
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10c      	bne.n	8001bb2 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	2385      	movs	r3, #133	; 0x85
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	58d3      	ldr	r3, [r2, r3]
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	43d2      	mvns	r2, r2
 8001ba4:	401a      	ands	r2, r3
 8001ba6:	0011      	movs	r1, r2
 8001ba8:	697a      	ldr	r2, [r7, #20]
 8001baa:	2385      	movs	r3, #133	; 0x85
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	50d1      	str	r1, [r2, r3]
 8001bb0:	e00a      	b.n	8001bc8 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	2385      	movs	r3, #133	; 0x85
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	58d2      	ldr	r2, [r2, r3]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	0011      	movs	r1, r2
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	2385      	movs	r3, #133	; 0x85
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d10a      	bne.n	8001be6 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	2387      	movs	r3, #135	; 0x87
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	58d2      	ldr	r2, [r2, r3]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	0011      	movs	r1, r2
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	2387      	movs	r3, #135	; 0x87
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	58d3      	ldr	r3, [r2, r3]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	4393      	bics	r3, r2
 8001bf2:	0019      	movs	r1, r3
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	2380      	movs	r3, #128	; 0x80
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	e007      	b.n	8001c10 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	2280      	movs	r2, #128	; 0x80
 8001c06:	02d2      	lsls	r2, r2, #11
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
  }
}
 8001c10:	0018      	movs	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	b006      	add	sp, #24
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2220      	movs	r2, #32
 8001c24:	5c9b      	ldrb	r3, [r3, r2]
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d12f      	bne.n	8001c8c <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2220      	movs	r2, #32
 8001c30:	2102      	movs	r1, #2
 8001c32:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2101      	movs	r1, #1
 8001c40:	438a      	bics	r2, r1
 8001c42:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c44:	f7ff fb7c 	bl	8001340 <HAL_GetTick>
 8001c48:	0003      	movs	r3, r0
 8001c4a:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c4c:	e013      	b.n	8001c76 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c4e:	f7ff fb77 	bl	8001340 <HAL_GetTick>
 8001c52:	0002      	movs	r2, r0
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b0a      	cmp	r3, #10
 8001c5a:	d90c      	bls.n	8001c76 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c60:	2280      	movs	r2, #128	; 0x80
 8001c62:	0292      	lsls	r2, r2, #10
 8001c64:	431a      	orrs	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2220      	movs	r2, #32
 8001c6e:	2105      	movs	r1, #5
 8001c70:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e012      	b.n	8001c9c <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	4013      	ands	r3, r2
 8001c80:	d1e5      	bne.n	8001c4e <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	e007      	b.n	8001c9c <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c90:	2280      	movs	r2, #128	; 0x80
 8001c92:	0312      	lsls	r2, r2, #12
 8001c94:	431a      	orrs	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
  }
}
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	b004      	add	sp, #16
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cae:	200f      	movs	r0, #15
 8001cb0:	183b      	adds	r3, r7, r0
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	2120      	movs	r1, #32
 8001cb6:	5c52      	ldrb	r2, [r2, r1]
 8001cb8:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001cba:	0002      	movs	r2, r0
 8001cbc:	18bb      	adds	r3, r7, r2
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d003      	beq.n	8001ccc <HAL_CAN_ActivateNotification+0x28>
 8001cc4:	18bb      	adds	r3, r7, r2
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d109      	bne.n	8001ce0 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6959      	ldr	r1, [r3, #20]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	e007      	b.n	8001cf0 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce4:	2280      	movs	r2, #128	; 0x80
 8001ce6:	02d2      	lsls	r2, r2, #11
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
  }
}
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	b004      	add	sp, #16
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	0002      	movs	r2, r0
 8001d00:	1dfb      	adds	r3, r7, #7
 8001d02:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d04:	1dfb      	adds	r3, r7, #7
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b7f      	cmp	r3, #127	; 0x7f
 8001d0a:	d809      	bhi.n	8001d20 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d0c:	1dfb      	adds	r3, r7, #7
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	001a      	movs	r2, r3
 8001d12:	231f      	movs	r3, #31
 8001d14:	401a      	ands	r2, r3
 8001d16:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <__NVIC_EnableIRQ+0x30>)
 8001d18:	2101      	movs	r1, #1
 8001d1a:	4091      	lsls	r1, r2
 8001d1c:	000a      	movs	r2, r1
 8001d1e:	601a      	str	r2, [r3, #0]
  }
}
 8001d20:	46c0      	nop			; (mov r8, r8)
 8001d22:	46bd      	mov	sp, r7
 8001d24:	b002      	add	sp, #8
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	e000e100 	.word	0xe000e100

08001d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d2c:	b590      	push	{r4, r7, lr}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	0002      	movs	r2, r0
 8001d34:	6039      	str	r1, [r7, #0]
 8001d36:	1dfb      	adds	r3, r7, #7
 8001d38:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d3a:	1dfb      	adds	r3, r7, #7
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	2b7f      	cmp	r3, #127	; 0x7f
 8001d40:	d828      	bhi.n	8001d94 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d42:	4a2f      	ldr	r2, [pc, #188]	; (8001e00 <__NVIC_SetPriority+0xd4>)
 8001d44:	1dfb      	adds	r3, r7, #7
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	b25b      	sxtb	r3, r3
 8001d4a:	089b      	lsrs	r3, r3, #2
 8001d4c:	33c0      	adds	r3, #192	; 0xc0
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	589b      	ldr	r3, [r3, r2]
 8001d52:	1dfa      	adds	r2, r7, #7
 8001d54:	7812      	ldrb	r2, [r2, #0]
 8001d56:	0011      	movs	r1, r2
 8001d58:	2203      	movs	r2, #3
 8001d5a:	400a      	ands	r2, r1
 8001d5c:	00d2      	lsls	r2, r2, #3
 8001d5e:	21ff      	movs	r1, #255	; 0xff
 8001d60:	4091      	lsls	r1, r2
 8001d62:	000a      	movs	r2, r1
 8001d64:	43d2      	mvns	r2, r2
 8001d66:	401a      	ands	r2, r3
 8001d68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	019b      	lsls	r3, r3, #6
 8001d6e:	22ff      	movs	r2, #255	; 0xff
 8001d70:	401a      	ands	r2, r3
 8001d72:	1dfb      	adds	r3, r7, #7
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	0018      	movs	r0, r3
 8001d78:	2303      	movs	r3, #3
 8001d7a:	4003      	ands	r3, r0
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d80:	481f      	ldr	r0, [pc, #124]	; (8001e00 <__NVIC_SetPriority+0xd4>)
 8001d82:	1dfb      	adds	r3, r7, #7
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	b25b      	sxtb	r3, r3
 8001d88:	089b      	lsrs	r3, r3, #2
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	33c0      	adds	r3, #192	; 0xc0
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001d92:	e031      	b.n	8001df8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d94:	4a1b      	ldr	r2, [pc, #108]	; (8001e04 <__NVIC_SetPriority+0xd8>)
 8001d96:	1dfb      	adds	r3, r7, #7
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	0019      	movs	r1, r3
 8001d9c:	230f      	movs	r3, #15
 8001d9e:	400b      	ands	r3, r1
 8001da0:	3b08      	subs	r3, #8
 8001da2:	089b      	lsrs	r3, r3, #2
 8001da4:	3306      	adds	r3, #6
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	18d3      	adds	r3, r2, r3
 8001daa:	3304      	adds	r3, #4
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	1dfa      	adds	r2, r7, #7
 8001db0:	7812      	ldrb	r2, [r2, #0]
 8001db2:	0011      	movs	r1, r2
 8001db4:	2203      	movs	r2, #3
 8001db6:	400a      	ands	r2, r1
 8001db8:	00d2      	lsls	r2, r2, #3
 8001dba:	21ff      	movs	r1, #255	; 0xff
 8001dbc:	4091      	lsls	r1, r2
 8001dbe:	000a      	movs	r2, r1
 8001dc0:	43d2      	mvns	r2, r2
 8001dc2:	401a      	ands	r2, r3
 8001dc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	019b      	lsls	r3, r3, #6
 8001dca:	22ff      	movs	r2, #255	; 0xff
 8001dcc:	401a      	ands	r2, r3
 8001dce:	1dfb      	adds	r3, r7, #7
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	4003      	ands	r3, r0
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ddc:	4809      	ldr	r0, [pc, #36]	; (8001e04 <__NVIC_SetPriority+0xd8>)
 8001dde:	1dfb      	adds	r3, r7, #7
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	001c      	movs	r4, r3
 8001de4:	230f      	movs	r3, #15
 8001de6:	4023      	ands	r3, r4
 8001de8:	3b08      	subs	r3, #8
 8001dea:	089b      	lsrs	r3, r3, #2
 8001dec:	430a      	orrs	r2, r1
 8001dee:	3306      	adds	r3, #6
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	18c3      	adds	r3, r0, r3
 8001df4:	3304      	adds	r3, #4
 8001df6:	601a      	str	r2, [r3, #0]
}
 8001df8:	46c0      	nop			; (mov r8, r8)
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	b003      	add	sp, #12
 8001dfe:	bd90      	pop	{r4, r7, pc}
 8001e00:	e000e100 	.word	0xe000e100
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	1e5a      	subs	r2, r3, #1
 8001e14:	2380      	movs	r3, #128	; 0x80
 8001e16:	045b      	lsls	r3, r3, #17
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d301      	bcc.n	8001e20 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e010      	b.n	8001e42 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e20:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <SysTick_Config+0x44>)
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	3a01      	subs	r2, #1
 8001e26:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e28:	2301      	movs	r3, #1
 8001e2a:	425b      	negs	r3, r3
 8001e2c:	2103      	movs	r1, #3
 8001e2e:	0018      	movs	r0, r3
 8001e30:	f7ff ff7c 	bl	8001d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e34:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <SysTick_Config+0x44>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e3a:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <SysTick_Config+0x44>)
 8001e3c:	2207      	movs	r2, #7
 8001e3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	0018      	movs	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	b002      	add	sp, #8
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	e000e010 	.word	0xe000e010

08001e50 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60b9      	str	r1, [r7, #8]
 8001e58:	607a      	str	r2, [r7, #4]
 8001e5a:	210f      	movs	r1, #15
 8001e5c:	187b      	adds	r3, r7, r1
 8001e5e:	1c02      	adds	r2, r0, #0
 8001e60:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	187b      	adds	r3, r7, r1
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	b25b      	sxtb	r3, r3
 8001e6a:	0011      	movs	r1, r2
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	f7ff ff5d 	bl	8001d2c <__NVIC_SetPriority>
}
 8001e72:	46c0      	nop			; (mov r8, r8)
 8001e74:	46bd      	mov	sp, r7
 8001e76:	b004      	add	sp, #16
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	0002      	movs	r2, r0
 8001e82:	1dfb      	adds	r3, r7, #7
 8001e84:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e86:	1dfb      	adds	r3, r7, #7
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	b25b      	sxtb	r3, r3
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	f7ff ff33 	bl	8001cf8 <__NVIC_EnableIRQ>
}
 8001e92:	46c0      	nop			; (mov r8, r8)
 8001e94:	46bd      	mov	sp, r7
 8001e96:	b002      	add	sp, #8
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	f7ff ffaf 	bl	8001e08 <SysTick_Config>
 8001eaa:	0003      	movs	r3, r0
}
 8001eac:	0018      	movs	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	b002      	add	sp, #8
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2221      	movs	r2, #33	; 0x21
 8001ec0:	5c9b      	ldrb	r3, [r3, r2]
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d008      	beq.n	8001eda <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2204      	movs	r2, #4
 8001ecc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2220      	movs	r2, #32
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e020      	b.n	8001f1c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	210e      	movs	r1, #14
 8001ee6:	438a      	bics	r2, r1
 8001ee8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	438a      	bics	r2, r1
 8001ef8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f02:	2101      	movs	r1, #1
 8001f04:	4091      	lsls	r1, r2
 8001f06:	000a      	movs	r2, r1
 8001f08:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2221      	movs	r2, #33	; 0x21
 8001f0e:	2101      	movs	r1, #1
 8001f10:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2220      	movs	r2, #32
 8001f16:	2100      	movs	r1, #0
 8001f18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	b002      	add	sp, #8
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f2c:	210f      	movs	r1, #15
 8001f2e:	187b      	adds	r3, r7, r1
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2221      	movs	r2, #33	; 0x21
 8001f38:	5c9b      	ldrb	r3, [r3, r2]
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d006      	beq.n	8001f4e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2204      	movs	r2, #4
 8001f44:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001f46:	187b      	adds	r3, r7, r1
 8001f48:	2201      	movs	r2, #1
 8001f4a:	701a      	strb	r2, [r3, #0]
 8001f4c:	e028      	b.n	8001fa0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	210e      	movs	r1, #14
 8001f5a:	438a      	bics	r2, r1
 8001f5c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2101      	movs	r1, #1
 8001f6a:	438a      	bics	r2, r1
 8001f6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f76:	2101      	movs	r1, #1
 8001f78:	4091      	lsls	r1, r2
 8001f7a:	000a      	movs	r2, r1
 8001f7c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2221      	movs	r2, #33	; 0x21
 8001f82:	2101      	movs	r1, #1
 8001f84:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2220      	movs	r2, #32
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d004      	beq.n	8001fa0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	0010      	movs	r0, r2
 8001f9e:	4798      	blx	r3
    }
  }
  return status;
 8001fa0:	230f      	movs	r3, #15
 8001fa2:	18fb      	adds	r3, r7, r3
 8001fa4:	781b      	ldrb	r3, [r3, #0]
}
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	b004      	add	sp, #16
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fbe:	e149      	b.n	8002254 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	4091      	lsls	r1, r2
 8001fca:	000a      	movs	r2, r1
 8001fcc:	4013      	ands	r3, r2
 8001fce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d100      	bne.n	8001fd8 <HAL_GPIO_Init+0x28>
 8001fd6:	e13a      	b.n	800224e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2203      	movs	r2, #3
 8001fde:	4013      	ands	r3, r2
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d005      	beq.n	8001ff0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2203      	movs	r2, #3
 8001fea:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d130      	bne.n	8002052 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	409a      	lsls	r2, r3
 8001ffe:	0013      	movs	r3, r2
 8002000:	43da      	mvns	r2, r3
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	4013      	ands	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	409a      	lsls	r2, r3
 8002012:	0013      	movs	r3, r2
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002026:	2201      	movs	r2, #1
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	409a      	lsls	r2, r3
 800202c:	0013      	movs	r3, r2
 800202e:	43da      	mvns	r2, r3
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4013      	ands	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	091b      	lsrs	r3, r3, #4
 800203c:	2201      	movs	r2, #1
 800203e:	401a      	ands	r2, r3
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	409a      	lsls	r2, r3
 8002044:	0013      	movs	r3, r2
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	4313      	orrs	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2203      	movs	r2, #3
 8002058:	4013      	ands	r3, r2
 800205a:	2b03      	cmp	r3, #3
 800205c:	d017      	beq.n	800208e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	2203      	movs	r2, #3
 800206a:	409a      	lsls	r2, r3
 800206c:	0013      	movs	r3, r2
 800206e:	43da      	mvns	r2, r3
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	4013      	ands	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	409a      	lsls	r2, r3
 8002080:	0013      	movs	r3, r2
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4313      	orrs	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2203      	movs	r2, #3
 8002094:	4013      	ands	r3, r2
 8002096:	2b02      	cmp	r3, #2
 8002098:	d123      	bne.n	80020e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	08da      	lsrs	r2, r3, #3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3208      	adds	r2, #8
 80020a2:	0092      	lsls	r2, r2, #2
 80020a4:	58d3      	ldr	r3, [r2, r3]
 80020a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	2207      	movs	r2, #7
 80020ac:	4013      	ands	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	220f      	movs	r2, #15
 80020b2:	409a      	lsls	r2, r3
 80020b4:	0013      	movs	r3, r2
 80020b6:	43da      	mvns	r2, r3
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	691a      	ldr	r2, [r3, #16]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	2107      	movs	r1, #7
 80020c6:	400b      	ands	r3, r1
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	409a      	lsls	r2, r3
 80020cc:	0013      	movs	r3, r2
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	08da      	lsrs	r2, r3, #3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3208      	adds	r2, #8
 80020dc:	0092      	lsls	r2, r2, #2
 80020de:	6939      	ldr	r1, [r7, #16]
 80020e0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	2203      	movs	r2, #3
 80020ee:	409a      	lsls	r2, r3
 80020f0:	0013      	movs	r3, r2
 80020f2:	43da      	mvns	r2, r3
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4013      	ands	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2203      	movs	r2, #3
 8002100:	401a      	ands	r2, r3
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	409a      	lsls	r2, r3
 8002108:	0013      	movs	r3, r2
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	23c0      	movs	r3, #192	; 0xc0
 800211c:	029b      	lsls	r3, r3, #10
 800211e:	4013      	ands	r3, r2
 8002120:	d100      	bne.n	8002124 <HAL_GPIO_Init+0x174>
 8002122:	e094      	b.n	800224e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002124:	4b51      	ldr	r3, [pc, #324]	; (800226c <HAL_GPIO_Init+0x2bc>)
 8002126:	699a      	ldr	r2, [r3, #24]
 8002128:	4b50      	ldr	r3, [pc, #320]	; (800226c <HAL_GPIO_Init+0x2bc>)
 800212a:	2101      	movs	r1, #1
 800212c:	430a      	orrs	r2, r1
 800212e:	619a      	str	r2, [r3, #24]
 8002130:	4b4e      	ldr	r3, [pc, #312]	; (800226c <HAL_GPIO_Init+0x2bc>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	2201      	movs	r2, #1
 8002136:	4013      	ands	r3, r2
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800213c:	4a4c      	ldr	r2, [pc, #304]	; (8002270 <HAL_GPIO_Init+0x2c0>)
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	089b      	lsrs	r3, r3, #2
 8002142:	3302      	adds	r3, #2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	589b      	ldr	r3, [r3, r2]
 8002148:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	2203      	movs	r2, #3
 800214e:	4013      	ands	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	220f      	movs	r2, #15
 8002154:	409a      	lsls	r2, r3
 8002156:	0013      	movs	r3, r2
 8002158:	43da      	mvns	r2, r3
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4013      	ands	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	2390      	movs	r3, #144	; 0x90
 8002164:	05db      	lsls	r3, r3, #23
 8002166:	429a      	cmp	r2, r3
 8002168:	d00d      	beq.n	8002186 <HAL_GPIO_Init+0x1d6>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a41      	ldr	r2, [pc, #260]	; (8002274 <HAL_GPIO_Init+0x2c4>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d007      	beq.n	8002182 <HAL_GPIO_Init+0x1d2>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a40      	ldr	r2, [pc, #256]	; (8002278 <HAL_GPIO_Init+0x2c8>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d101      	bne.n	800217e <HAL_GPIO_Init+0x1ce>
 800217a:	2302      	movs	r3, #2
 800217c:	e004      	b.n	8002188 <HAL_GPIO_Init+0x1d8>
 800217e:	2305      	movs	r3, #5
 8002180:	e002      	b.n	8002188 <HAL_GPIO_Init+0x1d8>
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <HAL_GPIO_Init+0x1d8>
 8002186:	2300      	movs	r3, #0
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	2103      	movs	r1, #3
 800218c:	400a      	ands	r2, r1
 800218e:	0092      	lsls	r2, r2, #2
 8002190:	4093      	lsls	r3, r2
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	4313      	orrs	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002198:	4935      	ldr	r1, [pc, #212]	; (8002270 <HAL_GPIO_Init+0x2c0>)
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	089b      	lsrs	r3, r3, #2
 800219e:	3302      	adds	r3, #2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021a6:	4b35      	ldr	r3, [pc, #212]	; (800227c <HAL_GPIO_Init+0x2cc>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	43da      	mvns	r2, r3
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	4013      	ands	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	2380      	movs	r3, #128	; 0x80
 80021bc:	035b      	lsls	r3, r3, #13
 80021be:	4013      	ands	r3, r2
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80021ca:	4b2c      	ldr	r3, [pc, #176]	; (800227c <HAL_GPIO_Init+0x2cc>)
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80021d0:	4b2a      	ldr	r3, [pc, #168]	; (800227c <HAL_GPIO_Init+0x2cc>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	43da      	mvns	r2, r3
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	4013      	ands	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	2380      	movs	r3, #128	; 0x80
 80021e6:	039b      	lsls	r3, r3, #14
 80021e8:	4013      	ands	r3, r2
 80021ea:	d003      	beq.n	80021f4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80021f4:	4b21      	ldr	r3, [pc, #132]	; (800227c <HAL_GPIO_Init+0x2cc>)
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80021fa:	4b20      	ldr	r3, [pc, #128]	; (800227c <HAL_GPIO_Init+0x2cc>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	43da      	mvns	r2, r3
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	4013      	ands	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	2380      	movs	r3, #128	; 0x80
 8002210:	029b      	lsls	r3, r3, #10
 8002212:	4013      	ands	r3, r2
 8002214:	d003      	beq.n	800221e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4313      	orrs	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800221e:	4b17      	ldr	r3, [pc, #92]	; (800227c <HAL_GPIO_Init+0x2cc>)
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002224:	4b15      	ldr	r3, [pc, #84]	; (800227c <HAL_GPIO_Init+0x2cc>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	43da      	mvns	r2, r3
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4013      	ands	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	2380      	movs	r3, #128	; 0x80
 800223a:	025b      	lsls	r3, r3, #9
 800223c:	4013      	ands	r3, r2
 800223e:	d003      	beq.n	8002248 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4313      	orrs	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002248:	4b0c      	ldr	r3, [pc, #48]	; (800227c <HAL_GPIO_Init+0x2cc>)
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	3301      	adds	r3, #1
 8002252:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	40da      	lsrs	r2, r3
 800225c:	1e13      	subs	r3, r2, #0
 800225e:	d000      	beq.n	8002262 <HAL_GPIO_Init+0x2b2>
 8002260:	e6ae      	b.n	8001fc0 <HAL_GPIO_Init+0x10>
  } 
}
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	46c0      	nop			; (mov r8, r8)
 8002266:	46bd      	mov	sp, r7
 8002268:	b006      	add	sp, #24
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40021000 	.word	0x40021000
 8002270:	40010000 	.word	0x40010000
 8002274:	48000400 	.word	0x48000400
 8002278:	48000800 	.word	0x48000800
 800227c:	40010400 	.word	0x40010400

08002280 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d102      	bne.n	8002294 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	f000 fb76 	bl	8002980 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2201      	movs	r2, #1
 800229a:	4013      	ands	r3, r2
 800229c:	d100      	bne.n	80022a0 <HAL_RCC_OscConfig+0x20>
 800229e:	e08e      	b.n	80023be <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80022a0:	4bc5      	ldr	r3, [pc, #788]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	220c      	movs	r2, #12
 80022a6:	4013      	ands	r3, r2
 80022a8:	2b04      	cmp	r3, #4
 80022aa:	d00e      	beq.n	80022ca <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022ac:	4bc2      	ldr	r3, [pc, #776]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	220c      	movs	r2, #12
 80022b2:	4013      	ands	r3, r2
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	d117      	bne.n	80022e8 <HAL_RCC_OscConfig+0x68>
 80022b8:	4bbf      	ldr	r3, [pc, #764]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	23c0      	movs	r3, #192	; 0xc0
 80022be:	025b      	lsls	r3, r3, #9
 80022c0:	401a      	ands	r2, r3
 80022c2:	2380      	movs	r3, #128	; 0x80
 80022c4:	025b      	lsls	r3, r3, #9
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d10e      	bne.n	80022e8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ca:	4bbb      	ldr	r3, [pc, #748]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	2380      	movs	r3, #128	; 0x80
 80022d0:	029b      	lsls	r3, r3, #10
 80022d2:	4013      	ands	r3, r2
 80022d4:	d100      	bne.n	80022d8 <HAL_RCC_OscConfig+0x58>
 80022d6:	e071      	b.n	80023bc <HAL_RCC_OscConfig+0x13c>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d000      	beq.n	80022e2 <HAL_RCC_OscConfig+0x62>
 80022e0:	e06c      	b.n	80023bc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	f000 fb4c 	bl	8002980 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d107      	bne.n	8002300 <HAL_RCC_OscConfig+0x80>
 80022f0:	4bb1      	ldr	r3, [pc, #708]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	4bb0      	ldr	r3, [pc, #704]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 80022f6:	2180      	movs	r1, #128	; 0x80
 80022f8:	0249      	lsls	r1, r1, #9
 80022fa:	430a      	orrs	r2, r1
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	e02f      	b.n	8002360 <HAL_RCC_OscConfig+0xe0>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10c      	bne.n	8002322 <HAL_RCC_OscConfig+0xa2>
 8002308:	4bab      	ldr	r3, [pc, #684]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4baa      	ldr	r3, [pc, #680]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 800230e:	49ab      	ldr	r1, [pc, #684]	; (80025bc <HAL_RCC_OscConfig+0x33c>)
 8002310:	400a      	ands	r2, r1
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	4ba8      	ldr	r3, [pc, #672]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	4ba7      	ldr	r3, [pc, #668]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 800231a:	49a9      	ldr	r1, [pc, #676]	; (80025c0 <HAL_RCC_OscConfig+0x340>)
 800231c:	400a      	ands	r2, r1
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	e01e      	b.n	8002360 <HAL_RCC_OscConfig+0xe0>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b05      	cmp	r3, #5
 8002328:	d10e      	bne.n	8002348 <HAL_RCC_OscConfig+0xc8>
 800232a:	4ba3      	ldr	r3, [pc, #652]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	4ba2      	ldr	r3, [pc, #648]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 8002330:	2180      	movs	r1, #128	; 0x80
 8002332:	02c9      	lsls	r1, r1, #11
 8002334:	430a      	orrs	r2, r1
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	4b9f      	ldr	r3, [pc, #636]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	4b9e      	ldr	r3, [pc, #632]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 800233e:	2180      	movs	r1, #128	; 0x80
 8002340:	0249      	lsls	r1, r1, #9
 8002342:	430a      	orrs	r2, r1
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	e00b      	b.n	8002360 <HAL_RCC_OscConfig+0xe0>
 8002348:	4b9b      	ldr	r3, [pc, #620]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4b9a      	ldr	r3, [pc, #616]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 800234e:	499b      	ldr	r1, [pc, #620]	; (80025bc <HAL_RCC_OscConfig+0x33c>)
 8002350:	400a      	ands	r2, r1
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	4b98      	ldr	r3, [pc, #608]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4b97      	ldr	r3, [pc, #604]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 800235a:	4999      	ldr	r1, [pc, #612]	; (80025c0 <HAL_RCC_OscConfig+0x340>)
 800235c:	400a      	ands	r2, r1
 800235e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d014      	beq.n	8002392 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002368:	f7fe ffea 	bl	8001340 <HAL_GetTick>
 800236c:	0003      	movs	r3, r0
 800236e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002372:	f7fe ffe5 	bl	8001340 <HAL_GetTick>
 8002376:	0002      	movs	r2, r0
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b64      	cmp	r3, #100	; 0x64
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e2fd      	b.n	8002980 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002384:	4b8c      	ldr	r3, [pc, #560]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	2380      	movs	r3, #128	; 0x80
 800238a:	029b      	lsls	r3, r3, #10
 800238c:	4013      	ands	r3, r2
 800238e:	d0f0      	beq.n	8002372 <HAL_RCC_OscConfig+0xf2>
 8002390:	e015      	b.n	80023be <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002392:	f7fe ffd5 	bl	8001340 <HAL_GetTick>
 8002396:	0003      	movs	r3, r0
 8002398:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800239c:	f7fe ffd0 	bl	8001340 <HAL_GetTick>
 80023a0:	0002      	movs	r2, r0
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b64      	cmp	r3, #100	; 0x64
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e2e8      	b.n	8002980 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ae:	4b82      	ldr	r3, [pc, #520]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	2380      	movs	r3, #128	; 0x80
 80023b4:	029b      	lsls	r3, r3, #10
 80023b6:	4013      	ands	r3, r2
 80023b8:	d1f0      	bne.n	800239c <HAL_RCC_OscConfig+0x11c>
 80023ba:	e000      	b.n	80023be <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023bc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2202      	movs	r2, #2
 80023c4:	4013      	ands	r3, r2
 80023c6:	d100      	bne.n	80023ca <HAL_RCC_OscConfig+0x14a>
 80023c8:	e06c      	b.n	80024a4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80023ca:	4b7b      	ldr	r3, [pc, #492]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	220c      	movs	r2, #12
 80023d0:	4013      	ands	r3, r2
 80023d2:	d00e      	beq.n	80023f2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80023d4:	4b78      	ldr	r3, [pc, #480]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	220c      	movs	r2, #12
 80023da:	4013      	ands	r3, r2
 80023dc:	2b08      	cmp	r3, #8
 80023de:	d11f      	bne.n	8002420 <HAL_RCC_OscConfig+0x1a0>
 80023e0:	4b75      	ldr	r3, [pc, #468]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	23c0      	movs	r3, #192	; 0xc0
 80023e6:	025b      	lsls	r3, r3, #9
 80023e8:	401a      	ands	r2, r3
 80023ea:	2380      	movs	r3, #128	; 0x80
 80023ec:	021b      	lsls	r3, r3, #8
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d116      	bne.n	8002420 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023f2:	4b71      	ldr	r3, [pc, #452]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2202      	movs	r2, #2
 80023f8:	4013      	ands	r3, r2
 80023fa:	d005      	beq.n	8002408 <HAL_RCC_OscConfig+0x188>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d001      	beq.n	8002408 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e2bb      	b.n	8002980 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002408:	4b6b      	ldr	r3, [pc, #428]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	22f8      	movs	r2, #248	; 0xf8
 800240e:	4393      	bics	r3, r2
 8002410:	0019      	movs	r1, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	00da      	lsls	r2, r3, #3
 8002418:	4b67      	ldr	r3, [pc, #412]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 800241a:	430a      	orrs	r2, r1
 800241c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800241e:	e041      	b.n	80024a4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d024      	beq.n	8002472 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002428:	4b63      	ldr	r3, [pc, #396]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	4b62      	ldr	r3, [pc, #392]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 800242e:	2101      	movs	r1, #1
 8002430:	430a      	orrs	r2, r1
 8002432:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002434:	f7fe ff84 	bl	8001340 <HAL_GetTick>
 8002438:	0003      	movs	r3, r0
 800243a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800243e:	f7fe ff7f 	bl	8001340 <HAL_GetTick>
 8002442:	0002      	movs	r2, r0
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e297      	b.n	8002980 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002450:	4b59      	ldr	r3, [pc, #356]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2202      	movs	r2, #2
 8002456:	4013      	ands	r3, r2
 8002458:	d0f1      	beq.n	800243e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800245a:	4b57      	ldr	r3, [pc, #348]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	22f8      	movs	r2, #248	; 0xf8
 8002460:	4393      	bics	r3, r2
 8002462:	0019      	movs	r1, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	00da      	lsls	r2, r3, #3
 800246a:	4b53      	ldr	r3, [pc, #332]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 800246c:	430a      	orrs	r2, r1
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	e018      	b.n	80024a4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002472:	4b51      	ldr	r3, [pc, #324]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	4b50      	ldr	r3, [pc, #320]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 8002478:	2101      	movs	r1, #1
 800247a:	438a      	bics	r2, r1
 800247c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247e:	f7fe ff5f 	bl	8001340 <HAL_GetTick>
 8002482:	0003      	movs	r3, r0
 8002484:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002488:	f7fe ff5a 	bl	8001340 <HAL_GetTick>
 800248c:	0002      	movs	r2, r0
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e272      	b.n	8002980 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800249a:	4b47      	ldr	r3, [pc, #284]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2202      	movs	r2, #2
 80024a0:	4013      	ands	r3, r2
 80024a2:	d1f1      	bne.n	8002488 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2208      	movs	r2, #8
 80024aa:	4013      	ands	r3, r2
 80024ac:	d036      	beq.n	800251c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d019      	beq.n	80024ea <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024b6:	4b40      	ldr	r3, [pc, #256]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 80024b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024ba:	4b3f      	ldr	r3, [pc, #252]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 80024bc:	2101      	movs	r1, #1
 80024be:	430a      	orrs	r2, r1
 80024c0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c2:	f7fe ff3d 	bl	8001340 <HAL_GetTick>
 80024c6:	0003      	movs	r3, r0
 80024c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024cc:	f7fe ff38 	bl	8001340 <HAL_GetTick>
 80024d0:	0002      	movs	r2, r0
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e250      	b.n	8002980 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024de:	4b36      	ldr	r3, [pc, #216]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	2202      	movs	r2, #2
 80024e4:	4013      	ands	r3, r2
 80024e6:	d0f1      	beq.n	80024cc <HAL_RCC_OscConfig+0x24c>
 80024e8:	e018      	b.n	800251c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ea:	4b33      	ldr	r3, [pc, #204]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 80024ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024ee:	4b32      	ldr	r3, [pc, #200]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 80024f0:	2101      	movs	r1, #1
 80024f2:	438a      	bics	r2, r1
 80024f4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f6:	f7fe ff23 	bl	8001340 <HAL_GetTick>
 80024fa:	0003      	movs	r3, r0
 80024fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002500:	f7fe ff1e 	bl	8001340 <HAL_GetTick>
 8002504:	0002      	movs	r2, r0
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e236      	b.n	8002980 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002512:	4b29      	ldr	r3, [pc, #164]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 8002514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002516:	2202      	movs	r2, #2
 8002518:	4013      	ands	r3, r2
 800251a:	d1f1      	bne.n	8002500 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2204      	movs	r2, #4
 8002522:	4013      	ands	r3, r2
 8002524:	d100      	bne.n	8002528 <HAL_RCC_OscConfig+0x2a8>
 8002526:	e0b5      	b.n	8002694 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002528:	201f      	movs	r0, #31
 800252a:	183b      	adds	r3, r7, r0
 800252c:	2200      	movs	r2, #0
 800252e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002530:	4b21      	ldr	r3, [pc, #132]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 8002532:	69da      	ldr	r2, [r3, #28]
 8002534:	2380      	movs	r3, #128	; 0x80
 8002536:	055b      	lsls	r3, r3, #21
 8002538:	4013      	ands	r3, r2
 800253a:	d110      	bne.n	800255e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800253c:	4b1e      	ldr	r3, [pc, #120]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 800253e:	69da      	ldr	r2, [r3, #28]
 8002540:	4b1d      	ldr	r3, [pc, #116]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 8002542:	2180      	movs	r1, #128	; 0x80
 8002544:	0549      	lsls	r1, r1, #21
 8002546:	430a      	orrs	r2, r1
 8002548:	61da      	str	r2, [r3, #28]
 800254a:	4b1b      	ldr	r3, [pc, #108]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 800254c:	69da      	ldr	r2, [r3, #28]
 800254e:	2380      	movs	r3, #128	; 0x80
 8002550:	055b      	lsls	r3, r3, #21
 8002552:	4013      	ands	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002558:	183b      	adds	r3, r7, r0
 800255a:	2201      	movs	r2, #1
 800255c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255e:	4b19      	ldr	r3, [pc, #100]	; (80025c4 <HAL_RCC_OscConfig+0x344>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	2380      	movs	r3, #128	; 0x80
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	4013      	ands	r3, r2
 8002568:	d11a      	bne.n	80025a0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800256a:	4b16      	ldr	r3, [pc, #88]	; (80025c4 <HAL_RCC_OscConfig+0x344>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <HAL_RCC_OscConfig+0x344>)
 8002570:	2180      	movs	r1, #128	; 0x80
 8002572:	0049      	lsls	r1, r1, #1
 8002574:	430a      	orrs	r2, r1
 8002576:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002578:	f7fe fee2 	bl	8001340 <HAL_GetTick>
 800257c:	0003      	movs	r3, r0
 800257e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002582:	f7fe fedd 	bl	8001340 <HAL_GetTick>
 8002586:	0002      	movs	r2, r0
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b64      	cmp	r3, #100	; 0x64
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e1f5      	b.n	8002980 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <HAL_RCC_OscConfig+0x344>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	2380      	movs	r3, #128	; 0x80
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	4013      	ands	r3, r2
 800259e:	d0f0      	beq.n	8002582 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d10f      	bne.n	80025c8 <HAL_RCC_OscConfig+0x348>
 80025a8:	4b03      	ldr	r3, [pc, #12]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 80025aa:	6a1a      	ldr	r2, [r3, #32]
 80025ac:	4b02      	ldr	r3, [pc, #8]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 80025ae:	2101      	movs	r1, #1
 80025b0:	430a      	orrs	r2, r1
 80025b2:	621a      	str	r2, [r3, #32]
 80025b4:	e036      	b.n	8002624 <HAL_RCC_OscConfig+0x3a4>
 80025b6:	46c0      	nop			; (mov r8, r8)
 80025b8:	40021000 	.word	0x40021000
 80025bc:	fffeffff 	.word	0xfffeffff
 80025c0:	fffbffff 	.word	0xfffbffff
 80025c4:	40007000 	.word	0x40007000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10c      	bne.n	80025ea <HAL_RCC_OscConfig+0x36a>
 80025d0:	4bca      	ldr	r3, [pc, #808]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 80025d2:	6a1a      	ldr	r2, [r3, #32]
 80025d4:	4bc9      	ldr	r3, [pc, #804]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 80025d6:	2101      	movs	r1, #1
 80025d8:	438a      	bics	r2, r1
 80025da:	621a      	str	r2, [r3, #32]
 80025dc:	4bc7      	ldr	r3, [pc, #796]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 80025de:	6a1a      	ldr	r2, [r3, #32]
 80025e0:	4bc6      	ldr	r3, [pc, #792]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 80025e2:	2104      	movs	r1, #4
 80025e4:	438a      	bics	r2, r1
 80025e6:	621a      	str	r2, [r3, #32]
 80025e8:	e01c      	b.n	8002624 <HAL_RCC_OscConfig+0x3a4>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	2b05      	cmp	r3, #5
 80025f0:	d10c      	bne.n	800260c <HAL_RCC_OscConfig+0x38c>
 80025f2:	4bc2      	ldr	r3, [pc, #776]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 80025f4:	6a1a      	ldr	r2, [r3, #32]
 80025f6:	4bc1      	ldr	r3, [pc, #772]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 80025f8:	2104      	movs	r1, #4
 80025fa:	430a      	orrs	r2, r1
 80025fc:	621a      	str	r2, [r3, #32]
 80025fe:	4bbf      	ldr	r3, [pc, #764]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 8002600:	6a1a      	ldr	r2, [r3, #32]
 8002602:	4bbe      	ldr	r3, [pc, #760]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 8002604:	2101      	movs	r1, #1
 8002606:	430a      	orrs	r2, r1
 8002608:	621a      	str	r2, [r3, #32]
 800260a:	e00b      	b.n	8002624 <HAL_RCC_OscConfig+0x3a4>
 800260c:	4bbb      	ldr	r3, [pc, #748]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 800260e:	6a1a      	ldr	r2, [r3, #32]
 8002610:	4bba      	ldr	r3, [pc, #744]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 8002612:	2101      	movs	r1, #1
 8002614:	438a      	bics	r2, r1
 8002616:	621a      	str	r2, [r3, #32]
 8002618:	4bb8      	ldr	r3, [pc, #736]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 800261a:	6a1a      	ldr	r2, [r3, #32]
 800261c:	4bb7      	ldr	r3, [pc, #732]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 800261e:	2104      	movs	r1, #4
 8002620:	438a      	bics	r2, r1
 8002622:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d014      	beq.n	8002656 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800262c:	f7fe fe88 	bl	8001340 <HAL_GetTick>
 8002630:	0003      	movs	r3, r0
 8002632:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002634:	e009      	b.n	800264a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002636:	f7fe fe83 	bl	8001340 <HAL_GetTick>
 800263a:	0002      	movs	r2, r0
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	4aaf      	ldr	r2, [pc, #700]	; (8002900 <HAL_RCC_OscConfig+0x680>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e19a      	b.n	8002980 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800264a:	4bac      	ldr	r3, [pc, #688]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	2202      	movs	r2, #2
 8002650:	4013      	ands	r3, r2
 8002652:	d0f0      	beq.n	8002636 <HAL_RCC_OscConfig+0x3b6>
 8002654:	e013      	b.n	800267e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002656:	f7fe fe73 	bl	8001340 <HAL_GetTick>
 800265a:	0003      	movs	r3, r0
 800265c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800265e:	e009      	b.n	8002674 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002660:	f7fe fe6e 	bl	8001340 <HAL_GetTick>
 8002664:	0002      	movs	r2, r0
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	4aa5      	ldr	r2, [pc, #660]	; (8002900 <HAL_RCC_OscConfig+0x680>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e185      	b.n	8002980 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002674:	4ba1      	ldr	r3, [pc, #644]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	2202      	movs	r2, #2
 800267a:	4013      	ands	r3, r2
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800267e:	231f      	movs	r3, #31
 8002680:	18fb      	adds	r3, r7, r3
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d105      	bne.n	8002694 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002688:	4b9c      	ldr	r3, [pc, #624]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 800268a:	69da      	ldr	r2, [r3, #28]
 800268c:	4b9b      	ldr	r3, [pc, #620]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 800268e:	499d      	ldr	r1, [pc, #628]	; (8002904 <HAL_RCC_OscConfig+0x684>)
 8002690:	400a      	ands	r2, r1
 8002692:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2210      	movs	r2, #16
 800269a:	4013      	ands	r3, r2
 800269c:	d063      	beq.n	8002766 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d12a      	bne.n	80026fc <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80026a6:	4b95      	ldr	r3, [pc, #596]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 80026a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026aa:	4b94      	ldr	r3, [pc, #592]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 80026ac:	2104      	movs	r1, #4
 80026ae:	430a      	orrs	r2, r1
 80026b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80026b2:	4b92      	ldr	r3, [pc, #584]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 80026b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026b6:	4b91      	ldr	r3, [pc, #580]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 80026b8:	2101      	movs	r1, #1
 80026ba:	430a      	orrs	r2, r1
 80026bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026be:	f7fe fe3f 	bl	8001340 <HAL_GetTick>
 80026c2:	0003      	movs	r3, r0
 80026c4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80026c8:	f7fe fe3a 	bl	8001340 <HAL_GetTick>
 80026cc:	0002      	movs	r2, r0
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e152      	b.n	8002980 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80026da:	4b88      	ldr	r3, [pc, #544]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 80026dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026de:	2202      	movs	r2, #2
 80026e0:	4013      	ands	r3, r2
 80026e2:	d0f1      	beq.n	80026c8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80026e4:	4b85      	ldr	r3, [pc, #532]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 80026e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e8:	22f8      	movs	r2, #248	; 0xf8
 80026ea:	4393      	bics	r3, r2
 80026ec:	0019      	movs	r1, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	00da      	lsls	r2, r3, #3
 80026f4:	4b81      	ldr	r3, [pc, #516]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 80026f6:	430a      	orrs	r2, r1
 80026f8:	635a      	str	r2, [r3, #52]	; 0x34
 80026fa:	e034      	b.n	8002766 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	3305      	adds	r3, #5
 8002702:	d111      	bne.n	8002728 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002704:	4b7d      	ldr	r3, [pc, #500]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 8002706:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002708:	4b7c      	ldr	r3, [pc, #496]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 800270a:	2104      	movs	r1, #4
 800270c:	438a      	bics	r2, r1
 800270e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002710:	4b7a      	ldr	r3, [pc, #488]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 8002712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002714:	22f8      	movs	r2, #248	; 0xf8
 8002716:	4393      	bics	r3, r2
 8002718:	0019      	movs	r1, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	00da      	lsls	r2, r3, #3
 8002720:	4b76      	ldr	r3, [pc, #472]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 8002722:	430a      	orrs	r2, r1
 8002724:	635a      	str	r2, [r3, #52]	; 0x34
 8002726:	e01e      	b.n	8002766 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002728:	4b74      	ldr	r3, [pc, #464]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 800272a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800272c:	4b73      	ldr	r3, [pc, #460]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 800272e:	2104      	movs	r1, #4
 8002730:	430a      	orrs	r2, r1
 8002732:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002734:	4b71      	ldr	r3, [pc, #452]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 8002736:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002738:	4b70      	ldr	r3, [pc, #448]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 800273a:	2101      	movs	r1, #1
 800273c:	438a      	bics	r2, r1
 800273e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002740:	f7fe fdfe 	bl	8001340 <HAL_GetTick>
 8002744:	0003      	movs	r3, r0
 8002746:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800274a:	f7fe fdf9 	bl	8001340 <HAL_GetTick>
 800274e:	0002      	movs	r2, r0
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e111      	b.n	8002980 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800275c:	4b67      	ldr	r3, [pc, #412]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 800275e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002760:	2202      	movs	r2, #2
 8002762:	4013      	ands	r3, r2
 8002764:	d1f1      	bne.n	800274a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2220      	movs	r2, #32
 800276c:	4013      	ands	r3, r2
 800276e:	d05c      	beq.n	800282a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002770:	4b62      	ldr	r3, [pc, #392]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	220c      	movs	r2, #12
 8002776:	4013      	ands	r3, r2
 8002778:	2b0c      	cmp	r3, #12
 800277a:	d00e      	beq.n	800279a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800277c:	4b5f      	ldr	r3, [pc, #380]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	220c      	movs	r2, #12
 8002782:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002784:	2b08      	cmp	r3, #8
 8002786:	d114      	bne.n	80027b2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002788:	4b5c      	ldr	r3, [pc, #368]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	23c0      	movs	r3, #192	; 0xc0
 800278e:	025b      	lsls	r3, r3, #9
 8002790:	401a      	ands	r2, r3
 8002792:	23c0      	movs	r3, #192	; 0xc0
 8002794:	025b      	lsls	r3, r3, #9
 8002796:	429a      	cmp	r2, r3
 8002798:	d10b      	bne.n	80027b2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800279a:	4b58      	ldr	r3, [pc, #352]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 800279c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800279e:	2380      	movs	r3, #128	; 0x80
 80027a0:	029b      	lsls	r3, r3, #10
 80027a2:	4013      	ands	r3, r2
 80027a4:	d040      	beq.n	8002828 <HAL_RCC_OscConfig+0x5a8>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d03c      	beq.n	8002828 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e0e6      	b.n	8002980 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d01b      	beq.n	80027f2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80027ba:	4b50      	ldr	r3, [pc, #320]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 80027bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027be:	4b4f      	ldr	r3, [pc, #316]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 80027c0:	2180      	movs	r1, #128	; 0x80
 80027c2:	0249      	lsls	r1, r1, #9
 80027c4:	430a      	orrs	r2, r1
 80027c6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c8:	f7fe fdba 	bl	8001340 <HAL_GetTick>
 80027cc:	0003      	movs	r3, r0
 80027ce:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027d2:	f7fe fdb5 	bl	8001340 <HAL_GetTick>
 80027d6:	0002      	movs	r2, r0
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e0cd      	b.n	8002980 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80027e4:	4b45      	ldr	r3, [pc, #276]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 80027e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027e8:	2380      	movs	r3, #128	; 0x80
 80027ea:	029b      	lsls	r3, r3, #10
 80027ec:	4013      	ands	r3, r2
 80027ee:	d0f0      	beq.n	80027d2 <HAL_RCC_OscConfig+0x552>
 80027f0:	e01b      	b.n	800282a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80027f2:	4b42      	ldr	r3, [pc, #264]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 80027f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027f6:	4b41      	ldr	r3, [pc, #260]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 80027f8:	4943      	ldr	r1, [pc, #268]	; (8002908 <HAL_RCC_OscConfig+0x688>)
 80027fa:	400a      	ands	r2, r1
 80027fc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fe:	f7fe fd9f 	bl	8001340 <HAL_GetTick>
 8002802:	0003      	movs	r3, r0
 8002804:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002808:	f7fe fd9a 	bl	8001340 <HAL_GetTick>
 800280c:	0002      	movs	r2, r0
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e0b2      	b.n	8002980 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800281a:	4b38      	ldr	r3, [pc, #224]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 800281c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800281e:	2380      	movs	r3, #128	; 0x80
 8002820:	029b      	lsls	r3, r3, #10
 8002822:	4013      	ands	r3, r2
 8002824:	d1f0      	bne.n	8002808 <HAL_RCC_OscConfig+0x588>
 8002826:	e000      	b.n	800282a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002828:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	2b00      	cmp	r3, #0
 8002830:	d100      	bne.n	8002834 <HAL_RCC_OscConfig+0x5b4>
 8002832:	e0a4      	b.n	800297e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002834:	4b31      	ldr	r3, [pc, #196]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	220c      	movs	r2, #12
 800283a:	4013      	ands	r3, r2
 800283c:	2b08      	cmp	r3, #8
 800283e:	d100      	bne.n	8002842 <HAL_RCC_OscConfig+0x5c2>
 8002840:	e078      	b.n	8002934 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	2b02      	cmp	r3, #2
 8002848:	d14c      	bne.n	80028e4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284a:	4b2c      	ldr	r3, [pc, #176]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	4b2b      	ldr	r3, [pc, #172]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 8002850:	492e      	ldr	r1, [pc, #184]	; (800290c <HAL_RCC_OscConfig+0x68c>)
 8002852:	400a      	ands	r2, r1
 8002854:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002856:	f7fe fd73 	bl	8001340 <HAL_GetTick>
 800285a:	0003      	movs	r3, r0
 800285c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002860:	f7fe fd6e 	bl	8001340 <HAL_GetTick>
 8002864:	0002      	movs	r2, r0
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e086      	b.n	8002980 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002872:	4b22      	ldr	r3, [pc, #136]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	2380      	movs	r3, #128	; 0x80
 8002878:	049b      	lsls	r3, r3, #18
 800287a:	4013      	ands	r3, r2
 800287c:	d1f0      	bne.n	8002860 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800287e:	4b1f      	ldr	r3, [pc, #124]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 8002880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002882:	220f      	movs	r2, #15
 8002884:	4393      	bics	r3, r2
 8002886:	0019      	movs	r1, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800288c:	4b1b      	ldr	r3, [pc, #108]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 800288e:	430a      	orrs	r2, r1
 8002890:	62da      	str	r2, [r3, #44]	; 0x2c
 8002892:	4b1a      	ldr	r3, [pc, #104]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	4a1e      	ldr	r2, [pc, #120]	; (8002910 <HAL_RCC_OscConfig+0x690>)
 8002898:	4013      	ands	r3, r2
 800289a:	0019      	movs	r1, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a4:	431a      	orrs	r2, r3
 80028a6:	4b15      	ldr	r3, [pc, #84]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 80028a8:	430a      	orrs	r2, r1
 80028aa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028ac:	4b13      	ldr	r3, [pc, #76]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	4b12      	ldr	r3, [pc, #72]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 80028b2:	2180      	movs	r1, #128	; 0x80
 80028b4:	0449      	lsls	r1, r1, #17
 80028b6:	430a      	orrs	r2, r1
 80028b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ba:	f7fe fd41 	bl	8001340 <HAL_GetTick>
 80028be:	0003      	movs	r3, r0
 80028c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c4:	f7fe fd3c 	bl	8001340 <HAL_GetTick>
 80028c8:	0002      	movs	r2, r0
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e054      	b.n	8002980 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028d6:	4b09      	ldr	r3, [pc, #36]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	2380      	movs	r3, #128	; 0x80
 80028dc:	049b      	lsls	r3, r3, #18
 80028de:	4013      	ands	r3, r2
 80028e0:	d0f0      	beq.n	80028c4 <HAL_RCC_OscConfig+0x644>
 80028e2:	e04c      	b.n	800297e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e4:	4b05      	ldr	r3, [pc, #20]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4b04      	ldr	r3, [pc, #16]	; (80028fc <HAL_RCC_OscConfig+0x67c>)
 80028ea:	4908      	ldr	r1, [pc, #32]	; (800290c <HAL_RCC_OscConfig+0x68c>)
 80028ec:	400a      	ands	r2, r1
 80028ee:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f0:	f7fe fd26 	bl	8001340 <HAL_GetTick>
 80028f4:	0003      	movs	r3, r0
 80028f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028f8:	e015      	b.n	8002926 <HAL_RCC_OscConfig+0x6a6>
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	40021000 	.word	0x40021000
 8002900:	00001388 	.word	0x00001388
 8002904:	efffffff 	.word	0xefffffff
 8002908:	fffeffff 	.word	0xfffeffff
 800290c:	feffffff 	.word	0xfeffffff
 8002910:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002914:	f7fe fd14 	bl	8001340 <HAL_GetTick>
 8002918:	0002      	movs	r2, r0
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e02c      	b.n	8002980 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002926:	4b18      	ldr	r3, [pc, #96]	; (8002988 <HAL_RCC_OscConfig+0x708>)
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	2380      	movs	r3, #128	; 0x80
 800292c:	049b      	lsls	r3, r3, #18
 800292e:	4013      	ands	r3, r2
 8002930:	d1f0      	bne.n	8002914 <HAL_RCC_OscConfig+0x694>
 8002932:	e024      	b.n	800297e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	2b01      	cmp	r3, #1
 800293a:	d101      	bne.n	8002940 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e01f      	b.n	8002980 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002940:	4b11      	ldr	r3, [pc, #68]	; (8002988 <HAL_RCC_OscConfig+0x708>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002946:	4b10      	ldr	r3, [pc, #64]	; (8002988 <HAL_RCC_OscConfig+0x708>)
 8002948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	23c0      	movs	r3, #192	; 0xc0
 8002950:	025b      	lsls	r3, r3, #9
 8002952:	401a      	ands	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002958:	429a      	cmp	r2, r3
 800295a:	d10e      	bne.n	800297a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	220f      	movs	r2, #15
 8002960:	401a      	ands	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002966:	429a      	cmp	r2, r3
 8002968:	d107      	bne.n	800297a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	23f0      	movs	r3, #240	; 0xf0
 800296e:	039b      	lsls	r3, r3, #14
 8002970:	401a      	ands	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002976:	429a      	cmp	r2, r3
 8002978:	d001      	beq.n	800297e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	0018      	movs	r0, r3
 8002982:	46bd      	mov	sp, r7
 8002984:	b008      	add	sp, #32
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40021000 	.word	0x40021000

0800298c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e0bf      	b.n	8002b20 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029a0:	4b61      	ldr	r3, [pc, #388]	; (8002b28 <HAL_RCC_ClockConfig+0x19c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2201      	movs	r2, #1
 80029a6:	4013      	ands	r3, r2
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d911      	bls.n	80029d2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ae:	4b5e      	ldr	r3, [pc, #376]	; (8002b28 <HAL_RCC_ClockConfig+0x19c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2201      	movs	r2, #1
 80029b4:	4393      	bics	r3, r2
 80029b6:	0019      	movs	r1, r3
 80029b8:	4b5b      	ldr	r3, [pc, #364]	; (8002b28 <HAL_RCC_ClockConfig+0x19c>)
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	430a      	orrs	r2, r1
 80029be:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c0:	4b59      	ldr	r3, [pc, #356]	; (8002b28 <HAL_RCC_ClockConfig+0x19c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2201      	movs	r2, #1
 80029c6:	4013      	ands	r3, r2
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d001      	beq.n	80029d2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e0a6      	b.n	8002b20 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2202      	movs	r2, #2
 80029d8:	4013      	ands	r3, r2
 80029da:	d015      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2204      	movs	r2, #4
 80029e2:	4013      	ands	r3, r2
 80029e4:	d006      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80029e6:	4b51      	ldr	r3, [pc, #324]	; (8002b2c <HAL_RCC_ClockConfig+0x1a0>)
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	4b50      	ldr	r3, [pc, #320]	; (8002b2c <HAL_RCC_ClockConfig+0x1a0>)
 80029ec:	21e0      	movs	r1, #224	; 0xe0
 80029ee:	00c9      	lsls	r1, r1, #3
 80029f0:	430a      	orrs	r2, r1
 80029f2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f4:	4b4d      	ldr	r3, [pc, #308]	; (8002b2c <HAL_RCC_ClockConfig+0x1a0>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	22f0      	movs	r2, #240	; 0xf0
 80029fa:	4393      	bics	r3, r2
 80029fc:	0019      	movs	r1, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689a      	ldr	r2, [r3, #8]
 8002a02:	4b4a      	ldr	r3, [pc, #296]	; (8002b2c <HAL_RCC_ClockConfig+0x1a0>)
 8002a04:	430a      	orrs	r2, r1
 8002a06:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d04c      	beq.n	8002aac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d107      	bne.n	8002a2a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1a:	4b44      	ldr	r3, [pc, #272]	; (8002b2c <HAL_RCC_ClockConfig+0x1a0>)
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	2380      	movs	r3, #128	; 0x80
 8002a20:	029b      	lsls	r3, r3, #10
 8002a22:	4013      	ands	r3, r2
 8002a24:	d120      	bne.n	8002a68 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e07a      	b.n	8002b20 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d107      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a32:	4b3e      	ldr	r3, [pc, #248]	; (8002b2c <HAL_RCC_ClockConfig+0x1a0>)
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	2380      	movs	r3, #128	; 0x80
 8002a38:	049b      	lsls	r3, r3, #18
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	d114      	bne.n	8002a68 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e06e      	b.n	8002b20 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b03      	cmp	r3, #3
 8002a48:	d107      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002a4a:	4b38      	ldr	r3, [pc, #224]	; (8002b2c <HAL_RCC_ClockConfig+0x1a0>)
 8002a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a4e:	2380      	movs	r3, #128	; 0x80
 8002a50:	029b      	lsls	r3, r3, #10
 8002a52:	4013      	ands	r3, r2
 8002a54:	d108      	bne.n	8002a68 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e062      	b.n	8002b20 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a5a:	4b34      	ldr	r3, [pc, #208]	; (8002b2c <HAL_RCC_ClockConfig+0x1a0>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	4013      	ands	r3, r2
 8002a62:	d101      	bne.n	8002a68 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e05b      	b.n	8002b20 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a68:	4b30      	ldr	r3, [pc, #192]	; (8002b2c <HAL_RCC_ClockConfig+0x1a0>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2203      	movs	r2, #3
 8002a6e:	4393      	bics	r3, r2
 8002a70:	0019      	movs	r1, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	4b2d      	ldr	r3, [pc, #180]	; (8002b2c <HAL_RCC_ClockConfig+0x1a0>)
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a7c:	f7fe fc60 	bl	8001340 <HAL_GetTick>
 8002a80:	0003      	movs	r3, r0
 8002a82:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a84:	e009      	b.n	8002a9a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a86:	f7fe fc5b 	bl	8001340 <HAL_GetTick>
 8002a8a:	0002      	movs	r2, r0
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	4a27      	ldr	r2, [pc, #156]	; (8002b30 <HAL_RCC_ClockConfig+0x1a4>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e042      	b.n	8002b20 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9a:	4b24      	ldr	r3, [pc, #144]	; (8002b2c <HAL_RCC_ClockConfig+0x1a0>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	220c      	movs	r2, #12
 8002aa0:	401a      	ands	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d1ec      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aac:	4b1e      	ldr	r3, [pc, #120]	; (8002b28 <HAL_RCC_ClockConfig+0x19c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d211      	bcs.n	8002ade <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aba:	4b1b      	ldr	r3, [pc, #108]	; (8002b28 <HAL_RCC_ClockConfig+0x19c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	4393      	bics	r3, r2
 8002ac2:	0019      	movs	r1, r3
 8002ac4:	4b18      	ldr	r3, [pc, #96]	; (8002b28 <HAL_RCC_ClockConfig+0x19c>)
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002acc:	4b16      	ldr	r3, [pc, #88]	; (8002b28 <HAL_RCC_ClockConfig+0x19c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d001      	beq.n	8002ade <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e020      	b.n	8002b20 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2204      	movs	r2, #4
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d009      	beq.n	8002afc <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002ae8:	4b10      	ldr	r3, [pc, #64]	; (8002b2c <HAL_RCC_ClockConfig+0x1a0>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	4a11      	ldr	r2, [pc, #68]	; (8002b34 <HAL_RCC_ClockConfig+0x1a8>)
 8002aee:	4013      	ands	r3, r2
 8002af0:	0019      	movs	r1, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68da      	ldr	r2, [r3, #12]
 8002af6:	4b0d      	ldr	r3, [pc, #52]	; (8002b2c <HAL_RCC_ClockConfig+0x1a0>)
 8002af8:	430a      	orrs	r2, r1
 8002afa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002afc:	f000 f820 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 8002b00:	0001      	movs	r1, r0
 8002b02:	4b0a      	ldr	r3, [pc, #40]	; (8002b2c <HAL_RCC_ClockConfig+0x1a0>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	091b      	lsrs	r3, r3, #4
 8002b08:	220f      	movs	r2, #15
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	4a0a      	ldr	r2, [pc, #40]	; (8002b38 <HAL_RCC_ClockConfig+0x1ac>)
 8002b0e:	5cd3      	ldrb	r3, [r2, r3]
 8002b10:	000a      	movs	r2, r1
 8002b12:	40da      	lsrs	r2, r3
 8002b14:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <HAL_RCC_ClockConfig+0x1b0>)
 8002b16:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002b18:	2003      	movs	r0, #3
 8002b1a:	f7fe fbcb 	bl	80012b4 <HAL_InitTick>
  
  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	0018      	movs	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b004      	add	sp, #16
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40022000 	.word	0x40022000
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	00001388 	.word	0x00001388
 8002b34:	fffff8ff 	.word	0xfffff8ff
 8002b38:	08005d50 	.word	0x08005d50
 8002b3c:	20000000 	.word	0x20000000

08002b40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b46:	2300      	movs	r3, #0
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60bb      	str	r3, [r7, #8]
 8002b4e:	2300      	movs	r3, #0
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	2300      	movs	r3, #0
 8002b54:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002b5a:	4b2d      	ldr	r3, [pc, #180]	; (8002c10 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	220c      	movs	r2, #12
 8002b64:	4013      	ands	r3, r2
 8002b66:	2b0c      	cmp	r3, #12
 8002b68:	d046      	beq.n	8002bf8 <HAL_RCC_GetSysClockFreq+0xb8>
 8002b6a:	d848      	bhi.n	8002bfe <HAL_RCC_GetSysClockFreq+0xbe>
 8002b6c:	2b04      	cmp	r3, #4
 8002b6e:	d002      	beq.n	8002b76 <HAL_RCC_GetSysClockFreq+0x36>
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	d003      	beq.n	8002b7c <HAL_RCC_GetSysClockFreq+0x3c>
 8002b74:	e043      	b.n	8002bfe <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b76:	4b27      	ldr	r3, [pc, #156]	; (8002c14 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002b78:	613b      	str	r3, [r7, #16]
      break;
 8002b7a:	e043      	b.n	8002c04 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	0c9b      	lsrs	r3, r3, #18
 8002b80:	220f      	movs	r2, #15
 8002b82:	4013      	ands	r3, r2
 8002b84:	4a24      	ldr	r2, [pc, #144]	; (8002c18 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002b86:	5cd3      	ldrb	r3, [r2, r3]
 8002b88:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002b8a:	4b21      	ldr	r3, [pc, #132]	; (8002c10 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8e:	220f      	movs	r2, #15
 8002b90:	4013      	ands	r3, r2
 8002b92:	4a22      	ldr	r2, [pc, #136]	; (8002c1c <HAL_RCC_GetSysClockFreq+0xdc>)
 8002b94:	5cd3      	ldrb	r3, [r2, r3]
 8002b96:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	23c0      	movs	r3, #192	; 0xc0
 8002b9c:	025b      	lsls	r3, r3, #9
 8002b9e:	401a      	ands	r2, r3
 8002ba0:	2380      	movs	r3, #128	; 0x80
 8002ba2:	025b      	lsls	r3, r3, #9
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d109      	bne.n	8002bbc <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ba8:	68b9      	ldr	r1, [r7, #8]
 8002baa:	481a      	ldr	r0, [pc, #104]	; (8002c14 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002bac:	f7fd fab6 	bl	800011c <__udivsi3>
 8002bb0:	0003      	movs	r3, r0
 8002bb2:	001a      	movs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4353      	muls	r3, r2
 8002bb8:	617b      	str	r3, [r7, #20]
 8002bba:	e01a      	b.n	8002bf2 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	23c0      	movs	r3, #192	; 0xc0
 8002bc0:	025b      	lsls	r3, r3, #9
 8002bc2:	401a      	ands	r2, r3
 8002bc4:	23c0      	movs	r3, #192	; 0xc0
 8002bc6:	025b      	lsls	r3, r3, #9
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d109      	bne.n	8002be0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002bcc:	68b9      	ldr	r1, [r7, #8]
 8002bce:	4814      	ldr	r0, [pc, #80]	; (8002c20 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002bd0:	f7fd faa4 	bl	800011c <__udivsi3>
 8002bd4:	0003      	movs	r3, r0
 8002bd6:	001a      	movs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4353      	muls	r3, r2
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002be0:	68b9      	ldr	r1, [r7, #8]
 8002be2:	480c      	ldr	r0, [pc, #48]	; (8002c14 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002be4:	f7fd fa9a 	bl	800011c <__udivsi3>
 8002be8:	0003      	movs	r3, r0
 8002bea:	001a      	movs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4353      	muls	r3, r2
 8002bf0:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	613b      	str	r3, [r7, #16]
      break;
 8002bf6:	e005      	b.n	8002c04 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002bf8:	4b09      	ldr	r3, [pc, #36]	; (8002c20 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002bfa:	613b      	str	r3, [r7, #16]
      break;
 8002bfc:	e002      	b.n	8002c04 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bfe:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002c00:	613b      	str	r3, [r7, #16]
      break;
 8002c02:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002c04:	693b      	ldr	r3, [r7, #16]
}
 8002c06:	0018      	movs	r0, r3
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	b006      	add	sp, #24
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	40021000 	.word	0x40021000
 8002c14:	007a1200 	.word	0x007a1200
 8002c18:	08005d68 	.word	0x08005d68
 8002c1c:	08005d78 	.word	0x08005d78
 8002c20:	02dc6c00 	.word	0x02dc6c00

08002c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c28:	4b02      	ldr	r3, [pc, #8]	; (8002c34 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
}
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	46c0      	nop			; (mov r8, r8)
 8002c34:	20000000 	.word	0x20000000

08002c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002c3c:	f7ff fff2 	bl	8002c24 <HAL_RCC_GetHCLKFreq>
 8002c40:	0001      	movs	r1, r0
 8002c42:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	0a1b      	lsrs	r3, r3, #8
 8002c48:	2207      	movs	r2, #7
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	4a04      	ldr	r2, [pc, #16]	; (8002c60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c4e:	5cd3      	ldrb	r3, [r2, r3]
 8002c50:	40d9      	lsrs	r1, r3
 8002c52:	000b      	movs	r3, r1
}    
 8002c54:	0018      	movs	r0, r3
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	08005d60 	.word	0x08005d60

08002c64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e042      	b.n	8002cfc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	223d      	movs	r2, #61	; 0x3d
 8002c7a:	5c9b      	ldrb	r3, [r3, r2]
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d107      	bne.n	8002c92 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	223c      	movs	r2, #60	; 0x3c
 8002c86:	2100      	movs	r1, #0
 8002c88:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f7fe f8eb 	bl	8000e68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	223d      	movs	r2, #61	; 0x3d
 8002c96:	2102      	movs	r1, #2
 8002c98:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	0019      	movs	r1, r3
 8002ca4:	0010      	movs	r0, r2
 8002ca6:	f000 fef1 	bl	8003a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2246      	movs	r2, #70	; 0x46
 8002cae:	2101      	movs	r1, #1
 8002cb0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	223e      	movs	r2, #62	; 0x3e
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	5499      	strb	r1, [r3, r2]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	223f      	movs	r2, #63	; 0x3f
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	5499      	strb	r1, [r3, r2]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2240      	movs	r2, #64	; 0x40
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	5499      	strb	r1, [r3, r2]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2241      	movs	r2, #65	; 0x41
 8002cce:	2101      	movs	r1, #1
 8002cd0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2242      	movs	r2, #66	; 0x42
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	5499      	strb	r1, [r3, r2]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2243      	movs	r2, #67	; 0x43
 8002cde:	2101      	movs	r1, #1
 8002ce0:	5499      	strb	r1, [r3, r2]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2244      	movs	r2, #68	; 0x44
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	5499      	strb	r1, [r3, r2]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2245      	movs	r2, #69	; 0x45
 8002cee:	2101      	movs	r1, #1
 8002cf0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	223d      	movs	r2, #61	; 0x3d
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	b002      	add	sp, #8
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	223d      	movs	r2, #61	; 0x3d
 8002d10:	5c9b      	ldrb	r3, [r3, r2]
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d001      	beq.n	8002d1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e036      	b.n	8002d8a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	223d      	movs	r2, #61	; 0x3d
 8002d20:	2102      	movs	r1, #2
 8002d22:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2101      	movs	r1, #1
 8002d30:	430a      	orrs	r2, r1
 8002d32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a16      	ldr	r2, [pc, #88]	; (8002d94 <HAL_TIM_Base_Start_IT+0x90>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d00a      	beq.n	8002d54 <HAL_TIM_Base_Start_IT+0x50>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	2380      	movs	r3, #128	; 0x80
 8002d44:	05db      	lsls	r3, r3, #23
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d004      	beq.n	8002d54 <HAL_TIM_Base_Start_IT+0x50>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a12      	ldr	r2, [pc, #72]	; (8002d98 <HAL_TIM_Base_Start_IT+0x94>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d111      	bne.n	8002d78 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	2207      	movs	r2, #7
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2b06      	cmp	r3, #6
 8002d64:	d010      	beq.n	8002d88 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2101      	movs	r1, #1
 8002d72:	430a      	orrs	r2, r1
 8002d74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d76:	e007      	b.n	8002d88 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2101      	movs	r1, #1
 8002d84:	430a      	orrs	r2, r1
 8002d86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	b004      	add	sp, #16
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	40012c00 	.word	0x40012c00
 8002d98:	40000400 	.word	0x40000400

08002d9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e042      	b.n	8002e34 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	223d      	movs	r2, #61	; 0x3d
 8002db2:	5c9b      	ldrb	r3, [r3, r2]
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d107      	bne.n	8002dca <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	223c      	movs	r2, #60	; 0x3c
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f000 f839 	bl	8002e3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	223d      	movs	r2, #61	; 0x3d
 8002dce:	2102      	movs	r1, #2
 8002dd0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	3304      	adds	r3, #4
 8002dda:	0019      	movs	r1, r3
 8002ddc:	0010      	movs	r0, r2
 8002dde:	f000 fe55 	bl	8003a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2246      	movs	r2, #70	; 0x46
 8002de6:	2101      	movs	r1, #1
 8002de8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	223e      	movs	r2, #62	; 0x3e
 8002dee:	2101      	movs	r1, #1
 8002df0:	5499      	strb	r1, [r3, r2]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	223f      	movs	r2, #63	; 0x3f
 8002df6:	2101      	movs	r1, #1
 8002df8:	5499      	strb	r1, [r3, r2]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2240      	movs	r2, #64	; 0x40
 8002dfe:	2101      	movs	r1, #1
 8002e00:	5499      	strb	r1, [r3, r2]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2241      	movs	r2, #65	; 0x41
 8002e06:	2101      	movs	r1, #1
 8002e08:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2242      	movs	r2, #66	; 0x42
 8002e0e:	2101      	movs	r1, #1
 8002e10:	5499      	strb	r1, [r3, r2]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2243      	movs	r2, #67	; 0x43
 8002e16:	2101      	movs	r1, #1
 8002e18:	5499      	strb	r1, [r3, r2]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2244      	movs	r2, #68	; 0x44
 8002e1e:	2101      	movs	r1, #1
 8002e20:	5499      	strb	r1, [r3, r2]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2245      	movs	r2, #69	; 0x45
 8002e26:	2101      	movs	r1, #1
 8002e28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	223d      	movs	r2, #61	; 0x3d
 8002e2e:	2101      	movs	r1, #1
 8002e30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	0018      	movs	r0, r3
 8002e36:	46bd      	mov	sp, r7
 8002e38:	b002      	add	sp, #8
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e44:	46c0      	nop			; (mov r8, r8)
 8002e46:	46bd      	mov	sp, r7
 8002e48:	b002      	add	sp, #8
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d108      	bne.n	8002e6e <HAL_TIM_PWM_Start+0x22>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	223e      	movs	r2, #62	; 0x3e
 8002e60:	5c9b      	ldrb	r3, [r3, r2]
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	3b01      	subs	r3, #1
 8002e66:	1e5a      	subs	r2, r3, #1
 8002e68:	4193      	sbcs	r3, r2
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	e01f      	b.n	8002eae <HAL_TIM_PWM_Start+0x62>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d108      	bne.n	8002e86 <HAL_TIM_PWM_Start+0x3a>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	223f      	movs	r2, #63	; 0x3f
 8002e78:	5c9b      	ldrb	r3, [r3, r2]
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	1e5a      	subs	r2, r3, #1
 8002e80:	4193      	sbcs	r3, r2
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	e013      	b.n	8002eae <HAL_TIM_PWM_Start+0x62>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	d108      	bne.n	8002e9e <HAL_TIM_PWM_Start+0x52>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2240      	movs	r2, #64	; 0x40
 8002e90:	5c9b      	ldrb	r3, [r3, r2]
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	3b01      	subs	r3, #1
 8002e96:	1e5a      	subs	r2, r3, #1
 8002e98:	4193      	sbcs	r3, r2
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	e007      	b.n	8002eae <HAL_TIM_PWM_Start+0x62>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2241      	movs	r2, #65	; 0x41
 8002ea2:	5c9b      	ldrb	r3, [r3, r2]
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	1e5a      	subs	r2, r3, #1
 8002eaa:	4193      	sbcs	r3, r2
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e06a      	b.n	8002f8c <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d104      	bne.n	8002ec6 <HAL_TIM_PWM_Start+0x7a>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	223e      	movs	r2, #62	; 0x3e
 8002ec0:	2102      	movs	r1, #2
 8002ec2:	5499      	strb	r1, [r3, r2]
 8002ec4:	e013      	b.n	8002eee <HAL_TIM_PWM_Start+0xa2>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d104      	bne.n	8002ed6 <HAL_TIM_PWM_Start+0x8a>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	223f      	movs	r2, #63	; 0x3f
 8002ed0:	2102      	movs	r1, #2
 8002ed2:	5499      	strb	r1, [r3, r2]
 8002ed4:	e00b      	b.n	8002eee <HAL_TIM_PWM_Start+0xa2>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d104      	bne.n	8002ee6 <HAL_TIM_PWM_Start+0x9a>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2240      	movs	r2, #64	; 0x40
 8002ee0:	2102      	movs	r1, #2
 8002ee2:	5499      	strb	r1, [r3, r2]
 8002ee4:	e003      	b.n	8002eee <HAL_TIM_PWM_Start+0xa2>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2241      	movs	r2, #65	; 0x41
 8002eea:	2102      	movs	r1, #2
 8002eec:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6839      	ldr	r1, [r7, #0]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	f001 f9d6 	bl	80042a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a24      	ldr	r2, [pc, #144]	; (8002f94 <HAL_TIM_PWM_Start+0x148>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d009      	beq.n	8002f1a <HAL_TIM_PWM_Start+0xce>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a23      	ldr	r2, [pc, #140]	; (8002f98 <HAL_TIM_PWM_Start+0x14c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d004      	beq.n	8002f1a <HAL_TIM_PWM_Start+0xce>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a21      	ldr	r2, [pc, #132]	; (8002f9c <HAL_TIM_PWM_Start+0x150>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d101      	bne.n	8002f1e <HAL_TIM_PWM_Start+0xd2>
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e000      	b.n	8002f20 <HAL_TIM_PWM_Start+0xd4>
 8002f1e:	2300      	movs	r3, #0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d008      	beq.n	8002f36 <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2180      	movs	r1, #128	; 0x80
 8002f30:	0209      	lsls	r1, r1, #8
 8002f32:	430a      	orrs	r2, r1
 8002f34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a16      	ldr	r2, [pc, #88]	; (8002f94 <HAL_TIM_PWM_Start+0x148>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d00a      	beq.n	8002f56 <HAL_TIM_PWM_Start+0x10a>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	2380      	movs	r3, #128	; 0x80
 8002f46:	05db      	lsls	r3, r3, #23
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d004      	beq.n	8002f56 <HAL_TIM_PWM_Start+0x10a>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a13      	ldr	r2, [pc, #76]	; (8002fa0 <HAL_TIM_PWM_Start+0x154>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d111      	bne.n	8002f7a <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	2207      	movs	r2, #7
 8002f5e:	4013      	ands	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2b06      	cmp	r3, #6
 8002f66:	d010      	beq.n	8002f8a <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2101      	movs	r1, #1
 8002f74:	430a      	orrs	r2, r1
 8002f76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f78:	e007      	b.n	8002f8a <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2101      	movs	r1, #1
 8002f86:	430a      	orrs	r2, r1
 8002f88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	b004      	add	sp, #16
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40012c00 	.word	0x40012c00
 8002f98:	40014400 	.word	0x40014400
 8002f9c:	40014800 	.word	0x40014800
 8002fa0:	40000400 	.word	0x40000400

08002fa4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e042      	b.n	800303c <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	223d      	movs	r2, #61	; 0x3d
 8002fba:	5c9b      	ldrb	r3, [r3, r2]
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d107      	bne.n	8002fd2 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	223c      	movs	r2, #60	; 0x3c
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f000 f839 	bl	8003044 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	223d      	movs	r2, #61	; 0x3d
 8002fd6:	2102      	movs	r1, #2
 8002fd8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	3304      	adds	r3, #4
 8002fe2:	0019      	movs	r1, r3
 8002fe4:	0010      	movs	r0, r2
 8002fe6:	f000 fd51 	bl	8003a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2246      	movs	r2, #70	; 0x46
 8002fee:	2101      	movs	r1, #1
 8002ff0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	223e      	movs	r2, #62	; 0x3e
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	5499      	strb	r1, [r3, r2]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	223f      	movs	r2, #63	; 0x3f
 8002ffe:	2101      	movs	r1, #1
 8003000:	5499      	strb	r1, [r3, r2]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2240      	movs	r2, #64	; 0x40
 8003006:	2101      	movs	r1, #1
 8003008:	5499      	strb	r1, [r3, r2]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2241      	movs	r2, #65	; 0x41
 800300e:	2101      	movs	r1, #1
 8003010:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2242      	movs	r2, #66	; 0x42
 8003016:	2101      	movs	r1, #1
 8003018:	5499      	strb	r1, [r3, r2]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2243      	movs	r2, #67	; 0x43
 800301e:	2101      	movs	r1, #1
 8003020:	5499      	strb	r1, [r3, r2]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2244      	movs	r2, #68	; 0x44
 8003026:	2101      	movs	r1, #1
 8003028:	5499      	strb	r1, [r3, r2]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2245      	movs	r2, #69	; 0x45
 800302e:	2101      	movs	r1, #1
 8003030:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	223d      	movs	r2, #61	; 0x3d
 8003036:	2101      	movs	r1, #1
 8003038:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	0018      	movs	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	b002      	add	sp, #8
 8003042:	bd80      	pop	{r7, pc}

08003044 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800304c:	46c0      	nop			; (mov r8, r8)
 800304e:	46bd      	mov	sp, r7
 8003050:	b002      	add	sp, #8
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800305e:	230f      	movs	r3, #15
 8003060:	18fb      	adds	r3, r7, r3
 8003062:	2200      	movs	r2, #0
 8003064:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d104      	bne.n	8003076 <HAL_TIM_IC_Start_IT+0x22>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	223e      	movs	r2, #62	; 0x3e
 8003070:	5c9b      	ldrb	r3, [r3, r2]
 8003072:	b2db      	uxtb	r3, r3
 8003074:	e013      	b.n	800309e <HAL_TIM_IC_Start_IT+0x4a>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	2b04      	cmp	r3, #4
 800307a:	d104      	bne.n	8003086 <HAL_TIM_IC_Start_IT+0x32>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	223f      	movs	r2, #63	; 0x3f
 8003080:	5c9b      	ldrb	r3, [r3, r2]
 8003082:	b2db      	uxtb	r3, r3
 8003084:	e00b      	b.n	800309e <HAL_TIM_IC_Start_IT+0x4a>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b08      	cmp	r3, #8
 800308a:	d104      	bne.n	8003096 <HAL_TIM_IC_Start_IT+0x42>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2240      	movs	r2, #64	; 0x40
 8003090:	5c9b      	ldrb	r3, [r3, r2]
 8003092:	b2db      	uxtb	r3, r3
 8003094:	e003      	b.n	800309e <HAL_TIM_IC_Start_IT+0x4a>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2241      	movs	r2, #65	; 0x41
 800309a:	5c9b      	ldrb	r3, [r3, r2]
 800309c:	b2db      	uxtb	r3, r3
 800309e:	220e      	movs	r2, #14
 80030a0:	18ba      	adds	r2, r7, r2
 80030a2:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d104      	bne.n	80030b4 <HAL_TIM_IC_Start_IT+0x60>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2242      	movs	r2, #66	; 0x42
 80030ae:	5c9b      	ldrb	r3, [r3, r2]
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	e013      	b.n	80030dc <HAL_TIM_IC_Start_IT+0x88>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	d104      	bne.n	80030c4 <HAL_TIM_IC_Start_IT+0x70>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2243      	movs	r2, #67	; 0x43
 80030be:	5c9b      	ldrb	r3, [r3, r2]
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	e00b      	b.n	80030dc <HAL_TIM_IC_Start_IT+0x88>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	2b08      	cmp	r3, #8
 80030c8:	d104      	bne.n	80030d4 <HAL_TIM_IC_Start_IT+0x80>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2244      	movs	r2, #68	; 0x44
 80030ce:	5c9b      	ldrb	r3, [r3, r2]
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	e003      	b.n	80030dc <HAL_TIM_IC_Start_IT+0x88>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2245      	movs	r2, #69	; 0x45
 80030d8:	5c9b      	ldrb	r3, [r3, r2]
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	210d      	movs	r1, #13
 80030de:	187a      	adds	r2, r7, r1
 80030e0:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80030e2:	230e      	movs	r3, #14
 80030e4:	18fb      	adds	r3, r7, r3
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d103      	bne.n	80030f4 <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80030ec:	187b      	adds	r3, r7, r1
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d001      	beq.n	80030f8 <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e0ac      	b.n	8003252 <HAL_TIM_IC_Start_IT+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d104      	bne.n	8003108 <HAL_TIM_IC_Start_IT+0xb4>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	223e      	movs	r2, #62	; 0x3e
 8003102:	2102      	movs	r1, #2
 8003104:	5499      	strb	r1, [r3, r2]
 8003106:	e013      	b.n	8003130 <HAL_TIM_IC_Start_IT+0xdc>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	2b04      	cmp	r3, #4
 800310c:	d104      	bne.n	8003118 <HAL_TIM_IC_Start_IT+0xc4>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	223f      	movs	r2, #63	; 0x3f
 8003112:	2102      	movs	r1, #2
 8003114:	5499      	strb	r1, [r3, r2]
 8003116:	e00b      	b.n	8003130 <HAL_TIM_IC_Start_IT+0xdc>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	2b08      	cmp	r3, #8
 800311c:	d104      	bne.n	8003128 <HAL_TIM_IC_Start_IT+0xd4>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2240      	movs	r2, #64	; 0x40
 8003122:	2102      	movs	r1, #2
 8003124:	5499      	strb	r1, [r3, r2]
 8003126:	e003      	b.n	8003130 <HAL_TIM_IC_Start_IT+0xdc>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2241      	movs	r2, #65	; 0x41
 800312c:	2102      	movs	r1, #2
 800312e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d104      	bne.n	8003140 <HAL_TIM_IC_Start_IT+0xec>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2242      	movs	r2, #66	; 0x42
 800313a:	2102      	movs	r1, #2
 800313c:	5499      	strb	r1, [r3, r2]
 800313e:	e013      	b.n	8003168 <HAL_TIM_IC_Start_IT+0x114>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	2b04      	cmp	r3, #4
 8003144:	d104      	bne.n	8003150 <HAL_TIM_IC_Start_IT+0xfc>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2243      	movs	r2, #67	; 0x43
 800314a:	2102      	movs	r1, #2
 800314c:	5499      	strb	r1, [r3, r2]
 800314e:	e00b      	b.n	8003168 <HAL_TIM_IC_Start_IT+0x114>
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	2b08      	cmp	r3, #8
 8003154:	d104      	bne.n	8003160 <HAL_TIM_IC_Start_IT+0x10c>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2244      	movs	r2, #68	; 0x44
 800315a:	2102      	movs	r1, #2
 800315c:	5499      	strb	r1, [r3, r2]
 800315e:	e003      	b.n	8003168 <HAL_TIM_IC_Start_IT+0x114>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2245      	movs	r2, #69	; 0x45
 8003164:	2102      	movs	r1, #2
 8003166:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	2b0c      	cmp	r3, #12
 800316c:	d02a      	beq.n	80031c4 <HAL_TIM_IC_Start_IT+0x170>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b0c      	cmp	r3, #12
 8003172:	d830      	bhi.n	80031d6 <HAL_TIM_IC_Start_IT+0x182>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	2b08      	cmp	r3, #8
 8003178:	d01b      	beq.n	80031b2 <HAL_TIM_IC_Start_IT+0x15e>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	2b08      	cmp	r3, #8
 800317e:	d82a      	bhi.n	80031d6 <HAL_TIM_IC_Start_IT+0x182>
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_TIM_IC_Start_IT+0x13a>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2b04      	cmp	r3, #4
 800318a:	d009      	beq.n	80031a0 <HAL_TIM_IC_Start_IT+0x14c>
 800318c:	e023      	b.n	80031d6 <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2102      	movs	r1, #2
 800319a:	430a      	orrs	r2, r1
 800319c:	60da      	str	r2, [r3, #12]
      break;
 800319e:	e01f      	b.n	80031e0 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2104      	movs	r1, #4
 80031ac:	430a      	orrs	r2, r1
 80031ae:	60da      	str	r2, [r3, #12]
      break;
 80031b0:	e016      	b.n	80031e0 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68da      	ldr	r2, [r3, #12]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2108      	movs	r1, #8
 80031be:	430a      	orrs	r2, r1
 80031c0:	60da      	str	r2, [r3, #12]
      break;
 80031c2:	e00d      	b.n	80031e0 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2110      	movs	r1, #16
 80031d0:	430a      	orrs	r2, r1
 80031d2:	60da      	str	r2, [r3, #12]
      break;
 80031d4:	e004      	b.n	80031e0 <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 80031d6:	230f      	movs	r3, #15
 80031d8:	18fb      	adds	r3, r7, r3
 80031da:	2201      	movs	r2, #1
 80031dc:	701a      	strb	r2, [r3, #0]
      break;
 80031de:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80031e0:	230f      	movs	r3, #15
 80031e2:	18fb      	adds	r3, r7, r3
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d130      	bne.n	800324c <HAL_TIM_IC_Start_IT+0x1f8>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6839      	ldr	r1, [r7, #0]
 80031f0:	2201      	movs	r2, #1
 80031f2:	0018      	movs	r0, r3
 80031f4:	f001 f858 	bl	80042a8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a17      	ldr	r2, [pc, #92]	; (800325c <HAL_TIM_IC_Start_IT+0x208>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d00a      	beq.n	8003218 <HAL_TIM_IC_Start_IT+0x1c4>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	2380      	movs	r3, #128	; 0x80
 8003208:	05db      	lsls	r3, r3, #23
 800320a:	429a      	cmp	r2, r3
 800320c:	d004      	beq.n	8003218 <HAL_TIM_IC_Start_IT+0x1c4>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a13      	ldr	r2, [pc, #76]	; (8003260 <HAL_TIM_IC_Start_IT+0x20c>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d111      	bne.n	800323c <HAL_TIM_IC_Start_IT+0x1e8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	2207      	movs	r2, #7
 8003220:	4013      	ands	r3, r2
 8003222:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	2b06      	cmp	r3, #6
 8003228:	d010      	beq.n	800324c <HAL_TIM_IC_Start_IT+0x1f8>
      {
        __HAL_TIM_ENABLE(htim);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2101      	movs	r1, #1
 8003236:	430a      	orrs	r2, r1
 8003238:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800323a:	e007      	b.n	800324c <HAL_TIM_IC_Start_IT+0x1f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2101      	movs	r1, #1
 8003248:	430a      	orrs	r2, r1
 800324a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800324c:	230f      	movs	r3, #15
 800324e:	18fb      	adds	r3, r7, r3
 8003250:	781b      	ldrb	r3, [r3, #0]
}
 8003252:	0018      	movs	r0, r3
 8003254:	46bd      	mov	sp, r7
 8003256:	b004      	add	sp, #16
 8003258:	bd80      	pop	{r7, pc}
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	40012c00 	.word	0x40012c00
 8003260:	40000400 	.word	0x40000400

08003264 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800326e:	230f      	movs	r3, #15
 8003270:	18fb      	adds	r3, r7, r3
 8003272:	2200      	movs	r2, #0
 8003274:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2b0c      	cmp	r3, #12
 800327a:	d02a      	beq.n	80032d2 <HAL_TIM_IC_Stop_IT+0x6e>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	2b0c      	cmp	r3, #12
 8003280:	d830      	bhi.n	80032e4 <HAL_TIM_IC_Stop_IT+0x80>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b08      	cmp	r3, #8
 8003286:	d01b      	beq.n	80032c0 <HAL_TIM_IC_Stop_IT+0x5c>
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	2b08      	cmp	r3, #8
 800328c:	d82a      	bhi.n	80032e4 <HAL_TIM_IC_Stop_IT+0x80>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <HAL_TIM_IC_Stop_IT+0x38>
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	2b04      	cmp	r3, #4
 8003298:	d009      	beq.n	80032ae <HAL_TIM_IC_Stop_IT+0x4a>
 800329a:	e023      	b.n	80032e4 <HAL_TIM_IC_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2102      	movs	r1, #2
 80032a8:	438a      	bics	r2, r1
 80032aa:	60da      	str	r2, [r3, #12]
      break;
 80032ac:	e01f      	b.n	80032ee <HAL_TIM_IC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2104      	movs	r1, #4
 80032ba:	438a      	bics	r2, r1
 80032bc:	60da      	str	r2, [r3, #12]
      break;
 80032be:	e016      	b.n	80032ee <HAL_TIM_IC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2108      	movs	r1, #8
 80032cc:	438a      	bics	r2, r1
 80032ce:	60da      	str	r2, [r3, #12]
      break;
 80032d0:	e00d      	b.n	80032ee <HAL_TIM_IC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68da      	ldr	r2, [r3, #12]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2110      	movs	r1, #16
 80032de:	438a      	bics	r2, r1
 80032e0:	60da      	str	r2, [r3, #12]
      break;
 80032e2:	e004      	b.n	80032ee <HAL_TIM_IC_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 80032e4:	230f      	movs	r3, #15
 80032e6:	18fb      	adds	r3, r7, r3
 80032e8:	2201      	movs	r2, #1
 80032ea:	701a      	strb	r2, [r3, #0]
      break;
 80032ec:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80032ee:	230f      	movs	r3, #15
 80032f0:	18fb      	adds	r3, r7, r3
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d152      	bne.n	800339e <HAL_TIM_IC_Stop_IT+0x13a>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6839      	ldr	r1, [r7, #0]
 80032fe:	2200      	movs	r2, #0
 8003300:	0018      	movs	r0, r3
 8003302:	f000 ffd1 	bl	80042a8 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	4a27      	ldr	r2, [pc, #156]	; (80033ac <HAL_TIM_IC_Stop_IT+0x148>)
 800330e:	4013      	ands	r3, r2
 8003310:	d10d      	bne.n	800332e <HAL_TIM_IC_Stop_IT+0xca>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	4a25      	ldr	r2, [pc, #148]	; (80033b0 <HAL_TIM_IC_Stop_IT+0x14c>)
 800331a:	4013      	ands	r3, r2
 800331c:	d107      	bne.n	800332e <HAL_TIM_IC_Stop_IT+0xca>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2101      	movs	r1, #1
 800332a:	438a      	bics	r2, r1
 800332c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d104      	bne.n	800333e <HAL_TIM_IC_Stop_IT+0xda>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	223e      	movs	r2, #62	; 0x3e
 8003338:	2101      	movs	r1, #1
 800333a:	5499      	strb	r1, [r3, r2]
 800333c:	e013      	b.n	8003366 <HAL_TIM_IC_Stop_IT+0x102>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b04      	cmp	r3, #4
 8003342:	d104      	bne.n	800334e <HAL_TIM_IC_Stop_IT+0xea>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	223f      	movs	r2, #63	; 0x3f
 8003348:	2101      	movs	r1, #1
 800334a:	5499      	strb	r1, [r3, r2]
 800334c:	e00b      	b.n	8003366 <HAL_TIM_IC_Stop_IT+0x102>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b08      	cmp	r3, #8
 8003352:	d104      	bne.n	800335e <HAL_TIM_IC_Stop_IT+0xfa>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2240      	movs	r2, #64	; 0x40
 8003358:	2101      	movs	r1, #1
 800335a:	5499      	strb	r1, [r3, r2]
 800335c:	e003      	b.n	8003366 <HAL_TIM_IC_Stop_IT+0x102>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2241      	movs	r2, #65	; 0x41
 8003362:	2101      	movs	r1, #1
 8003364:	5499      	strb	r1, [r3, r2]
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d104      	bne.n	8003376 <HAL_TIM_IC_Stop_IT+0x112>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2242      	movs	r2, #66	; 0x42
 8003370:	2101      	movs	r1, #1
 8003372:	5499      	strb	r1, [r3, r2]
 8003374:	e013      	b.n	800339e <HAL_TIM_IC_Stop_IT+0x13a>
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	2b04      	cmp	r3, #4
 800337a:	d104      	bne.n	8003386 <HAL_TIM_IC_Stop_IT+0x122>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2243      	movs	r2, #67	; 0x43
 8003380:	2101      	movs	r1, #1
 8003382:	5499      	strb	r1, [r3, r2]
 8003384:	e00b      	b.n	800339e <HAL_TIM_IC_Stop_IT+0x13a>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2b08      	cmp	r3, #8
 800338a:	d104      	bne.n	8003396 <HAL_TIM_IC_Stop_IT+0x132>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2244      	movs	r2, #68	; 0x44
 8003390:	2101      	movs	r1, #1
 8003392:	5499      	strb	r1, [r3, r2]
 8003394:	e003      	b.n	800339e <HAL_TIM_IC_Stop_IT+0x13a>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2245      	movs	r2, #69	; 0x45
 800339a:	2101      	movs	r1, #1
 800339c:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 800339e:	230f      	movs	r3, #15
 80033a0:	18fb      	adds	r3, r7, r3
 80033a2:	781b      	ldrb	r3, [r3, #0]
}
 80033a4:	0018      	movs	r0, r3
 80033a6:	46bd      	mov	sp, r7
 80033a8:	b004      	add	sp, #16
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	00001111 	.word	0x00001111
 80033b0:	00000444 	.word	0x00000444

080033b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	2202      	movs	r2, #2
 80033c4:	4013      	ands	r3, r2
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d124      	bne.n	8003414 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	2202      	movs	r2, #2
 80033d2:	4013      	ands	r3, r2
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d11d      	bne.n	8003414 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2203      	movs	r2, #3
 80033de:	4252      	negs	r2, r2
 80033e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	2203      	movs	r2, #3
 80033f0:	4013      	ands	r3, r2
 80033f2:	d004      	beq.n	80033fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	0018      	movs	r0, r3
 80033f8:	f7fd fbec 	bl	8000bd4 <HAL_TIM_IC_CaptureCallback>
 80033fc:	e007      	b.n	800340e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	0018      	movs	r0, r3
 8003402:	f000 fb2b 	bl	8003a5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	0018      	movs	r0, r3
 800340a:	f000 fb2f 	bl	8003a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	2204      	movs	r2, #4
 800341c:	4013      	ands	r3, r2
 800341e:	2b04      	cmp	r3, #4
 8003420:	d125      	bne.n	800346e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	2204      	movs	r2, #4
 800342a:	4013      	ands	r3, r2
 800342c:	2b04      	cmp	r3, #4
 800342e:	d11e      	bne.n	800346e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2205      	movs	r2, #5
 8003436:	4252      	negs	r2, r2
 8003438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2202      	movs	r2, #2
 800343e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699a      	ldr	r2, [r3, #24]
 8003446:	23c0      	movs	r3, #192	; 0xc0
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4013      	ands	r3, r2
 800344c:	d004      	beq.n	8003458 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	0018      	movs	r0, r3
 8003452:	f7fd fbbf 	bl	8000bd4 <HAL_TIM_IC_CaptureCallback>
 8003456:	e007      	b.n	8003468 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	0018      	movs	r0, r3
 800345c:	f000 fafe 	bl	8003a5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	0018      	movs	r0, r3
 8003464:	f000 fb02 	bl	8003a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	2208      	movs	r2, #8
 8003476:	4013      	ands	r3, r2
 8003478:	2b08      	cmp	r3, #8
 800347a:	d124      	bne.n	80034c6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	2208      	movs	r2, #8
 8003484:	4013      	ands	r3, r2
 8003486:	2b08      	cmp	r3, #8
 8003488:	d11d      	bne.n	80034c6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2209      	movs	r2, #9
 8003490:	4252      	negs	r2, r2
 8003492:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2204      	movs	r2, #4
 8003498:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	2203      	movs	r2, #3
 80034a2:	4013      	ands	r3, r2
 80034a4:	d004      	beq.n	80034b0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	0018      	movs	r0, r3
 80034aa:	f7fd fb93 	bl	8000bd4 <HAL_TIM_IC_CaptureCallback>
 80034ae:	e007      	b.n	80034c0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	0018      	movs	r0, r3
 80034b4:	f000 fad2 	bl	8003a5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	0018      	movs	r0, r3
 80034bc:	f000 fad6 	bl	8003a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	2210      	movs	r2, #16
 80034ce:	4013      	ands	r3, r2
 80034d0:	2b10      	cmp	r3, #16
 80034d2:	d125      	bne.n	8003520 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	2210      	movs	r2, #16
 80034dc:	4013      	ands	r3, r2
 80034de:	2b10      	cmp	r3, #16
 80034e0:	d11e      	bne.n	8003520 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2211      	movs	r2, #17
 80034e8:	4252      	negs	r2, r2
 80034ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2208      	movs	r2, #8
 80034f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	69da      	ldr	r2, [r3, #28]
 80034f8:	23c0      	movs	r3, #192	; 0xc0
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4013      	ands	r3, r2
 80034fe:	d004      	beq.n	800350a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	0018      	movs	r0, r3
 8003504:	f7fd fb66 	bl	8000bd4 <HAL_TIM_IC_CaptureCallback>
 8003508:	e007      	b.n	800351a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	0018      	movs	r0, r3
 800350e:	f000 faa5 	bl	8003a5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	0018      	movs	r0, r3
 8003516:	f000 faa9 	bl	8003a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	2201      	movs	r2, #1
 8003528:	4013      	ands	r3, r2
 800352a:	2b01      	cmp	r3, #1
 800352c:	d10f      	bne.n	800354e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	2201      	movs	r2, #1
 8003536:	4013      	ands	r3, r2
 8003538:	2b01      	cmp	r3, #1
 800353a:	d108      	bne.n	800354e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2202      	movs	r2, #2
 8003542:	4252      	negs	r2, r2
 8003544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	0018      	movs	r0, r3
 800354a:	f7fd fbbd 	bl	8000cc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	2280      	movs	r2, #128	; 0x80
 8003556:	4013      	ands	r3, r2
 8003558:	2b80      	cmp	r3, #128	; 0x80
 800355a:	d10f      	bne.n	800357c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	2280      	movs	r2, #128	; 0x80
 8003564:	4013      	ands	r3, r2
 8003566:	2b80      	cmp	r3, #128	; 0x80
 8003568:	d108      	bne.n	800357c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2281      	movs	r2, #129	; 0x81
 8003570:	4252      	negs	r2, r2
 8003572:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	0018      	movs	r0, r3
 8003578:	f000 ff78 	bl	800446c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	2240      	movs	r2, #64	; 0x40
 8003584:	4013      	ands	r3, r2
 8003586:	2b40      	cmp	r3, #64	; 0x40
 8003588:	d10f      	bne.n	80035aa <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	2240      	movs	r2, #64	; 0x40
 8003592:	4013      	ands	r3, r2
 8003594:	2b40      	cmp	r3, #64	; 0x40
 8003596:	d108      	bne.n	80035aa <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2241      	movs	r2, #65	; 0x41
 800359e:	4252      	negs	r2, r2
 80035a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	0018      	movs	r0, r3
 80035a6:	f000 fa69 	bl	8003a7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	2220      	movs	r2, #32
 80035b2:	4013      	ands	r3, r2
 80035b4:	2b20      	cmp	r3, #32
 80035b6:	d10f      	bne.n	80035d8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	2220      	movs	r2, #32
 80035c0:	4013      	ands	r3, r2
 80035c2:	2b20      	cmp	r3, #32
 80035c4:	d108      	bne.n	80035d8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2221      	movs	r2, #33	; 0x21
 80035cc:	4252      	negs	r2, r2
 80035ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	0018      	movs	r0, r3
 80035d4:	f000 ff42 	bl	800445c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035d8:	46c0      	nop			; (mov r8, r8)
 80035da:	46bd      	mov	sp, r7
 80035dc:	b002      	add	sp, #8
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035ec:	2317      	movs	r3, #23
 80035ee:	18fb      	adds	r3, r7, r3
 80035f0:	2200      	movs	r2, #0
 80035f2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	223c      	movs	r2, #60	; 0x3c
 80035f8:	5c9b      	ldrb	r3, [r3, r2]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d101      	bne.n	8003602 <HAL_TIM_IC_ConfigChannel+0x22>
 80035fe:	2302      	movs	r3, #2
 8003600:	e08c      	b.n	800371c <HAL_TIM_IC_ConfigChannel+0x13c>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	223c      	movs	r2, #60	; 0x3c
 8003606:	2101      	movs	r1, #1
 8003608:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d11b      	bne.n	8003648 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003620:	f000 fc8a 	bl	8003f38 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699a      	ldr	r2, [r3, #24]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	210c      	movs	r1, #12
 8003630:	438a      	bics	r2, r1
 8003632:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6999      	ldr	r1, [r3, #24]
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	689a      	ldr	r2, [r3, #8]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	619a      	str	r2, [r3, #24]
 8003646:	e062      	b.n	800370e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b04      	cmp	r3, #4
 800364c:	d11c      	bne.n	8003688 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800365e:	f000 fcef 	bl	8004040 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	699a      	ldr	r2, [r3, #24]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	492d      	ldr	r1, [pc, #180]	; (8003724 <HAL_TIM_IC_ConfigChannel+0x144>)
 800366e:	400a      	ands	r2, r1
 8003670:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6999      	ldr	r1, [r3, #24]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	021a      	lsls	r2, r3, #8
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	619a      	str	r2, [r3, #24]
 8003686:	e042      	b.n	800370e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b08      	cmp	r3, #8
 800368c:	d11b      	bne.n	80036c6 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800369e:	f000 fd43 	bl	8004128 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	69da      	ldr	r2, [r3, #28]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	210c      	movs	r1, #12
 80036ae:	438a      	bics	r2, r1
 80036b0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	69d9      	ldr	r1, [r3, #28]
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	61da      	str	r2, [r3, #28]
 80036c4:	e023      	b.n	800370e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b0c      	cmp	r3, #12
 80036ca:	d11c      	bne.n	8003706 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80036dc:	f000 fd64 	bl	80041a8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	69da      	ldr	r2, [r3, #28]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	490e      	ldr	r1, [pc, #56]	; (8003724 <HAL_TIM_IC_ConfigChannel+0x144>)
 80036ec:	400a      	ands	r2, r1
 80036ee:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	69d9      	ldr	r1, [r3, #28]
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	021a      	lsls	r2, r3, #8
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	61da      	str	r2, [r3, #28]
 8003704:	e003      	b.n	800370e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8003706:	2317      	movs	r3, #23
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	2201      	movs	r2, #1
 800370c:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	223c      	movs	r2, #60	; 0x3c
 8003712:	2100      	movs	r1, #0
 8003714:	5499      	strb	r1, [r3, r2]

  return status;
 8003716:	2317      	movs	r3, #23
 8003718:	18fb      	adds	r3, r7, r3
 800371a:	781b      	ldrb	r3, [r3, #0]
}
 800371c:	0018      	movs	r0, r3
 800371e:	46bd      	mov	sp, r7
 8003720:	b006      	add	sp, #24
 8003722:	bd80      	pop	{r7, pc}
 8003724:	fffff3ff 	.word	0xfffff3ff

08003728 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003734:	2317      	movs	r3, #23
 8003736:	18fb      	adds	r3, r7, r3
 8003738:	2200      	movs	r2, #0
 800373a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	223c      	movs	r2, #60	; 0x3c
 8003740:	5c9b      	ldrb	r3, [r3, r2]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_TIM_PWM_ConfigChannel+0x22>
 8003746:	2302      	movs	r3, #2
 8003748:	e0ad      	b.n	80038a6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	223c      	movs	r2, #60	; 0x3c
 800374e:	2101      	movs	r1, #1
 8003750:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b0c      	cmp	r3, #12
 8003756:	d100      	bne.n	800375a <HAL_TIM_PWM_ConfigChannel+0x32>
 8003758:	e076      	b.n	8003848 <HAL_TIM_PWM_ConfigChannel+0x120>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b0c      	cmp	r3, #12
 800375e:	d900      	bls.n	8003762 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003760:	e095      	b.n	800388e <HAL_TIM_PWM_ConfigChannel+0x166>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b08      	cmp	r3, #8
 8003766:	d04e      	beq.n	8003806 <HAL_TIM_PWM_ConfigChannel+0xde>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b08      	cmp	r3, #8
 800376c:	d900      	bls.n	8003770 <HAL_TIM_PWM_ConfigChannel+0x48>
 800376e:	e08e      	b.n	800388e <HAL_TIM_PWM_ConfigChannel+0x166>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_TIM_PWM_ConfigChannel+0x56>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b04      	cmp	r3, #4
 800377a:	d021      	beq.n	80037c0 <HAL_TIM_PWM_ConfigChannel+0x98>
 800377c:	e087      	b.n	800388e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	0011      	movs	r1, r2
 8003786:	0018      	movs	r0, r3
 8003788:	f000 f9f6 	bl	8003b78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	699a      	ldr	r2, [r3, #24]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2108      	movs	r1, #8
 8003798:	430a      	orrs	r2, r1
 800379a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699a      	ldr	r2, [r3, #24]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2104      	movs	r1, #4
 80037a8:	438a      	bics	r2, r1
 80037aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6999      	ldr	r1, [r3, #24]
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	691a      	ldr	r2, [r3, #16]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	619a      	str	r2, [r3, #24]
      break;
 80037be:	e06b      	b.n	8003898 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	0011      	movs	r1, r2
 80037c8:	0018      	movs	r0, r3
 80037ca:	f000 fa53 	bl	8003c74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	699a      	ldr	r2, [r3, #24]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2180      	movs	r1, #128	; 0x80
 80037da:	0109      	lsls	r1, r1, #4
 80037dc:	430a      	orrs	r2, r1
 80037de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699a      	ldr	r2, [r3, #24]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4931      	ldr	r1, [pc, #196]	; (80038b0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80037ec:	400a      	ands	r2, r1
 80037ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6999      	ldr	r1, [r3, #24]
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	021a      	lsls	r2, r3, #8
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	430a      	orrs	r2, r1
 8003802:	619a      	str	r2, [r3, #24]
      break;
 8003804:	e048      	b.n	8003898 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	0011      	movs	r1, r2
 800380e:	0018      	movs	r0, r3
 8003810:	f000 faae 	bl	8003d70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	69da      	ldr	r2, [r3, #28]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2108      	movs	r1, #8
 8003820:	430a      	orrs	r2, r1
 8003822:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	69da      	ldr	r2, [r3, #28]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2104      	movs	r1, #4
 8003830:	438a      	bics	r2, r1
 8003832:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	69d9      	ldr	r1, [r3, #28]
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	691a      	ldr	r2, [r3, #16]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	61da      	str	r2, [r3, #28]
      break;
 8003846:	e027      	b.n	8003898 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	0011      	movs	r1, r2
 8003850:	0018      	movs	r0, r3
 8003852:	f000 fb0d 	bl	8003e70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	69da      	ldr	r2, [r3, #28]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2180      	movs	r1, #128	; 0x80
 8003862:	0109      	lsls	r1, r1, #4
 8003864:	430a      	orrs	r2, r1
 8003866:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	69da      	ldr	r2, [r3, #28]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	490f      	ldr	r1, [pc, #60]	; (80038b0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003874:	400a      	ands	r2, r1
 8003876:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	69d9      	ldr	r1, [r3, #28]
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	021a      	lsls	r2, r3, #8
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	61da      	str	r2, [r3, #28]
      break;
 800388c:	e004      	b.n	8003898 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800388e:	2317      	movs	r3, #23
 8003890:	18fb      	adds	r3, r7, r3
 8003892:	2201      	movs	r2, #1
 8003894:	701a      	strb	r2, [r3, #0]
      break;
 8003896:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	223c      	movs	r2, #60	; 0x3c
 800389c:	2100      	movs	r1, #0
 800389e:	5499      	strb	r1, [r3, r2]

  return status;
 80038a0:	2317      	movs	r3, #23
 80038a2:	18fb      	adds	r3, r7, r3
 80038a4:	781b      	ldrb	r3, [r3, #0]
}
 80038a6:	0018      	movs	r0, r3
 80038a8:	46bd      	mov	sp, r7
 80038aa:	b006      	add	sp, #24
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	46c0      	nop			; (mov r8, r8)
 80038b0:	fffffbff 	.word	0xfffffbff

080038b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038be:	230f      	movs	r3, #15
 80038c0:	18fb      	adds	r3, r7, r3
 80038c2:	2200      	movs	r2, #0
 80038c4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	223c      	movs	r2, #60	; 0x3c
 80038ca:	5c9b      	ldrb	r3, [r3, r2]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d101      	bne.n	80038d4 <HAL_TIM_ConfigClockSource+0x20>
 80038d0:	2302      	movs	r3, #2
 80038d2:	e0bc      	b.n	8003a4e <HAL_TIM_ConfigClockSource+0x19a>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	223c      	movs	r2, #60	; 0x3c
 80038d8:	2101      	movs	r1, #1
 80038da:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	223d      	movs	r2, #61	; 0x3d
 80038e0:	2102      	movs	r1, #2
 80038e2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2277      	movs	r2, #119	; 0x77
 80038f0:	4393      	bics	r3, r2
 80038f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	4a58      	ldr	r2, [pc, #352]	; (8003a58 <HAL_TIM_ConfigClockSource+0x1a4>)
 80038f8:	4013      	ands	r3, r2
 80038fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2280      	movs	r2, #128	; 0x80
 800390a:	0192      	lsls	r2, r2, #6
 800390c:	4293      	cmp	r3, r2
 800390e:	d040      	beq.n	8003992 <HAL_TIM_ConfigClockSource+0xde>
 8003910:	2280      	movs	r2, #128	; 0x80
 8003912:	0192      	lsls	r2, r2, #6
 8003914:	4293      	cmp	r3, r2
 8003916:	d900      	bls.n	800391a <HAL_TIM_ConfigClockSource+0x66>
 8003918:	e088      	b.n	8003a2c <HAL_TIM_ConfigClockSource+0x178>
 800391a:	2280      	movs	r2, #128	; 0x80
 800391c:	0152      	lsls	r2, r2, #5
 800391e:	4293      	cmp	r3, r2
 8003920:	d100      	bne.n	8003924 <HAL_TIM_ConfigClockSource+0x70>
 8003922:	e088      	b.n	8003a36 <HAL_TIM_ConfigClockSource+0x182>
 8003924:	2280      	movs	r2, #128	; 0x80
 8003926:	0152      	lsls	r2, r2, #5
 8003928:	4293      	cmp	r3, r2
 800392a:	d900      	bls.n	800392e <HAL_TIM_ConfigClockSource+0x7a>
 800392c:	e07e      	b.n	8003a2c <HAL_TIM_ConfigClockSource+0x178>
 800392e:	2b70      	cmp	r3, #112	; 0x70
 8003930:	d018      	beq.n	8003964 <HAL_TIM_ConfigClockSource+0xb0>
 8003932:	d900      	bls.n	8003936 <HAL_TIM_ConfigClockSource+0x82>
 8003934:	e07a      	b.n	8003a2c <HAL_TIM_ConfigClockSource+0x178>
 8003936:	2b60      	cmp	r3, #96	; 0x60
 8003938:	d04f      	beq.n	80039da <HAL_TIM_ConfigClockSource+0x126>
 800393a:	d900      	bls.n	800393e <HAL_TIM_ConfigClockSource+0x8a>
 800393c:	e076      	b.n	8003a2c <HAL_TIM_ConfigClockSource+0x178>
 800393e:	2b50      	cmp	r3, #80	; 0x50
 8003940:	d03b      	beq.n	80039ba <HAL_TIM_ConfigClockSource+0x106>
 8003942:	d900      	bls.n	8003946 <HAL_TIM_ConfigClockSource+0x92>
 8003944:	e072      	b.n	8003a2c <HAL_TIM_ConfigClockSource+0x178>
 8003946:	2b40      	cmp	r3, #64	; 0x40
 8003948:	d057      	beq.n	80039fa <HAL_TIM_ConfigClockSource+0x146>
 800394a:	d900      	bls.n	800394e <HAL_TIM_ConfigClockSource+0x9a>
 800394c:	e06e      	b.n	8003a2c <HAL_TIM_ConfigClockSource+0x178>
 800394e:	2b30      	cmp	r3, #48	; 0x30
 8003950:	d063      	beq.n	8003a1a <HAL_TIM_ConfigClockSource+0x166>
 8003952:	d86b      	bhi.n	8003a2c <HAL_TIM_ConfigClockSource+0x178>
 8003954:	2b20      	cmp	r3, #32
 8003956:	d060      	beq.n	8003a1a <HAL_TIM_ConfigClockSource+0x166>
 8003958:	d868      	bhi.n	8003a2c <HAL_TIM_ConfigClockSource+0x178>
 800395a:	2b00      	cmp	r3, #0
 800395c:	d05d      	beq.n	8003a1a <HAL_TIM_ConfigClockSource+0x166>
 800395e:	2b10      	cmp	r3, #16
 8003960:	d05b      	beq.n	8003a1a <HAL_TIM_ConfigClockSource+0x166>
 8003962:	e063      	b.n	8003a2c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003974:	f000 fc78 	bl	8004268 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2277      	movs	r2, #119	; 0x77
 8003984:	4313      	orrs	r3, r2
 8003986:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	609a      	str	r2, [r3, #8]
      break;
 8003990:	e052      	b.n	8003a38 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039a2:	f000 fc61 	bl	8004268 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689a      	ldr	r2, [r3, #8]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2180      	movs	r1, #128	; 0x80
 80039b2:	01c9      	lsls	r1, r1, #7
 80039b4:	430a      	orrs	r2, r1
 80039b6:	609a      	str	r2, [r3, #8]
      break;
 80039b8:	e03e      	b.n	8003a38 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039c6:	001a      	movs	r2, r3
 80039c8:	f000 fb0c 	bl	8003fe4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2150      	movs	r1, #80	; 0x50
 80039d2:	0018      	movs	r0, r3
 80039d4:	f000 fc2e 	bl	8004234 <TIM_ITRx_SetConfig>
      break;
 80039d8:	e02e      	b.n	8003a38 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039e6:	001a      	movs	r2, r3
 80039e8:	f000 fb6c 	bl	80040c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2160      	movs	r1, #96	; 0x60
 80039f2:	0018      	movs	r0, r3
 80039f4:	f000 fc1e 	bl	8004234 <TIM_ITRx_SetConfig>
      break;
 80039f8:	e01e      	b.n	8003a38 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a06:	001a      	movs	r2, r3
 8003a08:	f000 faec 	bl	8003fe4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2140      	movs	r1, #64	; 0x40
 8003a12:	0018      	movs	r0, r3
 8003a14:	f000 fc0e 	bl	8004234 <TIM_ITRx_SetConfig>
      break;
 8003a18:	e00e      	b.n	8003a38 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	0019      	movs	r1, r3
 8003a24:	0010      	movs	r0, r2
 8003a26:	f000 fc05 	bl	8004234 <TIM_ITRx_SetConfig>
      break;
 8003a2a:	e005      	b.n	8003a38 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003a2c:	230f      	movs	r3, #15
 8003a2e:	18fb      	adds	r3, r7, r3
 8003a30:	2201      	movs	r2, #1
 8003a32:	701a      	strb	r2, [r3, #0]
      break;
 8003a34:	e000      	b.n	8003a38 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003a36:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	223d      	movs	r2, #61	; 0x3d
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	223c      	movs	r2, #60	; 0x3c
 8003a44:	2100      	movs	r1, #0
 8003a46:	5499      	strb	r1, [r3, r2]

  return status;
 8003a48:	230f      	movs	r3, #15
 8003a4a:	18fb      	adds	r3, r7, r3
 8003a4c:	781b      	ldrb	r3, [r3, #0]
}
 8003a4e:	0018      	movs	r0, r3
 8003a50:	46bd      	mov	sp, r7
 8003a52:	b004      	add	sp, #16
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	46c0      	nop			; (mov r8, r8)
 8003a58:	ffff00ff 	.word	0xffff00ff

08003a5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a64:	46c0      	nop			; (mov r8, r8)
 8003a66:	46bd      	mov	sp, r7
 8003a68:	b002      	add	sp, #8
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a74:	46c0      	nop			; (mov r8, r8)
 8003a76:	46bd      	mov	sp, r7
 8003a78:	b002      	add	sp, #8
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a84:	46c0      	nop			; (mov r8, r8)
 8003a86:	46bd      	mov	sp, r7
 8003a88:	b002      	add	sp, #8
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a30      	ldr	r2, [pc, #192]	; (8003b60 <TIM_Base_SetConfig+0xd4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d008      	beq.n	8003ab6 <TIM_Base_SetConfig+0x2a>
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	2380      	movs	r3, #128	; 0x80
 8003aa8:	05db      	lsls	r3, r3, #23
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d003      	beq.n	8003ab6 <TIM_Base_SetConfig+0x2a>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a2c      	ldr	r2, [pc, #176]	; (8003b64 <TIM_Base_SetConfig+0xd8>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d108      	bne.n	8003ac8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2270      	movs	r2, #112	; 0x70
 8003aba:	4393      	bics	r3, r2
 8003abc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a25      	ldr	r2, [pc, #148]	; (8003b60 <TIM_Base_SetConfig+0xd4>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d014      	beq.n	8003afa <TIM_Base_SetConfig+0x6e>
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	2380      	movs	r3, #128	; 0x80
 8003ad4:	05db      	lsls	r3, r3, #23
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d00f      	beq.n	8003afa <TIM_Base_SetConfig+0x6e>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a21      	ldr	r2, [pc, #132]	; (8003b64 <TIM_Base_SetConfig+0xd8>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d00b      	beq.n	8003afa <TIM_Base_SetConfig+0x6e>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a20      	ldr	r2, [pc, #128]	; (8003b68 <TIM_Base_SetConfig+0xdc>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d007      	beq.n	8003afa <TIM_Base_SetConfig+0x6e>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a1f      	ldr	r2, [pc, #124]	; (8003b6c <TIM_Base_SetConfig+0xe0>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d003      	beq.n	8003afa <TIM_Base_SetConfig+0x6e>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a1e      	ldr	r2, [pc, #120]	; (8003b70 <TIM_Base_SetConfig+0xe4>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d108      	bne.n	8003b0c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	4a1d      	ldr	r2, [pc, #116]	; (8003b74 <TIM_Base_SetConfig+0xe8>)
 8003afe:	4013      	ands	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2280      	movs	r2, #128	; 0x80
 8003b10:	4393      	bics	r3, r2
 8003b12:	001a      	movs	r2, r3
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	689a      	ldr	r2, [r3, #8]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a0a      	ldr	r2, [pc, #40]	; (8003b60 <TIM_Base_SetConfig+0xd4>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d007      	beq.n	8003b4a <TIM_Base_SetConfig+0xbe>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a0b      	ldr	r2, [pc, #44]	; (8003b6c <TIM_Base_SetConfig+0xe0>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d003      	beq.n	8003b4a <TIM_Base_SetConfig+0xbe>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a0a      	ldr	r2, [pc, #40]	; (8003b70 <TIM_Base_SetConfig+0xe4>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d103      	bne.n	8003b52 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	691a      	ldr	r2, [r3, #16]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	615a      	str	r2, [r3, #20]
}
 8003b58:	46c0      	nop			; (mov r8, r8)
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	b004      	add	sp, #16
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	40012c00 	.word	0x40012c00
 8003b64:	40000400 	.word	0x40000400
 8003b68:	40002000 	.word	0x40002000
 8003b6c:	40014400 	.word	0x40014400
 8003b70:	40014800 	.word	0x40014800
 8003b74:	fffffcff 	.word	0xfffffcff

08003b78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	2201      	movs	r2, #1
 8003b88:	4393      	bics	r3, r2
 8003b8a:	001a      	movs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2270      	movs	r2, #112	; 0x70
 8003ba6:	4393      	bics	r3, r2
 8003ba8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2203      	movs	r2, #3
 8003bae:	4393      	bics	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	4393      	bics	r3, r2
 8003bc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a23      	ldr	r2, [pc, #140]	; (8003c60 <TIM_OC1_SetConfig+0xe8>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d007      	beq.n	8003be6 <TIM_OC1_SetConfig+0x6e>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a22      	ldr	r2, [pc, #136]	; (8003c64 <TIM_OC1_SetConfig+0xec>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d003      	beq.n	8003be6 <TIM_OC1_SetConfig+0x6e>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a21      	ldr	r2, [pc, #132]	; (8003c68 <TIM_OC1_SetConfig+0xf0>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d10c      	bne.n	8003c00 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	2208      	movs	r2, #8
 8003bea:	4393      	bics	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	2204      	movs	r2, #4
 8003bfc:	4393      	bics	r3, r2
 8003bfe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a17      	ldr	r2, [pc, #92]	; (8003c60 <TIM_OC1_SetConfig+0xe8>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d007      	beq.n	8003c18 <TIM_OC1_SetConfig+0xa0>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a16      	ldr	r2, [pc, #88]	; (8003c64 <TIM_OC1_SetConfig+0xec>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d003      	beq.n	8003c18 <TIM_OC1_SetConfig+0xa0>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a15      	ldr	r2, [pc, #84]	; (8003c68 <TIM_OC1_SetConfig+0xf0>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d111      	bne.n	8003c3c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	4a14      	ldr	r2, [pc, #80]	; (8003c6c <TIM_OC1_SetConfig+0xf4>)
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	4a13      	ldr	r2, [pc, #76]	; (8003c70 <TIM_OC1_SetConfig+0xf8>)
 8003c24:	4013      	ands	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	621a      	str	r2, [r3, #32]
}
 8003c56:	46c0      	nop			; (mov r8, r8)
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	b006      	add	sp, #24
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	46c0      	nop			; (mov r8, r8)
 8003c60:	40012c00 	.word	0x40012c00
 8003c64:	40014400 	.word	0x40014400
 8003c68:	40014800 	.word	0x40014800
 8003c6c:	fffffeff 	.word	0xfffffeff
 8003c70:	fffffdff 	.word	0xfffffdff

08003c74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	2210      	movs	r2, #16
 8003c84:	4393      	bics	r3, r2
 8003c86:	001a      	movs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	4a2c      	ldr	r2, [pc, #176]	; (8003d54 <TIM_OC2_SetConfig+0xe0>)
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	4a2b      	ldr	r2, [pc, #172]	; (8003d58 <TIM_OC2_SetConfig+0xe4>)
 8003caa:	4013      	ands	r3, r2
 8003cac:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	021b      	lsls	r3, r3, #8
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	4393      	bics	r3, r2
 8003cc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	011b      	lsls	r3, r3, #4
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a22      	ldr	r2, [pc, #136]	; (8003d5c <TIM_OC2_SetConfig+0xe8>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d10d      	bne.n	8003cf2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	2280      	movs	r2, #128	; 0x80
 8003cda:	4393      	bics	r3, r2
 8003cdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	011b      	lsls	r3, r3, #4
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	2240      	movs	r2, #64	; 0x40
 8003cee:	4393      	bics	r3, r2
 8003cf0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a19      	ldr	r2, [pc, #100]	; (8003d5c <TIM_OC2_SetConfig+0xe8>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d007      	beq.n	8003d0a <TIM_OC2_SetConfig+0x96>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a18      	ldr	r2, [pc, #96]	; (8003d60 <TIM_OC2_SetConfig+0xec>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d003      	beq.n	8003d0a <TIM_OC2_SetConfig+0x96>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a17      	ldr	r2, [pc, #92]	; (8003d64 <TIM_OC2_SetConfig+0xf0>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d113      	bne.n	8003d32 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	4a16      	ldr	r2, [pc, #88]	; (8003d68 <TIM_OC2_SetConfig+0xf4>)
 8003d0e:	4013      	ands	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	4a15      	ldr	r2, [pc, #84]	; (8003d6c <TIM_OC2_SetConfig+0xf8>)
 8003d16:	4013      	ands	r3, r2
 8003d18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	621a      	str	r2, [r3, #32]
}
 8003d4c:	46c0      	nop			; (mov r8, r8)
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	b006      	add	sp, #24
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	ffff8fff 	.word	0xffff8fff
 8003d58:	fffffcff 	.word	0xfffffcff
 8003d5c:	40012c00 	.word	0x40012c00
 8003d60:	40014400 	.word	0x40014400
 8003d64:	40014800 	.word	0x40014800
 8003d68:	fffffbff 	.word	0xfffffbff
 8003d6c:	fffff7ff 	.word	0xfffff7ff

08003d70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	4a33      	ldr	r2, [pc, #204]	; (8003e4c <TIM_OC3_SetConfig+0xdc>)
 8003d80:	401a      	ands	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2270      	movs	r2, #112	; 0x70
 8003d9c:	4393      	bics	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2203      	movs	r2, #3
 8003da4:	4393      	bics	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	4a26      	ldr	r2, [pc, #152]	; (8003e50 <TIM_OC3_SetConfig+0xe0>)
 8003db6:	4013      	ands	r3, r2
 8003db8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	021b      	lsls	r3, r3, #8
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a22      	ldr	r2, [pc, #136]	; (8003e54 <TIM_OC3_SetConfig+0xe4>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d10d      	bne.n	8003dea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	4a21      	ldr	r2, [pc, #132]	; (8003e58 <TIM_OC3_SetConfig+0xe8>)
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	021b      	lsls	r3, r3, #8
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	4a1d      	ldr	r2, [pc, #116]	; (8003e5c <TIM_OC3_SetConfig+0xec>)
 8003de6:	4013      	ands	r3, r2
 8003de8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a19      	ldr	r2, [pc, #100]	; (8003e54 <TIM_OC3_SetConfig+0xe4>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d007      	beq.n	8003e02 <TIM_OC3_SetConfig+0x92>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a1a      	ldr	r2, [pc, #104]	; (8003e60 <TIM_OC3_SetConfig+0xf0>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d003      	beq.n	8003e02 <TIM_OC3_SetConfig+0x92>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a19      	ldr	r2, [pc, #100]	; (8003e64 <TIM_OC3_SetConfig+0xf4>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d113      	bne.n	8003e2a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	4a18      	ldr	r2, [pc, #96]	; (8003e68 <TIM_OC3_SetConfig+0xf8>)
 8003e06:	4013      	ands	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	4a17      	ldr	r2, [pc, #92]	; (8003e6c <TIM_OC3_SetConfig+0xfc>)
 8003e0e:	4013      	ands	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	621a      	str	r2, [r3, #32]
}
 8003e44:	46c0      	nop			; (mov r8, r8)
 8003e46:	46bd      	mov	sp, r7
 8003e48:	b006      	add	sp, #24
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	fffffeff 	.word	0xfffffeff
 8003e50:	fffffdff 	.word	0xfffffdff
 8003e54:	40012c00 	.word	0x40012c00
 8003e58:	fffff7ff 	.word	0xfffff7ff
 8003e5c:	fffffbff 	.word	0xfffffbff
 8003e60:	40014400 	.word	0x40014400
 8003e64:	40014800 	.word	0x40014800
 8003e68:	ffffefff 	.word	0xffffefff
 8003e6c:	ffffdfff 	.word	0xffffdfff

08003e70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	4a26      	ldr	r2, [pc, #152]	; (8003f18 <TIM_OC4_SetConfig+0xa8>)
 8003e80:	401a      	ands	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4a20      	ldr	r2, [pc, #128]	; (8003f1c <TIM_OC4_SetConfig+0xac>)
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	4a1f      	ldr	r2, [pc, #124]	; (8003f20 <TIM_OC4_SetConfig+0xb0>)
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	021b      	lsls	r3, r3, #8
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	4a1b      	ldr	r2, [pc, #108]	; (8003f24 <TIM_OC4_SetConfig+0xb4>)
 8003eb8:	4013      	ands	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	031b      	lsls	r3, r3, #12
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a17      	ldr	r2, [pc, #92]	; (8003f28 <TIM_OC4_SetConfig+0xb8>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d007      	beq.n	8003ee0 <TIM_OC4_SetConfig+0x70>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a16      	ldr	r2, [pc, #88]	; (8003f2c <TIM_OC4_SetConfig+0xbc>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d003      	beq.n	8003ee0 <TIM_OC4_SetConfig+0x70>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a15      	ldr	r2, [pc, #84]	; (8003f30 <TIM_OC4_SetConfig+0xc0>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d109      	bne.n	8003ef4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	4a14      	ldr	r2, [pc, #80]	; (8003f34 <TIM_OC4_SetConfig+0xc4>)
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	019b      	lsls	r3, r3, #6
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	621a      	str	r2, [r3, #32]
}
 8003f0e:	46c0      	nop			; (mov r8, r8)
 8003f10:	46bd      	mov	sp, r7
 8003f12:	b006      	add	sp, #24
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	46c0      	nop			; (mov r8, r8)
 8003f18:	ffffefff 	.word	0xffffefff
 8003f1c:	ffff8fff 	.word	0xffff8fff
 8003f20:	fffffcff 	.word	0xfffffcff
 8003f24:	ffffdfff 	.word	0xffffdfff
 8003f28:	40012c00 	.word	0x40012c00
 8003f2c:	40014400 	.word	0x40014400
 8003f30:	40014800 	.word	0x40014800
 8003f34:	ffffbfff 	.word	0xffffbfff

08003f38 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
 8003f44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	4393      	bics	r3, r2
 8003f4e:	001a      	movs	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4a1e      	ldr	r2, [pc, #120]	; (8003fdc <TIM_TI1_SetConfig+0xa4>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d008      	beq.n	8003f7a <TIM_TI1_SetConfig+0x42>
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	2380      	movs	r3, #128	; 0x80
 8003f6c:	05db      	lsls	r3, r3, #23
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d003      	beq.n	8003f7a <TIM_TI1_SetConfig+0x42>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4a1a      	ldr	r2, [pc, #104]	; (8003fe0 <TIM_TI1_SetConfig+0xa8>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d101      	bne.n	8003f7e <TIM_TI1_SetConfig+0x46>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e000      	b.n	8003f80 <TIM_TI1_SetConfig+0x48>
 8003f7e:	2300      	movs	r3, #0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d008      	beq.n	8003f96 <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	2203      	movs	r2, #3
 8003f88:	4393      	bics	r3, r2
 8003f8a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	e003      	b.n	8003f9e <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	22f0      	movs	r2, #240	; 0xf0
 8003fa2:	4393      	bics	r3, r2
 8003fa4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	011b      	lsls	r3, r3, #4
 8003faa:	22ff      	movs	r2, #255	; 0xff
 8003fac:	4013      	ands	r3, r2
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	220a      	movs	r2, #10
 8003fb8:	4393      	bics	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	220a      	movs	r2, #10
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	621a      	str	r2, [r3, #32]
}
 8003fd4:	46c0      	nop			; (mov r8, r8)
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	b006      	add	sp, #24
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	40012c00 	.word	0x40012c00
 8003fe0:	40000400 	.word	0x40000400

08003fe4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	4393      	bics	r3, r2
 8003ffe:	001a      	movs	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	22f0      	movs	r2, #240	; 0xf0
 800400e:	4393      	bics	r3, r2
 8004010:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	011b      	lsls	r3, r3, #4
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	4313      	orrs	r3, r2
 800401a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	220a      	movs	r2, #10
 8004020:	4393      	bics	r3, r2
 8004022:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	4313      	orrs	r3, r2
 800402a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	621a      	str	r2, [r3, #32]
}
 8004038:	46c0      	nop			; (mov r8, r8)
 800403a:	46bd      	mov	sp, r7
 800403c:	b006      	add	sp, #24
 800403e:	bd80      	pop	{r7, pc}

08004040 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
 800404c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	2210      	movs	r2, #16
 8004054:	4393      	bics	r3, r2
 8004056:	001a      	movs	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	4a14      	ldr	r2, [pc, #80]	; (80040bc <TIM_TI2_SetConfig+0x7c>)
 800406c:	4013      	ands	r3, r2
 800406e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	021b      	lsls	r3, r3, #8
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	4313      	orrs	r3, r2
 8004078:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	4a10      	ldr	r2, [pc, #64]	; (80040c0 <TIM_TI2_SetConfig+0x80>)
 800407e:	4013      	ands	r3, r2
 8004080:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	031b      	lsls	r3, r3, #12
 8004086:	041b      	lsls	r3, r3, #16
 8004088:	0c1b      	lsrs	r3, r3, #16
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	4313      	orrs	r3, r2
 800408e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	22a0      	movs	r2, #160	; 0xa0
 8004094:	4393      	bics	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	011b      	lsls	r3, r3, #4
 800409c:	22a0      	movs	r2, #160	; 0xa0
 800409e:	4013      	ands	r3, r2
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	621a      	str	r2, [r3, #32]
}
 80040b2:	46c0      	nop			; (mov r8, r8)
 80040b4:	46bd      	mov	sp, r7
 80040b6:	b006      	add	sp, #24
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	46c0      	nop			; (mov r8, r8)
 80040bc:	fffffcff 	.word	0xfffffcff
 80040c0:	ffff0fff 	.word	0xffff0fff

080040c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	2210      	movs	r2, #16
 80040d6:	4393      	bics	r3, r2
 80040d8:	001a      	movs	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	4a0d      	ldr	r2, [pc, #52]	; (8004124 <TIM_TI2_ConfigInputStage+0x60>)
 80040ee:	4013      	ands	r3, r2
 80040f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	031b      	lsls	r3, r3, #12
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	22a0      	movs	r2, #160	; 0xa0
 8004100:	4393      	bics	r3, r2
 8004102:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	011b      	lsls	r3, r3, #4
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	4313      	orrs	r3, r2
 800410c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	621a      	str	r2, [r3, #32]
}
 800411a:	46c0      	nop			; (mov r8, r8)
 800411c:	46bd      	mov	sp, r7
 800411e:	b006      	add	sp, #24
 8004120:	bd80      	pop	{r7, pc}
 8004122:	46c0      	nop			; (mov r8, r8)
 8004124:	ffff0fff 	.word	0xffff0fff

08004128 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
 8004134:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	4a19      	ldr	r2, [pc, #100]	; (80041a0 <TIM_TI3_SetConfig+0x78>)
 800413c:	401a      	ands	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	2203      	movs	r2, #3
 8004152:	4393      	bics	r3, r2
 8004154:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4313      	orrs	r3, r2
 800415c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	22f0      	movs	r2, #240	; 0xf0
 8004162:	4393      	bics	r3, r2
 8004164:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	011b      	lsls	r3, r3, #4
 800416a:	22ff      	movs	r2, #255	; 0xff
 800416c:	4013      	ands	r3, r2
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	4313      	orrs	r3, r2
 8004172:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	4a0b      	ldr	r2, [pc, #44]	; (80041a4 <TIM_TI3_SetConfig+0x7c>)
 8004178:	4013      	ands	r3, r2
 800417a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	021a      	lsls	r2, r3, #8
 8004180:	23a0      	movs	r3, #160	; 0xa0
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	4013      	ands	r3, r2
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	4313      	orrs	r3, r2
 800418a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	621a      	str	r2, [r3, #32]
}
 8004198:	46c0      	nop			; (mov r8, r8)
 800419a:	46bd      	mov	sp, r7
 800419c:	b006      	add	sp, #24
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	fffffeff 	.word	0xfffffeff
 80041a4:	fffff5ff 	.word	0xfffff5ff

080041a8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
 80041b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	4a1a      	ldr	r2, [pc, #104]	; (8004224 <TIM_TI4_SetConfig+0x7c>)
 80041bc:	401a      	ands	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	4a15      	ldr	r2, [pc, #84]	; (8004228 <TIM_TI4_SetConfig+0x80>)
 80041d2:	4013      	ands	r3, r2
 80041d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	021b      	lsls	r3, r3, #8
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	4313      	orrs	r3, r2
 80041de:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	4a12      	ldr	r2, [pc, #72]	; (800422c <TIM_TI4_SetConfig+0x84>)
 80041e4:	4013      	ands	r3, r2
 80041e6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	031b      	lsls	r3, r3, #12
 80041ec:	041b      	lsls	r3, r3, #16
 80041ee:	0c1b      	lsrs	r3, r3, #16
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	4a0d      	ldr	r2, [pc, #52]	; (8004230 <TIM_TI4_SetConfig+0x88>)
 80041fa:	4013      	ands	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	031a      	lsls	r2, r3, #12
 8004202:	23a0      	movs	r3, #160	; 0xa0
 8004204:	021b      	lsls	r3, r3, #8
 8004206:	4013      	ands	r3, r2
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4313      	orrs	r3, r2
 800420c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	621a      	str	r2, [r3, #32]
}
 800421a:	46c0      	nop			; (mov r8, r8)
 800421c:	46bd      	mov	sp, r7
 800421e:	b006      	add	sp, #24
 8004220:	bd80      	pop	{r7, pc}
 8004222:	46c0      	nop			; (mov r8, r8)
 8004224:	ffffefff 	.word	0xffffefff
 8004228:	fffffcff 	.word	0xfffffcff
 800422c:	ffff0fff 	.word	0xffff0fff
 8004230:	ffff5fff 	.word	0xffff5fff

08004234 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2270      	movs	r2, #112	; 0x70
 8004248:	4393      	bics	r3, r2
 800424a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	4313      	orrs	r3, r2
 8004252:	2207      	movs	r2, #7
 8004254:	4313      	orrs	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	609a      	str	r2, [r3, #8]
}
 800425e:	46c0      	nop			; (mov r8, r8)
 8004260:	46bd      	mov	sp, r7
 8004262:	b004      	add	sp, #16
 8004264:	bd80      	pop	{r7, pc}
	...

08004268 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
 8004274:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	4a09      	ldr	r2, [pc, #36]	; (80042a4 <TIM_ETR_SetConfig+0x3c>)
 8004280:	4013      	ands	r3, r2
 8004282:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	021a      	lsls	r2, r3, #8
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	431a      	orrs	r2, r3
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	4313      	orrs	r3, r2
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	4313      	orrs	r3, r2
 8004294:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	609a      	str	r2, [r3, #8]
}
 800429c:	46c0      	nop			; (mov r8, r8)
 800429e:	46bd      	mov	sp, r7
 80042a0:	b006      	add	sp, #24
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	ffff00ff 	.word	0xffff00ff

080042a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	221f      	movs	r2, #31
 80042b8:	4013      	ands	r3, r2
 80042ba:	2201      	movs	r2, #1
 80042bc:	409a      	lsls	r2, r3
 80042be:	0013      	movs	r3, r2
 80042c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	43d2      	mvns	r2, r2
 80042ca:	401a      	ands	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a1a      	ldr	r2, [r3, #32]
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	211f      	movs	r1, #31
 80042d8:	400b      	ands	r3, r1
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	4099      	lsls	r1, r3
 80042de:	000b      	movs	r3, r1
 80042e0:	431a      	orrs	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	621a      	str	r2, [r3, #32]
}
 80042e6:	46c0      	nop			; (mov r8, r8)
 80042e8:	46bd      	mov	sp, r7
 80042ea:	b006      	add	sp, #24
 80042ec:	bd80      	pop	{r7, pc}
	...

080042f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	223c      	movs	r2, #60	; 0x3c
 80042fe:	5c9b      	ldrb	r3, [r3, r2]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d101      	bne.n	8004308 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004304:	2302      	movs	r3, #2
 8004306:	e042      	b.n	800438e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	223c      	movs	r2, #60	; 0x3c
 800430c:	2101      	movs	r1, #1
 800430e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	223d      	movs	r2, #61	; 0x3d
 8004314:	2102      	movs	r1, #2
 8004316:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2270      	movs	r2, #112	; 0x70
 800432c:	4393      	bics	r3, r2
 800432e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	4313      	orrs	r3, r2
 8004338:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a14      	ldr	r2, [pc, #80]	; (8004398 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d00a      	beq.n	8004362 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	2380      	movs	r3, #128	; 0x80
 8004352:	05db      	lsls	r3, r3, #23
 8004354:	429a      	cmp	r2, r3
 8004356:	d004      	beq.n	8004362 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a0f      	ldr	r2, [pc, #60]	; (800439c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d10c      	bne.n	800437c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2280      	movs	r2, #128	; 0x80
 8004366:	4393      	bics	r3, r2
 8004368:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	4313      	orrs	r3, r2
 8004372:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68ba      	ldr	r2, [r7, #8]
 800437a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	223d      	movs	r2, #61	; 0x3d
 8004380:	2101      	movs	r1, #1
 8004382:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	223c      	movs	r2, #60	; 0x3c
 8004388:	2100      	movs	r1, #0
 800438a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	0018      	movs	r0, r3
 8004390:	46bd      	mov	sp, r7
 8004392:	b004      	add	sp, #16
 8004394:	bd80      	pop	{r7, pc}
 8004396:	46c0      	nop			; (mov r8, r8)
 8004398:	40012c00 	.word	0x40012c00
 800439c:	40000400 	.word	0x40000400

080043a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80043aa:	2300      	movs	r3, #0
 80043ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	223c      	movs	r2, #60	; 0x3c
 80043b2:	5c9b      	ldrb	r3, [r3, r2]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d101      	bne.n	80043bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e03e      	b.n	800443a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	223c      	movs	r2, #60	; 0x3c
 80043c0:	2101      	movs	r1, #1
 80043c2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	22ff      	movs	r2, #255	; 0xff
 80043c8:	4393      	bics	r3, r2
 80043ca:	001a      	movs	r2, r3
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	4a1b      	ldr	r2, [pc, #108]	; (8004444 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80043d8:	401a      	ands	r2, r3
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	4313      	orrs	r3, r2
 80043e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4a18      	ldr	r2, [pc, #96]	; (8004448 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80043e6:	401a      	ands	r2, r3
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4a16      	ldr	r2, [pc, #88]	; (800444c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80043f4:	401a      	ands	r2, r3
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	4a13      	ldr	r2, [pc, #76]	; (8004450 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8004402:	401a      	ands	r2, r3
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	4313      	orrs	r3, r2
 800440a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4a11      	ldr	r2, [pc, #68]	; (8004454 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8004410:	401a      	ands	r2, r3
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	4313      	orrs	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	4a0e      	ldr	r2, [pc, #56]	; (8004458 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800441e:	401a      	ands	r2, r3
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	4313      	orrs	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	223c      	movs	r2, #60	; 0x3c
 8004434:	2100      	movs	r1, #0
 8004436:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	0018      	movs	r0, r3
 800443c:	46bd      	mov	sp, r7
 800443e:	b004      	add	sp, #16
 8004440:	bd80      	pop	{r7, pc}
 8004442:	46c0      	nop			; (mov r8, r8)
 8004444:	fffffcff 	.word	0xfffffcff
 8004448:	fffffbff 	.word	0xfffffbff
 800444c:	fffff7ff 	.word	0xfffff7ff
 8004450:	ffffefff 	.word	0xffffefff
 8004454:	ffffdfff 	.word	0xffffdfff
 8004458:	ffffbfff 	.word	0xffffbfff

0800445c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004464:	46c0      	nop			; (mov r8, r8)
 8004466:	46bd      	mov	sp, r7
 8004468:	b002      	add	sp, #8
 800446a:	bd80      	pop	{r7, pc}

0800446c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004474:	46c0      	nop			; (mov r8, r8)
 8004476:	46bd      	mov	sp, r7
 8004478:	b002      	add	sp, #8
 800447a:	bd80      	pop	{r7, pc}

0800447c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e044      	b.n	8004518 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004492:	2b00      	cmp	r3, #0
 8004494:	d107      	bne.n	80044a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2278      	movs	r2, #120	; 0x78
 800449a:	2100      	movs	r1, #0
 800449c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	0018      	movs	r0, r3
 80044a2:	f7fc fdf1 	bl	8001088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2224      	movs	r2, #36	; 0x24
 80044aa:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2101      	movs	r1, #1
 80044b8:	438a      	bics	r2, r1
 80044ba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	0018      	movs	r0, r3
 80044c0:	f000 fbcc 	bl	8004c5c <UART_SetConfig>
 80044c4:	0003      	movs	r3, r0
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d101      	bne.n	80044ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e024      	b.n	8004518 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	0018      	movs	r0, r3
 80044da:	f000 fcff 	bl	8004edc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	490d      	ldr	r1, [pc, #52]	; (8004520 <HAL_UART_Init+0xa4>)
 80044ea:	400a      	ands	r2, r1
 80044ec:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	212a      	movs	r1, #42	; 0x2a
 80044fa:	438a      	bics	r2, r1
 80044fc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2101      	movs	r1, #1
 800450a:	430a      	orrs	r2, r1
 800450c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	0018      	movs	r0, r3
 8004512:	f000 fd97 	bl	8005044 <UART_CheckIdleState>
 8004516:	0003      	movs	r3, r0
}
 8004518:	0018      	movs	r0, r3
 800451a:	46bd      	mov	sp, r7
 800451c:	b002      	add	sp, #8
 800451e:	bd80      	pop	{r7, pc}
 8004520:	ffffb7ff 	.word	0xffffb7ff

08004524 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b08a      	sub	sp, #40	; 0x28
 8004528:	af02      	add	r7, sp, #8
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	603b      	str	r3, [r7, #0]
 8004530:	1dbb      	adds	r3, r7, #6
 8004532:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004538:	2b20      	cmp	r3, #32
 800453a:	d000      	beq.n	800453e <HAL_UART_Transmit+0x1a>
 800453c:	e08d      	b.n	800465a <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d003      	beq.n	800454c <HAL_UART_Transmit+0x28>
 8004544:	1dbb      	adds	r3, r7, #6
 8004546:	881b      	ldrh	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d101      	bne.n	8004550 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e085      	b.n	800465c <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	689a      	ldr	r2, [r3, #8]
 8004554:	2380      	movs	r3, #128	; 0x80
 8004556:	015b      	lsls	r3, r3, #5
 8004558:	429a      	cmp	r2, r3
 800455a:	d109      	bne.n	8004570 <HAL_UART_Transmit+0x4c>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d105      	bne.n	8004570 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	2201      	movs	r2, #1
 8004568:	4013      	ands	r3, r2
 800456a:	d001      	beq.n	8004570 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e075      	b.n	800465c <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2284      	movs	r2, #132	; 0x84
 8004574:	2100      	movs	r1, #0
 8004576:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2221      	movs	r2, #33	; 0x21
 800457c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800457e:	f7fc fedf 	bl	8001340 <HAL_GetTick>
 8004582:	0003      	movs	r3, r0
 8004584:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	1dba      	adds	r2, r7, #6
 800458a:	2150      	movs	r1, #80	; 0x50
 800458c:	8812      	ldrh	r2, [r2, #0]
 800458e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	1dba      	adds	r2, r7, #6
 8004594:	2152      	movs	r1, #82	; 0x52
 8004596:	8812      	ldrh	r2, [r2, #0]
 8004598:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	689a      	ldr	r2, [r3, #8]
 800459e:	2380      	movs	r3, #128	; 0x80
 80045a0:	015b      	lsls	r3, r3, #5
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d108      	bne.n	80045b8 <HAL_UART_Transmit+0x94>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d104      	bne.n	80045b8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80045ae:	2300      	movs	r3, #0
 80045b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	61bb      	str	r3, [r7, #24]
 80045b6:	e003      	b.n	80045c0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045bc:	2300      	movs	r3, #0
 80045be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045c0:	e030      	b.n	8004624 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	0013      	movs	r3, r2
 80045cc:	2200      	movs	r2, #0
 80045ce:	2180      	movs	r1, #128	; 0x80
 80045d0:	f000 fde0 	bl	8005194 <UART_WaitOnFlagUntilTimeout>
 80045d4:	1e03      	subs	r3, r0, #0
 80045d6:	d004      	beq.n	80045e2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2220      	movs	r2, #32
 80045dc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e03c      	b.n	800465c <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10b      	bne.n	8004600 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	881a      	ldrh	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	05d2      	lsls	r2, r2, #23
 80045f2:	0dd2      	lsrs	r2, r2, #23
 80045f4:	b292      	uxth	r2, r2
 80045f6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	3302      	adds	r3, #2
 80045fc:	61bb      	str	r3, [r7, #24]
 80045fe:	e008      	b.n	8004612 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	781a      	ldrb	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	b292      	uxth	r2, r2
 800460a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	3301      	adds	r3, #1
 8004610:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2252      	movs	r2, #82	; 0x52
 8004616:	5a9b      	ldrh	r3, [r3, r2]
 8004618:	b29b      	uxth	r3, r3
 800461a:	3b01      	subs	r3, #1
 800461c:	b299      	uxth	r1, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2252      	movs	r2, #82	; 0x52
 8004622:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2252      	movs	r2, #82	; 0x52
 8004628:	5a9b      	ldrh	r3, [r3, r2]
 800462a:	b29b      	uxth	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1c8      	bne.n	80045c2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	0013      	movs	r3, r2
 800463a:	2200      	movs	r2, #0
 800463c:	2140      	movs	r1, #64	; 0x40
 800463e:	f000 fda9 	bl	8005194 <UART_WaitOnFlagUntilTimeout>
 8004642:	1e03      	subs	r3, r0, #0
 8004644:	d004      	beq.n	8004650 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2220      	movs	r2, #32
 800464a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e005      	b.n	800465c <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2220      	movs	r2, #32
 8004654:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004656:	2300      	movs	r3, #0
 8004658:	e000      	b.n	800465c <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 800465a:	2302      	movs	r3, #2
  }
}
 800465c:	0018      	movs	r0, r3
 800465e:	46bd      	mov	sp, r7
 8004660:	b008      	add	sp, #32
 8004662:	bd80      	pop	{r7, pc}

08004664 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004664:	b590      	push	{r4, r7, lr}
 8004666:	b0ab      	sub	sp, #172	; 0xac
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	69db      	ldr	r3, [r3, #28]
 8004672:	22a4      	movs	r2, #164	; 0xa4
 8004674:	18b9      	adds	r1, r7, r2
 8004676:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	20a0      	movs	r0, #160	; 0xa0
 8004680:	1839      	adds	r1, r7, r0
 8004682:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	219c      	movs	r1, #156	; 0x9c
 800468c:	1879      	adds	r1, r7, r1
 800468e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004690:	0011      	movs	r1, r2
 8004692:	18bb      	adds	r3, r7, r2
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a99      	ldr	r2, [pc, #612]	; (80048fc <HAL_UART_IRQHandler+0x298>)
 8004698:	4013      	ands	r3, r2
 800469a:	2298      	movs	r2, #152	; 0x98
 800469c:	18bc      	adds	r4, r7, r2
 800469e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80046a0:	18bb      	adds	r3, r7, r2
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d114      	bne.n	80046d2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80046a8:	187b      	adds	r3, r7, r1
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2220      	movs	r2, #32
 80046ae:	4013      	ands	r3, r2
 80046b0:	d00f      	beq.n	80046d2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80046b2:	183b      	adds	r3, r7, r0
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2220      	movs	r2, #32
 80046b8:	4013      	ands	r3, r2
 80046ba:	d00a      	beq.n	80046d2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d100      	bne.n	80046c6 <HAL_UART_IRQHandler+0x62>
 80046c4:	e29e      	b.n	8004c04 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	0010      	movs	r0, r2
 80046ce:	4798      	blx	r3
      }
      return;
 80046d0:	e298      	b.n	8004c04 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80046d2:	2398      	movs	r3, #152	; 0x98
 80046d4:	18fb      	adds	r3, r7, r3
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d100      	bne.n	80046de <HAL_UART_IRQHandler+0x7a>
 80046dc:	e114      	b.n	8004908 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80046de:	239c      	movs	r3, #156	; 0x9c
 80046e0:	18fb      	adds	r3, r7, r3
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2201      	movs	r2, #1
 80046e6:	4013      	ands	r3, r2
 80046e8:	d106      	bne.n	80046f8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80046ea:	23a0      	movs	r3, #160	; 0xa0
 80046ec:	18fb      	adds	r3, r7, r3
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a83      	ldr	r2, [pc, #524]	; (8004900 <HAL_UART_IRQHandler+0x29c>)
 80046f2:	4013      	ands	r3, r2
 80046f4:	d100      	bne.n	80046f8 <HAL_UART_IRQHandler+0x94>
 80046f6:	e107      	b.n	8004908 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80046f8:	23a4      	movs	r3, #164	; 0xa4
 80046fa:	18fb      	adds	r3, r7, r3
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2201      	movs	r2, #1
 8004700:	4013      	ands	r3, r2
 8004702:	d012      	beq.n	800472a <HAL_UART_IRQHandler+0xc6>
 8004704:	23a0      	movs	r3, #160	; 0xa0
 8004706:	18fb      	adds	r3, r7, r3
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	2380      	movs	r3, #128	; 0x80
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	4013      	ands	r3, r2
 8004710:	d00b      	beq.n	800472a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2201      	movs	r2, #1
 8004718:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2284      	movs	r2, #132	; 0x84
 800471e:	589b      	ldr	r3, [r3, r2]
 8004720:	2201      	movs	r2, #1
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2184      	movs	r1, #132	; 0x84
 8004728:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800472a:	23a4      	movs	r3, #164	; 0xa4
 800472c:	18fb      	adds	r3, r7, r3
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2202      	movs	r2, #2
 8004732:	4013      	ands	r3, r2
 8004734:	d011      	beq.n	800475a <HAL_UART_IRQHandler+0xf6>
 8004736:	239c      	movs	r3, #156	; 0x9c
 8004738:	18fb      	adds	r3, r7, r3
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2201      	movs	r2, #1
 800473e:	4013      	ands	r3, r2
 8004740:	d00b      	beq.n	800475a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2202      	movs	r2, #2
 8004748:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2284      	movs	r2, #132	; 0x84
 800474e:	589b      	ldr	r3, [r3, r2]
 8004750:	2204      	movs	r2, #4
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2184      	movs	r1, #132	; 0x84
 8004758:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800475a:	23a4      	movs	r3, #164	; 0xa4
 800475c:	18fb      	adds	r3, r7, r3
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2204      	movs	r2, #4
 8004762:	4013      	ands	r3, r2
 8004764:	d011      	beq.n	800478a <HAL_UART_IRQHandler+0x126>
 8004766:	239c      	movs	r3, #156	; 0x9c
 8004768:	18fb      	adds	r3, r7, r3
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2201      	movs	r2, #1
 800476e:	4013      	ands	r3, r2
 8004770:	d00b      	beq.n	800478a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2204      	movs	r2, #4
 8004778:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2284      	movs	r2, #132	; 0x84
 800477e:	589b      	ldr	r3, [r3, r2]
 8004780:	2202      	movs	r2, #2
 8004782:	431a      	orrs	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2184      	movs	r1, #132	; 0x84
 8004788:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800478a:	23a4      	movs	r3, #164	; 0xa4
 800478c:	18fb      	adds	r3, r7, r3
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2208      	movs	r2, #8
 8004792:	4013      	ands	r3, r2
 8004794:	d017      	beq.n	80047c6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004796:	23a0      	movs	r3, #160	; 0xa0
 8004798:	18fb      	adds	r3, r7, r3
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2220      	movs	r2, #32
 800479e:	4013      	ands	r3, r2
 80047a0:	d105      	bne.n	80047ae <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80047a2:	239c      	movs	r3, #156	; 0x9c
 80047a4:	18fb      	adds	r3, r7, r3
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2201      	movs	r2, #1
 80047aa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047ac:	d00b      	beq.n	80047c6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2208      	movs	r2, #8
 80047b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2284      	movs	r2, #132	; 0x84
 80047ba:	589b      	ldr	r3, [r3, r2]
 80047bc:	2208      	movs	r2, #8
 80047be:	431a      	orrs	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2184      	movs	r1, #132	; 0x84
 80047c4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80047c6:	23a4      	movs	r3, #164	; 0xa4
 80047c8:	18fb      	adds	r3, r7, r3
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	2380      	movs	r3, #128	; 0x80
 80047ce:	011b      	lsls	r3, r3, #4
 80047d0:	4013      	ands	r3, r2
 80047d2:	d013      	beq.n	80047fc <HAL_UART_IRQHandler+0x198>
 80047d4:	23a0      	movs	r3, #160	; 0xa0
 80047d6:	18fb      	adds	r3, r7, r3
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	2380      	movs	r3, #128	; 0x80
 80047dc:	04db      	lsls	r3, r3, #19
 80047de:	4013      	ands	r3, r2
 80047e0:	d00c      	beq.n	80047fc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2280      	movs	r2, #128	; 0x80
 80047e8:	0112      	lsls	r2, r2, #4
 80047ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2284      	movs	r2, #132	; 0x84
 80047f0:	589b      	ldr	r3, [r3, r2]
 80047f2:	2220      	movs	r2, #32
 80047f4:	431a      	orrs	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2184      	movs	r1, #132	; 0x84
 80047fa:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2284      	movs	r2, #132	; 0x84
 8004800:	589b      	ldr	r3, [r3, r2]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d100      	bne.n	8004808 <HAL_UART_IRQHandler+0x1a4>
 8004806:	e1ff      	b.n	8004c08 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004808:	23a4      	movs	r3, #164	; 0xa4
 800480a:	18fb      	adds	r3, r7, r3
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2220      	movs	r2, #32
 8004810:	4013      	ands	r3, r2
 8004812:	d00e      	beq.n	8004832 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004814:	23a0      	movs	r3, #160	; 0xa0
 8004816:	18fb      	adds	r3, r7, r3
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2220      	movs	r2, #32
 800481c:	4013      	ands	r3, r2
 800481e:	d008      	beq.n	8004832 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004824:	2b00      	cmp	r3, #0
 8004826:	d004      	beq.n	8004832 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	0010      	movs	r0, r2
 8004830:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2284      	movs	r2, #132	; 0x84
 8004836:	589b      	ldr	r3, [r3, r2]
 8004838:	2194      	movs	r1, #148	; 0x94
 800483a:	187a      	adds	r2, r7, r1
 800483c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	2240      	movs	r2, #64	; 0x40
 8004846:	4013      	ands	r3, r2
 8004848:	2b40      	cmp	r3, #64	; 0x40
 800484a:	d004      	beq.n	8004856 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800484c:	187b      	adds	r3, r7, r1
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2228      	movs	r2, #40	; 0x28
 8004852:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004854:	d047      	beq.n	80048e6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	0018      	movs	r0, r3
 800485a:	f000 fd05 	bl	8005268 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	2240      	movs	r2, #64	; 0x40
 8004866:	4013      	ands	r3, r2
 8004868:	2b40      	cmp	r3, #64	; 0x40
 800486a:	d137      	bne.n	80048dc <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800486c:	f3ef 8310 	mrs	r3, PRIMASK
 8004870:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004872:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004874:	2090      	movs	r0, #144	; 0x90
 8004876:	183a      	adds	r2, r7, r0
 8004878:	6013      	str	r3, [r2, #0]
 800487a:	2301      	movs	r3, #1
 800487c:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800487e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004880:	f383 8810 	msr	PRIMASK, r3
}
 8004884:	46c0      	nop			; (mov r8, r8)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2140      	movs	r1, #64	; 0x40
 8004892:	438a      	bics	r2, r1
 8004894:	609a      	str	r2, [r3, #8]
 8004896:	183b      	adds	r3, r7, r0
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800489c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800489e:	f383 8810 	msr	PRIMASK, r3
}
 80048a2:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d012      	beq.n	80048d2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048b0:	4a14      	ldr	r2, [pc, #80]	; (8004904 <HAL_UART_IRQHandler+0x2a0>)
 80048b2:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048b8:	0018      	movs	r0, r3
 80048ba:	f7fd fb33 	bl	8001f24 <HAL_DMA_Abort_IT>
 80048be:	1e03      	subs	r3, r0, #0
 80048c0:	d01a      	beq.n	80048f8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048cc:	0018      	movs	r0, r3
 80048ce:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d0:	e012      	b.n	80048f8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	0018      	movs	r0, r3
 80048d6:	f000 f9ad 	bl	8004c34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048da:	e00d      	b.n	80048f8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	0018      	movs	r0, r3
 80048e0:	f000 f9a8 	bl	8004c34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e4:	e008      	b.n	80048f8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	0018      	movs	r0, r3
 80048ea:	f000 f9a3 	bl	8004c34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2284      	movs	r2, #132	; 0x84
 80048f2:	2100      	movs	r1, #0
 80048f4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80048f6:	e187      	b.n	8004c08 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048f8:	46c0      	nop			; (mov r8, r8)
    return;
 80048fa:	e185      	b.n	8004c08 <HAL_UART_IRQHandler+0x5a4>
 80048fc:	0000080f 	.word	0x0000080f
 8004900:	04000120 	.word	0x04000120
 8004904:	08005331 	.word	0x08005331

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800490c:	2b01      	cmp	r3, #1
 800490e:	d000      	beq.n	8004912 <HAL_UART_IRQHandler+0x2ae>
 8004910:	e139      	b.n	8004b86 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004912:	23a4      	movs	r3, #164	; 0xa4
 8004914:	18fb      	adds	r3, r7, r3
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2210      	movs	r2, #16
 800491a:	4013      	ands	r3, r2
 800491c:	d100      	bne.n	8004920 <HAL_UART_IRQHandler+0x2bc>
 800491e:	e132      	b.n	8004b86 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004920:	23a0      	movs	r3, #160	; 0xa0
 8004922:	18fb      	adds	r3, r7, r3
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2210      	movs	r2, #16
 8004928:	4013      	ands	r3, r2
 800492a:	d100      	bne.n	800492e <HAL_UART_IRQHandler+0x2ca>
 800492c:	e12b      	b.n	8004b86 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2210      	movs	r2, #16
 8004934:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	2240      	movs	r2, #64	; 0x40
 800493e:	4013      	ands	r3, r2
 8004940:	2b40      	cmp	r3, #64	; 0x40
 8004942:	d000      	beq.n	8004946 <HAL_UART_IRQHandler+0x2e2>
 8004944:	e09f      	b.n	8004a86 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	217e      	movs	r1, #126	; 0x7e
 8004950:	187b      	adds	r3, r7, r1
 8004952:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004954:	187b      	adds	r3, r7, r1
 8004956:	881b      	ldrh	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d100      	bne.n	800495e <HAL_UART_IRQHandler+0x2fa>
 800495c:	e156      	b.n	8004c0c <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2258      	movs	r2, #88	; 0x58
 8004962:	5a9b      	ldrh	r3, [r3, r2]
 8004964:	187a      	adds	r2, r7, r1
 8004966:	8812      	ldrh	r2, [r2, #0]
 8004968:	429a      	cmp	r2, r3
 800496a:	d300      	bcc.n	800496e <HAL_UART_IRQHandler+0x30a>
 800496c:	e14e      	b.n	8004c0c <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	187a      	adds	r2, r7, r1
 8004972:	215a      	movs	r1, #90	; 0x5a
 8004974:	8812      	ldrh	r2, [r2, #0]
 8004976:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	2b20      	cmp	r3, #32
 8004980:	d06f      	beq.n	8004a62 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004982:	f3ef 8310 	mrs	r3, PRIMASK
 8004986:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800498a:	67bb      	str	r3, [r7, #120]	; 0x78
 800498c:	2301      	movs	r3, #1
 800498e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004992:	f383 8810 	msr	PRIMASK, r3
}
 8004996:	46c0      	nop			; (mov r8, r8)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	499e      	ldr	r1, [pc, #632]	; (8004c1c <HAL_UART_IRQHandler+0x5b8>)
 80049a4:	400a      	ands	r2, r1
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049aa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ae:	f383 8810 	msr	PRIMASK, r3
}
 80049b2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049b4:	f3ef 8310 	mrs	r3, PRIMASK
 80049b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80049ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049bc:	677b      	str	r3, [r7, #116]	; 0x74
 80049be:	2301      	movs	r3, #1
 80049c0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049c4:	f383 8810 	msr	PRIMASK, r3
}
 80049c8:	46c0      	nop			; (mov r8, r8)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	689a      	ldr	r2, [r3, #8]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2101      	movs	r1, #1
 80049d6:	438a      	bics	r2, r1
 80049d8:	609a      	str	r2, [r3, #8]
 80049da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049dc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049e0:	f383 8810 	msr	PRIMASK, r3
}
 80049e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049e6:	f3ef 8310 	mrs	r3, PRIMASK
 80049ea:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80049ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049ee:	673b      	str	r3, [r7, #112]	; 0x70
 80049f0:	2301      	movs	r3, #1
 80049f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049f6:	f383 8810 	msr	PRIMASK, r3
}
 80049fa:	46c0      	nop			; (mov r8, r8)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689a      	ldr	r2, [r3, #8]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2140      	movs	r1, #64	; 0x40
 8004a08:	438a      	bics	r2, r1
 8004a0a:	609a      	str	r2, [r3, #8]
 8004a0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a0e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a12:	f383 8810 	msr	PRIMASK, r3
}
 8004a16:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2280      	movs	r2, #128	; 0x80
 8004a1c:	2120      	movs	r1, #32
 8004a1e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a26:	f3ef 8310 	mrs	r3, PRIMASK
 8004a2a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004a2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a30:	2301      	movs	r3, #1
 8004a32:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a36:	f383 8810 	msr	PRIMASK, r3
}
 8004a3a:	46c0      	nop			; (mov r8, r8)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2110      	movs	r1, #16
 8004a48:	438a      	bics	r2, r1
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a4e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a52:	f383 8810 	msr	PRIMASK, r3
}
 8004a56:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	f7fd fa29 	bl	8001eb4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2202      	movs	r2, #2
 8004a66:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2258      	movs	r2, #88	; 0x58
 8004a6c:	5a9a      	ldrh	r2, [r3, r2]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	215a      	movs	r1, #90	; 0x5a
 8004a72:	5a5b      	ldrh	r3, [r3, r1]
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	0011      	movs	r1, r2
 8004a7e:	0018      	movs	r0, r3
 8004a80:	f000 f8e0 	bl	8004c44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a84:	e0c2      	b.n	8004c0c <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2258      	movs	r2, #88	; 0x58
 8004a8a:	5a99      	ldrh	r1, [r3, r2]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	225a      	movs	r2, #90	; 0x5a
 8004a90:	5a9b      	ldrh	r3, [r3, r2]
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	208e      	movs	r0, #142	; 0x8e
 8004a96:	183b      	adds	r3, r7, r0
 8004a98:	1a8a      	subs	r2, r1, r2
 8004a9a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	225a      	movs	r2, #90	; 0x5a
 8004aa0:	5a9b      	ldrh	r3, [r3, r2]
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d100      	bne.n	8004aaa <HAL_UART_IRQHandler+0x446>
 8004aa8:	e0b2      	b.n	8004c10 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8004aaa:	183b      	adds	r3, r7, r0
 8004aac:	881b      	ldrh	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d100      	bne.n	8004ab4 <HAL_UART_IRQHandler+0x450>
 8004ab2:	e0ad      	b.n	8004c10 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ab4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ab8:	60fb      	str	r3, [r7, #12]
  return(result);
 8004aba:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004abc:	2488      	movs	r4, #136	; 0x88
 8004abe:	193a      	adds	r2, r7, r4
 8004ac0:	6013      	str	r3, [r2, #0]
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	f383 8810 	msr	PRIMASK, r3
}
 8004acc:	46c0      	nop			; (mov r8, r8)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4951      	ldr	r1, [pc, #324]	; (8004c20 <HAL_UART_IRQHandler+0x5bc>)
 8004ada:	400a      	ands	r2, r1
 8004adc:	601a      	str	r2, [r3, #0]
 8004ade:	193b      	adds	r3, r7, r4
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f383 8810 	msr	PRIMASK, r3
}
 8004aea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aec:	f3ef 8310 	mrs	r3, PRIMASK
 8004af0:	61bb      	str	r3, [r7, #24]
  return(result);
 8004af2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af4:	2484      	movs	r4, #132	; 0x84
 8004af6:	193a      	adds	r2, r7, r4
 8004af8:	6013      	str	r3, [r2, #0]
 8004afa:	2301      	movs	r3, #1
 8004afc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	f383 8810 	msr	PRIMASK, r3
}
 8004b04:	46c0      	nop			; (mov r8, r8)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2101      	movs	r1, #1
 8004b12:	438a      	bics	r2, r1
 8004b14:	609a      	str	r2, [r3, #8]
 8004b16:	193b      	adds	r3, r7, r4
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
 8004b1e:	f383 8810 	msr	PRIMASK, r3
}
 8004b22:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2280      	movs	r2, #128	; 0x80
 8004b28:	2120      	movs	r1, #32
 8004b2a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b38:	f3ef 8310 	mrs	r3, PRIMASK
 8004b3c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b40:	2480      	movs	r4, #128	; 0x80
 8004b42:	193a      	adds	r2, r7, r4
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	2301      	movs	r3, #1
 8004b48:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4c:	f383 8810 	msr	PRIMASK, r3
}
 8004b50:	46c0      	nop			; (mov r8, r8)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2110      	movs	r1, #16
 8004b5e:	438a      	bics	r2, r1
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	193b      	adds	r3, r7, r4
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6a:	f383 8810 	msr	PRIMASK, r3
}
 8004b6e:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2202      	movs	r2, #2
 8004b74:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b76:	183b      	adds	r3, r7, r0
 8004b78:	881a      	ldrh	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	0011      	movs	r1, r2
 8004b7e:	0018      	movs	r0, r3
 8004b80:	f000 f860 	bl	8004c44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b84:	e044      	b.n	8004c10 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b86:	23a4      	movs	r3, #164	; 0xa4
 8004b88:	18fb      	adds	r3, r7, r3
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	2380      	movs	r3, #128	; 0x80
 8004b8e:	035b      	lsls	r3, r3, #13
 8004b90:	4013      	ands	r3, r2
 8004b92:	d010      	beq.n	8004bb6 <HAL_UART_IRQHandler+0x552>
 8004b94:	239c      	movs	r3, #156	; 0x9c
 8004b96:	18fb      	adds	r3, r7, r3
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	2380      	movs	r3, #128	; 0x80
 8004b9c:	03db      	lsls	r3, r3, #15
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	d009      	beq.n	8004bb6 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2280      	movs	r2, #128	; 0x80
 8004ba8:	0352      	lsls	r2, r2, #13
 8004baa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	0018      	movs	r0, r3
 8004bb0:	f000 fc00 	bl	80053b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004bb4:	e02f      	b.n	8004c16 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004bb6:	23a4      	movs	r3, #164	; 0xa4
 8004bb8:	18fb      	adds	r3, r7, r3
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2280      	movs	r2, #128	; 0x80
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	d00f      	beq.n	8004be2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004bc2:	23a0      	movs	r3, #160	; 0xa0
 8004bc4:	18fb      	adds	r3, r7, r3
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2280      	movs	r2, #128	; 0x80
 8004bca:	4013      	ands	r3, r2
 8004bcc:	d009      	beq.n	8004be2 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d01e      	beq.n	8004c14 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	0010      	movs	r0, r2
 8004bde:	4798      	blx	r3
    }
    return;
 8004be0:	e018      	b.n	8004c14 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004be2:	23a4      	movs	r3, #164	; 0xa4
 8004be4:	18fb      	adds	r3, r7, r3
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2240      	movs	r2, #64	; 0x40
 8004bea:	4013      	ands	r3, r2
 8004bec:	d013      	beq.n	8004c16 <HAL_UART_IRQHandler+0x5b2>
 8004bee:	23a0      	movs	r3, #160	; 0xa0
 8004bf0:	18fb      	adds	r3, r7, r3
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2240      	movs	r2, #64	; 0x40
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	d00d      	beq.n	8004c16 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	0018      	movs	r0, r3
 8004bfe:	f000 fbae 	bl	800535e <UART_EndTransmit_IT>
    return;
 8004c02:	e008      	b.n	8004c16 <HAL_UART_IRQHandler+0x5b2>
      return;
 8004c04:	46c0      	nop			; (mov r8, r8)
 8004c06:	e006      	b.n	8004c16 <HAL_UART_IRQHandler+0x5b2>
    return;
 8004c08:	46c0      	nop			; (mov r8, r8)
 8004c0a:	e004      	b.n	8004c16 <HAL_UART_IRQHandler+0x5b2>
      return;
 8004c0c:	46c0      	nop			; (mov r8, r8)
 8004c0e:	e002      	b.n	8004c16 <HAL_UART_IRQHandler+0x5b2>
      return;
 8004c10:	46c0      	nop			; (mov r8, r8)
 8004c12:	e000      	b.n	8004c16 <HAL_UART_IRQHandler+0x5b2>
    return;
 8004c14:	46c0      	nop			; (mov r8, r8)
  }

}
 8004c16:	46bd      	mov	sp, r7
 8004c18:	b02b      	add	sp, #172	; 0xac
 8004c1a:	bd90      	pop	{r4, r7, pc}
 8004c1c:	fffffeff 	.word	0xfffffeff
 8004c20:	fffffedf 	.word	0xfffffedf

08004c24 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004c2c:	46c0      	nop			; (mov r8, r8)
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	b002      	add	sp, #8
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c3c:	46c0      	nop			; (mov r8, r8)
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	b002      	add	sp, #8
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	000a      	movs	r2, r1
 8004c4e:	1cbb      	adds	r3, r7, #2
 8004c50:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c52:	46c0      	nop			; (mov r8, r8)
 8004c54:	46bd      	mov	sp, r7
 8004c56:	b002      	add	sp, #8
 8004c58:	bd80      	pop	{r7, pc}
	...

08004c5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b088      	sub	sp, #32
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c64:	231e      	movs	r3, #30
 8004c66:	18fb      	adds	r3, r7, r3
 8004c68:	2200      	movs	r2, #0
 8004c6a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689a      	ldr	r2, [r3, #8]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	431a      	orrs	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	69db      	ldr	r3, [r3, #28]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a8d      	ldr	r2, [pc, #564]	; (8004ec0 <UART_SetConfig+0x264>)
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	0019      	movs	r1, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	4a88      	ldr	r2, [pc, #544]	; (8004ec4 <UART_SetConfig+0x268>)
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	0019      	movs	r1, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68da      	ldr	r2, [r3, #12]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	4a7f      	ldr	r2, [pc, #508]	; (8004ec8 <UART_SetConfig+0x26c>)
 8004cca:	4013      	ands	r3, r2
 8004ccc:	0019      	movs	r1, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a7b      	ldr	r2, [pc, #492]	; (8004ecc <UART_SetConfig+0x270>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d127      	bne.n	8004d32 <UART_SetConfig+0xd6>
 8004ce2:	4b7b      	ldr	r3, [pc, #492]	; (8004ed0 <UART_SetConfig+0x274>)
 8004ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce6:	2203      	movs	r2, #3
 8004ce8:	4013      	ands	r3, r2
 8004cea:	2b03      	cmp	r3, #3
 8004cec:	d00d      	beq.n	8004d0a <UART_SetConfig+0xae>
 8004cee:	d81b      	bhi.n	8004d28 <UART_SetConfig+0xcc>
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d014      	beq.n	8004d1e <UART_SetConfig+0xc2>
 8004cf4:	d818      	bhi.n	8004d28 <UART_SetConfig+0xcc>
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d002      	beq.n	8004d00 <UART_SetConfig+0xa4>
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d00a      	beq.n	8004d14 <UART_SetConfig+0xb8>
 8004cfe:	e013      	b.n	8004d28 <UART_SetConfig+0xcc>
 8004d00:	231f      	movs	r3, #31
 8004d02:	18fb      	adds	r3, r7, r3
 8004d04:	2200      	movs	r2, #0
 8004d06:	701a      	strb	r2, [r3, #0]
 8004d08:	e021      	b.n	8004d4e <UART_SetConfig+0xf2>
 8004d0a:	231f      	movs	r3, #31
 8004d0c:	18fb      	adds	r3, r7, r3
 8004d0e:	2202      	movs	r2, #2
 8004d10:	701a      	strb	r2, [r3, #0]
 8004d12:	e01c      	b.n	8004d4e <UART_SetConfig+0xf2>
 8004d14:	231f      	movs	r3, #31
 8004d16:	18fb      	adds	r3, r7, r3
 8004d18:	2204      	movs	r2, #4
 8004d1a:	701a      	strb	r2, [r3, #0]
 8004d1c:	e017      	b.n	8004d4e <UART_SetConfig+0xf2>
 8004d1e:	231f      	movs	r3, #31
 8004d20:	18fb      	adds	r3, r7, r3
 8004d22:	2208      	movs	r2, #8
 8004d24:	701a      	strb	r2, [r3, #0]
 8004d26:	e012      	b.n	8004d4e <UART_SetConfig+0xf2>
 8004d28:	231f      	movs	r3, #31
 8004d2a:	18fb      	adds	r3, r7, r3
 8004d2c:	2210      	movs	r2, #16
 8004d2e:	701a      	strb	r2, [r3, #0]
 8004d30:	e00d      	b.n	8004d4e <UART_SetConfig+0xf2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a67      	ldr	r2, [pc, #412]	; (8004ed4 <UART_SetConfig+0x278>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d104      	bne.n	8004d46 <UART_SetConfig+0xea>
 8004d3c:	231f      	movs	r3, #31
 8004d3e:	18fb      	adds	r3, r7, r3
 8004d40:	2200      	movs	r2, #0
 8004d42:	701a      	strb	r2, [r3, #0]
 8004d44:	e003      	b.n	8004d4e <UART_SetConfig+0xf2>
 8004d46:	231f      	movs	r3, #31
 8004d48:	18fb      	adds	r3, r7, r3
 8004d4a:	2210      	movs	r2, #16
 8004d4c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	69da      	ldr	r2, [r3, #28]
 8004d52:	2380      	movs	r3, #128	; 0x80
 8004d54:	021b      	lsls	r3, r3, #8
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d15c      	bne.n	8004e14 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8004d5a:	231f      	movs	r3, #31
 8004d5c:	18fb      	adds	r3, r7, r3
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	2b08      	cmp	r3, #8
 8004d62:	d015      	beq.n	8004d90 <UART_SetConfig+0x134>
 8004d64:	dc18      	bgt.n	8004d98 <UART_SetConfig+0x13c>
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	d00d      	beq.n	8004d86 <UART_SetConfig+0x12a>
 8004d6a:	dc15      	bgt.n	8004d98 <UART_SetConfig+0x13c>
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d002      	beq.n	8004d76 <UART_SetConfig+0x11a>
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d005      	beq.n	8004d80 <UART_SetConfig+0x124>
 8004d74:	e010      	b.n	8004d98 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d76:	f7fd ff5f 	bl	8002c38 <HAL_RCC_GetPCLK1Freq>
 8004d7a:	0003      	movs	r3, r0
 8004d7c:	61bb      	str	r3, [r7, #24]
        break;
 8004d7e:	e012      	b.n	8004da6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d80:	4b55      	ldr	r3, [pc, #340]	; (8004ed8 <UART_SetConfig+0x27c>)
 8004d82:	61bb      	str	r3, [r7, #24]
        break;
 8004d84:	e00f      	b.n	8004da6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d86:	f7fd fedb 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 8004d8a:	0003      	movs	r3, r0
 8004d8c:	61bb      	str	r3, [r7, #24]
        break;
 8004d8e:	e00a      	b.n	8004da6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d90:	2380      	movs	r3, #128	; 0x80
 8004d92:	021b      	lsls	r3, r3, #8
 8004d94:	61bb      	str	r3, [r7, #24]
        break;
 8004d96:	e006      	b.n	8004da6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d9c:	231e      	movs	r3, #30
 8004d9e:	18fb      	adds	r3, r7, r3
 8004da0:	2201      	movs	r2, #1
 8004da2:	701a      	strb	r2, [r3, #0]
        break;
 8004da4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d100      	bne.n	8004dae <UART_SetConfig+0x152>
 8004dac:	e07a      	b.n	8004ea4 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	005a      	lsls	r2, r3, #1
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	085b      	lsrs	r3, r3, #1
 8004db8:	18d2      	adds	r2, r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	0019      	movs	r1, r3
 8004dc0:	0010      	movs	r0, r2
 8004dc2:	f7fb f9ab 	bl	800011c <__udivsi3>
 8004dc6:	0003      	movs	r3, r0
 8004dc8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	2b0f      	cmp	r3, #15
 8004dce:	d91c      	bls.n	8004e0a <UART_SetConfig+0x1ae>
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	2380      	movs	r3, #128	; 0x80
 8004dd4:	025b      	lsls	r3, r3, #9
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d217      	bcs.n	8004e0a <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	200e      	movs	r0, #14
 8004de0:	183b      	adds	r3, r7, r0
 8004de2:	210f      	movs	r1, #15
 8004de4:	438a      	bics	r2, r1
 8004de6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	085b      	lsrs	r3, r3, #1
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	2207      	movs	r2, #7
 8004df0:	4013      	ands	r3, r2
 8004df2:	b299      	uxth	r1, r3
 8004df4:	183b      	adds	r3, r7, r0
 8004df6:	183a      	adds	r2, r7, r0
 8004df8:	8812      	ldrh	r2, [r2, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	183a      	adds	r2, r7, r0
 8004e04:	8812      	ldrh	r2, [r2, #0]
 8004e06:	60da      	str	r2, [r3, #12]
 8004e08:	e04c      	b.n	8004ea4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004e0a:	231e      	movs	r3, #30
 8004e0c:	18fb      	adds	r3, r7, r3
 8004e0e:	2201      	movs	r2, #1
 8004e10:	701a      	strb	r2, [r3, #0]
 8004e12:	e047      	b.n	8004ea4 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e14:	231f      	movs	r3, #31
 8004e16:	18fb      	adds	r3, r7, r3
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	2b08      	cmp	r3, #8
 8004e1c:	d015      	beq.n	8004e4a <UART_SetConfig+0x1ee>
 8004e1e:	dc18      	bgt.n	8004e52 <UART_SetConfig+0x1f6>
 8004e20:	2b04      	cmp	r3, #4
 8004e22:	d00d      	beq.n	8004e40 <UART_SetConfig+0x1e4>
 8004e24:	dc15      	bgt.n	8004e52 <UART_SetConfig+0x1f6>
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d002      	beq.n	8004e30 <UART_SetConfig+0x1d4>
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d005      	beq.n	8004e3a <UART_SetConfig+0x1de>
 8004e2e:	e010      	b.n	8004e52 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e30:	f7fd ff02 	bl	8002c38 <HAL_RCC_GetPCLK1Freq>
 8004e34:	0003      	movs	r3, r0
 8004e36:	61bb      	str	r3, [r7, #24]
        break;
 8004e38:	e012      	b.n	8004e60 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e3a:	4b27      	ldr	r3, [pc, #156]	; (8004ed8 <UART_SetConfig+0x27c>)
 8004e3c:	61bb      	str	r3, [r7, #24]
        break;
 8004e3e:	e00f      	b.n	8004e60 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e40:	f7fd fe7e 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 8004e44:	0003      	movs	r3, r0
 8004e46:	61bb      	str	r3, [r7, #24]
        break;
 8004e48:	e00a      	b.n	8004e60 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e4a:	2380      	movs	r3, #128	; 0x80
 8004e4c:	021b      	lsls	r3, r3, #8
 8004e4e:	61bb      	str	r3, [r7, #24]
        break;
 8004e50:	e006      	b.n	8004e60 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e56:	231e      	movs	r3, #30
 8004e58:	18fb      	adds	r3, r7, r3
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	701a      	strb	r2, [r3, #0]
        break;
 8004e5e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d01e      	beq.n	8004ea4 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	085a      	lsrs	r2, r3, #1
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	18d2      	adds	r2, r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	0019      	movs	r1, r3
 8004e76:	0010      	movs	r0, r2
 8004e78:	f7fb f950 	bl	800011c <__udivsi3>
 8004e7c:	0003      	movs	r3, r0
 8004e7e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	2b0f      	cmp	r3, #15
 8004e84:	d90a      	bls.n	8004e9c <UART_SetConfig+0x240>
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	2380      	movs	r3, #128	; 0x80
 8004e8a:	025b      	lsls	r3, r3, #9
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d205      	bcs.n	8004e9c <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	60da      	str	r2, [r3, #12]
 8004e9a:	e003      	b.n	8004ea4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004e9c:	231e      	movs	r3, #30
 8004e9e:	18fb      	adds	r3, r7, r3
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004eb0:	231e      	movs	r3, #30
 8004eb2:	18fb      	adds	r3, r7, r3
 8004eb4:	781b      	ldrb	r3, [r3, #0]
}
 8004eb6:	0018      	movs	r0, r3
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	b008      	add	sp, #32
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	46c0      	nop			; (mov r8, r8)
 8004ec0:	efff69f3 	.word	0xefff69f3
 8004ec4:	ffffcfff 	.word	0xffffcfff
 8004ec8:	fffff4ff 	.word	0xfffff4ff
 8004ecc:	40013800 	.word	0x40013800
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	40004400 	.word	0x40004400
 8004ed8:	007a1200 	.word	0x007a1200

08004edc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee8:	2201      	movs	r2, #1
 8004eea:	4013      	ands	r3, r2
 8004eec:	d00b      	beq.n	8004f06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	4a4a      	ldr	r2, [pc, #296]	; (8005020 <UART_AdvFeatureConfig+0x144>)
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	0019      	movs	r1, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	d00b      	beq.n	8004f28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	4a43      	ldr	r2, [pc, #268]	; (8005024 <UART_AdvFeatureConfig+0x148>)
 8004f18:	4013      	ands	r3, r2
 8004f1a:	0019      	movs	r1, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	430a      	orrs	r2, r1
 8004f26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2c:	2204      	movs	r2, #4
 8004f2e:	4013      	ands	r3, r2
 8004f30:	d00b      	beq.n	8004f4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	4a3b      	ldr	r2, [pc, #236]	; (8005028 <UART_AdvFeatureConfig+0x14c>)
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	0019      	movs	r1, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4e:	2208      	movs	r2, #8
 8004f50:	4013      	ands	r3, r2
 8004f52:	d00b      	beq.n	8004f6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	4a34      	ldr	r2, [pc, #208]	; (800502c <UART_AdvFeatureConfig+0x150>)
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	0019      	movs	r1, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	2210      	movs	r2, #16
 8004f72:	4013      	ands	r3, r2
 8004f74:	d00b      	beq.n	8004f8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	4a2c      	ldr	r2, [pc, #176]	; (8005030 <UART_AdvFeatureConfig+0x154>)
 8004f7e:	4013      	ands	r3, r2
 8004f80:	0019      	movs	r1, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	2220      	movs	r2, #32
 8004f94:	4013      	ands	r3, r2
 8004f96:	d00b      	beq.n	8004fb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	4a25      	ldr	r2, [pc, #148]	; (8005034 <UART_AdvFeatureConfig+0x158>)
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	0019      	movs	r1, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	430a      	orrs	r2, r1
 8004fae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb4:	2240      	movs	r2, #64	; 0x40
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	d01d      	beq.n	8004ff6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	4a1d      	ldr	r2, [pc, #116]	; (8005038 <UART_AdvFeatureConfig+0x15c>)
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	0019      	movs	r1, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fd6:	2380      	movs	r3, #128	; 0x80
 8004fd8:	035b      	lsls	r3, r3, #13
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d10b      	bne.n	8004ff6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	4a15      	ldr	r2, [pc, #84]	; (800503c <UART_AdvFeatureConfig+0x160>)
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	0019      	movs	r1, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffa:	2280      	movs	r2, #128	; 0x80
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	d00b      	beq.n	8005018 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	4a0e      	ldr	r2, [pc, #56]	; (8005040 <UART_AdvFeatureConfig+0x164>)
 8005008:	4013      	ands	r3, r2
 800500a:	0019      	movs	r1, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	430a      	orrs	r2, r1
 8005016:	605a      	str	r2, [r3, #4]
  }
}
 8005018:	46c0      	nop			; (mov r8, r8)
 800501a:	46bd      	mov	sp, r7
 800501c:	b002      	add	sp, #8
 800501e:	bd80      	pop	{r7, pc}
 8005020:	fffdffff 	.word	0xfffdffff
 8005024:	fffeffff 	.word	0xfffeffff
 8005028:	fffbffff 	.word	0xfffbffff
 800502c:	ffff7fff 	.word	0xffff7fff
 8005030:	ffffefff 	.word	0xffffefff
 8005034:	ffffdfff 	.word	0xffffdfff
 8005038:	ffefffff 	.word	0xffefffff
 800503c:	ff9fffff 	.word	0xff9fffff
 8005040:	fff7ffff 	.word	0xfff7ffff

08005044 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b092      	sub	sp, #72	; 0x48
 8005048:	af02      	add	r7, sp, #8
 800504a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2284      	movs	r2, #132	; 0x84
 8005050:	2100      	movs	r1, #0
 8005052:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005054:	f7fc f974 	bl	8001340 <HAL_GetTick>
 8005058:	0003      	movs	r3, r0
 800505a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2208      	movs	r2, #8
 8005064:	4013      	ands	r3, r2
 8005066:	2b08      	cmp	r3, #8
 8005068:	d12c      	bne.n	80050c4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800506a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800506c:	2280      	movs	r2, #128	; 0x80
 800506e:	0391      	lsls	r1, r2, #14
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	4a46      	ldr	r2, [pc, #280]	; (800518c <UART_CheckIdleState+0x148>)
 8005074:	9200      	str	r2, [sp, #0]
 8005076:	2200      	movs	r2, #0
 8005078:	f000 f88c 	bl	8005194 <UART_WaitOnFlagUntilTimeout>
 800507c:	1e03      	subs	r3, r0, #0
 800507e:	d021      	beq.n	80050c4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005080:	f3ef 8310 	mrs	r3, PRIMASK
 8005084:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005088:	63bb      	str	r3, [r7, #56]	; 0x38
 800508a:	2301      	movs	r3, #1
 800508c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800508e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005090:	f383 8810 	msr	PRIMASK, r3
}
 8005094:	46c0      	nop			; (mov r8, r8)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2180      	movs	r1, #128	; 0x80
 80050a2:	438a      	bics	r2, r1
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ac:	f383 8810 	msr	PRIMASK, r3
}
 80050b0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2220      	movs	r2, #32
 80050b6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2278      	movs	r2, #120	; 0x78
 80050bc:	2100      	movs	r1, #0
 80050be:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e05f      	b.n	8005184 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2204      	movs	r2, #4
 80050cc:	4013      	ands	r3, r2
 80050ce:	2b04      	cmp	r3, #4
 80050d0:	d146      	bne.n	8005160 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050d4:	2280      	movs	r2, #128	; 0x80
 80050d6:	03d1      	lsls	r1, r2, #15
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	4a2c      	ldr	r2, [pc, #176]	; (800518c <UART_CheckIdleState+0x148>)
 80050dc:	9200      	str	r2, [sp, #0]
 80050de:	2200      	movs	r2, #0
 80050e0:	f000 f858 	bl	8005194 <UART_WaitOnFlagUntilTimeout>
 80050e4:	1e03      	subs	r3, r0, #0
 80050e6:	d03b      	beq.n	8005160 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050e8:	f3ef 8310 	mrs	r3, PRIMASK
 80050ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80050ee:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050f0:	637b      	str	r3, [r7, #52]	; 0x34
 80050f2:	2301      	movs	r3, #1
 80050f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	f383 8810 	msr	PRIMASK, r3
}
 80050fc:	46c0      	nop			; (mov r8, r8)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4921      	ldr	r1, [pc, #132]	; (8005190 <UART_CheckIdleState+0x14c>)
 800510a:	400a      	ands	r2, r1
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005110:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f383 8810 	msr	PRIMASK, r3
}
 8005118:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800511a:	f3ef 8310 	mrs	r3, PRIMASK
 800511e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005120:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005122:	633b      	str	r3, [r7, #48]	; 0x30
 8005124:	2301      	movs	r3, #1
 8005126:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	f383 8810 	msr	PRIMASK, r3
}
 800512e:	46c0      	nop			; (mov r8, r8)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689a      	ldr	r2, [r3, #8]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2101      	movs	r1, #1
 800513c:	438a      	bics	r2, r1
 800513e:	609a      	str	r2, [r3, #8]
 8005140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005142:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005144:	6a3b      	ldr	r3, [r7, #32]
 8005146:	f383 8810 	msr	PRIMASK, r3
}
 800514a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2280      	movs	r2, #128	; 0x80
 8005150:	2120      	movs	r1, #32
 8005152:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2278      	movs	r2, #120	; 0x78
 8005158:	2100      	movs	r1, #0
 800515a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e011      	b.n	8005184 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2220      	movs	r2, #32
 8005164:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2280      	movs	r2, #128	; 0x80
 800516a:	2120      	movs	r1, #32
 800516c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2278      	movs	r2, #120	; 0x78
 800517e:	2100      	movs	r1, #0
 8005180:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	0018      	movs	r0, r3
 8005186:	46bd      	mov	sp, r7
 8005188:	b010      	add	sp, #64	; 0x40
 800518a:	bd80      	pop	{r7, pc}
 800518c:	01ffffff 	.word	0x01ffffff
 8005190:	fffffedf 	.word	0xfffffedf

08005194 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	603b      	str	r3, [r7, #0]
 80051a0:	1dfb      	adds	r3, r7, #7
 80051a2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051a4:	e04b      	b.n	800523e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	3301      	adds	r3, #1
 80051aa:	d048      	beq.n	800523e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ac:	f7fc f8c8 	bl	8001340 <HAL_GetTick>
 80051b0:	0002      	movs	r2, r0
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d302      	bcc.n	80051c2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e04b      	b.n	800525e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2204      	movs	r2, #4
 80051ce:	4013      	ands	r3, r2
 80051d0:	d035      	beq.n	800523e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	69db      	ldr	r3, [r3, #28]
 80051d8:	2208      	movs	r2, #8
 80051da:	4013      	ands	r3, r2
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d111      	bne.n	8005204 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2208      	movs	r2, #8
 80051e6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	0018      	movs	r0, r3
 80051ec:	f000 f83c 	bl	8005268 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2284      	movs	r2, #132	; 0x84
 80051f4:	2108      	movs	r1, #8
 80051f6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2278      	movs	r2, #120	; 0x78
 80051fc:	2100      	movs	r1, #0
 80051fe:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e02c      	b.n	800525e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	69da      	ldr	r2, [r3, #28]
 800520a:	2380      	movs	r3, #128	; 0x80
 800520c:	011b      	lsls	r3, r3, #4
 800520e:	401a      	ands	r2, r3
 8005210:	2380      	movs	r3, #128	; 0x80
 8005212:	011b      	lsls	r3, r3, #4
 8005214:	429a      	cmp	r2, r3
 8005216:	d112      	bne.n	800523e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2280      	movs	r2, #128	; 0x80
 800521e:	0112      	lsls	r2, r2, #4
 8005220:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	0018      	movs	r0, r3
 8005226:	f000 f81f 	bl	8005268 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2284      	movs	r2, #132	; 0x84
 800522e:	2120      	movs	r1, #32
 8005230:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2278      	movs	r2, #120	; 0x78
 8005236:	2100      	movs	r1, #0
 8005238:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e00f      	b.n	800525e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	69db      	ldr	r3, [r3, #28]
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	4013      	ands	r3, r2
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	425a      	negs	r2, r3
 800524e:	4153      	adcs	r3, r2
 8005250:	b2db      	uxtb	r3, r3
 8005252:	001a      	movs	r2, r3
 8005254:	1dfb      	adds	r3, r7, #7
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	429a      	cmp	r2, r3
 800525a:	d0a4      	beq.n	80051a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	0018      	movs	r0, r3
 8005260:	46bd      	mov	sp, r7
 8005262:	b004      	add	sp, #16
 8005264:	bd80      	pop	{r7, pc}
	...

08005268 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b08e      	sub	sp, #56	; 0x38
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005270:	f3ef 8310 	mrs	r3, PRIMASK
 8005274:	617b      	str	r3, [r7, #20]
  return(result);
 8005276:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005278:	637b      	str	r3, [r7, #52]	; 0x34
 800527a:	2301      	movs	r3, #1
 800527c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	f383 8810 	msr	PRIMASK, r3
}
 8005284:	46c0      	nop			; (mov r8, r8)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4926      	ldr	r1, [pc, #152]	; (800532c <UART_EndRxTransfer+0xc4>)
 8005292:	400a      	ands	r2, r1
 8005294:	601a      	str	r2, [r3, #0]
 8005296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005298:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	f383 8810 	msr	PRIMASK, r3
}
 80052a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052a2:	f3ef 8310 	mrs	r3, PRIMASK
 80052a6:	623b      	str	r3, [r7, #32]
  return(result);
 80052a8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052aa:	633b      	str	r3, [r7, #48]	; 0x30
 80052ac:	2301      	movs	r3, #1
 80052ae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	f383 8810 	msr	PRIMASK, r3
}
 80052b6:	46c0      	nop			; (mov r8, r8)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	689a      	ldr	r2, [r3, #8]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2101      	movs	r1, #1
 80052c4:	438a      	bics	r2, r1
 80052c6:	609a      	str	r2, [r3, #8]
 80052c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ca:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ce:	f383 8810 	msr	PRIMASK, r3
}
 80052d2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d118      	bne.n	800530e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052dc:	f3ef 8310 	mrs	r3, PRIMASK
 80052e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80052e2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052e6:	2301      	movs	r3, #1
 80052e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f383 8810 	msr	PRIMASK, r3
}
 80052f0:	46c0      	nop			; (mov r8, r8)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2110      	movs	r1, #16
 80052fe:	438a      	bics	r2, r1
 8005300:	601a      	str	r2, [r3, #0]
 8005302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005304:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	f383 8810 	msr	PRIMASK, r3
}
 800530c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2280      	movs	r2, #128	; 0x80
 8005312:	2120      	movs	r1, #32
 8005314:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005322:	46c0      	nop			; (mov r8, r8)
 8005324:	46bd      	mov	sp, r7
 8005326:	b00e      	add	sp, #56	; 0x38
 8005328:	bd80      	pop	{r7, pc}
 800532a:	46c0      	nop			; (mov r8, r8)
 800532c:	fffffedf 	.word	0xfffffedf

08005330 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	225a      	movs	r2, #90	; 0x5a
 8005342:	2100      	movs	r1, #0
 8005344:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2252      	movs	r2, #82	; 0x52
 800534a:	2100      	movs	r1, #0
 800534c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	0018      	movs	r0, r3
 8005352:	f7ff fc6f 	bl	8004c34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005356:	46c0      	nop			; (mov r8, r8)
 8005358:	46bd      	mov	sp, r7
 800535a:	b004      	add	sp, #16
 800535c:	bd80      	pop	{r7, pc}

0800535e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b086      	sub	sp, #24
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005366:	f3ef 8310 	mrs	r3, PRIMASK
 800536a:	60bb      	str	r3, [r7, #8]
  return(result);
 800536c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800536e:	617b      	str	r3, [r7, #20]
 8005370:	2301      	movs	r3, #1
 8005372:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f383 8810 	msr	PRIMASK, r3
}
 800537a:	46c0      	nop			; (mov r8, r8)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2140      	movs	r1, #64	; 0x40
 8005388:	438a      	bics	r2, r1
 800538a:	601a      	str	r2, [r3, #0]
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	f383 8810 	msr	PRIMASK, r3
}
 8005396:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2220      	movs	r2, #32
 800539c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	0018      	movs	r0, r3
 80053a8:	f7ff fc3c 	bl	8004c24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053ac:	46c0      	nop			; (mov r8, r8)
 80053ae:	46bd      	mov	sp, r7
 80053b0:	b006      	add	sp, #24
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80053bc:	46c0      	nop			; (mov r8, r8)
 80053be:	46bd      	mov	sp, r7
 80053c0:	b002      	add	sp, #8
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <siprintf>:
 80053c4:	b40e      	push	{r1, r2, r3}
 80053c6:	b500      	push	{lr}
 80053c8:	490b      	ldr	r1, [pc, #44]	; (80053f8 <siprintf+0x34>)
 80053ca:	b09c      	sub	sp, #112	; 0x70
 80053cc:	ab1d      	add	r3, sp, #116	; 0x74
 80053ce:	9002      	str	r0, [sp, #8]
 80053d0:	9006      	str	r0, [sp, #24]
 80053d2:	9107      	str	r1, [sp, #28]
 80053d4:	9104      	str	r1, [sp, #16]
 80053d6:	4809      	ldr	r0, [pc, #36]	; (80053fc <siprintf+0x38>)
 80053d8:	4909      	ldr	r1, [pc, #36]	; (8005400 <siprintf+0x3c>)
 80053da:	cb04      	ldmia	r3!, {r2}
 80053dc:	9105      	str	r1, [sp, #20]
 80053de:	6800      	ldr	r0, [r0, #0]
 80053e0:	a902      	add	r1, sp, #8
 80053e2:	9301      	str	r3, [sp, #4]
 80053e4:	f000 f8a4 	bl	8005530 <_svfiprintf_r>
 80053e8:	2200      	movs	r2, #0
 80053ea:	9b02      	ldr	r3, [sp, #8]
 80053ec:	701a      	strb	r2, [r3, #0]
 80053ee:	b01c      	add	sp, #112	; 0x70
 80053f0:	bc08      	pop	{r3}
 80053f2:	b003      	add	sp, #12
 80053f4:	4718      	bx	r3
 80053f6:	46c0      	nop			; (mov r8, r8)
 80053f8:	7fffffff 	.word	0x7fffffff
 80053fc:	20000058 	.word	0x20000058
 8005400:	ffff0208 	.word	0xffff0208

08005404 <memset>:
 8005404:	0003      	movs	r3, r0
 8005406:	1882      	adds	r2, r0, r2
 8005408:	4293      	cmp	r3, r2
 800540a:	d100      	bne.n	800540e <memset+0xa>
 800540c:	4770      	bx	lr
 800540e:	7019      	strb	r1, [r3, #0]
 8005410:	3301      	adds	r3, #1
 8005412:	e7f9      	b.n	8005408 <memset+0x4>

08005414 <__errno>:
 8005414:	4b01      	ldr	r3, [pc, #4]	; (800541c <__errno+0x8>)
 8005416:	6818      	ldr	r0, [r3, #0]
 8005418:	4770      	bx	lr
 800541a:	46c0      	nop			; (mov r8, r8)
 800541c:	20000058 	.word	0x20000058

08005420 <__libc_init_array>:
 8005420:	b570      	push	{r4, r5, r6, lr}
 8005422:	2600      	movs	r6, #0
 8005424:	4c0c      	ldr	r4, [pc, #48]	; (8005458 <__libc_init_array+0x38>)
 8005426:	4d0d      	ldr	r5, [pc, #52]	; (800545c <__libc_init_array+0x3c>)
 8005428:	1b64      	subs	r4, r4, r5
 800542a:	10a4      	asrs	r4, r4, #2
 800542c:	42a6      	cmp	r6, r4
 800542e:	d109      	bne.n	8005444 <__libc_init_array+0x24>
 8005430:	2600      	movs	r6, #0
 8005432:	f000 fc6b 	bl	8005d0c <_init>
 8005436:	4c0a      	ldr	r4, [pc, #40]	; (8005460 <__libc_init_array+0x40>)
 8005438:	4d0a      	ldr	r5, [pc, #40]	; (8005464 <__libc_init_array+0x44>)
 800543a:	1b64      	subs	r4, r4, r5
 800543c:	10a4      	asrs	r4, r4, #2
 800543e:	42a6      	cmp	r6, r4
 8005440:	d105      	bne.n	800544e <__libc_init_array+0x2e>
 8005442:	bd70      	pop	{r4, r5, r6, pc}
 8005444:	00b3      	lsls	r3, r6, #2
 8005446:	58eb      	ldr	r3, [r5, r3]
 8005448:	4798      	blx	r3
 800544a:	3601      	adds	r6, #1
 800544c:	e7ee      	b.n	800542c <__libc_init_array+0xc>
 800544e:	00b3      	lsls	r3, r6, #2
 8005450:	58eb      	ldr	r3, [r5, r3]
 8005452:	4798      	blx	r3
 8005454:	3601      	adds	r6, #1
 8005456:	e7f2      	b.n	800543e <__libc_init_array+0x1e>
 8005458:	08005dbc 	.word	0x08005dbc
 800545c:	08005dbc 	.word	0x08005dbc
 8005460:	08005dc0 	.word	0x08005dc0
 8005464:	08005dbc 	.word	0x08005dbc

08005468 <__retarget_lock_acquire_recursive>:
 8005468:	4770      	bx	lr

0800546a <__retarget_lock_release_recursive>:
 800546a:	4770      	bx	lr

0800546c <__ssputs_r>:
 800546c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800546e:	b085      	sub	sp, #20
 8005470:	9301      	str	r3, [sp, #4]
 8005472:	9203      	str	r2, [sp, #12]
 8005474:	688e      	ldr	r6, [r1, #8]
 8005476:	9a01      	ldr	r2, [sp, #4]
 8005478:	0007      	movs	r7, r0
 800547a:	000c      	movs	r4, r1
 800547c:	680b      	ldr	r3, [r1, #0]
 800547e:	4296      	cmp	r6, r2
 8005480:	d831      	bhi.n	80054e6 <__ssputs_r+0x7a>
 8005482:	898a      	ldrh	r2, [r1, #12]
 8005484:	2190      	movs	r1, #144	; 0x90
 8005486:	00c9      	lsls	r1, r1, #3
 8005488:	420a      	tst	r2, r1
 800548a:	d029      	beq.n	80054e0 <__ssputs_r+0x74>
 800548c:	2003      	movs	r0, #3
 800548e:	6921      	ldr	r1, [r4, #16]
 8005490:	1a5b      	subs	r3, r3, r1
 8005492:	9302      	str	r3, [sp, #8]
 8005494:	6963      	ldr	r3, [r4, #20]
 8005496:	4343      	muls	r3, r0
 8005498:	0fdd      	lsrs	r5, r3, #31
 800549a:	18ed      	adds	r5, r5, r3
 800549c:	9b01      	ldr	r3, [sp, #4]
 800549e:	9802      	ldr	r0, [sp, #8]
 80054a0:	3301      	adds	r3, #1
 80054a2:	181b      	adds	r3, r3, r0
 80054a4:	106d      	asrs	r5, r5, #1
 80054a6:	42ab      	cmp	r3, r5
 80054a8:	d900      	bls.n	80054ac <__ssputs_r+0x40>
 80054aa:	001d      	movs	r5, r3
 80054ac:	0552      	lsls	r2, r2, #21
 80054ae:	d529      	bpl.n	8005504 <__ssputs_r+0x98>
 80054b0:	0029      	movs	r1, r5
 80054b2:	0038      	movs	r0, r7
 80054b4:	f000 f95e 	bl	8005774 <_malloc_r>
 80054b8:	1e06      	subs	r6, r0, #0
 80054ba:	d02d      	beq.n	8005518 <__ssputs_r+0xac>
 80054bc:	9a02      	ldr	r2, [sp, #8]
 80054be:	6921      	ldr	r1, [r4, #16]
 80054c0:	f000 fbc9 	bl	8005c56 <memcpy>
 80054c4:	89a2      	ldrh	r2, [r4, #12]
 80054c6:	4b19      	ldr	r3, [pc, #100]	; (800552c <__ssputs_r+0xc0>)
 80054c8:	401a      	ands	r2, r3
 80054ca:	2380      	movs	r3, #128	; 0x80
 80054cc:	4313      	orrs	r3, r2
 80054ce:	81a3      	strh	r3, [r4, #12]
 80054d0:	9b02      	ldr	r3, [sp, #8]
 80054d2:	6126      	str	r6, [r4, #16]
 80054d4:	18f6      	adds	r6, r6, r3
 80054d6:	6026      	str	r6, [r4, #0]
 80054d8:	6165      	str	r5, [r4, #20]
 80054da:	9e01      	ldr	r6, [sp, #4]
 80054dc:	1aed      	subs	r5, r5, r3
 80054de:	60a5      	str	r5, [r4, #8]
 80054e0:	9b01      	ldr	r3, [sp, #4]
 80054e2:	429e      	cmp	r6, r3
 80054e4:	d900      	bls.n	80054e8 <__ssputs_r+0x7c>
 80054e6:	9e01      	ldr	r6, [sp, #4]
 80054e8:	0032      	movs	r2, r6
 80054ea:	9903      	ldr	r1, [sp, #12]
 80054ec:	6820      	ldr	r0, [r4, #0]
 80054ee:	f000 fb82 	bl	8005bf6 <memmove>
 80054f2:	2000      	movs	r0, #0
 80054f4:	68a3      	ldr	r3, [r4, #8]
 80054f6:	1b9b      	subs	r3, r3, r6
 80054f8:	60a3      	str	r3, [r4, #8]
 80054fa:	6823      	ldr	r3, [r4, #0]
 80054fc:	199b      	adds	r3, r3, r6
 80054fe:	6023      	str	r3, [r4, #0]
 8005500:	b005      	add	sp, #20
 8005502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005504:	002a      	movs	r2, r5
 8005506:	0038      	movs	r0, r7
 8005508:	f000 fb46 	bl	8005b98 <_realloc_r>
 800550c:	1e06      	subs	r6, r0, #0
 800550e:	d1df      	bne.n	80054d0 <__ssputs_r+0x64>
 8005510:	0038      	movs	r0, r7
 8005512:	6921      	ldr	r1, [r4, #16]
 8005514:	f000 fba8 	bl	8005c68 <_free_r>
 8005518:	230c      	movs	r3, #12
 800551a:	2001      	movs	r0, #1
 800551c:	603b      	str	r3, [r7, #0]
 800551e:	89a2      	ldrh	r2, [r4, #12]
 8005520:	3334      	adds	r3, #52	; 0x34
 8005522:	4313      	orrs	r3, r2
 8005524:	81a3      	strh	r3, [r4, #12]
 8005526:	4240      	negs	r0, r0
 8005528:	e7ea      	b.n	8005500 <__ssputs_r+0x94>
 800552a:	46c0      	nop			; (mov r8, r8)
 800552c:	fffffb7f 	.word	0xfffffb7f

08005530 <_svfiprintf_r>:
 8005530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005532:	b0a1      	sub	sp, #132	; 0x84
 8005534:	9003      	str	r0, [sp, #12]
 8005536:	001d      	movs	r5, r3
 8005538:	898b      	ldrh	r3, [r1, #12]
 800553a:	000f      	movs	r7, r1
 800553c:	0016      	movs	r6, r2
 800553e:	061b      	lsls	r3, r3, #24
 8005540:	d511      	bpl.n	8005566 <_svfiprintf_r+0x36>
 8005542:	690b      	ldr	r3, [r1, #16]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d10e      	bne.n	8005566 <_svfiprintf_r+0x36>
 8005548:	2140      	movs	r1, #64	; 0x40
 800554a:	f000 f913 	bl	8005774 <_malloc_r>
 800554e:	6038      	str	r0, [r7, #0]
 8005550:	6138      	str	r0, [r7, #16]
 8005552:	2800      	cmp	r0, #0
 8005554:	d105      	bne.n	8005562 <_svfiprintf_r+0x32>
 8005556:	230c      	movs	r3, #12
 8005558:	9a03      	ldr	r2, [sp, #12]
 800555a:	3801      	subs	r0, #1
 800555c:	6013      	str	r3, [r2, #0]
 800555e:	b021      	add	sp, #132	; 0x84
 8005560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005562:	2340      	movs	r3, #64	; 0x40
 8005564:	617b      	str	r3, [r7, #20]
 8005566:	2300      	movs	r3, #0
 8005568:	ac08      	add	r4, sp, #32
 800556a:	6163      	str	r3, [r4, #20]
 800556c:	3320      	adds	r3, #32
 800556e:	7663      	strb	r3, [r4, #25]
 8005570:	3310      	adds	r3, #16
 8005572:	76a3      	strb	r3, [r4, #26]
 8005574:	9507      	str	r5, [sp, #28]
 8005576:	0035      	movs	r5, r6
 8005578:	782b      	ldrb	r3, [r5, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d001      	beq.n	8005582 <_svfiprintf_r+0x52>
 800557e:	2b25      	cmp	r3, #37	; 0x25
 8005580:	d148      	bne.n	8005614 <_svfiprintf_r+0xe4>
 8005582:	1bab      	subs	r3, r5, r6
 8005584:	9305      	str	r3, [sp, #20]
 8005586:	42b5      	cmp	r5, r6
 8005588:	d00b      	beq.n	80055a2 <_svfiprintf_r+0x72>
 800558a:	0032      	movs	r2, r6
 800558c:	0039      	movs	r1, r7
 800558e:	9803      	ldr	r0, [sp, #12]
 8005590:	f7ff ff6c 	bl	800546c <__ssputs_r>
 8005594:	3001      	adds	r0, #1
 8005596:	d100      	bne.n	800559a <_svfiprintf_r+0x6a>
 8005598:	e0af      	b.n	80056fa <_svfiprintf_r+0x1ca>
 800559a:	6963      	ldr	r3, [r4, #20]
 800559c:	9a05      	ldr	r2, [sp, #20]
 800559e:	189b      	adds	r3, r3, r2
 80055a0:	6163      	str	r3, [r4, #20]
 80055a2:	782b      	ldrb	r3, [r5, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d100      	bne.n	80055aa <_svfiprintf_r+0x7a>
 80055a8:	e0a7      	b.n	80056fa <_svfiprintf_r+0x1ca>
 80055aa:	2201      	movs	r2, #1
 80055ac:	2300      	movs	r3, #0
 80055ae:	4252      	negs	r2, r2
 80055b0:	6062      	str	r2, [r4, #4]
 80055b2:	a904      	add	r1, sp, #16
 80055b4:	3254      	adds	r2, #84	; 0x54
 80055b6:	1852      	adds	r2, r2, r1
 80055b8:	1c6e      	adds	r6, r5, #1
 80055ba:	6023      	str	r3, [r4, #0]
 80055bc:	60e3      	str	r3, [r4, #12]
 80055be:	60a3      	str	r3, [r4, #8]
 80055c0:	7013      	strb	r3, [r2, #0]
 80055c2:	65a3      	str	r3, [r4, #88]	; 0x58
 80055c4:	4b55      	ldr	r3, [pc, #340]	; (800571c <_svfiprintf_r+0x1ec>)
 80055c6:	2205      	movs	r2, #5
 80055c8:	0018      	movs	r0, r3
 80055ca:	7831      	ldrb	r1, [r6, #0]
 80055cc:	9305      	str	r3, [sp, #20]
 80055ce:	f000 fb37 	bl	8005c40 <memchr>
 80055d2:	1c75      	adds	r5, r6, #1
 80055d4:	2800      	cmp	r0, #0
 80055d6:	d11f      	bne.n	8005618 <_svfiprintf_r+0xe8>
 80055d8:	6822      	ldr	r2, [r4, #0]
 80055da:	06d3      	lsls	r3, r2, #27
 80055dc:	d504      	bpl.n	80055e8 <_svfiprintf_r+0xb8>
 80055de:	2353      	movs	r3, #83	; 0x53
 80055e0:	a904      	add	r1, sp, #16
 80055e2:	185b      	adds	r3, r3, r1
 80055e4:	2120      	movs	r1, #32
 80055e6:	7019      	strb	r1, [r3, #0]
 80055e8:	0713      	lsls	r3, r2, #28
 80055ea:	d504      	bpl.n	80055f6 <_svfiprintf_r+0xc6>
 80055ec:	2353      	movs	r3, #83	; 0x53
 80055ee:	a904      	add	r1, sp, #16
 80055f0:	185b      	adds	r3, r3, r1
 80055f2:	212b      	movs	r1, #43	; 0x2b
 80055f4:	7019      	strb	r1, [r3, #0]
 80055f6:	7833      	ldrb	r3, [r6, #0]
 80055f8:	2b2a      	cmp	r3, #42	; 0x2a
 80055fa:	d016      	beq.n	800562a <_svfiprintf_r+0xfa>
 80055fc:	0035      	movs	r5, r6
 80055fe:	2100      	movs	r1, #0
 8005600:	200a      	movs	r0, #10
 8005602:	68e3      	ldr	r3, [r4, #12]
 8005604:	782a      	ldrb	r2, [r5, #0]
 8005606:	1c6e      	adds	r6, r5, #1
 8005608:	3a30      	subs	r2, #48	; 0x30
 800560a:	2a09      	cmp	r2, #9
 800560c:	d94e      	bls.n	80056ac <_svfiprintf_r+0x17c>
 800560e:	2900      	cmp	r1, #0
 8005610:	d111      	bne.n	8005636 <_svfiprintf_r+0x106>
 8005612:	e017      	b.n	8005644 <_svfiprintf_r+0x114>
 8005614:	3501      	adds	r5, #1
 8005616:	e7af      	b.n	8005578 <_svfiprintf_r+0x48>
 8005618:	9b05      	ldr	r3, [sp, #20]
 800561a:	6822      	ldr	r2, [r4, #0]
 800561c:	1ac0      	subs	r0, r0, r3
 800561e:	2301      	movs	r3, #1
 8005620:	4083      	lsls	r3, r0
 8005622:	4313      	orrs	r3, r2
 8005624:	002e      	movs	r6, r5
 8005626:	6023      	str	r3, [r4, #0]
 8005628:	e7cc      	b.n	80055c4 <_svfiprintf_r+0x94>
 800562a:	9b07      	ldr	r3, [sp, #28]
 800562c:	1d19      	adds	r1, r3, #4
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	9107      	str	r1, [sp, #28]
 8005632:	2b00      	cmp	r3, #0
 8005634:	db01      	blt.n	800563a <_svfiprintf_r+0x10a>
 8005636:	930b      	str	r3, [sp, #44]	; 0x2c
 8005638:	e004      	b.n	8005644 <_svfiprintf_r+0x114>
 800563a:	425b      	negs	r3, r3
 800563c:	60e3      	str	r3, [r4, #12]
 800563e:	2302      	movs	r3, #2
 8005640:	4313      	orrs	r3, r2
 8005642:	6023      	str	r3, [r4, #0]
 8005644:	782b      	ldrb	r3, [r5, #0]
 8005646:	2b2e      	cmp	r3, #46	; 0x2e
 8005648:	d10a      	bne.n	8005660 <_svfiprintf_r+0x130>
 800564a:	786b      	ldrb	r3, [r5, #1]
 800564c:	2b2a      	cmp	r3, #42	; 0x2a
 800564e:	d135      	bne.n	80056bc <_svfiprintf_r+0x18c>
 8005650:	9b07      	ldr	r3, [sp, #28]
 8005652:	3502      	adds	r5, #2
 8005654:	1d1a      	adds	r2, r3, #4
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	9207      	str	r2, [sp, #28]
 800565a:	2b00      	cmp	r3, #0
 800565c:	db2b      	blt.n	80056b6 <_svfiprintf_r+0x186>
 800565e:	9309      	str	r3, [sp, #36]	; 0x24
 8005660:	4e2f      	ldr	r6, [pc, #188]	; (8005720 <_svfiprintf_r+0x1f0>)
 8005662:	2203      	movs	r2, #3
 8005664:	0030      	movs	r0, r6
 8005666:	7829      	ldrb	r1, [r5, #0]
 8005668:	f000 faea 	bl	8005c40 <memchr>
 800566c:	2800      	cmp	r0, #0
 800566e:	d006      	beq.n	800567e <_svfiprintf_r+0x14e>
 8005670:	2340      	movs	r3, #64	; 0x40
 8005672:	1b80      	subs	r0, r0, r6
 8005674:	4083      	lsls	r3, r0
 8005676:	6822      	ldr	r2, [r4, #0]
 8005678:	3501      	adds	r5, #1
 800567a:	4313      	orrs	r3, r2
 800567c:	6023      	str	r3, [r4, #0]
 800567e:	7829      	ldrb	r1, [r5, #0]
 8005680:	2206      	movs	r2, #6
 8005682:	4828      	ldr	r0, [pc, #160]	; (8005724 <_svfiprintf_r+0x1f4>)
 8005684:	1c6e      	adds	r6, r5, #1
 8005686:	7621      	strb	r1, [r4, #24]
 8005688:	f000 fada 	bl	8005c40 <memchr>
 800568c:	2800      	cmp	r0, #0
 800568e:	d03c      	beq.n	800570a <_svfiprintf_r+0x1da>
 8005690:	4b25      	ldr	r3, [pc, #148]	; (8005728 <_svfiprintf_r+0x1f8>)
 8005692:	2b00      	cmp	r3, #0
 8005694:	d125      	bne.n	80056e2 <_svfiprintf_r+0x1b2>
 8005696:	2207      	movs	r2, #7
 8005698:	9b07      	ldr	r3, [sp, #28]
 800569a:	3307      	adds	r3, #7
 800569c:	4393      	bics	r3, r2
 800569e:	3308      	adds	r3, #8
 80056a0:	9307      	str	r3, [sp, #28]
 80056a2:	6963      	ldr	r3, [r4, #20]
 80056a4:	9a04      	ldr	r2, [sp, #16]
 80056a6:	189b      	adds	r3, r3, r2
 80056a8:	6163      	str	r3, [r4, #20]
 80056aa:	e764      	b.n	8005576 <_svfiprintf_r+0x46>
 80056ac:	4343      	muls	r3, r0
 80056ae:	0035      	movs	r5, r6
 80056b0:	2101      	movs	r1, #1
 80056b2:	189b      	adds	r3, r3, r2
 80056b4:	e7a6      	b.n	8005604 <_svfiprintf_r+0xd4>
 80056b6:	2301      	movs	r3, #1
 80056b8:	425b      	negs	r3, r3
 80056ba:	e7d0      	b.n	800565e <_svfiprintf_r+0x12e>
 80056bc:	2300      	movs	r3, #0
 80056be:	200a      	movs	r0, #10
 80056c0:	001a      	movs	r2, r3
 80056c2:	3501      	adds	r5, #1
 80056c4:	6063      	str	r3, [r4, #4]
 80056c6:	7829      	ldrb	r1, [r5, #0]
 80056c8:	1c6e      	adds	r6, r5, #1
 80056ca:	3930      	subs	r1, #48	; 0x30
 80056cc:	2909      	cmp	r1, #9
 80056ce:	d903      	bls.n	80056d8 <_svfiprintf_r+0x1a8>
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d0c5      	beq.n	8005660 <_svfiprintf_r+0x130>
 80056d4:	9209      	str	r2, [sp, #36]	; 0x24
 80056d6:	e7c3      	b.n	8005660 <_svfiprintf_r+0x130>
 80056d8:	4342      	muls	r2, r0
 80056da:	0035      	movs	r5, r6
 80056dc:	2301      	movs	r3, #1
 80056de:	1852      	adds	r2, r2, r1
 80056e0:	e7f1      	b.n	80056c6 <_svfiprintf_r+0x196>
 80056e2:	aa07      	add	r2, sp, #28
 80056e4:	9200      	str	r2, [sp, #0]
 80056e6:	0021      	movs	r1, r4
 80056e8:	003a      	movs	r2, r7
 80056ea:	4b10      	ldr	r3, [pc, #64]	; (800572c <_svfiprintf_r+0x1fc>)
 80056ec:	9803      	ldr	r0, [sp, #12]
 80056ee:	e000      	b.n	80056f2 <_svfiprintf_r+0x1c2>
 80056f0:	bf00      	nop
 80056f2:	9004      	str	r0, [sp, #16]
 80056f4:	9b04      	ldr	r3, [sp, #16]
 80056f6:	3301      	adds	r3, #1
 80056f8:	d1d3      	bne.n	80056a2 <_svfiprintf_r+0x172>
 80056fa:	89bb      	ldrh	r3, [r7, #12]
 80056fc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80056fe:	065b      	lsls	r3, r3, #25
 8005700:	d400      	bmi.n	8005704 <_svfiprintf_r+0x1d4>
 8005702:	e72c      	b.n	800555e <_svfiprintf_r+0x2e>
 8005704:	2001      	movs	r0, #1
 8005706:	4240      	negs	r0, r0
 8005708:	e729      	b.n	800555e <_svfiprintf_r+0x2e>
 800570a:	aa07      	add	r2, sp, #28
 800570c:	9200      	str	r2, [sp, #0]
 800570e:	0021      	movs	r1, r4
 8005710:	003a      	movs	r2, r7
 8005712:	4b06      	ldr	r3, [pc, #24]	; (800572c <_svfiprintf_r+0x1fc>)
 8005714:	9803      	ldr	r0, [sp, #12]
 8005716:	f000 f91f 	bl	8005958 <_printf_i>
 800571a:	e7ea      	b.n	80056f2 <_svfiprintf_r+0x1c2>
 800571c:	08005d88 	.word	0x08005d88
 8005720:	08005d8e 	.word	0x08005d8e
 8005724:	08005d92 	.word	0x08005d92
 8005728:	00000000 	.word	0x00000000
 800572c:	0800546d 	.word	0x0800546d

08005730 <sbrk_aligned>:
 8005730:	b570      	push	{r4, r5, r6, lr}
 8005732:	4e0f      	ldr	r6, [pc, #60]	; (8005770 <sbrk_aligned+0x40>)
 8005734:	000d      	movs	r5, r1
 8005736:	6831      	ldr	r1, [r6, #0]
 8005738:	0004      	movs	r4, r0
 800573a:	2900      	cmp	r1, #0
 800573c:	d102      	bne.n	8005744 <sbrk_aligned+0x14>
 800573e:	f000 fa6d 	bl	8005c1c <_sbrk_r>
 8005742:	6030      	str	r0, [r6, #0]
 8005744:	0029      	movs	r1, r5
 8005746:	0020      	movs	r0, r4
 8005748:	f000 fa68 	bl	8005c1c <_sbrk_r>
 800574c:	1c43      	adds	r3, r0, #1
 800574e:	d00a      	beq.n	8005766 <sbrk_aligned+0x36>
 8005750:	2303      	movs	r3, #3
 8005752:	1cc5      	adds	r5, r0, #3
 8005754:	439d      	bics	r5, r3
 8005756:	42a8      	cmp	r0, r5
 8005758:	d007      	beq.n	800576a <sbrk_aligned+0x3a>
 800575a:	1a29      	subs	r1, r5, r0
 800575c:	0020      	movs	r0, r4
 800575e:	f000 fa5d 	bl	8005c1c <_sbrk_r>
 8005762:	3001      	adds	r0, #1
 8005764:	d101      	bne.n	800576a <sbrk_aligned+0x3a>
 8005766:	2501      	movs	r5, #1
 8005768:	426d      	negs	r5, r5
 800576a:	0028      	movs	r0, r5
 800576c:	bd70      	pop	{r4, r5, r6, pc}
 800576e:	46c0      	nop			; (mov r8, r8)
 8005770:	200003c8 	.word	0x200003c8

08005774 <_malloc_r>:
 8005774:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005776:	2203      	movs	r2, #3
 8005778:	1ccb      	adds	r3, r1, #3
 800577a:	4393      	bics	r3, r2
 800577c:	3308      	adds	r3, #8
 800577e:	0006      	movs	r6, r0
 8005780:	001f      	movs	r7, r3
 8005782:	2b0c      	cmp	r3, #12
 8005784:	d238      	bcs.n	80057f8 <_malloc_r+0x84>
 8005786:	270c      	movs	r7, #12
 8005788:	42b9      	cmp	r1, r7
 800578a:	d837      	bhi.n	80057fc <_malloc_r+0x88>
 800578c:	0030      	movs	r0, r6
 800578e:	f000 f9f3 	bl	8005b78 <__malloc_lock>
 8005792:	4b38      	ldr	r3, [pc, #224]	; (8005874 <_malloc_r+0x100>)
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	001c      	movs	r4, r3
 800579a:	2c00      	cmp	r4, #0
 800579c:	d133      	bne.n	8005806 <_malloc_r+0x92>
 800579e:	0039      	movs	r1, r7
 80057a0:	0030      	movs	r0, r6
 80057a2:	f7ff ffc5 	bl	8005730 <sbrk_aligned>
 80057a6:	0004      	movs	r4, r0
 80057a8:	1c43      	adds	r3, r0, #1
 80057aa:	d15e      	bne.n	800586a <_malloc_r+0xf6>
 80057ac:	9b00      	ldr	r3, [sp, #0]
 80057ae:	681c      	ldr	r4, [r3, #0]
 80057b0:	0025      	movs	r5, r4
 80057b2:	2d00      	cmp	r5, #0
 80057b4:	d14e      	bne.n	8005854 <_malloc_r+0xe0>
 80057b6:	2c00      	cmp	r4, #0
 80057b8:	d051      	beq.n	800585e <_malloc_r+0xea>
 80057ba:	6823      	ldr	r3, [r4, #0]
 80057bc:	0029      	movs	r1, r5
 80057be:	18e3      	adds	r3, r4, r3
 80057c0:	0030      	movs	r0, r6
 80057c2:	9301      	str	r3, [sp, #4]
 80057c4:	f000 fa2a 	bl	8005c1c <_sbrk_r>
 80057c8:	9b01      	ldr	r3, [sp, #4]
 80057ca:	4283      	cmp	r3, r0
 80057cc:	d147      	bne.n	800585e <_malloc_r+0xea>
 80057ce:	6823      	ldr	r3, [r4, #0]
 80057d0:	0030      	movs	r0, r6
 80057d2:	1aff      	subs	r7, r7, r3
 80057d4:	0039      	movs	r1, r7
 80057d6:	f7ff ffab 	bl	8005730 <sbrk_aligned>
 80057da:	3001      	adds	r0, #1
 80057dc:	d03f      	beq.n	800585e <_malloc_r+0xea>
 80057de:	6823      	ldr	r3, [r4, #0]
 80057e0:	19db      	adds	r3, r3, r7
 80057e2:	6023      	str	r3, [r4, #0]
 80057e4:	9b00      	ldr	r3, [sp, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d040      	beq.n	800586e <_malloc_r+0xfa>
 80057ec:	685a      	ldr	r2, [r3, #4]
 80057ee:	42a2      	cmp	r2, r4
 80057f0:	d133      	bne.n	800585a <_malloc_r+0xe6>
 80057f2:	2200      	movs	r2, #0
 80057f4:	605a      	str	r2, [r3, #4]
 80057f6:	e014      	b.n	8005822 <_malloc_r+0xae>
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	dac5      	bge.n	8005788 <_malloc_r+0x14>
 80057fc:	230c      	movs	r3, #12
 80057fe:	2500      	movs	r5, #0
 8005800:	6033      	str	r3, [r6, #0]
 8005802:	0028      	movs	r0, r5
 8005804:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005806:	6821      	ldr	r1, [r4, #0]
 8005808:	1bc9      	subs	r1, r1, r7
 800580a:	d420      	bmi.n	800584e <_malloc_r+0xda>
 800580c:	290b      	cmp	r1, #11
 800580e:	d918      	bls.n	8005842 <_malloc_r+0xce>
 8005810:	19e2      	adds	r2, r4, r7
 8005812:	6027      	str	r7, [r4, #0]
 8005814:	42a3      	cmp	r3, r4
 8005816:	d112      	bne.n	800583e <_malloc_r+0xca>
 8005818:	9b00      	ldr	r3, [sp, #0]
 800581a:	601a      	str	r2, [r3, #0]
 800581c:	6863      	ldr	r3, [r4, #4]
 800581e:	6011      	str	r1, [r2, #0]
 8005820:	6053      	str	r3, [r2, #4]
 8005822:	0030      	movs	r0, r6
 8005824:	0025      	movs	r5, r4
 8005826:	f000 f9af 	bl	8005b88 <__malloc_unlock>
 800582a:	2207      	movs	r2, #7
 800582c:	350b      	adds	r5, #11
 800582e:	1d23      	adds	r3, r4, #4
 8005830:	4395      	bics	r5, r2
 8005832:	1aea      	subs	r2, r5, r3
 8005834:	429d      	cmp	r5, r3
 8005836:	d0e4      	beq.n	8005802 <_malloc_r+0x8e>
 8005838:	1b5b      	subs	r3, r3, r5
 800583a:	50a3      	str	r3, [r4, r2]
 800583c:	e7e1      	b.n	8005802 <_malloc_r+0x8e>
 800583e:	605a      	str	r2, [r3, #4]
 8005840:	e7ec      	b.n	800581c <_malloc_r+0xa8>
 8005842:	6862      	ldr	r2, [r4, #4]
 8005844:	42a3      	cmp	r3, r4
 8005846:	d1d5      	bne.n	80057f4 <_malloc_r+0x80>
 8005848:	9b00      	ldr	r3, [sp, #0]
 800584a:	601a      	str	r2, [r3, #0]
 800584c:	e7e9      	b.n	8005822 <_malloc_r+0xae>
 800584e:	0023      	movs	r3, r4
 8005850:	6864      	ldr	r4, [r4, #4]
 8005852:	e7a2      	b.n	800579a <_malloc_r+0x26>
 8005854:	002c      	movs	r4, r5
 8005856:	686d      	ldr	r5, [r5, #4]
 8005858:	e7ab      	b.n	80057b2 <_malloc_r+0x3e>
 800585a:	0013      	movs	r3, r2
 800585c:	e7c4      	b.n	80057e8 <_malloc_r+0x74>
 800585e:	230c      	movs	r3, #12
 8005860:	0030      	movs	r0, r6
 8005862:	6033      	str	r3, [r6, #0]
 8005864:	f000 f990 	bl	8005b88 <__malloc_unlock>
 8005868:	e7cb      	b.n	8005802 <_malloc_r+0x8e>
 800586a:	6027      	str	r7, [r4, #0]
 800586c:	e7d9      	b.n	8005822 <_malloc_r+0xae>
 800586e:	605b      	str	r3, [r3, #4]
 8005870:	deff      	udf	#255	; 0xff
 8005872:	46c0      	nop			; (mov r8, r8)
 8005874:	200003c4 	.word	0x200003c4

08005878 <_printf_common>:
 8005878:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800587a:	0016      	movs	r6, r2
 800587c:	9301      	str	r3, [sp, #4]
 800587e:	688a      	ldr	r2, [r1, #8]
 8005880:	690b      	ldr	r3, [r1, #16]
 8005882:	000c      	movs	r4, r1
 8005884:	9000      	str	r0, [sp, #0]
 8005886:	4293      	cmp	r3, r2
 8005888:	da00      	bge.n	800588c <_printf_common+0x14>
 800588a:	0013      	movs	r3, r2
 800588c:	0022      	movs	r2, r4
 800588e:	6033      	str	r3, [r6, #0]
 8005890:	3243      	adds	r2, #67	; 0x43
 8005892:	7812      	ldrb	r2, [r2, #0]
 8005894:	2a00      	cmp	r2, #0
 8005896:	d001      	beq.n	800589c <_printf_common+0x24>
 8005898:	3301      	adds	r3, #1
 800589a:	6033      	str	r3, [r6, #0]
 800589c:	6823      	ldr	r3, [r4, #0]
 800589e:	069b      	lsls	r3, r3, #26
 80058a0:	d502      	bpl.n	80058a8 <_printf_common+0x30>
 80058a2:	6833      	ldr	r3, [r6, #0]
 80058a4:	3302      	adds	r3, #2
 80058a6:	6033      	str	r3, [r6, #0]
 80058a8:	6822      	ldr	r2, [r4, #0]
 80058aa:	2306      	movs	r3, #6
 80058ac:	0015      	movs	r5, r2
 80058ae:	401d      	ands	r5, r3
 80058b0:	421a      	tst	r2, r3
 80058b2:	d027      	beq.n	8005904 <_printf_common+0x8c>
 80058b4:	0023      	movs	r3, r4
 80058b6:	3343      	adds	r3, #67	; 0x43
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	1e5a      	subs	r2, r3, #1
 80058bc:	4193      	sbcs	r3, r2
 80058be:	6822      	ldr	r2, [r4, #0]
 80058c0:	0692      	lsls	r2, r2, #26
 80058c2:	d430      	bmi.n	8005926 <_printf_common+0xae>
 80058c4:	0022      	movs	r2, r4
 80058c6:	9901      	ldr	r1, [sp, #4]
 80058c8:	9800      	ldr	r0, [sp, #0]
 80058ca:	9d08      	ldr	r5, [sp, #32]
 80058cc:	3243      	adds	r2, #67	; 0x43
 80058ce:	47a8      	blx	r5
 80058d0:	3001      	adds	r0, #1
 80058d2:	d025      	beq.n	8005920 <_printf_common+0xa8>
 80058d4:	2206      	movs	r2, #6
 80058d6:	6823      	ldr	r3, [r4, #0]
 80058d8:	2500      	movs	r5, #0
 80058da:	4013      	ands	r3, r2
 80058dc:	2b04      	cmp	r3, #4
 80058de:	d105      	bne.n	80058ec <_printf_common+0x74>
 80058e0:	6833      	ldr	r3, [r6, #0]
 80058e2:	68e5      	ldr	r5, [r4, #12]
 80058e4:	1aed      	subs	r5, r5, r3
 80058e6:	43eb      	mvns	r3, r5
 80058e8:	17db      	asrs	r3, r3, #31
 80058ea:	401d      	ands	r5, r3
 80058ec:	68a3      	ldr	r3, [r4, #8]
 80058ee:	6922      	ldr	r2, [r4, #16]
 80058f0:	4293      	cmp	r3, r2
 80058f2:	dd01      	ble.n	80058f8 <_printf_common+0x80>
 80058f4:	1a9b      	subs	r3, r3, r2
 80058f6:	18ed      	adds	r5, r5, r3
 80058f8:	2600      	movs	r6, #0
 80058fa:	42b5      	cmp	r5, r6
 80058fc:	d120      	bne.n	8005940 <_printf_common+0xc8>
 80058fe:	2000      	movs	r0, #0
 8005900:	e010      	b.n	8005924 <_printf_common+0xac>
 8005902:	3501      	adds	r5, #1
 8005904:	68e3      	ldr	r3, [r4, #12]
 8005906:	6832      	ldr	r2, [r6, #0]
 8005908:	1a9b      	subs	r3, r3, r2
 800590a:	42ab      	cmp	r3, r5
 800590c:	ddd2      	ble.n	80058b4 <_printf_common+0x3c>
 800590e:	0022      	movs	r2, r4
 8005910:	2301      	movs	r3, #1
 8005912:	9901      	ldr	r1, [sp, #4]
 8005914:	9800      	ldr	r0, [sp, #0]
 8005916:	9f08      	ldr	r7, [sp, #32]
 8005918:	3219      	adds	r2, #25
 800591a:	47b8      	blx	r7
 800591c:	3001      	adds	r0, #1
 800591e:	d1f0      	bne.n	8005902 <_printf_common+0x8a>
 8005920:	2001      	movs	r0, #1
 8005922:	4240      	negs	r0, r0
 8005924:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005926:	2030      	movs	r0, #48	; 0x30
 8005928:	18e1      	adds	r1, r4, r3
 800592a:	3143      	adds	r1, #67	; 0x43
 800592c:	7008      	strb	r0, [r1, #0]
 800592e:	0021      	movs	r1, r4
 8005930:	1c5a      	adds	r2, r3, #1
 8005932:	3145      	adds	r1, #69	; 0x45
 8005934:	7809      	ldrb	r1, [r1, #0]
 8005936:	18a2      	adds	r2, r4, r2
 8005938:	3243      	adds	r2, #67	; 0x43
 800593a:	3302      	adds	r3, #2
 800593c:	7011      	strb	r1, [r2, #0]
 800593e:	e7c1      	b.n	80058c4 <_printf_common+0x4c>
 8005940:	0022      	movs	r2, r4
 8005942:	2301      	movs	r3, #1
 8005944:	9901      	ldr	r1, [sp, #4]
 8005946:	9800      	ldr	r0, [sp, #0]
 8005948:	9f08      	ldr	r7, [sp, #32]
 800594a:	321a      	adds	r2, #26
 800594c:	47b8      	blx	r7
 800594e:	3001      	adds	r0, #1
 8005950:	d0e6      	beq.n	8005920 <_printf_common+0xa8>
 8005952:	3601      	adds	r6, #1
 8005954:	e7d1      	b.n	80058fa <_printf_common+0x82>
	...

08005958 <_printf_i>:
 8005958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800595a:	b08b      	sub	sp, #44	; 0x2c
 800595c:	9206      	str	r2, [sp, #24]
 800595e:	000a      	movs	r2, r1
 8005960:	3243      	adds	r2, #67	; 0x43
 8005962:	9307      	str	r3, [sp, #28]
 8005964:	9005      	str	r0, [sp, #20]
 8005966:	9204      	str	r2, [sp, #16]
 8005968:	7e0a      	ldrb	r2, [r1, #24]
 800596a:	000c      	movs	r4, r1
 800596c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800596e:	2a78      	cmp	r2, #120	; 0x78
 8005970:	d809      	bhi.n	8005986 <_printf_i+0x2e>
 8005972:	2a62      	cmp	r2, #98	; 0x62
 8005974:	d80b      	bhi.n	800598e <_printf_i+0x36>
 8005976:	2a00      	cmp	r2, #0
 8005978:	d100      	bne.n	800597c <_printf_i+0x24>
 800597a:	e0be      	b.n	8005afa <_printf_i+0x1a2>
 800597c:	497c      	ldr	r1, [pc, #496]	; (8005b70 <_printf_i+0x218>)
 800597e:	9103      	str	r1, [sp, #12]
 8005980:	2a58      	cmp	r2, #88	; 0x58
 8005982:	d100      	bne.n	8005986 <_printf_i+0x2e>
 8005984:	e093      	b.n	8005aae <_printf_i+0x156>
 8005986:	0026      	movs	r6, r4
 8005988:	3642      	adds	r6, #66	; 0x42
 800598a:	7032      	strb	r2, [r6, #0]
 800598c:	e022      	b.n	80059d4 <_printf_i+0x7c>
 800598e:	0010      	movs	r0, r2
 8005990:	3863      	subs	r0, #99	; 0x63
 8005992:	2815      	cmp	r0, #21
 8005994:	d8f7      	bhi.n	8005986 <_printf_i+0x2e>
 8005996:	f7fa fbb7 	bl	8000108 <__gnu_thumb1_case_shi>
 800599a:	0016      	.short	0x0016
 800599c:	fff6001f 	.word	0xfff6001f
 80059a0:	fff6fff6 	.word	0xfff6fff6
 80059a4:	001ffff6 	.word	0x001ffff6
 80059a8:	fff6fff6 	.word	0xfff6fff6
 80059ac:	fff6fff6 	.word	0xfff6fff6
 80059b0:	003600a3 	.word	0x003600a3
 80059b4:	fff60083 	.word	0xfff60083
 80059b8:	00b4fff6 	.word	0x00b4fff6
 80059bc:	0036fff6 	.word	0x0036fff6
 80059c0:	fff6fff6 	.word	0xfff6fff6
 80059c4:	0087      	.short	0x0087
 80059c6:	0026      	movs	r6, r4
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	3642      	adds	r6, #66	; 0x42
 80059cc:	1d11      	adds	r1, r2, #4
 80059ce:	6019      	str	r1, [r3, #0]
 80059d0:	6813      	ldr	r3, [r2, #0]
 80059d2:	7033      	strb	r3, [r6, #0]
 80059d4:	2301      	movs	r3, #1
 80059d6:	e0a2      	b.n	8005b1e <_printf_i+0x1c6>
 80059d8:	6818      	ldr	r0, [r3, #0]
 80059da:	6809      	ldr	r1, [r1, #0]
 80059dc:	1d02      	adds	r2, r0, #4
 80059de:	060d      	lsls	r5, r1, #24
 80059e0:	d50b      	bpl.n	80059fa <_printf_i+0xa2>
 80059e2:	6805      	ldr	r5, [r0, #0]
 80059e4:	601a      	str	r2, [r3, #0]
 80059e6:	2d00      	cmp	r5, #0
 80059e8:	da03      	bge.n	80059f2 <_printf_i+0x9a>
 80059ea:	232d      	movs	r3, #45	; 0x2d
 80059ec:	9a04      	ldr	r2, [sp, #16]
 80059ee:	426d      	negs	r5, r5
 80059f0:	7013      	strb	r3, [r2, #0]
 80059f2:	4b5f      	ldr	r3, [pc, #380]	; (8005b70 <_printf_i+0x218>)
 80059f4:	270a      	movs	r7, #10
 80059f6:	9303      	str	r3, [sp, #12]
 80059f8:	e01b      	b.n	8005a32 <_printf_i+0xda>
 80059fa:	6805      	ldr	r5, [r0, #0]
 80059fc:	601a      	str	r2, [r3, #0]
 80059fe:	0649      	lsls	r1, r1, #25
 8005a00:	d5f1      	bpl.n	80059e6 <_printf_i+0x8e>
 8005a02:	b22d      	sxth	r5, r5
 8005a04:	e7ef      	b.n	80059e6 <_printf_i+0x8e>
 8005a06:	680d      	ldr	r5, [r1, #0]
 8005a08:	6819      	ldr	r1, [r3, #0]
 8005a0a:	1d08      	adds	r0, r1, #4
 8005a0c:	6018      	str	r0, [r3, #0]
 8005a0e:	062e      	lsls	r6, r5, #24
 8005a10:	d501      	bpl.n	8005a16 <_printf_i+0xbe>
 8005a12:	680d      	ldr	r5, [r1, #0]
 8005a14:	e003      	b.n	8005a1e <_printf_i+0xc6>
 8005a16:	066d      	lsls	r5, r5, #25
 8005a18:	d5fb      	bpl.n	8005a12 <_printf_i+0xba>
 8005a1a:	680d      	ldr	r5, [r1, #0]
 8005a1c:	b2ad      	uxth	r5, r5
 8005a1e:	4b54      	ldr	r3, [pc, #336]	; (8005b70 <_printf_i+0x218>)
 8005a20:	2708      	movs	r7, #8
 8005a22:	9303      	str	r3, [sp, #12]
 8005a24:	2a6f      	cmp	r2, #111	; 0x6f
 8005a26:	d000      	beq.n	8005a2a <_printf_i+0xd2>
 8005a28:	3702      	adds	r7, #2
 8005a2a:	0023      	movs	r3, r4
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	3343      	adds	r3, #67	; 0x43
 8005a30:	701a      	strb	r2, [r3, #0]
 8005a32:	6863      	ldr	r3, [r4, #4]
 8005a34:	60a3      	str	r3, [r4, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	db03      	blt.n	8005a42 <_printf_i+0xea>
 8005a3a:	2104      	movs	r1, #4
 8005a3c:	6822      	ldr	r2, [r4, #0]
 8005a3e:	438a      	bics	r2, r1
 8005a40:	6022      	str	r2, [r4, #0]
 8005a42:	2d00      	cmp	r5, #0
 8005a44:	d102      	bne.n	8005a4c <_printf_i+0xf4>
 8005a46:	9e04      	ldr	r6, [sp, #16]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00c      	beq.n	8005a66 <_printf_i+0x10e>
 8005a4c:	9e04      	ldr	r6, [sp, #16]
 8005a4e:	0028      	movs	r0, r5
 8005a50:	0039      	movs	r1, r7
 8005a52:	f7fa fbe9 	bl	8000228 <__aeabi_uidivmod>
 8005a56:	9b03      	ldr	r3, [sp, #12]
 8005a58:	3e01      	subs	r6, #1
 8005a5a:	5c5b      	ldrb	r3, [r3, r1]
 8005a5c:	7033      	strb	r3, [r6, #0]
 8005a5e:	002b      	movs	r3, r5
 8005a60:	0005      	movs	r5, r0
 8005a62:	429f      	cmp	r7, r3
 8005a64:	d9f3      	bls.n	8005a4e <_printf_i+0xf6>
 8005a66:	2f08      	cmp	r7, #8
 8005a68:	d109      	bne.n	8005a7e <_printf_i+0x126>
 8005a6a:	6823      	ldr	r3, [r4, #0]
 8005a6c:	07db      	lsls	r3, r3, #31
 8005a6e:	d506      	bpl.n	8005a7e <_printf_i+0x126>
 8005a70:	6862      	ldr	r2, [r4, #4]
 8005a72:	6923      	ldr	r3, [r4, #16]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	dc02      	bgt.n	8005a7e <_printf_i+0x126>
 8005a78:	2330      	movs	r3, #48	; 0x30
 8005a7a:	3e01      	subs	r6, #1
 8005a7c:	7033      	strb	r3, [r6, #0]
 8005a7e:	9b04      	ldr	r3, [sp, #16]
 8005a80:	1b9b      	subs	r3, r3, r6
 8005a82:	6123      	str	r3, [r4, #16]
 8005a84:	9b07      	ldr	r3, [sp, #28]
 8005a86:	0021      	movs	r1, r4
 8005a88:	9300      	str	r3, [sp, #0]
 8005a8a:	9805      	ldr	r0, [sp, #20]
 8005a8c:	9b06      	ldr	r3, [sp, #24]
 8005a8e:	aa09      	add	r2, sp, #36	; 0x24
 8005a90:	f7ff fef2 	bl	8005878 <_printf_common>
 8005a94:	3001      	adds	r0, #1
 8005a96:	d147      	bne.n	8005b28 <_printf_i+0x1d0>
 8005a98:	2001      	movs	r0, #1
 8005a9a:	4240      	negs	r0, r0
 8005a9c:	b00b      	add	sp, #44	; 0x2c
 8005a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	6809      	ldr	r1, [r1, #0]
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	6022      	str	r2, [r4, #0]
 8005aa8:	2278      	movs	r2, #120	; 0x78
 8005aaa:	4932      	ldr	r1, [pc, #200]	; (8005b74 <_printf_i+0x21c>)
 8005aac:	9103      	str	r1, [sp, #12]
 8005aae:	0021      	movs	r1, r4
 8005ab0:	3145      	adds	r1, #69	; 0x45
 8005ab2:	700a      	strb	r2, [r1, #0]
 8005ab4:	6819      	ldr	r1, [r3, #0]
 8005ab6:	6822      	ldr	r2, [r4, #0]
 8005ab8:	c920      	ldmia	r1!, {r5}
 8005aba:	0610      	lsls	r0, r2, #24
 8005abc:	d402      	bmi.n	8005ac4 <_printf_i+0x16c>
 8005abe:	0650      	lsls	r0, r2, #25
 8005ac0:	d500      	bpl.n	8005ac4 <_printf_i+0x16c>
 8005ac2:	b2ad      	uxth	r5, r5
 8005ac4:	6019      	str	r1, [r3, #0]
 8005ac6:	07d3      	lsls	r3, r2, #31
 8005ac8:	d502      	bpl.n	8005ad0 <_printf_i+0x178>
 8005aca:	2320      	movs	r3, #32
 8005acc:	4313      	orrs	r3, r2
 8005ace:	6023      	str	r3, [r4, #0]
 8005ad0:	2710      	movs	r7, #16
 8005ad2:	2d00      	cmp	r5, #0
 8005ad4:	d1a9      	bne.n	8005a2a <_printf_i+0xd2>
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	6823      	ldr	r3, [r4, #0]
 8005ada:	4393      	bics	r3, r2
 8005adc:	6023      	str	r3, [r4, #0]
 8005ade:	e7a4      	b.n	8005a2a <_printf_i+0xd2>
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	680d      	ldr	r5, [r1, #0]
 8005ae4:	1d10      	adds	r0, r2, #4
 8005ae6:	6949      	ldr	r1, [r1, #20]
 8005ae8:	6018      	str	r0, [r3, #0]
 8005aea:	6813      	ldr	r3, [r2, #0]
 8005aec:	062e      	lsls	r6, r5, #24
 8005aee:	d501      	bpl.n	8005af4 <_printf_i+0x19c>
 8005af0:	6019      	str	r1, [r3, #0]
 8005af2:	e002      	b.n	8005afa <_printf_i+0x1a2>
 8005af4:	066d      	lsls	r5, r5, #25
 8005af6:	d5fb      	bpl.n	8005af0 <_printf_i+0x198>
 8005af8:	8019      	strh	r1, [r3, #0]
 8005afa:	2300      	movs	r3, #0
 8005afc:	9e04      	ldr	r6, [sp, #16]
 8005afe:	6123      	str	r3, [r4, #16]
 8005b00:	e7c0      	b.n	8005a84 <_printf_i+0x12c>
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	1d11      	adds	r1, r2, #4
 8005b06:	6019      	str	r1, [r3, #0]
 8005b08:	6816      	ldr	r6, [r2, #0]
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	0030      	movs	r0, r6
 8005b0e:	6862      	ldr	r2, [r4, #4]
 8005b10:	f000 f896 	bl	8005c40 <memchr>
 8005b14:	2800      	cmp	r0, #0
 8005b16:	d001      	beq.n	8005b1c <_printf_i+0x1c4>
 8005b18:	1b80      	subs	r0, r0, r6
 8005b1a:	6060      	str	r0, [r4, #4]
 8005b1c:	6863      	ldr	r3, [r4, #4]
 8005b1e:	6123      	str	r3, [r4, #16]
 8005b20:	2300      	movs	r3, #0
 8005b22:	9a04      	ldr	r2, [sp, #16]
 8005b24:	7013      	strb	r3, [r2, #0]
 8005b26:	e7ad      	b.n	8005a84 <_printf_i+0x12c>
 8005b28:	0032      	movs	r2, r6
 8005b2a:	6923      	ldr	r3, [r4, #16]
 8005b2c:	9906      	ldr	r1, [sp, #24]
 8005b2e:	9805      	ldr	r0, [sp, #20]
 8005b30:	9d07      	ldr	r5, [sp, #28]
 8005b32:	47a8      	blx	r5
 8005b34:	3001      	adds	r0, #1
 8005b36:	d0af      	beq.n	8005a98 <_printf_i+0x140>
 8005b38:	6823      	ldr	r3, [r4, #0]
 8005b3a:	079b      	lsls	r3, r3, #30
 8005b3c:	d415      	bmi.n	8005b6a <_printf_i+0x212>
 8005b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b40:	68e0      	ldr	r0, [r4, #12]
 8005b42:	4298      	cmp	r0, r3
 8005b44:	daaa      	bge.n	8005a9c <_printf_i+0x144>
 8005b46:	0018      	movs	r0, r3
 8005b48:	e7a8      	b.n	8005a9c <_printf_i+0x144>
 8005b4a:	0022      	movs	r2, r4
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	9906      	ldr	r1, [sp, #24]
 8005b50:	9805      	ldr	r0, [sp, #20]
 8005b52:	9e07      	ldr	r6, [sp, #28]
 8005b54:	3219      	adds	r2, #25
 8005b56:	47b0      	blx	r6
 8005b58:	3001      	adds	r0, #1
 8005b5a:	d09d      	beq.n	8005a98 <_printf_i+0x140>
 8005b5c:	3501      	adds	r5, #1
 8005b5e:	68e3      	ldr	r3, [r4, #12]
 8005b60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b62:	1a9b      	subs	r3, r3, r2
 8005b64:	42ab      	cmp	r3, r5
 8005b66:	dcf0      	bgt.n	8005b4a <_printf_i+0x1f2>
 8005b68:	e7e9      	b.n	8005b3e <_printf_i+0x1e6>
 8005b6a:	2500      	movs	r5, #0
 8005b6c:	e7f7      	b.n	8005b5e <_printf_i+0x206>
 8005b6e:	46c0      	nop			; (mov r8, r8)
 8005b70:	08005d99 	.word	0x08005d99
 8005b74:	08005daa 	.word	0x08005daa

08005b78 <__malloc_lock>:
 8005b78:	b510      	push	{r4, lr}
 8005b7a:	4802      	ldr	r0, [pc, #8]	; (8005b84 <__malloc_lock+0xc>)
 8005b7c:	f7ff fc74 	bl	8005468 <__retarget_lock_acquire_recursive>
 8005b80:	bd10      	pop	{r4, pc}
 8005b82:	46c0      	nop			; (mov r8, r8)
 8005b84:	200003c0 	.word	0x200003c0

08005b88 <__malloc_unlock>:
 8005b88:	b510      	push	{r4, lr}
 8005b8a:	4802      	ldr	r0, [pc, #8]	; (8005b94 <__malloc_unlock+0xc>)
 8005b8c:	f7ff fc6d 	bl	800546a <__retarget_lock_release_recursive>
 8005b90:	bd10      	pop	{r4, pc}
 8005b92:	46c0      	nop			; (mov r8, r8)
 8005b94:	200003c0 	.word	0x200003c0

08005b98 <_realloc_r>:
 8005b98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b9a:	0007      	movs	r7, r0
 8005b9c:	000e      	movs	r6, r1
 8005b9e:	0014      	movs	r4, r2
 8005ba0:	2900      	cmp	r1, #0
 8005ba2:	d105      	bne.n	8005bb0 <_realloc_r+0x18>
 8005ba4:	0011      	movs	r1, r2
 8005ba6:	f7ff fde5 	bl	8005774 <_malloc_r>
 8005baa:	0005      	movs	r5, r0
 8005bac:	0028      	movs	r0, r5
 8005bae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005bb0:	2a00      	cmp	r2, #0
 8005bb2:	d103      	bne.n	8005bbc <_realloc_r+0x24>
 8005bb4:	f000 f858 	bl	8005c68 <_free_r>
 8005bb8:	0025      	movs	r5, r4
 8005bba:	e7f7      	b.n	8005bac <_realloc_r+0x14>
 8005bbc:	f000 f89e 	bl	8005cfc <_malloc_usable_size_r>
 8005bc0:	9001      	str	r0, [sp, #4]
 8005bc2:	4284      	cmp	r4, r0
 8005bc4:	d803      	bhi.n	8005bce <_realloc_r+0x36>
 8005bc6:	0035      	movs	r5, r6
 8005bc8:	0843      	lsrs	r3, r0, #1
 8005bca:	42a3      	cmp	r3, r4
 8005bcc:	d3ee      	bcc.n	8005bac <_realloc_r+0x14>
 8005bce:	0021      	movs	r1, r4
 8005bd0:	0038      	movs	r0, r7
 8005bd2:	f7ff fdcf 	bl	8005774 <_malloc_r>
 8005bd6:	1e05      	subs	r5, r0, #0
 8005bd8:	d0e8      	beq.n	8005bac <_realloc_r+0x14>
 8005bda:	9b01      	ldr	r3, [sp, #4]
 8005bdc:	0022      	movs	r2, r4
 8005bde:	429c      	cmp	r4, r3
 8005be0:	d900      	bls.n	8005be4 <_realloc_r+0x4c>
 8005be2:	001a      	movs	r2, r3
 8005be4:	0031      	movs	r1, r6
 8005be6:	0028      	movs	r0, r5
 8005be8:	f000 f835 	bl	8005c56 <memcpy>
 8005bec:	0031      	movs	r1, r6
 8005bee:	0038      	movs	r0, r7
 8005bf0:	f000 f83a 	bl	8005c68 <_free_r>
 8005bf4:	e7da      	b.n	8005bac <_realloc_r+0x14>

08005bf6 <memmove>:
 8005bf6:	b510      	push	{r4, lr}
 8005bf8:	4288      	cmp	r0, r1
 8005bfa:	d902      	bls.n	8005c02 <memmove+0xc>
 8005bfc:	188b      	adds	r3, r1, r2
 8005bfe:	4298      	cmp	r0, r3
 8005c00:	d303      	bcc.n	8005c0a <memmove+0x14>
 8005c02:	2300      	movs	r3, #0
 8005c04:	e007      	b.n	8005c16 <memmove+0x20>
 8005c06:	5c8b      	ldrb	r3, [r1, r2]
 8005c08:	5483      	strb	r3, [r0, r2]
 8005c0a:	3a01      	subs	r2, #1
 8005c0c:	d2fb      	bcs.n	8005c06 <memmove+0x10>
 8005c0e:	bd10      	pop	{r4, pc}
 8005c10:	5ccc      	ldrb	r4, [r1, r3]
 8005c12:	54c4      	strb	r4, [r0, r3]
 8005c14:	3301      	adds	r3, #1
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d1fa      	bne.n	8005c10 <memmove+0x1a>
 8005c1a:	e7f8      	b.n	8005c0e <memmove+0x18>

08005c1c <_sbrk_r>:
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	b570      	push	{r4, r5, r6, lr}
 8005c20:	4d06      	ldr	r5, [pc, #24]	; (8005c3c <_sbrk_r+0x20>)
 8005c22:	0004      	movs	r4, r0
 8005c24:	0008      	movs	r0, r1
 8005c26:	602b      	str	r3, [r5, #0]
 8005c28:	f7fb fab2 	bl	8001190 <_sbrk>
 8005c2c:	1c43      	adds	r3, r0, #1
 8005c2e:	d103      	bne.n	8005c38 <_sbrk_r+0x1c>
 8005c30:	682b      	ldr	r3, [r5, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d000      	beq.n	8005c38 <_sbrk_r+0x1c>
 8005c36:	6023      	str	r3, [r4, #0]
 8005c38:	bd70      	pop	{r4, r5, r6, pc}
 8005c3a:	46c0      	nop			; (mov r8, r8)
 8005c3c:	200003cc 	.word	0x200003cc

08005c40 <memchr>:
 8005c40:	b2c9      	uxtb	r1, r1
 8005c42:	1882      	adds	r2, r0, r2
 8005c44:	4290      	cmp	r0, r2
 8005c46:	d101      	bne.n	8005c4c <memchr+0xc>
 8005c48:	2000      	movs	r0, #0
 8005c4a:	4770      	bx	lr
 8005c4c:	7803      	ldrb	r3, [r0, #0]
 8005c4e:	428b      	cmp	r3, r1
 8005c50:	d0fb      	beq.n	8005c4a <memchr+0xa>
 8005c52:	3001      	adds	r0, #1
 8005c54:	e7f6      	b.n	8005c44 <memchr+0x4>

08005c56 <memcpy>:
 8005c56:	2300      	movs	r3, #0
 8005c58:	b510      	push	{r4, lr}
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d100      	bne.n	8005c60 <memcpy+0xa>
 8005c5e:	bd10      	pop	{r4, pc}
 8005c60:	5ccc      	ldrb	r4, [r1, r3]
 8005c62:	54c4      	strb	r4, [r0, r3]
 8005c64:	3301      	adds	r3, #1
 8005c66:	e7f8      	b.n	8005c5a <memcpy+0x4>

08005c68 <_free_r>:
 8005c68:	b570      	push	{r4, r5, r6, lr}
 8005c6a:	0005      	movs	r5, r0
 8005c6c:	2900      	cmp	r1, #0
 8005c6e:	d010      	beq.n	8005c92 <_free_r+0x2a>
 8005c70:	1f0c      	subs	r4, r1, #4
 8005c72:	6823      	ldr	r3, [r4, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	da00      	bge.n	8005c7a <_free_r+0x12>
 8005c78:	18e4      	adds	r4, r4, r3
 8005c7a:	0028      	movs	r0, r5
 8005c7c:	f7ff ff7c 	bl	8005b78 <__malloc_lock>
 8005c80:	4a1d      	ldr	r2, [pc, #116]	; (8005cf8 <_free_r+0x90>)
 8005c82:	6813      	ldr	r3, [r2, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d105      	bne.n	8005c94 <_free_r+0x2c>
 8005c88:	6063      	str	r3, [r4, #4]
 8005c8a:	6014      	str	r4, [r2, #0]
 8005c8c:	0028      	movs	r0, r5
 8005c8e:	f7ff ff7b 	bl	8005b88 <__malloc_unlock>
 8005c92:	bd70      	pop	{r4, r5, r6, pc}
 8005c94:	42a3      	cmp	r3, r4
 8005c96:	d908      	bls.n	8005caa <_free_r+0x42>
 8005c98:	6820      	ldr	r0, [r4, #0]
 8005c9a:	1821      	adds	r1, r4, r0
 8005c9c:	428b      	cmp	r3, r1
 8005c9e:	d1f3      	bne.n	8005c88 <_free_r+0x20>
 8005ca0:	6819      	ldr	r1, [r3, #0]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	1809      	adds	r1, r1, r0
 8005ca6:	6021      	str	r1, [r4, #0]
 8005ca8:	e7ee      	b.n	8005c88 <_free_r+0x20>
 8005caa:	001a      	movs	r2, r3
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d001      	beq.n	8005cb6 <_free_r+0x4e>
 8005cb2:	42a3      	cmp	r3, r4
 8005cb4:	d9f9      	bls.n	8005caa <_free_r+0x42>
 8005cb6:	6811      	ldr	r1, [r2, #0]
 8005cb8:	1850      	adds	r0, r2, r1
 8005cba:	42a0      	cmp	r0, r4
 8005cbc:	d10b      	bne.n	8005cd6 <_free_r+0x6e>
 8005cbe:	6820      	ldr	r0, [r4, #0]
 8005cc0:	1809      	adds	r1, r1, r0
 8005cc2:	1850      	adds	r0, r2, r1
 8005cc4:	6011      	str	r1, [r2, #0]
 8005cc6:	4283      	cmp	r3, r0
 8005cc8:	d1e0      	bne.n	8005c8c <_free_r+0x24>
 8005cca:	6818      	ldr	r0, [r3, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	1841      	adds	r1, r0, r1
 8005cd0:	6011      	str	r1, [r2, #0]
 8005cd2:	6053      	str	r3, [r2, #4]
 8005cd4:	e7da      	b.n	8005c8c <_free_r+0x24>
 8005cd6:	42a0      	cmp	r0, r4
 8005cd8:	d902      	bls.n	8005ce0 <_free_r+0x78>
 8005cda:	230c      	movs	r3, #12
 8005cdc:	602b      	str	r3, [r5, #0]
 8005cde:	e7d5      	b.n	8005c8c <_free_r+0x24>
 8005ce0:	6820      	ldr	r0, [r4, #0]
 8005ce2:	1821      	adds	r1, r4, r0
 8005ce4:	428b      	cmp	r3, r1
 8005ce6:	d103      	bne.n	8005cf0 <_free_r+0x88>
 8005ce8:	6819      	ldr	r1, [r3, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	1809      	adds	r1, r1, r0
 8005cee:	6021      	str	r1, [r4, #0]
 8005cf0:	6063      	str	r3, [r4, #4]
 8005cf2:	6054      	str	r4, [r2, #4]
 8005cf4:	e7ca      	b.n	8005c8c <_free_r+0x24>
 8005cf6:	46c0      	nop			; (mov r8, r8)
 8005cf8:	200003c4 	.word	0x200003c4

08005cfc <_malloc_usable_size_r>:
 8005cfc:	1f0b      	subs	r3, r1, #4
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	1f18      	subs	r0, r3, #4
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	da01      	bge.n	8005d0a <_malloc_usable_size_r+0xe>
 8005d06:	580b      	ldr	r3, [r1, r0]
 8005d08:	18c0      	adds	r0, r0, r3
 8005d0a:	4770      	bx	lr

08005d0c <_init>:
 8005d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d0e:	46c0      	nop			; (mov r8, r8)
 8005d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d12:	bc08      	pop	{r3}
 8005d14:	469e      	mov	lr, r3
 8005d16:	4770      	bx	lr

08005d18 <_fini>:
 8005d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d1a:	46c0      	nop			; (mov r8, r8)
 8005d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d1e:	bc08      	pop	{r3}
 8005d20:	469e      	mov	lr, r3
 8005d22:	4770      	bx	lr
