
DART_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ac0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08005b80  08005b80  00015b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c2c  08005c2c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08005c2c  08005c2c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c2c  08005c2c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c2c  08005c2c  00015c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c30  08005c30  00015c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005c34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  2000005c  08005c90  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  08005c90  00020434  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011130  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002736  00000000  00000000  000311f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f98  00000000  00000000  00033930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c39  00000000  00000000  000348c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002a6b  00000000  00000000  00035501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012a8a  00000000  00000000  00037f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009764c  00000000  00000000  0004a9f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003cd4  00000000  00000000  000e2044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000e5d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005b68 	.word	0x08005b68

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08005b68 	.word	0x08005b68

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <FEB_Fan_Init>:


uint8_t counter = 0;
// ********************************** Initialize **********************************

void FEB_Fan_Init(){
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0

	FEB_Fan_PWM_Init();
 8000238:	f000 f80a 	bl	8000250 <FEB_Fan_PWM_Init>
	FEB_Fan_All_Speed_Set(255 * 0);
 800023c:	2000      	movs	r0, #0
 800023e:	f000 f829 	bl	8000294 <FEB_Fan_All_Speed_Set>
	FEB_Fan_2_Speed_Set(255 * 0.3);
 8000242:	204c      	movs	r0, #76	; 0x4c
 8000244:	f000 f862 	bl	800030c <FEB_Fan_2_Speed_Set>


	//FEB_PID_Init_All();

}
 8000248:	46c0      	nop			; (mov r8, r8)
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
	...

08000250 <FEB_Fan_PWM_Init>:
	float new_PWM = FEB_PID_Update(&FEB_Fan_5_PID, setpoint, tachometer_reading);
	FEB_Fan_5_Speed_Set(new_PWM);
}

// ********************************** PWM **********************************
void FEB_Fan_PWM_Init(void) {
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000254:	4b0d      	ldr	r3, [pc, #52]	; (800028c <FEB_Fan_PWM_Init+0x3c>)
 8000256:	2100      	movs	r1, #0
 8000258:	0018      	movs	r0, r3
 800025a:	f002 fd25 	bl	8002ca8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800025e:	4b0b      	ldr	r3, [pc, #44]	; (800028c <FEB_Fan_PWM_Init+0x3c>)
 8000260:	2104      	movs	r1, #4
 8000262:	0018      	movs	r0, r3
 8000264:	f002 fd20 	bl	8002ca8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000268:	4b08      	ldr	r3, [pc, #32]	; (800028c <FEB_Fan_PWM_Init+0x3c>)
 800026a:	2108      	movs	r1, #8
 800026c:	0018      	movs	r0, r3
 800026e:	f002 fd1b 	bl	8002ca8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000272:	4b07      	ldr	r3, [pc, #28]	; (8000290 <FEB_Fan_PWM_Init+0x40>)
 8000274:	2100      	movs	r1, #0
 8000276:	0018      	movs	r0, r3
 8000278:	f002 fd16 	bl	8002ca8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800027c:	4b04      	ldr	r3, [pc, #16]	; (8000290 <FEB_Fan_PWM_Init+0x40>)
 800027e:	2104      	movs	r1, #4
 8000280:	0018      	movs	r0, r3
 8000282:	f002 fd11 	bl	8002ca8 <HAL_TIM_PWM_Start>
}
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	2000013c 	.word	0x2000013c
 8000290:	20000184 	.word	0x20000184

08000294 <FEB_Fan_All_Speed_Set>:

void FEB_Fan_All_Speed_Set(uint8_t speed) {
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
 800029a:	0002      	movs	r2, r0
 800029c:	1dfb      	adds	r3, r7, #7
 800029e:	701a      	strb	r2, [r3, #0]
	FEB_Fan_1_Speed_Set(speed);
 80002a0:	1dfb      	adds	r3, r7, #7
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	0018      	movs	r0, r3
 80002a6:	f000 f819 	bl	80002dc <FEB_Fan_1_Speed_Set>
	FEB_Fan_2_Speed_Set(speed);
 80002aa:	1dfb      	adds	r3, r7, #7
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	0018      	movs	r0, r3
 80002b0:	f000 f82c 	bl	800030c <FEB_Fan_2_Speed_Set>
	FEB_Fan_3_Speed_Set(speed);
 80002b4:	1dfb      	adds	r3, r7, #7
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	0018      	movs	r0, r3
 80002ba:	f000 f83f 	bl	800033c <FEB_Fan_3_Speed_Set>
	FEB_Fan_4_Speed_Set(speed);
 80002be:	1dfb      	adds	r3, r7, #7
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	0018      	movs	r0, r3
 80002c4:	f000 f852 	bl	800036c <FEB_Fan_4_Speed_Set>
	FEB_Fan_5_Speed_Set(speed);
 80002c8:	1dfb      	adds	r3, r7, #7
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	0018      	movs	r0, r3
 80002ce:	f000 f865 	bl	800039c <FEB_Fan_5_Speed_Set>
}
 80002d2:	46c0      	nop			; (mov r8, r8)
 80002d4:	46bd      	mov	sp, r7
 80002d6:	b002      	add	sp, #8
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <FEB_Fan_1_Speed_Set>:

void FEB_Fan_1_Speed_Set(uint8_t speed) {
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	0002      	movs	r2, r0
 80002e4:	1dfb      	adds	r3, r7, #7
 80002e6:	701a      	strb	r2, [r3, #0]
	FEB_Fan_1_Speed = speed;
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <FEB_Fan_1_Speed_Set+0x28>)
 80002ea:	1dfa      	adds	r2, r7, #7
 80002ec:	7812      	ldrb	r2, [r2, #0]
 80002ee:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, FEB_Fan_1_Speed);
 80002f0:	4b04      	ldr	r3, [pc, #16]	; (8000304 <FEB_Fan_1_Speed_Set+0x28>)
 80002f2:	781a      	ldrb	r2, [r3, #0]
 80002f4:	4b04      	ldr	r3, [pc, #16]	; (8000308 <FEB_Fan_1_Speed_Set+0x2c>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80002fa:	46c0      	nop			; (mov r8, r8)
 80002fc:	46bd      	mov	sp, r7
 80002fe:	b002      	add	sp, #8
 8000300:	bd80      	pop	{r7, pc}
 8000302:	46c0      	nop			; (mov r8, r8)
 8000304:	20000078 	.word	0x20000078
 8000308:	2000013c 	.word	0x2000013c

0800030c <FEB_Fan_2_Speed_Set>:

void FEB_Fan_2_Speed_Set(uint8_t speed) {
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	0002      	movs	r2, r0
 8000314:	1dfb      	adds	r3, r7, #7
 8000316:	701a      	strb	r2, [r3, #0]
	FEB_Fan_2_Speed = speed;
 8000318:	4b06      	ldr	r3, [pc, #24]	; (8000334 <FEB_Fan_2_Speed_Set+0x28>)
 800031a:	1dfa      	adds	r2, r7, #7
 800031c:	7812      	ldrb	r2, [r2, #0]
 800031e:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, FEB_Fan_2_Speed);
 8000320:	4b04      	ldr	r3, [pc, #16]	; (8000334 <FEB_Fan_2_Speed_Set+0x28>)
 8000322:	781a      	ldrb	r2, [r3, #0]
 8000324:	4b04      	ldr	r3, [pc, #16]	; (8000338 <FEB_Fan_2_Speed_Set+0x2c>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	639a      	str	r2, [r3, #56]	; 0x38
}
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	46bd      	mov	sp, r7
 800032e:	b002      	add	sp, #8
 8000330:	bd80      	pop	{r7, pc}
 8000332:	46c0      	nop			; (mov r8, r8)
 8000334:	20000079 	.word	0x20000079
 8000338:	2000013c 	.word	0x2000013c

0800033c <FEB_Fan_3_Speed_Set>:

void FEB_Fan_3_Speed_Set(uint8_t speed) {
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	0002      	movs	r2, r0
 8000344:	1dfb      	adds	r3, r7, #7
 8000346:	701a      	strb	r2, [r3, #0]
	FEB_Fan_3_Speed = speed;
 8000348:	4b06      	ldr	r3, [pc, #24]	; (8000364 <FEB_Fan_3_Speed_Set+0x28>)
 800034a:	1dfa      	adds	r2, r7, #7
 800034c:	7812      	ldrb	r2, [r2, #0]
 800034e:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, FEB_Fan_3_Speed);
 8000350:	4b04      	ldr	r3, [pc, #16]	; (8000364 <FEB_Fan_3_Speed_Set+0x28>)
 8000352:	781a      	ldrb	r2, [r3, #0]
 8000354:	4b04      	ldr	r3, [pc, #16]	; (8000368 <FEB_Fan_3_Speed_Set+0x2c>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	635a      	str	r2, [r3, #52]	; 0x34
}
 800035a:	46c0      	nop			; (mov r8, r8)
 800035c:	46bd      	mov	sp, r7
 800035e:	b002      	add	sp, #8
 8000360:	bd80      	pop	{r7, pc}
 8000362:	46c0      	nop			; (mov r8, r8)
 8000364:	2000007a 	.word	0x2000007a
 8000368:	2000013c 	.word	0x2000013c

0800036c <FEB_Fan_4_Speed_Set>:

void FEB_Fan_4_Speed_Set(uint8_t speed) {
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	0002      	movs	r2, r0
 8000374:	1dfb      	adds	r3, r7, #7
 8000376:	701a      	strb	r2, [r3, #0]
	FEB_Fan_4_Speed = speed;
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <FEB_Fan_4_Speed_Set+0x28>)
 800037a:	1dfa      	adds	r2, r7, #7
 800037c:	7812      	ldrb	r2, [r2, #0]
 800037e:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, FEB_Fan_4_Speed);
 8000380:	4b04      	ldr	r3, [pc, #16]	; (8000394 <FEB_Fan_4_Speed_Set+0x28>)
 8000382:	781a      	ldrb	r2, [r3, #0]
 8000384:	4b04      	ldr	r3, [pc, #16]	; (8000398 <FEB_Fan_4_Speed_Set+0x2c>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	639a      	str	r2, [r3, #56]	; 0x38
}
 800038a:	46c0      	nop			; (mov r8, r8)
 800038c:	46bd      	mov	sp, r7
 800038e:	b002      	add	sp, #8
 8000390:	bd80      	pop	{r7, pc}
 8000392:	46c0      	nop			; (mov r8, r8)
 8000394:	2000007b 	.word	0x2000007b
 8000398:	20000184 	.word	0x20000184

0800039c <FEB_Fan_5_Speed_Set>:

void FEB_Fan_5_Speed_Set(uint8_t speed) {
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	0002      	movs	r2, r0
 80003a4:	1dfb      	adds	r3, r7, #7
 80003a6:	701a      	strb	r2, [r3, #0]
	FEB_Fan_5_Speed = speed;
 80003a8:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <FEB_Fan_5_Speed_Set+0x28>)
 80003aa:	1dfa      	adds	r2, r7, #7
 80003ac:	7812      	ldrb	r2, [r2, #0]
 80003ae:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, FEB_Fan_5_Speed);
 80003b0:	4b04      	ldr	r3, [pc, #16]	; (80003c4 <FEB_Fan_5_Speed_Set+0x28>)
 80003b2:	781a      	ldrb	r2, [r3, #0]
 80003b4:	4b04      	ldr	r3, [pc, #16]	; (80003c8 <FEB_Fan_5_Speed_Set+0x2c>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80003ba:	46c0      	nop			; (mov r8, r8)
 80003bc:	46bd      	mov	sp, r7
 80003be:	b002      	add	sp, #8
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	46c0      	nop			; (mov r8, r8)
 80003c4:	2000007c 	.word	0x2000007c
 80003c8:	20000184 	.word	0x20000184

080003cc <FEB_Init>:

char uart_tx_buffer[5];
uint32_t tach_val;


void FEB_Init(void){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	//FEB_CAN_Init();
	//FEB_ADC_Init();
	FEB_Fan_Init();
 80003d0:	f7ff ff30 	bl	8000234 <FEB_Fan_Init>
	//HAL_TIM_IC_Start_IT(&htim16, TIM_CHANNEL_1);
	//HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);

}
 80003d4:	46c0      	nop			; (mov r8, r8)
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
	...

080003dc <FEB_Main_Loop>:

void FEB_Main_Loop(void){
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0

	// fan 1
	FEB_Fan_1_Speed_Set(255 * 0.3);
 80003e0:	204c      	movs	r0, #76	; 0x4c
 80003e2:	f7ff ff7b 	bl	80002dc <FEB_Fan_1_Speed_Set>
	HAL_TIM_IC_Start_IT(&htim16, TIM_CHANNEL_1);
 80003e6:	4b7d      	ldr	r3, [pc, #500]	; (80005dc <FEB_Main_Loop+0x200>)
 80003e8:	2100      	movs	r1, #0
 80003ea:	0018      	movs	r0, r3
 80003ec:	f002 fd60 	bl	8002eb0 <HAL_TIM_IC_Start_IT>
	HAL_Delay(500);
 80003f0:	23fa      	movs	r3, #250	; 0xfa
 80003f2:	005b      	lsls	r3, r3, #1
 80003f4:	0018      	movs	r0, r3
 80003f6:	f001 f83d 	bl	8001474 <HAL_Delay>
	HAL_TIM_IC_Start_IT(&htim16, TIM_CHANNEL_1);
 80003fa:	4b78      	ldr	r3, [pc, #480]	; (80005dc <FEB_Main_Loop+0x200>)
 80003fc:	2100      	movs	r1, #0
 80003fe:	0018      	movs	r0, r3
 8000400:	f002 fd56 	bl	8002eb0 <HAL_TIM_IC_Start_IT>
	HAL_Delay(500);
 8000404:	23fa      	movs	r3, #250	; 0xfa
 8000406:	005b      	lsls	r3, r3, #1
 8000408:	0018      	movs	r0, r3
 800040a:	f001 f833 	bl	8001474 <HAL_Delay>
	HAL_TIM_IC_Start_IT(&htim16, TIM_CHANNEL_1);
 800040e:	4b73      	ldr	r3, [pc, #460]	; (80005dc <FEB_Main_Loop+0x200>)
 8000410:	2100      	movs	r1, #0
 8000412:	0018      	movs	r0, r3
 8000414:	f002 fd4c 	bl	8002eb0 <HAL_TIM_IC_Start_IT>
	HAL_Delay(500);
 8000418:	23fa      	movs	r3, #250	; 0xfa
 800041a:	005b      	lsls	r3, r3, #1
 800041c:	0018      	movs	r0, r3
 800041e:	f001 f829 	bl	8001474 <HAL_Delay>
	HAL_TIM_IC_Start_IT(&htim16, TIM_CHANNEL_1);
 8000422:	4b6e      	ldr	r3, [pc, #440]	; (80005dc <FEB_Main_Loop+0x200>)
 8000424:	2100      	movs	r1, #0
 8000426:	0018      	movs	r0, r3
 8000428:	f002 fd42 	bl	8002eb0 <HAL_TIM_IC_Start_IT>
	HAL_Delay(500);
 800042c:	23fa      	movs	r3, #250	; 0xfa
 800042e:	005b      	lsls	r3, r3, #1
 8000430:	0018      	movs	r0, r3
 8000432:	f001 f81f 	bl	8001474 <HAL_Delay>
	HAL_TIM_IC_Start_IT(&htim16, TIM_CHANNEL_1);
 8000436:	4b69      	ldr	r3, [pc, #420]	; (80005dc <FEB_Main_Loop+0x200>)
 8000438:	2100      	movs	r1, #0
 800043a:	0018      	movs	r0, r3
 800043c:	f002 fd38 	bl	8002eb0 <HAL_TIM_IC_Start_IT>
	HAL_Delay(500);
 8000440:	23fa      	movs	r3, #250	; 0xfa
 8000442:	005b      	lsls	r3, r3, #1
 8000444:	0018      	movs	r0, r3
 8000446:	f001 f815 	bl	8001474 <HAL_Delay>
	HAL_TIM_IC_Start_IT(&htim16, TIM_CHANNEL_1);
 800044a:	4b64      	ldr	r3, [pc, #400]	; (80005dc <FEB_Main_Loop+0x200>)
 800044c:	2100      	movs	r1, #0
 800044e:	0018      	movs	r0, r3
 8000450:	f002 fd2e 	bl	8002eb0 <HAL_TIM_IC_Start_IT>
	HAL_Delay(500);
 8000454:	23fa      	movs	r3, #250	; 0xfa
 8000456:	005b      	lsls	r3, r3, #1
 8000458:	0018      	movs	r0, r3
 800045a:	f001 f80b 	bl	8001474 <HAL_Delay>
	HAL_TIM_IC_Start_IT(&htim16, TIM_CHANNEL_1);
 800045e:	4b5f      	ldr	r3, [pc, #380]	; (80005dc <FEB_Main_Loop+0x200>)
 8000460:	2100      	movs	r1, #0
 8000462:	0018      	movs	r0, r3
 8000464:	f002 fd24 	bl	8002eb0 <HAL_TIM_IC_Start_IT>
	HAL_Delay(500);
 8000468:	23fa      	movs	r3, #250	; 0xfa
 800046a:	005b      	lsls	r3, r3, #1
 800046c:	0018      	movs	r0, r3
 800046e:	f001 f801 	bl	8001474 <HAL_Delay>
	HAL_TIM_IC_Start_IT(&htim16, TIM_CHANNEL_1);
 8000472:	4b5a      	ldr	r3, [pc, #360]	; (80005dc <FEB_Main_Loop+0x200>)
 8000474:	2100      	movs	r1, #0
 8000476:	0018      	movs	r0, r3
 8000478:	f002 fd1a 	bl	8002eb0 <HAL_TIM_IC_Start_IT>
	HAL_Delay(500);
 800047c:	23fa      	movs	r3, #250	; 0xfa
 800047e:	005b      	lsls	r3, r3, #1
 8000480:	0018      	movs	r0, r3
 8000482:	f000 fff7 	bl	8001474 <HAL_Delay>
	HAL_TIM_IC_Start_IT(&htim16, TIM_CHANNEL_1);
 8000486:	4b55      	ldr	r3, [pc, #340]	; (80005dc <FEB_Main_Loop+0x200>)
 8000488:	2100      	movs	r1, #0
 800048a:	0018      	movs	r0, r3
 800048c:	f002 fd10 	bl	8002eb0 <HAL_TIM_IC_Start_IT>
	HAL_Delay(500);
 8000490:	23fa      	movs	r3, #250	; 0xfa
 8000492:	005b      	lsls	r3, r3, #1
 8000494:	0018      	movs	r0, r3
 8000496:	f000 ffed 	bl	8001474 <HAL_Delay>
	HAL_TIM_IC_Start_IT(&htim16, TIM_CHANNEL_1);
 800049a:	4b50      	ldr	r3, [pc, #320]	; (80005dc <FEB_Main_Loop+0x200>)
 800049c:	2100      	movs	r1, #0
 800049e:	0018      	movs	r0, r3
 80004a0:	f002 fd06 	bl	8002eb0 <HAL_TIM_IC_Start_IT>
	HAL_Delay(500);
 80004a4:	23fa      	movs	r3, #250	; 0xfa
 80004a6:	005b      	lsls	r3, r3, #1
 80004a8:	0018      	movs	r0, r3
 80004aa:	f000 ffe3 	bl	8001474 <HAL_Delay>
	HAL_TIM_IC_Start_IT(&htim16, TIM_CHANNEL_1);
 80004ae:	4b4b      	ldr	r3, [pc, #300]	; (80005dc <FEB_Main_Loop+0x200>)
 80004b0:	2100      	movs	r1, #0
 80004b2:	0018      	movs	r0, r3
 80004b4:	f002 fcfc 	bl	8002eb0 <HAL_TIM_IC_Start_IT>
	HAL_Delay(500);
 80004b8:	23fa      	movs	r3, #250	; 0xfa
 80004ba:	005b      	lsls	r3, r3, #1
 80004bc:	0018      	movs	r0, r3
 80004be:	f000 ffd9 	bl	8001474 <HAL_Delay>
	HAL_TIM_IC_Start_IT(&htim16, TIM_CHANNEL_1);
 80004c2:	4b46      	ldr	r3, [pc, #280]	; (80005dc <FEB_Main_Loop+0x200>)
 80004c4:	2100      	movs	r1, #0
 80004c6:	0018      	movs	r0, r3
 80004c8:	f002 fcf2 	bl	8002eb0 <HAL_TIM_IC_Start_IT>


	// fan 2
	FEB_Fan_All_Speed_Set(255 * 0);
 80004cc:	2000      	movs	r0, #0
 80004ce:	f7ff fee1 	bl	8000294 <FEB_Fan_All_Speed_Set>

	HAL_Delay(5000);
 80004d2:	4b43      	ldr	r3, [pc, #268]	; (80005e0 <FEB_Main_Loop+0x204>)
 80004d4:	0018      	movs	r0, r3
 80004d6:	f000 ffcd 	bl	8001474 <HAL_Delay>

	FEB_Fan_2_Speed_Set(255 * 0.3);
 80004da:	204c      	movs	r0, #76	; 0x4c
 80004dc:	f7ff ff16 	bl	800030c <FEB_Fan_2_Speed_Set>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80004e0:	4b40      	ldr	r3, [pc, #256]	; (80005e4 <FEB_Main_Loop+0x208>)
 80004e2:	2100      	movs	r1, #0
 80004e4:	0018      	movs	r0, r3
 80004e6:	f002 fce3 	bl	8002eb0 <HAL_TIM_IC_Start_IT>
	HAL_Delay(500);
 80004ea:	23fa      	movs	r3, #250	; 0xfa
 80004ec:	005b      	lsls	r3, r3, #1
 80004ee:	0018      	movs	r0, r3
 80004f0:	f000 ffc0 	bl	8001474 <HAL_Delay>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80004f4:	4b3b      	ldr	r3, [pc, #236]	; (80005e4 <FEB_Main_Loop+0x208>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	0018      	movs	r0, r3
 80004fa:	f002 fcd9 	bl	8002eb0 <HAL_TIM_IC_Start_IT>
	HAL_Delay(500);
 80004fe:	23fa      	movs	r3, #250	; 0xfa
 8000500:	005b      	lsls	r3, r3, #1
 8000502:	0018      	movs	r0, r3
 8000504:	f000 ffb6 	bl	8001474 <HAL_Delay>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000508:	4b36      	ldr	r3, [pc, #216]	; (80005e4 <FEB_Main_Loop+0x208>)
 800050a:	2100      	movs	r1, #0
 800050c:	0018      	movs	r0, r3
 800050e:	f002 fccf 	bl	8002eb0 <HAL_TIM_IC_Start_IT>
	HAL_Delay(500);
 8000512:	23fa      	movs	r3, #250	; 0xfa
 8000514:	005b      	lsls	r3, r3, #1
 8000516:	0018      	movs	r0, r3
 8000518:	f000 ffac 	bl	8001474 <HAL_Delay>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800051c:	4b31      	ldr	r3, [pc, #196]	; (80005e4 <FEB_Main_Loop+0x208>)
 800051e:	2100      	movs	r1, #0
 8000520:	0018      	movs	r0, r3
 8000522:	f002 fcc5 	bl	8002eb0 <HAL_TIM_IC_Start_IT>
	HAL_Delay(500);
 8000526:	23fa      	movs	r3, #250	; 0xfa
 8000528:	005b      	lsls	r3, r3, #1
 800052a:	0018      	movs	r0, r3
 800052c:	f000 ffa2 	bl	8001474 <HAL_Delay>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000530:	4b2c      	ldr	r3, [pc, #176]	; (80005e4 <FEB_Main_Loop+0x208>)
 8000532:	2100      	movs	r1, #0
 8000534:	0018      	movs	r0, r3
 8000536:	f002 fcbb 	bl	8002eb0 <HAL_TIM_IC_Start_IT>
	HAL_Delay(500);
 800053a:	23fa      	movs	r3, #250	; 0xfa
 800053c:	005b      	lsls	r3, r3, #1
 800053e:	0018      	movs	r0, r3
 8000540:	f000 ff98 	bl	8001474 <HAL_Delay>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000544:	4b27      	ldr	r3, [pc, #156]	; (80005e4 <FEB_Main_Loop+0x208>)
 8000546:	2100      	movs	r1, #0
 8000548:	0018      	movs	r0, r3
 800054a:	f002 fcb1 	bl	8002eb0 <HAL_TIM_IC_Start_IT>
	HAL_Delay(500);
 800054e:	23fa      	movs	r3, #250	; 0xfa
 8000550:	005b      	lsls	r3, r3, #1
 8000552:	0018      	movs	r0, r3
 8000554:	f000 ff8e 	bl	8001474 <HAL_Delay>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000558:	4b22      	ldr	r3, [pc, #136]	; (80005e4 <FEB_Main_Loop+0x208>)
 800055a:	2100      	movs	r1, #0
 800055c:	0018      	movs	r0, r3
 800055e:	f002 fca7 	bl	8002eb0 <HAL_TIM_IC_Start_IT>
	HAL_Delay(500);
 8000562:	23fa      	movs	r3, #250	; 0xfa
 8000564:	005b      	lsls	r3, r3, #1
 8000566:	0018      	movs	r0, r3
 8000568:	f000 ff84 	bl	8001474 <HAL_Delay>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800056c:	4b1d      	ldr	r3, [pc, #116]	; (80005e4 <FEB_Main_Loop+0x208>)
 800056e:	2100      	movs	r1, #0
 8000570:	0018      	movs	r0, r3
 8000572:	f002 fc9d 	bl	8002eb0 <HAL_TIM_IC_Start_IT>
	HAL_Delay(500);
 8000576:	23fa      	movs	r3, #250	; 0xfa
 8000578:	005b      	lsls	r3, r3, #1
 800057a:	0018      	movs	r0, r3
 800057c:	f000 ff7a 	bl	8001474 <HAL_Delay>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000580:	4b18      	ldr	r3, [pc, #96]	; (80005e4 <FEB_Main_Loop+0x208>)
 8000582:	2100      	movs	r1, #0
 8000584:	0018      	movs	r0, r3
 8000586:	f002 fc93 	bl	8002eb0 <HAL_TIM_IC_Start_IT>
	HAL_Delay(500);
 800058a:	23fa      	movs	r3, #250	; 0xfa
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	0018      	movs	r0, r3
 8000590:	f000 ff70 	bl	8001474 <HAL_Delay>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000594:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <FEB_Main_Loop+0x208>)
 8000596:	2100      	movs	r1, #0
 8000598:	0018      	movs	r0, r3
 800059a:	f002 fc89 	bl	8002eb0 <HAL_TIM_IC_Start_IT>
	HAL_Delay(500);
 800059e:	23fa      	movs	r3, #250	; 0xfa
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	0018      	movs	r0, r3
 80005a4:	f000 ff66 	bl	8001474 <HAL_Delay>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80005a8:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <FEB_Main_Loop+0x208>)
 80005aa:	2100      	movs	r1, #0
 80005ac:	0018      	movs	r0, r3
 80005ae:	f002 fc7f 	bl	8002eb0 <HAL_TIM_IC_Start_IT>
	HAL_Delay(500);
 80005b2:	23fa      	movs	r3, #250	; 0xfa
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	0018      	movs	r0, r3
 80005b8:	f000 ff5c 	bl	8001474 <HAL_Delay>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80005bc:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <FEB_Main_Loop+0x208>)
 80005be:	2100      	movs	r1, #0
 80005c0:	0018      	movs	r0, r3
 80005c2:	f002 fc75 	bl	8002eb0 <HAL_TIM_IC_Start_IT>


	FEB_Fan_All_Speed_Set(255 * 0);
 80005c6:	2000      	movs	r0, #0
 80005c8:	f7ff fe64 	bl	8000294 <FEB_Fan_All_Speed_Set>

	HAL_Delay(5000);
 80005cc:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <FEB_Main_Loop+0x204>)
 80005ce:	0018      	movs	r0, r3
 80005d0:	f000 ff50 	bl	8001474 <HAL_Delay>
//	sprintf(uart_tx_buffer, "%lu\n", tach_val);
//	HAL_UART_Transmit(&huart2, (uint8_t *)uart_tx_buffer, sizeof(uart_tx_buffer), HAL_MAX_DELAY);

//HAL_Delay(1000);

}
 80005d4:	46c0      	nop			; (mov r8, r8)
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	20000214 	.word	0x20000214
 80005e0:	00001388 	.word	0x00001388
 80005e4:	20000184 	.word	0x20000184

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ec:	f000 fede 	bl	80013ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f0:	f000 f844 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f4:	f000 fb36 	bl	8000c64 <MX_GPIO_Init>
  MX_TIM1_Init();
 80005f8:	f000 f918 	bl	800082c <MX_TIM1_Init>
  MX_TIM2_Init();
 80005fc:	f000 f9e0 	bl	80009c0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000600:	f000 fb00 	bl	8000c04 <MX_USART2_UART_Init>
  MX_ADC_Init();
 8000604:	f000 f880 	bl	8000708 <MX_ADC_Init>
  MX_TIM3_Init();
 8000608:	f000 fa56 	bl	8000ab8 <MX_TIM3_Init>
  MX_CAN_Init();
 800060c:	f000 f8d8 	bl	80007c0 <MX_CAN_Init>
  MX_TIM16_Init();
 8000610:	f000 faa8 	bl	8000b64 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  //FEB_Fan_Init();


  sprintf(gu8_MSG, "Init", gu32_T1);
 8000614:	4b13      	ldr	r3, [pc, #76]	; (8000664 <main+0x7c>)
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	4913      	ldr	r1, [pc, #76]	; (8000668 <main+0x80>)
 800061a:	4b14      	ldr	r3, [pc, #80]	; (800066c <main+0x84>)
 800061c:	0018      	movs	r0, r3
 800061e:	f004 fdff 	bl	8005220 <siprintf>
  HAL_UART_Transmit(&huart2, gu8_MSG, sizeof(gu8_MSG), 10);
 8000622:	4912      	ldr	r1, [pc, #72]	; (800066c <main+0x84>)
 8000624:	4812      	ldr	r0, [pc, #72]	; (8000670 <main+0x88>)
 8000626:	230a      	movs	r3, #10
 8000628:	2240      	movs	r2, #64	; 0x40
 800062a:	f003 fea9 	bl	8004380 <HAL_UART_Transmit>

  if (HAL_TIM_Base_Start_IT(&htim16) != HAL_OK)
 800062e:	4b11      	ldr	r3, [pc, #68]	; (8000674 <main+0x8c>)
 8000630:	0018      	movs	r0, r3
 8000632:	f002 fa95 	bl	8002b60 <HAL_TIM_Base_Start_IT>
 8000636:	1e03      	subs	r3, r0, #0
 8000638:	d001      	beq.n	800063e <main+0x56>
    {
      /* Starting Error */
      Error_Handler();
 800063a:	f000 fbc5 	bl	8000dc8 <Error_Handler>
    }

  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <main+0x90>)
 8000640:	0018      	movs	r0, r3
 8000642:	f002 fa8d 	bl	8002b60 <HAL_TIM_Base_Start_IT>
 8000646:	1e03      	subs	r3, r0, #0
 8000648:	d001      	beq.n	800064e <main+0x66>
      {
        /* Starting Error */
        Error_Handler();
 800064a:	f000 fbbd 	bl	8000dc8 <Error_Handler>
      }

  //HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);

  //HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800064e:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <main+0x90>)
 8000650:	2100      	movs	r1, #0
 8000652:	0018      	movs	r0, r3
 8000654:	f002 fc2c 	bl	8002eb0 <HAL_TIM_IC_Start_IT>
  FEB_Init();
 8000658:	f7ff feb8 	bl	80003cc <FEB_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
	 FEB_Main_Loop();
 800065c:	f7ff febe 	bl	80003dc <FEB_Main_Loop>
 8000660:	e7fc      	b.n	800065c <main+0x74>
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	200000c0 	.word	0x200000c0
 8000668:	08005b80 	.word	0x08005b80
 800066c:	20000080 	.word	0x20000080
 8000670:	2000025c 	.word	0x2000025c
 8000674:	20000214 	.word	0x20000214
 8000678:	20000184 	.word	0x20000184

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b590      	push	{r4, r7, lr}
 800067e:	b093      	sub	sp, #76	; 0x4c
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	2414      	movs	r4, #20
 8000684:	193b      	adds	r3, r7, r4
 8000686:	0018      	movs	r0, r3
 8000688:	2334      	movs	r3, #52	; 0x34
 800068a:	001a      	movs	r2, r3
 800068c:	2100      	movs	r1, #0
 800068e:	f004 fde7 	bl	8005260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	0018      	movs	r0, r3
 8000696:	2310      	movs	r3, #16
 8000698:	001a      	movs	r2, r3
 800069a:	2100      	movs	r1, #0
 800069c:	f004 fde0 	bl	8005260 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80006a0:	0021      	movs	r1, r4
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	2212      	movs	r2, #18
 80006a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	2201      	movs	r2, #1
 80006ac:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2201      	movs	r2, #1
 80006b2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2210      	movs	r2, #16
 80006b8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2210      	movs	r2, #16
 80006be:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2200      	movs	r2, #0
 80006c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	0018      	movs	r0, r3
 80006ca:	f001 fd07 	bl	80020dc <HAL_RCC_OscConfig>
 80006ce:	1e03      	subs	r3, r0, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80006d2:	f000 fb79 	bl	8000dc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2207      	movs	r2, #7
 80006da:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	2200      	movs	r2, #0
 80006e0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	2100      	movs	r1, #0
 80006f2:	0018      	movs	r0, r3
 80006f4:	f002 f878 	bl	80027e8 <HAL_RCC_ClockConfig>
 80006f8:	1e03      	subs	r3, r0, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006fc:	f000 fb64 	bl	8000dc8 <Error_Handler>
  }
}
 8000700:	46c0      	nop			; (mov r8, r8)
 8000702:	46bd      	mov	sp, r7
 8000704:	b013      	add	sp, #76	; 0x4c
 8000706:	bd90      	pop	{r4, r7, pc}

08000708 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	0018      	movs	r0, r3
 8000712:	230c      	movs	r3, #12
 8000714:	001a      	movs	r2, r3
 8000716:	2100      	movs	r1, #0
 8000718:	f004 fda2 	bl	8005260 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800071c:	4b26      	ldr	r3, [pc, #152]	; (80007b8 <MX_ADC_Init+0xb0>)
 800071e:	4a27      	ldr	r2, [pc, #156]	; (80007bc <MX_ADC_Init+0xb4>)
 8000720:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000722:	4b25      	ldr	r3, [pc, #148]	; (80007b8 <MX_ADC_Init+0xb0>)
 8000724:	2200      	movs	r2, #0
 8000726:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000728:	4b23      	ldr	r3, [pc, #140]	; (80007b8 <MX_ADC_Init+0xb0>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800072e:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <MX_ADC_Init+0xb0>)
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000734:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <MX_ADC_Init+0xb0>)
 8000736:	2201      	movs	r2, #1
 8000738:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800073a:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <MX_ADC_Init+0xb0>)
 800073c:	2204      	movs	r2, #4
 800073e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000740:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <MX_ADC_Init+0xb0>)
 8000742:	2200      	movs	r2, #0
 8000744:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000746:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <MX_ADC_Init+0xb0>)
 8000748:	2200      	movs	r2, #0
 800074a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 800074c:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <MX_ADC_Init+0xb0>)
 800074e:	2201      	movs	r2, #1
 8000750:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000752:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <MX_ADC_Init+0xb0>)
 8000754:	2200      	movs	r2, #0
 8000756:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000758:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <MX_ADC_Init+0xb0>)
 800075a:	22c2      	movs	r2, #194	; 0xc2
 800075c:	32ff      	adds	r2, #255	; 0xff
 800075e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000760:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <MX_ADC_Init+0xb0>)
 8000762:	2200      	movs	r2, #0
 8000764:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_ADC_Init+0xb0>)
 8000768:	2224      	movs	r2, #36	; 0x24
 800076a:	2100      	movs	r1, #0
 800076c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800076e:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_ADC_Init+0xb0>)
 8000770:	2201      	movs	r2, #1
 8000772:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000774:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <MX_ADC_Init+0xb0>)
 8000776:	0018      	movs	r0, r3
 8000778:	f000 fea0 	bl	80014bc <HAL_ADC_Init>
 800077c:	1e03      	subs	r3, r0, #0
 800077e:	d001      	beq.n	8000784 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000780:	f000 fb22 	bl	8000dc8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2204      	movs	r2, #4
 8000788:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	2280      	movs	r2, #128	; 0x80
 800078e:	0152      	lsls	r2, r2, #5
 8000790:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	2280      	movs	r2, #128	; 0x80
 8000796:	0552      	lsls	r2, r2, #21
 8000798:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800079a:	1d3a      	adds	r2, r7, #4
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_ADC_Init+0xb0>)
 800079e:	0011      	movs	r1, r2
 80007a0:	0018      	movs	r0, r3
 80007a2:	f000 ffcb 	bl	800173c <HAL_ADC_ConfigChannel>
 80007a6:	1e03      	subs	r3, r0, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80007aa:	f000 fb0d 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */
//
  /* USER CODE END ADC_Init 2 */

}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	b004      	add	sp, #16
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	200000d4 	.word	0x200000d4
 80007bc:	40012400 	.word	0x40012400

080007c0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80007c4:	4b17      	ldr	r3, [pc, #92]	; (8000824 <MX_CAN_Init+0x64>)
 80007c6:	4a18      	ldr	r2, [pc, #96]	; (8000828 <MX_CAN_Init+0x68>)
 80007c8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80007ca:	4b16      	ldr	r3, [pc, #88]	; (8000824 <MX_CAN_Init+0x64>)
 80007cc:	2210      	movs	r2, #16
 80007ce:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <MX_CAN_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007d6:	4b13      	ldr	r3, [pc, #76]	; (8000824 <MX_CAN_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_CAN_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <MX_CAN_Init+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80007e8:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_CAN_Init+0x64>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <MX_CAN_Init+0x64>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80007f4:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <MX_CAN_Init+0x64>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80007fa:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <MX_CAN_Init+0x64>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <MX_CAN_Init+0x64>)
 8000802:	2200      	movs	r2, #0
 8000804:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000806:	4b07      	ldr	r3, [pc, #28]	; (8000824 <MX_CAN_Init+0x64>)
 8000808:	2200      	movs	r2, #0
 800080a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <MX_CAN_Init+0x64>)
 800080e:	0018      	movs	r0, r3
 8000810:	f001 f8a2 	bl	8001958 <HAL_CAN_Init>
 8000814:	1e03      	subs	r3, r0, #0
 8000816:	d001      	beq.n	800081c <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000818:	f000 fad6 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800081c:	46c0      	nop			; (mov r8, r8)
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	20000114 	.word	0x20000114
 8000828:	40006400 	.word	0x40006400

0800082c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b096      	sub	sp, #88	; 0x58
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000832:	2348      	movs	r3, #72	; 0x48
 8000834:	18fb      	adds	r3, r7, r3
 8000836:	0018      	movs	r0, r3
 8000838:	2310      	movs	r3, #16
 800083a:	001a      	movs	r2, r3
 800083c:	2100      	movs	r1, #0
 800083e:	f004 fd0f 	bl	8005260 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000842:	2340      	movs	r3, #64	; 0x40
 8000844:	18fb      	adds	r3, r7, r3
 8000846:	0018      	movs	r0, r3
 8000848:	2308      	movs	r3, #8
 800084a:	001a      	movs	r2, r3
 800084c:	2100      	movs	r1, #0
 800084e:	f004 fd07 	bl	8005260 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000852:	2324      	movs	r3, #36	; 0x24
 8000854:	18fb      	adds	r3, r7, r3
 8000856:	0018      	movs	r0, r3
 8000858:	231c      	movs	r3, #28
 800085a:	001a      	movs	r2, r3
 800085c:	2100      	movs	r1, #0
 800085e:	f004 fcff 	bl	8005260 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	0018      	movs	r0, r3
 8000866:	2320      	movs	r3, #32
 8000868:	001a      	movs	r2, r3
 800086a:	2100      	movs	r1, #0
 800086c:	f004 fcf8 	bl	8005260 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000870:	4b51      	ldr	r3, [pc, #324]	; (80009b8 <MX_TIM1_Init+0x18c>)
 8000872:	4a52      	ldr	r2, [pc, #328]	; (80009bc <MX_TIM1_Init+0x190>)
 8000874:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000876:	4b50      	ldr	r3, [pc, #320]	; (80009b8 <MX_TIM1_Init+0x18c>)
 8000878:	2200      	movs	r2, #0
 800087a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087c:	4b4e      	ldr	r3, [pc, #312]	; (80009b8 <MX_TIM1_Init+0x18c>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8000882:	4b4d      	ldr	r3, [pc, #308]	; (80009b8 <MX_TIM1_Init+0x18c>)
 8000884:	22ff      	movs	r2, #255	; 0xff
 8000886:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000888:	4b4b      	ldr	r3, [pc, #300]	; (80009b8 <MX_TIM1_Init+0x18c>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800088e:	4b4a      	ldr	r3, [pc, #296]	; (80009b8 <MX_TIM1_Init+0x18c>)
 8000890:	2200      	movs	r2, #0
 8000892:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000894:	4b48      	ldr	r3, [pc, #288]	; (80009b8 <MX_TIM1_Init+0x18c>)
 8000896:	2200      	movs	r2, #0
 8000898:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800089a:	4b47      	ldr	r3, [pc, #284]	; (80009b8 <MX_TIM1_Init+0x18c>)
 800089c:	0018      	movs	r0, r3
 800089e:	f002 f90f 	bl	8002ac0 <HAL_TIM_Base_Init>
 80008a2:	1e03      	subs	r3, r0, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80008a6:	f000 fa8f 	bl	8000dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008aa:	2148      	movs	r1, #72	; 0x48
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	2280      	movs	r2, #128	; 0x80
 80008b0:	0152      	lsls	r2, r2, #5
 80008b2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008b4:	187a      	adds	r2, r7, r1
 80008b6:	4b40      	ldr	r3, [pc, #256]	; (80009b8 <MX_TIM1_Init+0x18c>)
 80008b8:	0011      	movs	r1, r2
 80008ba:	0018      	movs	r0, r3
 80008bc:	f002 ff28 	bl	8003710 <HAL_TIM_ConfigClockSource>
 80008c0:	1e03      	subs	r3, r0, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80008c4:	f000 fa80 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008c8:	4b3b      	ldr	r3, [pc, #236]	; (80009b8 <MX_TIM1_Init+0x18c>)
 80008ca:	0018      	movs	r0, r3
 80008cc:	f002 f994 	bl	8002bf8 <HAL_TIM_PWM_Init>
 80008d0:	1e03      	subs	r3, r0, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80008d4:	f000 fa78 	bl	8000dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d8:	2140      	movs	r1, #64	; 0x40
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	2200      	movs	r2, #0
 80008e4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008e6:	187a      	adds	r2, r7, r1
 80008e8:	4b33      	ldr	r3, [pc, #204]	; (80009b8 <MX_TIM1_Init+0x18c>)
 80008ea:	0011      	movs	r1, r2
 80008ec:	0018      	movs	r0, r3
 80008ee:	f003 fc2d 	bl	800414c <HAL_TIMEx_MasterConfigSynchronization>
 80008f2:	1e03      	subs	r3, r0, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80008f6:	f000 fa67 	bl	8000dc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008fa:	2124      	movs	r1, #36	; 0x24
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	2260      	movs	r2, #96	; 0x60
 8000900:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 25;
 8000902:	187b      	adds	r3, r7, r1
 8000904:	2219      	movs	r2, #25
 8000906:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000908:	187b      	adds	r3, r7, r1
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000914:	187b      	adds	r3, r7, r1
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800091a:	187b      	adds	r3, r7, r1
 800091c:	2200      	movs	r2, #0
 800091e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000920:	187b      	adds	r3, r7, r1
 8000922:	2200      	movs	r2, #0
 8000924:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000926:	1879      	adds	r1, r7, r1
 8000928:	4b23      	ldr	r3, [pc, #140]	; (80009b8 <MX_TIM1_Init+0x18c>)
 800092a:	2200      	movs	r2, #0
 800092c:	0018      	movs	r0, r3
 800092e:	f002 fe29 	bl	8003584 <HAL_TIM_PWM_ConfigChannel>
 8000932:	1e03      	subs	r3, r0, #0
 8000934:	d001      	beq.n	800093a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000936:	f000 fa47 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800093a:	2324      	movs	r3, #36	; 0x24
 800093c:	18f9      	adds	r1, r7, r3
 800093e:	4b1e      	ldr	r3, [pc, #120]	; (80009b8 <MX_TIM1_Init+0x18c>)
 8000940:	2204      	movs	r2, #4
 8000942:	0018      	movs	r0, r3
 8000944:	f002 fe1e 	bl	8003584 <HAL_TIM_PWM_ConfigChannel>
 8000948:	1e03      	subs	r3, r0, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 800094c:	f000 fa3c 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000950:	2324      	movs	r3, #36	; 0x24
 8000952:	18f9      	adds	r1, r7, r3
 8000954:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <MX_TIM1_Init+0x18c>)
 8000956:	2208      	movs	r2, #8
 8000958:	0018      	movs	r0, r3
 800095a:	f002 fe13 	bl	8003584 <HAL_TIM_PWM_ConfigChannel>
 800095e:	1e03      	subs	r3, r0, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8000962:	f000 fa31 	bl	8000dc8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	2200      	movs	r2, #0
 8000970:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	2280      	movs	r2, #128	; 0x80
 8000988:	0192      	lsls	r2, r2, #6
 800098a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000992:	1d3a      	adds	r2, r7, #4
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <MX_TIM1_Init+0x18c>)
 8000996:	0011      	movs	r1, r2
 8000998:	0018      	movs	r0, r3
 800099a:	f003 fc2f 	bl	80041fc <HAL_TIMEx_ConfigBreakDeadTime>
 800099e:	1e03      	subs	r3, r0, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 80009a2:	f000 fa11 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009a6:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <MX_TIM1_Init+0x18c>)
 80009a8:	0018      	movs	r0, r3
 80009aa:	f000 fba5 	bl	80010f8 <HAL_TIM_MspPostInit>

}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	46bd      	mov	sp, r7
 80009b2:	b016      	add	sp, #88	; 0x58
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	2000013c 	.word	0x2000013c
 80009bc:	40012c00 	.word	0x40012c00

080009c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	; 0x28
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009c6:	2318      	movs	r3, #24
 80009c8:	18fb      	adds	r3, r7, r3
 80009ca:	0018      	movs	r0, r3
 80009cc:	2310      	movs	r3, #16
 80009ce:	001a      	movs	r2, r3
 80009d0:	2100      	movs	r1, #0
 80009d2:	f004 fc45 	bl	8005260 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d6:	2310      	movs	r3, #16
 80009d8:	18fb      	adds	r3, r7, r3
 80009da:	0018      	movs	r0, r3
 80009dc:	2308      	movs	r3, #8
 80009de:	001a      	movs	r2, r3
 80009e0:	2100      	movs	r1, #0
 80009e2:	f004 fc3d 	bl	8005260 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80009e6:	003b      	movs	r3, r7
 80009e8:	0018      	movs	r0, r3
 80009ea:	2310      	movs	r3, #16
 80009ec:	001a      	movs	r2, r3
 80009ee:	2100      	movs	r1, #0
 80009f0:	f004 fc36 	bl	8005260 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009f4:	4b2e      	ldr	r3, [pc, #184]	; (8000ab0 <MX_TIM2_Init+0xf0>)
 80009f6:	2280      	movs	r2, #128	; 0x80
 80009f8:	05d2      	lsls	r2, r2, #23
 80009fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009fc:	4b2c      	ldr	r3, [pc, #176]	; (8000ab0 <MX_TIM2_Init+0xf0>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a02:	4b2b      	ldr	r3, [pc, #172]	; (8000ab0 <MX_TIM2_Init+0xf0>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000a08:	4b29      	ldr	r3, [pc, #164]	; (8000ab0 <MX_TIM2_Init+0xf0>)
 8000a0a:	4a2a      	ldr	r2, [pc, #168]	; (8000ab4 <MX_TIM2_Init+0xf4>)
 8000a0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a0e:	4b28      	ldr	r3, [pc, #160]	; (8000ab0 <MX_TIM2_Init+0xf0>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a14:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <MX_TIM2_Init+0xf0>)
 8000a16:	2280      	movs	r2, #128	; 0x80
 8000a18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a1a:	4b25      	ldr	r3, [pc, #148]	; (8000ab0 <MX_TIM2_Init+0xf0>)
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f002 f84f 	bl	8002ac0 <HAL_TIM_Base_Init>
 8000a22:	1e03      	subs	r3, r0, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000a26:	f000 f9cf 	bl	8000dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a2a:	2118      	movs	r1, #24
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	2280      	movs	r2, #128	; 0x80
 8000a30:	0152      	lsls	r2, r2, #5
 8000a32:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a34:	187a      	adds	r2, r7, r1
 8000a36:	4b1e      	ldr	r3, [pc, #120]	; (8000ab0 <MX_TIM2_Init+0xf0>)
 8000a38:	0011      	movs	r1, r2
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f002 fe68 	bl	8003710 <HAL_TIM_ConfigClockSource>
 8000a40:	1e03      	subs	r3, r0, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000a44:	f000 f9c0 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000a48:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <MX_TIM2_Init+0xf0>)
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f002 f9d8 	bl	8002e00 <HAL_TIM_IC_Init>
 8000a50:	1e03      	subs	r3, r0, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000a54:	f000 f9b8 	bl	8000dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a58:	2110      	movs	r1, #16
 8000a5a:	187b      	adds	r3, r7, r1
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	2200      	movs	r2, #0
 8000a64:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a66:	187a      	adds	r2, r7, r1
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_TIM2_Init+0xf0>)
 8000a6a:	0011      	movs	r1, r2
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f003 fb6d 	bl	800414c <HAL_TIMEx_MasterConfigSynchronization>
 8000a72:	1e03      	subs	r3, r0, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000a76:	f000 f9a7 	bl	8000dc8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a7a:	003b      	movs	r3, r7
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a80:	003b      	movs	r3, r7
 8000a82:	2201      	movs	r2, #1
 8000a84:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a86:	003b      	movs	r3, r7
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8000a8c:	003b      	movs	r3, r7
 8000a8e:	2200      	movs	r2, #0
 8000a90:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000a92:	0039      	movs	r1, r7
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_TIM2_Init+0xf0>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f002 fccf 	bl	800343c <HAL_TIM_IC_ConfigChannel>
 8000a9e:	1e03      	subs	r3, r0, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000aa2:	f000 f991 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b00a      	add	sp, #40	; 0x28
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	20000184 	.word	0x20000184
 8000ab4:	0000ffff 	.word	0x0000ffff

08000ab8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000abe:	2308      	movs	r3, #8
 8000ac0:	18fb      	adds	r3, r7, r3
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	2310      	movs	r3, #16
 8000ac6:	001a      	movs	r2, r3
 8000ac8:	2100      	movs	r1, #0
 8000aca:	f004 fbc9 	bl	8005260 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ace:	003b      	movs	r3, r7
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	2308      	movs	r3, #8
 8000ad4:	001a      	movs	r2, r3
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	f004 fbc2 	bl	8005260 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000adc:	4b1e      	ldr	r3, [pc, #120]	; (8000b58 <MX_TIM3_Init+0xa0>)
 8000ade:	4a1f      	ldr	r2, [pc, #124]	; (8000b5c <MX_TIM3_Init+0xa4>)
 8000ae0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ae2:	4b1d      	ldr	r3, [pc, #116]	; (8000b58 <MX_TIM3_Init+0xa0>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae8:	4b1b      	ldr	r3, [pc, #108]	; (8000b58 <MX_TIM3_Init+0xa0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000aee:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <MX_TIM3_Init+0xa0>)
 8000af0:	4a1b      	ldr	r2, [pc, #108]	; (8000b60 <MX_TIM3_Init+0xa8>)
 8000af2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af4:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <MX_TIM3_Init+0xa0>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000afa:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <MX_TIM3_Init+0xa0>)
 8000afc:	2280      	movs	r2, #128	; 0x80
 8000afe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b00:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <MX_TIM3_Init+0xa0>)
 8000b02:	0018      	movs	r0, r3
 8000b04:	f001 ffdc 	bl	8002ac0 <HAL_TIM_Base_Init>
 8000b08:	1e03      	subs	r3, r0, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000b0c:	f000 f95c 	bl	8000dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b10:	2108      	movs	r1, #8
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	2280      	movs	r2, #128	; 0x80
 8000b16:	0152      	lsls	r2, r2, #5
 8000b18:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b1a:	187a      	adds	r2, r7, r1
 8000b1c:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_TIM3_Init+0xa0>)
 8000b1e:	0011      	movs	r1, r2
 8000b20:	0018      	movs	r0, r3
 8000b22:	f002 fdf5 	bl	8003710 <HAL_TIM_ConfigClockSource>
 8000b26:	1e03      	subs	r3, r0, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000b2a:	f000 f94d 	bl	8000dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b2e:	003b      	movs	r3, r7
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b34:	003b      	movs	r3, r7
 8000b36:	2200      	movs	r2, #0
 8000b38:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b3a:	003a      	movs	r2, r7
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_TIM3_Init+0xa0>)
 8000b3e:	0011      	movs	r1, r2
 8000b40:	0018      	movs	r0, r3
 8000b42:	f003 fb03 	bl	800414c <HAL_TIMEx_MasterConfigSynchronization>
 8000b46:	1e03      	subs	r3, r0, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000b4a:	f000 f93d 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b006      	add	sp, #24
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	200001cc 	.word	0x200001cc
 8000b5c:	40000400 	.word	0x40000400
 8000b60:	0000ffff 	.word	0x0000ffff

08000b64 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b6a:	003b      	movs	r3, r7
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	2310      	movs	r3, #16
 8000b70:	001a      	movs	r2, r3
 8000b72:	2100      	movs	r1, #0
 8000b74:	f004 fb74 	bl	8005260 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000b78:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <MX_TIM16_Init+0x94>)
 8000b7a:	4a20      	ldr	r2, [pc, #128]	; (8000bfc <MX_TIM16_Init+0x98>)
 8000b7c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000b7e:	4b1e      	ldr	r3, [pc, #120]	; (8000bf8 <MX_TIM16_Init+0x94>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b84:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <MX_TIM16_Init+0x94>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000b8a:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <MX_TIM16_Init+0x94>)
 8000b8c:	4a1c      	ldr	r2, [pc, #112]	; (8000c00 <MX_TIM16_Init+0x9c>)
 8000b8e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b90:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <MX_TIM16_Init+0x94>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000b96:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <MX_TIM16_Init+0x94>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b9c:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <MX_TIM16_Init+0x94>)
 8000b9e:	2280      	movs	r2, #128	; 0x80
 8000ba0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <MX_TIM16_Init+0x94>)
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f001 ff8b 	bl	8002ac0 <HAL_TIM_Base_Init>
 8000baa:	1e03      	subs	r3, r0, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM16_Init+0x4e>
  {
    Error_Handler();
 8000bae:	f000 f90b 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_TIM16_Init+0x94>)
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f002 f923 	bl	8002e00 <HAL_TIM_IC_Init>
 8000bba:	1e03      	subs	r3, r0, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8000bbe:	f000 f903 	bl	8000dc8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000bc2:	003b      	movs	r3, r7
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000bc8:	003b      	movs	r3, r7
 8000bca:	2201      	movs	r2, #1
 8000bcc:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000bce:	003b      	movs	r3, r7
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8000bd4:	003b      	movs	r3, r7
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000bda:	0039      	movs	r1, r7
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <MX_TIM16_Init+0x94>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	0018      	movs	r0, r3
 8000be2:	f002 fc2b 	bl	800343c <HAL_TIM_IC_ConfigChannel>
 8000be6:	1e03      	subs	r3, r0, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM16_Init+0x8a>
  {
    Error_Handler();
 8000bea:	f000 f8ed 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	b004      	add	sp, #16
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	20000214 	.word	0x20000214
 8000bfc:	40014400 	.word	0x40014400
 8000c00:	0000ffff 	.word	0x0000ffff

08000c04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c08:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c0a:	4a15      	ldr	r2, [pc, #84]	; (8000c60 <MX_USART2_UART_Init+0x5c>)
 8000c0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c0e:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c10:	22e1      	movs	r2, #225	; 0xe1
 8000c12:	0252      	lsls	r2, r2, #9
 8000c14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c2a:	220c      	movs	r2, #12
 8000c2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c34:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c3a:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c46:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f003 fb45 	bl	80042d8 <HAL_UART_Init>
 8000c4e:	1e03      	subs	r3, r0, #0
 8000c50:	d001      	beq.n	8000c56 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c52:	f000 f8b9 	bl	8000dc8 <Error_Handler>
  /* USER CODE BEGIN USART2_Init 2 */


  /* USER CODE END USART2_Init 2 */

}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	2000025c 	.word	0x2000025c
 8000c60:	40004400 	.word	0x40004400

08000c64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <MX_GPIO_Init+0x48>)
 8000c6c:	695a      	ldr	r2, [r3, #20]
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <MX_GPIO_Init+0x48>)
 8000c70:	2180      	movs	r1, #128	; 0x80
 8000c72:	03c9      	lsls	r1, r1, #15
 8000c74:	430a      	orrs	r2, r1
 8000c76:	615a      	str	r2, [r3, #20]
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <MX_GPIO_Init+0x48>)
 8000c7a:	695a      	ldr	r2, [r3, #20]
 8000c7c:	2380      	movs	r3, #128	; 0x80
 8000c7e:	03db      	lsls	r3, r3, #15
 8000c80:	4013      	ands	r3, r2
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_GPIO_Init+0x48>)
 8000c88:	695a      	ldr	r2, [r3, #20]
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <MX_GPIO_Init+0x48>)
 8000c8c:	2180      	movs	r1, #128	; 0x80
 8000c8e:	0289      	lsls	r1, r1, #10
 8000c90:	430a      	orrs	r2, r1
 8000c92:	615a      	str	r2, [r3, #20]
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <MX_GPIO_Init+0x48>)
 8000c96:	695a      	ldr	r2, [r3, #20]
 8000c98:	2380      	movs	r3, #128	; 0x80
 8000c9a:	029b      	lsls	r3, r3, #10
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	b002      	add	sp, #8
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	40021000 	.word	0x40021000

08000cb0 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim)

{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]

    if(gu8_State == IDLE)
 8000cb8:	4b2f      	ldr	r3, [pc, #188]	; (8000d78 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d10b      	bne.n	8000cda <HAL_TIM_IC_CaptureCallback+0x2a>
    {
        //gu32_T1 = TIM2->CCR1;
    	gu32_T1 = htim->Instance->CCR1;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cc8:	4b2c      	ldr	r3, [pc, #176]	; (8000d7c <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000cca:	601a      	str	r2, [r3, #0]
        gu16_TIM2_OVC = 0;
 8000ccc:	4b2c      	ldr	r3, [pc, #176]	; (8000d80 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	801a      	strh	r2, [r3, #0]
        gu8_State = DONE;
 8000cd2:	4b29      	ldr	r3, [pc, #164]	; (8000d78 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	701a      	strb	r2, [r3, #0]
                  HAL_UART_Transmit(&huart2, gu8_MSG, sizeof(gu8_MSG), 100);
                }
        gu8_State = IDLE;
        HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
    }
}
 8000cd8:	e04a      	b.n	8000d70 <HAL_TIM_IC_CaptureCallback+0xc0>
    else if(gu8_State == DONE)
 8000cda:	4b27      	ldr	r3, [pc, #156]	; (8000d78 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d145      	bne.n	8000d70 <HAL_TIM_IC_CaptureCallback+0xc0>
    	gu32_T2 = htim->Instance->CCR1;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cea:	4b26      	ldr	r3, [pc, #152]	; (8000d84 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000cec:	601a      	str	r2, [r3, #0]
        gu32_Ticks = (gu32_T2 + (gu16_TIM2_OVC * 65536)) - gu32_T1;
 8000cee:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000cf0:	881b      	ldrh	r3, [r3, #0]
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	041b      	lsls	r3, r3, #16
 8000cf6:	001a      	movs	r2, r3
 8000cf8:	4b22      	ldr	r3, [pc, #136]	; (8000d84 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	18d2      	adds	r2, r2, r3
 8000cfe:	4b1f      	ldr	r3, [pc, #124]	; (8000d7c <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	1ad2      	subs	r2, r2, r3
 8000d04:	4b20      	ldr	r3, [pc, #128]	; (8000d88 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000d06:	601a      	str	r2, [r3, #0]
        gu32_Freq = (uint32_t)(F_CLK/gu32_Ticks);
 8000d08:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	0019      	movs	r1, r3
 8000d0e:	481f      	ldr	r0, [pc, #124]	; (8000d8c <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000d10:	f7ff fa04 	bl	800011c <__udivsi3>
 8000d14:	0003      	movs	r3, r0
 8000d16:	001a      	movs	r2, r3
 8000d18:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000d1a:	601a      	str	r2, [r3, #0]
        if(gu32_Freq != 0)
 8000d1c:	4b1c      	ldr	r3, [pc, #112]	; (8000d90 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d00c      	beq.n	8000d3e <HAL_TIM_IC_CaptureCallback+0x8e>
          sprintf(gu8_MSG, "Frequency = %lu Hz\n\r", gu32_Freq);
 8000d24:	4b1a      	ldr	r3, [pc, #104]	; (8000d90 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	491a      	ldr	r1, [pc, #104]	; (8000d94 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000d2a:	4b1b      	ldr	r3, [pc, #108]	; (8000d98 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f004 fa77 	bl	8005220 <siprintf>
          HAL_UART_Transmit(&huart2, gu8_MSG, sizeof(gu8_MSG), 100);
 8000d32:	4919      	ldr	r1, [pc, #100]	; (8000d98 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000d34:	4819      	ldr	r0, [pc, #100]	; (8000d9c <HAL_TIM_IC_CaptureCallback+0xec>)
 8000d36:	2364      	movs	r3, #100	; 0x64
 8000d38:	2240      	movs	r2, #64	; 0x40
 8000d3a:	f003 fb21 	bl	8004380 <HAL_UART_Transmit>
        if(gu32_Freq == 0)
 8000d3e:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d10c      	bne.n	8000d60 <HAL_TIM_IC_CaptureCallback+0xb0>
                  sprintf(gu8_MSG, "Failed = %lu Hz\n\r", gu32_Freq);
 8000d46:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	4915      	ldr	r1, [pc, #84]	; (8000da0 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f004 fa66 	bl	8005220 <siprintf>
                  HAL_UART_Transmit(&huart2, gu8_MSG, sizeof(gu8_MSG), 100);
 8000d54:	4910      	ldr	r1, [pc, #64]	; (8000d98 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000d56:	4811      	ldr	r0, [pc, #68]	; (8000d9c <HAL_TIM_IC_CaptureCallback+0xec>)
 8000d58:	2364      	movs	r3, #100	; 0x64
 8000d5a:	2240      	movs	r2, #64	; 0x40
 8000d5c:	f003 fb10 	bl	8004380 <HAL_UART_Transmit>
        gu8_State = IDLE;
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	701a      	strb	r2, [r3, #0]
        HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f002 f9a8 	bl	80030c0 <HAL_TIM_IC_Stop_IT>
}
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	b002      	add	sp, #8
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	2000007d 	.word	0x2000007d
 8000d7c:	200000c0 	.word	0x200000c0
 8000d80:	200000cc 	.word	0x200000cc
 8000d84:	200000c4 	.word	0x200000c4
 8000d88:	200000c8 	.word	0x200000c8
 8000d8c:	007a1200 	.word	0x007a1200
 8000d90:	200000d0 	.word	0x200000d0
 8000d94:	08005b88 	.word	0x08005b88
 8000d98:	20000080 	.word	0x20000080
 8000d9c:	2000025c 	.word	0x2000025c
 8000da0:	08005ba0 	.word	0x08005ba0

08000da4 <HAL_TIM_PeriodElapsedCallback>:
//    }

//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
    gu16_TIM2_OVC++;
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dae:	881b      	ldrh	r3, [r3, #0]
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	3301      	adds	r3, #1
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000db8:	801a      	strh	r2, [r3, #0]
}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b002      	add	sp, #8
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	200000cc 	.word	0x200000cc

08000dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dcc:	b672      	cpsid	i
}
 8000dce:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  sprintf(gu8_MSG, "HAL ERROR\n\r", gu32_Freq);
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <Error_Handler+0x24>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4906      	ldr	r1, [pc, #24]	; (8000df0 <Error_Handler+0x28>)
 8000dd6:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <Error_Handler+0x2c>)
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f004 fa21 	bl	8005220 <siprintf>
	  HAL_UART_Transmit(&huart2, gu8_MSG, sizeof(gu8_MSG), 100);
 8000dde:	4905      	ldr	r1, [pc, #20]	; (8000df4 <Error_Handler+0x2c>)
 8000de0:	4805      	ldr	r0, [pc, #20]	; (8000df8 <Error_Handler+0x30>)
 8000de2:	2364      	movs	r3, #100	; 0x64
 8000de4:	2240      	movs	r2, #64	; 0x40
 8000de6:	f003 facb 	bl	8004380 <HAL_UART_Transmit>
	  sprintf(gu8_MSG, "HAL ERROR\n\r", gu32_Freq);
 8000dea:	e7f1      	b.n	8000dd0 <Error_Handler+0x8>
 8000dec:	200000d0 	.word	0x200000d0
 8000df0:	08005bb4 	.word	0x08005bb4
 8000df4:	20000080 	.word	0x20000080
 8000df8:	2000025c 	.word	0x2000025c

08000dfc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e02:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <HAL_MspInit+0x44>)
 8000e04:	699a      	ldr	r2, [r3, #24]
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <HAL_MspInit+0x44>)
 8000e08:	2101      	movs	r1, #1
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	619a      	str	r2, [r3, #24]
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <HAL_MspInit+0x44>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	2201      	movs	r2, #1
 8000e14:	4013      	ands	r3, r2
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <HAL_MspInit+0x44>)
 8000e1c:	69da      	ldr	r2, [r3, #28]
 8000e1e:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <HAL_MspInit+0x44>)
 8000e20:	2180      	movs	r1, #128	; 0x80
 8000e22:	0549      	lsls	r1, r1, #21
 8000e24:	430a      	orrs	r2, r1
 8000e26:	61da      	str	r2, [r3, #28]
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <HAL_MspInit+0x44>)
 8000e2a:	69da      	ldr	r2, [r3, #28]
 8000e2c:	2380      	movs	r3, #128	; 0x80
 8000e2e:	055b      	lsls	r3, r3, #21
 8000e30:	4013      	ands	r3, r2
 8000e32:	603b      	str	r3, [r7, #0]
 8000e34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b002      	add	sp, #8
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	40021000 	.word	0x40021000

08000e44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e44:	b590      	push	{r4, r7, lr}
 8000e46:	b08b      	sub	sp, #44	; 0x2c
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	2414      	movs	r4, #20
 8000e4e:	193b      	adds	r3, r7, r4
 8000e50:	0018      	movs	r0, r3
 8000e52:	2314      	movs	r3, #20
 8000e54:	001a      	movs	r2, r3
 8000e56:	2100      	movs	r1, #0
 8000e58:	f004 fa02 	bl	8005260 <memset>
  if(hadc->Instance==ADC1)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a19      	ldr	r2, [pc, #100]	; (8000ec8 <HAL_ADC_MspInit+0x84>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d12b      	bne.n	8000ebe <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e66:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <HAL_ADC_MspInit+0x88>)
 8000e68:	699a      	ldr	r2, [r3, #24]
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <HAL_ADC_MspInit+0x88>)
 8000e6c:	2180      	movs	r1, #128	; 0x80
 8000e6e:	0089      	lsls	r1, r1, #2
 8000e70:	430a      	orrs	r2, r1
 8000e72:	619a      	str	r2, [r3, #24]
 8000e74:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <HAL_ADC_MspInit+0x88>)
 8000e76:	699a      	ldr	r2, [r3, #24]
 8000e78:	2380      	movs	r3, #128	; 0x80
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HAL_ADC_MspInit+0x88>)
 8000e84:	695a      	ldr	r2, [r3, #20]
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <HAL_ADC_MspInit+0x88>)
 8000e88:	2180      	movs	r1, #128	; 0x80
 8000e8a:	0289      	lsls	r1, r1, #10
 8000e8c:	430a      	orrs	r2, r1
 8000e8e:	615a      	str	r2, [r3, #20]
 8000e90:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <HAL_ADC_MspInit+0x88>)
 8000e92:	695a      	ldr	r2, [r3, #20]
 8000e94:	2380      	movs	r3, #128	; 0x80
 8000e96:	029b      	lsls	r3, r3, #10
 8000e98:	4013      	ands	r3, r2
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e9e:	193b      	adds	r3, r7, r4
 8000ea0:	2210      	movs	r2, #16
 8000ea2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ea4:	193b      	adds	r3, r7, r4
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	193b      	adds	r3, r7, r4
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb0:	193a      	adds	r2, r7, r4
 8000eb2:	2390      	movs	r3, #144	; 0x90
 8000eb4:	05db      	lsls	r3, r3, #23
 8000eb6:	0011      	movs	r1, r2
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f000 ffa7 	bl	8001e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	b00b      	add	sp, #44	; 0x2c
 8000ec4:	bd90      	pop	{r4, r7, pc}
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	40012400 	.word	0x40012400
 8000ecc:	40021000 	.word	0x40021000

08000ed0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ed0:	b590      	push	{r4, r7, lr}
 8000ed2:	b08b      	sub	sp, #44	; 0x2c
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	2414      	movs	r4, #20
 8000eda:	193b      	adds	r3, r7, r4
 8000edc:	0018      	movs	r0, r3
 8000ede:	2314      	movs	r3, #20
 8000ee0:	001a      	movs	r2, r3
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	f004 f9bc 	bl	8005260 <memset>
  if(hcan->Instance==CAN)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a1d      	ldr	r2, [pc, #116]	; (8000f64 <HAL_CAN_MspInit+0x94>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d133      	bne.n	8000f5a <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ef2:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <HAL_CAN_MspInit+0x98>)
 8000ef4:	69da      	ldr	r2, [r3, #28]
 8000ef6:	4b1c      	ldr	r3, [pc, #112]	; (8000f68 <HAL_CAN_MspInit+0x98>)
 8000ef8:	2180      	movs	r1, #128	; 0x80
 8000efa:	0489      	lsls	r1, r1, #18
 8000efc:	430a      	orrs	r2, r1
 8000efe:	61da      	str	r2, [r3, #28]
 8000f00:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <HAL_CAN_MspInit+0x98>)
 8000f02:	69da      	ldr	r2, [r3, #28]
 8000f04:	2380      	movs	r3, #128	; 0x80
 8000f06:	049b      	lsls	r3, r3, #18
 8000f08:	4013      	ands	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <HAL_CAN_MspInit+0x98>)
 8000f10:	695a      	ldr	r2, [r3, #20]
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <HAL_CAN_MspInit+0x98>)
 8000f14:	2180      	movs	r1, #128	; 0x80
 8000f16:	0289      	lsls	r1, r1, #10
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	615a      	str	r2, [r3, #20]
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <HAL_CAN_MspInit+0x98>)
 8000f1e:	695a      	ldr	r2, [r3, #20]
 8000f20:	2380      	movs	r3, #128	; 0x80
 8000f22:	029b      	lsls	r3, r3, #10
 8000f24:	4013      	ands	r3, r2
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f2a:	193b      	adds	r3, r7, r4
 8000f2c:	22c0      	movs	r2, #192	; 0xc0
 8000f2e:	0152      	lsls	r2, r2, #5
 8000f30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	0021      	movs	r1, r4
 8000f34:	187b      	adds	r3, r7, r1
 8000f36:	2202      	movs	r2, #2
 8000f38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	187b      	adds	r3, r7, r1
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f40:	187b      	adds	r3, r7, r1
 8000f42:	2203      	movs	r2, #3
 8000f44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000f46:	187b      	adds	r3, r7, r1
 8000f48:	2204      	movs	r2, #4
 8000f4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4c:	187a      	adds	r2, r7, r1
 8000f4e:	2390      	movs	r3, #144	; 0x90
 8000f50:	05db      	lsls	r3, r3, #23
 8000f52:	0011      	movs	r1, r2
 8000f54:	0018      	movs	r0, r3
 8000f56:	f000 ff59 	bl	8001e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	b00b      	add	sp, #44	; 0x2c
 8000f60:	bd90      	pop	{r4, r7, pc}
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	40006400 	.word	0x40006400
 8000f68:	40021000 	.word	0x40021000

08000f6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08e      	sub	sp, #56	; 0x38
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	2324      	movs	r3, #36	; 0x24
 8000f76:	18fb      	adds	r3, r7, r3
 8000f78:	0018      	movs	r0, r3
 8000f7a:	2314      	movs	r3, #20
 8000f7c:	001a      	movs	r2, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	f004 f96e 	bl	8005260 <memset>
  if(htim_base->Instance==TIM1)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a57      	ldr	r2, [pc, #348]	; (80010e8 <HAL_TIM_Base_MspInit+0x17c>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d10e      	bne.n	8000fac <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f8e:	4b57      	ldr	r3, [pc, #348]	; (80010ec <HAL_TIM_Base_MspInit+0x180>)
 8000f90:	699a      	ldr	r2, [r3, #24]
 8000f92:	4b56      	ldr	r3, [pc, #344]	; (80010ec <HAL_TIM_Base_MspInit+0x180>)
 8000f94:	2180      	movs	r1, #128	; 0x80
 8000f96:	0109      	lsls	r1, r1, #4
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	619a      	str	r2, [r3, #24]
 8000f9c:	4b53      	ldr	r3, [pc, #332]	; (80010ec <HAL_TIM_Base_MspInit+0x180>)
 8000f9e:	699a      	ldr	r2, [r3, #24]
 8000fa0:	2380      	movs	r3, #128	; 0x80
 8000fa2:	011b      	lsls	r3, r3, #4
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	623b      	str	r3, [r7, #32]
 8000fa8:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000faa:	e099      	b.n	80010e0 <HAL_TIM_Base_MspInit+0x174>
  else if(htim_base->Instance==TIM2)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	2380      	movs	r3, #128	; 0x80
 8000fb2:	05db      	lsls	r3, r3, #23
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d139      	bne.n	800102c <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fb8:	4b4c      	ldr	r3, [pc, #304]	; (80010ec <HAL_TIM_Base_MspInit+0x180>)
 8000fba:	69da      	ldr	r2, [r3, #28]
 8000fbc:	4b4b      	ldr	r3, [pc, #300]	; (80010ec <HAL_TIM_Base_MspInit+0x180>)
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	61da      	str	r2, [r3, #28]
 8000fc4:	4b49      	ldr	r3, [pc, #292]	; (80010ec <HAL_TIM_Base_MspInit+0x180>)
 8000fc6:	69db      	ldr	r3, [r3, #28]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61fb      	str	r3, [r7, #28]
 8000fce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd0:	4b46      	ldr	r3, [pc, #280]	; (80010ec <HAL_TIM_Base_MspInit+0x180>)
 8000fd2:	695a      	ldr	r2, [r3, #20]
 8000fd4:	4b45      	ldr	r3, [pc, #276]	; (80010ec <HAL_TIM_Base_MspInit+0x180>)
 8000fd6:	2180      	movs	r1, #128	; 0x80
 8000fd8:	0289      	lsls	r1, r1, #10
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	615a      	str	r2, [r3, #20]
 8000fde:	4b43      	ldr	r3, [pc, #268]	; (80010ec <HAL_TIM_Base_MspInit+0x180>)
 8000fe0:	695a      	ldr	r2, [r3, #20]
 8000fe2:	2380      	movs	r3, #128	; 0x80
 8000fe4:	029b      	lsls	r3, r3, #10
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
 8000fea:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fec:	2124      	movs	r1, #36	; 0x24
 8000fee:	187b      	adds	r3, r7, r1
 8000ff0:	2220      	movs	r2, #32
 8000ff2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff4:	187b      	adds	r3, r7, r1
 8000ff6:	2202      	movs	r2, #2
 8000ff8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	187b      	adds	r3, r7, r1
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	187b      	adds	r3, r7, r1
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001006:	187b      	adds	r3, r7, r1
 8001008:	2202      	movs	r2, #2
 800100a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100c:	187a      	adds	r2, r7, r1
 800100e:	2390      	movs	r3, #144	; 0x90
 8001010:	05db      	lsls	r3, r3, #23
 8001012:	0011      	movs	r1, r2
 8001014:	0018      	movs	r0, r3
 8001016:	f000 fef9 	bl	8001e0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2100      	movs	r1, #0
 800101e:	200f      	movs	r0, #15
 8001020:	f000 fe44 	bl	8001cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001024:	200f      	movs	r0, #15
 8001026:	f000 fe56 	bl	8001cd6 <HAL_NVIC_EnableIRQ>
}
 800102a:	e059      	b.n	80010e0 <HAL_TIM_Base_MspInit+0x174>
  else if(htim_base->Instance==TIM3)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a2f      	ldr	r2, [pc, #188]	; (80010f0 <HAL_TIM_Base_MspInit+0x184>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d114      	bne.n	8001060 <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001036:	4b2d      	ldr	r3, [pc, #180]	; (80010ec <HAL_TIM_Base_MspInit+0x180>)
 8001038:	69da      	ldr	r2, [r3, #28]
 800103a:	4b2c      	ldr	r3, [pc, #176]	; (80010ec <HAL_TIM_Base_MspInit+0x180>)
 800103c:	2102      	movs	r1, #2
 800103e:	430a      	orrs	r2, r1
 8001040:	61da      	str	r2, [r3, #28]
 8001042:	4b2a      	ldr	r3, [pc, #168]	; (80010ec <HAL_TIM_Base_MspInit+0x180>)
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	2202      	movs	r2, #2
 8001048:	4013      	ands	r3, r2
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	2100      	movs	r1, #0
 8001052:	2010      	movs	r0, #16
 8001054:	f000 fe2a 	bl	8001cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001058:	2010      	movs	r0, #16
 800105a:	f000 fe3c 	bl	8001cd6 <HAL_NVIC_EnableIRQ>
}
 800105e:	e03f      	b.n	80010e0 <HAL_TIM_Base_MspInit+0x174>
  else if(htim_base->Instance==TIM16)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a23      	ldr	r2, [pc, #140]	; (80010f4 <HAL_TIM_Base_MspInit+0x188>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d13a      	bne.n	80010e0 <HAL_TIM_Base_MspInit+0x174>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800106a:	4b20      	ldr	r3, [pc, #128]	; (80010ec <HAL_TIM_Base_MspInit+0x180>)
 800106c:	699a      	ldr	r2, [r3, #24]
 800106e:	4b1f      	ldr	r3, [pc, #124]	; (80010ec <HAL_TIM_Base_MspInit+0x180>)
 8001070:	2180      	movs	r1, #128	; 0x80
 8001072:	0289      	lsls	r1, r1, #10
 8001074:	430a      	orrs	r2, r1
 8001076:	619a      	str	r2, [r3, #24]
 8001078:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <HAL_TIM_Base_MspInit+0x180>)
 800107a:	699a      	ldr	r2, [r3, #24]
 800107c:	2380      	movs	r3, #128	; 0x80
 800107e:	029b      	lsls	r3, r3, #10
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	4b19      	ldr	r3, [pc, #100]	; (80010ec <HAL_TIM_Base_MspInit+0x180>)
 8001088:	695a      	ldr	r2, [r3, #20]
 800108a:	4b18      	ldr	r3, [pc, #96]	; (80010ec <HAL_TIM_Base_MspInit+0x180>)
 800108c:	2180      	movs	r1, #128	; 0x80
 800108e:	0289      	lsls	r1, r1, #10
 8001090:	430a      	orrs	r2, r1
 8001092:	615a      	str	r2, [r3, #20]
 8001094:	4b15      	ldr	r3, [pc, #84]	; (80010ec <HAL_TIM_Base_MspInit+0x180>)
 8001096:	695a      	ldr	r2, [r3, #20]
 8001098:	2380      	movs	r3, #128	; 0x80
 800109a:	029b      	lsls	r3, r3, #10
 800109c:	4013      	ands	r3, r2
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010a2:	2124      	movs	r1, #36	; 0x24
 80010a4:	187b      	adds	r3, r7, r1
 80010a6:	2240      	movs	r2, #64	; 0x40
 80010a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	187b      	adds	r3, r7, r1
 80010ac:	2202      	movs	r2, #2
 80010ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	187b      	adds	r3, r7, r1
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	187b      	adds	r3, r7, r1
 80010b8:	2200      	movs	r2, #0
 80010ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM16;
 80010bc:	187b      	adds	r3, r7, r1
 80010be:	2205      	movs	r2, #5
 80010c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	187a      	adds	r2, r7, r1
 80010c4:	2390      	movs	r3, #144	; 0x90
 80010c6:	05db      	lsls	r3, r3, #23
 80010c8:	0011      	movs	r1, r2
 80010ca:	0018      	movs	r0, r3
 80010cc:	f000 fe9e 	bl	8001e0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2100      	movs	r1, #0
 80010d4:	2015      	movs	r0, #21
 80010d6:	f000 fde9 	bl	8001cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80010da:	2015      	movs	r0, #21
 80010dc:	f000 fdfb 	bl	8001cd6 <HAL_NVIC_EnableIRQ>
}
 80010e0:	46c0      	nop			; (mov r8, r8)
 80010e2:	46bd      	mov	sp, r7
 80010e4:	b00e      	add	sp, #56	; 0x38
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40012c00 	.word	0x40012c00
 80010ec:	40021000 	.word	0x40021000
 80010f0:	40000400 	.word	0x40000400
 80010f4:	40014400 	.word	0x40014400

080010f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010f8:	b590      	push	{r4, r7, lr}
 80010fa:	b089      	sub	sp, #36	; 0x24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	240c      	movs	r4, #12
 8001102:	193b      	adds	r3, r7, r4
 8001104:	0018      	movs	r0, r3
 8001106:	2314      	movs	r3, #20
 8001108:	001a      	movs	r2, r3
 800110a:	2100      	movs	r1, #0
 800110c:	f004 f8a8 	bl	8005260 <memset>
  if(htim->Instance==TIM1)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a16      	ldr	r2, [pc, #88]	; (8001170 <HAL_TIM_MspPostInit+0x78>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d125      	bne.n	8001166 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111a:	4b16      	ldr	r3, [pc, #88]	; (8001174 <HAL_TIM_MspPostInit+0x7c>)
 800111c:	695a      	ldr	r2, [r3, #20]
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <HAL_TIM_MspPostInit+0x7c>)
 8001120:	2180      	movs	r1, #128	; 0x80
 8001122:	0289      	lsls	r1, r1, #10
 8001124:	430a      	orrs	r2, r1
 8001126:	615a      	str	r2, [r3, #20]
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <HAL_TIM_MspPostInit+0x7c>)
 800112a:	695a      	ldr	r2, [r3, #20]
 800112c:	2380      	movs	r3, #128	; 0x80
 800112e:	029b      	lsls	r3, r3, #10
 8001130:	4013      	ands	r3, r2
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001136:	193b      	adds	r3, r7, r4
 8001138:	22e0      	movs	r2, #224	; 0xe0
 800113a:	00d2      	lsls	r2, r2, #3
 800113c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	0021      	movs	r1, r4
 8001140:	187b      	adds	r3, r7, r1
 8001142:	2202      	movs	r2, #2
 8001144:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	187b      	adds	r3, r7, r1
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114c:	187b      	adds	r3, r7, r1
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001152:	187b      	adds	r3, r7, r1
 8001154:	2202      	movs	r2, #2
 8001156:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001158:	187a      	adds	r2, r7, r1
 800115a:	2390      	movs	r3, #144	; 0x90
 800115c:	05db      	lsls	r3, r3, #23
 800115e:	0011      	movs	r1, r2
 8001160:	0018      	movs	r0, r3
 8001162:	f000 fe53 	bl	8001e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	46bd      	mov	sp, r7
 800116a:	b009      	add	sp, #36	; 0x24
 800116c:	bd90      	pop	{r4, r7, pc}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	40012c00 	.word	0x40012c00
 8001174:	40021000 	.word	0x40021000

08001178 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b08b      	sub	sp, #44	; 0x2c
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	2414      	movs	r4, #20
 8001182:	193b      	adds	r3, r7, r4
 8001184:	0018      	movs	r0, r3
 8001186:	2314      	movs	r3, #20
 8001188:	001a      	movs	r2, r3
 800118a:	2100      	movs	r1, #0
 800118c:	f004 f868 	bl	8005260 <memset>
  if(huart->Instance==USART2)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a20      	ldr	r2, [pc, #128]	; (8001218 <HAL_UART_MspInit+0xa0>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d13a      	bne.n	8001210 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800119a:	4b20      	ldr	r3, [pc, #128]	; (800121c <HAL_UART_MspInit+0xa4>)
 800119c:	69da      	ldr	r2, [r3, #28]
 800119e:	4b1f      	ldr	r3, [pc, #124]	; (800121c <HAL_UART_MspInit+0xa4>)
 80011a0:	2180      	movs	r1, #128	; 0x80
 80011a2:	0289      	lsls	r1, r1, #10
 80011a4:	430a      	orrs	r2, r1
 80011a6:	61da      	str	r2, [r3, #28]
 80011a8:	4b1c      	ldr	r3, [pc, #112]	; (800121c <HAL_UART_MspInit+0xa4>)
 80011aa:	69da      	ldr	r2, [r3, #28]
 80011ac:	2380      	movs	r3, #128	; 0x80
 80011ae:	029b      	lsls	r3, r3, #10
 80011b0:	4013      	ands	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	4b19      	ldr	r3, [pc, #100]	; (800121c <HAL_UART_MspInit+0xa4>)
 80011b8:	695a      	ldr	r2, [r3, #20]
 80011ba:	4b18      	ldr	r3, [pc, #96]	; (800121c <HAL_UART_MspInit+0xa4>)
 80011bc:	2180      	movs	r1, #128	; 0x80
 80011be:	0289      	lsls	r1, r1, #10
 80011c0:	430a      	orrs	r2, r1
 80011c2:	615a      	str	r2, [r3, #20]
 80011c4:	4b15      	ldr	r3, [pc, #84]	; (800121c <HAL_UART_MspInit+0xa4>)
 80011c6:	695a      	ldr	r2, [r3, #20]
 80011c8:	2380      	movs	r3, #128	; 0x80
 80011ca:	029b      	lsls	r3, r3, #10
 80011cc:	4013      	ands	r3, r2
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011d2:	0021      	movs	r1, r4
 80011d4:	187b      	adds	r3, r7, r1
 80011d6:	220c      	movs	r2, #12
 80011d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	187b      	adds	r3, r7, r1
 80011dc:	2202      	movs	r2, #2
 80011de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	187b      	adds	r3, r7, r1
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011e6:	187b      	adds	r3, r7, r1
 80011e8:	2203      	movs	r2, #3
 80011ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80011ec:	187b      	adds	r3, r7, r1
 80011ee:	2201      	movs	r2, #1
 80011f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f2:	187a      	adds	r2, r7, r1
 80011f4:	2390      	movs	r3, #144	; 0x90
 80011f6:	05db      	lsls	r3, r3, #23
 80011f8:	0011      	movs	r1, r2
 80011fa:	0018      	movs	r0, r3
 80011fc:	f000 fe06 	bl	8001e0c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001200:	2200      	movs	r2, #0
 8001202:	2100      	movs	r1, #0
 8001204:	201c      	movs	r0, #28
 8001206:	f000 fd51 	bl	8001cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800120a:	201c      	movs	r0, #28
 800120c:	f000 fd63 	bl	8001cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001210:	46c0      	nop			; (mov r8, r8)
 8001212:	46bd      	mov	sp, r7
 8001214:	b00b      	add	sp, #44	; 0x2c
 8001216:	bd90      	pop	{r4, r7, pc}
 8001218:	40004400 	.word	0x40004400
 800121c:	40021000 	.word	0x40021000

08001220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001224:	e7fe      	b.n	8001224 <NMI_Handler+0x4>

08001226 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122a:	e7fe      	b.n	800122a <HardFault_Handler+0x4>

0800122c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001230:	46c0      	nop			; (mov r8, r8)
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001244:	f000 f8fa 	bl	800143c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001248:	46c0      	nop			; (mov r8, r8)
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001254:	4b03      	ldr	r3, [pc, #12]	; (8001264 <TIM2_IRQHandler+0x14>)
 8001256:	0018      	movs	r0, r3
 8001258:	f001 ffda 	bl	8003210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800125c:	46c0      	nop			; (mov r8, r8)
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	20000184 	.word	0x20000184

08001268 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	//FEB_Test_PWM();

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <TIM3_IRQHandler+0x14>)
 800126e:	0018      	movs	r0, r3
 8001270:	f001 ffce 	bl	8003210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001274:	46c0      	nop			; (mov r8, r8)
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	200001cc 	.word	0x200001cc

08001280 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001284:	4b03      	ldr	r3, [pc, #12]	; (8001294 <TIM16_IRQHandler+0x14>)
 8001286:	0018      	movs	r0, r3
 8001288:	f001 ffc2 	bl	8003210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800128c:	46c0      	nop			; (mov r8, r8)
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	20000214 	.word	0x20000214

08001298 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800129c:	4b03      	ldr	r3, [pc, #12]	; (80012ac <USART2_IRQHandler+0x14>)
 800129e:	0018      	movs	r0, r3
 80012a0:	f003 f90e 	bl	80044c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012a4:	46c0      	nop			; (mov r8, r8)
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	2000025c 	.word	0x2000025c

080012b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012b8:	4a14      	ldr	r2, [pc, #80]	; (800130c <_sbrk+0x5c>)
 80012ba:	4b15      	ldr	r3, [pc, #84]	; (8001310 <_sbrk+0x60>)
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c4:	4b13      	ldr	r3, [pc, #76]	; (8001314 <_sbrk+0x64>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d102      	bne.n	80012d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012cc:	4b11      	ldr	r3, [pc, #68]	; (8001314 <_sbrk+0x64>)
 80012ce:	4a12      	ldr	r2, [pc, #72]	; (8001318 <_sbrk+0x68>)
 80012d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012d2:	4b10      	ldr	r3, [pc, #64]	; (8001314 <_sbrk+0x64>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	18d3      	adds	r3, r2, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d207      	bcs.n	80012f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012e0:	f003 ffc6 	bl	8005270 <__errno>
 80012e4:	0003      	movs	r3, r0
 80012e6:	220c      	movs	r2, #12
 80012e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ea:	2301      	movs	r3, #1
 80012ec:	425b      	negs	r3, r3
 80012ee:	e009      	b.n	8001304 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012f0:	4b08      	ldr	r3, [pc, #32]	; (8001314 <_sbrk+0x64>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012f6:	4b07      	ldr	r3, [pc, #28]	; (8001314 <_sbrk+0x64>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	18d2      	adds	r2, r2, r3
 80012fe:	4b05      	ldr	r3, [pc, #20]	; (8001314 <_sbrk+0x64>)
 8001300:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001302:	68fb      	ldr	r3, [r7, #12]
}
 8001304:	0018      	movs	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	b006      	add	sp, #24
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20001800 	.word	0x20001800
 8001310:	00000400 	.word	0x00000400
 8001314:	200002e4 	.word	0x200002e4
 8001318:	20000438 	.word	0x20000438

0800131c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001320:	46c0      	nop			; (mov r8, r8)
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001328:	4813      	ldr	r0, [pc, #76]	; (8001378 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800132a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800132c:	f7ff fff6 	bl	800131c <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001330:	4812      	ldr	r0, [pc, #72]	; (800137c <LoopForever+0x6>)
    LDR R1, [R0]
 8001332:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001334:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001336:	4a12      	ldr	r2, [pc, #72]	; (8001380 <LoopForever+0xa>)
    CMP R1, R2
 8001338:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800133a:	d105      	bne.n	8001348 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 800133c:	4811      	ldr	r0, [pc, #68]	; (8001384 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800133e:	4912      	ldr	r1, [pc, #72]	; (8001388 <LoopForever+0x12>)
    STR R1, [R0]
 8001340:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001342:	4812      	ldr	r0, [pc, #72]	; (800138c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001344:	4912      	ldr	r1, [pc, #72]	; (8001390 <LoopForever+0x1a>)
    STR R1, [R0]
 8001346:	6001      	str	r1, [r0, #0]

08001348 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001348:	4812      	ldr	r0, [pc, #72]	; (8001394 <LoopForever+0x1e>)
  ldr r1, =_edata
 800134a:	4913      	ldr	r1, [pc, #76]	; (8001398 <LoopForever+0x22>)
  ldr r2, =_sidata
 800134c:	4a13      	ldr	r2, [pc, #76]	; (800139c <LoopForever+0x26>)
  movs r3, #0
 800134e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001350:	e002      	b.n	8001358 <LoopCopyDataInit>

08001352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001356:	3304      	adds	r3, #4

08001358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800135c:	d3f9      	bcc.n	8001352 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800135e:	4a10      	ldr	r2, [pc, #64]	; (80013a0 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001360:	4c10      	ldr	r4, [pc, #64]	; (80013a4 <LoopForever+0x2e>)
  movs r3, #0
 8001362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001364:	e001      	b.n	800136a <LoopFillZerobss>

08001366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001368:	3204      	adds	r2, #4

0800136a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800136a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800136c:	d3fb      	bcc.n	8001366 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800136e:	f003 ff85 	bl	800527c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001372:	f7ff f939 	bl	80005e8 <main>

08001376 <LoopForever>:

LoopForever:
    b LoopForever
 8001376:	e7fe      	b.n	8001376 <LoopForever>
  ldr   r0, =_estack
 8001378:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 800137c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001380:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001384:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8001388:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 800138c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001390:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001398:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800139c:	08005c34 	.word	0x08005c34
  ldr r2, =_sbss
 80013a0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80013a4:	20000434 	.word	0x20000434

080013a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013a8:	e7fe      	b.n	80013a8 <ADC1_IRQHandler>
	...

080013ac <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <HAL_Init+0x24>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_Init+0x24>)
 80013b6:	2110      	movs	r1, #16
 80013b8:	430a      	orrs	r2, r1
 80013ba:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80013bc:	2003      	movs	r0, #3
 80013be:	f000 f809 	bl	80013d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013c2:	f7ff fd1b 	bl	8000dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	0018      	movs	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	40022000 	.word	0x40022000

080013d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d4:	b590      	push	{r4, r7, lr}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013dc:	4b14      	ldr	r3, [pc, #80]	; (8001430 <HAL_InitTick+0x5c>)
 80013de:	681c      	ldr	r4, [r3, #0]
 80013e0:	4b14      	ldr	r3, [pc, #80]	; (8001434 <HAL_InitTick+0x60>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	0019      	movs	r1, r3
 80013e6:	23fa      	movs	r3, #250	; 0xfa
 80013e8:	0098      	lsls	r0, r3, #2
 80013ea:	f7fe fe97 	bl	800011c <__udivsi3>
 80013ee:	0003      	movs	r3, r0
 80013f0:	0019      	movs	r1, r3
 80013f2:	0020      	movs	r0, r4
 80013f4:	f7fe fe92 	bl	800011c <__udivsi3>
 80013f8:	0003      	movs	r3, r0
 80013fa:	0018      	movs	r0, r3
 80013fc:	f000 fc7b 	bl	8001cf6 <HAL_SYSTICK_Config>
 8001400:	1e03      	subs	r3, r0, #0
 8001402:	d001      	beq.n	8001408 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e00f      	b.n	8001428 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b03      	cmp	r3, #3
 800140c:	d80b      	bhi.n	8001426 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	2301      	movs	r3, #1
 8001412:	425b      	negs	r3, r3
 8001414:	2200      	movs	r2, #0
 8001416:	0018      	movs	r0, r3
 8001418:	f000 fc48 	bl	8001cac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <HAL_InitTick+0x64>)
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001422:	2300      	movs	r3, #0
 8001424:	e000      	b.n	8001428 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
}
 8001428:	0018      	movs	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	b003      	add	sp, #12
 800142e:	bd90      	pop	{r4, r7, pc}
 8001430:	20000000 	.word	0x20000000
 8001434:	20000008 	.word	0x20000008
 8001438:	20000004 	.word	0x20000004

0800143c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <HAL_IncTick+0x1c>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	001a      	movs	r2, r3
 8001446:	4b05      	ldr	r3, [pc, #20]	; (800145c <HAL_IncTick+0x20>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	18d2      	adds	r2, r2, r3
 800144c:	4b03      	ldr	r3, [pc, #12]	; (800145c <HAL_IncTick+0x20>)
 800144e:	601a      	str	r2, [r3, #0]
}
 8001450:	46c0      	nop			; (mov r8, r8)
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	46c0      	nop			; (mov r8, r8)
 8001458:	20000008 	.word	0x20000008
 800145c:	200002e8 	.word	0x200002e8

08001460 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  return uwTick;
 8001464:	4b02      	ldr	r3, [pc, #8]	; (8001470 <HAL_GetTick+0x10>)
 8001466:	681b      	ldr	r3, [r3, #0]
}
 8001468:	0018      	movs	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	200002e8 	.word	0x200002e8

08001474 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800147c:	f7ff fff0 	bl	8001460 <HAL_GetTick>
 8001480:	0003      	movs	r3, r0
 8001482:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	3301      	adds	r3, #1
 800148c:	d005      	beq.n	800149a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <HAL_Delay+0x44>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	001a      	movs	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	189b      	adds	r3, r3, r2
 8001498:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800149a:	46c0      	nop			; (mov r8, r8)
 800149c:	f7ff ffe0 	bl	8001460 <HAL_GetTick>
 80014a0:	0002      	movs	r2, r0
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d8f7      	bhi.n	800149c <HAL_Delay+0x28>
  {
  }
}
 80014ac:	46c0      	nop			; (mov r8, r8)
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	46bd      	mov	sp, r7
 80014b2:	b004      	add	sp, #16
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	20000008 	.word	0x20000008

080014bc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014c4:	230f      	movs	r3, #15
 80014c6:	18fb      	adds	r3, r7, r3
 80014c8:	2200      	movs	r2, #0
 80014ca:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e125      	b.n	8001726 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d10a      	bne.n	80014f8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2234      	movs	r2, #52	; 0x34
 80014ec:	2100      	movs	r1, #0
 80014ee:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	0018      	movs	r0, r3
 80014f4:	f7ff fca6 	bl	8000e44 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014fc:	2210      	movs	r2, #16
 80014fe:	4013      	ands	r3, r2
 8001500:	d000      	beq.n	8001504 <HAL_ADC_Init+0x48>
 8001502:	e103      	b.n	800170c <HAL_ADC_Init+0x250>
 8001504:	230f      	movs	r3, #15
 8001506:	18fb      	adds	r3, r7, r3
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d000      	beq.n	8001510 <HAL_ADC_Init+0x54>
 800150e:	e0fd      	b.n	800170c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	2204      	movs	r2, #4
 8001518:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800151a:	d000      	beq.n	800151e <HAL_ADC_Init+0x62>
 800151c:	e0f6      	b.n	800170c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001522:	4a83      	ldr	r2, [pc, #524]	; (8001730 <HAL_ADC_Init+0x274>)
 8001524:	4013      	ands	r3, r2
 8001526:	2202      	movs	r2, #2
 8001528:	431a      	orrs	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	2203      	movs	r2, #3
 8001536:	4013      	ands	r3, r2
 8001538:	2b01      	cmp	r3, #1
 800153a:	d112      	bne.n	8001562 <HAL_ADC_Init+0xa6>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2201      	movs	r2, #1
 8001544:	4013      	ands	r3, r2
 8001546:	2b01      	cmp	r3, #1
 8001548:	d009      	beq.n	800155e <HAL_ADC_Init+0xa2>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	2380      	movs	r3, #128	; 0x80
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	401a      	ands	r2, r3
 8001556:	2380      	movs	r3, #128	; 0x80
 8001558:	021b      	lsls	r3, r3, #8
 800155a:	429a      	cmp	r2, r3
 800155c:	d101      	bne.n	8001562 <HAL_ADC_Init+0xa6>
 800155e:	2301      	movs	r3, #1
 8001560:	e000      	b.n	8001564 <HAL_ADC_Init+0xa8>
 8001562:	2300      	movs	r3, #0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d116      	bne.n	8001596 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	2218      	movs	r2, #24
 8001570:	4393      	bics	r3, r2
 8001572:	0019      	movs	r1, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	430a      	orrs	r2, r1
 800157e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	0899      	lsrs	r1, r3, #2
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68da      	ldr	r2, [r3, #12]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4964      	ldr	r1, [pc, #400]	; (8001734 <HAL_ADC_Init+0x278>)
 80015a2:	400a      	ands	r2, r1
 80015a4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	7e1b      	ldrb	r3, [r3, #24]
 80015aa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	7e5b      	ldrb	r3, [r3, #25]
 80015b0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015b2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	7e9b      	ldrb	r3, [r3, #26]
 80015b8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80015ba:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d002      	beq.n	80015ca <HAL_ADC_Init+0x10e>
 80015c4:	2380      	movs	r3, #128	; 0x80
 80015c6:	015b      	lsls	r3, r3, #5
 80015c8:	e000      	b.n	80015cc <HAL_ADC_Init+0x110>
 80015ca:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80015cc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80015d2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	691b      	ldr	r3, [r3, #16]
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d101      	bne.n	80015e0 <HAL_ADC_Init+0x124>
 80015dc:	2304      	movs	r3, #4
 80015de:	e000      	b.n	80015e2 <HAL_ADC_Init+0x126>
 80015e0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80015e2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2124      	movs	r1, #36	; 0x24
 80015e8:	5c5b      	ldrb	r3, [r3, r1]
 80015ea:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80015ec:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015ee:	68ba      	ldr	r2, [r7, #8]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	7edb      	ldrb	r3, [r3, #27]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d115      	bne.n	8001628 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	7e9b      	ldrb	r3, [r3, #26]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d105      	bne.n	8001610 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	2280      	movs	r2, #128	; 0x80
 8001608:	0252      	lsls	r2, r2, #9
 800160a:	4313      	orrs	r3, r2
 800160c:	60bb      	str	r3, [r7, #8]
 800160e:	e00b      	b.n	8001628 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001614:	2220      	movs	r2, #32
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001620:	2201      	movs	r2, #1
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69da      	ldr	r2, [r3, #28]
 800162c:	23c2      	movs	r3, #194	; 0xc2
 800162e:	33ff      	adds	r3, #255	; 0xff
 8001630:	429a      	cmp	r2, r3
 8001632:	d007      	beq.n	8001644 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800163c:	4313      	orrs	r3, r2
 800163e:	68ba      	ldr	r2, [r7, #8]
 8001640:	4313      	orrs	r3, r2
 8001642:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	68d9      	ldr	r1, [r3, #12]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68ba      	ldr	r2, [r7, #8]
 8001650:	430a      	orrs	r2, r1
 8001652:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	055b      	lsls	r3, r3, #21
 800165c:	429a      	cmp	r2, r3
 800165e:	d01b      	beq.n	8001698 <HAL_ADC_Init+0x1dc>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001664:	2b01      	cmp	r3, #1
 8001666:	d017      	beq.n	8001698 <HAL_ADC_Init+0x1dc>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166c:	2b02      	cmp	r3, #2
 800166e:	d013      	beq.n	8001698 <HAL_ADC_Init+0x1dc>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001674:	2b03      	cmp	r3, #3
 8001676:	d00f      	beq.n	8001698 <HAL_ADC_Init+0x1dc>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167c:	2b04      	cmp	r3, #4
 800167e:	d00b      	beq.n	8001698 <HAL_ADC_Init+0x1dc>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001684:	2b05      	cmp	r3, #5
 8001686:	d007      	beq.n	8001698 <HAL_ADC_Init+0x1dc>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168c:	2b06      	cmp	r3, #6
 800168e:	d003      	beq.n	8001698 <HAL_ADC_Init+0x1dc>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001694:	2b07      	cmp	r3, #7
 8001696:	d112      	bne.n	80016be <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	695a      	ldr	r2, [r3, #20]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2107      	movs	r1, #7
 80016a4:	438a      	bics	r2, r1
 80016a6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6959      	ldr	r1, [r3, #20]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b2:	2207      	movs	r2, #7
 80016b4:	401a      	ands	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	4a1c      	ldr	r2, [pc, #112]	; (8001738 <HAL_ADC_Init+0x27c>)
 80016c6:	4013      	ands	r3, r2
 80016c8:	68ba      	ldr	r2, [r7, #8]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d10b      	bne.n	80016e6 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d8:	2203      	movs	r2, #3
 80016da:	4393      	bics	r3, r2
 80016dc:	2201      	movs	r2, #1
 80016de:	431a      	orrs	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80016e4:	e01c      	b.n	8001720 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ea:	2212      	movs	r2, #18
 80016ec:	4393      	bics	r3, r2
 80016ee:	2210      	movs	r2, #16
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016fa:	2201      	movs	r2, #1
 80016fc:	431a      	orrs	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001702:	230f      	movs	r3, #15
 8001704:	18fb      	adds	r3, r7, r3
 8001706:	2201      	movs	r2, #1
 8001708:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800170a:	e009      	b.n	8001720 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001710:	2210      	movs	r2, #16
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001718:	230f      	movs	r3, #15
 800171a:	18fb      	adds	r3, r7, r3
 800171c:	2201      	movs	r2, #1
 800171e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001720:	230f      	movs	r3, #15
 8001722:	18fb      	adds	r3, r7, r3
 8001724:	781b      	ldrb	r3, [r3, #0]
}
 8001726:	0018      	movs	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	b004      	add	sp, #16
 800172c:	bd80      	pop	{r7, pc}
 800172e:	46c0      	nop			; (mov r8, r8)
 8001730:	fffffefd 	.word	0xfffffefd
 8001734:	fffe0219 	.word	0xfffe0219
 8001738:	833fffe7 	.word	0x833fffe7

0800173c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001746:	230f      	movs	r3, #15
 8001748:	18fb      	adds	r3, r7, r3
 800174a:	2200      	movs	r2, #0
 800174c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800174e:	2300      	movs	r3, #0
 8001750:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001756:	2380      	movs	r3, #128	; 0x80
 8001758:	055b      	lsls	r3, r3, #21
 800175a:	429a      	cmp	r2, r3
 800175c:	d011      	beq.n	8001782 <HAL_ADC_ConfigChannel+0x46>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001762:	2b01      	cmp	r3, #1
 8001764:	d00d      	beq.n	8001782 <HAL_ADC_ConfigChannel+0x46>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176a:	2b02      	cmp	r3, #2
 800176c:	d009      	beq.n	8001782 <HAL_ADC_ConfigChannel+0x46>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001772:	2b03      	cmp	r3, #3
 8001774:	d005      	beq.n	8001782 <HAL_ADC_ConfigChannel+0x46>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177a:	2b04      	cmp	r3, #4
 800177c:	d001      	beq.n	8001782 <HAL_ADC_ConfigChannel+0x46>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2234      	movs	r2, #52	; 0x34
 8001786:	5c9b      	ldrb	r3, [r3, r2]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d101      	bne.n	8001790 <HAL_ADC_ConfigChannel+0x54>
 800178c:	2302      	movs	r3, #2
 800178e:	e0d0      	b.n	8001932 <HAL_ADC_ConfigChannel+0x1f6>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2234      	movs	r2, #52	; 0x34
 8001794:	2101      	movs	r1, #1
 8001796:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	2204      	movs	r2, #4
 80017a0:	4013      	ands	r3, r2
 80017a2:	d000      	beq.n	80017a6 <HAL_ADC_ConfigChannel+0x6a>
 80017a4:	e0b4      	b.n	8001910 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	4a64      	ldr	r2, [pc, #400]	; (800193c <HAL_ADC_ConfigChannel+0x200>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d100      	bne.n	80017b2 <HAL_ADC_ConfigChannel+0x76>
 80017b0:	e082      	b.n	80018b8 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2201      	movs	r2, #1
 80017be:	409a      	lsls	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017cc:	2380      	movs	r3, #128	; 0x80
 80017ce:	055b      	lsls	r3, r3, #21
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d037      	beq.n	8001844 <HAL_ADC_ConfigChannel+0x108>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d033      	beq.n	8001844 <HAL_ADC_ConfigChannel+0x108>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d02f      	beq.n	8001844 <HAL_ADC_ConfigChannel+0x108>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e8:	2b03      	cmp	r3, #3
 80017ea:	d02b      	beq.n	8001844 <HAL_ADC_ConfigChannel+0x108>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f0:	2b04      	cmp	r3, #4
 80017f2:	d027      	beq.n	8001844 <HAL_ADC_ConfigChannel+0x108>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f8:	2b05      	cmp	r3, #5
 80017fa:	d023      	beq.n	8001844 <HAL_ADC_ConfigChannel+0x108>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001800:	2b06      	cmp	r3, #6
 8001802:	d01f      	beq.n	8001844 <HAL_ADC_ConfigChannel+0x108>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001808:	2b07      	cmp	r3, #7
 800180a:	d01b      	beq.n	8001844 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	2107      	movs	r1, #7
 8001818:	400b      	ands	r3, r1
 800181a:	429a      	cmp	r2, r3
 800181c:	d012      	beq.n	8001844 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	695a      	ldr	r2, [r3, #20]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2107      	movs	r1, #7
 800182a:	438a      	bics	r2, r1
 800182c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6959      	ldr	r1, [r3, #20]
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	2207      	movs	r2, #7
 800183a:	401a      	ands	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	430a      	orrs	r2, r1
 8001842:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b10      	cmp	r3, #16
 800184a:	d007      	beq.n	800185c <HAL_ADC_ConfigChannel+0x120>
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b11      	cmp	r3, #17
 8001852:	d003      	beq.n	800185c <HAL_ADC_ConfigChannel+0x120>
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b12      	cmp	r3, #18
 800185a:	d163      	bne.n	8001924 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800185c:	4b38      	ldr	r3, [pc, #224]	; (8001940 <HAL_ADC_ConfigChannel+0x204>)
 800185e:	6819      	ldr	r1, [r3, #0]
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b10      	cmp	r3, #16
 8001866:	d009      	beq.n	800187c <HAL_ADC_ConfigChannel+0x140>
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b11      	cmp	r3, #17
 800186e:	d102      	bne.n	8001876 <HAL_ADC_ConfigChannel+0x13a>
 8001870:	2380      	movs	r3, #128	; 0x80
 8001872:	03db      	lsls	r3, r3, #15
 8001874:	e004      	b.n	8001880 <HAL_ADC_ConfigChannel+0x144>
 8001876:	2380      	movs	r3, #128	; 0x80
 8001878:	045b      	lsls	r3, r3, #17
 800187a:	e001      	b.n	8001880 <HAL_ADC_ConfigChannel+0x144>
 800187c:	2380      	movs	r3, #128	; 0x80
 800187e:	041b      	lsls	r3, r3, #16
 8001880:	4a2f      	ldr	r2, [pc, #188]	; (8001940 <HAL_ADC_ConfigChannel+0x204>)
 8001882:	430b      	orrs	r3, r1
 8001884:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2b10      	cmp	r3, #16
 800188c:	d14a      	bne.n	8001924 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800188e:	4b2d      	ldr	r3, [pc, #180]	; (8001944 <HAL_ADC_ConfigChannel+0x208>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	492d      	ldr	r1, [pc, #180]	; (8001948 <HAL_ADC_ConfigChannel+0x20c>)
 8001894:	0018      	movs	r0, r3
 8001896:	f7fe fc41 	bl	800011c <__udivsi3>
 800189a:	0003      	movs	r3, r0
 800189c:	001a      	movs	r2, r3
 800189e:	0013      	movs	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	189b      	adds	r3, r3, r2
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018a8:	e002      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	3b01      	subs	r3, #1
 80018ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f9      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x16e>
 80018b6:	e035      	b.n	8001924 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2101      	movs	r1, #1
 80018c4:	4099      	lsls	r1, r3
 80018c6:	000b      	movs	r3, r1
 80018c8:	43d9      	mvns	r1, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	400a      	ands	r2, r1
 80018d0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2b10      	cmp	r3, #16
 80018d8:	d007      	beq.n	80018ea <HAL_ADC_ConfigChannel+0x1ae>
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b11      	cmp	r3, #17
 80018e0:	d003      	beq.n	80018ea <HAL_ADC_ConfigChannel+0x1ae>
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2b12      	cmp	r3, #18
 80018e8:	d11c      	bne.n	8001924 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <HAL_ADC_ConfigChannel+0x204>)
 80018ec:	6819      	ldr	r1, [r3, #0]
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2b10      	cmp	r3, #16
 80018f4:	d007      	beq.n	8001906 <HAL_ADC_ConfigChannel+0x1ca>
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2b11      	cmp	r3, #17
 80018fc:	d101      	bne.n	8001902 <HAL_ADC_ConfigChannel+0x1c6>
 80018fe:	4b13      	ldr	r3, [pc, #76]	; (800194c <HAL_ADC_ConfigChannel+0x210>)
 8001900:	e002      	b.n	8001908 <HAL_ADC_ConfigChannel+0x1cc>
 8001902:	4b13      	ldr	r3, [pc, #76]	; (8001950 <HAL_ADC_ConfigChannel+0x214>)
 8001904:	e000      	b.n	8001908 <HAL_ADC_ConfigChannel+0x1cc>
 8001906:	4b13      	ldr	r3, [pc, #76]	; (8001954 <HAL_ADC_ConfigChannel+0x218>)
 8001908:	4a0d      	ldr	r2, [pc, #52]	; (8001940 <HAL_ADC_ConfigChannel+0x204>)
 800190a:	400b      	ands	r3, r1
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	e009      	b.n	8001924 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001914:	2220      	movs	r2, #32
 8001916:	431a      	orrs	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800191c:	230f      	movs	r3, #15
 800191e:	18fb      	adds	r3, r7, r3
 8001920:	2201      	movs	r2, #1
 8001922:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2234      	movs	r2, #52	; 0x34
 8001928:	2100      	movs	r1, #0
 800192a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800192c:	230f      	movs	r3, #15
 800192e:	18fb      	adds	r3, r7, r3
 8001930:	781b      	ldrb	r3, [r3, #0]
}
 8001932:	0018      	movs	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	b004      	add	sp, #16
 8001938:	bd80      	pop	{r7, pc}
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	00001001 	.word	0x00001001
 8001940:	40012708 	.word	0x40012708
 8001944:	20000000 	.word	0x20000000
 8001948:	000f4240 	.word	0x000f4240
 800194c:	ffbfffff 	.word	0xffbfffff
 8001950:	feffffff 	.word	0xfeffffff
 8001954:	ff7fffff 	.word	0xff7fffff

08001958 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e0f0      	b.n	8001b4c <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2220      	movs	r2, #32
 800196e:	5c9b      	ldrb	r3, [r3, r2]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d103      	bne.n	800197e <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	0018      	movs	r0, r3
 800197a:	f7ff faa9 	bl	8000ed0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2101      	movs	r1, #1
 800198a:	430a      	orrs	r2, r1
 800198c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800198e:	f7ff fd67 	bl	8001460 <HAL_GetTick>
 8001992:	0003      	movs	r3, r0
 8001994:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001996:	e013      	b.n	80019c0 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001998:	f7ff fd62 	bl	8001460 <HAL_GetTick>
 800199c:	0002      	movs	r2, r0
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b0a      	cmp	r3, #10
 80019a4:	d90c      	bls.n	80019c0 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	2280      	movs	r2, #128	; 0x80
 80019ac:	0292      	lsls	r2, r2, #10
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2220      	movs	r2, #32
 80019b8:	2105      	movs	r1, #5
 80019ba:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e0c5      	b.n	8001b4c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	4013      	ands	r3, r2
 80019ca:	d0e5      	beq.n	8001998 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2102      	movs	r1, #2
 80019d8:	438a      	bics	r2, r1
 80019da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019dc:	f7ff fd40 	bl	8001460 <HAL_GetTick>
 80019e0:	0003      	movs	r3, r0
 80019e2:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019e4:	e013      	b.n	8001a0e <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019e6:	f7ff fd3b 	bl	8001460 <HAL_GetTick>
 80019ea:	0002      	movs	r2, r0
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b0a      	cmp	r3, #10
 80019f2:	d90c      	bls.n	8001a0e <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f8:	2280      	movs	r2, #128	; 0x80
 80019fa:	0292      	lsls	r2, r2, #10
 80019fc:	431a      	orrs	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2220      	movs	r2, #32
 8001a06:	2105      	movs	r1, #5
 8001a08:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e09e      	b.n	8001b4c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2202      	movs	r2, #2
 8001a16:	4013      	ands	r3, r2
 8001a18:	d1e5      	bne.n	80019e6 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	7e1b      	ldrb	r3, [r3, #24]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d108      	bne.n	8001a34 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2180      	movs	r1, #128	; 0x80
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	e007      	b.n	8001a44 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2180      	movs	r1, #128	; 0x80
 8001a40:	438a      	bics	r2, r1
 8001a42:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	7e5b      	ldrb	r3, [r3, #25]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d108      	bne.n	8001a5e <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2140      	movs	r1, #64	; 0x40
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	e007      	b.n	8001a6e <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2140      	movs	r1, #64	; 0x40
 8001a6a:	438a      	bics	r2, r1
 8001a6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	7e9b      	ldrb	r3, [r3, #26]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d108      	bne.n	8001a88 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2120      	movs	r1, #32
 8001a82:	430a      	orrs	r2, r1
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	e007      	b.n	8001a98 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2120      	movs	r1, #32
 8001a94:	438a      	bics	r2, r1
 8001a96:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	7edb      	ldrb	r3, [r3, #27]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d108      	bne.n	8001ab2 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2110      	movs	r1, #16
 8001aac:	438a      	bics	r2, r1
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	e007      	b.n	8001ac2 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2110      	movs	r1, #16
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	7f1b      	ldrb	r3, [r3, #28]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d108      	bne.n	8001adc <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2108      	movs	r1, #8
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	e007      	b.n	8001aec <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2108      	movs	r1, #8
 8001ae8:	438a      	bics	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	7f5b      	ldrb	r3, [r3, #29]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d108      	bne.n	8001b06 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2104      	movs	r1, #4
 8001b00:	430a      	orrs	r2, r1
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	e007      	b.n	8001b16 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2104      	movs	r1, #4
 8001b12:	438a      	bics	r2, r1
 8001b14:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	431a      	orrs	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	0011      	movs	r1, r2
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	1e5a      	subs	r2, r3, #1
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2220      	movs	r2, #32
 8001b46:	2101      	movs	r1, #1
 8001b48:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	b004      	add	sp, #16
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	0002      	movs	r2, r0
 8001b5c:	1dfb      	adds	r3, r7, #7
 8001b5e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b60:	1dfb      	adds	r3, r7, #7
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b7f      	cmp	r3, #127	; 0x7f
 8001b66:	d809      	bhi.n	8001b7c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b68:	1dfb      	adds	r3, r7, #7
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	001a      	movs	r2, r3
 8001b6e:	231f      	movs	r3, #31
 8001b70:	401a      	ands	r2, r3
 8001b72:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <__NVIC_EnableIRQ+0x30>)
 8001b74:	2101      	movs	r1, #1
 8001b76:	4091      	lsls	r1, r2
 8001b78:	000a      	movs	r2, r1
 8001b7a:	601a      	str	r2, [r3, #0]
  }
}
 8001b7c:	46c0      	nop			; (mov r8, r8)
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	b002      	add	sp, #8
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	e000e100 	.word	0xe000e100

08001b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b88:	b590      	push	{r4, r7, lr}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	0002      	movs	r2, r0
 8001b90:	6039      	str	r1, [r7, #0]
 8001b92:	1dfb      	adds	r3, r7, #7
 8001b94:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b96:	1dfb      	adds	r3, r7, #7
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b7f      	cmp	r3, #127	; 0x7f
 8001b9c:	d828      	bhi.n	8001bf0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b9e:	4a2f      	ldr	r2, [pc, #188]	; (8001c5c <__NVIC_SetPriority+0xd4>)
 8001ba0:	1dfb      	adds	r3, r7, #7
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	b25b      	sxtb	r3, r3
 8001ba6:	089b      	lsrs	r3, r3, #2
 8001ba8:	33c0      	adds	r3, #192	; 0xc0
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	589b      	ldr	r3, [r3, r2]
 8001bae:	1dfa      	adds	r2, r7, #7
 8001bb0:	7812      	ldrb	r2, [r2, #0]
 8001bb2:	0011      	movs	r1, r2
 8001bb4:	2203      	movs	r2, #3
 8001bb6:	400a      	ands	r2, r1
 8001bb8:	00d2      	lsls	r2, r2, #3
 8001bba:	21ff      	movs	r1, #255	; 0xff
 8001bbc:	4091      	lsls	r1, r2
 8001bbe:	000a      	movs	r2, r1
 8001bc0:	43d2      	mvns	r2, r2
 8001bc2:	401a      	ands	r2, r3
 8001bc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	019b      	lsls	r3, r3, #6
 8001bca:	22ff      	movs	r2, #255	; 0xff
 8001bcc:	401a      	ands	r2, r3
 8001bce:	1dfb      	adds	r3, r7, #7
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	4003      	ands	r3, r0
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bdc:	481f      	ldr	r0, [pc, #124]	; (8001c5c <__NVIC_SetPriority+0xd4>)
 8001bde:	1dfb      	adds	r3, r7, #7
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	b25b      	sxtb	r3, r3
 8001be4:	089b      	lsrs	r3, r3, #2
 8001be6:	430a      	orrs	r2, r1
 8001be8:	33c0      	adds	r3, #192	; 0xc0
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001bee:	e031      	b.n	8001c54 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bf0:	4a1b      	ldr	r2, [pc, #108]	; (8001c60 <__NVIC_SetPriority+0xd8>)
 8001bf2:	1dfb      	adds	r3, r7, #7
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	0019      	movs	r1, r3
 8001bf8:	230f      	movs	r3, #15
 8001bfa:	400b      	ands	r3, r1
 8001bfc:	3b08      	subs	r3, #8
 8001bfe:	089b      	lsrs	r3, r3, #2
 8001c00:	3306      	adds	r3, #6
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	18d3      	adds	r3, r2, r3
 8001c06:	3304      	adds	r3, #4
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	1dfa      	adds	r2, r7, #7
 8001c0c:	7812      	ldrb	r2, [r2, #0]
 8001c0e:	0011      	movs	r1, r2
 8001c10:	2203      	movs	r2, #3
 8001c12:	400a      	ands	r2, r1
 8001c14:	00d2      	lsls	r2, r2, #3
 8001c16:	21ff      	movs	r1, #255	; 0xff
 8001c18:	4091      	lsls	r1, r2
 8001c1a:	000a      	movs	r2, r1
 8001c1c:	43d2      	mvns	r2, r2
 8001c1e:	401a      	ands	r2, r3
 8001c20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	019b      	lsls	r3, r3, #6
 8001c26:	22ff      	movs	r2, #255	; 0xff
 8001c28:	401a      	ands	r2, r3
 8001c2a:	1dfb      	adds	r3, r7, #7
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	0018      	movs	r0, r3
 8001c30:	2303      	movs	r3, #3
 8001c32:	4003      	ands	r3, r0
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c38:	4809      	ldr	r0, [pc, #36]	; (8001c60 <__NVIC_SetPriority+0xd8>)
 8001c3a:	1dfb      	adds	r3, r7, #7
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	001c      	movs	r4, r3
 8001c40:	230f      	movs	r3, #15
 8001c42:	4023      	ands	r3, r4
 8001c44:	3b08      	subs	r3, #8
 8001c46:	089b      	lsrs	r3, r3, #2
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	3306      	adds	r3, #6
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	18c3      	adds	r3, r0, r3
 8001c50:	3304      	adds	r3, #4
 8001c52:	601a      	str	r2, [r3, #0]
}
 8001c54:	46c0      	nop			; (mov r8, r8)
 8001c56:	46bd      	mov	sp, r7
 8001c58:	b003      	add	sp, #12
 8001c5a:	bd90      	pop	{r4, r7, pc}
 8001c5c:	e000e100 	.word	0xe000e100
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	1e5a      	subs	r2, r3, #1
 8001c70:	2380      	movs	r3, #128	; 0x80
 8001c72:	045b      	lsls	r3, r3, #17
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d301      	bcc.n	8001c7c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e010      	b.n	8001c9e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <SysTick_Config+0x44>)
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	3a01      	subs	r2, #1
 8001c82:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c84:	2301      	movs	r3, #1
 8001c86:	425b      	negs	r3, r3
 8001c88:	2103      	movs	r1, #3
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	f7ff ff7c 	bl	8001b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c90:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <SysTick_Config+0x44>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c96:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <SysTick_Config+0x44>)
 8001c98:	2207      	movs	r2, #7
 8001c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	b002      	add	sp, #8
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	46c0      	nop			; (mov r8, r8)
 8001ca8:	e000e010 	.word	0xe000e010

08001cac <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
 8001cb6:	210f      	movs	r1, #15
 8001cb8:	187b      	adds	r3, r7, r1
 8001cba:	1c02      	adds	r2, r0, #0
 8001cbc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	187b      	adds	r3, r7, r1
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	b25b      	sxtb	r3, r3
 8001cc6:	0011      	movs	r1, r2
 8001cc8:	0018      	movs	r0, r3
 8001cca:	f7ff ff5d 	bl	8001b88 <__NVIC_SetPriority>
}
 8001cce:	46c0      	nop			; (mov r8, r8)
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	b004      	add	sp, #16
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	0002      	movs	r2, r0
 8001cde:	1dfb      	adds	r3, r7, #7
 8001ce0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce2:	1dfb      	adds	r3, r7, #7
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	b25b      	sxtb	r3, r3
 8001ce8:	0018      	movs	r0, r3
 8001cea:	f7ff ff33 	bl	8001b54 <__NVIC_EnableIRQ>
}
 8001cee:	46c0      	nop			; (mov r8, r8)
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	b002      	add	sp, #8
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	0018      	movs	r0, r3
 8001d02:	f7ff ffaf 	bl	8001c64 <SysTick_Config>
 8001d06:	0003      	movs	r3, r0
}
 8001d08:	0018      	movs	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	b002      	add	sp, #8
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2221      	movs	r2, #33	; 0x21
 8001d1c:	5c9b      	ldrb	r3, [r3, r2]
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d008      	beq.n	8001d36 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2204      	movs	r2, #4
 8001d28:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2220      	movs	r2, #32
 8001d2e:	2100      	movs	r1, #0
 8001d30:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e020      	b.n	8001d78 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	210e      	movs	r1, #14
 8001d42:	438a      	bics	r2, r1
 8001d44:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2101      	movs	r1, #1
 8001d52:	438a      	bics	r2, r1
 8001d54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d5e:	2101      	movs	r1, #1
 8001d60:	4091      	lsls	r1, r2
 8001d62:	000a      	movs	r2, r1
 8001d64:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2221      	movs	r2, #33	; 0x21
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2220      	movs	r2, #32
 8001d72:	2100      	movs	r1, #0
 8001d74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	0018      	movs	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	b002      	add	sp, #8
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d88:	210f      	movs	r1, #15
 8001d8a:	187b      	adds	r3, r7, r1
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2221      	movs	r2, #33	; 0x21
 8001d94:	5c9b      	ldrb	r3, [r3, r2]
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d006      	beq.n	8001daa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2204      	movs	r2, #4
 8001da0:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001da2:	187b      	adds	r3, r7, r1
 8001da4:	2201      	movs	r2, #1
 8001da6:	701a      	strb	r2, [r3, #0]
 8001da8:	e028      	b.n	8001dfc <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	210e      	movs	r1, #14
 8001db6:	438a      	bics	r2, r1
 8001db8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	438a      	bics	r2, r1
 8001dc8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	4091      	lsls	r1, r2
 8001dd6:	000a      	movs	r2, r1
 8001dd8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2221      	movs	r2, #33	; 0x21
 8001dde:	2101      	movs	r1, #1
 8001de0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2220      	movs	r2, #32
 8001de6:	2100      	movs	r1, #0
 8001de8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d004      	beq.n	8001dfc <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	0010      	movs	r0, r2
 8001dfa:	4798      	blx	r3
    }
  }
  return status;
 8001dfc:	230f      	movs	r3, #15
 8001dfe:	18fb      	adds	r3, r7, r3
 8001e00:	781b      	ldrb	r3, [r3, #0]
}
 8001e02:	0018      	movs	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	b004      	add	sp, #16
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e1a:	e149      	b.n	80020b0 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2101      	movs	r1, #1
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	4091      	lsls	r1, r2
 8001e26:	000a      	movs	r2, r1
 8001e28:	4013      	ands	r3, r2
 8001e2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d100      	bne.n	8001e34 <HAL_GPIO_Init+0x28>
 8001e32:	e13a      	b.n	80020aa <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2203      	movs	r2, #3
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d005      	beq.n	8001e4c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2203      	movs	r2, #3
 8001e46:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d130      	bne.n	8001eae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	2203      	movs	r2, #3
 8001e58:	409a      	lsls	r2, r3
 8001e5a:	0013      	movs	r3, r2
 8001e5c:	43da      	mvns	r2, r3
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	4013      	ands	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	409a      	lsls	r2, r3
 8001e6e:	0013      	movs	r3, r2
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e82:	2201      	movs	r2, #1
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	409a      	lsls	r2, r3
 8001e88:	0013      	movs	r3, r2
 8001e8a:	43da      	mvns	r2, r3
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	091b      	lsrs	r3, r3, #4
 8001e98:	2201      	movs	r2, #1
 8001e9a:	401a      	ands	r2, r3
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	409a      	lsls	r2, r3
 8001ea0:	0013      	movs	r3, r2
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	2b03      	cmp	r3, #3
 8001eb8:	d017      	beq.n	8001eea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	409a      	lsls	r2, r3
 8001ec8:	0013      	movs	r3, r2
 8001eca:	43da      	mvns	r2, r3
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	409a      	lsls	r2, r3
 8001edc:	0013      	movs	r3, r2
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2203      	movs	r2, #3
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d123      	bne.n	8001f3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	08da      	lsrs	r2, r3, #3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3208      	adds	r2, #8
 8001efe:	0092      	lsls	r2, r2, #2
 8001f00:	58d3      	ldr	r3, [r2, r3]
 8001f02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	2207      	movs	r2, #7
 8001f08:	4013      	ands	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	220f      	movs	r2, #15
 8001f0e:	409a      	lsls	r2, r3
 8001f10:	0013      	movs	r3, r2
 8001f12:	43da      	mvns	r2, r3
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4013      	ands	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	691a      	ldr	r2, [r3, #16]
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	2107      	movs	r1, #7
 8001f22:	400b      	ands	r3, r1
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	409a      	lsls	r2, r3
 8001f28:	0013      	movs	r3, r2
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	08da      	lsrs	r2, r3, #3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3208      	adds	r2, #8
 8001f38:	0092      	lsls	r2, r2, #2
 8001f3a:	6939      	ldr	r1, [r7, #16]
 8001f3c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	2203      	movs	r2, #3
 8001f4a:	409a      	lsls	r2, r3
 8001f4c:	0013      	movs	r3, r2
 8001f4e:	43da      	mvns	r2, r3
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	4013      	ands	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	401a      	ands	r2, r3
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	409a      	lsls	r2, r3
 8001f64:	0013      	movs	r3, r2
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	23c0      	movs	r3, #192	; 0xc0
 8001f78:	029b      	lsls	r3, r3, #10
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d100      	bne.n	8001f80 <HAL_GPIO_Init+0x174>
 8001f7e:	e094      	b.n	80020aa <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f80:	4b51      	ldr	r3, [pc, #324]	; (80020c8 <HAL_GPIO_Init+0x2bc>)
 8001f82:	699a      	ldr	r2, [r3, #24]
 8001f84:	4b50      	ldr	r3, [pc, #320]	; (80020c8 <HAL_GPIO_Init+0x2bc>)
 8001f86:	2101      	movs	r1, #1
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	619a      	str	r2, [r3, #24]
 8001f8c:	4b4e      	ldr	r3, [pc, #312]	; (80020c8 <HAL_GPIO_Init+0x2bc>)
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	2201      	movs	r2, #1
 8001f92:	4013      	ands	r3, r2
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f98:	4a4c      	ldr	r2, [pc, #304]	; (80020cc <HAL_GPIO_Init+0x2c0>)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	089b      	lsrs	r3, r3, #2
 8001f9e:	3302      	adds	r3, #2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	589b      	ldr	r3, [r3, r2]
 8001fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	2203      	movs	r2, #3
 8001faa:	4013      	ands	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	220f      	movs	r2, #15
 8001fb0:	409a      	lsls	r2, r3
 8001fb2:	0013      	movs	r3, r2
 8001fb4:	43da      	mvns	r2, r3
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	2390      	movs	r3, #144	; 0x90
 8001fc0:	05db      	lsls	r3, r3, #23
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d00d      	beq.n	8001fe2 <HAL_GPIO_Init+0x1d6>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a41      	ldr	r2, [pc, #260]	; (80020d0 <HAL_GPIO_Init+0x2c4>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d007      	beq.n	8001fde <HAL_GPIO_Init+0x1d2>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a40      	ldr	r2, [pc, #256]	; (80020d4 <HAL_GPIO_Init+0x2c8>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d101      	bne.n	8001fda <HAL_GPIO_Init+0x1ce>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e004      	b.n	8001fe4 <HAL_GPIO_Init+0x1d8>
 8001fda:	2305      	movs	r3, #5
 8001fdc:	e002      	b.n	8001fe4 <HAL_GPIO_Init+0x1d8>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <HAL_GPIO_Init+0x1d8>
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	2103      	movs	r1, #3
 8001fe8:	400a      	ands	r2, r1
 8001fea:	0092      	lsls	r2, r2, #2
 8001fec:	4093      	lsls	r3, r2
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ff4:	4935      	ldr	r1, [pc, #212]	; (80020cc <HAL_GPIO_Init+0x2c0>)
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	089b      	lsrs	r3, r3, #2
 8001ffa:	3302      	adds	r3, #2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002002:	4b35      	ldr	r3, [pc, #212]	; (80020d8 <HAL_GPIO_Init+0x2cc>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	43da      	mvns	r2, r3
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	4013      	ands	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	2380      	movs	r3, #128	; 0x80
 8002018:	035b      	lsls	r3, r3, #13
 800201a:	4013      	ands	r3, r2
 800201c:	d003      	beq.n	8002026 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4313      	orrs	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002026:	4b2c      	ldr	r3, [pc, #176]	; (80020d8 <HAL_GPIO_Init+0x2cc>)
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800202c:	4b2a      	ldr	r3, [pc, #168]	; (80020d8 <HAL_GPIO_Init+0x2cc>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	43da      	mvns	r2, r3
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	2380      	movs	r3, #128	; 0x80
 8002042:	039b      	lsls	r3, r3, #14
 8002044:	4013      	ands	r3, r2
 8002046:	d003      	beq.n	8002050 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4313      	orrs	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002050:	4b21      	ldr	r3, [pc, #132]	; (80020d8 <HAL_GPIO_Init+0x2cc>)
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002056:	4b20      	ldr	r3, [pc, #128]	; (80020d8 <HAL_GPIO_Init+0x2cc>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	43da      	mvns	r2, r3
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	4013      	ands	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	2380      	movs	r3, #128	; 0x80
 800206c:	029b      	lsls	r3, r3, #10
 800206e:	4013      	ands	r3, r2
 8002070:	d003      	beq.n	800207a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4313      	orrs	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800207a:	4b17      	ldr	r3, [pc, #92]	; (80020d8 <HAL_GPIO_Init+0x2cc>)
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002080:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <HAL_GPIO_Init+0x2cc>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	43da      	mvns	r2, r3
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4013      	ands	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	2380      	movs	r3, #128	; 0x80
 8002096:	025b      	lsls	r3, r3, #9
 8002098:	4013      	ands	r3, r2
 800209a:	d003      	beq.n	80020a4 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <HAL_GPIO_Init+0x2cc>)
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	3301      	adds	r3, #1
 80020ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	40da      	lsrs	r2, r3
 80020b8:	1e13      	subs	r3, r2, #0
 80020ba:	d000      	beq.n	80020be <HAL_GPIO_Init+0x2b2>
 80020bc:	e6ae      	b.n	8001e1c <HAL_GPIO_Init+0x10>
  } 
}
 80020be:	46c0      	nop			; (mov r8, r8)
 80020c0:	46c0      	nop			; (mov r8, r8)
 80020c2:	46bd      	mov	sp, r7
 80020c4:	b006      	add	sp, #24
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40010000 	.word	0x40010000
 80020d0:	48000400 	.word	0x48000400
 80020d4:	48000800 	.word	0x48000800
 80020d8:	40010400 	.word	0x40010400

080020dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b088      	sub	sp, #32
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d102      	bne.n	80020f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	f000 fb76 	bl	80027dc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2201      	movs	r2, #1
 80020f6:	4013      	ands	r3, r2
 80020f8:	d100      	bne.n	80020fc <HAL_RCC_OscConfig+0x20>
 80020fa:	e08e      	b.n	800221a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80020fc:	4bc5      	ldr	r3, [pc, #788]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	220c      	movs	r2, #12
 8002102:	4013      	ands	r3, r2
 8002104:	2b04      	cmp	r3, #4
 8002106:	d00e      	beq.n	8002126 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002108:	4bc2      	ldr	r3, [pc, #776]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	220c      	movs	r2, #12
 800210e:	4013      	ands	r3, r2
 8002110:	2b08      	cmp	r3, #8
 8002112:	d117      	bne.n	8002144 <HAL_RCC_OscConfig+0x68>
 8002114:	4bbf      	ldr	r3, [pc, #764]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	23c0      	movs	r3, #192	; 0xc0
 800211a:	025b      	lsls	r3, r3, #9
 800211c:	401a      	ands	r2, r3
 800211e:	2380      	movs	r3, #128	; 0x80
 8002120:	025b      	lsls	r3, r3, #9
 8002122:	429a      	cmp	r2, r3
 8002124:	d10e      	bne.n	8002144 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002126:	4bbb      	ldr	r3, [pc, #748]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	2380      	movs	r3, #128	; 0x80
 800212c:	029b      	lsls	r3, r3, #10
 800212e:	4013      	ands	r3, r2
 8002130:	d100      	bne.n	8002134 <HAL_RCC_OscConfig+0x58>
 8002132:	e071      	b.n	8002218 <HAL_RCC_OscConfig+0x13c>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d000      	beq.n	800213e <HAL_RCC_OscConfig+0x62>
 800213c:	e06c      	b.n	8002218 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	f000 fb4c 	bl	80027dc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d107      	bne.n	800215c <HAL_RCC_OscConfig+0x80>
 800214c:	4bb1      	ldr	r3, [pc, #708]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4bb0      	ldr	r3, [pc, #704]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 8002152:	2180      	movs	r1, #128	; 0x80
 8002154:	0249      	lsls	r1, r1, #9
 8002156:	430a      	orrs	r2, r1
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	e02f      	b.n	80021bc <HAL_RCC_OscConfig+0xe0>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10c      	bne.n	800217e <HAL_RCC_OscConfig+0xa2>
 8002164:	4bab      	ldr	r3, [pc, #684]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4baa      	ldr	r3, [pc, #680]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 800216a:	49ab      	ldr	r1, [pc, #684]	; (8002418 <HAL_RCC_OscConfig+0x33c>)
 800216c:	400a      	ands	r2, r1
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	4ba8      	ldr	r3, [pc, #672]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4ba7      	ldr	r3, [pc, #668]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 8002176:	49a9      	ldr	r1, [pc, #676]	; (800241c <HAL_RCC_OscConfig+0x340>)
 8002178:	400a      	ands	r2, r1
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	e01e      	b.n	80021bc <HAL_RCC_OscConfig+0xe0>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b05      	cmp	r3, #5
 8002184:	d10e      	bne.n	80021a4 <HAL_RCC_OscConfig+0xc8>
 8002186:	4ba3      	ldr	r3, [pc, #652]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	4ba2      	ldr	r3, [pc, #648]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 800218c:	2180      	movs	r1, #128	; 0x80
 800218e:	02c9      	lsls	r1, r1, #11
 8002190:	430a      	orrs	r2, r1
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	4b9f      	ldr	r3, [pc, #636]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	4b9e      	ldr	r3, [pc, #632]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 800219a:	2180      	movs	r1, #128	; 0x80
 800219c:	0249      	lsls	r1, r1, #9
 800219e:	430a      	orrs	r2, r1
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	e00b      	b.n	80021bc <HAL_RCC_OscConfig+0xe0>
 80021a4:	4b9b      	ldr	r3, [pc, #620]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4b9a      	ldr	r3, [pc, #616]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 80021aa:	499b      	ldr	r1, [pc, #620]	; (8002418 <HAL_RCC_OscConfig+0x33c>)
 80021ac:	400a      	ands	r2, r1
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	4b98      	ldr	r3, [pc, #608]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	4b97      	ldr	r3, [pc, #604]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 80021b6:	4999      	ldr	r1, [pc, #612]	; (800241c <HAL_RCC_OscConfig+0x340>)
 80021b8:	400a      	ands	r2, r1
 80021ba:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d014      	beq.n	80021ee <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c4:	f7ff f94c 	bl	8001460 <HAL_GetTick>
 80021c8:	0003      	movs	r3, r0
 80021ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021ce:	f7ff f947 	bl	8001460 <HAL_GetTick>
 80021d2:	0002      	movs	r2, r0
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b64      	cmp	r3, #100	; 0x64
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e2fd      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e0:	4b8c      	ldr	r3, [pc, #560]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	2380      	movs	r3, #128	; 0x80
 80021e6:	029b      	lsls	r3, r3, #10
 80021e8:	4013      	ands	r3, r2
 80021ea:	d0f0      	beq.n	80021ce <HAL_RCC_OscConfig+0xf2>
 80021ec:	e015      	b.n	800221a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ee:	f7ff f937 	bl	8001460 <HAL_GetTick>
 80021f2:	0003      	movs	r3, r0
 80021f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021f8:	f7ff f932 	bl	8001460 <HAL_GetTick>
 80021fc:	0002      	movs	r2, r0
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b64      	cmp	r3, #100	; 0x64
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e2e8      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800220a:	4b82      	ldr	r3, [pc, #520]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	2380      	movs	r3, #128	; 0x80
 8002210:	029b      	lsls	r3, r3, #10
 8002212:	4013      	ands	r3, r2
 8002214:	d1f0      	bne.n	80021f8 <HAL_RCC_OscConfig+0x11c>
 8002216:	e000      	b.n	800221a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002218:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2202      	movs	r2, #2
 8002220:	4013      	ands	r3, r2
 8002222:	d100      	bne.n	8002226 <HAL_RCC_OscConfig+0x14a>
 8002224:	e06c      	b.n	8002300 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002226:	4b7b      	ldr	r3, [pc, #492]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	220c      	movs	r2, #12
 800222c:	4013      	ands	r3, r2
 800222e:	d00e      	beq.n	800224e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002230:	4b78      	ldr	r3, [pc, #480]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	220c      	movs	r2, #12
 8002236:	4013      	ands	r3, r2
 8002238:	2b08      	cmp	r3, #8
 800223a:	d11f      	bne.n	800227c <HAL_RCC_OscConfig+0x1a0>
 800223c:	4b75      	ldr	r3, [pc, #468]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	23c0      	movs	r3, #192	; 0xc0
 8002242:	025b      	lsls	r3, r3, #9
 8002244:	401a      	ands	r2, r3
 8002246:	2380      	movs	r3, #128	; 0x80
 8002248:	021b      	lsls	r3, r3, #8
 800224a:	429a      	cmp	r2, r3
 800224c:	d116      	bne.n	800227c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800224e:	4b71      	ldr	r3, [pc, #452]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2202      	movs	r2, #2
 8002254:	4013      	ands	r3, r2
 8002256:	d005      	beq.n	8002264 <HAL_RCC_OscConfig+0x188>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d001      	beq.n	8002264 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e2bb      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002264:	4b6b      	ldr	r3, [pc, #428]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	22f8      	movs	r2, #248	; 0xf8
 800226a:	4393      	bics	r3, r2
 800226c:	0019      	movs	r1, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	00da      	lsls	r2, r3, #3
 8002274:	4b67      	ldr	r3, [pc, #412]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 8002276:	430a      	orrs	r2, r1
 8002278:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800227a:	e041      	b.n	8002300 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d024      	beq.n	80022ce <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002284:	4b63      	ldr	r3, [pc, #396]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b62      	ldr	r3, [pc, #392]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 800228a:	2101      	movs	r1, #1
 800228c:	430a      	orrs	r2, r1
 800228e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002290:	f7ff f8e6 	bl	8001460 <HAL_GetTick>
 8002294:	0003      	movs	r3, r0
 8002296:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800229a:	f7ff f8e1 	bl	8001460 <HAL_GetTick>
 800229e:	0002      	movs	r2, r0
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e297      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ac:	4b59      	ldr	r3, [pc, #356]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2202      	movs	r2, #2
 80022b2:	4013      	ands	r3, r2
 80022b4:	d0f1      	beq.n	800229a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b6:	4b57      	ldr	r3, [pc, #348]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	22f8      	movs	r2, #248	; 0xf8
 80022bc:	4393      	bics	r3, r2
 80022be:	0019      	movs	r1, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	00da      	lsls	r2, r3, #3
 80022c6:	4b53      	ldr	r3, [pc, #332]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 80022c8:	430a      	orrs	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	e018      	b.n	8002300 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ce:	4b51      	ldr	r3, [pc, #324]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	4b50      	ldr	r3, [pc, #320]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 80022d4:	2101      	movs	r1, #1
 80022d6:	438a      	bics	r2, r1
 80022d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022da:	f7ff f8c1 	bl	8001460 <HAL_GetTick>
 80022de:	0003      	movs	r3, r0
 80022e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022e4:	f7ff f8bc 	bl	8001460 <HAL_GetTick>
 80022e8:	0002      	movs	r2, r0
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e272      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022f6:	4b47      	ldr	r3, [pc, #284]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2202      	movs	r2, #2
 80022fc:	4013      	ands	r3, r2
 80022fe:	d1f1      	bne.n	80022e4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2208      	movs	r2, #8
 8002306:	4013      	ands	r3, r2
 8002308:	d036      	beq.n	8002378 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d019      	beq.n	8002346 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002312:	4b40      	ldr	r3, [pc, #256]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 8002314:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002316:	4b3f      	ldr	r3, [pc, #252]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 8002318:	2101      	movs	r1, #1
 800231a:	430a      	orrs	r2, r1
 800231c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231e:	f7ff f89f 	bl	8001460 <HAL_GetTick>
 8002322:	0003      	movs	r3, r0
 8002324:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002328:	f7ff f89a 	bl	8001460 <HAL_GetTick>
 800232c:	0002      	movs	r2, r0
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e250      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800233a:	4b36      	ldr	r3, [pc, #216]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	2202      	movs	r2, #2
 8002340:	4013      	ands	r3, r2
 8002342:	d0f1      	beq.n	8002328 <HAL_RCC_OscConfig+0x24c>
 8002344:	e018      	b.n	8002378 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002346:	4b33      	ldr	r3, [pc, #204]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 8002348:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800234a:	4b32      	ldr	r3, [pc, #200]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 800234c:	2101      	movs	r1, #1
 800234e:	438a      	bics	r2, r1
 8002350:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002352:	f7ff f885 	bl	8001460 <HAL_GetTick>
 8002356:	0003      	movs	r3, r0
 8002358:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800235c:	f7ff f880 	bl	8001460 <HAL_GetTick>
 8002360:	0002      	movs	r2, r0
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e236      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800236e:	4b29      	ldr	r3, [pc, #164]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	2202      	movs	r2, #2
 8002374:	4013      	ands	r3, r2
 8002376:	d1f1      	bne.n	800235c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2204      	movs	r2, #4
 800237e:	4013      	ands	r3, r2
 8002380:	d100      	bne.n	8002384 <HAL_RCC_OscConfig+0x2a8>
 8002382:	e0b5      	b.n	80024f0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002384:	201f      	movs	r0, #31
 8002386:	183b      	adds	r3, r7, r0
 8002388:	2200      	movs	r2, #0
 800238a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800238c:	4b21      	ldr	r3, [pc, #132]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 800238e:	69da      	ldr	r2, [r3, #28]
 8002390:	2380      	movs	r3, #128	; 0x80
 8002392:	055b      	lsls	r3, r3, #21
 8002394:	4013      	ands	r3, r2
 8002396:	d110      	bne.n	80023ba <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002398:	4b1e      	ldr	r3, [pc, #120]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 800239a:	69da      	ldr	r2, [r3, #28]
 800239c:	4b1d      	ldr	r3, [pc, #116]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 800239e:	2180      	movs	r1, #128	; 0x80
 80023a0:	0549      	lsls	r1, r1, #21
 80023a2:	430a      	orrs	r2, r1
 80023a4:	61da      	str	r2, [r3, #28]
 80023a6:	4b1b      	ldr	r3, [pc, #108]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 80023a8:	69da      	ldr	r2, [r3, #28]
 80023aa:	2380      	movs	r3, #128	; 0x80
 80023ac:	055b      	lsls	r3, r3, #21
 80023ae:	4013      	ands	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80023b4:	183b      	adds	r3, r7, r0
 80023b6:	2201      	movs	r2, #1
 80023b8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ba:	4b19      	ldr	r3, [pc, #100]	; (8002420 <HAL_RCC_OscConfig+0x344>)
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	2380      	movs	r3, #128	; 0x80
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	4013      	ands	r3, r2
 80023c4:	d11a      	bne.n	80023fc <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023c6:	4b16      	ldr	r3, [pc, #88]	; (8002420 <HAL_RCC_OscConfig+0x344>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	4b15      	ldr	r3, [pc, #84]	; (8002420 <HAL_RCC_OscConfig+0x344>)
 80023cc:	2180      	movs	r1, #128	; 0x80
 80023ce:	0049      	lsls	r1, r1, #1
 80023d0:	430a      	orrs	r2, r1
 80023d2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023d4:	f7ff f844 	bl	8001460 <HAL_GetTick>
 80023d8:	0003      	movs	r3, r0
 80023da:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023de:	f7ff f83f 	bl	8001460 <HAL_GetTick>
 80023e2:	0002      	movs	r2, r0
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b64      	cmp	r3, #100	; 0x64
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e1f5      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f0:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <HAL_RCC_OscConfig+0x344>)
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	2380      	movs	r3, #128	; 0x80
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	4013      	ands	r3, r2
 80023fa:	d0f0      	beq.n	80023de <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d10f      	bne.n	8002424 <HAL_RCC_OscConfig+0x348>
 8002404:	4b03      	ldr	r3, [pc, #12]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 8002406:	6a1a      	ldr	r2, [r3, #32]
 8002408:	4b02      	ldr	r3, [pc, #8]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 800240a:	2101      	movs	r1, #1
 800240c:	430a      	orrs	r2, r1
 800240e:	621a      	str	r2, [r3, #32]
 8002410:	e036      	b.n	8002480 <HAL_RCC_OscConfig+0x3a4>
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	40021000 	.word	0x40021000
 8002418:	fffeffff 	.word	0xfffeffff
 800241c:	fffbffff 	.word	0xfffbffff
 8002420:	40007000 	.word	0x40007000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10c      	bne.n	8002446 <HAL_RCC_OscConfig+0x36a>
 800242c:	4bca      	ldr	r3, [pc, #808]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 800242e:	6a1a      	ldr	r2, [r3, #32]
 8002430:	4bc9      	ldr	r3, [pc, #804]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002432:	2101      	movs	r1, #1
 8002434:	438a      	bics	r2, r1
 8002436:	621a      	str	r2, [r3, #32]
 8002438:	4bc7      	ldr	r3, [pc, #796]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 800243a:	6a1a      	ldr	r2, [r3, #32]
 800243c:	4bc6      	ldr	r3, [pc, #792]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 800243e:	2104      	movs	r1, #4
 8002440:	438a      	bics	r2, r1
 8002442:	621a      	str	r2, [r3, #32]
 8002444:	e01c      	b.n	8002480 <HAL_RCC_OscConfig+0x3a4>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	2b05      	cmp	r3, #5
 800244c:	d10c      	bne.n	8002468 <HAL_RCC_OscConfig+0x38c>
 800244e:	4bc2      	ldr	r3, [pc, #776]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002450:	6a1a      	ldr	r2, [r3, #32]
 8002452:	4bc1      	ldr	r3, [pc, #772]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002454:	2104      	movs	r1, #4
 8002456:	430a      	orrs	r2, r1
 8002458:	621a      	str	r2, [r3, #32]
 800245a:	4bbf      	ldr	r3, [pc, #764]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 800245c:	6a1a      	ldr	r2, [r3, #32]
 800245e:	4bbe      	ldr	r3, [pc, #760]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002460:	2101      	movs	r1, #1
 8002462:	430a      	orrs	r2, r1
 8002464:	621a      	str	r2, [r3, #32]
 8002466:	e00b      	b.n	8002480 <HAL_RCC_OscConfig+0x3a4>
 8002468:	4bbb      	ldr	r3, [pc, #748]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 800246a:	6a1a      	ldr	r2, [r3, #32]
 800246c:	4bba      	ldr	r3, [pc, #744]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 800246e:	2101      	movs	r1, #1
 8002470:	438a      	bics	r2, r1
 8002472:	621a      	str	r2, [r3, #32]
 8002474:	4bb8      	ldr	r3, [pc, #736]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002476:	6a1a      	ldr	r2, [r3, #32]
 8002478:	4bb7      	ldr	r3, [pc, #732]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 800247a:	2104      	movs	r1, #4
 800247c:	438a      	bics	r2, r1
 800247e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d014      	beq.n	80024b2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002488:	f7fe ffea 	bl	8001460 <HAL_GetTick>
 800248c:	0003      	movs	r3, r0
 800248e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002490:	e009      	b.n	80024a6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002492:	f7fe ffe5 	bl	8001460 <HAL_GetTick>
 8002496:	0002      	movs	r2, r0
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	4aaf      	ldr	r2, [pc, #700]	; (800275c <HAL_RCC_OscConfig+0x680>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e19a      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a6:	4bac      	ldr	r3, [pc, #688]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	2202      	movs	r2, #2
 80024ac:	4013      	ands	r3, r2
 80024ae:	d0f0      	beq.n	8002492 <HAL_RCC_OscConfig+0x3b6>
 80024b0:	e013      	b.n	80024da <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b2:	f7fe ffd5 	bl	8001460 <HAL_GetTick>
 80024b6:	0003      	movs	r3, r0
 80024b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ba:	e009      	b.n	80024d0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024bc:	f7fe ffd0 	bl	8001460 <HAL_GetTick>
 80024c0:	0002      	movs	r2, r0
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	4aa5      	ldr	r2, [pc, #660]	; (800275c <HAL_RCC_OscConfig+0x680>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e185      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d0:	4ba1      	ldr	r3, [pc, #644]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	2202      	movs	r2, #2
 80024d6:	4013      	ands	r3, r2
 80024d8:	d1f0      	bne.n	80024bc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024da:	231f      	movs	r3, #31
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d105      	bne.n	80024f0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024e4:	4b9c      	ldr	r3, [pc, #624]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 80024e6:	69da      	ldr	r2, [r3, #28]
 80024e8:	4b9b      	ldr	r3, [pc, #620]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 80024ea:	499d      	ldr	r1, [pc, #628]	; (8002760 <HAL_RCC_OscConfig+0x684>)
 80024ec:	400a      	ands	r2, r1
 80024ee:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2210      	movs	r2, #16
 80024f6:	4013      	ands	r3, r2
 80024f8:	d063      	beq.n	80025c2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d12a      	bne.n	8002558 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002502:	4b95      	ldr	r3, [pc, #596]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002506:	4b94      	ldr	r3, [pc, #592]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002508:	2104      	movs	r1, #4
 800250a:	430a      	orrs	r2, r1
 800250c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800250e:	4b92      	ldr	r3, [pc, #584]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002510:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002512:	4b91      	ldr	r3, [pc, #580]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002514:	2101      	movs	r1, #1
 8002516:	430a      	orrs	r2, r1
 8002518:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251a:	f7fe ffa1 	bl	8001460 <HAL_GetTick>
 800251e:	0003      	movs	r3, r0
 8002520:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002524:	f7fe ff9c 	bl	8001460 <HAL_GetTick>
 8002528:	0002      	movs	r2, r0
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e152      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002536:	4b88      	ldr	r3, [pc, #544]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800253a:	2202      	movs	r2, #2
 800253c:	4013      	ands	r3, r2
 800253e:	d0f1      	beq.n	8002524 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002540:	4b85      	ldr	r3, [pc, #532]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002544:	22f8      	movs	r2, #248	; 0xf8
 8002546:	4393      	bics	r3, r2
 8002548:	0019      	movs	r1, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	00da      	lsls	r2, r3, #3
 8002550:	4b81      	ldr	r3, [pc, #516]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002552:	430a      	orrs	r2, r1
 8002554:	635a      	str	r2, [r3, #52]	; 0x34
 8002556:	e034      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	3305      	adds	r3, #5
 800255e:	d111      	bne.n	8002584 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002560:	4b7d      	ldr	r3, [pc, #500]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002562:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002564:	4b7c      	ldr	r3, [pc, #496]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002566:	2104      	movs	r1, #4
 8002568:	438a      	bics	r2, r1
 800256a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800256c:	4b7a      	ldr	r3, [pc, #488]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 800256e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002570:	22f8      	movs	r2, #248	; 0xf8
 8002572:	4393      	bics	r3, r2
 8002574:	0019      	movs	r1, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	00da      	lsls	r2, r3, #3
 800257c:	4b76      	ldr	r3, [pc, #472]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 800257e:	430a      	orrs	r2, r1
 8002580:	635a      	str	r2, [r3, #52]	; 0x34
 8002582:	e01e      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002584:	4b74      	ldr	r3, [pc, #464]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002586:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002588:	4b73      	ldr	r3, [pc, #460]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 800258a:	2104      	movs	r1, #4
 800258c:	430a      	orrs	r2, r1
 800258e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002590:	4b71      	ldr	r3, [pc, #452]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002592:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002594:	4b70      	ldr	r3, [pc, #448]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002596:	2101      	movs	r1, #1
 8002598:	438a      	bics	r2, r1
 800259a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259c:	f7fe ff60 	bl	8001460 <HAL_GetTick>
 80025a0:	0003      	movs	r3, r0
 80025a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80025a6:	f7fe ff5b 	bl	8001460 <HAL_GetTick>
 80025aa:	0002      	movs	r2, r0
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e111      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80025b8:	4b67      	ldr	r3, [pc, #412]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 80025ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025bc:	2202      	movs	r2, #2
 80025be:	4013      	ands	r3, r2
 80025c0:	d1f1      	bne.n	80025a6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2220      	movs	r2, #32
 80025c8:	4013      	ands	r3, r2
 80025ca:	d05c      	beq.n	8002686 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80025cc:	4b62      	ldr	r3, [pc, #392]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	220c      	movs	r2, #12
 80025d2:	4013      	ands	r3, r2
 80025d4:	2b0c      	cmp	r3, #12
 80025d6:	d00e      	beq.n	80025f6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80025d8:	4b5f      	ldr	r3, [pc, #380]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	220c      	movs	r2, #12
 80025de:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80025e0:	2b08      	cmp	r3, #8
 80025e2:	d114      	bne.n	800260e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80025e4:	4b5c      	ldr	r3, [pc, #368]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	23c0      	movs	r3, #192	; 0xc0
 80025ea:	025b      	lsls	r3, r3, #9
 80025ec:	401a      	ands	r2, r3
 80025ee:	23c0      	movs	r3, #192	; 0xc0
 80025f0:	025b      	lsls	r3, r3, #9
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d10b      	bne.n	800260e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80025f6:	4b58      	ldr	r3, [pc, #352]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 80025f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025fa:	2380      	movs	r3, #128	; 0x80
 80025fc:	029b      	lsls	r3, r3, #10
 80025fe:	4013      	ands	r3, r2
 8002600:	d040      	beq.n	8002684 <HAL_RCC_OscConfig+0x5a8>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d03c      	beq.n	8002684 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e0e6      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d01b      	beq.n	800264e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002616:	4b50      	ldr	r3, [pc, #320]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002618:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800261a:	4b4f      	ldr	r3, [pc, #316]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 800261c:	2180      	movs	r1, #128	; 0x80
 800261e:	0249      	lsls	r1, r1, #9
 8002620:	430a      	orrs	r2, r1
 8002622:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002624:	f7fe ff1c 	bl	8001460 <HAL_GetTick>
 8002628:	0003      	movs	r3, r0
 800262a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800262e:	f7fe ff17 	bl	8001460 <HAL_GetTick>
 8002632:	0002      	movs	r2, r0
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e0cd      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002640:	4b45      	ldr	r3, [pc, #276]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002642:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002644:	2380      	movs	r3, #128	; 0x80
 8002646:	029b      	lsls	r3, r3, #10
 8002648:	4013      	ands	r3, r2
 800264a:	d0f0      	beq.n	800262e <HAL_RCC_OscConfig+0x552>
 800264c:	e01b      	b.n	8002686 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800264e:	4b42      	ldr	r3, [pc, #264]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002650:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002652:	4b41      	ldr	r3, [pc, #260]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002654:	4943      	ldr	r1, [pc, #268]	; (8002764 <HAL_RCC_OscConfig+0x688>)
 8002656:	400a      	ands	r2, r1
 8002658:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265a:	f7fe ff01 	bl	8001460 <HAL_GetTick>
 800265e:	0003      	movs	r3, r0
 8002660:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002664:	f7fe fefc 	bl	8001460 <HAL_GetTick>
 8002668:	0002      	movs	r2, r0
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e0b2      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002676:	4b38      	ldr	r3, [pc, #224]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800267a:	2380      	movs	r3, #128	; 0x80
 800267c:	029b      	lsls	r3, r3, #10
 800267e:	4013      	ands	r3, r2
 8002680:	d1f0      	bne.n	8002664 <HAL_RCC_OscConfig+0x588>
 8002682:	e000      	b.n	8002686 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002684:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268a:	2b00      	cmp	r3, #0
 800268c:	d100      	bne.n	8002690 <HAL_RCC_OscConfig+0x5b4>
 800268e:	e0a4      	b.n	80027da <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002690:	4b31      	ldr	r3, [pc, #196]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	220c      	movs	r2, #12
 8002696:	4013      	ands	r3, r2
 8002698:	2b08      	cmp	r3, #8
 800269a:	d100      	bne.n	800269e <HAL_RCC_OscConfig+0x5c2>
 800269c:	e078      	b.n	8002790 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d14c      	bne.n	8002740 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a6:	4b2c      	ldr	r3, [pc, #176]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	4b2b      	ldr	r3, [pc, #172]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 80026ac:	492e      	ldr	r1, [pc, #184]	; (8002768 <HAL_RCC_OscConfig+0x68c>)
 80026ae:	400a      	ands	r2, r1
 80026b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b2:	f7fe fed5 	bl	8001460 <HAL_GetTick>
 80026b6:	0003      	movs	r3, r0
 80026b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026bc:	f7fe fed0 	bl	8001460 <HAL_GetTick>
 80026c0:	0002      	movs	r2, r0
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e086      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ce:	4b22      	ldr	r3, [pc, #136]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	2380      	movs	r3, #128	; 0x80
 80026d4:	049b      	lsls	r3, r3, #18
 80026d6:	4013      	ands	r3, r2
 80026d8:	d1f0      	bne.n	80026bc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026da:	4b1f      	ldr	r3, [pc, #124]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 80026dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026de:	220f      	movs	r2, #15
 80026e0:	4393      	bics	r3, r2
 80026e2:	0019      	movs	r1, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026e8:	4b1b      	ldr	r3, [pc, #108]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 80026ea:	430a      	orrs	r2, r1
 80026ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80026ee:	4b1a      	ldr	r3, [pc, #104]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	4a1e      	ldr	r2, [pc, #120]	; (800276c <HAL_RCC_OscConfig+0x690>)
 80026f4:	4013      	ands	r3, r2
 80026f6:	0019      	movs	r1, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002700:	431a      	orrs	r2, r3
 8002702:	4b15      	ldr	r3, [pc, #84]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002704:	430a      	orrs	r2, r1
 8002706:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002708:	4b13      	ldr	r3, [pc, #76]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	4b12      	ldr	r3, [pc, #72]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 800270e:	2180      	movs	r1, #128	; 0x80
 8002710:	0449      	lsls	r1, r1, #17
 8002712:	430a      	orrs	r2, r1
 8002714:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002716:	f7fe fea3 	bl	8001460 <HAL_GetTick>
 800271a:	0003      	movs	r3, r0
 800271c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002720:	f7fe fe9e 	bl	8001460 <HAL_GetTick>
 8002724:	0002      	movs	r2, r0
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e054      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002732:	4b09      	ldr	r3, [pc, #36]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	2380      	movs	r3, #128	; 0x80
 8002738:	049b      	lsls	r3, r3, #18
 800273a:	4013      	ands	r3, r2
 800273c:	d0f0      	beq.n	8002720 <HAL_RCC_OscConfig+0x644>
 800273e:	e04c      	b.n	80027da <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002740:	4b05      	ldr	r3, [pc, #20]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	4b04      	ldr	r3, [pc, #16]	; (8002758 <HAL_RCC_OscConfig+0x67c>)
 8002746:	4908      	ldr	r1, [pc, #32]	; (8002768 <HAL_RCC_OscConfig+0x68c>)
 8002748:	400a      	ands	r2, r1
 800274a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274c:	f7fe fe88 	bl	8001460 <HAL_GetTick>
 8002750:	0003      	movs	r3, r0
 8002752:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002754:	e015      	b.n	8002782 <HAL_RCC_OscConfig+0x6a6>
 8002756:	46c0      	nop			; (mov r8, r8)
 8002758:	40021000 	.word	0x40021000
 800275c:	00001388 	.word	0x00001388
 8002760:	efffffff 	.word	0xefffffff
 8002764:	fffeffff 	.word	0xfffeffff
 8002768:	feffffff 	.word	0xfeffffff
 800276c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002770:	f7fe fe76 	bl	8001460 <HAL_GetTick>
 8002774:	0002      	movs	r2, r0
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e02c      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002782:	4b18      	ldr	r3, [pc, #96]	; (80027e4 <HAL_RCC_OscConfig+0x708>)
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	2380      	movs	r3, #128	; 0x80
 8002788:	049b      	lsls	r3, r3, #18
 800278a:	4013      	ands	r3, r2
 800278c:	d1f0      	bne.n	8002770 <HAL_RCC_OscConfig+0x694>
 800278e:	e024      	b.n	80027da <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	2b01      	cmp	r3, #1
 8002796:	d101      	bne.n	800279c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e01f      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800279c:	4b11      	ldr	r3, [pc, #68]	; (80027e4 <HAL_RCC_OscConfig+0x708>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80027a2:	4b10      	ldr	r3, [pc, #64]	; (80027e4 <HAL_RCC_OscConfig+0x708>)
 80027a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	23c0      	movs	r3, #192	; 0xc0
 80027ac:	025b      	lsls	r3, r3, #9
 80027ae:	401a      	ands	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d10e      	bne.n	80027d6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	220f      	movs	r2, #15
 80027bc:	401a      	ands	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d107      	bne.n	80027d6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	23f0      	movs	r3, #240	; 0xf0
 80027ca:	039b      	lsls	r3, r3, #14
 80027cc:	401a      	ands	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d001      	beq.n	80027da <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	0018      	movs	r0, r3
 80027de:	46bd      	mov	sp, r7
 80027e0:	b008      	add	sp, #32
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40021000 	.word	0x40021000

080027e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e0bf      	b.n	800297c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027fc:	4b61      	ldr	r3, [pc, #388]	; (8002984 <HAL_RCC_ClockConfig+0x19c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2201      	movs	r2, #1
 8002802:	4013      	ands	r3, r2
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d911      	bls.n	800282e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280a:	4b5e      	ldr	r3, [pc, #376]	; (8002984 <HAL_RCC_ClockConfig+0x19c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2201      	movs	r2, #1
 8002810:	4393      	bics	r3, r2
 8002812:	0019      	movs	r1, r3
 8002814:	4b5b      	ldr	r3, [pc, #364]	; (8002984 <HAL_RCC_ClockConfig+0x19c>)
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800281c:	4b59      	ldr	r3, [pc, #356]	; (8002984 <HAL_RCC_ClockConfig+0x19c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2201      	movs	r2, #1
 8002822:	4013      	ands	r3, r2
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d001      	beq.n	800282e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e0a6      	b.n	800297c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2202      	movs	r2, #2
 8002834:	4013      	ands	r3, r2
 8002836:	d015      	beq.n	8002864 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2204      	movs	r2, #4
 800283e:	4013      	ands	r3, r2
 8002840:	d006      	beq.n	8002850 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002842:	4b51      	ldr	r3, [pc, #324]	; (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	4b50      	ldr	r3, [pc, #320]	; (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 8002848:	21e0      	movs	r1, #224	; 0xe0
 800284a:	00c9      	lsls	r1, r1, #3
 800284c:	430a      	orrs	r2, r1
 800284e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002850:	4b4d      	ldr	r3, [pc, #308]	; (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	22f0      	movs	r2, #240	; 0xf0
 8002856:	4393      	bics	r3, r2
 8002858:	0019      	movs	r1, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	4b4a      	ldr	r3, [pc, #296]	; (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 8002860:	430a      	orrs	r2, r1
 8002862:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2201      	movs	r2, #1
 800286a:	4013      	ands	r3, r2
 800286c:	d04c      	beq.n	8002908 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d107      	bne.n	8002886 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002876:	4b44      	ldr	r3, [pc, #272]	; (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	2380      	movs	r3, #128	; 0x80
 800287c:	029b      	lsls	r3, r3, #10
 800287e:	4013      	ands	r3, r2
 8002880:	d120      	bne.n	80028c4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e07a      	b.n	800297c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d107      	bne.n	800289e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800288e:	4b3e      	ldr	r3, [pc, #248]	; (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	2380      	movs	r3, #128	; 0x80
 8002894:	049b      	lsls	r3, r3, #18
 8002896:	4013      	ands	r3, r2
 8002898:	d114      	bne.n	80028c4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e06e      	b.n	800297c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	d107      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80028a6:	4b38      	ldr	r3, [pc, #224]	; (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 80028a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028aa:	2380      	movs	r3, #128	; 0x80
 80028ac:	029b      	lsls	r3, r3, #10
 80028ae:	4013      	ands	r3, r2
 80028b0:	d108      	bne.n	80028c4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e062      	b.n	800297c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b6:	4b34      	ldr	r3, [pc, #208]	; (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2202      	movs	r2, #2
 80028bc:	4013      	ands	r3, r2
 80028be:	d101      	bne.n	80028c4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e05b      	b.n	800297c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028c4:	4b30      	ldr	r3, [pc, #192]	; (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2203      	movs	r2, #3
 80028ca:	4393      	bics	r3, r2
 80028cc:	0019      	movs	r1, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685a      	ldr	r2, [r3, #4]
 80028d2:	4b2d      	ldr	r3, [pc, #180]	; (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 80028d4:	430a      	orrs	r2, r1
 80028d6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028d8:	f7fe fdc2 	bl	8001460 <HAL_GetTick>
 80028dc:	0003      	movs	r3, r0
 80028de:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e0:	e009      	b.n	80028f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e2:	f7fe fdbd 	bl	8001460 <HAL_GetTick>
 80028e6:	0002      	movs	r2, r0
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	4a27      	ldr	r2, [pc, #156]	; (800298c <HAL_RCC_ClockConfig+0x1a4>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e042      	b.n	800297c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f6:	4b24      	ldr	r3, [pc, #144]	; (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	220c      	movs	r2, #12
 80028fc:	401a      	ands	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	429a      	cmp	r2, r3
 8002906:	d1ec      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002908:	4b1e      	ldr	r3, [pc, #120]	; (8002984 <HAL_RCC_ClockConfig+0x19c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2201      	movs	r2, #1
 800290e:	4013      	ands	r3, r2
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d211      	bcs.n	800293a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002916:	4b1b      	ldr	r3, [pc, #108]	; (8002984 <HAL_RCC_ClockConfig+0x19c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2201      	movs	r2, #1
 800291c:	4393      	bics	r3, r2
 800291e:	0019      	movs	r1, r3
 8002920:	4b18      	ldr	r3, [pc, #96]	; (8002984 <HAL_RCC_ClockConfig+0x19c>)
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002928:	4b16      	ldr	r3, [pc, #88]	; (8002984 <HAL_RCC_ClockConfig+0x19c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2201      	movs	r2, #1
 800292e:	4013      	ands	r3, r2
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d001      	beq.n	800293a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e020      	b.n	800297c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2204      	movs	r2, #4
 8002940:	4013      	ands	r3, r2
 8002942:	d009      	beq.n	8002958 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002944:	4b10      	ldr	r3, [pc, #64]	; (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	4a11      	ldr	r2, [pc, #68]	; (8002990 <HAL_RCC_ClockConfig+0x1a8>)
 800294a:	4013      	ands	r3, r2
 800294c:	0019      	movs	r1, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	4b0d      	ldr	r3, [pc, #52]	; (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 8002954:	430a      	orrs	r2, r1
 8002956:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002958:	f000 f820 	bl	800299c <HAL_RCC_GetSysClockFreq>
 800295c:	0001      	movs	r1, r0
 800295e:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <HAL_RCC_ClockConfig+0x1a0>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	091b      	lsrs	r3, r3, #4
 8002964:	220f      	movs	r2, #15
 8002966:	4013      	ands	r3, r2
 8002968:	4a0a      	ldr	r2, [pc, #40]	; (8002994 <HAL_RCC_ClockConfig+0x1ac>)
 800296a:	5cd3      	ldrb	r3, [r2, r3]
 800296c:	000a      	movs	r2, r1
 800296e:	40da      	lsrs	r2, r3
 8002970:	4b09      	ldr	r3, [pc, #36]	; (8002998 <HAL_RCC_ClockConfig+0x1b0>)
 8002972:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002974:	2003      	movs	r0, #3
 8002976:	f7fe fd2d 	bl	80013d4 <HAL_InitTick>
  
  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	0018      	movs	r0, r3
 800297e:	46bd      	mov	sp, r7
 8002980:	b004      	add	sp, #16
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40022000 	.word	0x40022000
 8002988:	40021000 	.word	0x40021000
 800298c:	00001388 	.word	0x00001388
 8002990:	fffff8ff 	.word	0xfffff8ff
 8002994:	08005bc0 	.word	0x08005bc0
 8002998:	20000000 	.word	0x20000000

0800299c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	2300      	movs	r3, #0
 80029a8:	60bb      	str	r3, [r7, #8]
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	2300      	movs	r3, #0
 80029b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80029b6:	4b2d      	ldr	r3, [pc, #180]	; (8002a6c <HAL_RCC_GetSysClockFreq+0xd0>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	220c      	movs	r2, #12
 80029c0:	4013      	ands	r3, r2
 80029c2:	2b0c      	cmp	r3, #12
 80029c4:	d046      	beq.n	8002a54 <HAL_RCC_GetSysClockFreq+0xb8>
 80029c6:	d848      	bhi.n	8002a5a <HAL_RCC_GetSysClockFreq+0xbe>
 80029c8:	2b04      	cmp	r3, #4
 80029ca:	d002      	beq.n	80029d2 <HAL_RCC_GetSysClockFreq+0x36>
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d003      	beq.n	80029d8 <HAL_RCC_GetSysClockFreq+0x3c>
 80029d0:	e043      	b.n	8002a5a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029d2:	4b27      	ldr	r3, [pc, #156]	; (8002a70 <HAL_RCC_GetSysClockFreq+0xd4>)
 80029d4:	613b      	str	r3, [r7, #16]
      break;
 80029d6:	e043      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	0c9b      	lsrs	r3, r3, #18
 80029dc:	220f      	movs	r2, #15
 80029de:	4013      	ands	r3, r2
 80029e0:	4a24      	ldr	r2, [pc, #144]	; (8002a74 <HAL_RCC_GetSysClockFreq+0xd8>)
 80029e2:	5cd3      	ldrb	r3, [r2, r3]
 80029e4:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80029e6:	4b21      	ldr	r3, [pc, #132]	; (8002a6c <HAL_RCC_GetSysClockFreq+0xd0>)
 80029e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ea:	220f      	movs	r2, #15
 80029ec:	4013      	ands	r3, r2
 80029ee:	4a22      	ldr	r2, [pc, #136]	; (8002a78 <HAL_RCC_GetSysClockFreq+0xdc>)
 80029f0:	5cd3      	ldrb	r3, [r2, r3]
 80029f2:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	23c0      	movs	r3, #192	; 0xc0
 80029f8:	025b      	lsls	r3, r3, #9
 80029fa:	401a      	ands	r2, r3
 80029fc:	2380      	movs	r3, #128	; 0x80
 80029fe:	025b      	lsls	r3, r3, #9
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d109      	bne.n	8002a18 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a04:	68b9      	ldr	r1, [r7, #8]
 8002a06:	481a      	ldr	r0, [pc, #104]	; (8002a70 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a08:	f7fd fb88 	bl	800011c <__udivsi3>
 8002a0c:	0003      	movs	r3, r0
 8002a0e:	001a      	movs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4353      	muls	r3, r2
 8002a14:	617b      	str	r3, [r7, #20]
 8002a16:	e01a      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	23c0      	movs	r3, #192	; 0xc0
 8002a1c:	025b      	lsls	r3, r3, #9
 8002a1e:	401a      	ands	r2, r3
 8002a20:	23c0      	movs	r3, #192	; 0xc0
 8002a22:	025b      	lsls	r3, r3, #9
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d109      	bne.n	8002a3c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a28:	68b9      	ldr	r1, [r7, #8]
 8002a2a:	4814      	ldr	r0, [pc, #80]	; (8002a7c <HAL_RCC_GetSysClockFreq+0xe0>)
 8002a2c:	f7fd fb76 	bl	800011c <__udivsi3>
 8002a30:	0003      	movs	r3, r0
 8002a32:	001a      	movs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4353      	muls	r3, r2
 8002a38:	617b      	str	r3, [r7, #20]
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a3c:	68b9      	ldr	r1, [r7, #8]
 8002a3e:	480c      	ldr	r0, [pc, #48]	; (8002a70 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a40:	f7fd fb6c 	bl	800011c <__udivsi3>
 8002a44:	0003      	movs	r3, r0
 8002a46:	001a      	movs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4353      	muls	r3, r2
 8002a4c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	613b      	str	r3, [r7, #16]
      break;
 8002a52:	e005      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002a54:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <HAL_RCC_GetSysClockFreq+0xe0>)
 8002a56:	613b      	str	r3, [r7, #16]
      break;
 8002a58:	e002      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a5a:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a5c:	613b      	str	r3, [r7, #16]
      break;
 8002a5e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002a60:	693b      	ldr	r3, [r7, #16]
}
 8002a62:	0018      	movs	r0, r3
 8002a64:	46bd      	mov	sp, r7
 8002a66:	b006      	add	sp, #24
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	46c0      	nop			; (mov r8, r8)
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	007a1200 	.word	0x007a1200
 8002a74:	08005bd8 	.word	0x08005bd8
 8002a78:	08005be8 	.word	0x08005be8
 8002a7c:	02dc6c00 	.word	0x02dc6c00

08002a80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a84:	4b02      	ldr	r3, [pc, #8]	; (8002a90 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a86:	681b      	ldr	r3, [r3, #0]
}
 8002a88:	0018      	movs	r0, r3
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	20000000 	.word	0x20000000

08002a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002a98:	f7ff fff2 	bl	8002a80 <HAL_RCC_GetHCLKFreq>
 8002a9c:	0001      	movs	r1, r0
 8002a9e:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	0a1b      	lsrs	r3, r3, #8
 8002aa4:	2207      	movs	r2, #7
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	4a04      	ldr	r2, [pc, #16]	; (8002abc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002aaa:	5cd3      	ldrb	r3, [r2, r3]
 8002aac:	40d9      	lsrs	r1, r3
 8002aae:	000b      	movs	r3, r1
}    
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	08005bd0 	.word	0x08005bd0

08002ac0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e042      	b.n	8002b58 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	223d      	movs	r2, #61	; 0x3d
 8002ad6:	5c9b      	ldrb	r3, [r3, r2]
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d107      	bne.n	8002aee <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	223c      	movs	r2, #60	; 0x3c
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f7fe fa3f 	bl	8000f6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	223d      	movs	r2, #61	; 0x3d
 8002af2:	2102      	movs	r1, #2
 8002af4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3304      	adds	r3, #4
 8002afe:	0019      	movs	r1, r3
 8002b00:	0010      	movs	r0, r2
 8002b02:	f000 fef1 	bl	80038e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2246      	movs	r2, #70	; 0x46
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	223e      	movs	r2, #62	; 0x3e
 8002b12:	2101      	movs	r1, #1
 8002b14:	5499      	strb	r1, [r3, r2]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	223f      	movs	r2, #63	; 0x3f
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	5499      	strb	r1, [r3, r2]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2240      	movs	r2, #64	; 0x40
 8002b22:	2101      	movs	r1, #1
 8002b24:	5499      	strb	r1, [r3, r2]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2241      	movs	r2, #65	; 0x41
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2242      	movs	r2, #66	; 0x42
 8002b32:	2101      	movs	r1, #1
 8002b34:	5499      	strb	r1, [r3, r2]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2243      	movs	r2, #67	; 0x43
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	5499      	strb	r1, [r3, r2]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2244      	movs	r2, #68	; 0x44
 8002b42:	2101      	movs	r1, #1
 8002b44:	5499      	strb	r1, [r3, r2]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2245      	movs	r2, #69	; 0x45
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	223d      	movs	r2, #61	; 0x3d
 8002b52:	2101      	movs	r1, #1
 8002b54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	0018      	movs	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	b002      	add	sp, #8
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	223d      	movs	r2, #61	; 0x3d
 8002b6c:	5c9b      	ldrb	r3, [r3, r2]
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d001      	beq.n	8002b78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e036      	b.n	8002be6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	223d      	movs	r2, #61	; 0x3d
 8002b7c:	2102      	movs	r1, #2
 8002b7e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a16      	ldr	r2, [pc, #88]	; (8002bf0 <HAL_TIM_Base_Start_IT+0x90>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d00a      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x50>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	2380      	movs	r3, #128	; 0x80
 8002ba0:	05db      	lsls	r3, r3, #23
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d004      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x50>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a12      	ldr	r2, [pc, #72]	; (8002bf4 <HAL_TIM_Base_Start_IT+0x94>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d111      	bne.n	8002bd4 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	2207      	movs	r2, #7
 8002bb8:	4013      	ands	r3, r2
 8002bba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2b06      	cmp	r3, #6
 8002bc0:	d010      	beq.n	8002be4 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2101      	movs	r1, #1
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bd2:	e007      	b.n	8002be4 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2101      	movs	r1, #1
 8002be0:	430a      	orrs	r2, r1
 8002be2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	0018      	movs	r0, r3
 8002be8:	46bd      	mov	sp, r7
 8002bea:	b004      	add	sp, #16
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	46c0      	nop			; (mov r8, r8)
 8002bf0:	40012c00 	.word	0x40012c00
 8002bf4:	40000400 	.word	0x40000400

08002bf8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e042      	b.n	8002c90 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	223d      	movs	r2, #61	; 0x3d
 8002c0e:	5c9b      	ldrb	r3, [r3, r2]
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d107      	bne.n	8002c26 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	223c      	movs	r2, #60	; 0x3c
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	0018      	movs	r0, r3
 8002c22:	f000 f839 	bl	8002c98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	223d      	movs	r2, #61	; 0x3d
 8002c2a:	2102      	movs	r1, #2
 8002c2c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	3304      	adds	r3, #4
 8002c36:	0019      	movs	r1, r3
 8002c38:	0010      	movs	r0, r2
 8002c3a:	f000 fe55 	bl	80038e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2246      	movs	r2, #70	; 0x46
 8002c42:	2101      	movs	r1, #1
 8002c44:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	223e      	movs	r2, #62	; 0x3e
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	5499      	strb	r1, [r3, r2]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	223f      	movs	r2, #63	; 0x3f
 8002c52:	2101      	movs	r1, #1
 8002c54:	5499      	strb	r1, [r3, r2]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2240      	movs	r2, #64	; 0x40
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	5499      	strb	r1, [r3, r2]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2241      	movs	r2, #65	; 0x41
 8002c62:	2101      	movs	r1, #1
 8002c64:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2242      	movs	r2, #66	; 0x42
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	5499      	strb	r1, [r3, r2]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2243      	movs	r2, #67	; 0x43
 8002c72:	2101      	movs	r1, #1
 8002c74:	5499      	strb	r1, [r3, r2]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2244      	movs	r2, #68	; 0x44
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	5499      	strb	r1, [r3, r2]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2245      	movs	r2, #69	; 0x45
 8002c82:	2101      	movs	r1, #1
 8002c84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	223d      	movs	r2, #61	; 0x3d
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	0018      	movs	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b002      	add	sp, #8
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ca0:	46c0      	nop			; (mov r8, r8)
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	b002      	add	sp, #8
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d108      	bne.n	8002cca <HAL_TIM_PWM_Start+0x22>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	223e      	movs	r2, #62	; 0x3e
 8002cbc:	5c9b      	ldrb	r3, [r3, r2]
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	1e5a      	subs	r2, r3, #1
 8002cc4:	4193      	sbcs	r3, r2
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	e01f      	b.n	8002d0a <HAL_TIM_PWM_Start+0x62>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d108      	bne.n	8002ce2 <HAL_TIM_PWM_Start+0x3a>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	223f      	movs	r2, #63	; 0x3f
 8002cd4:	5c9b      	ldrb	r3, [r3, r2]
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	1e5a      	subs	r2, r3, #1
 8002cdc:	4193      	sbcs	r3, r2
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	e013      	b.n	8002d0a <HAL_TIM_PWM_Start+0x62>
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	2b08      	cmp	r3, #8
 8002ce6:	d108      	bne.n	8002cfa <HAL_TIM_PWM_Start+0x52>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2240      	movs	r2, #64	; 0x40
 8002cec:	5c9b      	ldrb	r3, [r3, r2]
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	1e5a      	subs	r2, r3, #1
 8002cf4:	4193      	sbcs	r3, r2
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	e007      	b.n	8002d0a <HAL_TIM_PWM_Start+0x62>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2241      	movs	r2, #65	; 0x41
 8002cfe:	5c9b      	ldrb	r3, [r3, r2]
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	3b01      	subs	r3, #1
 8002d04:	1e5a      	subs	r2, r3, #1
 8002d06:	4193      	sbcs	r3, r2
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e06a      	b.n	8002de8 <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d104      	bne.n	8002d22 <HAL_TIM_PWM_Start+0x7a>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	223e      	movs	r2, #62	; 0x3e
 8002d1c:	2102      	movs	r1, #2
 8002d1e:	5499      	strb	r1, [r3, r2]
 8002d20:	e013      	b.n	8002d4a <HAL_TIM_PWM_Start+0xa2>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	2b04      	cmp	r3, #4
 8002d26:	d104      	bne.n	8002d32 <HAL_TIM_PWM_Start+0x8a>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	223f      	movs	r2, #63	; 0x3f
 8002d2c:	2102      	movs	r1, #2
 8002d2e:	5499      	strb	r1, [r3, r2]
 8002d30:	e00b      	b.n	8002d4a <HAL_TIM_PWM_Start+0xa2>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d104      	bne.n	8002d42 <HAL_TIM_PWM_Start+0x9a>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2240      	movs	r2, #64	; 0x40
 8002d3c:	2102      	movs	r1, #2
 8002d3e:	5499      	strb	r1, [r3, r2]
 8002d40:	e003      	b.n	8002d4a <HAL_TIM_PWM_Start+0xa2>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2241      	movs	r2, #65	; 0x41
 8002d46:	2102      	movs	r1, #2
 8002d48:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6839      	ldr	r1, [r7, #0]
 8002d50:	2201      	movs	r2, #1
 8002d52:	0018      	movs	r0, r3
 8002d54:	f001 f9d6 	bl	8004104 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a24      	ldr	r2, [pc, #144]	; (8002df0 <HAL_TIM_PWM_Start+0x148>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d009      	beq.n	8002d76 <HAL_TIM_PWM_Start+0xce>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a23      	ldr	r2, [pc, #140]	; (8002df4 <HAL_TIM_PWM_Start+0x14c>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d004      	beq.n	8002d76 <HAL_TIM_PWM_Start+0xce>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a21      	ldr	r2, [pc, #132]	; (8002df8 <HAL_TIM_PWM_Start+0x150>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d101      	bne.n	8002d7a <HAL_TIM_PWM_Start+0xd2>
 8002d76:	2301      	movs	r3, #1
 8002d78:	e000      	b.n	8002d7c <HAL_TIM_PWM_Start+0xd4>
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d008      	beq.n	8002d92 <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2180      	movs	r1, #128	; 0x80
 8002d8c:	0209      	lsls	r1, r1, #8
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a16      	ldr	r2, [pc, #88]	; (8002df0 <HAL_TIM_PWM_Start+0x148>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d00a      	beq.n	8002db2 <HAL_TIM_PWM_Start+0x10a>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	2380      	movs	r3, #128	; 0x80
 8002da2:	05db      	lsls	r3, r3, #23
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d004      	beq.n	8002db2 <HAL_TIM_PWM_Start+0x10a>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a13      	ldr	r2, [pc, #76]	; (8002dfc <HAL_TIM_PWM_Start+0x154>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d111      	bne.n	8002dd6 <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	2207      	movs	r2, #7
 8002dba:	4013      	ands	r3, r2
 8002dbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2b06      	cmp	r3, #6
 8002dc2:	d010      	beq.n	8002de6 <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2101      	movs	r1, #1
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dd4:	e007      	b.n	8002de6 <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2101      	movs	r1, #1
 8002de2:	430a      	orrs	r2, r1
 8002de4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	0018      	movs	r0, r3
 8002dea:	46bd      	mov	sp, r7
 8002dec:	b004      	add	sp, #16
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40012c00 	.word	0x40012c00
 8002df4:	40014400 	.word	0x40014400
 8002df8:	40014800 	.word	0x40014800
 8002dfc:	40000400 	.word	0x40000400

08002e00 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e042      	b.n	8002e98 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	223d      	movs	r2, #61	; 0x3d
 8002e16:	5c9b      	ldrb	r3, [r3, r2]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d107      	bne.n	8002e2e <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	223c      	movs	r2, #60	; 0x3c
 8002e22:	2100      	movs	r1, #0
 8002e24:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f000 f839 	bl	8002ea0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	223d      	movs	r2, #61	; 0x3d
 8002e32:	2102      	movs	r1, #2
 8002e34:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	0019      	movs	r1, r3
 8002e40:	0010      	movs	r0, r2
 8002e42:	f000 fd51 	bl	80038e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2246      	movs	r2, #70	; 0x46
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	223e      	movs	r2, #62	; 0x3e
 8002e52:	2101      	movs	r1, #1
 8002e54:	5499      	strb	r1, [r3, r2]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	223f      	movs	r2, #63	; 0x3f
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	5499      	strb	r1, [r3, r2]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2240      	movs	r2, #64	; 0x40
 8002e62:	2101      	movs	r1, #1
 8002e64:	5499      	strb	r1, [r3, r2]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2241      	movs	r2, #65	; 0x41
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2242      	movs	r2, #66	; 0x42
 8002e72:	2101      	movs	r1, #1
 8002e74:	5499      	strb	r1, [r3, r2]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2243      	movs	r2, #67	; 0x43
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	5499      	strb	r1, [r3, r2]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2244      	movs	r2, #68	; 0x44
 8002e82:	2101      	movs	r1, #1
 8002e84:	5499      	strb	r1, [r3, r2]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2245      	movs	r2, #69	; 0x45
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	223d      	movs	r2, #61	; 0x3d
 8002e92:	2101      	movs	r1, #1
 8002e94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	0018      	movs	r0, r3
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	b002      	add	sp, #8
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002ea8:	46c0      	nop			; (mov r8, r8)
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	b002      	add	sp, #8
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002eba:	230f      	movs	r3, #15
 8002ebc:	18fb      	adds	r3, r7, r3
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d104      	bne.n	8002ed2 <HAL_TIM_IC_Start_IT+0x22>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	223e      	movs	r2, #62	; 0x3e
 8002ecc:	5c9b      	ldrb	r3, [r3, r2]
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	e013      	b.n	8002efa <HAL_TIM_IC_Start_IT+0x4a>
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	2b04      	cmp	r3, #4
 8002ed6:	d104      	bne.n	8002ee2 <HAL_TIM_IC_Start_IT+0x32>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	223f      	movs	r2, #63	; 0x3f
 8002edc:	5c9b      	ldrb	r3, [r3, r2]
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	e00b      	b.n	8002efa <HAL_TIM_IC_Start_IT+0x4a>
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	d104      	bne.n	8002ef2 <HAL_TIM_IC_Start_IT+0x42>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2240      	movs	r2, #64	; 0x40
 8002eec:	5c9b      	ldrb	r3, [r3, r2]
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	e003      	b.n	8002efa <HAL_TIM_IC_Start_IT+0x4a>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2241      	movs	r2, #65	; 0x41
 8002ef6:	5c9b      	ldrb	r3, [r3, r2]
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	220e      	movs	r2, #14
 8002efc:	18ba      	adds	r2, r7, r2
 8002efe:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d104      	bne.n	8002f10 <HAL_TIM_IC_Start_IT+0x60>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2242      	movs	r2, #66	; 0x42
 8002f0a:	5c9b      	ldrb	r3, [r3, r2]
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	e013      	b.n	8002f38 <HAL_TIM_IC_Start_IT+0x88>
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d104      	bne.n	8002f20 <HAL_TIM_IC_Start_IT+0x70>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2243      	movs	r2, #67	; 0x43
 8002f1a:	5c9b      	ldrb	r3, [r3, r2]
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	e00b      	b.n	8002f38 <HAL_TIM_IC_Start_IT+0x88>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d104      	bne.n	8002f30 <HAL_TIM_IC_Start_IT+0x80>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2244      	movs	r2, #68	; 0x44
 8002f2a:	5c9b      	ldrb	r3, [r3, r2]
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	e003      	b.n	8002f38 <HAL_TIM_IC_Start_IT+0x88>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2245      	movs	r2, #69	; 0x45
 8002f34:	5c9b      	ldrb	r3, [r3, r2]
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	210d      	movs	r1, #13
 8002f3a:	187a      	adds	r2, r7, r1
 8002f3c:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f3e:	230e      	movs	r3, #14
 8002f40:	18fb      	adds	r3, r7, r3
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d103      	bne.n	8002f50 <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002f48:	187b      	adds	r3, r7, r1
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d001      	beq.n	8002f54 <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0ac      	b.n	80030ae <HAL_TIM_IC_Start_IT+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d104      	bne.n	8002f64 <HAL_TIM_IC_Start_IT+0xb4>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	223e      	movs	r2, #62	; 0x3e
 8002f5e:	2102      	movs	r1, #2
 8002f60:	5499      	strb	r1, [r3, r2]
 8002f62:	e013      	b.n	8002f8c <HAL_TIM_IC_Start_IT+0xdc>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	d104      	bne.n	8002f74 <HAL_TIM_IC_Start_IT+0xc4>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	223f      	movs	r2, #63	; 0x3f
 8002f6e:	2102      	movs	r1, #2
 8002f70:	5499      	strb	r1, [r3, r2]
 8002f72:	e00b      	b.n	8002f8c <HAL_TIM_IC_Start_IT+0xdc>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	d104      	bne.n	8002f84 <HAL_TIM_IC_Start_IT+0xd4>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2240      	movs	r2, #64	; 0x40
 8002f7e:	2102      	movs	r1, #2
 8002f80:	5499      	strb	r1, [r3, r2]
 8002f82:	e003      	b.n	8002f8c <HAL_TIM_IC_Start_IT+0xdc>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2241      	movs	r2, #65	; 0x41
 8002f88:	2102      	movs	r1, #2
 8002f8a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d104      	bne.n	8002f9c <HAL_TIM_IC_Start_IT+0xec>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2242      	movs	r2, #66	; 0x42
 8002f96:	2102      	movs	r1, #2
 8002f98:	5499      	strb	r1, [r3, r2]
 8002f9a:	e013      	b.n	8002fc4 <HAL_TIM_IC_Start_IT+0x114>
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	d104      	bne.n	8002fac <HAL_TIM_IC_Start_IT+0xfc>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2243      	movs	r2, #67	; 0x43
 8002fa6:	2102      	movs	r1, #2
 8002fa8:	5499      	strb	r1, [r3, r2]
 8002faa:	e00b      	b.n	8002fc4 <HAL_TIM_IC_Start_IT+0x114>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	2b08      	cmp	r3, #8
 8002fb0:	d104      	bne.n	8002fbc <HAL_TIM_IC_Start_IT+0x10c>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2244      	movs	r2, #68	; 0x44
 8002fb6:	2102      	movs	r1, #2
 8002fb8:	5499      	strb	r1, [r3, r2]
 8002fba:	e003      	b.n	8002fc4 <HAL_TIM_IC_Start_IT+0x114>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2245      	movs	r2, #69	; 0x45
 8002fc0:	2102      	movs	r1, #2
 8002fc2:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	2b0c      	cmp	r3, #12
 8002fc8:	d02a      	beq.n	8003020 <HAL_TIM_IC_Start_IT+0x170>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	2b0c      	cmp	r3, #12
 8002fce:	d830      	bhi.n	8003032 <HAL_TIM_IC_Start_IT+0x182>
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d01b      	beq.n	800300e <HAL_TIM_IC_Start_IT+0x15e>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d82a      	bhi.n	8003032 <HAL_TIM_IC_Start_IT+0x182>
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_TIM_IC_Start_IT+0x13a>
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d009      	beq.n	8002ffc <HAL_TIM_IC_Start_IT+0x14c>
 8002fe8:	e023      	b.n	8003032 <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68da      	ldr	r2, [r3, #12]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2102      	movs	r1, #2
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	60da      	str	r2, [r3, #12]
      break;
 8002ffa:	e01f      	b.n	800303c <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2104      	movs	r1, #4
 8003008:	430a      	orrs	r2, r1
 800300a:	60da      	str	r2, [r3, #12]
      break;
 800300c:	e016      	b.n	800303c <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68da      	ldr	r2, [r3, #12]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2108      	movs	r1, #8
 800301a:	430a      	orrs	r2, r1
 800301c:	60da      	str	r2, [r3, #12]
      break;
 800301e:	e00d      	b.n	800303c <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2110      	movs	r1, #16
 800302c:	430a      	orrs	r2, r1
 800302e:	60da      	str	r2, [r3, #12]
      break;
 8003030:	e004      	b.n	800303c <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 8003032:	230f      	movs	r3, #15
 8003034:	18fb      	adds	r3, r7, r3
 8003036:	2201      	movs	r2, #1
 8003038:	701a      	strb	r2, [r3, #0]
      break;
 800303a:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 800303c:	230f      	movs	r3, #15
 800303e:	18fb      	adds	r3, r7, r3
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d130      	bne.n	80030a8 <HAL_TIM_IC_Start_IT+0x1f8>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6839      	ldr	r1, [r7, #0]
 800304c:	2201      	movs	r2, #1
 800304e:	0018      	movs	r0, r3
 8003050:	f001 f858 	bl	8004104 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a17      	ldr	r2, [pc, #92]	; (80030b8 <HAL_TIM_IC_Start_IT+0x208>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d00a      	beq.n	8003074 <HAL_TIM_IC_Start_IT+0x1c4>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	2380      	movs	r3, #128	; 0x80
 8003064:	05db      	lsls	r3, r3, #23
 8003066:	429a      	cmp	r2, r3
 8003068:	d004      	beq.n	8003074 <HAL_TIM_IC_Start_IT+0x1c4>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a13      	ldr	r2, [pc, #76]	; (80030bc <HAL_TIM_IC_Start_IT+0x20c>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d111      	bne.n	8003098 <HAL_TIM_IC_Start_IT+0x1e8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	2207      	movs	r2, #7
 800307c:	4013      	ands	r3, r2
 800307e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2b06      	cmp	r3, #6
 8003084:	d010      	beq.n	80030a8 <HAL_TIM_IC_Start_IT+0x1f8>
      {
        __HAL_TIM_ENABLE(htim);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2101      	movs	r1, #1
 8003092:	430a      	orrs	r2, r1
 8003094:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003096:	e007      	b.n	80030a8 <HAL_TIM_IC_Start_IT+0x1f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2101      	movs	r1, #1
 80030a4:	430a      	orrs	r2, r1
 80030a6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80030a8:	230f      	movs	r3, #15
 80030aa:	18fb      	adds	r3, r7, r3
 80030ac:	781b      	ldrb	r3, [r3, #0]
}
 80030ae:	0018      	movs	r0, r3
 80030b0:	46bd      	mov	sp, r7
 80030b2:	b004      	add	sp, #16
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	40012c00 	.word	0x40012c00
 80030bc:	40000400 	.word	0x40000400

080030c0 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ca:	230f      	movs	r3, #15
 80030cc:	18fb      	adds	r3, r7, r3
 80030ce:	2200      	movs	r2, #0
 80030d0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	2b0c      	cmp	r3, #12
 80030d6:	d02a      	beq.n	800312e <HAL_TIM_IC_Stop_IT+0x6e>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	2b0c      	cmp	r3, #12
 80030dc:	d830      	bhi.n	8003140 <HAL_TIM_IC_Stop_IT+0x80>
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d01b      	beq.n	800311c <HAL_TIM_IC_Stop_IT+0x5c>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	d82a      	bhi.n	8003140 <HAL_TIM_IC_Stop_IT+0x80>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_TIM_IC_Stop_IT+0x38>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d009      	beq.n	800310a <HAL_TIM_IC_Stop_IT+0x4a>
 80030f6:	e023      	b.n	8003140 <HAL_TIM_IC_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2102      	movs	r1, #2
 8003104:	438a      	bics	r2, r1
 8003106:	60da      	str	r2, [r3, #12]
      break;
 8003108:	e01f      	b.n	800314a <HAL_TIM_IC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68da      	ldr	r2, [r3, #12]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2104      	movs	r1, #4
 8003116:	438a      	bics	r2, r1
 8003118:	60da      	str	r2, [r3, #12]
      break;
 800311a:	e016      	b.n	800314a <HAL_TIM_IC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2108      	movs	r1, #8
 8003128:	438a      	bics	r2, r1
 800312a:	60da      	str	r2, [r3, #12]
      break;
 800312c:	e00d      	b.n	800314a <HAL_TIM_IC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68da      	ldr	r2, [r3, #12]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2110      	movs	r1, #16
 800313a:	438a      	bics	r2, r1
 800313c:	60da      	str	r2, [r3, #12]
      break;
 800313e:	e004      	b.n	800314a <HAL_TIM_IC_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 8003140:	230f      	movs	r3, #15
 8003142:	18fb      	adds	r3, r7, r3
 8003144:	2201      	movs	r2, #1
 8003146:	701a      	strb	r2, [r3, #0]
      break;
 8003148:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 800314a:	230f      	movs	r3, #15
 800314c:	18fb      	adds	r3, r7, r3
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d152      	bne.n	80031fa <HAL_TIM_IC_Stop_IT+0x13a>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6839      	ldr	r1, [r7, #0]
 800315a:	2200      	movs	r2, #0
 800315c:	0018      	movs	r0, r3
 800315e:	f000 ffd1 	bl	8004104 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	4a27      	ldr	r2, [pc, #156]	; (8003208 <HAL_TIM_IC_Stop_IT+0x148>)
 800316a:	4013      	ands	r3, r2
 800316c:	d10d      	bne.n	800318a <HAL_TIM_IC_Stop_IT+0xca>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	4a25      	ldr	r2, [pc, #148]	; (800320c <HAL_TIM_IC_Stop_IT+0x14c>)
 8003176:	4013      	ands	r3, r2
 8003178:	d107      	bne.n	800318a <HAL_TIM_IC_Stop_IT+0xca>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2101      	movs	r1, #1
 8003186:	438a      	bics	r2, r1
 8003188:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d104      	bne.n	800319a <HAL_TIM_IC_Stop_IT+0xda>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	223e      	movs	r2, #62	; 0x3e
 8003194:	2101      	movs	r1, #1
 8003196:	5499      	strb	r1, [r3, r2]
 8003198:	e013      	b.n	80031c2 <HAL_TIM_IC_Stop_IT+0x102>
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	2b04      	cmp	r3, #4
 800319e:	d104      	bne.n	80031aa <HAL_TIM_IC_Stop_IT+0xea>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	223f      	movs	r2, #63	; 0x3f
 80031a4:	2101      	movs	r1, #1
 80031a6:	5499      	strb	r1, [r3, r2]
 80031a8:	e00b      	b.n	80031c2 <HAL_TIM_IC_Stop_IT+0x102>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d104      	bne.n	80031ba <HAL_TIM_IC_Stop_IT+0xfa>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2240      	movs	r2, #64	; 0x40
 80031b4:	2101      	movs	r1, #1
 80031b6:	5499      	strb	r1, [r3, r2]
 80031b8:	e003      	b.n	80031c2 <HAL_TIM_IC_Stop_IT+0x102>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2241      	movs	r2, #65	; 0x41
 80031be:	2101      	movs	r1, #1
 80031c0:	5499      	strb	r1, [r3, r2]
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d104      	bne.n	80031d2 <HAL_TIM_IC_Stop_IT+0x112>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2242      	movs	r2, #66	; 0x42
 80031cc:	2101      	movs	r1, #1
 80031ce:	5499      	strb	r1, [r3, r2]
 80031d0:	e013      	b.n	80031fa <HAL_TIM_IC_Stop_IT+0x13a>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	d104      	bne.n	80031e2 <HAL_TIM_IC_Stop_IT+0x122>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2243      	movs	r2, #67	; 0x43
 80031dc:	2101      	movs	r1, #1
 80031de:	5499      	strb	r1, [r3, r2]
 80031e0:	e00b      	b.n	80031fa <HAL_TIM_IC_Stop_IT+0x13a>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d104      	bne.n	80031f2 <HAL_TIM_IC_Stop_IT+0x132>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2244      	movs	r2, #68	; 0x44
 80031ec:	2101      	movs	r1, #1
 80031ee:	5499      	strb	r1, [r3, r2]
 80031f0:	e003      	b.n	80031fa <HAL_TIM_IC_Stop_IT+0x13a>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2245      	movs	r2, #69	; 0x45
 80031f6:	2101      	movs	r1, #1
 80031f8:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 80031fa:	230f      	movs	r3, #15
 80031fc:	18fb      	adds	r3, r7, r3
 80031fe:	781b      	ldrb	r3, [r3, #0]
}
 8003200:	0018      	movs	r0, r3
 8003202:	46bd      	mov	sp, r7
 8003204:	b004      	add	sp, #16
 8003206:	bd80      	pop	{r7, pc}
 8003208:	00001111 	.word	0x00001111
 800320c:	00000444 	.word	0x00000444

08003210 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	2202      	movs	r2, #2
 8003220:	4013      	ands	r3, r2
 8003222:	2b02      	cmp	r3, #2
 8003224:	d124      	bne.n	8003270 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	2202      	movs	r2, #2
 800322e:	4013      	ands	r3, r2
 8003230:	2b02      	cmp	r3, #2
 8003232:	d11d      	bne.n	8003270 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2203      	movs	r2, #3
 800323a:	4252      	negs	r2, r2
 800323c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	2203      	movs	r2, #3
 800324c:	4013      	ands	r3, r2
 800324e:	d004      	beq.n	800325a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	0018      	movs	r0, r3
 8003254:	f7fd fd2c 	bl	8000cb0 <HAL_TIM_IC_CaptureCallback>
 8003258:	e007      	b.n	800326a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	0018      	movs	r0, r3
 800325e:	f000 fb2b 	bl	80038b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	0018      	movs	r0, r3
 8003266:	f000 fb2f 	bl	80038c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	2204      	movs	r2, #4
 8003278:	4013      	ands	r3, r2
 800327a:	2b04      	cmp	r3, #4
 800327c:	d125      	bne.n	80032ca <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	2204      	movs	r2, #4
 8003286:	4013      	ands	r3, r2
 8003288:	2b04      	cmp	r3, #4
 800328a:	d11e      	bne.n	80032ca <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2205      	movs	r2, #5
 8003292:	4252      	negs	r2, r2
 8003294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2202      	movs	r2, #2
 800329a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	699a      	ldr	r2, [r3, #24]
 80032a2:	23c0      	movs	r3, #192	; 0xc0
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4013      	ands	r3, r2
 80032a8:	d004      	beq.n	80032b4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	0018      	movs	r0, r3
 80032ae:	f7fd fcff 	bl	8000cb0 <HAL_TIM_IC_CaptureCallback>
 80032b2:	e007      	b.n	80032c4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	0018      	movs	r0, r3
 80032b8:	f000 fafe 	bl	80038b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	0018      	movs	r0, r3
 80032c0:	f000 fb02 	bl	80038c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	2208      	movs	r2, #8
 80032d2:	4013      	ands	r3, r2
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d124      	bne.n	8003322 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	2208      	movs	r2, #8
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	d11d      	bne.n	8003322 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2209      	movs	r2, #9
 80032ec:	4252      	negs	r2, r2
 80032ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2204      	movs	r2, #4
 80032f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	2203      	movs	r2, #3
 80032fe:	4013      	ands	r3, r2
 8003300:	d004      	beq.n	800330c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	0018      	movs	r0, r3
 8003306:	f7fd fcd3 	bl	8000cb0 <HAL_TIM_IC_CaptureCallback>
 800330a:	e007      	b.n	800331c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	0018      	movs	r0, r3
 8003310:	f000 fad2 	bl	80038b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	0018      	movs	r0, r3
 8003318:	f000 fad6 	bl	80038c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	2210      	movs	r2, #16
 800332a:	4013      	ands	r3, r2
 800332c:	2b10      	cmp	r3, #16
 800332e:	d125      	bne.n	800337c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	2210      	movs	r2, #16
 8003338:	4013      	ands	r3, r2
 800333a:	2b10      	cmp	r3, #16
 800333c:	d11e      	bne.n	800337c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2211      	movs	r2, #17
 8003344:	4252      	negs	r2, r2
 8003346:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2208      	movs	r2, #8
 800334c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	69da      	ldr	r2, [r3, #28]
 8003354:	23c0      	movs	r3, #192	; 0xc0
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4013      	ands	r3, r2
 800335a:	d004      	beq.n	8003366 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	0018      	movs	r0, r3
 8003360:	f7fd fca6 	bl	8000cb0 <HAL_TIM_IC_CaptureCallback>
 8003364:	e007      	b.n	8003376 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	0018      	movs	r0, r3
 800336a:	f000 faa5 	bl	80038b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	0018      	movs	r0, r3
 8003372:	f000 faa9 	bl	80038c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	2201      	movs	r2, #1
 8003384:	4013      	ands	r3, r2
 8003386:	2b01      	cmp	r3, #1
 8003388:	d10f      	bne.n	80033aa <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	2201      	movs	r2, #1
 8003392:	4013      	ands	r3, r2
 8003394:	2b01      	cmp	r3, #1
 8003396:	d108      	bne.n	80033aa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2202      	movs	r2, #2
 800339e:	4252      	negs	r2, r2
 80033a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	0018      	movs	r0, r3
 80033a6:	f7fd fcfd 	bl	8000da4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	2280      	movs	r2, #128	; 0x80
 80033b2:	4013      	ands	r3, r2
 80033b4:	2b80      	cmp	r3, #128	; 0x80
 80033b6:	d10f      	bne.n	80033d8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	2280      	movs	r2, #128	; 0x80
 80033c0:	4013      	ands	r3, r2
 80033c2:	2b80      	cmp	r3, #128	; 0x80
 80033c4:	d108      	bne.n	80033d8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2281      	movs	r2, #129	; 0x81
 80033cc:	4252      	negs	r2, r2
 80033ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	0018      	movs	r0, r3
 80033d4:	f000 ff78 	bl	80042c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	2240      	movs	r2, #64	; 0x40
 80033e0:	4013      	ands	r3, r2
 80033e2:	2b40      	cmp	r3, #64	; 0x40
 80033e4:	d10f      	bne.n	8003406 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	2240      	movs	r2, #64	; 0x40
 80033ee:	4013      	ands	r3, r2
 80033f0:	2b40      	cmp	r3, #64	; 0x40
 80033f2:	d108      	bne.n	8003406 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2241      	movs	r2, #65	; 0x41
 80033fa:	4252      	negs	r2, r2
 80033fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	0018      	movs	r0, r3
 8003402:	f000 fa69 	bl	80038d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	2220      	movs	r2, #32
 800340e:	4013      	ands	r3, r2
 8003410:	2b20      	cmp	r3, #32
 8003412:	d10f      	bne.n	8003434 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	2220      	movs	r2, #32
 800341c:	4013      	ands	r3, r2
 800341e:	2b20      	cmp	r3, #32
 8003420:	d108      	bne.n	8003434 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2221      	movs	r2, #33	; 0x21
 8003428:	4252      	negs	r2, r2
 800342a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	0018      	movs	r0, r3
 8003430:	f000 ff42 	bl	80042b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003434:	46c0      	nop			; (mov r8, r8)
 8003436:	46bd      	mov	sp, r7
 8003438:	b002      	add	sp, #8
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003448:	2317      	movs	r3, #23
 800344a:	18fb      	adds	r3, r7, r3
 800344c:	2200      	movs	r2, #0
 800344e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	223c      	movs	r2, #60	; 0x3c
 8003454:	5c9b      	ldrb	r3, [r3, r2]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d101      	bne.n	800345e <HAL_TIM_IC_ConfigChannel+0x22>
 800345a:	2302      	movs	r3, #2
 800345c:	e08c      	b.n	8003578 <HAL_TIM_IC_ConfigChannel+0x13c>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	223c      	movs	r2, #60	; 0x3c
 8003462:	2101      	movs	r1, #1
 8003464:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d11b      	bne.n	80034a4 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800347c:	f000 fc8a 	bl	8003d94 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	699a      	ldr	r2, [r3, #24]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	210c      	movs	r1, #12
 800348c:	438a      	bics	r2, r1
 800348e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6999      	ldr	r1, [r3, #24]
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	689a      	ldr	r2, [r3, #8]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	619a      	str	r2, [r3, #24]
 80034a2:	e062      	b.n	800356a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d11c      	bne.n	80034e4 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80034ba:	f000 fcef 	bl	8003e9c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	699a      	ldr	r2, [r3, #24]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	492d      	ldr	r1, [pc, #180]	; (8003580 <HAL_TIM_IC_ConfigChannel+0x144>)
 80034ca:	400a      	ands	r2, r1
 80034cc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6999      	ldr	r1, [r3, #24]
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	021a      	lsls	r2, r3, #8
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	619a      	str	r2, [r3, #24]
 80034e2:	e042      	b.n	800356a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d11b      	bne.n	8003522 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80034fa:	f000 fd43 	bl	8003f84 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	69da      	ldr	r2, [r3, #28]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	210c      	movs	r1, #12
 800350a:	438a      	bics	r2, r1
 800350c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	69d9      	ldr	r1, [r3, #28]
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	61da      	str	r2, [r3, #28]
 8003520:	e023      	b.n	800356a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b0c      	cmp	r3, #12
 8003526:	d11c      	bne.n	8003562 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003538:	f000 fd64 	bl	8004004 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	69da      	ldr	r2, [r3, #28]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	490e      	ldr	r1, [pc, #56]	; (8003580 <HAL_TIM_IC_ConfigChannel+0x144>)
 8003548:	400a      	ands	r2, r1
 800354a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	69d9      	ldr	r1, [r3, #28]
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	021a      	lsls	r2, r3, #8
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	61da      	str	r2, [r3, #28]
 8003560:	e003      	b.n	800356a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8003562:	2317      	movs	r3, #23
 8003564:	18fb      	adds	r3, r7, r3
 8003566:	2201      	movs	r2, #1
 8003568:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	223c      	movs	r2, #60	; 0x3c
 800356e:	2100      	movs	r1, #0
 8003570:	5499      	strb	r1, [r3, r2]

  return status;
 8003572:	2317      	movs	r3, #23
 8003574:	18fb      	adds	r3, r7, r3
 8003576:	781b      	ldrb	r3, [r3, #0]
}
 8003578:	0018      	movs	r0, r3
 800357a:	46bd      	mov	sp, r7
 800357c:	b006      	add	sp, #24
 800357e:	bd80      	pop	{r7, pc}
 8003580:	fffff3ff 	.word	0xfffff3ff

08003584 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003590:	2317      	movs	r3, #23
 8003592:	18fb      	adds	r3, r7, r3
 8003594:	2200      	movs	r2, #0
 8003596:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	223c      	movs	r2, #60	; 0x3c
 800359c:	5c9b      	ldrb	r3, [r3, r2]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d101      	bne.n	80035a6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80035a2:	2302      	movs	r3, #2
 80035a4:	e0ad      	b.n	8003702 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	223c      	movs	r2, #60	; 0x3c
 80035aa:	2101      	movs	r1, #1
 80035ac:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b0c      	cmp	r3, #12
 80035b2:	d100      	bne.n	80035b6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80035b4:	e076      	b.n	80036a4 <HAL_TIM_PWM_ConfigChannel+0x120>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b0c      	cmp	r3, #12
 80035ba:	d900      	bls.n	80035be <HAL_TIM_PWM_ConfigChannel+0x3a>
 80035bc:	e095      	b.n	80036ea <HAL_TIM_PWM_ConfigChannel+0x166>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d04e      	beq.n	8003662 <HAL_TIM_PWM_ConfigChannel+0xde>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b08      	cmp	r3, #8
 80035c8:	d900      	bls.n	80035cc <HAL_TIM_PWM_ConfigChannel+0x48>
 80035ca:	e08e      	b.n	80036ea <HAL_TIM_PWM_ConfigChannel+0x166>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_TIM_PWM_ConfigChannel+0x56>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d021      	beq.n	800361c <HAL_TIM_PWM_ConfigChannel+0x98>
 80035d8:	e087      	b.n	80036ea <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	0011      	movs	r1, r2
 80035e2:	0018      	movs	r0, r3
 80035e4:	f000 f9f6 	bl	80039d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699a      	ldr	r2, [r3, #24]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2108      	movs	r1, #8
 80035f4:	430a      	orrs	r2, r1
 80035f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	699a      	ldr	r2, [r3, #24]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2104      	movs	r1, #4
 8003604:	438a      	bics	r2, r1
 8003606:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6999      	ldr	r1, [r3, #24]
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	691a      	ldr	r2, [r3, #16]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	619a      	str	r2, [r3, #24]
      break;
 800361a:	e06b      	b.n	80036f4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	0011      	movs	r1, r2
 8003624:	0018      	movs	r0, r3
 8003626:	f000 fa53 	bl	8003ad0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	699a      	ldr	r2, [r3, #24]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2180      	movs	r1, #128	; 0x80
 8003636:	0109      	lsls	r1, r1, #4
 8003638:	430a      	orrs	r2, r1
 800363a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699a      	ldr	r2, [r3, #24]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4931      	ldr	r1, [pc, #196]	; (800370c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003648:	400a      	ands	r2, r1
 800364a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6999      	ldr	r1, [r3, #24]
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	021a      	lsls	r2, r3, #8
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	430a      	orrs	r2, r1
 800365e:	619a      	str	r2, [r3, #24]
      break;
 8003660:	e048      	b.n	80036f4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	0011      	movs	r1, r2
 800366a:	0018      	movs	r0, r3
 800366c:	f000 faae 	bl	8003bcc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	69da      	ldr	r2, [r3, #28]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2108      	movs	r1, #8
 800367c:	430a      	orrs	r2, r1
 800367e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	69da      	ldr	r2, [r3, #28]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2104      	movs	r1, #4
 800368c:	438a      	bics	r2, r1
 800368e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	69d9      	ldr	r1, [r3, #28]
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	691a      	ldr	r2, [r3, #16]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	61da      	str	r2, [r3, #28]
      break;
 80036a2:	e027      	b.n	80036f4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	0011      	movs	r1, r2
 80036ac:	0018      	movs	r0, r3
 80036ae:	f000 fb0d 	bl	8003ccc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	69da      	ldr	r2, [r3, #28]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2180      	movs	r1, #128	; 0x80
 80036be:	0109      	lsls	r1, r1, #4
 80036c0:	430a      	orrs	r2, r1
 80036c2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	69da      	ldr	r2, [r3, #28]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	490f      	ldr	r1, [pc, #60]	; (800370c <HAL_TIM_PWM_ConfigChannel+0x188>)
 80036d0:	400a      	ands	r2, r1
 80036d2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	69d9      	ldr	r1, [r3, #28]
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	021a      	lsls	r2, r3, #8
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	61da      	str	r2, [r3, #28]
      break;
 80036e8:	e004      	b.n	80036f4 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80036ea:	2317      	movs	r3, #23
 80036ec:	18fb      	adds	r3, r7, r3
 80036ee:	2201      	movs	r2, #1
 80036f0:	701a      	strb	r2, [r3, #0]
      break;
 80036f2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	223c      	movs	r2, #60	; 0x3c
 80036f8:	2100      	movs	r1, #0
 80036fa:	5499      	strb	r1, [r3, r2]

  return status;
 80036fc:	2317      	movs	r3, #23
 80036fe:	18fb      	adds	r3, r7, r3
 8003700:	781b      	ldrb	r3, [r3, #0]
}
 8003702:	0018      	movs	r0, r3
 8003704:	46bd      	mov	sp, r7
 8003706:	b006      	add	sp, #24
 8003708:	bd80      	pop	{r7, pc}
 800370a:	46c0      	nop			; (mov r8, r8)
 800370c:	fffffbff 	.word	0xfffffbff

08003710 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800371a:	230f      	movs	r3, #15
 800371c:	18fb      	adds	r3, r7, r3
 800371e:	2200      	movs	r2, #0
 8003720:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	223c      	movs	r2, #60	; 0x3c
 8003726:	5c9b      	ldrb	r3, [r3, r2]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <HAL_TIM_ConfigClockSource+0x20>
 800372c:	2302      	movs	r3, #2
 800372e:	e0bc      	b.n	80038aa <HAL_TIM_ConfigClockSource+0x19a>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	223c      	movs	r2, #60	; 0x3c
 8003734:	2101      	movs	r1, #1
 8003736:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	223d      	movs	r2, #61	; 0x3d
 800373c:	2102      	movs	r1, #2
 800373e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2277      	movs	r2, #119	; 0x77
 800374c:	4393      	bics	r3, r2
 800374e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	4a58      	ldr	r2, [pc, #352]	; (80038b4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003754:	4013      	ands	r3, r2
 8003756:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68ba      	ldr	r2, [r7, #8]
 800375e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2280      	movs	r2, #128	; 0x80
 8003766:	0192      	lsls	r2, r2, #6
 8003768:	4293      	cmp	r3, r2
 800376a:	d040      	beq.n	80037ee <HAL_TIM_ConfigClockSource+0xde>
 800376c:	2280      	movs	r2, #128	; 0x80
 800376e:	0192      	lsls	r2, r2, #6
 8003770:	4293      	cmp	r3, r2
 8003772:	d900      	bls.n	8003776 <HAL_TIM_ConfigClockSource+0x66>
 8003774:	e088      	b.n	8003888 <HAL_TIM_ConfigClockSource+0x178>
 8003776:	2280      	movs	r2, #128	; 0x80
 8003778:	0152      	lsls	r2, r2, #5
 800377a:	4293      	cmp	r3, r2
 800377c:	d100      	bne.n	8003780 <HAL_TIM_ConfigClockSource+0x70>
 800377e:	e088      	b.n	8003892 <HAL_TIM_ConfigClockSource+0x182>
 8003780:	2280      	movs	r2, #128	; 0x80
 8003782:	0152      	lsls	r2, r2, #5
 8003784:	4293      	cmp	r3, r2
 8003786:	d900      	bls.n	800378a <HAL_TIM_ConfigClockSource+0x7a>
 8003788:	e07e      	b.n	8003888 <HAL_TIM_ConfigClockSource+0x178>
 800378a:	2b70      	cmp	r3, #112	; 0x70
 800378c:	d018      	beq.n	80037c0 <HAL_TIM_ConfigClockSource+0xb0>
 800378e:	d900      	bls.n	8003792 <HAL_TIM_ConfigClockSource+0x82>
 8003790:	e07a      	b.n	8003888 <HAL_TIM_ConfigClockSource+0x178>
 8003792:	2b60      	cmp	r3, #96	; 0x60
 8003794:	d04f      	beq.n	8003836 <HAL_TIM_ConfigClockSource+0x126>
 8003796:	d900      	bls.n	800379a <HAL_TIM_ConfigClockSource+0x8a>
 8003798:	e076      	b.n	8003888 <HAL_TIM_ConfigClockSource+0x178>
 800379a:	2b50      	cmp	r3, #80	; 0x50
 800379c:	d03b      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0x106>
 800379e:	d900      	bls.n	80037a2 <HAL_TIM_ConfigClockSource+0x92>
 80037a0:	e072      	b.n	8003888 <HAL_TIM_ConfigClockSource+0x178>
 80037a2:	2b40      	cmp	r3, #64	; 0x40
 80037a4:	d057      	beq.n	8003856 <HAL_TIM_ConfigClockSource+0x146>
 80037a6:	d900      	bls.n	80037aa <HAL_TIM_ConfigClockSource+0x9a>
 80037a8:	e06e      	b.n	8003888 <HAL_TIM_ConfigClockSource+0x178>
 80037aa:	2b30      	cmp	r3, #48	; 0x30
 80037ac:	d063      	beq.n	8003876 <HAL_TIM_ConfigClockSource+0x166>
 80037ae:	d86b      	bhi.n	8003888 <HAL_TIM_ConfigClockSource+0x178>
 80037b0:	2b20      	cmp	r3, #32
 80037b2:	d060      	beq.n	8003876 <HAL_TIM_ConfigClockSource+0x166>
 80037b4:	d868      	bhi.n	8003888 <HAL_TIM_ConfigClockSource+0x178>
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d05d      	beq.n	8003876 <HAL_TIM_ConfigClockSource+0x166>
 80037ba:	2b10      	cmp	r3, #16
 80037bc:	d05b      	beq.n	8003876 <HAL_TIM_ConfigClockSource+0x166>
 80037be:	e063      	b.n	8003888 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037d0:	f000 fc78 	bl	80040c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2277      	movs	r2, #119	; 0x77
 80037e0:	4313      	orrs	r3, r2
 80037e2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	609a      	str	r2, [r3, #8]
      break;
 80037ec:	e052      	b.n	8003894 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037fe:	f000 fc61 	bl	80040c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2180      	movs	r1, #128	; 0x80
 800380e:	01c9      	lsls	r1, r1, #7
 8003810:	430a      	orrs	r2, r1
 8003812:	609a      	str	r2, [r3, #8]
      break;
 8003814:	e03e      	b.n	8003894 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003822:	001a      	movs	r2, r3
 8003824:	f000 fb0c 	bl	8003e40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2150      	movs	r1, #80	; 0x50
 800382e:	0018      	movs	r0, r3
 8003830:	f000 fc2e 	bl	8004090 <TIM_ITRx_SetConfig>
      break;
 8003834:	e02e      	b.n	8003894 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003842:	001a      	movs	r2, r3
 8003844:	f000 fb6c 	bl	8003f20 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2160      	movs	r1, #96	; 0x60
 800384e:	0018      	movs	r0, r3
 8003850:	f000 fc1e 	bl	8004090 <TIM_ITRx_SetConfig>
      break;
 8003854:	e01e      	b.n	8003894 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003862:	001a      	movs	r2, r3
 8003864:	f000 faec 	bl	8003e40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2140      	movs	r1, #64	; 0x40
 800386e:	0018      	movs	r0, r3
 8003870:	f000 fc0e 	bl	8004090 <TIM_ITRx_SetConfig>
      break;
 8003874:	e00e      	b.n	8003894 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	0019      	movs	r1, r3
 8003880:	0010      	movs	r0, r2
 8003882:	f000 fc05 	bl	8004090 <TIM_ITRx_SetConfig>
      break;
 8003886:	e005      	b.n	8003894 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003888:	230f      	movs	r3, #15
 800388a:	18fb      	adds	r3, r7, r3
 800388c:	2201      	movs	r2, #1
 800388e:	701a      	strb	r2, [r3, #0]
      break;
 8003890:	e000      	b.n	8003894 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003892:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	223d      	movs	r2, #61	; 0x3d
 8003898:	2101      	movs	r1, #1
 800389a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	223c      	movs	r2, #60	; 0x3c
 80038a0:	2100      	movs	r1, #0
 80038a2:	5499      	strb	r1, [r3, r2]

  return status;
 80038a4:	230f      	movs	r3, #15
 80038a6:	18fb      	adds	r3, r7, r3
 80038a8:	781b      	ldrb	r3, [r3, #0]
}
 80038aa:	0018      	movs	r0, r3
 80038ac:	46bd      	mov	sp, r7
 80038ae:	b004      	add	sp, #16
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	46c0      	nop			; (mov r8, r8)
 80038b4:	ffff00ff 	.word	0xffff00ff

080038b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038c0:	46c0      	nop			; (mov r8, r8)
 80038c2:	46bd      	mov	sp, r7
 80038c4:	b002      	add	sp, #8
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038d0:	46c0      	nop			; (mov r8, r8)
 80038d2:	46bd      	mov	sp, r7
 80038d4:	b002      	add	sp, #8
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038e0:	46c0      	nop			; (mov r8, r8)
 80038e2:	46bd      	mov	sp, r7
 80038e4:	b002      	add	sp, #8
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a30      	ldr	r2, [pc, #192]	; (80039bc <TIM_Base_SetConfig+0xd4>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d008      	beq.n	8003912 <TIM_Base_SetConfig+0x2a>
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	2380      	movs	r3, #128	; 0x80
 8003904:	05db      	lsls	r3, r3, #23
 8003906:	429a      	cmp	r2, r3
 8003908:	d003      	beq.n	8003912 <TIM_Base_SetConfig+0x2a>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a2c      	ldr	r2, [pc, #176]	; (80039c0 <TIM_Base_SetConfig+0xd8>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d108      	bne.n	8003924 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2270      	movs	r2, #112	; 0x70
 8003916:	4393      	bics	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	4313      	orrs	r3, r2
 8003922:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a25      	ldr	r2, [pc, #148]	; (80039bc <TIM_Base_SetConfig+0xd4>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d014      	beq.n	8003956 <TIM_Base_SetConfig+0x6e>
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	2380      	movs	r3, #128	; 0x80
 8003930:	05db      	lsls	r3, r3, #23
 8003932:	429a      	cmp	r2, r3
 8003934:	d00f      	beq.n	8003956 <TIM_Base_SetConfig+0x6e>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a21      	ldr	r2, [pc, #132]	; (80039c0 <TIM_Base_SetConfig+0xd8>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d00b      	beq.n	8003956 <TIM_Base_SetConfig+0x6e>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a20      	ldr	r2, [pc, #128]	; (80039c4 <TIM_Base_SetConfig+0xdc>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d007      	beq.n	8003956 <TIM_Base_SetConfig+0x6e>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a1f      	ldr	r2, [pc, #124]	; (80039c8 <TIM_Base_SetConfig+0xe0>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d003      	beq.n	8003956 <TIM_Base_SetConfig+0x6e>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a1e      	ldr	r2, [pc, #120]	; (80039cc <TIM_Base_SetConfig+0xe4>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d108      	bne.n	8003968 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	4a1d      	ldr	r2, [pc, #116]	; (80039d0 <TIM_Base_SetConfig+0xe8>)
 800395a:	4013      	ands	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	4313      	orrs	r3, r2
 8003966:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2280      	movs	r2, #128	; 0x80
 800396c:	4393      	bics	r3, r2
 800396e:	001a      	movs	r2, r3
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	4313      	orrs	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a0a      	ldr	r2, [pc, #40]	; (80039bc <TIM_Base_SetConfig+0xd4>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d007      	beq.n	80039a6 <TIM_Base_SetConfig+0xbe>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a0b      	ldr	r2, [pc, #44]	; (80039c8 <TIM_Base_SetConfig+0xe0>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d003      	beq.n	80039a6 <TIM_Base_SetConfig+0xbe>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a0a      	ldr	r2, [pc, #40]	; (80039cc <TIM_Base_SetConfig+0xe4>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d103      	bne.n	80039ae <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	691a      	ldr	r2, [r3, #16]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	615a      	str	r2, [r3, #20]
}
 80039b4:	46c0      	nop			; (mov r8, r8)
 80039b6:	46bd      	mov	sp, r7
 80039b8:	b004      	add	sp, #16
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40012c00 	.word	0x40012c00
 80039c0:	40000400 	.word	0x40000400
 80039c4:	40002000 	.word	0x40002000
 80039c8:	40014400 	.word	0x40014400
 80039cc:	40014800 	.word	0x40014800
 80039d0:	fffffcff 	.word	0xfffffcff

080039d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	2201      	movs	r2, #1
 80039e4:	4393      	bics	r3, r2
 80039e6:	001a      	movs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2270      	movs	r2, #112	; 0x70
 8003a02:	4393      	bics	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2203      	movs	r2, #3
 8003a0a:	4393      	bics	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	4393      	bics	r3, r2
 8003a1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a23      	ldr	r2, [pc, #140]	; (8003abc <TIM_OC1_SetConfig+0xe8>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d007      	beq.n	8003a42 <TIM_OC1_SetConfig+0x6e>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a22      	ldr	r2, [pc, #136]	; (8003ac0 <TIM_OC1_SetConfig+0xec>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d003      	beq.n	8003a42 <TIM_OC1_SetConfig+0x6e>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a21      	ldr	r2, [pc, #132]	; (8003ac4 <TIM_OC1_SetConfig+0xf0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d10c      	bne.n	8003a5c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2208      	movs	r2, #8
 8003a46:	4393      	bics	r3, r2
 8003a48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	2204      	movs	r2, #4
 8003a58:	4393      	bics	r3, r2
 8003a5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a17      	ldr	r2, [pc, #92]	; (8003abc <TIM_OC1_SetConfig+0xe8>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d007      	beq.n	8003a74 <TIM_OC1_SetConfig+0xa0>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a16      	ldr	r2, [pc, #88]	; (8003ac0 <TIM_OC1_SetConfig+0xec>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d003      	beq.n	8003a74 <TIM_OC1_SetConfig+0xa0>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a15      	ldr	r2, [pc, #84]	; (8003ac4 <TIM_OC1_SetConfig+0xf0>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d111      	bne.n	8003a98 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	4a14      	ldr	r2, [pc, #80]	; (8003ac8 <TIM_OC1_SetConfig+0xf4>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	4a13      	ldr	r2, [pc, #76]	; (8003acc <TIM_OC1_SetConfig+0xf8>)
 8003a80:	4013      	ands	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	621a      	str	r2, [r3, #32]
}
 8003ab2:	46c0      	nop			; (mov r8, r8)
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	b006      	add	sp, #24
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	46c0      	nop			; (mov r8, r8)
 8003abc:	40012c00 	.word	0x40012c00
 8003ac0:	40014400 	.word	0x40014400
 8003ac4:	40014800 	.word	0x40014800
 8003ac8:	fffffeff 	.word	0xfffffeff
 8003acc:	fffffdff 	.word	0xfffffdff

08003ad0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	2210      	movs	r2, #16
 8003ae0:	4393      	bics	r3, r2
 8003ae2:	001a      	movs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	4a2c      	ldr	r2, [pc, #176]	; (8003bb0 <TIM_OC2_SetConfig+0xe0>)
 8003afe:	4013      	ands	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	4a2b      	ldr	r2, [pc, #172]	; (8003bb4 <TIM_OC2_SetConfig+0xe4>)
 8003b06:	4013      	ands	r3, r2
 8003b08:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	021b      	lsls	r3, r3, #8
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	4393      	bics	r3, r2
 8003b1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a22      	ldr	r2, [pc, #136]	; (8003bb8 <TIM_OC2_SetConfig+0xe8>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d10d      	bne.n	8003b4e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2280      	movs	r2, #128	; 0x80
 8003b36:	4393      	bics	r3, r2
 8003b38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	2240      	movs	r2, #64	; 0x40
 8003b4a:	4393      	bics	r3, r2
 8003b4c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a19      	ldr	r2, [pc, #100]	; (8003bb8 <TIM_OC2_SetConfig+0xe8>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d007      	beq.n	8003b66 <TIM_OC2_SetConfig+0x96>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a18      	ldr	r2, [pc, #96]	; (8003bbc <TIM_OC2_SetConfig+0xec>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d003      	beq.n	8003b66 <TIM_OC2_SetConfig+0x96>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a17      	ldr	r2, [pc, #92]	; (8003bc0 <TIM_OC2_SetConfig+0xf0>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d113      	bne.n	8003b8e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	4a16      	ldr	r2, [pc, #88]	; (8003bc4 <TIM_OC2_SetConfig+0xf4>)
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	4a15      	ldr	r2, [pc, #84]	; (8003bc8 <TIM_OC2_SetConfig+0xf8>)
 8003b72:	4013      	ands	r3, r2
 8003b74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	621a      	str	r2, [r3, #32]
}
 8003ba8:	46c0      	nop			; (mov r8, r8)
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b006      	add	sp, #24
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	ffff8fff 	.word	0xffff8fff
 8003bb4:	fffffcff 	.word	0xfffffcff
 8003bb8:	40012c00 	.word	0x40012c00
 8003bbc:	40014400 	.word	0x40014400
 8003bc0:	40014800 	.word	0x40014800
 8003bc4:	fffffbff 	.word	0xfffffbff
 8003bc8:	fffff7ff 	.word	0xfffff7ff

08003bcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	4a33      	ldr	r2, [pc, #204]	; (8003ca8 <TIM_OC3_SetConfig+0xdc>)
 8003bdc:	401a      	ands	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2270      	movs	r2, #112	; 0x70
 8003bf8:	4393      	bics	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2203      	movs	r2, #3
 8003c00:	4393      	bics	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	4a26      	ldr	r2, [pc, #152]	; (8003cac <TIM_OC3_SetConfig+0xe0>)
 8003c12:	4013      	ands	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	021b      	lsls	r3, r3, #8
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a22      	ldr	r2, [pc, #136]	; (8003cb0 <TIM_OC3_SetConfig+0xe4>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d10d      	bne.n	8003c46 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	4a21      	ldr	r2, [pc, #132]	; (8003cb4 <TIM_OC3_SetConfig+0xe8>)
 8003c2e:	4013      	ands	r3, r2
 8003c30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	021b      	lsls	r3, r3, #8
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	4a1d      	ldr	r2, [pc, #116]	; (8003cb8 <TIM_OC3_SetConfig+0xec>)
 8003c42:	4013      	ands	r3, r2
 8003c44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a19      	ldr	r2, [pc, #100]	; (8003cb0 <TIM_OC3_SetConfig+0xe4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d007      	beq.n	8003c5e <TIM_OC3_SetConfig+0x92>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a1a      	ldr	r2, [pc, #104]	; (8003cbc <TIM_OC3_SetConfig+0xf0>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d003      	beq.n	8003c5e <TIM_OC3_SetConfig+0x92>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a19      	ldr	r2, [pc, #100]	; (8003cc0 <TIM_OC3_SetConfig+0xf4>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d113      	bne.n	8003c86 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	4a18      	ldr	r2, [pc, #96]	; (8003cc4 <TIM_OC3_SetConfig+0xf8>)
 8003c62:	4013      	ands	r3, r2
 8003c64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	4a17      	ldr	r2, [pc, #92]	; (8003cc8 <TIM_OC3_SetConfig+0xfc>)
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	011b      	lsls	r3, r3, #4
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	011b      	lsls	r3, r3, #4
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	621a      	str	r2, [r3, #32]
}
 8003ca0:	46c0      	nop			; (mov r8, r8)
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	b006      	add	sp, #24
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	fffffeff 	.word	0xfffffeff
 8003cac:	fffffdff 	.word	0xfffffdff
 8003cb0:	40012c00 	.word	0x40012c00
 8003cb4:	fffff7ff 	.word	0xfffff7ff
 8003cb8:	fffffbff 	.word	0xfffffbff
 8003cbc:	40014400 	.word	0x40014400
 8003cc0:	40014800 	.word	0x40014800
 8003cc4:	ffffefff 	.word	0xffffefff
 8003cc8:	ffffdfff 	.word	0xffffdfff

08003ccc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	4a26      	ldr	r2, [pc, #152]	; (8003d74 <TIM_OC4_SetConfig+0xa8>)
 8003cdc:	401a      	ands	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4a20      	ldr	r2, [pc, #128]	; (8003d78 <TIM_OC4_SetConfig+0xac>)
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4a1f      	ldr	r2, [pc, #124]	; (8003d7c <TIM_OC4_SetConfig+0xb0>)
 8003d00:	4013      	ands	r3, r2
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	021b      	lsls	r3, r3, #8
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	4a1b      	ldr	r2, [pc, #108]	; (8003d80 <TIM_OC4_SetConfig+0xb4>)
 8003d14:	4013      	ands	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	031b      	lsls	r3, r3, #12
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a17      	ldr	r2, [pc, #92]	; (8003d84 <TIM_OC4_SetConfig+0xb8>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d007      	beq.n	8003d3c <TIM_OC4_SetConfig+0x70>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a16      	ldr	r2, [pc, #88]	; (8003d88 <TIM_OC4_SetConfig+0xbc>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d003      	beq.n	8003d3c <TIM_OC4_SetConfig+0x70>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a15      	ldr	r2, [pc, #84]	; (8003d8c <TIM_OC4_SetConfig+0xc0>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d109      	bne.n	8003d50 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	4a14      	ldr	r2, [pc, #80]	; (8003d90 <TIM_OC4_SetConfig+0xc4>)
 8003d40:	4013      	ands	r3, r2
 8003d42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	019b      	lsls	r3, r3, #6
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	621a      	str	r2, [r3, #32]
}
 8003d6a:	46c0      	nop			; (mov r8, r8)
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	b006      	add	sp, #24
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	46c0      	nop			; (mov r8, r8)
 8003d74:	ffffefff 	.word	0xffffefff
 8003d78:	ffff8fff 	.word	0xffff8fff
 8003d7c:	fffffcff 	.word	0xfffffcff
 8003d80:	ffffdfff 	.word	0xffffdfff
 8003d84:	40012c00 	.word	0x40012c00
 8003d88:	40014400 	.word	0x40014400
 8003d8c:	40014800 	.word	0x40014800
 8003d90:	ffffbfff 	.word	0xffffbfff

08003d94 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
 8003da0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	2201      	movs	r2, #1
 8003da8:	4393      	bics	r3, r2
 8003daa:	001a      	movs	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4a1e      	ldr	r2, [pc, #120]	; (8003e38 <TIM_TI1_SetConfig+0xa4>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d008      	beq.n	8003dd6 <TIM_TI1_SetConfig+0x42>
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	2380      	movs	r3, #128	; 0x80
 8003dc8:	05db      	lsls	r3, r3, #23
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d003      	beq.n	8003dd6 <TIM_TI1_SetConfig+0x42>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	4a1a      	ldr	r2, [pc, #104]	; (8003e3c <TIM_TI1_SetConfig+0xa8>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d101      	bne.n	8003dda <TIM_TI1_SetConfig+0x46>
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e000      	b.n	8003ddc <TIM_TI1_SetConfig+0x48>
 8003dda:	2300      	movs	r3, #0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d008      	beq.n	8003df2 <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	2203      	movs	r2, #3
 8003de4:	4393      	bics	r3, r2
 8003de6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	617b      	str	r3, [r7, #20]
 8003df0:	e003      	b.n	8003dfa <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	2201      	movs	r2, #1
 8003df6:	4313      	orrs	r3, r2
 8003df8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	22f0      	movs	r2, #240	; 0xf0
 8003dfe:	4393      	bics	r3, r2
 8003e00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	011b      	lsls	r3, r3, #4
 8003e06:	22ff      	movs	r2, #255	; 0xff
 8003e08:	4013      	ands	r3, r2
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	220a      	movs	r2, #10
 8003e14:	4393      	bics	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	220a      	movs	r2, #10
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	621a      	str	r2, [r3, #32]
}
 8003e30:	46c0      	nop			; (mov r8, r8)
 8003e32:	46bd      	mov	sp, r7
 8003e34:	b006      	add	sp, #24
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	40012c00 	.word	0x40012c00
 8003e3c:	40000400 	.word	0x40000400

08003e40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	2201      	movs	r2, #1
 8003e58:	4393      	bics	r3, r2
 8003e5a:	001a      	movs	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	22f0      	movs	r2, #240	; 0xf0
 8003e6a:	4393      	bics	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	011b      	lsls	r3, r3, #4
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	220a      	movs	r2, #10
 8003e7c:	4393      	bics	r3, r2
 8003e7e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	621a      	str	r2, [r3, #32]
}
 8003e94:	46c0      	nop			; (mov r8, r8)
 8003e96:	46bd      	mov	sp, r7
 8003e98:	b006      	add	sp, #24
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
 8003ea8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	2210      	movs	r2, #16
 8003eb0:	4393      	bics	r3, r2
 8003eb2:	001a      	movs	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	4a14      	ldr	r2, [pc, #80]	; (8003f18 <TIM_TI2_SetConfig+0x7c>)
 8003ec8:	4013      	ands	r3, r2
 8003eca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	021b      	lsls	r3, r3, #8
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	4a10      	ldr	r2, [pc, #64]	; (8003f1c <TIM_TI2_SetConfig+0x80>)
 8003eda:	4013      	ands	r3, r2
 8003edc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	031b      	lsls	r3, r3, #12
 8003ee2:	041b      	lsls	r3, r3, #16
 8003ee4:	0c1b      	lsrs	r3, r3, #16
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	22a0      	movs	r2, #160	; 0xa0
 8003ef0:	4393      	bics	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	011b      	lsls	r3, r3, #4
 8003ef8:	22a0      	movs	r2, #160	; 0xa0
 8003efa:	4013      	ands	r3, r2
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	621a      	str	r2, [r3, #32]
}
 8003f0e:	46c0      	nop			; (mov r8, r8)
 8003f10:	46bd      	mov	sp, r7
 8003f12:	b006      	add	sp, #24
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	46c0      	nop			; (mov r8, r8)
 8003f18:	fffffcff 	.word	0xfffffcff
 8003f1c:	ffff0fff 	.word	0xffff0fff

08003f20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	2210      	movs	r2, #16
 8003f32:	4393      	bics	r3, r2
 8003f34:	001a      	movs	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	4a0d      	ldr	r2, [pc, #52]	; (8003f80 <TIM_TI2_ConfigInputStage+0x60>)
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	031b      	lsls	r3, r3, #12
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	22a0      	movs	r2, #160	; 0xa0
 8003f5c:	4393      	bics	r3, r2
 8003f5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	011b      	lsls	r3, r3, #4
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	621a      	str	r2, [r3, #32]
}
 8003f76:	46c0      	nop			; (mov r8, r8)
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	b006      	add	sp, #24
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	46c0      	nop			; (mov r8, r8)
 8003f80:	ffff0fff 	.word	0xffff0fff

08003f84 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
 8003f90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	4a19      	ldr	r2, [pc, #100]	; (8003ffc <TIM_TI3_SetConfig+0x78>)
 8003f98:	401a      	ands	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	2203      	movs	r2, #3
 8003fae:	4393      	bics	r3, r2
 8003fb0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	22f0      	movs	r2, #240	; 0xf0
 8003fbe:	4393      	bics	r3, r2
 8003fc0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	011b      	lsls	r3, r3, #4
 8003fc6:	22ff      	movs	r2, #255	; 0xff
 8003fc8:	4013      	ands	r3, r2
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	4a0b      	ldr	r2, [pc, #44]	; (8004000 <TIM_TI3_SetConfig+0x7c>)
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	021a      	lsls	r2, r3, #8
 8003fdc:	23a0      	movs	r3, #160	; 0xa0
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	621a      	str	r2, [r3, #32]
}
 8003ff4:	46c0      	nop			; (mov r8, r8)
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	b006      	add	sp, #24
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	fffffeff 	.word	0xfffffeff
 8004000:	fffff5ff 	.word	0xfffff5ff

08004004 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
 8004010:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	4a1a      	ldr	r2, [pc, #104]	; (8004080 <TIM_TI4_SetConfig+0x7c>)
 8004018:	401a      	ands	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	4a15      	ldr	r2, [pc, #84]	; (8004084 <TIM_TI4_SetConfig+0x80>)
 800402e:	4013      	ands	r3, r2
 8004030:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	021b      	lsls	r3, r3, #8
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	4313      	orrs	r3, r2
 800403a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	4a12      	ldr	r2, [pc, #72]	; (8004088 <TIM_TI4_SetConfig+0x84>)
 8004040:	4013      	ands	r3, r2
 8004042:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	031b      	lsls	r3, r3, #12
 8004048:	041b      	lsls	r3, r3, #16
 800404a:	0c1b      	lsrs	r3, r3, #16
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	4313      	orrs	r3, r2
 8004050:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	4a0d      	ldr	r2, [pc, #52]	; (800408c <TIM_TI4_SetConfig+0x88>)
 8004056:	4013      	ands	r3, r2
 8004058:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	031a      	lsls	r2, r3, #12
 800405e:	23a0      	movs	r3, #160	; 0xa0
 8004060:	021b      	lsls	r3, r3, #8
 8004062:	4013      	ands	r3, r2
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	4313      	orrs	r3, r2
 8004068:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	621a      	str	r2, [r3, #32]
}
 8004076:	46c0      	nop			; (mov r8, r8)
 8004078:	46bd      	mov	sp, r7
 800407a:	b006      	add	sp, #24
 800407c:	bd80      	pop	{r7, pc}
 800407e:	46c0      	nop			; (mov r8, r8)
 8004080:	ffffefff 	.word	0xffffefff
 8004084:	fffffcff 	.word	0xfffffcff
 8004088:	ffff0fff 	.word	0xffff0fff
 800408c:	ffff5fff 	.word	0xffff5fff

08004090 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2270      	movs	r2, #112	; 0x70
 80040a4:	4393      	bics	r3, r2
 80040a6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	2207      	movs	r2, #7
 80040b0:	4313      	orrs	r3, r2
 80040b2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	609a      	str	r2, [r3, #8]
}
 80040ba:	46c0      	nop			; (mov r8, r8)
 80040bc:	46bd      	mov	sp, r7
 80040be:	b004      	add	sp, #16
 80040c0:	bd80      	pop	{r7, pc}
	...

080040c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
 80040d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	4a09      	ldr	r2, [pc, #36]	; (8004100 <TIM_ETR_SetConfig+0x3c>)
 80040dc:	4013      	ands	r3, r2
 80040de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	021a      	lsls	r2, r3, #8
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	431a      	orrs	r2, r3
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	609a      	str	r2, [r3, #8]
}
 80040f8:	46c0      	nop			; (mov r8, r8)
 80040fa:	46bd      	mov	sp, r7
 80040fc:	b006      	add	sp, #24
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	ffff00ff 	.word	0xffff00ff

08004104 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	221f      	movs	r2, #31
 8004114:	4013      	ands	r3, r2
 8004116:	2201      	movs	r2, #1
 8004118:	409a      	lsls	r2, r3
 800411a:	0013      	movs	r3, r2
 800411c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	43d2      	mvns	r2, r2
 8004126:	401a      	ands	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6a1a      	ldr	r2, [r3, #32]
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	211f      	movs	r1, #31
 8004134:	400b      	ands	r3, r1
 8004136:	6879      	ldr	r1, [r7, #4]
 8004138:	4099      	lsls	r1, r3
 800413a:	000b      	movs	r3, r1
 800413c:	431a      	orrs	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	621a      	str	r2, [r3, #32]
}
 8004142:	46c0      	nop			; (mov r8, r8)
 8004144:	46bd      	mov	sp, r7
 8004146:	b006      	add	sp, #24
 8004148:	bd80      	pop	{r7, pc}
	...

0800414c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	223c      	movs	r2, #60	; 0x3c
 800415a:	5c9b      	ldrb	r3, [r3, r2]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d101      	bne.n	8004164 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004160:	2302      	movs	r3, #2
 8004162:	e042      	b.n	80041ea <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	223c      	movs	r2, #60	; 0x3c
 8004168:	2101      	movs	r1, #1
 800416a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	223d      	movs	r2, #61	; 0x3d
 8004170:	2102      	movs	r1, #2
 8004172:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2270      	movs	r2, #112	; 0x70
 8004188:	4393      	bics	r3, r2
 800418a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a14      	ldr	r2, [pc, #80]	; (80041f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d00a      	beq.n	80041be <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	2380      	movs	r3, #128	; 0x80
 80041ae:	05db      	lsls	r3, r3, #23
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d004      	beq.n	80041be <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a0f      	ldr	r2, [pc, #60]	; (80041f8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d10c      	bne.n	80041d8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	2280      	movs	r2, #128	; 0x80
 80041c2:	4393      	bics	r3, r2
 80041c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	68ba      	ldr	r2, [r7, #8]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68ba      	ldr	r2, [r7, #8]
 80041d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	223d      	movs	r2, #61	; 0x3d
 80041dc:	2101      	movs	r1, #1
 80041de:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	223c      	movs	r2, #60	; 0x3c
 80041e4:	2100      	movs	r1, #0
 80041e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	0018      	movs	r0, r3
 80041ec:	46bd      	mov	sp, r7
 80041ee:	b004      	add	sp, #16
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	46c0      	nop			; (mov r8, r8)
 80041f4:	40012c00 	.word	0x40012c00
 80041f8:	40000400 	.word	0x40000400

080041fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004206:	2300      	movs	r3, #0
 8004208:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	223c      	movs	r2, #60	; 0x3c
 800420e:	5c9b      	ldrb	r3, [r3, r2]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d101      	bne.n	8004218 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004214:	2302      	movs	r3, #2
 8004216:	e03e      	b.n	8004296 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	223c      	movs	r2, #60	; 0x3c
 800421c:	2101      	movs	r1, #1
 800421e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	22ff      	movs	r2, #255	; 0xff
 8004224:	4393      	bics	r3, r2
 8004226:	001a      	movs	r2, r3
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	4313      	orrs	r3, r2
 800422e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4a1b      	ldr	r2, [pc, #108]	; (80042a0 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8004234:	401a      	ands	r2, r3
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	4313      	orrs	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	4a18      	ldr	r2, [pc, #96]	; (80042a4 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8004242:	401a      	ands	r2, r3
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	4313      	orrs	r3, r2
 800424a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	4a16      	ldr	r2, [pc, #88]	; (80042a8 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8004250:	401a      	ands	r2, r3
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4313      	orrs	r3, r2
 8004258:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	4a13      	ldr	r2, [pc, #76]	; (80042ac <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800425e:	401a      	ands	r2, r3
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	4313      	orrs	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4a11      	ldr	r2, [pc, #68]	; (80042b0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 800426c:	401a      	ands	r2, r3
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	4313      	orrs	r3, r2
 8004274:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	4a0e      	ldr	r2, [pc, #56]	; (80042b4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800427a:	401a      	ands	r2, r3
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	69db      	ldr	r3, [r3, #28]
 8004280:	4313      	orrs	r3, r2
 8004282:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	223c      	movs	r2, #60	; 0x3c
 8004290:	2100      	movs	r1, #0
 8004292:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	0018      	movs	r0, r3
 8004298:	46bd      	mov	sp, r7
 800429a:	b004      	add	sp, #16
 800429c:	bd80      	pop	{r7, pc}
 800429e:	46c0      	nop			; (mov r8, r8)
 80042a0:	fffffcff 	.word	0xfffffcff
 80042a4:	fffffbff 	.word	0xfffffbff
 80042a8:	fffff7ff 	.word	0xfffff7ff
 80042ac:	ffffefff 	.word	0xffffefff
 80042b0:	ffffdfff 	.word	0xffffdfff
 80042b4:	ffffbfff 	.word	0xffffbfff

080042b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042c0:	46c0      	nop			; (mov r8, r8)
 80042c2:	46bd      	mov	sp, r7
 80042c4:	b002      	add	sp, #8
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042d0:	46c0      	nop			; (mov r8, r8)
 80042d2:	46bd      	mov	sp, r7
 80042d4:	b002      	add	sp, #8
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e044      	b.n	8004374 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d107      	bne.n	8004302 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2278      	movs	r2, #120	; 0x78
 80042f6:	2100      	movs	r1, #0
 80042f8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	0018      	movs	r0, r3
 80042fe:	f7fc ff3b 	bl	8001178 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2224      	movs	r2, #36	; 0x24
 8004306:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2101      	movs	r1, #1
 8004314:	438a      	bics	r2, r1
 8004316:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	0018      	movs	r0, r3
 800431c:	f000 fbcc 	bl	8004ab8 <UART_SetConfig>
 8004320:	0003      	movs	r3, r0
 8004322:	2b01      	cmp	r3, #1
 8004324:	d101      	bne.n	800432a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e024      	b.n	8004374 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	0018      	movs	r0, r3
 8004336:	f000 fcff 	bl	8004d38 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	490d      	ldr	r1, [pc, #52]	; (800437c <HAL_UART_Init+0xa4>)
 8004346:	400a      	ands	r2, r1
 8004348:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	212a      	movs	r1, #42	; 0x2a
 8004356:	438a      	bics	r2, r1
 8004358:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2101      	movs	r1, #1
 8004366:	430a      	orrs	r2, r1
 8004368:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	0018      	movs	r0, r3
 800436e:	f000 fd97 	bl	8004ea0 <UART_CheckIdleState>
 8004372:	0003      	movs	r3, r0
}
 8004374:	0018      	movs	r0, r3
 8004376:	46bd      	mov	sp, r7
 8004378:	b002      	add	sp, #8
 800437a:	bd80      	pop	{r7, pc}
 800437c:	ffffb7ff 	.word	0xffffb7ff

08004380 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b08a      	sub	sp, #40	; 0x28
 8004384:	af02      	add	r7, sp, #8
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	603b      	str	r3, [r7, #0]
 800438c:	1dbb      	adds	r3, r7, #6
 800438e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004394:	2b20      	cmp	r3, #32
 8004396:	d000      	beq.n	800439a <HAL_UART_Transmit+0x1a>
 8004398:	e08d      	b.n	80044b6 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <HAL_UART_Transmit+0x28>
 80043a0:	1dbb      	adds	r3, r7, #6
 80043a2:	881b      	ldrh	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d101      	bne.n	80043ac <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e085      	b.n	80044b8 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	2380      	movs	r3, #128	; 0x80
 80043b2:	015b      	lsls	r3, r3, #5
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d109      	bne.n	80043cc <HAL_UART_Transmit+0x4c>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d105      	bne.n	80043cc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	2201      	movs	r2, #1
 80043c4:	4013      	ands	r3, r2
 80043c6:	d001      	beq.n	80043cc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e075      	b.n	80044b8 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2284      	movs	r2, #132	; 0x84
 80043d0:	2100      	movs	r1, #0
 80043d2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2221      	movs	r2, #33	; 0x21
 80043d8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043da:	f7fd f841 	bl	8001460 <HAL_GetTick>
 80043de:	0003      	movs	r3, r0
 80043e0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	1dba      	adds	r2, r7, #6
 80043e6:	2150      	movs	r1, #80	; 0x50
 80043e8:	8812      	ldrh	r2, [r2, #0]
 80043ea:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	1dba      	adds	r2, r7, #6
 80043f0:	2152      	movs	r1, #82	; 0x52
 80043f2:	8812      	ldrh	r2, [r2, #0]
 80043f4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	689a      	ldr	r2, [r3, #8]
 80043fa:	2380      	movs	r3, #128	; 0x80
 80043fc:	015b      	lsls	r3, r3, #5
 80043fe:	429a      	cmp	r2, r3
 8004400:	d108      	bne.n	8004414 <HAL_UART_Transmit+0x94>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d104      	bne.n	8004414 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800440a:	2300      	movs	r3, #0
 800440c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	61bb      	str	r3, [r7, #24]
 8004412:	e003      	b.n	800441c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004418:	2300      	movs	r3, #0
 800441a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800441c:	e030      	b.n	8004480 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	0013      	movs	r3, r2
 8004428:	2200      	movs	r2, #0
 800442a:	2180      	movs	r1, #128	; 0x80
 800442c:	f000 fde0 	bl	8004ff0 <UART_WaitOnFlagUntilTimeout>
 8004430:	1e03      	subs	r3, r0, #0
 8004432:	d004      	beq.n	800443e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2220      	movs	r2, #32
 8004438:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e03c      	b.n	80044b8 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10b      	bne.n	800445c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	881a      	ldrh	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	05d2      	lsls	r2, r2, #23
 800444e:	0dd2      	lsrs	r2, r2, #23
 8004450:	b292      	uxth	r2, r2
 8004452:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	3302      	adds	r3, #2
 8004458:	61bb      	str	r3, [r7, #24]
 800445a:	e008      	b.n	800446e <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	781a      	ldrb	r2, [r3, #0]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	b292      	uxth	r2, r2
 8004466:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	3301      	adds	r3, #1
 800446c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2252      	movs	r2, #82	; 0x52
 8004472:	5a9b      	ldrh	r3, [r3, r2]
 8004474:	b29b      	uxth	r3, r3
 8004476:	3b01      	subs	r3, #1
 8004478:	b299      	uxth	r1, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2252      	movs	r2, #82	; 0x52
 800447e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2252      	movs	r2, #82	; 0x52
 8004484:	5a9b      	ldrh	r3, [r3, r2]
 8004486:	b29b      	uxth	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1c8      	bne.n	800441e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	9300      	str	r3, [sp, #0]
 8004494:	0013      	movs	r3, r2
 8004496:	2200      	movs	r2, #0
 8004498:	2140      	movs	r1, #64	; 0x40
 800449a:	f000 fda9 	bl	8004ff0 <UART_WaitOnFlagUntilTimeout>
 800449e:	1e03      	subs	r3, r0, #0
 80044a0:	d004      	beq.n	80044ac <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2220      	movs	r2, #32
 80044a6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e005      	b.n	80044b8 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2220      	movs	r2, #32
 80044b0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	e000      	b.n	80044b8 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 80044b6:	2302      	movs	r3, #2
  }
}
 80044b8:	0018      	movs	r0, r3
 80044ba:	46bd      	mov	sp, r7
 80044bc:	b008      	add	sp, #32
 80044be:	bd80      	pop	{r7, pc}

080044c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044c0:	b590      	push	{r4, r7, lr}
 80044c2:	b0ab      	sub	sp, #172	; 0xac
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	22a4      	movs	r2, #164	; 0xa4
 80044d0:	18b9      	adds	r1, r7, r2
 80044d2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	20a0      	movs	r0, #160	; 0xa0
 80044dc:	1839      	adds	r1, r7, r0
 80044de:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	219c      	movs	r1, #156	; 0x9c
 80044e8:	1879      	adds	r1, r7, r1
 80044ea:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80044ec:	0011      	movs	r1, r2
 80044ee:	18bb      	adds	r3, r7, r2
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a99      	ldr	r2, [pc, #612]	; (8004758 <HAL_UART_IRQHandler+0x298>)
 80044f4:	4013      	ands	r3, r2
 80044f6:	2298      	movs	r2, #152	; 0x98
 80044f8:	18bc      	adds	r4, r7, r2
 80044fa:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80044fc:	18bb      	adds	r3, r7, r2
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d114      	bne.n	800452e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004504:	187b      	adds	r3, r7, r1
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2220      	movs	r2, #32
 800450a:	4013      	ands	r3, r2
 800450c:	d00f      	beq.n	800452e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800450e:	183b      	adds	r3, r7, r0
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2220      	movs	r2, #32
 8004514:	4013      	ands	r3, r2
 8004516:	d00a      	beq.n	800452e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800451c:	2b00      	cmp	r3, #0
 800451e:	d100      	bne.n	8004522 <HAL_UART_IRQHandler+0x62>
 8004520:	e29e      	b.n	8004a60 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	0010      	movs	r0, r2
 800452a:	4798      	blx	r3
      }
      return;
 800452c:	e298      	b.n	8004a60 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800452e:	2398      	movs	r3, #152	; 0x98
 8004530:	18fb      	adds	r3, r7, r3
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d100      	bne.n	800453a <HAL_UART_IRQHandler+0x7a>
 8004538:	e114      	b.n	8004764 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800453a:	239c      	movs	r3, #156	; 0x9c
 800453c:	18fb      	adds	r3, r7, r3
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2201      	movs	r2, #1
 8004542:	4013      	ands	r3, r2
 8004544:	d106      	bne.n	8004554 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004546:	23a0      	movs	r3, #160	; 0xa0
 8004548:	18fb      	adds	r3, r7, r3
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a83      	ldr	r2, [pc, #524]	; (800475c <HAL_UART_IRQHandler+0x29c>)
 800454e:	4013      	ands	r3, r2
 8004550:	d100      	bne.n	8004554 <HAL_UART_IRQHandler+0x94>
 8004552:	e107      	b.n	8004764 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004554:	23a4      	movs	r3, #164	; 0xa4
 8004556:	18fb      	adds	r3, r7, r3
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2201      	movs	r2, #1
 800455c:	4013      	ands	r3, r2
 800455e:	d012      	beq.n	8004586 <HAL_UART_IRQHandler+0xc6>
 8004560:	23a0      	movs	r3, #160	; 0xa0
 8004562:	18fb      	adds	r3, r7, r3
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	2380      	movs	r3, #128	; 0x80
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	4013      	ands	r3, r2
 800456c:	d00b      	beq.n	8004586 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2201      	movs	r2, #1
 8004574:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2284      	movs	r2, #132	; 0x84
 800457a:	589b      	ldr	r3, [r3, r2]
 800457c:	2201      	movs	r2, #1
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2184      	movs	r1, #132	; 0x84
 8004584:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004586:	23a4      	movs	r3, #164	; 0xa4
 8004588:	18fb      	adds	r3, r7, r3
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2202      	movs	r2, #2
 800458e:	4013      	ands	r3, r2
 8004590:	d011      	beq.n	80045b6 <HAL_UART_IRQHandler+0xf6>
 8004592:	239c      	movs	r3, #156	; 0x9c
 8004594:	18fb      	adds	r3, r7, r3
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2201      	movs	r2, #1
 800459a:	4013      	ands	r3, r2
 800459c:	d00b      	beq.n	80045b6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2202      	movs	r2, #2
 80045a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2284      	movs	r2, #132	; 0x84
 80045aa:	589b      	ldr	r3, [r3, r2]
 80045ac:	2204      	movs	r2, #4
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2184      	movs	r1, #132	; 0x84
 80045b4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045b6:	23a4      	movs	r3, #164	; 0xa4
 80045b8:	18fb      	adds	r3, r7, r3
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2204      	movs	r2, #4
 80045be:	4013      	ands	r3, r2
 80045c0:	d011      	beq.n	80045e6 <HAL_UART_IRQHandler+0x126>
 80045c2:	239c      	movs	r3, #156	; 0x9c
 80045c4:	18fb      	adds	r3, r7, r3
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2201      	movs	r2, #1
 80045ca:	4013      	ands	r3, r2
 80045cc:	d00b      	beq.n	80045e6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2204      	movs	r2, #4
 80045d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2284      	movs	r2, #132	; 0x84
 80045da:	589b      	ldr	r3, [r3, r2]
 80045dc:	2202      	movs	r2, #2
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2184      	movs	r1, #132	; 0x84
 80045e4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80045e6:	23a4      	movs	r3, #164	; 0xa4
 80045e8:	18fb      	adds	r3, r7, r3
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2208      	movs	r2, #8
 80045ee:	4013      	ands	r3, r2
 80045f0:	d017      	beq.n	8004622 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80045f2:	23a0      	movs	r3, #160	; 0xa0
 80045f4:	18fb      	adds	r3, r7, r3
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2220      	movs	r2, #32
 80045fa:	4013      	ands	r3, r2
 80045fc:	d105      	bne.n	800460a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80045fe:	239c      	movs	r3, #156	; 0x9c
 8004600:	18fb      	adds	r3, r7, r3
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2201      	movs	r2, #1
 8004606:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004608:	d00b      	beq.n	8004622 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2208      	movs	r2, #8
 8004610:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2284      	movs	r2, #132	; 0x84
 8004616:	589b      	ldr	r3, [r3, r2]
 8004618:	2208      	movs	r2, #8
 800461a:	431a      	orrs	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2184      	movs	r1, #132	; 0x84
 8004620:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004622:	23a4      	movs	r3, #164	; 0xa4
 8004624:	18fb      	adds	r3, r7, r3
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	2380      	movs	r3, #128	; 0x80
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	4013      	ands	r3, r2
 800462e:	d013      	beq.n	8004658 <HAL_UART_IRQHandler+0x198>
 8004630:	23a0      	movs	r3, #160	; 0xa0
 8004632:	18fb      	adds	r3, r7, r3
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	2380      	movs	r3, #128	; 0x80
 8004638:	04db      	lsls	r3, r3, #19
 800463a:	4013      	ands	r3, r2
 800463c:	d00c      	beq.n	8004658 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2280      	movs	r2, #128	; 0x80
 8004644:	0112      	lsls	r2, r2, #4
 8004646:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2284      	movs	r2, #132	; 0x84
 800464c:	589b      	ldr	r3, [r3, r2]
 800464e:	2220      	movs	r2, #32
 8004650:	431a      	orrs	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2184      	movs	r1, #132	; 0x84
 8004656:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2284      	movs	r2, #132	; 0x84
 800465c:	589b      	ldr	r3, [r3, r2]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d100      	bne.n	8004664 <HAL_UART_IRQHandler+0x1a4>
 8004662:	e1ff      	b.n	8004a64 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004664:	23a4      	movs	r3, #164	; 0xa4
 8004666:	18fb      	adds	r3, r7, r3
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2220      	movs	r2, #32
 800466c:	4013      	ands	r3, r2
 800466e:	d00e      	beq.n	800468e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004670:	23a0      	movs	r3, #160	; 0xa0
 8004672:	18fb      	adds	r3, r7, r3
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2220      	movs	r2, #32
 8004678:	4013      	ands	r3, r2
 800467a:	d008      	beq.n	800468e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004680:	2b00      	cmp	r3, #0
 8004682:	d004      	beq.n	800468e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	0010      	movs	r0, r2
 800468c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2284      	movs	r2, #132	; 0x84
 8004692:	589b      	ldr	r3, [r3, r2]
 8004694:	2194      	movs	r1, #148	; 0x94
 8004696:	187a      	adds	r2, r7, r1
 8004698:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	2240      	movs	r2, #64	; 0x40
 80046a2:	4013      	ands	r3, r2
 80046a4:	2b40      	cmp	r3, #64	; 0x40
 80046a6:	d004      	beq.n	80046b2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80046a8:	187b      	adds	r3, r7, r1
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2228      	movs	r2, #40	; 0x28
 80046ae:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046b0:	d047      	beq.n	8004742 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	0018      	movs	r0, r3
 80046b6:	f000 fd05 	bl	80050c4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	2240      	movs	r2, #64	; 0x40
 80046c2:	4013      	ands	r3, r2
 80046c4:	2b40      	cmp	r3, #64	; 0x40
 80046c6:	d137      	bne.n	8004738 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046c8:	f3ef 8310 	mrs	r3, PRIMASK
 80046cc:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80046ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046d0:	2090      	movs	r0, #144	; 0x90
 80046d2:	183a      	adds	r2, r7, r0
 80046d4:	6013      	str	r3, [r2, #0]
 80046d6:	2301      	movs	r3, #1
 80046d8:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046dc:	f383 8810 	msr	PRIMASK, r3
}
 80046e0:	46c0      	nop			; (mov r8, r8)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2140      	movs	r1, #64	; 0x40
 80046ee:	438a      	bics	r2, r1
 80046f0:	609a      	str	r2, [r3, #8]
 80046f2:	183b      	adds	r3, r7, r0
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046fa:	f383 8810 	msr	PRIMASK, r3
}
 80046fe:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004704:	2b00      	cmp	r3, #0
 8004706:	d012      	beq.n	800472e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800470c:	4a14      	ldr	r2, [pc, #80]	; (8004760 <HAL_UART_IRQHandler+0x2a0>)
 800470e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004714:	0018      	movs	r0, r3
 8004716:	f7fd fb33 	bl	8001d80 <HAL_DMA_Abort_IT>
 800471a:	1e03      	subs	r3, r0, #0
 800471c:	d01a      	beq.n	8004754 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004722:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004728:	0018      	movs	r0, r3
 800472a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800472c:	e012      	b.n	8004754 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	0018      	movs	r0, r3
 8004732:	f000 f9ad 	bl	8004a90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004736:	e00d      	b.n	8004754 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	0018      	movs	r0, r3
 800473c:	f000 f9a8 	bl	8004a90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004740:	e008      	b.n	8004754 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	0018      	movs	r0, r3
 8004746:	f000 f9a3 	bl	8004a90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2284      	movs	r2, #132	; 0x84
 800474e:	2100      	movs	r1, #0
 8004750:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004752:	e187      	b.n	8004a64 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004754:	46c0      	nop			; (mov r8, r8)
    return;
 8004756:	e185      	b.n	8004a64 <HAL_UART_IRQHandler+0x5a4>
 8004758:	0000080f 	.word	0x0000080f
 800475c:	04000120 	.word	0x04000120
 8004760:	0800518d 	.word	0x0800518d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004768:	2b01      	cmp	r3, #1
 800476a:	d000      	beq.n	800476e <HAL_UART_IRQHandler+0x2ae>
 800476c:	e139      	b.n	80049e2 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800476e:	23a4      	movs	r3, #164	; 0xa4
 8004770:	18fb      	adds	r3, r7, r3
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2210      	movs	r2, #16
 8004776:	4013      	ands	r3, r2
 8004778:	d100      	bne.n	800477c <HAL_UART_IRQHandler+0x2bc>
 800477a:	e132      	b.n	80049e2 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800477c:	23a0      	movs	r3, #160	; 0xa0
 800477e:	18fb      	adds	r3, r7, r3
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2210      	movs	r2, #16
 8004784:	4013      	ands	r3, r2
 8004786:	d100      	bne.n	800478a <HAL_UART_IRQHandler+0x2ca>
 8004788:	e12b      	b.n	80049e2 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2210      	movs	r2, #16
 8004790:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	2240      	movs	r2, #64	; 0x40
 800479a:	4013      	ands	r3, r2
 800479c:	2b40      	cmp	r3, #64	; 0x40
 800479e:	d000      	beq.n	80047a2 <HAL_UART_IRQHandler+0x2e2>
 80047a0:	e09f      	b.n	80048e2 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	217e      	movs	r1, #126	; 0x7e
 80047ac:	187b      	adds	r3, r7, r1
 80047ae:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80047b0:	187b      	adds	r3, r7, r1
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d100      	bne.n	80047ba <HAL_UART_IRQHandler+0x2fa>
 80047b8:	e156      	b.n	8004a68 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2258      	movs	r2, #88	; 0x58
 80047be:	5a9b      	ldrh	r3, [r3, r2]
 80047c0:	187a      	adds	r2, r7, r1
 80047c2:	8812      	ldrh	r2, [r2, #0]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d300      	bcc.n	80047ca <HAL_UART_IRQHandler+0x30a>
 80047c8:	e14e      	b.n	8004a68 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	187a      	adds	r2, r7, r1
 80047ce:	215a      	movs	r1, #90	; 0x5a
 80047d0:	8812      	ldrh	r2, [r2, #0]
 80047d2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	2b20      	cmp	r3, #32
 80047dc:	d06f      	beq.n	80048be <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047de:	f3ef 8310 	mrs	r3, PRIMASK
 80047e2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80047e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047e6:	67bb      	str	r3, [r7, #120]	; 0x78
 80047e8:	2301      	movs	r3, #1
 80047ea:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ee:	f383 8810 	msr	PRIMASK, r3
}
 80047f2:	46c0      	nop			; (mov r8, r8)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	499e      	ldr	r1, [pc, #632]	; (8004a78 <HAL_UART_IRQHandler+0x5b8>)
 8004800:	400a      	ands	r2, r1
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004806:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480a:	f383 8810 	msr	PRIMASK, r3
}
 800480e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004810:	f3ef 8310 	mrs	r3, PRIMASK
 8004814:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004818:	677b      	str	r3, [r7, #116]	; 0x74
 800481a:	2301      	movs	r3, #1
 800481c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800481e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004820:	f383 8810 	msr	PRIMASK, r3
}
 8004824:	46c0      	nop			; (mov r8, r8)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	689a      	ldr	r2, [r3, #8]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2101      	movs	r1, #1
 8004832:	438a      	bics	r2, r1
 8004834:	609a      	str	r2, [r3, #8]
 8004836:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004838:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800483a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800483c:	f383 8810 	msr	PRIMASK, r3
}
 8004840:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004842:	f3ef 8310 	mrs	r3, PRIMASK
 8004846:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004848:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800484a:	673b      	str	r3, [r7, #112]	; 0x70
 800484c:	2301      	movs	r3, #1
 800484e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004852:	f383 8810 	msr	PRIMASK, r3
}
 8004856:	46c0      	nop			; (mov r8, r8)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689a      	ldr	r2, [r3, #8]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2140      	movs	r1, #64	; 0x40
 8004864:	438a      	bics	r2, r1
 8004866:	609a      	str	r2, [r3, #8]
 8004868:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800486a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800486c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800486e:	f383 8810 	msr	PRIMASK, r3
}
 8004872:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2280      	movs	r2, #128	; 0x80
 8004878:	2120      	movs	r1, #32
 800487a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004882:	f3ef 8310 	mrs	r3, PRIMASK
 8004886:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004888:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800488a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800488c:	2301      	movs	r3, #1
 800488e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004890:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004892:	f383 8810 	msr	PRIMASK, r3
}
 8004896:	46c0      	nop			; (mov r8, r8)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2110      	movs	r1, #16
 80048a4:	438a      	bics	r2, r1
 80048a6:	601a      	str	r2, [r3, #0]
 80048a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048ae:	f383 8810 	msr	PRIMASK, r3
}
 80048b2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048b8:	0018      	movs	r0, r3
 80048ba:	f7fd fa29 	bl	8001d10 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2202      	movs	r2, #2
 80048c2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2258      	movs	r2, #88	; 0x58
 80048c8:	5a9a      	ldrh	r2, [r3, r2]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	215a      	movs	r1, #90	; 0x5a
 80048ce:	5a5b      	ldrh	r3, [r3, r1]
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	0011      	movs	r1, r2
 80048da:	0018      	movs	r0, r3
 80048dc:	f000 f8e0 	bl	8004aa0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80048e0:	e0c2      	b.n	8004a68 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2258      	movs	r2, #88	; 0x58
 80048e6:	5a99      	ldrh	r1, [r3, r2]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	225a      	movs	r2, #90	; 0x5a
 80048ec:	5a9b      	ldrh	r3, [r3, r2]
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	208e      	movs	r0, #142	; 0x8e
 80048f2:	183b      	adds	r3, r7, r0
 80048f4:	1a8a      	subs	r2, r1, r2
 80048f6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	225a      	movs	r2, #90	; 0x5a
 80048fc:	5a9b      	ldrh	r3, [r3, r2]
 80048fe:	b29b      	uxth	r3, r3
 8004900:	2b00      	cmp	r3, #0
 8004902:	d100      	bne.n	8004906 <HAL_UART_IRQHandler+0x446>
 8004904:	e0b2      	b.n	8004a6c <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8004906:	183b      	adds	r3, r7, r0
 8004908:	881b      	ldrh	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d100      	bne.n	8004910 <HAL_UART_IRQHandler+0x450>
 800490e:	e0ad      	b.n	8004a6c <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004910:	f3ef 8310 	mrs	r3, PRIMASK
 8004914:	60fb      	str	r3, [r7, #12]
  return(result);
 8004916:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004918:	2488      	movs	r4, #136	; 0x88
 800491a:	193a      	adds	r2, r7, r4
 800491c:	6013      	str	r3, [r2, #0]
 800491e:	2301      	movs	r3, #1
 8004920:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	f383 8810 	msr	PRIMASK, r3
}
 8004928:	46c0      	nop			; (mov r8, r8)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4951      	ldr	r1, [pc, #324]	; (8004a7c <HAL_UART_IRQHandler+0x5bc>)
 8004936:	400a      	ands	r2, r1
 8004938:	601a      	str	r2, [r3, #0]
 800493a:	193b      	adds	r3, r7, r4
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f383 8810 	msr	PRIMASK, r3
}
 8004946:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004948:	f3ef 8310 	mrs	r3, PRIMASK
 800494c:	61bb      	str	r3, [r7, #24]
  return(result);
 800494e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004950:	2484      	movs	r4, #132	; 0x84
 8004952:	193a      	adds	r2, r7, r4
 8004954:	6013      	str	r3, [r2, #0]
 8004956:	2301      	movs	r3, #1
 8004958:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	f383 8810 	msr	PRIMASK, r3
}
 8004960:	46c0      	nop			; (mov r8, r8)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2101      	movs	r1, #1
 800496e:	438a      	bics	r2, r1
 8004970:	609a      	str	r2, [r3, #8]
 8004972:	193b      	adds	r3, r7, r4
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004978:	6a3b      	ldr	r3, [r7, #32]
 800497a:	f383 8810 	msr	PRIMASK, r3
}
 800497e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2280      	movs	r2, #128	; 0x80
 8004984:	2120      	movs	r1, #32
 8004986:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004994:	f3ef 8310 	mrs	r3, PRIMASK
 8004998:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800499c:	2480      	movs	r4, #128	; 0x80
 800499e:	193a      	adds	r2, r7, r4
 80049a0:	6013      	str	r3, [r2, #0]
 80049a2:	2301      	movs	r3, #1
 80049a4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a8:	f383 8810 	msr	PRIMASK, r3
}
 80049ac:	46c0      	nop			; (mov r8, r8)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2110      	movs	r1, #16
 80049ba:	438a      	bics	r2, r1
 80049bc:	601a      	str	r2, [r3, #0]
 80049be:	193b      	adds	r3, r7, r4
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c6:	f383 8810 	msr	PRIMASK, r3
}
 80049ca:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049d2:	183b      	adds	r3, r7, r0
 80049d4:	881a      	ldrh	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	0011      	movs	r1, r2
 80049da:	0018      	movs	r0, r3
 80049dc:	f000 f860 	bl	8004aa0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80049e0:	e044      	b.n	8004a6c <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80049e2:	23a4      	movs	r3, #164	; 0xa4
 80049e4:	18fb      	adds	r3, r7, r3
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	2380      	movs	r3, #128	; 0x80
 80049ea:	035b      	lsls	r3, r3, #13
 80049ec:	4013      	ands	r3, r2
 80049ee:	d010      	beq.n	8004a12 <HAL_UART_IRQHandler+0x552>
 80049f0:	239c      	movs	r3, #156	; 0x9c
 80049f2:	18fb      	adds	r3, r7, r3
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	2380      	movs	r3, #128	; 0x80
 80049f8:	03db      	lsls	r3, r3, #15
 80049fa:	4013      	ands	r3, r2
 80049fc:	d009      	beq.n	8004a12 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2280      	movs	r2, #128	; 0x80
 8004a04:	0352      	lsls	r2, r2, #13
 8004a06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	0018      	movs	r0, r3
 8004a0c:	f000 fc00 	bl	8005210 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a10:	e02f      	b.n	8004a72 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004a12:	23a4      	movs	r3, #164	; 0xa4
 8004a14:	18fb      	adds	r3, r7, r3
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2280      	movs	r2, #128	; 0x80
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	d00f      	beq.n	8004a3e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004a1e:	23a0      	movs	r3, #160	; 0xa0
 8004a20:	18fb      	adds	r3, r7, r3
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2280      	movs	r2, #128	; 0x80
 8004a26:	4013      	ands	r3, r2
 8004a28:	d009      	beq.n	8004a3e <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d01e      	beq.n	8004a70 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	0010      	movs	r0, r2
 8004a3a:	4798      	blx	r3
    }
    return;
 8004a3c:	e018      	b.n	8004a70 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a3e:	23a4      	movs	r3, #164	; 0xa4
 8004a40:	18fb      	adds	r3, r7, r3
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2240      	movs	r2, #64	; 0x40
 8004a46:	4013      	ands	r3, r2
 8004a48:	d013      	beq.n	8004a72 <HAL_UART_IRQHandler+0x5b2>
 8004a4a:	23a0      	movs	r3, #160	; 0xa0
 8004a4c:	18fb      	adds	r3, r7, r3
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2240      	movs	r2, #64	; 0x40
 8004a52:	4013      	ands	r3, r2
 8004a54:	d00d      	beq.n	8004a72 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	0018      	movs	r0, r3
 8004a5a:	f000 fbae 	bl	80051ba <UART_EndTransmit_IT>
    return;
 8004a5e:	e008      	b.n	8004a72 <HAL_UART_IRQHandler+0x5b2>
      return;
 8004a60:	46c0      	nop			; (mov r8, r8)
 8004a62:	e006      	b.n	8004a72 <HAL_UART_IRQHandler+0x5b2>
    return;
 8004a64:	46c0      	nop			; (mov r8, r8)
 8004a66:	e004      	b.n	8004a72 <HAL_UART_IRQHandler+0x5b2>
      return;
 8004a68:	46c0      	nop			; (mov r8, r8)
 8004a6a:	e002      	b.n	8004a72 <HAL_UART_IRQHandler+0x5b2>
      return;
 8004a6c:	46c0      	nop			; (mov r8, r8)
 8004a6e:	e000      	b.n	8004a72 <HAL_UART_IRQHandler+0x5b2>
    return;
 8004a70:	46c0      	nop			; (mov r8, r8)
  }

}
 8004a72:	46bd      	mov	sp, r7
 8004a74:	b02b      	add	sp, #172	; 0xac
 8004a76:	bd90      	pop	{r4, r7, pc}
 8004a78:	fffffeff 	.word	0xfffffeff
 8004a7c:	fffffedf 	.word	0xfffffedf

08004a80 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004a88:	46c0      	nop			; (mov r8, r8)
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	b002      	add	sp, #8
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a98:	46c0      	nop			; (mov r8, r8)
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	b002      	add	sp, #8
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	000a      	movs	r2, r1
 8004aaa:	1cbb      	adds	r3, r7, #2
 8004aac:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004aae:	46c0      	nop			; (mov r8, r8)
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	b002      	add	sp, #8
 8004ab4:	bd80      	pop	{r7, pc}
	...

08004ab8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b088      	sub	sp, #32
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ac0:	231e      	movs	r3, #30
 8004ac2:	18fb      	adds	r3, r7, r3
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689a      	ldr	r2, [r3, #8]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	69db      	ldr	r3, [r3, #28]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a8d      	ldr	r2, [pc, #564]	; (8004d1c <UART_SetConfig+0x264>)
 8004ae8:	4013      	ands	r3, r2
 8004aea:	0019      	movs	r1, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	4a88      	ldr	r2, [pc, #544]	; (8004d20 <UART_SetConfig+0x268>)
 8004afe:	4013      	ands	r3, r2
 8004b00:	0019      	movs	r1, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	68da      	ldr	r2, [r3, #12]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a1b      	ldr	r3, [r3, #32]
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	4a7f      	ldr	r2, [pc, #508]	; (8004d24 <UART_SetConfig+0x26c>)
 8004b26:	4013      	ands	r3, r2
 8004b28:	0019      	movs	r1, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a7b      	ldr	r2, [pc, #492]	; (8004d28 <UART_SetConfig+0x270>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d127      	bne.n	8004b8e <UART_SetConfig+0xd6>
 8004b3e:	4b7b      	ldr	r3, [pc, #492]	; (8004d2c <UART_SetConfig+0x274>)
 8004b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b42:	2203      	movs	r2, #3
 8004b44:	4013      	ands	r3, r2
 8004b46:	2b03      	cmp	r3, #3
 8004b48:	d00d      	beq.n	8004b66 <UART_SetConfig+0xae>
 8004b4a:	d81b      	bhi.n	8004b84 <UART_SetConfig+0xcc>
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d014      	beq.n	8004b7a <UART_SetConfig+0xc2>
 8004b50:	d818      	bhi.n	8004b84 <UART_SetConfig+0xcc>
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d002      	beq.n	8004b5c <UART_SetConfig+0xa4>
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d00a      	beq.n	8004b70 <UART_SetConfig+0xb8>
 8004b5a:	e013      	b.n	8004b84 <UART_SetConfig+0xcc>
 8004b5c:	231f      	movs	r3, #31
 8004b5e:	18fb      	adds	r3, r7, r3
 8004b60:	2200      	movs	r2, #0
 8004b62:	701a      	strb	r2, [r3, #0]
 8004b64:	e021      	b.n	8004baa <UART_SetConfig+0xf2>
 8004b66:	231f      	movs	r3, #31
 8004b68:	18fb      	adds	r3, r7, r3
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	701a      	strb	r2, [r3, #0]
 8004b6e:	e01c      	b.n	8004baa <UART_SetConfig+0xf2>
 8004b70:	231f      	movs	r3, #31
 8004b72:	18fb      	adds	r3, r7, r3
 8004b74:	2204      	movs	r2, #4
 8004b76:	701a      	strb	r2, [r3, #0]
 8004b78:	e017      	b.n	8004baa <UART_SetConfig+0xf2>
 8004b7a:	231f      	movs	r3, #31
 8004b7c:	18fb      	adds	r3, r7, r3
 8004b7e:	2208      	movs	r2, #8
 8004b80:	701a      	strb	r2, [r3, #0]
 8004b82:	e012      	b.n	8004baa <UART_SetConfig+0xf2>
 8004b84:	231f      	movs	r3, #31
 8004b86:	18fb      	adds	r3, r7, r3
 8004b88:	2210      	movs	r2, #16
 8004b8a:	701a      	strb	r2, [r3, #0]
 8004b8c:	e00d      	b.n	8004baa <UART_SetConfig+0xf2>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a67      	ldr	r2, [pc, #412]	; (8004d30 <UART_SetConfig+0x278>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d104      	bne.n	8004ba2 <UART_SetConfig+0xea>
 8004b98:	231f      	movs	r3, #31
 8004b9a:	18fb      	adds	r3, r7, r3
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	701a      	strb	r2, [r3, #0]
 8004ba0:	e003      	b.n	8004baa <UART_SetConfig+0xf2>
 8004ba2:	231f      	movs	r3, #31
 8004ba4:	18fb      	adds	r3, r7, r3
 8004ba6:	2210      	movs	r2, #16
 8004ba8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	69da      	ldr	r2, [r3, #28]
 8004bae:	2380      	movs	r3, #128	; 0x80
 8004bb0:	021b      	lsls	r3, r3, #8
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d15c      	bne.n	8004c70 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8004bb6:	231f      	movs	r3, #31
 8004bb8:	18fb      	adds	r3, r7, r3
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	2b08      	cmp	r3, #8
 8004bbe:	d015      	beq.n	8004bec <UART_SetConfig+0x134>
 8004bc0:	dc18      	bgt.n	8004bf4 <UART_SetConfig+0x13c>
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	d00d      	beq.n	8004be2 <UART_SetConfig+0x12a>
 8004bc6:	dc15      	bgt.n	8004bf4 <UART_SetConfig+0x13c>
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d002      	beq.n	8004bd2 <UART_SetConfig+0x11a>
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d005      	beq.n	8004bdc <UART_SetConfig+0x124>
 8004bd0:	e010      	b.n	8004bf4 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bd2:	f7fd ff5f 	bl	8002a94 <HAL_RCC_GetPCLK1Freq>
 8004bd6:	0003      	movs	r3, r0
 8004bd8:	61bb      	str	r3, [r7, #24]
        break;
 8004bda:	e012      	b.n	8004c02 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bdc:	4b55      	ldr	r3, [pc, #340]	; (8004d34 <UART_SetConfig+0x27c>)
 8004bde:	61bb      	str	r3, [r7, #24]
        break;
 8004be0:	e00f      	b.n	8004c02 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004be2:	f7fd fedb 	bl	800299c <HAL_RCC_GetSysClockFreq>
 8004be6:	0003      	movs	r3, r0
 8004be8:	61bb      	str	r3, [r7, #24]
        break;
 8004bea:	e00a      	b.n	8004c02 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bec:	2380      	movs	r3, #128	; 0x80
 8004bee:	021b      	lsls	r3, r3, #8
 8004bf0:	61bb      	str	r3, [r7, #24]
        break;
 8004bf2:	e006      	b.n	8004c02 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004bf8:	231e      	movs	r3, #30
 8004bfa:	18fb      	adds	r3, r7, r3
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	701a      	strb	r2, [r3, #0]
        break;
 8004c00:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d100      	bne.n	8004c0a <UART_SetConfig+0x152>
 8004c08:	e07a      	b.n	8004d00 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	005a      	lsls	r2, r3, #1
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	085b      	lsrs	r3, r3, #1
 8004c14:	18d2      	adds	r2, r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	0019      	movs	r1, r3
 8004c1c:	0010      	movs	r0, r2
 8004c1e:	f7fb fa7d 	bl	800011c <__udivsi3>
 8004c22:	0003      	movs	r3, r0
 8004c24:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	2b0f      	cmp	r3, #15
 8004c2a:	d91c      	bls.n	8004c66 <UART_SetConfig+0x1ae>
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	2380      	movs	r3, #128	; 0x80
 8004c30:	025b      	lsls	r3, r3, #9
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d217      	bcs.n	8004c66 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	200e      	movs	r0, #14
 8004c3c:	183b      	adds	r3, r7, r0
 8004c3e:	210f      	movs	r1, #15
 8004c40:	438a      	bics	r2, r1
 8004c42:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	085b      	lsrs	r3, r3, #1
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	2207      	movs	r2, #7
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	b299      	uxth	r1, r3
 8004c50:	183b      	adds	r3, r7, r0
 8004c52:	183a      	adds	r2, r7, r0
 8004c54:	8812      	ldrh	r2, [r2, #0]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	183a      	adds	r2, r7, r0
 8004c60:	8812      	ldrh	r2, [r2, #0]
 8004c62:	60da      	str	r2, [r3, #12]
 8004c64:	e04c      	b.n	8004d00 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004c66:	231e      	movs	r3, #30
 8004c68:	18fb      	adds	r3, r7, r3
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	701a      	strb	r2, [r3, #0]
 8004c6e:	e047      	b.n	8004d00 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c70:	231f      	movs	r3, #31
 8004c72:	18fb      	adds	r3, r7, r3
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	2b08      	cmp	r3, #8
 8004c78:	d015      	beq.n	8004ca6 <UART_SetConfig+0x1ee>
 8004c7a:	dc18      	bgt.n	8004cae <UART_SetConfig+0x1f6>
 8004c7c:	2b04      	cmp	r3, #4
 8004c7e:	d00d      	beq.n	8004c9c <UART_SetConfig+0x1e4>
 8004c80:	dc15      	bgt.n	8004cae <UART_SetConfig+0x1f6>
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d002      	beq.n	8004c8c <UART_SetConfig+0x1d4>
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d005      	beq.n	8004c96 <UART_SetConfig+0x1de>
 8004c8a:	e010      	b.n	8004cae <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c8c:	f7fd ff02 	bl	8002a94 <HAL_RCC_GetPCLK1Freq>
 8004c90:	0003      	movs	r3, r0
 8004c92:	61bb      	str	r3, [r7, #24]
        break;
 8004c94:	e012      	b.n	8004cbc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c96:	4b27      	ldr	r3, [pc, #156]	; (8004d34 <UART_SetConfig+0x27c>)
 8004c98:	61bb      	str	r3, [r7, #24]
        break;
 8004c9a:	e00f      	b.n	8004cbc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c9c:	f7fd fe7e 	bl	800299c <HAL_RCC_GetSysClockFreq>
 8004ca0:	0003      	movs	r3, r0
 8004ca2:	61bb      	str	r3, [r7, #24]
        break;
 8004ca4:	e00a      	b.n	8004cbc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ca6:	2380      	movs	r3, #128	; 0x80
 8004ca8:	021b      	lsls	r3, r3, #8
 8004caa:	61bb      	str	r3, [r7, #24]
        break;
 8004cac:	e006      	b.n	8004cbc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004cb2:	231e      	movs	r3, #30
 8004cb4:	18fb      	adds	r3, r7, r3
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	701a      	strb	r2, [r3, #0]
        break;
 8004cba:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d01e      	beq.n	8004d00 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	085a      	lsrs	r2, r3, #1
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	18d2      	adds	r2, r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	0019      	movs	r1, r3
 8004cd2:	0010      	movs	r0, r2
 8004cd4:	f7fb fa22 	bl	800011c <__udivsi3>
 8004cd8:	0003      	movs	r3, r0
 8004cda:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	2b0f      	cmp	r3, #15
 8004ce0:	d90a      	bls.n	8004cf8 <UART_SetConfig+0x240>
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	2380      	movs	r3, #128	; 0x80
 8004ce6:	025b      	lsls	r3, r3, #9
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d205      	bcs.n	8004cf8 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	60da      	str	r2, [r3, #12]
 8004cf6:	e003      	b.n	8004d00 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004cf8:	231e      	movs	r3, #30
 8004cfa:	18fb      	adds	r3, r7, r3
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004d0c:	231e      	movs	r3, #30
 8004d0e:	18fb      	adds	r3, r7, r3
 8004d10:	781b      	ldrb	r3, [r3, #0]
}
 8004d12:	0018      	movs	r0, r3
 8004d14:	46bd      	mov	sp, r7
 8004d16:	b008      	add	sp, #32
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	46c0      	nop			; (mov r8, r8)
 8004d1c:	efff69f3 	.word	0xefff69f3
 8004d20:	ffffcfff 	.word	0xffffcfff
 8004d24:	fffff4ff 	.word	0xfffff4ff
 8004d28:	40013800 	.word	0x40013800
 8004d2c:	40021000 	.word	0x40021000
 8004d30:	40004400 	.word	0x40004400
 8004d34:	007a1200 	.word	0x007a1200

08004d38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d44:	2201      	movs	r2, #1
 8004d46:	4013      	ands	r3, r2
 8004d48:	d00b      	beq.n	8004d62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	4a4a      	ldr	r2, [pc, #296]	; (8004e7c <UART_AdvFeatureConfig+0x144>)
 8004d52:	4013      	ands	r3, r2
 8004d54:	0019      	movs	r1, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	2202      	movs	r2, #2
 8004d68:	4013      	ands	r3, r2
 8004d6a:	d00b      	beq.n	8004d84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	4a43      	ldr	r2, [pc, #268]	; (8004e80 <UART_AdvFeatureConfig+0x148>)
 8004d74:	4013      	ands	r3, r2
 8004d76:	0019      	movs	r1, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	2204      	movs	r2, #4
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	d00b      	beq.n	8004da6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	4a3b      	ldr	r2, [pc, #236]	; (8004e84 <UART_AdvFeatureConfig+0x14c>)
 8004d96:	4013      	ands	r3, r2
 8004d98:	0019      	movs	r1, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	2208      	movs	r2, #8
 8004dac:	4013      	ands	r3, r2
 8004dae:	d00b      	beq.n	8004dc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	4a34      	ldr	r2, [pc, #208]	; (8004e88 <UART_AdvFeatureConfig+0x150>)
 8004db8:	4013      	ands	r3, r2
 8004dba:	0019      	movs	r1, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dcc:	2210      	movs	r2, #16
 8004dce:	4013      	ands	r3, r2
 8004dd0:	d00b      	beq.n	8004dea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	4a2c      	ldr	r2, [pc, #176]	; (8004e8c <UART_AdvFeatureConfig+0x154>)
 8004dda:	4013      	ands	r3, r2
 8004ddc:	0019      	movs	r1, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	430a      	orrs	r2, r1
 8004de8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	2220      	movs	r2, #32
 8004df0:	4013      	ands	r3, r2
 8004df2:	d00b      	beq.n	8004e0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	4a25      	ldr	r2, [pc, #148]	; (8004e90 <UART_AdvFeatureConfig+0x158>)
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	0019      	movs	r1, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	2240      	movs	r2, #64	; 0x40
 8004e12:	4013      	ands	r3, r2
 8004e14:	d01d      	beq.n	8004e52 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	4a1d      	ldr	r2, [pc, #116]	; (8004e94 <UART_AdvFeatureConfig+0x15c>)
 8004e1e:	4013      	ands	r3, r2
 8004e20:	0019      	movs	r1, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e32:	2380      	movs	r3, #128	; 0x80
 8004e34:	035b      	lsls	r3, r3, #13
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d10b      	bne.n	8004e52 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	4a15      	ldr	r2, [pc, #84]	; (8004e98 <UART_AdvFeatureConfig+0x160>)
 8004e42:	4013      	ands	r3, r2
 8004e44:	0019      	movs	r1, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e56:	2280      	movs	r2, #128	; 0x80
 8004e58:	4013      	ands	r3, r2
 8004e5a:	d00b      	beq.n	8004e74 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	4a0e      	ldr	r2, [pc, #56]	; (8004e9c <UART_AdvFeatureConfig+0x164>)
 8004e64:	4013      	ands	r3, r2
 8004e66:	0019      	movs	r1, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	430a      	orrs	r2, r1
 8004e72:	605a      	str	r2, [r3, #4]
  }
}
 8004e74:	46c0      	nop			; (mov r8, r8)
 8004e76:	46bd      	mov	sp, r7
 8004e78:	b002      	add	sp, #8
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	fffdffff 	.word	0xfffdffff
 8004e80:	fffeffff 	.word	0xfffeffff
 8004e84:	fffbffff 	.word	0xfffbffff
 8004e88:	ffff7fff 	.word	0xffff7fff
 8004e8c:	ffffefff 	.word	0xffffefff
 8004e90:	ffffdfff 	.word	0xffffdfff
 8004e94:	ffefffff 	.word	0xffefffff
 8004e98:	ff9fffff 	.word	0xff9fffff
 8004e9c:	fff7ffff 	.word	0xfff7ffff

08004ea0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b092      	sub	sp, #72	; 0x48
 8004ea4:	af02      	add	r7, sp, #8
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2284      	movs	r2, #132	; 0x84
 8004eac:	2100      	movs	r1, #0
 8004eae:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004eb0:	f7fc fad6 	bl	8001460 <HAL_GetTick>
 8004eb4:	0003      	movs	r3, r0
 8004eb6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2208      	movs	r2, #8
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	2b08      	cmp	r3, #8
 8004ec4:	d12c      	bne.n	8004f20 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ec8:	2280      	movs	r2, #128	; 0x80
 8004eca:	0391      	lsls	r1, r2, #14
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	4a46      	ldr	r2, [pc, #280]	; (8004fe8 <UART_CheckIdleState+0x148>)
 8004ed0:	9200      	str	r2, [sp, #0]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f000 f88c 	bl	8004ff0 <UART_WaitOnFlagUntilTimeout>
 8004ed8:	1e03      	subs	r3, r0, #0
 8004eda:	d021      	beq.n	8004f20 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004edc:	f3ef 8310 	mrs	r3, PRIMASK
 8004ee0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ee4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eec:	f383 8810 	msr	PRIMASK, r3
}
 8004ef0:	46c0      	nop			; (mov r8, r8)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2180      	movs	r1, #128	; 0x80
 8004efe:	438a      	bics	r2, r1
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f08:	f383 8810 	msr	PRIMASK, r3
}
 8004f0c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2220      	movs	r2, #32
 8004f12:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2278      	movs	r2, #120	; 0x78
 8004f18:	2100      	movs	r1, #0
 8004f1a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e05f      	b.n	8004fe0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2204      	movs	r2, #4
 8004f28:	4013      	ands	r3, r2
 8004f2a:	2b04      	cmp	r3, #4
 8004f2c:	d146      	bne.n	8004fbc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f30:	2280      	movs	r2, #128	; 0x80
 8004f32:	03d1      	lsls	r1, r2, #15
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	4a2c      	ldr	r2, [pc, #176]	; (8004fe8 <UART_CheckIdleState+0x148>)
 8004f38:	9200      	str	r2, [sp, #0]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f000 f858 	bl	8004ff0 <UART_WaitOnFlagUntilTimeout>
 8004f40:	1e03      	subs	r3, r0, #0
 8004f42:	d03b      	beq.n	8004fbc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f44:	f3ef 8310 	mrs	r3, PRIMASK
 8004f48:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8004f4e:	2301      	movs	r3, #1
 8004f50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f383 8810 	msr	PRIMASK, r3
}
 8004f58:	46c0      	nop			; (mov r8, r8)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4921      	ldr	r1, [pc, #132]	; (8004fec <UART_CheckIdleState+0x14c>)
 8004f66:	400a      	ands	r2, r1
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f383 8810 	msr	PRIMASK, r3
}
 8004f74:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f76:	f3ef 8310 	mrs	r3, PRIMASK
 8004f7a:	61bb      	str	r3, [r7, #24]
  return(result);
 8004f7c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f7e:	633b      	str	r3, [r7, #48]	; 0x30
 8004f80:	2301      	movs	r3, #1
 8004f82:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	f383 8810 	msr	PRIMASK, r3
}
 8004f8a:	46c0      	nop			; (mov r8, r8)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689a      	ldr	r2, [r3, #8]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2101      	movs	r1, #1
 8004f98:	438a      	bics	r2, r1
 8004f9a:	609a      	str	r2, [r3, #8]
 8004f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	f383 8810 	msr	PRIMASK, r3
}
 8004fa6:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2280      	movs	r2, #128	; 0x80
 8004fac:	2120      	movs	r1, #32
 8004fae:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2278      	movs	r2, #120	; 0x78
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e011      	b.n	8004fe0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2280      	movs	r2, #128	; 0x80
 8004fc6:	2120      	movs	r1, #32
 8004fc8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2278      	movs	r2, #120	; 0x78
 8004fda:	2100      	movs	r1, #0
 8004fdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	0018      	movs	r0, r3
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	b010      	add	sp, #64	; 0x40
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	01ffffff 	.word	0x01ffffff
 8004fec:	fffffedf 	.word	0xfffffedf

08004ff0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	603b      	str	r3, [r7, #0]
 8004ffc:	1dfb      	adds	r3, r7, #7
 8004ffe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005000:	e04b      	b.n	800509a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	3301      	adds	r3, #1
 8005006:	d048      	beq.n	800509a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005008:	f7fc fa2a 	bl	8001460 <HAL_GetTick>
 800500c:	0002      	movs	r2, r0
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	429a      	cmp	r2, r3
 8005016:	d302      	bcc.n	800501e <UART_WaitOnFlagUntilTimeout+0x2e>
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e04b      	b.n	80050ba <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2204      	movs	r2, #4
 800502a:	4013      	ands	r3, r2
 800502c:	d035      	beq.n	800509a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	69db      	ldr	r3, [r3, #28]
 8005034:	2208      	movs	r2, #8
 8005036:	4013      	ands	r3, r2
 8005038:	2b08      	cmp	r3, #8
 800503a:	d111      	bne.n	8005060 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2208      	movs	r2, #8
 8005042:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	0018      	movs	r0, r3
 8005048:	f000 f83c 	bl	80050c4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2284      	movs	r2, #132	; 0x84
 8005050:	2108      	movs	r1, #8
 8005052:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2278      	movs	r2, #120	; 0x78
 8005058:	2100      	movs	r1, #0
 800505a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e02c      	b.n	80050ba <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	69da      	ldr	r2, [r3, #28]
 8005066:	2380      	movs	r3, #128	; 0x80
 8005068:	011b      	lsls	r3, r3, #4
 800506a:	401a      	ands	r2, r3
 800506c:	2380      	movs	r3, #128	; 0x80
 800506e:	011b      	lsls	r3, r3, #4
 8005070:	429a      	cmp	r2, r3
 8005072:	d112      	bne.n	800509a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2280      	movs	r2, #128	; 0x80
 800507a:	0112      	lsls	r2, r2, #4
 800507c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	0018      	movs	r0, r3
 8005082:	f000 f81f 	bl	80050c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2284      	movs	r2, #132	; 0x84
 800508a:	2120      	movs	r1, #32
 800508c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2278      	movs	r2, #120	; 0x78
 8005092:	2100      	movs	r1, #0
 8005094:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e00f      	b.n	80050ba <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	4013      	ands	r3, r2
 80050a4:	68ba      	ldr	r2, [r7, #8]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	425a      	negs	r2, r3
 80050aa:	4153      	adcs	r3, r2
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	001a      	movs	r2, r3
 80050b0:	1dfb      	adds	r3, r7, #7
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d0a4      	beq.n	8005002 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	0018      	movs	r0, r3
 80050bc:	46bd      	mov	sp, r7
 80050be:	b004      	add	sp, #16
 80050c0:	bd80      	pop	{r7, pc}
	...

080050c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b08e      	sub	sp, #56	; 0x38
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050cc:	f3ef 8310 	mrs	r3, PRIMASK
 80050d0:	617b      	str	r3, [r7, #20]
  return(result);
 80050d2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050d4:	637b      	str	r3, [r7, #52]	; 0x34
 80050d6:	2301      	movs	r3, #1
 80050d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	f383 8810 	msr	PRIMASK, r3
}
 80050e0:	46c0      	nop			; (mov r8, r8)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4926      	ldr	r1, [pc, #152]	; (8005188 <UART_EndRxTransfer+0xc4>)
 80050ee:	400a      	ands	r2, r1
 80050f0:	601a      	str	r2, [r3, #0]
 80050f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	f383 8810 	msr	PRIMASK, r3
}
 80050fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050fe:	f3ef 8310 	mrs	r3, PRIMASK
 8005102:	623b      	str	r3, [r7, #32]
  return(result);
 8005104:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005106:	633b      	str	r3, [r7, #48]	; 0x30
 8005108:	2301      	movs	r3, #1
 800510a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510e:	f383 8810 	msr	PRIMASK, r3
}
 8005112:	46c0      	nop			; (mov r8, r8)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689a      	ldr	r2, [r3, #8]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2101      	movs	r1, #1
 8005120:	438a      	bics	r2, r1
 8005122:	609a      	str	r2, [r3, #8]
 8005124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005126:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512a:	f383 8810 	msr	PRIMASK, r3
}
 800512e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005134:	2b01      	cmp	r3, #1
 8005136:	d118      	bne.n	800516a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005138:	f3ef 8310 	mrs	r3, PRIMASK
 800513c:	60bb      	str	r3, [r7, #8]
  return(result);
 800513e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005140:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005142:	2301      	movs	r3, #1
 8005144:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f383 8810 	msr	PRIMASK, r3
}
 800514c:	46c0      	nop			; (mov r8, r8)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2110      	movs	r1, #16
 800515a:	438a      	bics	r2, r1
 800515c:	601a      	str	r2, [r3, #0]
 800515e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005160:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f383 8810 	msr	PRIMASK, r3
}
 8005168:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2280      	movs	r2, #128	; 0x80
 800516e:	2120      	movs	r1, #32
 8005170:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800517e:	46c0      	nop			; (mov r8, r8)
 8005180:	46bd      	mov	sp, r7
 8005182:	b00e      	add	sp, #56	; 0x38
 8005184:	bd80      	pop	{r7, pc}
 8005186:	46c0      	nop			; (mov r8, r8)
 8005188:	fffffedf 	.word	0xfffffedf

0800518c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	225a      	movs	r2, #90	; 0x5a
 800519e:	2100      	movs	r1, #0
 80051a0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2252      	movs	r2, #82	; 0x52
 80051a6:	2100      	movs	r1, #0
 80051a8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	0018      	movs	r0, r3
 80051ae:	f7ff fc6f 	bl	8004a90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051b2:	46c0      	nop			; (mov r8, r8)
 80051b4:	46bd      	mov	sp, r7
 80051b6:	b004      	add	sp, #16
 80051b8:	bd80      	pop	{r7, pc}

080051ba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b086      	sub	sp, #24
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051c2:	f3ef 8310 	mrs	r3, PRIMASK
 80051c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80051c8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051ca:	617b      	str	r3, [r7, #20]
 80051cc:	2301      	movs	r3, #1
 80051ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f383 8810 	msr	PRIMASK, r3
}
 80051d6:	46c0      	nop			; (mov r8, r8)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2140      	movs	r1, #64	; 0x40
 80051e4:	438a      	bics	r2, r1
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	f383 8810 	msr	PRIMASK, r3
}
 80051f2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2220      	movs	r2, #32
 80051f8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	0018      	movs	r0, r3
 8005204:	f7ff fc3c 	bl	8004a80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005208:	46c0      	nop			; (mov r8, r8)
 800520a:	46bd      	mov	sp, r7
 800520c:	b006      	add	sp, #24
 800520e:	bd80      	pop	{r7, pc}

08005210 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005218:	46c0      	nop			; (mov r8, r8)
 800521a:	46bd      	mov	sp, r7
 800521c:	b002      	add	sp, #8
 800521e:	bd80      	pop	{r7, pc}

08005220 <siprintf>:
 8005220:	b40e      	push	{r1, r2, r3}
 8005222:	b500      	push	{lr}
 8005224:	490b      	ldr	r1, [pc, #44]	; (8005254 <siprintf+0x34>)
 8005226:	b09c      	sub	sp, #112	; 0x70
 8005228:	ab1d      	add	r3, sp, #116	; 0x74
 800522a:	9002      	str	r0, [sp, #8]
 800522c:	9006      	str	r0, [sp, #24]
 800522e:	9107      	str	r1, [sp, #28]
 8005230:	9104      	str	r1, [sp, #16]
 8005232:	4809      	ldr	r0, [pc, #36]	; (8005258 <siprintf+0x38>)
 8005234:	4909      	ldr	r1, [pc, #36]	; (800525c <siprintf+0x3c>)
 8005236:	cb04      	ldmia	r3!, {r2}
 8005238:	9105      	str	r1, [sp, #20]
 800523a:	6800      	ldr	r0, [r0, #0]
 800523c:	a902      	add	r1, sp, #8
 800523e:	9301      	str	r3, [sp, #4]
 8005240:	f000 f8a4 	bl	800538c <_svfiprintf_r>
 8005244:	2200      	movs	r2, #0
 8005246:	9b02      	ldr	r3, [sp, #8]
 8005248:	701a      	strb	r2, [r3, #0]
 800524a:	b01c      	add	sp, #112	; 0x70
 800524c:	bc08      	pop	{r3}
 800524e:	b003      	add	sp, #12
 8005250:	4718      	bx	r3
 8005252:	46c0      	nop			; (mov r8, r8)
 8005254:	7fffffff 	.word	0x7fffffff
 8005258:	20000058 	.word	0x20000058
 800525c:	ffff0208 	.word	0xffff0208

08005260 <memset>:
 8005260:	0003      	movs	r3, r0
 8005262:	1882      	adds	r2, r0, r2
 8005264:	4293      	cmp	r3, r2
 8005266:	d100      	bne.n	800526a <memset+0xa>
 8005268:	4770      	bx	lr
 800526a:	7019      	strb	r1, [r3, #0]
 800526c:	3301      	adds	r3, #1
 800526e:	e7f9      	b.n	8005264 <memset+0x4>

08005270 <__errno>:
 8005270:	4b01      	ldr	r3, [pc, #4]	; (8005278 <__errno+0x8>)
 8005272:	6818      	ldr	r0, [r3, #0]
 8005274:	4770      	bx	lr
 8005276:	46c0      	nop			; (mov r8, r8)
 8005278:	20000058 	.word	0x20000058

0800527c <__libc_init_array>:
 800527c:	b570      	push	{r4, r5, r6, lr}
 800527e:	2600      	movs	r6, #0
 8005280:	4c0c      	ldr	r4, [pc, #48]	; (80052b4 <__libc_init_array+0x38>)
 8005282:	4d0d      	ldr	r5, [pc, #52]	; (80052b8 <__libc_init_array+0x3c>)
 8005284:	1b64      	subs	r4, r4, r5
 8005286:	10a4      	asrs	r4, r4, #2
 8005288:	42a6      	cmp	r6, r4
 800528a:	d109      	bne.n	80052a0 <__libc_init_array+0x24>
 800528c:	2600      	movs	r6, #0
 800528e:	f000 fc6b 	bl	8005b68 <_init>
 8005292:	4c0a      	ldr	r4, [pc, #40]	; (80052bc <__libc_init_array+0x40>)
 8005294:	4d0a      	ldr	r5, [pc, #40]	; (80052c0 <__libc_init_array+0x44>)
 8005296:	1b64      	subs	r4, r4, r5
 8005298:	10a4      	asrs	r4, r4, #2
 800529a:	42a6      	cmp	r6, r4
 800529c:	d105      	bne.n	80052aa <__libc_init_array+0x2e>
 800529e:	bd70      	pop	{r4, r5, r6, pc}
 80052a0:	00b3      	lsls	r3, r6, #2
 80052a2:	58eb      	ldr	r3, [r5, r3]
 80052a4:	4798      	blx	r3
 80052a6:	3601      	adds	r6, #1
 80052a8:	e7ee      	b.n	8005288 <__libc_init_array+0xc>
 80052aa:	00b3      	lsls	r3, r6, #2
 80052ac:	58eb      	ldr	r3, [r5, r3]
 80052ae:	4798      	blx	r3
 80052b0:	3601      	adds	r6, #1
 80052b2:	e7f2      	b.n	800529a <__libc_init_array+0x1e>
 80052b4:	08005c2c 	.word	0x08005c2c
 80052b8:	08005c2c 	.word	0x08005c2c
 80052bc:	08005c30 	.word	0x08005c30
 80052c0:	08005c2c 	.word	0x08005c2c

080052c4 <__retarget_lock_acquire_recursive>:
 80052c4:	4770      	bx	lr

080052c6 <__retarget_lock_release_recursive>:
 80052c6:	4770      	bx	lr

080052c8 <__ssputs_r>:
 80052c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052ca:	b085      	sub	sp, #20
 80052cc:	9301      	str	r3, [sp, #4]
 80052ce:	9203      	str	r2, [sp, #12]
 80052d0:	688e      	ldr	r6, [r1, #8]
 80052d2:	9a01      	ldr	r2, [sp, #4]
 80052d4:	0007      	movs	r7, r0
 80052d6:	000c      	movs	r4, r1
 80052d8:	680b      	ldr	r3, [r1, #0]
 80052da:	4296      	cmp	r6, r2
 80052dc:	d831      	bhi.n	8005342 <__ssputs_r+0x7a>
 80052de:	898a      	ldrh	r2, [r1, #12]
 80052e0:	2190      	movs	r1, #144	; 0x90
 80052e2:	00c9      	lsls	r1, r1, #3
 80052e4:	420a      	tst	r2, r1
 80052e6:	d029      	beq.n	800533c <__ssputs_r+0x74>
 80052e8:	2003      	movs	r0, #3
 80052ea:	6921      	ldr	r1, [r4, #16]
 80052ec:	1a5b      	subs	r3, r3, r1
 80052ee:	9302      	str	r3, [sp, #8]
 80052f0:	6963      	ldr	r3, [r4, #20]
 80052f2:	4343      	muls	r3, r0
 80052f4:	0fdd      	lsrs	r5, r3, #31
 80052f6:	18ed      	adds	r5, r5, r3
 80052f8:	9b01      	ldr	r3, [sp, #4]
 80052fa:	9802      	ldr	r0, [sp, #8]
 80052fc:	3301      	adds	r3, #1
 80052fe:	181b      	adds	r3, r3, r0
 8005300:	106d      	asrs	r5, r5, #1
 8005302:	42ab      	cmp	r3, r5
 8005304:	d900      	bls.n	8005308 <__ssputs_r+0x40>
 8005306:	001d      	movs	r5, r3
 8005308:	0552      	lsls	r2, r2, #21
 800530a:	d529      	bpl.n	8005360 <__ssputs_r+0x98>
 800530c:	0029      	movs	r1, r5
 800530e:	0038      	movs	r0, r7
 8005310:	f000 f95e 	bl	80055d0 <_malloc_r>
 8005314:	1e06      	subs	r6, r0, #0
 8005316:	d02d      	beq.n	8005374 <__ssputs_r+0xac>
 8005318:	9a02      	ldr	r2, [sp, #8]
 800531a:	6921      	ldr	r1, [r4, #16]
 800531c:	f000 fbc9 	bl	8005ab2 <memcpy>
 8005320:	89a2      	ldrh	r2, [r4, #12]
 8005322:	4b19      	ldr	r3, [pc, #100]	; (8005388 <__ssputs_r+0xc0>)
 8005324:	401a      	ands	r2, r3
 8005326:	2380      	movs	r3, #128	; 0x80
 8005328:	4313      	orrs	r3, r2
 800532a:	81a3      	strh	r3, [r4, #12]
 800532c:	9b02      	ldr	r3, [sp, #8]
 800532e:	6126      	str	r6, [r4, #16]
 8005330:	18f6      	adds	r6, r6, r3
 8005332:	6026      	str	r6, [r4, #0]
 8005334:	6165      	str	r5, [r4, #20]
 8005336:	9e01      	ldr	r6, [sp, #4]
 8005338:	1aed      	subs	r5, r5, r3
 800533a:	60a5      	str	r5, [r4, #8]
 800533c:	9b01      	ldr	r3, [sp, #4]
 800533e:	429e      	cmp	r6, r3
 8005340:	d900      	bls.n	8005344 <__ssputs_r+0x7c>
 8005342:	9e01      	ldr	r6, [sp, #4]
 8005344:	0032      	movs	r2, r6
 8005346:	9903      	ldr	r1, [sp, #12]
 8005348:	6820      	ldr	r0, [r4, #0]
 800534a:	f000 fb82 	bl	8005a52 <memmove>
 800534e:	2000      	movs	r0, #0
 8005350:	68a3      	ldr	r3, [r4, #8]
 8005352:	1b9b      	subs	r3, r3, r6
 8005354:	60a3      	str	r3, [r4, #8]
 8005356:	6823      	ldr	r3, [r4, #0]
 8005358:	199b      	adds	r3, r3, r6
 800535a:	6023      	str	r3, [r4, #0]
 800535c:	b005      	add	sp, #20
 800535e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005360:	002a      	movs	r2, r5
 8005362:	0038      	movs	r0, r7
 8005364:	f000 fb46 	bl	80059f4 <_realloc_r>
 8005368:	1e06      	subs	r6, r0, #0
 800536a:	d1df      	bne.n	800532c <__ssputs_r+0x64>
 800536c:	0038      	movs	r0, r7
 800536e:	6921      	ldr	r1, [r4, #16]
 8005370:	f000 fba8 	bl	8005ac4 <_free_r>
 8005374:	230c      	movs	r3, #12
 8005376:	2001      	movs	r0, #1
 8005378:	603b      	str	r3, [r7, #0]
 800537a:	89a2      	ldrh	r2, [r4, #12]
 800537c:	3334      	adds	r3, #52	; 0x34
 800537e:	4313      	orrs	r3, r2
 8005380:	81a3      	strh	r3, [r4, #12]
 8005382:	4240      	negs	r0, r0
 8005384:	e7ea      	b.n	800535c <__ssputs_r+0x94>
 8005386:	46c0      	nop			; (mov r8, r8)
 8005388:	fffffb7f 	.word	0xfffffb7f

0800538c <_svfiprintf_r>:
 800538c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800538e:	b0a1      	sub	sp, #132	; 0x84
 8005390:	9003      	str	r0, [sp, #12]
 8005392:	001d      	movs	r5, r3
 8005394:	898b      	ldrh	r3, [r1, #12]
 8005396:	000f      	movs	r7, r1
 8005398:	0016      	movs	r6, r2
 800539a:	061b      	lsls	r3, r3, #24
 800539c:	d511      	bpl.n	80053c2 <_svfiprintf_r+0x36>
 800539e:	690b      	ldr	r3, [r1, #16]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10e      	bne.n	80053c2 <_svfiprintf_r+0x36>
 80053a4:	2140      	movs	r1, #64	; 0x40
 80053a6:	f000 f913 	bl	80055d0 <_malloc_r>
 80053aa:	6038      	str	r0, [r7, #0]
 80053ac:	6138      	str	r0, [r7, #16]
 80053ae:	2800      	cmp	r0, #0
 80053b0:	d105      	bne.n	80053be <_svfiprintf_r+0x32>
 80053b2:	230c      	movs	r3, #12
 80053b4:	9a03      	ldr	r2, [sp, #12]
 80053b6:	3801      	subs	r0, #1
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	b021      	add	sp, #132	; 0x84
 80053bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053be:	2340      	movs	r3, #64	; 0x40
 80053c0:	617b      	str	r3, [r7, #20]
 80053c2:	2300      	movs	r3, #0
 80053c4:	ac08      	add	r4, sp, #32
 80053c6:	6163      	str	r3, [r4, #20]
 80053c8:	3320      	adds	r3, #32
 80053ca:	7663      	strb	r3, [r4, #25]
 80053cc:	3310      	adds	r3, #16
 80053ce:	76a3      	strb	r3, [r4, #26]
 80053d0:	9507      	str	r5, [sp, #28]
 80053d2:	0035      	movs	r5, r6
 80053d4:	782b      	ldrb	r3, [r5, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <_svfiprintf_r+0x52>
 80053da:	2b25      	cmp	r3, #37	; 0x25
 80053dc:	d148      	bne.n	8005470 <_svfiprintf_r+0xe4>
 80053de:	1bab      	subs	r3, r5, r6
 80053e0:	9305      	str	r3, [sp, #20]
 80053e2:	42b5      	cmp	r5, r6
 80053e4:	d00b      	beq.n	80053fe <_svfiprintf_r+0x72>
 80053e6:	0032      	movs	r2, r6
 80053e8:	0039      	movs	r1, r7
 80053ea:	9803      	ldr	r0, [sp, #12]
 80053ec:	f7ff ff6c 	bl	80052c8 <__ssputs_r>
 80053f0:	3001      	adds	r0, #1
 80053f2:	d100      	bne.n	80053f6 <_svfiprintf_r+0x6a>
 80053f4:	e0af      	b.n	8005556 <_svfiprintf_r+0x1ca>
 80053f6:	6963      	ldr	r3, [r4, #20]
 80053f8:	9a05      	ldr	r2, [sp, #20]
 80053fa:	189b      	adds	r3, r3, r2
 80053fc:	6163      	str	r3, [r4, #20]
 80053fe:	782b      	ldrb	r3, [r5, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d100      	bne.n	8005406 <_svfiprintf_r+0x7a>
 8005404:	e0a7      	b.n	8005556 <_svfiprintf_r+0x1ca>
 8005406:	2201      	movs	r2, #1
 8005408:	2300      	movs	r3, #0
 800540a:	4252      	negs	r2, r2
 800540c:	6062      	str	r2, [r4, #4]
 800540e:	a904      	add	r1, sp, #16
 8005410:	3254      	adds	r2, #84	; 0x54
 8005412:	1852      	adds	r2, r2, r1
 8005414:	1c6e      	adds	r6, r5, #1
 8005416:	6023      	str	r3, [r4, #0]
 8005418:	60e3      	str	r3, [r4, #12]
 800541a:	60a3      	str	r3, [r4, #8]
 800541c:	7013      	strb	r3, [r2, #0]
 800541e:	65a3      	str	r3, [r4, #88]	; 0x58
 8005420:	4b55      	ldr	r3, [pc, #340]	; (8005578 <_svfiprintf_r+0x1ec>)
 8005422:	2205      	movs	r2, #5
 8005424:	0018      	movs	r0, r3
 8005426:	7831      	ldrb	r1, [r6, #0]
 8005428:	9305      	str	r3, [sp, #20]
 800542a:	f000 fb37 	bl	8005a9c <memchr>
 800542e:	1c75      	adds	r5, r6, #1
 8005430:	2800      	cmp	r0, #0
 8005432:	d11f      	bne.n	8005474 <_svfiprintf_r+0xe8>
 8005434:	6822      	ldr	r2, [r4, #0]
 8005436:	06d3      	lsls	r3, r2, #27
 8005438:	d504      	bpl.n	8005444 <_svfiprintf_r+0xb8>
 800543a:	2353      	movs	r3, #83	; 0x53
 800543c:	a904      	add	r1, sp, #16
 800543e:	185b      	adds	r3, r3, r1
 8005440:	2120      	movs	r1, #32
 8005442:	7019      	strb	r1, [r3, #0]
 8005444:	0713      	lsls	r3, r2, #28
 8005446:	d504      	bpl.n	8005452 <_svfiprintf_r+0xc6>
 8005448:	2353      	movs	r3, #83	; 0x53
 800544a:	a904      	add	r1, sp, #16
 800544c:	185b      	adds	r3, r3, r1
 800544e:	212b      	movs	r1, #43	; 0x2b
 8005450:	7019      	strb	r1, [r3, #0]
 8005452:	7833      	ldrb	r3, [r6, #0]
 8005454:	2b2a      	cmp	r3, #42	; 0x2a
 8005456:	d016      	beq.n	8005486 <_svfiprintf_r+0xfa>
 8005458:	0035      	movs	r5, r6
 800545a:	2100      	movs	r1, #0
 800545c:	200a      	movs	r0, #10
 800545e:	68e3      	ldr	r3, [r4, #12]
 8005460:	782a      	ldrb	r2, [r5, #0]
 8005462:	1c6e      	adds	r6, r5, #1
 8005464:	3a30      	subs	r2, #48	; 0x30
 8005466:	2a09      	cmp	r2, #9
 8005468:	d94e      	bls.n	8005508 <_svfiprintf_r+0x17c>
 800546a:	2900      	cmp	r1, #0
 800546c:	d111      	bne.n	8005492 <_svfiprintf_r+0x106>
 800546e:	e017      	b.n	80054a0 <_svfiprintf_r+0x114>
 8005470:	3501      	adds	r5, #1
 8005472:	e7af      	b.n	80053d4 <_svfiprintf_r+0x48>
 8005474:	9b05      	ldr	r3, [sp, #20]
 8005476:	6822      	ldr	r2, [r4, #0]
 8005478:	1ac0      	subs	r0, r0, r3
 800547a:	2301      	movs	r3, #1
 800547c:	4083      	lsls	r3, r0
 800547e:	4313      	orrs	r3, r2
 8005480:	002e      	movs	r6, r5
 8005482:	6023      	str	r3, [r4, #0]
 8005484:	e7cc      	b.n	8005420 <_svfiprintf_r+0x94>
 8005486:	9b07      	ldr	r3, [sp, #28]
 8005488:	1d19      	adds	r1, r3, #4
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	9107      	str	r1, [sp, #28]
 800548e:	2b00      	cmp	r3, #0
 8005490:	db01      	blt.n	8005496 <_svfiprintf_r+0x10a>
 8005492:	930b      	str	r3, [sp, #44]	; 0x2c
 8005494:	e004      	b.n	80054a0 <_svfiprintf_r+0x114>
 8005496:	425b      	negs	r3, r3
 8005498:	60e3      	str	r3, [r4, #12]
 800549a:	2302      	movs	r3, #2
 800549c:	4313      	orrs	r3, r2
 800549e:	6023      	str	r3, [r4, #0]
 80054a0:	782b      	ldrb	r3, [r5, #0]
 80054a2:	2b2e      	cmp	r3, #46	; 0x2e
 80054a4:	d10a      	bne.n	80054bc <_svfiprintf_r+0x130>
 80054a6:	786b      	ldrb	r3, [r5, #1]
 80054a8:	2b2a      	cmp	r3, #42	; 0x2a
 80054aa:	d135      	bne.n	8005518 <_svfiprintf_r+0x18c>
 80054ac:	9b07      	ldr	r3, [sp, #28]
 80054ae:	3502      	adds	r5, #2
 80054b0:	1d1a      	adds	r2, r3, #4
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	9207      	str	r2, [sp, #28]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	db2b      	blt.n	8005512 <_svfiprintf_r+0x186>
 80054ba:	9309      	str	r3, [sp, #36]	; 0x24
 80054bc:	4e2f      	ldr	r6, [pc, #188]	; (800557c <_svfiprintf_r+0x1f0>)
 80054be:	2203      	movs	r2, #3
 80054c0:	0030      	movs	r0, r6
 80054c2:	7829      	ldrb	r1, [r5, #0]
 80054c4:	f000 faea 	bl	8005a9c <memchr>
 80054c8:	2800      	cmp	r0, #0
 80054ca:	d006      	beq.n	80054da <_svfiprintf_r+0x14e>
 80054cc:	2340      	movs	r3, #64	; 0x40
 80054ce:	1b80      	subs	r0, r0, r6
 80054d0:	4083      	lsls	r3, r0
 80054d2:	6822      	ldr	r2, [r4, #0]
 80054d4:	3501      	adds	r5, #1
 80054d6:	4313      	orrs	r3, r2
 80054d8:	6023      	str	r3, [r4, #0]
 80054da:	7829      	ldrb	r1, [r5, #0]
 80054dc:	2206      	movs	r2, #6
 80054de:	4828      	ldr	r0, [pc, #160]	; (8005580 <_svfiprintf_r+0x1f4>)
 80054e0:	1c6e      	adds	r6, r5, #1
 80054e2:	7621      	strb	r1, [r4, #24]
 80054e4:	f000 fada 	bl	8005a9c <memchr>
 80054e8:	2800      	cmp	r0, #0
 80054ea:	d03c      	beq.n	8005566 <_svfiprintf_r+0x1da>
 80054ec:	4b25      	ldr	r3, [pc, #148]	; (8005584 <_svfiprintf_r+0x1f8>)
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d125      	bne.n	800553e <_svfiprintf_r+0x1b2>
 80054f2:	2207      	movs	r2, #7
 80054f4:	9b07      	ldr	r3, [sp, #28]
 80054f6:	3307      	adds	r3, #7
 80054f8:	4393      	bics	r3, r2
 80054fa:	3308      	adds	r3, #8
 80054fc:	9307      	str	r3, [sp, #28]
 80054fe:	6963      	ldr	r3, [r4, #20]
 8005500:	9a04      	ldr	r2, [sp, #16]
 8005502:	189b      	adds	r3, r3, r2
 8005504:	6163      	str	r3, [r4, #20]
 8005506:	e764      	b.n	80053d2 <_svfiprintf_r+0x46>
 8005508:	4343      	muls	r3, r0
 800550a:	0035      	movs	r5, r6
 800550c:	2101      	movs	r1, #1
 800550e:	189b      	adds	r3, r3, r2
 8005510:	e7a6      	b.n	8005460 <_svfiprintf_r+0xd4>
 8005512:	2301      	movs	r3, #1
 8005514:	425b      	negs	r3, r3
 8005516:	e7d0      	b.n	80054ba <_svfiprintf_r+0x12e>
 8005518:	2300      	movs	r3, #0
 800551a:	200a      	movs	r0, #10
 800551c:	001a      	movs	r2, r3
 800551e:	3501      	adds	r5, #1
 8005520:	6063      	str	r3, [r4, #4]
 8005522:	7829      	ldrb	r1, [r5, #0]
 8005524:	1c6e      	adds	r6, r5, #1
 8005526:	3930      	subs	r1, #48	; 0x30
 8005528:	2909      	cmp	r1, #9
 800552a:	d903      	bls.n	8005534 <_svfiprintf_r+0x1a8>
 800552c:	2b00      	cmp	r3, #0
 800552e:	d0c5      	beq.n	80054bc <_svfiprintf_r+0x130>
 8005530:	9209      	str	r2, [sp, #36]	; 0x24
 8005532:	e7c3      	b.n	80054bc <_svfiprintf_r+0x130>
 8005534:	4342      	muls	r2, r0
 8005536:	0035      	movs	r5, r6
 8005538:	2301      	movs	r3, #1
 800553a:	1852      	adds	r2, r2, r1
 800553c:	e7f1      	b.n	8005522 <_svfiprintf_r+0x196>
 800553e:	aa07      	add	r2, sp, #28
 8005540:	9200      	str	r2, [sp, #0]
 8005542:	0021      	movs	r1, r4
 8005544:	003a      	movs	r2, r7
 8005546:	4b10      	ldr	r3, [pc, #64]	; (8005588 <_svfiprintf_r+0x1fc>)
 8005548:	9803      	ldr	r0, [sp, #12]
 800554a:	e000      	b.n	800554e <_svfiprintf_r+0x1c2>
 800554c:	bf00      	nop
 800554e:	9004      	str	r0, [sp, #16]
 8005550:	9b04      	ldr	r3, [sp, #16]
 8005552:	3301      	adds	r3, #1
 8005554:	d1d3      	bne.n	80054fe <_svfiprintf_r+0x172>
 8005556:	89bb      	ldrh	r3, [r7, #12]
 8005558:	980d      	ldr	r0, [sp, #52]	; 0x34
 800555a:	065b      	lsls	r3, r3, #25
 800555c:	d400      	bmi.n	8005560 <_svfiprintf_r+0x1d4>
 800555e:	e72c      	b.n	80053ba <_svfiprintf_r+0x2e>
 8005560:	2001      	movs	r0, #1
 8005562:	4240      	negs	r0, r0
 8005564:	e729      	b.n	80053ba <_svfiprintf_r+0x2e>
 8005566:	aa07      	add	r2, sp, #28
 8005568:	9200      	str	r2, [sp, #0]
 800556a:	0021      	movs	r1, r4
 800556c:	003a      	movs	r2, r7
 800556e:	4b06      	ldr	r3, [pc, #24]	; (8005588 <_svfiprintf_r+0x1fc>)
 8005570:	9803      	ldr	r0, [sp, #12]
 8005572:	f000 f91f 	bl	80057b4 <_printf_i>
 8005576:	e7ea      	b.n	800554e <_svfiprintf_r+0x1c2>
 8005578:	08005bf8 	.word	0x08005bf8
 800557c:	08005bfe 	.word	0x08005bfe
 8005580:	08005c02 	.word	0x08005c02
 8005584:	00000000 	.word	0x00000000
 8005588:	080052c9 	.word	0x080052c9

0800558c <sbrk_aligned>:
 800558c:	b570      	push	{r4, r5, r6, lr}
 800558e:	4e0f      	ldr	r6, [pc, #60]	; (80055cc <sbrk_aligned+0x40>)
 8005590:	000d      	movs	r5, r1
 8005592:	6831      	ldr	r1, [r6, #0]
 8005594:	0004      	movs	r4, r0
 8005596:	2900      	cmp	r1, #0
 8005598:	d102      	bne.n	80055a0 <sbrk_aligned+0x14>
 800559a:	f000 fa6d 	bl	8005a78 <_sbrk_r>
 800559e:	6030      	str	r0, [r6, #0]
 80055a0:	0029      	movs	r1, r5
 80055a2:	0020      	movs	r0, r4
 80055a4:	f000 fa68 	bl	8005a78 <_sbrk_r>
 80055a8:	1c43      	adds	r3, r0, #1
 80055aa:	d00a      	beq.n	80055c2 <sbrk_aligned+0x36>
 80055ac:	2303      	movs	r3, #3
 80055ae:	1cc5      	adds	r5, r0, #3
 80055b0:	439d      	bics	r5, r3
 80055b2:	42a8      	cmp	r0, r5
 80055b4:	d007      	beq.n	80055c6 <sbrk_aligned+0x3a>
 80055b6:	1a29      	subs	r1, r5, r0
 80055b8:	0020      	movs	r0, r4
 80055ba:	f000 fa5d 	bl	8005a78 <_sbrk_r>
 80055be:	3001      	adds	r0, #1
 80055c0:	d101      	bne.n	80055c6 <sbrk_aligned+0x3a>
 80055c2:	2501      	movs	r5, #1
 80055c4:	426d      	negs	r5, r5
 80055c6:	0028      	movs	r0, r5
 80055c8:	bd70      	pop	{r4, r5, r6, pc}
 80055ca:	46c0      	nop			; (mov r8, r8)
 80055cc:	2000042c 	.word	0x2000042c

080055d0 <_malloc_r>:
 80055d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055d2:	2203      	movs	r2, #3
 80055d4:	1ccb      	adds	r3, r1, #3
 80055d6:	4393      	bics	r3, r2
 80055d8:	3308      	adds	r3, #8
 80055da:	0006      	movs	r6, r0
 80055dc:	001f      	movs	r7, r3
 80055de:	2b0c      	cmp	r3, #12
 80055e0:	d238      	bcs.n	8005654 <_malloc_r+0x84>
 80055e2:	270c      	movs	r7, #12
 80055e4:	42b9      	cmp	r1, r7
 80055e6:	d837      	bhi.n	8005658 <_malloc_r+0x88>
 80055e8:	0030      	movs	r0, r6
 80055ea:	f000 f9f3 	bl	80059d4 <__malloc_lock>
 80055ee:	4b38      	ldr	r3, [pc, #224]	; (80056d0 <_malloc_r+0x100>)
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	001c      	movs	r4, r3
 80055f6:	2c00      	cmp	r4, #0
 80055f8:	d133      	bne.n	8005662 <_malloc_r+0x92>
 80055fa:	0039      	movs	r1, r7
 80055fc:	0030      	movs	r0, r6
 80055fe:	f7ff ffc5 	bl	800558c <sbrk_aligned>
 8005602:	0004      	movs	r4, r0
 8005604:	1c43      	adds	r3, r0, #1
 8005606:	d15e      	bne.n	80056c6 <_malloc_r+0xf6>
 8005608:	9b00      	ldr	r3, [sp, #0]
 800560a:	681c      	ldr	r4, [r3, #0]
 800560c:	0025      	movs	r5, r4
 800560e:	2d00      	cmp	r5, #0
 8005610:	d14e      	bne.n	80056b0 <_malloc_r+0xe0>
 8005612:	2c00      	cmp	r4, #0
 8005614:	d051      	beq.n	80056ba <_malloc_r+0xea>
 8005616:	6823      	ldr	r3, [r4, #0]
 8005618:	0029      	movs	r1, r5
 800561a:	18e3      	adds	r3, r4, r3
 800561c:	0030      	movs	r0, r6
 800561e:	9301      	str	r3, [sp, #4]
 8005620:	f000 fa2a 	bl	8005a78 <_sbrk_r>
 8005624:	9b01      	ldr	r3, [sp, #4]
 8005626:	4283      	cmp	r3, r0
 8005628:	d147      	bne.n	80056ba <_malloc_r+0xea>
 800562a:	6823      	ldr	r3, [r4, #0]
 800562c:	0030      	movs	r0, r6
 800562e:	1aff      	subs	r7, r7, r3
 8005630:	0039      	movs	r1, r7
 8005632:	f7ff ffab 	bl	800558c <sbrk_aligned>
 8005636:	3001      	adds	r0, #1
 8005638:	d03f      	beq.n	80056ba <_malloc_r+0xea>
 800563a:	6823      	ldr	r3, [r4, #0]
 800563c:	19db      	adds	r3, r3, r7
 800563e:	6023      	str	r3, [r4, #0]
 8005640:	9b00      	ldr	r3, [sp, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d040      	beq.n	80056ca <_malloc_r+0xfa>
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	42a2      	cmp	r2, r4
 800564c:	d133      	bne.n	80056b6 <_malloc_r+0xe6>
 800564e:	2200      	movs	r2, #0
 8005650:	605a      	str	r2, [r3, #4]
 8005652:	e014      	b.n	800567e <_malloc_r+0xae>
 8005654:	2b00      	cmp	r3, #0
 8005656:	dac5      	bge.n	80055e4 <_malloc_r+0x14>
 8005658:	230c      	movs	r3, #12
 800565a:	2500      	movs	r5, #0
 800565c:	6033      	str	r3, [r6, #0]
 800565e:	0028      	movs	r0, r5
 8005660:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005662:	6821      	ldr	r1, [r4, #0]
 8005664:	1bc9      	subs	r1, r1, r7
 8005666:	d420      	bmi.n	80056aa <_malloc_r+0xda>
 8005668:	290b      	cmp	r1, #11
 800566a:	d918      	bls.n	800569e <_malloc_r+0xce>
 800566c:	19e2      	adds	r2, r4, r7
 800566e:	6027      	str	r7, [r4, #0]
 8005670:	42a3      	cmp	r3, r4
 8005672:	d112      	bne.n	800569a <_malloc_r+0xca>
 8005674:	9b00      	ldr	r3, [sp, #0]
 8005676:	601a      	str	r2, [r3, #0]
 8005678:	6863      	ldr	r3, [r4, #4]
 800567a:	6011      	str	r1, [r2, #0]
 800567c:	6053      	str	r3, [r2, #4]
 800567e:	0030      	movs	r0, r6
 8005680:	0025      	movs	r5, r4
 8005682:	f000 f9af 	bl	80059e4 <__malloc_unlock>
 8005686:	2207      	movs	r2, #7
 8005688:	350b      	adds	r5, #11
 800568a:	1d23      	adds	r3, r4, #4
 800568c:	4395      	bics	r5, r2
 800568e:	1aea      	subs	r2, r5, r3
 8005690:	429d      	cmp	r5, r3
 8005692:	d0e4      	beq.n	800565e <_malloc_r+0x8e>
 8005694:	1b5b      	subs	r3, r3, r5
 8005696:	50a3      	str	r3, [r4, r2]
 8005698:	e7e1      	b.n	800565e <_malloc_r+0x8e>
 800569a:	605a      	str	r2, [r3, #4]
 800569c:	e7ec      	b.n	8005678 <_malloc_r+0xa8>
 800569e:	6862      	ldr	r2, [r4, #4]
 80056a0:	42a3      	cmp	r3, r4
 80056a2:	d1d5      	bne.n	8005650 <_malloc_r+0x80>
 80056a4:	9b00      	ldr	r3, [sp, #0]
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	e7e9      	b.n	800567e <_malloc_r+0xae>
 80056aa:	0023      	movs	r3, r4
 80056ac:	6864      	ldr	r4, [r4, #4]
 80056ae:	e7a2      	b.n	80055f6 <_malloc_r+0x26>
 80056b0:	002c      	movs	r4, r5
 80056b2:	686d      	ldr	r5, [r5, #4]
 80056b4:	e7ab      	b.n	800560e <_malloc_r+0x3e>
 80056b6:	0013      	movs	r3, r2
 80056b8:	e7c4      	b.n	8005644 <_malloc_r+0x74>
 80056ba:	230c      	movs	r3, #12
 80056bc:	0030      	movs	r0, r6
 80056be:	6033      	str	r3, [r6, #0]
 80056c0:	f000 f990 	bl	80059e4 <__malloc_unlock>
 80056c4:	e7cb      	b.n	800565e <_malloc_r+0x8e>
 80056c6:	6027      	str	r7, [r4, #0]
 80056c8:	e7d9      	b.n	800567e <_malloc_r+0xae>
 80056ca:	605b      	str	r3, [r3, #4]
 80056cc:	deff      	udf	#255	; 0xff
 80056ce:	46c0      	nop			; (mov r8, r8)
 80056d0:	20000428 	.word	0x20000428

080056d4 <_printf_common>:
 80056d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056d6:	0016      	movs	r6, r2
 80056d8:	9301      	str	r3, [sp, #4]
 80056da:	688a      	ldr	r2, [r1, #8]
 80056dc:	690b      	ldr	r3, [r1, #16]
 80056de:	000c      	movs	r4, r1
 80056e0:	9000      	str	r0, [sp, #0]
 80056e2:	4293      	cmp	r3, r2
 80056e4:	da00      	bge.n	80056e8 <_printf_common+0x14>
 80056e6:	0013      	movs	r3, r2
 80056e8:	0022      	movs	r2, r4
 80056ea:	6033      	str	r3, [r6, #0]
 80056ec:	3243      	adds	r2, #67	; 0x43
 80056ee:	7812      	ldrb	r2, [r2, #0]
 80056f0:	2a00      	cmp	r2, #0
 80056f2:	d001      	beq.n	80056f8 <_printf_common+0x24>
 80056f4:	3301      	adds	r3, #1
 80056f6:	6033      	str	r3, [r6, #0]
 80056f8:	6823      	ldr	r3, [r4, #0]
 80056fa:	069b      	lsls	r3, r3, #26
 80056fc:	d502      	bpl.n	8005704 <_printf_common+0x30>
 80056fe:	6833      	ldr	r3, [r6, #0]
 8005700:	3302      	adds	r3, #2
 8005702:	6033      	str	r3, [r6, #0]
 8005704:	6822      	ldr	r2, [r4, #0]
 8005706:	2306      	movs	r3, #6
 8005708:	0015      	movs	r5, r2
 800570a:	401d      	ands	r5, r3
 800570c:	421a      	tst	r2, r3
 800570e:	d027      	beq.n	8005760 <_printf_common+0x8c>
 8005710:	0023      	movs	r3, r4
 8005712:	3343      	adds	r3, #67	; 0x43
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	1e5a      	subs	r2, r3, #1
 8005718:	4193      	sbcs	r3, r2
 800571a:	6822      	ldr	r2, [r4, #0]
 800571c:	0692      	lsls	r2, r2, #26
 800571e:	d430      	bmi.n	8005782 <_printf_common+0xae>
 8005720:	0022      	movs	r2, r4
 8005722:	9901      	ldr	r1, [sp, #4]
 8005724:	9800      	ldr	r0, [sp, #0]
 8005726:	9d08      	ldr	r5, [sp, #32]
 8005728:	3243      	adds	r2, #67	; 0x43
 800572a:	47a8      	blx	r5
 800572c:	3001      	adds	r0, #1
 800572e:	d025      	beq.n	800577c <_printf_common+0xa8>
 8005730:	2206      	movs	r2, #6
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	2500      	movs	r5, #0
 8005736:	4013      	ands	r3, r2
 8005738:	2b04      	cmp	r3, #4
 800573a:	d105      	bne.n	8005748 <_printf_common+0x74>
 800573c:	6833      	ldr	r3, [r6, #0]
 800573e:	68e5      	ldr	r5, [r4, #12]
 8005740:	1aed      	subs	r5, r5, r3
 8005742:	43eb      	mvns	r3, r5
 8005744:	17db      	asrs	r3, r3, #31
 8005746:	401d      	ands	r5, r3
 8005748:	68a3      	ldr	r3, [r4, #8]
 800574a:	6922      	ldr	r2, [r4, #16]
 800574c:	4293      	cmp	r3, r2
 800574e:	dd01      	ble.n	8005754 <_printf_common+0x80>
 8005750:	1a9b      	subs	r3, r3, r2
 8005752:	18ed      	adds	r5, r5, r3
 8005754:	2600      	movs	r6, #0
 8005756:	42b5      	cmp	r5, r6
 8005758:	d120      	bne.n	800579c <_printf_common+0xc8>
 800575a:	2000      	movs	r0, #0
 800575c:	e010      	b.n	8005780 <_printf_common+0xac>
 800575e:	3501      	adds	r5, #1
 8005760:	68e3      	ldr	r3, [r4, #12]
 8005762:	6832      	ldr	r2, [r6, #0]
 8005764:	1a9b      	subs	r3, r3, r2
 8005766:	42ab      	cmp	r3, r5
 8005768:	ddd2      	ble.n	8005710 <_printf_common+0x3c>
 800576a:	0022      	movs	r2, r4
 800576c:	2301      	movs	r3, #1
 800576e:	9901      	ldr	r1, [sp, #4]
 8005770:	9800      	ldr	r0, [sp, #0]
 8005772:	9f08      	ldr	r7, [sp, #32]
 8005774:	3219      	adds	r2, #25
 8005776:	47b8      	blx	r7
 8005778:	3001      	adds	r0, #1
 800577a:	d1f0      	bne.n	800575e <_printf_common+0x8a>
 800577c:	2001      	movs	r0, #1
 800577e:	4240      	negs	r0, r0
 8005780:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005782:	2030      	movs	r0, #48	; 0x30
 8005784:	18e1      	adds	r1, r4, r3
 8005786:	3143      	adds	r1, #67	; 0x43
 8005788:	7008      	strb	r0, [r1, #0]
 800578a:	0021      	movs	r1, r4
 800578c:	1c5a      	adds	r2, r3, #1
 800578e:	3145      	adds	r1, #69	; 0x45
 8005790:	7809      	ldrb	r1, [r1, #0]
 8005792:	18a2      	adds	r2, r4, r2
 8005794:	3243      	adds	r2, #67	; 0x43
 8005796:	3302      	adds	r3, #2
 8005798:	7011      	strb	r1, [r2, #0]
 800579a:	e7c1      	b.n	8005720 <_printf_common+0x4c>
 800579c:	0022      	movs	r2, r4
 800579e:	2301      	movs	r3, #1
 80057a0:	9901      	ldr	r1, [sp, #4]
 80057a2:	9800      	ldr	r0, [sp, #0]
 80057a4:	9f08      	ldr	r7, [sp, #32]
 80057a6:	321a      	adds	r2, #26
 80057a8:	47b8      	blx	r7
 80057aa:	3001      	adds	r0, #1
 80057ac:	d0e6      	beq.n	800577c <_printf_common+0xa8>
 80057ae:	3601      	adds	r6, #1
 80057b0:	e7d1      	b.n	8005756 <_printf_common+0x82>
	...

080057b4 <_printf_i>:
 80057b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057b6:	b08b      	sub	sp, #44	; 0x2c
 80057b8:	9206      	str	r2, [sp, #24]
 80057ba:	000a      	movs	r2, r1
 80057bc:	3243      	adds	r2, #67	; 0x43
 80057be:	9307      	str	r3, [sp, #28]
 80057c0:	9005      	str	r0, [sp, #20]
 80057c2:	9204      	str	r2, [sp, #16]
 80057c4:	7e0a      	ldrb	r2, [r1, #24]
 80057c6:	000c      	movs	r4, r1
 80057c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80057ca:	2a78      	cmp	r2, #120	; 0x78
 80057cc:	d809      	bhi.n	80057e2 <_printf_i+0x2e>
 80057ce:	2a62      	cmp	r2, #98	; 0x62
 80057d0:	d80b      	bhi.n	80057ea <_printf_i+0x36>
 80057d2:	2a00      	cmp	r2, #0
 80057d4:	d100      	bne.n	80057d8 <_printf_i+0x24>
 80057d6:	e0be      	b.n	8005956 <_printf_i+0x1a2>
 80057d8:	497c      	ldr	r1, [pc, #496]	; (80059cc <_printf_i+0x218>)
 80057da:	9103      	str	r1, [sp, #12]
 80057dc:	2a58      	cmp	r2, #88	; 0x58
 80057de:	d100      	bne.n	80057e2 <_printf_i+0x2e>
 80057e0:	e093      	b.n	800590a <_printf_i+0x156>
 80057e2:	0026      	movs	r6, r4
 80057e4:	3642      	adds	r6, #66	; 0x42
 80057e6:	7032      	strb	r2, [r6, #0]
 80057e8:	e022      	b.n	8005830 <_printf_i+0x7c>
 80057ea:	0010      	movs	r0, r2
 80057ec:	3863      	subs	r0, #99	; 0x63
 80057ee:	2815      	cmp	r0, #21
 80057f0:	d8f7      	bhi.n	80057e2 <_printf_i+0x2e>
 80057f2:	f7fa fc89 	bl	8000108 <__gnu_thumb1_case_shi>
 80057f6:	0016      	.short	0x0016
 80057f8:	fff6001f 	.word	0xfff6001f
 80057fc:	fff6fff6 	.word	0xfff6fff6
 8005800:	001ffff6 	.word	0x001ffff6
 8005804:	fff6fff6 	.word	0xfff6fff6
 8005808:	fff6fff6 	.word	0xfff6fff6
 800580c:	003600a3 	.word	0x003600a3
 8005810:	fff60083 	.word	0xfff60083
 8005814:	00b4fff6 	.word	0x00b4fff6
 8005818:	0036fff6 	.word	0x0036fff6
 800581c:	fff6fff6 	.word	0xfff6fff6
 8005820:	0087      	.short	0x0087
 8005822:	0026      	movs	r6, r4
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	3642      	adds	r6, #66	; 0x42
 8005828:	1d11      	adds	r1, r2, #4
 800582a:	6019      	str	r1, [r3, #0]
 800582c:	6813      	ldr	r3, [r2, #0]
 800582e:	7033      	strb	r3, [r6, #0]
 8005830:	2301      	movs	r3, #1
 8005832:	e0a2      	b.n	800597a <_printf_i+0x1c6>
 8005834:	6818      	ldr	r0, [r3, #0]
 8005836:	6809      	ldr	r1, [r1, #0]
 8005838:	1d02      	adds	r2, r0, #4
 800583a:	060d      	lsls	r5, r1, #24
 800583c:	d50b      	bpl.n	8005856 <_printf_i+0xa2>
 800583e:	6805      	ldr	r5, [r0, #0]
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	2d00      	cmp	r5, #0
 8005844:	da03      	bge.n	800584e <_printf_i+0x9a>
 8005846:	232d      	movs	r3, #45	; 0x2d
 8005848:	9a04      	ldr	r2, [sp, #16]
 800584a:	426d      	negs	r5, r5
 800584c:	7013      	strb	r3, [r2, #0]
 800584e:	4b5f      	ldr	r3, [pc, #380]	; (80059cc <_printf_i+0x218>)
 8005850:	270a      	movs	r7, #10
 8005852:	9303      	str	r3, [sp, #12]
 8005854:	e01b      	b.n	800588e <_printf_i+0xda>
 8005856:	6805      	ldr	r5, [r0, #0]
 8005858:	601a      	str	r2, [r3, #0]
 800585a:	0649      	lsls	r1, r1, #25
 800585c:	d5f1      	bpl.n	8005842 <_printf_i+0x8e>
 800585e:	b22d      	sxth	r5, r5
 8005860:	e7ef      	b.n	8005842 <_printf_i+0x8e>
 8005862:	680d      	ldr	r5, [r1, #0]
 8005864:	6819      	ldr	r1, [r3, #0]
 8005866:	1d08      	adds	r0, r1, #4
 8005868:	6018      	str	r0, [r3, #0]
 800586a:	062e      	lsls	r6, r5, #24
 800586c:	d501      	bpl.n	8005872 <_printf_i+0xbe>
 800586e:	680d      	ldr	r5, [r1, #0]
 8005870:	e003      	b.n	800587a <_printf_i+0xc6>
 8005872:	066d      	lsls	r5, r5, #25
 8005874:	d5fb      	bpl.n	800586e <_printf_i+0xba>
 8005876:	680d      	ldr	r5, [r1, #0]
 8005878:	b2ad      	uxth	r5, r5
 800587a:	4b54      	ldr	r3, [pc, #336]	; (80059cc <_printf_i+0x218>)
 800587c:	2708      	movs	r7, #8
 800587e:	9303      	str	r3, [sp, #12]
 8005880:	2a6f      	cmp	r2, #111	; 0x6f
 8005882:	d000      	beq.n	8005886 <_printf_i+0xd2>
 8005884:	3702      	adds	r7, #2
 8005886:	0023      	movs	r3, r4
 8005888:	2200      	movs	r2, #0
 800588a:	3343      	adds	r3, #67	; 0x43
 800588c:	701a      	strb	r2, [r3, #0]
 800588e:	6863      	ldr	r3, [r4, #4]
 8005890:	60a3      	str	r3, [r4, #8]
 8005892:	2b00      	cmp	r3, #0
 8005894:	db03      	blt.n	800589e <_printf_i+0xea>
 8005896:	2104      	movs	r1, #4
 8005898:	6822      	ldr	r2, [r4, #0]
 800589a:	438a      	bics	r2, r1
 800589c:	6022      	str	r2, [r4, #0]
 800589e:	2d00      	cmp	r5, #0
 80058a0:	d102      	bne.n	80058a8 <_printf_i+0xf4>
 80058a2:	9e04      	ldr	r6, [sp, #16]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00c      	beq.n	80058c2 <_printf_i+0x10e>
 80058a8:	9e04      	ldr	r6, [sp, #16]
 80058aa:	0028      	movs	r0, r5
 80058ac:	0039      	movs	r1, r7
 80058ae:	f7fa fcbb 	bl	8000228 <__aeabi_uidivmod>
 80058b2:	9b03      	ldr	r3, [sp, #12]
 80058b4:	3e01      	subs	r6, #1
 80058b6:	5c5b      	ldrb	r3, [r3, r1]
 80058b8:	7033      	strb	r3, [r6, #0]
 80058ba:	002b      	movs	r3, r5
 80058bc:	0005      	movs	r5, r0
 80058be:	429f      	cmp	r7, r3
 80058c0:	d9f3      	bls.n	80058aa <_printf_i+0xf6>
 80058c2:	2f08      	cmp	r7, #8
 80058c4:	d109      	bne.n	80058da <_printf_i+0x126>
 80058c6:	6823      	ldr	r3, [r4, #0]
 80058c8:	07db      	lsls	r3, r3, #31
 80058ca:	d506      	bpl.n	80058da <_printf_i+0x126>
 80058cc:	6862      	ldr	r2, [r4, #4]
 80058ce:	6923      	ldr	r3, [r4, #16]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	dc02      	bgt.n	80058da <_printf_i+0x126>
 80058d4:	2330      	movs	r3, #48	; 0x30
 80058d6:	3e01      	subs	r6, #1
 80058d8:	7033      	strb	r3, [r6, #0]
 80058da:	9b04      	ldr	r3, [sp, #16]
 80058dc:	1b9b      	subs	r3, r3, r6
 80058de:	6123      	str	r3, [r4, #16]
 80058e0:	9b07      	ldr	r3, [sp, #28]
 80058e2:	0021      	movs	r1, r4
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	9805      	ldr	r0, [sp, #20]
 80058e8:	9b06      	ldr	r3, [sp, #24]
 80058ea:	aa09      	add	r2, sp, #36	; 0x24
 80058ec:	f7ff fef2 	bl	80056d4 <_printf_common>
 80058f0:	3001      	adds	r0, #1
 80058f2:	d147      	bne.n	8005984 <_printf_i+0x1d0>
 80058f4:	2001      	movs	r0, #1
 80058f6:	4240      	negs	r0, r0
 80058f8:	b00b      	add	sp, #44	; 0x2c
 80058fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058fc:	2220      	movs	r2, #32
 80058fe:	6809      	ldr	r1, [r1, #0]
 8005900:	430a      	orrs	r2, r1
 8005902:	6022      	str	r2, [r4, #0]
 8005904:	2278      	movs	r2, #120	; 0x78
 8005906:	4932      	ldr	r1, [pc, #200]	; (80059d0 <_printf_i+0x21c>)
 8005908:	9103      	str	r1, [sp, #12]
 800590a:	0021      	movs	r1, r4
 800590c:	3145      	adds	r1, #69	; 0x45
 800590e:	700a      	strb	r2, [r1, #0]
 8005910:	6819      	ldr	r1, [r3, #0]
 8005912:	6822      	ldr	r2, [r4, #0]
 8005914:	c920      	ldmia	r1!, {r5}
 8005916:	0610      	lsls	r0, r2, #24
 8005918:	d402      	bmi.n	8005920 <_printf_i+0x16c>
 800591a:	0650      	lsls	r0, r2, #25
 800591c:	d500      	bpl.n	8005920 <_printf_i+0x16c>
 800591e:	b2ad      	uxth	r5, r5
 8005920:	6019      	str	r1, [r3, #0]
 8005922:	07d3      	lsls	r3, r2, #31
 8005924:	d502      	bpl.n	800592c <_printf_i+0x178>
 8005926:	2320      	movs	r3, #32
 8005928:	4313      	orrs	r3, r2
 800592a:	6023      	str	r3, [r4, #0]
 800592c:	2710      	movs	r7, #16
 800592e:	2d00      	cmp	r5, #0
 8005930:	d1a9      	bne.n	8005886 <_printf_i+0xd2>
 8005932:	2220      	movs	r2, #32
 8005934:	6823      	ldr	r3, [r4, #0]
 8005936:	4393      	bics	r3, r2
 8005938:	6023      	str	r3, [r4, #0]
 800593a:	e7a4      	b.n	8005886 <_printf_i+0xd2>
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	680d      	ldr	r5, [r1, #0]
 8005940:	1d10      	adds	r0, r2, #4
 8005942:	6949      	ldr	r1, [r1, #20]
 8005944:	6018      	str	r0, [r3, #0]
 8005946:	6813      	ldr	r3, [r2, #0]
 8005948:	062e      	lsls	r6, r5, #24
 800594a:	d501      	bpl.n	8005950 <_printf_i+0x19c>
 800594c:	6019      	str	r1, [r3, #0]
 800594e:	e002      	b.n	8005956 <_printf_i+0x1a2>
 8005950:	066d      	lsls	r5, r5, #25
 8005952:	d5fb      	bpl.n	800594c <_printf_i+0x198>
 8005954:	8019      	strh	r1, [r3, #0]
 8005956:	2300      	movs	r3, #0
 8005958:	9e04      	ldr	r6, [sp, #16]
 800595a:	6123      	str	r3, [r4, #16]
 800595c:	e7c0      	b.n	80058e0 <_printf_i+0x12c>
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	1d11      	adds	r1, r2, #4
 8005962:	6019      	str	r1, [r3, #0]
 8005964:	6816      	ldr	r6, [r2, #0]
 8005966:	2100      	movs	r1, #0
 8005968:	0030      	movs	r0, r6
 800596a:	6862      	ldr	r2, [r4, #4]
 800596c:	f000 f896 	bl	8005a9c <memchr>
 8005970:	2800      	cmp	r0, #0
 8005972:	d001      	beq.n	8005978 <_printf_i+0x1c4>
 8005974:	1b80      	subs	r0, r0, r6
 8005976:	6060      	str	r0, [r4, #4]
 8005978:	6863      	ldr	r3, [r4, #4]
 800597a:	6123      	str	r3, [r4, #16]
 800597c:	2300      	movs	r3, #0
 800597e:	9a04      	ldr	r2, [sp, #16]
 8005980:	7013      	strb	r3, [r2, #0]
 8005982:	e7ad      	b.n	80058e0 <_printf_i+0x12c>
 8005984:	0032      	movs	r2, r6
 8005986:	6923      	ldr	r3, [r4, #16]
 8005988:	9906      	ldr	r1, [sp, #24]
 800598a:	9805      	ldr	r0, [sp, #20]
 800598c:	9d07      	ldr	r5, [sp, #28]
 800598e:	47a8      	blx	r5
 8005990:	3001      	adds	r0, #1
 8005992:	d0af      	beq.n	80058f4 <_printf_i+0x140>
 8005994:	6823      	ldr	r3, [r4, #0]
 8005996:	079b      	lsls	r3, r3, #30
 8005998:	d415      	bmi.n	80059c6 <_printf_i+0x212>
 800599a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800599c:	68e0      	ldr	r0, [r4, #12]
 800599e:	4298      	cmp	r0, r3
 80059a0:	daaa      	bge.n	80058f8 <_printf_i+0x144>
 80059a2:	0018      	movs	r0, r3
 80059a4:	e7a8      	b.n	80058f8 <_printf_i+0x144>
 80059a6:	0022      	movs	r2, r4
 80059a8:	2301      	movs	r3, #1
 80059aa:	9906      	ldr	r1, [sp, #24]
 80059ac:	9805      	ldr	r0, [sp, #20]
 80059ae:	9e07      	ldr	r6, [sp, #28]
 80059b0:	3219      	adds	r2, #25
 80059b2:	47b0      	blx	r6
 80059b4:	3001      	adds	r0, #1
 80059b6:	d09d      	beq.n	80058f4 <_printf_i+0x140>
 80059b8:	3501      	adds	r5, #1
 80059ba:	68e3      	ldr	r3, [r4, #12]
 80059bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059be:	1a9b      	subs	r3, r3, r2
 80059c0:	42ab      	cmp	r3, r5
 80059c2:	dcf0      	bgt.n	80059a6 <_printf_i+0x1f2>
 80059c4:	e7e9      	b.n	800599a <_printf_i+0x1e6>
 80059c6:	2500      	movs	r5, #0
 80059c8:	e7f7      	b.n	80059ba <_printf_i+0x206>
 80059ca:	46c0      	nop			; (mov r8, r8)
 80059cc:	08005c09 	.word	0x08005c09
 80059d0:	08005c1a 	.word	0x08005c1a

080059d4 <__malloc_lock>:
 80059d4:	b510      	push	{r4, lr}
 80059d6:	4802      	ldr	r0, [pc, #8]	; (80059e0 <__malloc_lock+0xc>)
 80059d8:	f7ff fc74 	bl	80052c4 <__retarget_lock_acquire_recursive>
 80059dc:	bd10      	pop	{r4, pc}
 80059de:	46c0      	nop			; (mov r8, r8)
 80059e0:	20000424 	.word	0x20000424

080059e4 <__malloc_unlock>:
 80059e4:	b510      	push	{r4, lr}
 80059e6:	4802      	ldr	r0, [pc, #8]	; (80059f0 <__malloc_unlock+0xc>)
 80059e8:	f7ff fc6d 	bl	80052c6 <__retarget_lock_release_recursive>
 80059ec:	bd10      	pop	{r4, pc}
 80059ee:	46c0      	nop			; (mov r8, r8)
 80059f0:	20000424 	.word	0x20000424

080059f4 <_realloc_r>:
 80059f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059f6:	0007      	movs	r7, r0
 80059f8:	000e      	movs	r6, r1
 80059fa:	0014      	movs	r4, r2
 80059fc:	2900      	cmp	r1, #0
 80059fe:	d105      	bne.n	8005a0c <_realloc_r+0x18>
 8005a00:	0011      	movs	r1, r2
 8005a02:	f7ff fde5 	bl	80055d0 <_malloc_r>
 8005a06:	0005      	movs	r5, r0
 8005a08:	0028      	movs	r0, r5
 8005a0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005a0c:	2a00      	cmp	r2, #0
 8005a0e:	d103      	bne.n	8005a18 <_realloc_r+0x24>
 8005a10:	f000 f858 	bl	8005ac4 <_free_r>
 8005a14:	0025      	movs	r5, r4
 8005a16:	e7f7      	b.n	8005a08 <_realloc_r+0x14>
 8005a18:	f000 f89e 	bl	8005b58 <_malloc_usable_size_r>
 8005a1c:	9001      	str	r0, [sp, #4]
 8005a1e:	4284      	cmp	r4, r0
 8005a20:	d803      	bhi.n	8005a2a <_realloc_r+0x36>
 8005a22:	0035      	movs	r5, r6
 8005a24:	0843      	lsrs	r3, r0, #1
 8005a26:	42a3      	cmp	r3, r4
 8005a28:	d3ee      	bcc.n	8005a08 <_realloc_r+0x14>
 8005a2a:	0021      	movs	r1, r4
 8005a2c:	0038      	movs	r0, r7
 8005a2e:	f7ff fdcf 	bl	80055d0 <_malloc_r>
 8005a32:	1e05      	subs	r5, r0, #0
 8005a34:	d0e8      	beq.n	8005a08 <_realloc_r+0x14>
 8005a36:	9b01      	ldr	r3, [sp, #4]
 8005a38:	0022      	movs	r2, r4
 8005a3a:	429c      	cmp	r4, r3
 8005a3c:	d900      	bls.n	8005a40 <_realloc_r+0x4c>
 8005a3e:	001a      	movs	r2, r3
 8005a40:	0031      	movs	r1, r6
 8005a42:	0028      	movs	r0, r5
 8005a44:	f000 f835 	bl	8005ab2 <memcpy>
 8005a48:	0031      	movs	r1, r6
 8005a4a:	0038      	movs	r0, r7
 8005a4c:	f000 f83a 	bl	8005ac4 <_free_r>
 8005a50:	e7da      	b.n	8005a08 <_realloc_r+0x14>

08005a52 <memmove>:
 8005a52:	b510      	push	{r4, lr}
 8005a54:	4288      	cmp	r0, r1
 8005a56:	d902      	bls.n	8005a5e <memmove+0xc>
 8005a58:	188b      	adds	r3, r1, r2
 8005a5a:	4298      	cmp	r0, r3
 8005a5c:	d303      	bcc.n	8005a66 <memmove+0x14>
 8005a5e:	2300      	movs	r3, #0
 8005a60:	e007      	b.n	8005a72 <memmove+0x20>
 8005a62:	5c8b      	ldrb	r3, [r1, r2]
 8005a64:	5483      	strb	r3, [r0, r2]
 8005a66:	3a01      	subs	r2, #1
 8005a68:	d2fb      	bcs.n	8005a62 <memmove+0x10>
 8005a6a:	bd10      	pop	{r4, pc}
 8005a6c:	5ccc      	ldrb	r4, [r1, r3]
 8005a6e:	54c4      	strb	r4, [r0, r3]
 8005a70:	3301      	adds	r3, #1
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d1fa      	bne.n	8005a6c <memmove+0x1a>
 8005a76:	e7f8      	b.n	8005a6a <memmove+0x18>

08005a78 <_sbrk_r>:
 8005a78:	2300      	movs	r3, #0
 8005a7a:	b570      	push	{r4, r5, r6, lr}
 8005a7c:	4d06      	ldr	r5, [pc, #24]	; (8005a98 <_sbrk_r+0x20>)
 8005a7e:	0004      	movs	r4, r0
 8005a80:	0008      	movs	r0, r1
 8005a82:	602b      	str	r3, [r5, #0]
 8005a84:	f7fb fc14 	bl	80012b0 <_sbrk>
 8005a88:	1c43      	adds	r3, r0, #1
 8005a8a:	d103      	bne.n	8005a94 <_sbrk_r+0x1c>
 8005a8c:	682b      	ldr	r3, [r5, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d000      	beq.n	8005a94 <_sbrk_r+0x1c>
 8005a92:	6023      	str	r3, [r4, #0]
 8005a94:	bd70      	pop	{r4, r5, r6, pc}
 8005a96:	46c0      	nop			; (mov r8, r8)
 8005a98:	20000430 	.word	0x20000430

08005a9c <memchr>:
 8005a9c:	b2c9      	uxtb	r1, r1
 8005a9e:	1882      	adds	r2, r0, r2
 8005aa0:	4290      	cmp	r0, r2
 8005aa2:	d101      	bne.n	8005aa8 <memchr+0xc>
 8005aa4:	2000      	movs	r0, #0
 8005aa6:	4770      	bx	lr
 8005aa8:	7803      	ldrb	r3, [r0, #0]
 8005aaa:	428b      	cmp	r3, r1
 8005aac:	d0fb      	beq.n	8005aa6 <memchr+0xa>
 8005aae:	3001      	adds	r0, #1
 8005ab0:	e7f6      	b.n	8005aa0 <memchr+0x4>

08005ab2 <memcpy>:
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	b510      	push	{r4, lr}
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d100      	bne.n	8005abc <memcpy+0xa>
 8005aba:	bd10      	pop	{r4, pc}
 8005abc:	5ccc      	ldrb	r4, [r1, r3]
 8005abe:	54c4      	strb	r4, [r0, r3]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	e7f8      	b.n	8005ab6 <memcpy+0x4>

08005ac4 <_free_r>:
 8005ac4:	b570      	push	{r4, r5, r6, lr}
 8005ac6:	0005      	movs	r5, r0
 8005ac8:	2900      	cmp	r1, #0
 8005aca:	d010      	beq.n	8005aee <_free_r+0x2a>
 8005acc:	1f0c      	subs	r4, r1, #4
 8005ace:	6823      	ldr	r3, [r4, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	da00      	bge.n	8005ad6 <_free_r+0x12>
 8005ad4:	18e4      	adds	r4, r4, r3
 8005ad6:	0028      	movs	r0, r5
 8005ad8:	f7ff ff7c 	bl	80059d4 <__malloc_lock>
 8005adc:	4a1d      	ldr	r2, [pc, #116]	; (8005b54 <_free_r+0x90>)
 8005ade:	6813      	ldr	r3, [r2, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d105      	bne.n	8005af0 <_free_r+0x2c>
 8005ae4:	6063      	str	r3, [r4, #4]
 8005ae6:	6014      	str	r4, [r2, #0]
 8005ae8:	0028      	movs	r0, r5
 8005aea:	f7ff ff7b 	bl	80059e4 <__malloc_unlock>
 8005aee:	bd70      	pop	{r4, r5, r6, pc}
 8005af0:	42a3      	cmp	r3, r4
 8005af2:	d908      	bls.n	8005b06 <_free_r+0x42>
 8005af4:	6820      	ldr	r0, [r4, #0]
 8005af6:	1821      	adds	r1, r4, r0
 8005af8:	428b      	cmp	r3, r1
 8005afa:	d1f3      	bne.n	8005ae4 <_free_r+0x20>
 8005afc:	6819      	ldr	r1, [r3, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	1809      	adds	r1, r1, r0
 8005b02:	6021      	str	r1, [r4, #0]
 8005b04:	e7ee      	b.n	8005ae4 <_free_r+0x20>
 8005b06:	001a      	movs	r2, r3
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d001      	beq.n	8005b12 <_free_r+0x4e>
 8005b0e:	42a3      	cmp	r3, r4
 8005b10:	d9f9      	bls.n	8005b06 <_free_r+0x42>
 8005b12:	6811      	ldr	r1, [r2, #0]
 8005b14:	1850      	adds	r0, r2, r1
 8005b16:	42a0      	cmp	r0, r4
 8005b18:	d10b      	bne.n	8005b32 <_free_r+0x6e>
 8005b1a:	6820      	ldr	r0, [r4, #0]
 8005b1c:	1809      	adds	r1, r1, r0
 8005b1e:	1850      	adds	r0, r2, r1
 8005b20:	6011      	str	r1, [r2, #0]
 8005b22:	4283      	cmp	r3, r0
 8005b24:	d1e0      	bne.n	8005ae8 <_free_r+0x24>
 8005b26:	6818      	ldr	r0, [r3, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	1841      	adds	r1, r0, r1
 8005b2c:	6011      	str	r1, [r2, #0]
 8005b2e:	6053      	str	r3, [r2, #4]
 8005b30:	e7da      	b.n	8005ae8 <_free_r+0x24>
 8005b32:	42a0      	cmp	r0, r4
 8005b34:	d902      	bls.n	8005b3c <_free_r+0x78>
 8005b36:	230c      	movs	r3, #12
 8005b38:	602b      	str	r3, [r5, #0]
 8005b3a:	e7d5      	b.n	8005ae8 <_free_r+0x24>
 8005b3c:	6820      	ldr	r0, [r4, #0]
 8005b3e:	1821      	adds	r1, r4, r0
 8005b40:	428b      	cmp	r3, r1
 8005b42:	d103      	bne.n	8005b4c <_free_r+0x88>
 8005b44:	6819      	ldr	r1, [r3, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	1809      	adds	r1, r1, r0
 8005b4a:	6021      	str	r1, [r4, #0]
 8005b4c:	6063      	str	r3, [r4, #4]
 8005b4e:	6054      	str	r4, [r2, #4]
 8005b50:	e7ca      	b.n	8005ae8 <_free_r+0x24>
 8005b52:	46c0      	nop			; (mov r8, r8)
 8005b54:	20000428 	.word	0x20000428

08005b58 <_malloc_usable_size_r>:
 8005b58:	1f0b      	subs	r3, r1, #4
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	1f18      	subs	r0, r3, #4
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	da01      	bge.n	8005b66 <_malloc_usable_size_r+0xe>
 8005b62:	580b      	ldr	r3, [r1, r0]
 8005b64:	18c0      	adds	r0, r0, r3
 8005b66:	4770      	bx	lr

08005b68 <_init>:
 8005b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b6a:	46c0      	nop			; (mov r8, r8)
 8005b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b6e:	bc08      	pop	{r3}
 8005b70:	469e      	mov	lr, r3
 8005b72:	4770      	bx	lr

08005b74 <_fini>:
 8005b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b76:	46c0      	nop			; (mov r8, r8)
 8005b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b7a:	bc08      	pop	{r3}
 8005b7c:	469e      	mov	lr, r3
 8005b7e:	4770      	bx	lr
