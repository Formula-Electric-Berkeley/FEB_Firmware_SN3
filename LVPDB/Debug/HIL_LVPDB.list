
HIL_LVPDB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079a0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08007b70  08007b70  00017b70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fbc  08007fbc  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007fbc  08007fbc  00017fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fc4  08007fc4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fc4  08007fc4  00017fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fc8  08007fc8  00017fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007fcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  200001d4  080081a0  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  080081a0  000204a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f2ee  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000281b  00000000  00000000  0002f535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca8  00000000  00000000  00031d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009c9  00000000  00000000  000329f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023da1  00000000  00000000  000333c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012348  00000000  00000000  00057162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf6b4  00000000  00000000  000694aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004488  00000000  00000000  00138b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  0013cfe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007b58 	.word	0x08007b58

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08007b58 	.word	0x08007b58

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <FEB_CAN_Init>:

uint32_t FEB_CAN_Tx_Mailbox;

// **************************************** Functions ****************************************

void FEB_CAN_Init(void) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	FEB_CAN_Filter_Config();
 8000f88:	f000 f80c 	bl	8000fa4 <FEB_CAN_Filter_Config>
	if (HAL_CAN_Start(&hcan2) != HAL_OK) {
 8000f8c:	4804      	ldr	r0, [pc, #16]	; (8000fa0 <FEB_CAN_Init+0x1c>)
 8000f8e:	f001 f991 	bl	80022b4 <HAL_CAN_Start>
        // Code Error - Shutdown
	}
	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000f92:	2102      	movs	r1, #2
 8000f94:	4802      	ldr	r0, [pc, #8]	; (8000fa0 <FEB_CAN_Init+0x1c>)
 8000f96:	f001 f9d1 	bl	800233c <HAL_CAN_ActivateNotification>
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000290 	.word	0x20000290

08000fa4 <FEB_CAN_Filter_Config>:

void FEB_CAN_Filter_Config(void) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
	uint8_t filter_bank = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	71fb      	strb	r3, [r7, #7]
	filter_bank = FEB_CAN_APPS_Filter(&hcan2, CAN_RX_FIFO0, filter_bank);
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <FEB_CAN_Filter_Config+0x24>)
 8000fb6:	f000 f809 	bl	8000fcc <FEB_CAN_APPS_Filter>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
	// Assign Filter
    // filter_bank = Function(&hcan2, CAN_RX_FIFO0, filter_bank);
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000290 	.word	0x20000290

08000fcc <FEB_CAN_APPS_Filter>:
extern CAN_TxHeaderTypeDef FEB_CAN_Tx_Header;
extern uint8_t FEB_CAN_Tx_Data[8];
extern uint32_t APPS_CAN_ID;
extern uint32_t FEB_CAN_Tx_Mailbox;

uint8_t FEB_CAN_APPS_Filter(CAN_HandleTypeDef* hcan, uint8_t FIFO_assignment, uint8_t filter_bank) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08e      	sub	sp, #56	; 0x38
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	70fb      	strb	r3, [r7, #3]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	70bb      	strb	r3, [r7, #2]
    // For multiple filters, create array of filter IDs and loop over IDs.

	uint16_t ids[] = {FEB_CAN_ID_APPS_BRAKE_PEDAL, FEB_CAN_ID_APPS_TPS};
 8000fdc:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <FEB_CAN_APPS_Filter+0x84>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	633b      	str	r3, [r7, #48]	; 0x30

	for(uint8_t i = 0; i < 2; i ++){
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000fe8:	e029      	b.n	800103e <FEB_CAN_APPS_Filter+0x72>

		CAN_FilterTypeDef filter_config;

		// Standard CAN - 2.0A - 11 bit
		filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8000fea:	2301      	movs	r3, #1
 8000fec:	62bb      	str	r3, [r7, #40]	; 0x28
		filter_config.FilterBank = filter_bank;
 8000fee:	78bb      	ldrb	r3, [r7, #2]
 8000ff0:	61fb      	str	r3, [r7, #28]
		filter_config.FilterFIFOAssignment = FIFO_assignment;
 8000ff2:	78fb      	ldrb	r3, [r7, #3]
 8000ff4:	61bb      	str	r3, [r7, #24]
		filter_config.FilterIdHigh = ids[i] << 5;
 8000ff6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	3338      	adds	r3, #56	; 0x38
 8000ffe:	443b      	add	r3, r7
 8001000:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 8001004:	015b      	lsls	r3, r3, #5
 8001006:	60bb      	str	r3, [r7, #8]
		filter_config.FilterIdLow = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
		filter_config.FilterMaskIdHigh = 0xFFE0;
 800100c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001010:	613b      	str	r3, [r7, #16]
		filter_config.FilterMaskIdLow = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
		filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8001016:	2300      	movs	r3, #0
 8001018:	623b      	str	r3, [r7, #32]
		filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 800101a:	2301      	movs	r3, #1
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
		filter_config.SlaveStartFilterBank = 27;
 800101e:	231b      	movs	r3, #27
 8001020:	62fb      	str	r3, [r7, #44]	; 0x2c
		filter_bank++;
 8001022:	78bb      	ldrb	r3, [r7, #2]
 8001024:	3301      	adds	r3, #1
 8001026:	70bb      	strb	r3, [r7, #2]


		if (HAL_CAN_ConfigFilter(hcan, &filter_config) != HAL_OK) {
 8001028:	f107 0308 	add.w	r3, r7, #8
 800102c:	4619      	mov	r1, r3
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f001 f860 	bl	80020f4 <HAL_CAN_ConfigFilter>
	for(uint8_t i = 0; i < 2; i ++){
 8001034:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001038:	3301      	adds	r3, #1
 800103a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800103e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001042:	2b01      	cmp	r3, #1
 8001044:	d9d1      	bls.n	8000fea <FEB_CAN_APPS_Filter+0x1e>
			// Code Error - Shutdown
		}
	}

	return filter_bank;
 8001046:	78bb      	ldrb	r3, [r7, #2]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3738      	adds	r7, #56	; 0x38
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	08007b70 	.word	0x08007b70

08001054 <FEB_Peripherals_Control>:
extern FEB_CAN_APPS_Message_t FEB_CAN_APPS_Message;
extern FEB_CAN_SW_Message_t FEB_CAN_SW_Message;

static bool isDriving = false;

void FEB_Peripherals_Control(){
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	  // activate peripheral devices if ready to drive
	  if (FEB_CAN_SW_Message.ready_to_drive == 1 && !isDriving) {
 8001058:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <FEB_Peripherals_Control+0x54>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d110      	bne.n	8001082 <FEB_Peripherals_Control+0x2e>
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <FEB_Peripherals_Control+0x58>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	f083 0301 	eor.w	r3, r3, #1
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d009      	beq.n	8001082 <FEB_Peripherals_Control+0x2e>
		  isDriving = true;
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <FEB_Peripherals_Control+0x58>)
 8001070:	2201      	movs	r2, #1
 8001072:	701a      	strb	r2, [r3, #0]
		  Enable_Coolant_Pump();
 8001074:	f000 f840 	bl	80010f8 <Enable_Coolant_Pump>
		  Enable_Accumulator_Fans();
 8001078:	f000 f856 	bl	8001128 <Enable_Accumulator_Fans>
		  Enable_Extra();
 800107c:	f000 f86c 	bl	8001158 <Enable_Extra>
		  isDriving = false;
		  Disable_Coolant_Pump();
		  Disable_Accumulator_Fans();
		  Disable_Extra();
	  }
}
 8001080:	e010      	b.n	80010a4 <FEB_Peripherals_Control+0x50>
	  } else if (FEB_CAN_SW_Message.ready_to_drive == 0 && isDriving) {
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <FEB_Peripherals_Control+0x54>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d10c      	bne.n	80010a4 <FEB_Peripherals_Control+0x50>
 800108a:	4b08      	ldr	r3, [pc, #32]	; (80010ac <FEB_Peripherals_Control+0x58>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d008      	beq.n	80010a4 <FEB_Peripherals_Control+0x50>
		  isDriving = false;
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <FEB_Peripherals_Control+0x58>)
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
		  Disable_Coolant_Pump();
 8001098:	f000 f83a 	bl	8001110 <Disable_Coolant_Pump>
		  Disable_Accumulator_Fans();
 800109c:	f000 f850 	bl	8001140 <Disable_Accumulator_Fans>
		  Disable_Extra();
 80010a0:	f000 f866 	bl	8001170 <Disable_Extra>
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	200001f8 	.word	0x200001f8
 80010ac:	200001f9 	.word	0x200001f9

080010b0 <FEB_Brake_Light_Control>:


void FEB_Brake_Light_Control(){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	if (FEB_CAN_APPS_Message.brake_pedal > BRAKE_THRE) {
 80010b4:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <FEB_Brake_Light_Control+0x40>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fa65 	bl	8000588 <__aeabi_f2d>
 80010be:	a30a      	add	r3, pc, #40	; (adr r3, 80010e8 <FEB_Brake_Light_Control+0x38>)
 80010c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c4:	f7ff fd48 	bl	8000b58 <__aeabi_dcmpgt>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d005      	beq.n	80010da <FEB_Brake_Light_Control+0x2a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);// PA1 high
 80010ce:	2201      	movs	r2, #1
 80010d0:	2102      	movs	r1, #2
 80010d2:	4808      	ldr	r0, [pc, #32]	; (80010f4 <FEB_Brake_Light_Control+0x44>)
 80010d4:	f001 fbd2 	bl	800287c <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);// PA1 low
	}
}
 80010d8:	e004      	b.n	80010e4 <FEB_Brake_Light_Control+0x34>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);// PA1 low
 80010da:	2200      	movs	r2, #0
 80010dc:	2102      	movs	r1, #2
 80010de:	4805      	ldr	r0, [pc, #20]	; (80010f4 <FEB_Brake_Light_Control+0x44>)
 80010e0:	f001 fbcc 	bl	800287c <HAL_GPIO_WritePin>
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	9999999a 	.word	0x9999999a
 80010ec:	3fc99999 	.word	0x3fc99999
 80010f0:	200001f0 	.word	0x200001f0
 80010f4:	40020000 	.word	0x40020000

080010f8 <Enable_Coolant_Pump>:

void Enable_Coolant_Pump(){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);// pull PC11 high to enable coolant pump
 80010fc:	2201      	movs	r2, #1
 80010fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001102:	4802      	ldr	r0, [pc, #8]	; (800110c <Enable_Coolant_Pump+0x14>)
 8001104:	f001 fbba 	bl	800287c <HAL_GPIO_WritePin>
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40020800 	.word	0x40020800

08001110 <Disable_Coolant_Pump>:

void Disable_Coolant_Pump(){
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001114:	2200      	movs	r2, #0
 8001116:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800111a:	4802      	ldr	r0, [pc, #8]	; (8001124 <Disable_Coolant_Pump+0x14>)
 800111c:	f001 fbae 	bl	800287c <HAL_GPIO_WritePin>
}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40020800 	.word	0x40020800

08001128 <Enable_Accumulator_Fans>:

void Enable_Accumulator_Fans(){
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);// pull PB5 high to enable accumulator fans
 800112c:	2201      	movs	r2, #1
 800112e:	2120      	movs	r1, #32
 8001130:	4802      	ldr	r0, [pc, #8]	; (800113c <Enable_Accumulator_Fans+0x14>)
 8001132:	f001 fba3 	bl	800287c <HAL_GPIO_WritePin>
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40020400 	.word	0x40020400

08001140 <Disable_Accumulator_Fans>:

void Disable_Accumulator_Fans(){
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001144:	2200      	movs	r2, #0
 8001146:	2120      	movs	r1, #32
 8001148:	4802      	ldr	r0, [pc, #8]	; (8001154 <Disable_Accumulator_Fans+0x14>)
 800114a:	f001 fb97 	bl	800287c <HAL_GPIO_WritePin>
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40020400 	.word	0x40020400

08001158 <Enable_Extra>:

void Enable_Extra(){
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);// pull PC3 high to enable extra
 800115c:	2201      	movs	r2, #1
 800115e:	2108      	movs	r1, #8
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <Enable_Extra+0x14>)
 8001162:	f001 fb8b 	bl	800287c <HAL_GPIO_WritePin>
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40020800 	.word	0x40020800

08001170 <Disable_Extra>:

void Disable_Extra(){
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001174:	2200      	movs	r2, #0
 8001176:	2108      	movs	r1, #8
 8001178:	4802      	ldr	r0, [pc, #8]	; (8001184 <Disable_Extra+0x14>)
 800117a:	f001 fb7f 	bl	800287c <HAL_GPIO_WritePin>
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40020800 	.word	0x40020800

08001188 <FEB_Main_Setup>:

char buf[128];
int buf_len;
extern UART_HandleTypeDef huart2;

void FEB_Main_Setup(void) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b08e      	sub	sp, #56	; 0x38
 800118c:	af02      	add	r7, sp, #8


	// configuration register value
	uint8_t CONFIG[2] = {0b01000001, 0b00100111}; // default settings
 800118e:	f242 7341 	movw	r3, #10049	; 0x2741
 8001192:	85bb      	strh	r3, [r7, #44]	; 0x2c
	 * Values needed to calibrate each of the TPS chips. This value gets passed
	 * into the init function called in later
	 */

	// calibration register values
	uint8_t MAIN_CAL[2] = {0b00000110, 0b10001110}; // Imax = 50A
 8001194:	f648 6306 	movw	r3, #36358	; 0x8e06
 8001198:	853b      	strh	r3, [r7, #40]	; 0x28
	uint8_t CP_CAL[2] = {0b00010111, 0b01101000};
 800119a:	f646 0317 	movw	r3, #26647	; 0x6817
 800119e:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t AF_CAL[2] = {0b00101000, 0b11110110};
 80011a0:	f24f 6328 	movw	r3, #63016	; 0xf628
 80011a4:	843b      	strh	r3, [r7, #32]
	uint8_t EX_CAL[2] = {0b00110110, 0b10011101};
 80011a6:	f649 5336 	movw	r3, #40246	; 0x9d36
 80011aa:	83bb      	strh	r3, [r7, #28]

	// alert types
	uint8_t UNDERV[2] = {0b00010000, 0b00000000};
 80011ac:	2310      	movs	r3, #16
 80011ae:	833b      	strh	r3, [r7, #24]
	uint8_t OVERPWR[2] = {0b00001000, 0b00000000};
 80011b0:	2308      	movs	r3, #8
 80011b2:	82bb      	strh	r3, [r7, #20]

	// limits
	uint8_t LV_LIMIT[2] = {0b01000100, 0b11000000}; // = 22 / 1.25mV/bit = 17600; New limit
 80011b4:	f24c 0344 	movw	r3, #49220	; 0xc044
 80011b8:	823b      	strh	r3, [r7, #16]
	uint8_t CP_LIMIT[2] = {0b00000001, 0b01010000}; // = 336, 14 * 24
 80011ba:	f245 0301 	movw	r3, #20481	; 0x5001
 80011be:	81bb      	strh	r3, [r7, #12]
	uint8_t AF_LIMIT[2] = {0b00000000, 0b11000000}; // = 192, 8 * 24
 80011c0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80011c4:	813b      	strh	r3, [r7, #8]
	uint8_t EX_LIMIT[2] = {0b00000000, 0b10010000}; // = 144, 6 * 24
 80011c6:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 80011ca:	80bb      	strh	r3, [r7, #4]

	buf_len = sprintf((char*) buf, "pre can init\n");
 80011cc:	495f      	ldr	r1, [pc, #380]	; (800134c <FEB_Main_Setup+0x1c4>)
 80011ce:	4860      	ldr	r0, [pc, #384]	; (8001350 <FEB_Main_Setup+0x1c8>)
 80011d0:	f004 faa4 	bl	800571c <siprintf>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4a5f      	ldr	r2, [pc, #380]	; (8001354 <FEB_Main_Setup+0x1cc>)
 80011d8:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 80011da:	4b5e      	ldr	r3, [pc, #376]	; (8001354 <FEB_Main_Setup+0x1cc>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	b29a      	uxth	r2, r3
 80011e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011e4:	495a      	ldr	r1, [pc, #360]	; (8001350 <FEB_Main_Setup+0x1c8>)
 80011e6:	485c      	ldr	r0, [pc, #368]	; (8001358 <FEB_Main_Setup+0x1d0>)
 80011e8:	f003 fabd 	bl	8004766 <HAL_UART_Transmit>
	FEB_CAN_Init();
 80011ec:	f7ff feca 	bl	8000f84 <FEB_CAN_Init>
	//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);// pull PA0 high to enable shutdown source

	//TODO: GET ACCURATE UNDERV AND OVERPWR AND DIFFERENT LIMITS. THESE ARE PRIMARILY PLACEHOLDERS.

	// Testing i2c set up successful, serial monitor baud rate 115200
	buf_len = sprintf((char*) buf, "pre tps setup\n");
 80011f0:	495a      	ldr	r1, [pc, #360]	; (800135c <FEB_Main_Setup+0x1d4>)
 80011f2:	4857      	ldr	r0, [pc, #348]	; (8001350 <FEB_Main_Setup+0x1c8>)
 80011f4:	f004 fa92 	bl	800571c <siprintf>
 80011f8:	4603      	mov	r3, r0
 80011fa:	4a56      	ldr	r2, [pc, #344]	; (8001354 <FEB_Main_Setup+0x1cc>)
 80011fc:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 80011fe:	4b55      	ldr	r3, [pc, #340]	; (8001354 <FEB_Main_Setup+0x1cc>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	b29a      	uxth	r2, r3
 8001204:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001208:	4951      	ldr	r1, [pc, #324]	; (8001350 <FEB_Main_Setup+0x1c8>)
 800120a:	4853      	ldr	r0, [pc, #332]	; (8001358 <FEB_Main_Setup+0x1d0>)
 800120c:	f003 faab 	bl	8004766 <HAL_UART_Transmit>

	FEB_SETUP_TPS2482(&hi2c1, LV_ADDR, CONFIG, MAIN_CAL, UNDERV, LV_LIMIT);
 8001210:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001214:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001218:	f107 0310 	add.w	r3, r7, #16
 800121c:	9301      	str	r3, [sp, #4]
 800121e:	f107 0318 	add.w	r3, r7, #24
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	460b      	mov	r3, r1
 8001226:	2180      	movs	r1, #128	; 0x80
 8001228:	484d      	ldr	r0, [pc, #308]	; (8001360 <FEB_Main_Setup+0x1d8>)
 800122a:	f000 f8fd 	bl	8001428 <FEB_SETUP_TPS2482>
	buf_len = sprintf((char*) buf, "post lv setup\n");
 800122e:	494d      	ldr	r1, [pc, #308]	; (8001364 <FEB_Main_Setup+0x1dc>)
 8001230:	4847      	ldr	r0, [pc, #284]	; (8001350 <FEB_Main_Setup+0x1c8>)
 8001232:	f004 fa73 	bl	800571c <siprintf>
 8001236:	4603      	mov	r3, r0
 8001238:	4a46      	ldr	r2, [pc, #280]	; (8001354 <FEB_Main_Setup+0x1cc>)
 800123a:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 800123c:	4b45      	ldr	r3, [pc, #276]	; (8001354 <FEB_Main_Setup+0x1cc>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	b29a      	uxth	r2, r3
 8001242:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001246:	4942      	ldr	r1, [pc, #264]	; (8001350 <FEB_Main_Setup+0x1c8>)
 8001248:	4843      	ldr	r0, [pc, #268]	; (8001358 <FEB_Main_Setup+0x1d0>)
 800124a:	f003 fa8c 	bl	8004766 <HAL_UART_Transmit>

	FEB_SETUP_TPS2482(&hi2c1, CP_ADDR, CONFIG, CP_CAL, OVERPWR, CP_LIMIT);
 800124e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001252:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001256:	f107 030c 	add.w	r3, r7, #12
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	460b      	mov	r3, r1
 8001264:	2188      	movs	r1, #136	; 0x88
 8001266:	483e      	ldr	r0, [pc, #248]	; (8001360 <FEB_Main_Setup+0x1d8>)
 8001268:	f000 f8de 	bl	8001428 <FEB_SETUP_TPS2482>
	buf_len = sprintf((char*) buf, "post cp setup\n");
 800126c:	493e      	ldr	r1, [pc, #248]	; (8001368 <FEB_Main_Setup+0x1e0>)
 800126e:	4838      	ldr	r0, [pc, #224]	; (8001350 <FEB_Main_Setup+0x1c8>)
 8001270:	f004 fa54 	bl	800571c <siprintf>
 8001274:	4603      	mov	r3, r0
 8001276:	4a37      	ldr	r2, [pc, #220]	; (8001354 <FEB_Main_Setup+0x1cc>)
 8001278:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 800127a:	4b36      	ldr	r3, [pc, #216]	; (8001354 <FEB_Main_Setup+0x1cc>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	b29a      	uxth	r2, r3
 8001280:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001284:	4932      	ldr	r1, [pc, #200]	; (8001350 <FEB_Main_Setup+0x1c8>)
 8001286:	4834      	ldr	r0, [pc, #208]	; (8001358 <FEB_Main_Setup+0x1d0>)
 8001288:	f003 fa6d 	bl	8004766 <HAL_UART_Transmit>

	FEB_SETUP_TPS2482(&hi2c1, AF_ADDR, CONFIG, AF_CAL, OVERPWR, AF_LIMIT);
 800128c:	f107 0120 	add.w	r1, r7, #32
 8001290:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001294:	f107 0308 	add.w	r3, r7, #8
 8001298:	9301      	str	r3, [sp, #4]
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	460b      	mov	r3, r1
 80012a2:	218a      	movs	r1, #138	; 0x8a
 80012a4:	482e      	ldr	r0, [pc, #184]	; (8001360 <FEB_Main_Setup+0x1d8>)
 80012a6:	f000 f8bf 	bl	8001428 <FEB_SETUP_TPS2482>
	buf_len = sprintf((char*) buf, "post af setup\n");
 80012aa:	4930      	ldr	r1, [pc, #192]	; (800136c <FEB_Main_Setup+0x1e4>)
 80012ac:	4828      	ldr	r0, [pc, #160]	; (8001350 <FEB_Main_Setup+0x1c8>)
 80012ae:	f004 fa35 	bl	800571c <siprintf>
 80012b2:	4603      	mov	r3, r0
 80012b4:	4a27      	ldr	r2, [pc, #156]	; (8001354 <FEB_Main_Setup+0x1cc>)
 80012b6:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 80012b8:	4b26      	ldr	r3, [pc, #152]	; (8001354 <FEB_Main_Setup+0x1cc>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	b29a      	uxth	r2, r3
 80012be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012c2:	4923      	ldr	r1, [pc, #140]	; (8001350 <FEB_Main_Setup+0x1c8>)
 80012c4:	4824      	ldr	r0, [pc, #144]	; (8001358 <FEB_Main_Setup+0x1d0>)
 80012c6:	f003 fa4e 	bl	8004766 <HAL_UART_Transmit>

	FEB_SETUP_TPS2482(&hi2c1, EX_ADDR, CONFIG, EX_CAL, OVERPWR, EX_LIMIT);
 80012ca:	f107 011c 	add.w	r1, r7, #28
 80012ce:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	9301      	str	r3, [sp, #4]
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	460b      	mov	r3, r1
 80012de:	2182      	movs	r1, #130	; 0x82
 80012e0:	481f      	ldr	r0, [pc, #124]	; (8001360 <FEB_Main_Setup+0x1d8>)
 80012e2:	f000 f8a1 	bl	8001428 <FEB_SETUP_TPS2482>
	buf_len = sprintf((char*) buf, "post ex setup\n");
 80012e6:	4922      	ldr	r1, [pc, #136]	; (8001370 <FEB_Main_Setup+0x1e8>)
 80012e8:	4819      	ldr	r0, [pc, #100]	; (8001350 <FEB_Main_Setup+0x1c8>)
 80012ea:	f004 fa17 	bl	800571c <siprintf>
 80012ee:	4603      	mov	r3, r0
 80012f0:	4a18      	ldr	r2, [pc, #96]	; (8001354 <FEB_Main_Setup+0x1cc>)
 80012f2:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 80012f4:	4b17      	ldr	r3, [pc, #92]	; (8001354 <FEB_Main_Setup+0x1cc>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012fe:	4914      	ldr	r1, [pc, #80]	; (8001350 <FEB_Main_Setup+0x1c8>)
 8001300:	4815      	ldr	r0, [pc, #84]	; (8001358 <FEB_Main_Setup+0x1d0>)
 8001302:	f003 fa30 	bl	8004766 <HAL_UART_Transmit>

	FEB_SETUP_TPS2482(&hi2c1, SH_ADDR, CONFIG, EX_CAL, OVERPWR, EX_LIMIT);
 8001306:	f107 011c 	add.w	r1, r7, #28
 800130a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	9301      	str	r3, [sp, #4]
 8001312:	f107 0314 	add.w	r3, r7, #20
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	460b      	mov	r3, r1
 800131a:	2190      	movs	r1, #144	; 0x90
 800131c:	4810      	ldr	r0, [pc, #64]	; (8001360 <FEB_Main_Setup+0x1d8>)
 800131e:	f000 f883 	bl	8001428 <FEB_SETUP_TPS2482>
	buf_len = sprintf((char*) buf, "post sh and tps setup\n");
 8001322:	4914      	ldr	r1, [pc, #80]	; (8001374 <FEB_Main_Setup+0x1ec>)
 8001324:	480a      	ldr	r0, [pc, #40]	; (8001350 <FEB_Main_Setup+0x1c8>)
 8001326:	f004 f9f9 	bl	800571c <siprintf>
 800132a:	4603      	mov	r3, r0
 800132c:	4a09      	ldr	r2, [pc, #36]	; (8001354 <FEB_Main_Setup+0x1cc>)
 800132e:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <FEB_Main_Setup+0x1cc>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	b29a      	uxth	r2, r3
 8001336:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800133a:	4905      	ldr	r1, [pc, #20]	; (8001350 <FEB_Main_Setup+0x1c8>)
 800133c:	4806      	ldr	r0, [pc, #24]	; (8001358 <FEB_Main_Setup+0x1d0>)
 800133e:	f003 fa12 	bl	8004766 <HAL_UART_Transmit>

	//Not sure if enable seperately from ready to drive
	//	Enable_Shutdown_Source();

}
 8001342:	bf00      	nop
 8001344:	3730      	adds	r7, #48	; 0x30
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	08007b74 	.word	0x08007b74
 8001350:	20000200 	.word	0x20000200
 8001354:	20000280 	.word	0x20000280
 8001358:	2000030c 	.word	0x2000030c
 800135c:	08007b84 	.word	0x08007b84
 8001360:	200002b8 	.word	0x200002b8
 8001364:	08007b94 	.word	0x08007b94
 8001368:	08007ba4 	.word	0x08007ba4
 800136c:	08007bb4 	.word	0x08007bb4
 8001370:	08007bc4 	.word	0x08007bc4
 8001374:	08007bd4 	.word	0x08007bd4

08001378 <FEB_Main_Loop>:


void FEB_Main_Loop(void) {
 8001378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800137c:	b086      	sub	sp, #24
 800137e:	af06      	add	r7, sp, #24

  FEB_Brake_Light_Control();
 8001380:	f7ff fe96 	bl	80010b0 <FEB_Brake_Light_Control>

  FEB_Peripherals_Control();
 8001384:	f7ff fe66 	bl	8001054 <FEB_Peripherals_Control>

  FEB_TPS2482_Poll_Currents();
 8001388:	f000 f900 	bl	800158c <FEB_TPS2482_Poll_Currents>

  //FEB_CAN_Transmit(&hcan1, LVPDB_LV_CURRENT, &current_reading);
  //FEB_CAN_Transmit(&hcan1, LVPDB_EX_CURRENT, &ex_current_reading);
  //FEB_CAN_Transmit(&hcan1, LVPDB_CP_CURRENT, &cp_current_reading);
  apps_current_reading = FEB_CAN_APPS_Message.current;
 800138c:	4b1d      	ldr	r3, [pc, #116]	; (8001404 <FEB_Main_Loop+0x8c>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	4a1d      	ldr	r2, [pc, #116]	; (8001408 <FEB_Main_Loop+0x90>)
 8001392:	6013      	str	r3, [r2, #0]

  buf_len = sprintf((char*) buf, "Current Draw (LV, EX, CP, APPS): %.3f, %.3f, %.3f, %.3f\r\n", current_reading, ex_current_reading, cp_current_reading, apps_current_reading);
 8001394:	4b1d      	ldr	r3, [pc, #116]	; (800140c <FEB_Main_Loop+0x94>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff f8f5 	bl	8000588 <__aeabi_f2d>
 800139e:	4682      	mov	sl, r0
 80013a0:	468b      	mov	fp, r1
 80013a2:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <FEB_Main_Loop+0x98>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f8ee 	bl	8000588 <__aeabi_f2d>
 80013ac:	4604      	mov	r4, r0
 80013ae:	460d      	mov	r5, r1
 80013b0:	4b18      	ldr	r3, [pc, #96]	; (8001414 <FEB_Main_Loop+0x9c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff f8e7 	bl	8000588 <__aeabi_f2d>
 80013ba:	4680      	mov	r8, r0
 80013bc:	4689      	mov	r9, r1
 80013be:	4b12      	ldr	r3, [pc, #72]	; (8001408 <FEB_Main_Loop+0x90>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff f8e0 	bl	8000588 <__aeabi_f2d>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80013d0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80013d4:	e9cd 4500 	strd	r4, r5, [sp]
 80013d8:	4652      	mov	r2, sl
 80013da:	465b      	mov	r3, fp
 80013dc:	490e      	ldr	r1, [pc, #56]	; (8001418 <FEB_Main_Loop+0xa0>)
 80013de:	480f      	ldr	r0, [pc, #60]	; (800141c <FEB_Main_Loop+0xa4>)
 80013e0:	f004 f99c 	bl	800571c <siprintf>
 80013e4:	4603      	mov	r3, r0
 80013e6:	4a0e      	ldr	r2, [pc, #56]	; (8001420 <FEB_Main_Loop+0xa8>)
 80013e8:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 80013ea:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <FEB_Main_Loop+0xa8>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013f4:	4909      	ldr	r1, [pc, #36]	; (800141c <FEB_Main_Loop+0xa4>)
 80013f6:	480b      	ldr	r0, [pc, #44]	; (8001424 <FEB_Main_Loop+0xac>)
 80013f8:	f003 f9b5 	bl	8004766 <HAL_UART_Transmit>

}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001404:	200001f0 	.word	0x200001f0
 8001408:	200001fc 	.word	0x200001fc
 800140c:	20000284 	.word	0x20000284
 8001410:	20000288 	.word	0x20000288
 8001414:	2000028c 	.word	0x2000028c
 8001418:	08007bec 	.word	0x08007bec
 800141c:	20000200 	.word	0x20000200
 8001420:	20000280 	.word	0x20000280
 8001424:	2000030c 	.word	0x2000030c

08001428 <FEB_SETUP_TPS2482>:
float ex_current_reading;
float cp_current_reading;

extern I2C_HandleTypeDef hi2c1;

void FEB_SETUP_TPS2482(I2C_HandleTypeDef *hi2cp, uint8_t DEV_ADDR, uint8_t CONFIG[], uint8_t CAL_REG[], uint8_t ALERT[], uint8_t LIMIT[]) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af04      	add	r7, sp, #16
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	607a      	str	r2, [r7, #4]
 8001432:	603b      	str	r3, [r7, #0]
 8001434:	460b      	mov	r3, r1
 8001436:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Mem_Write(hi2cp, DEV_ADDR, 0x00, 1, CONFIG, 2, HAL_MAX_DELAY); // configure
 8001438:	7afb      	ldrb	r3, [r7, #11]
 800143a:	b299      	uxth	r1, r3
 800143c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001440:	9302      	str	r3, [sp, #8]
 8001442:	2302      	movs	r3, #2
 8001444:	9301      	str	r3, [sp, #4]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	2301      	movs	r3, #1
 800144c:	2200      	movs	r2, #0
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f001 fe96 	bl	8003180 <HAL_I2C_Mem_Write>
 8001454:	4603      	mov	r3, r0
 8001456:	75fb      	strb	r3, [r7, #23]
//	if (ret != HAL_OK) {
//			// error handler
//		__disable_irq();
//		while(1);
//	}
	ret = HAL_I2C_Mem_Write(hi2cp, DEV_ADDR, 0x05, 1, CAL_REG, 2, HAL_MAX_DELAY); // calibrate
 8001458:	7afb      	ldrb	r3, [r7, #11]
 800145a:	b299      	uxth	r1, r3
 800145c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001460:	9302      	str	r3, [sp, #8]
 8001462:	2302      	movs	r3, #2
 8001464:	9301      	str	r3, [sp, #4]
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	2301      	movs	r3, #1
 800146c:	2205      	movs	r2, #5
 800146e:	68f8      	ldr	r0, [r7, #12]
 8001470:	f001 fe86 	bl	8003180 <HAL_I2C_Mem_Write>
 8001474:	4603      	mov	r3, r0
 8001476:	75fb      	strb	r3, [r7, #23]
//	if (ret != HAL_OK) {
//			// error handler
//		__disable_irq();
//		while(1);
//	}
	ret = HAL_I2C_Mem_Write(hi2cp, DEV_ADDR, 0x06, 1, ALERT, 2, HAL_MAX_DELAY); // set alert
 8001478:	7afb      	ldrb	r3, [r7, #11]
 800147a:	b299      	uxth	r1, r3
 800147c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001480:	9302      	str	r3, [sp, #8]
 8001482:	2302      	movs	r3, #2
 8001484:	9301      	str	r3, [sp, #4]
 8001486:	6a3b      	ldr	r3, [r7, #32]
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	2301      	movs	r3, #1
 800148c:	2206      	movs	r2, #6
 800148e:	68f8      	ldr	r0, [r7, #12]
 8001490:	f001 fe76 	bl	8003180 <HAL_I2C_Mem_Write>
 8001494:	4603      	mov	r3, r0
 8001496:	75fb      	strb	r3, [r7, #23]
//	if (ret != HAL_OK) {
//			// error handler
//		__disable_irq();
//		while(1);
//	}
	ret = HAL_I2C_Mem_Write(hi2cp, DEV_ADDR, 0x07, 1, LIMIT, 2, HAL_MAX_DELAY); // set limit
 8001498:	7afb      	ldrb	r3, [r7, #11]
 800149a:	b299      	uxth	r1, r3
 800149c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014a0:	9302      	str	r3, [sp, #8]
 80014a2:	2302      	movs	r3, #2
 80014a4:	9301      	str	r3, [sp, #4]
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	2301      	movs	r3, #1
 80014ac:	2207      	movs	r2, #7
 80014ae:	68f8      	ldr	r0, [r7, #12]
 80014b0:	f001 fe66 	bl	8003180 <HAL_I2C_Mem_Write>
 80014b4:	4603      	mov	r3, r0
 80014b6:	75fb      	strb	r3, [r7, #23]
//	if (ret != HAL_OK) {
//		// error handler
//		__disable_irq();
//		while(1);
//	}
}
 80014b8:	bf00      	nop
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <FEB_TPS2482_PollBusCurrent>:

//Brief: Uses I2C to pull current value from a device on the bus
//Param: hi2c Pointer to a I2C_HandleTypeDef structure that contains
//                the configuration information for the specified I2C.
//Param: DEV_ADDR which points to which device on the bus you want to poll
float FEB_TPS2482_PollBusCurrent(I2C_HandleTypeDef * hi2c, uint8_t DEV_ADDR){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	; 0x28
 80014c4:	af02      	add	r7, sp, #8
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	70fb      	strb	r3, [r7, #3]
	//Buffer to store data;
	uint8_t buf[12];
	buf[0] = 4; //4 is the register that stores the current value
 80014cc:	2304      	movs	r3, #4
 80014ce:	733b      	strb	r3, [r7, #12]
	float returnVal = -1; //Set return val default to -1 as an "error". Not that great since we can actually have negative current
 80014d0:	4b2b      	ldr	r3, [pc, #172]	; (8001580 <FEB_TPS2482_PollBusCurrent+0xc0>)
 80014d2:	61fb      	str	r3, [r7, #28]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c, DEV_ADDR, buf, 1, 100);
 80014d4:	78fb      	ldrb	r3, [r7, #3]
 80014d6:	b299      	uxth	r1, r3
 80014d8:	f107 020c 	add.w	r2, r7, #12
 80014dc:	2364      	movs	r3, #100	; 0x64
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	2301      	movs	r3, #1
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f001 fb28 	bl	8002b38 <HAL_I2C_Master_Transmit>
 80014e8:	4603      	mov	r3, r0
 80014ea:	76fb      	strb	r3, [r7, #27]
	if(ret == HAL_OK){
 80014ec:	7efb      	ldrb	r3, [r7, #27]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d127      	bne.n	8001542 <FEB_TPS2482_PollBusCurrent+0x82>
		ret = HAL_I2C_Master_Receive(hi2c, DEV_ADDR, buf, 2,100);
 80014f2:	78fb      	ldrb	r3, [r7, #3]
 80014f4:	b299      	uxth	r1, r3
 80014f6:	f107 020c 	add.w	r2, r7, #12
 80014fa:	2364      	movs	r3, #100	; 0x64
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	2302      	movs	r3, #2
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f001 fc17 	bl	8002d34 <HAL_I2C_Master_Receive>
 8001506:	4603      	mov	r3, r0
 8001508:	76fb      	strb	r3, [r7, #27]
		if(ret == HAL_OK){
 800150a:	7efb      	ldrb	r3, [r7, #27]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d118      	bne.n	8001542 <FEB_TPS2482_PollBusCurrent+0x82>
			int16_t val = (buf[0]<<8) | buf[1]; //Not sure if little endian or not, needs testing!
 8001510:	7b3b      	ldrb	r3, [r7, #12]
 8001512:	021b      	lsls	r3, r3, #8
 8001514:	b21a      	sxth	r2, r3
 8001516:	7b7b      	ldrb	r3, [r7, #13]
 8001518:	b21b      	sxth	r3, r3
 800151a:	4313      	orrs	r3, r2
 800151c:	833b      	strh	r3, [r7, #24]
			returnVal = val * 0.002; // LSB-weight = 2mA/bit
 800151e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff f81e 	bl	8000564 <__aeabi_i2d>
 8001528:	a313      	add	r3, pc, #76	; (adr r3, 8001578 <FEB_TPS2482_PollBusCurrent+0xb8>)
 800152a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152e:	f7ff f883 	bl	8000638 <__aeabi_dmul>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4610      	mov	r0, r2
 8001538:	4619      	mov	r1, r3
 800153a:	f7ff fb55 	bl	8000be8 <__aeabi_d2f>
 800153e:	4603      	mov	r3, r0
 8001540:	61fb      	str	r3, [r7, #28]
		}
	}
//	HAL_I2C_IsDeviceReady(hi2c, DEV_ADDR, 1, 100);
	if(ret == HAL_ERROR) return -2.0;
 8001542:	7efb      	ldrb	r3, [r7, #27]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d102      	bne.n	800154e <FEB_TPS2482_PollBusCurrent+0x8e>
 8001548:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800154c:	e00a      	b.n	8001564 <FEB_TPS2482_PollBusCurrent+0xa4>
	if(ret == HAL_BUSY) return -3.0;
 800154e:	7efb      	ldrb	r3, [r7, #27]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d101      	bne.n	8001558 <FEB_TPS2482_PollBusCurrent+0x98>
 8001554:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <FEB_TPS2482_PollBusCurrent+0xc4>)
 8001556:	e005      	b.n	8001564 <FEB_TPS2482_PollBusCurrent+0xa4>
	if(ret == HAL_TIMEOUT) return -4.0;
 8001558:	7efb      	ldrb	r3, [r7, #27]
 800155a:	2b03      	cmp	r3, #3
 800155c:	d101      	bne.n	8001562 <FEB_TPS2482_PollBusCurrent+0xa2>
 800155e:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <FEB_TPS2482_PollBusCurrent+0xc8>)
 8001560:	e000      	b.n	8001564 <FEB_TPS2482_PollBusCurrent+0xa4>

	return returnVal;
 8001562:	69fb      	ldr	r3, [r7, #28]
}
 8001564:	ee07 3a90 	vmov	s15, r3
 8001568:	eeb0 0a67 	vmov.f32	s0, s15
 800156c:	3720      	adds	r7, #32
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	f3af 8000 	nop.w
 8001578:	d2f1a9fc 	.word	0xd2f1a9fc
 800157c:	3f60624d 	.word	0x3f60624d
 8001580:	bf800000 	.word	0xbf800000
 8001584:	c0400000 	.word	0xc0400000
 8001588:	c0800000 	.word	0xc0800000

0800158c <FEB_TPS2482_Poll_Currents>:

void FEB_TPS2482_Poll_Currents(){
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
	current_reading = FEB_TPS2482_PollBusCurrent(&hi2c1,LV_ADDR+1);
 8001590:	2181      	movs	r1, #129	; 0x81
 8001592:	480e      	ldr	r0, [pc, #56]	; (80015cc <FEB_TPS2482_Poll_Currents+0x40>)
 8001594:	f7ff ff94 	bl	80014c0 <FEB_TPS2482_PollBusCurrent>
 8001598:	eef0 7a40 	vmov.f32	s15, s0
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <FEB_TPS2482_Poll_Currents+0x44>)
 800159e:	edc3 7a00 	vstr	s15, [r3]
	ex_current_reading = FEB_TPS2482_PollBusCurrent(&hi2c1,EX_ADDR+1);
 80015a2:	2183      	movs	r1, #131	; 0x83
 80015a4:	4809      	ldr	r0, [pc, #36]	; (80015cc <FEB_TPS2482_Poll_Currents+0x40>)
 80015a6:	f7ff ff8b 	bl	80014c0 <FEB_TPS2482_PollBusCurrent>
 80015aa:	eef0 7a40 	vmov.f32	s15, s0
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <FEB_TPS2482_Poll_Currents+0x48>)
 80015b0:	edc3 7a00 	vstr	s15, [r3]
	cp_current_reading = FEB_TPS2482_PollBusCurrent(&hi2c1,CP_ADDR+1);
 80015b4:	2189      	movs	r1, #137	; 0x89
 80015b6:	4805      	ldr	r0, [pc, #20]	; (80015cc <FEB_TPS2482_Poll_Currents+0x40>)
 80015b8:	f7ff ff82 	bl	80014c0 <FEB_TPS2482_PollBusCurrent>
 80015bc:	eef0 7a40 	vmov.f32	s15, s0
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <FEB_TPS2482_Poll_Currents+0x4c>)
 80015c2:	edc3 7a00 	vstr	s15, [r3]
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200002b8 	.word	0x200002b8
 80015d0:	20000284 	.word	0x20000284
 80015d4:	20000288 	.word	0x20000288
 80015d8:	2000028c 	.word	0x2000028c

080015dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b0a2      	sub	sp, #136	; 0x88
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015e2:	f000 fc19 	bl	8001e18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015e6:	f000 f821 	bl	800162c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ea:	f000 f917 	bl	800181c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80015ee:	f000 f8eb 	bl	80017c8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80015f2:	f000 f8bb 	bl	800176c <MX_I2C1_Init>
  MX_CAN2_Init();
 80015f6:	f000 f885 	bl	8001704 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */

  FEB_Main_Setup();
 80015fa:	f7ff fdc5 	bl	8001188 <FEB_Main_Setup>
  char buf[128];
  int buf_len;
  while (1)
  {

	buf_len = sprintf((char*) buf, "Test");
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	4908      	ldr	r1, [pc, #32]	; (8001624 <main+0x48>)
 8001602:	4618      	mov	r0, r3
 8001604:	f004 f88a 	bl	800571c <siprintf>
 8001608:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 800160c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001610:	b29a      	uxth	r2, r3
 8001612:	1d39      	adds	r1, r7, #4
 8001614:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001618:	4803      	ldr	r0, [pc, #12]	; (8001628 <main+0x4c>)
 800161a:	f003 f8a4 	bl	8004766 <HAL_UART_Transmit>
	FEB_Main_Loop();
 800161e:	f7ff feab 	bl	8001378 <FEB_Main_Loop>
	buf_len = sprintf((char*) buf, "Test");
 8001622:	e7ec      	b.n	80015fe <main+0x22>
 8001624:	08007c28 	.word	0x08007c28
 8001628:	2000030c 	.word	0x2000030c

0800162c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b094      	sub	sp, #80	; 0x50
 8001630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	2234      	movs	r2, #52	; 0x34
 8001638:	2100      	movs	r1, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f004 f950 	bl	80058e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001640:	f107 0308 	add.w	r3, r7, #8
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001650:	2300      	movs	r3, #0
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	4b29      	ldr	r3, [pc, #164]	; (80016fc <SystemClock_Config+0xd0>)
 8001656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001658:	4a28      	ldr	r2, [pc, #160]	; (80016fc <SystemClock_Config+0xd0>)
 800165a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800165e:	6413      	str	r3, [r2, #64]	; 0x40
 8001660:	4b26      	ldr	r3, [pc, #152]	; (80016fc <SystemClock_Config+0xd0>)
 8001662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800166c:	2300      	movs	r3, #0
 800166e:	603b      	str	r3, [r7, #0]
 8001670:	4b23      	ldr	r3, [pc, #140]	; (8001700 <SystemClock_Config+0xd4>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a22      	ldr	r2, [pc, #136]	; (8001700 <SystemClock_Config+0xd4>)
 8001676:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	4b20      	ldr	r3, [pc, #128]	; (8001700 <SystemClock_Config+0xd4>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001684:	603b      	str	r3, [r7, #0]
 8001686:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001688:	2301      	movs	r3, #1
 800168a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800168c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001690:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001692:	2302      	movs	r3, #2
 8001694:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001696:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800169a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800169c:	2304      	movs	r3, #4
 800169e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 80016a0:	23a0      	movs	r3, #160	; 0xa0
 80016a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016a4:	2302      	movs	r3, #2
 80016a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80016a8:	2302      	movs	r3, #2
 80016aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016ac:	2302      	movs	r3, #2
 80016ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b0:	f107 031c 	add.w	r3, r7, #28
 80016b4:	4618      	mov	r0, r3
 80016b6:	f002 fd6b 	bl	8004190 <HAL_RCC_OscConfig>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80016c0:	f000 f96a 	bl	8001998 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016c4:	230f      	movs	r3, #15
 80016c6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016c8:	2302      	movs	r3, #2
 80016ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016cc:	2300      	movs	r3, #0
 80016ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016da:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016dc:	f107 0308 	add.w	r3, r7, #8
 80016e0:	2105      	movs	r1, #5
 80016e2:	4618      	mov	r0, r3
 80016e4:	f002 fa0a 	bl	8003afc <HAL_RCC_ClockConfig>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80016ee:	f000 f953 	bl	8001998 <Error_Handler>
  }
}
 80016f2:	bf00      	nop
 80016f4:	3750      	adds	r7, #80	; 0x50
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40023800 	.word	0x40023800
 8001700:	40007000 	.word	0x40007000

08001704 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001708:	4b16      	ldr	r3, [pc, #88]	; (8001764 <MX_CAN2_Init+0x60>)
 800170a:	4a17      	ldr	r2, [pc, #92]	; (8001768 <MX_CAN2_Init+0x64>)
 800170c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <MX_CAN2_Init+0x60>)
 8001710:	2210      	movs	r2, #16
 8001712:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001714:	4b13      	ldr	r3, [pc, #76]	; (8001764 <MX_CAN2_Init+0x60>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800171a:	4b12      	ldr	r3, [pc, #72]	; (8001764 <MX_CAN2_Init+0x60>)
 800171c:	2200      	movs	r2, #0
 800171e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001720:	4b10      	ldr	r3, [pc, #64]	; (8001764 <MX_CAN2_Init+0x60>)
 8001722:	2200      	movs	r2, #0
 8001724:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001726:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <MX_CAN2_Init+0x60>)
 8001728:	2200      	movs	r2, #0
 800172a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800172c:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <MX_CAN2_Init+0x60>)
 800172e:	2200      	movs	r2, #0
 8001730:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001732:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <MX_CAN2_Init+0x60>)
 8001734:	2200      	movs	r2, #0
 8001736:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001738:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <MX_CAN2_Init+0x60>)
 800173a:	2200      	movs	r2, #0
 800173c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800173e:	4b09      	ldr	r3, [pc, #36]	; (8001764 <MX_CAN2_Init+0x60>)
 8001740:	2200      	movs	r2, #0
 8001742:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001744:	4b07      	ldr	r3, [pc, #28]	; (8001764 <MX_CAN2_Init+0x60>)
 8001746:	2200      	movs	r2, #0
 8001748:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <MX_CAN2_Init+0x60>)
 800174c:	2200      	movs	r2, #0
 800174e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001750:	4804      	ldr	r0, [pc, #16]	; (8001764 <MX_CAN2_Init+0x60>)
 8001752:	f000 fbd3 	bl	8001efc <HAL_CAN_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 800175c:	f000 f91c 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000290 	.word	0x20000290
 8001768:	40006800 	.word	0x40006800

0800176c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <MX_I2C1_Init+0x50>)
 8001772:	4a13      	ldr	r2, [pc, #76]	; (80017c0 <MX_I2C1_Init+0x54>)
 8001774:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001776:	4b11      	ldr	r3, [pc, #68]	; (80017bc <MX_I2C1_Init+0x50>)
 8001778:	4a12      	ldr	r2, [pc, #72]	; (80017c4 <MX_I2C1_Init+0x58>)
 800177a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800177c:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <MX_I2C1_Init+0x50>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <MX_I2C1_Init+0x50>)
 8001784:	2200      	movs	r2, #0
 8001786:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <MX_I2C1_Init+0x50>)
 800178a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800178e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001790:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <MX_I2C1_Init+0x50>)
 8001792:	2200      	movs	r2, #0
 8001794:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <MX_I2C1_Init+0x50>)
 8001798:	2200      	movs	r2, #0
 800179a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800179c:	4b07      	ldr	r3, [pc, #28]	; (80017bc <MX_I2C1_Init+0x50>)
 800179e:	2200      	movs	r2, #0
 80017a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <MX_I2C1_Init+0x50>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017a8:	4804      	ldr	r0, [pc, #16]	; (80017bc <MX_I2C1_Init+0x50>)
 80017aa:	f001 f881 	bl	80028b0 <HAL_I2C_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017b4:	f000 f8f0 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	200002b8 	.word	0x200002b8
 80017c0:	40005400 	.word	0x40005400
 80017c4:	000186a0 	.word	0x000186a0

080017c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017cc:	4b11      	ldr	r3, [pc, #68]	; (8001814 <MX_USART2_UART_Init+0x4c>)
 80017ce:	4a12      	ldr	r2, [pc, #72]	; (8001818 <MX_USART2_UART_Init+0x50>)
 80017d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017d2:	4b10      	ldr	r3, [pc, #64]	; (8001814 <MX_USART2_UART_Init+0x4c>)
 80017d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017da:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <MX_USART2_UART_Init+0x4c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017e0:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <MX_USART2_UART_Init+0x4c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017e6:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <MX_USART2_UART_Init+0x4c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017ec:	4b09      	ldr	r3, [pc, #36]	; (8001814 <MX_USART2_UART_Init+0x4c>)
 80017ee:	220c      	movs	r2, #12
 80017f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017f2:	4b08      	ldr	r3, [pc, #32]	; (8001814 <MX_USART2_UART_Init+0x4c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <MX_USART2_UART_Init+0x4c>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017fe:	4805      	ldr	r0, [pc, #20]	; (8001814 <MX_USART2_UART_Init+0x4c>)
 8001800:	f002 ff64 	bl	80046cc <HAL_UART_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800180a:	f000 f8c5 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	2000030c 	.word	0x2000030c
 8001818:	40004400 	.word	0x40004400

0800181c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08a      	sub	sp, #40	; 0x28
 8001820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
 8001830:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	4b54      	ldr	r3, [pc, #336]	; (8001988 <MX_GPIO_Init+0x16c>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4a53      	ldr	r2, [pc, #332]	; (8001988 <MX_GPIO_Init+0x16c>)
 800183c:	f043 0304 	orr.w	r3, r3, #4
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	4b51      	ldr	r3, [pc, #324]	; (8001988 <MX_GPIO_Init+0x16c>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	4b4d      	ldr	r3, [pc, #308]	; (8001988 <MX_GPIO_Init+0x16c>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a4c      	ldr	r2, [pc, #304]	; (8001988 <MX_GPIO_Init+0x16c>)
 8001858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b4a      	ldr	r3, [pc, #296]	; (8001988 <MX_GPIO_Init+0x16c>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	4b46      	ldr	r3, [pc, #280]	; (8001988 <MX_GPIO_Init+0x16c>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	4a45      	ldr	r2, [pc, #276]	; (8001988 <MX_GPIO_Init+0x16c>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
 800187a:	4b43      	ldr	r3, [pc, #268]	; (8001988 <MX_GPIO_Init+0x16c>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	4b3f      	ldr	r3, [pc, #252]	; (8001988 <MX_GPIO_Init+0x16c>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a3e      	ldr	r2, [pc, #248]	; (8001988 <MX_GPIO_Init+0x16c>)
 8001890:	f043 0302 	orr.w	r3, r3, #2
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b3c      	ldr	r3, [pc, #240]	; (8001988 <MX_GPIO_Init+0x16c>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	607b      	str	r3, [r7, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_11, GPIO_PIN_RESET);
 80018a2:	2200      	movs	r2, #0
 80018a4:	f640 0108 	movw	r1, #2056	; 0x808
 80018a8:	4838      	ldr	r0, [pc, #224]	; (800198c <MX_GPIO_Init+0x170>)
 80018aa:	f000 ffe7 	bl	800287c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2123      	movs	r1, #35	; 0x23
 80018b2:	4837      	ldr	r0, [pc, #220]	; (8001990 <MX_GPIO_Init+0x174>)
 80018b4:	f000 ffe2 	bl	800287c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80018b8:	2200      	movs	r2, #0
 80018ba:	2120      	movs	r1, #32
 80018bc:	4835      	ldr	r0, [pc, #212]	; (8001994 <MX_GPIO_Init+0x178>)
 80018be:	f000 ffdd 	bl	800287c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018c8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80018cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	4619      	mov	r1, r3
 80018d8:	482c      	ldr	r0, [pc, #176]	; (800198c <MX_GPIO_Init+0x170>)
 80018da:	f000 fe3b 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC10
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80018de:	f241 4307 	movw	r3, #5127	; 0x1407
 80018e2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	4619      	mov	r1, r3
 80018f2:	4826      	ldr	r0, [pc, #152]	; (800198c <MX_GPIO_Init+0x170>)
 80018f4:	f000 fe2e 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_11;
 80018f8:	f640 0308 	movw	r3, #2056	; 0x808
 80018fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fe:	2301      	movs	r3, #1
 8001900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	2300      	movs	r3, #0
 8001908:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	4619      	mov	r1, r3
 8001910:	481e      	ldr	r0, [pc, #120]	; (800198c <MX_GPIO_Init+0x170>)
 8001912:	f000 fe1f 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD2_Pin;
 8001916:	2323      	movs	r3, #35	; 0x23
 8001918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191a:	2301      	movs	r3, #1
 800191c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001922:	2300      	movs	r3, #0
 8001924:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001926:	f107 0314 	add.w	r3, r7, #20
 800192a:	4619      	mov	r1, r3
 800192c:	4818      	ldr	r0, [pc, #96]	; (8001990 <MX_GPIO_Init+0x174>)
 800192e:	f000 fe11 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 8001932:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8001936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001938:	2300      	movs	r3, #0
 800193a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	4619      	mov	r1, r3
 8001946:	4812      	ldr	r0, [pc, #72]	; (8001990 <MX_GPIO_Init+0x174>)
 8001948:	f000 fe04 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 800194c:	23d0      	movs	r3, #208	; 0xd0
 800194e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001950:	2300      	movs	r3, #0
 8001952:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	4619      	mov	r1, r3
 800195e:	480d      	ldr	r0, [pc, #52]	; (8001994 <MX_GPIO_Init+0x178>)
 8001960:	f000 fdf8 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001964:	2320      	movs	r3, #32
 8001966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001968:	2301      	movs	r3, #1
 800196a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001970:	2300      	movs	r3, #0
 8001972:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	4619      	mov	r1, r3
 800197a:	4806      	ldr	r0, [pc, #24]	; (8001994 <MX_GPIO_Init+0x178>)
 800197c:	f000 fdea 	bl	8002554 <HAL_GPIO_Init>

}
 8001980:	bf00      	nop
 8001982:	3728      	adds	r7, #40	; 0x28
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40023800 	.word	0x40023800
 800198c:	40020800 	.word	0x40020800
 8001990:	40020000 	.word	0x40020000
 8001994:	40020400 	.word	0x40020400

08001998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800199c:	b672      	cpsid	i
}
 800199e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a0:	e7fe      	b.n	80019a0 <Error_Handler+0x8>
	...

080019a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <HAL_MspInit+0x4c>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	4a0f      	ldr	r2, [pc, #60]	; (80019f0 <HAL_MspInit+0x4c>)
 80019b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ba:	4b0d      	ldr	r3, [pc, #52]	; (80019f0 <HAL_MspInit+0x4c>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019c2:	607b      	str	r3, [r7, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	603b      	str	r3, [r7, #0]
 80019ca:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <HAL_MspInit+0x4c>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	4a08      	ldr	r2, [pc, #32]	; (80019f0 <HAL_MspInit+0x4c>)
 80019d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d4:	6413      	str	r3, [r2, #64]	; 0x40
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_MspInit+0x4c>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019e2:	2007      	movs	r0, #7
 80019e4:	f000 fd82 	bl	80024ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40023800 	.word	0x40023800

080019f4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	; 0x28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a20      	ldr	r2, [pc, #128]	; (8001a94 <HAL_CAN_MspInit+0xa0>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d13a      	bne.n	8001a8c <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	4b1f      	ldr	r3, [pc, #124]	; (8001a98 <HAL_CAN_MspInit+0xa4>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	4a1e      	ldr	r2, [pc, #120]	; (8001a98 <HAL_CAN_MspInit+0xa4>)
 8001a20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a24:	6413      	str	r3, [r2, #64]	; 0x40
 8001a26:	4b1c      	ldr	r3, [pc, #112]	; (8001a98 <HAL_CAN_MspInit+0xa4>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	4b18      	ldr	r3, [pc, #96]	; (8001a98 <HAL_CAN_MspInit+0xa4>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	4a17      	ldr	r2, [pc, #92]	; (8001a98 <HAL_CAN_MspInit+0xa4>)
 8001a3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a40:	6413      	str	r3, [r2, #64]	; 0x40
 8001a42:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <HAL_CAN_MspInit+0xa4>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <HAL_CAN_MspInit+0xa4>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a10      	ldr	r2, [pc, #64]	; (8001a98 <HAL_CAN_MspInit+0xa4>)
 8001a58:	f043 0302 	orr.w	r3, r3, #2
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <HAL_CAN_MspInit+0xa4>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001a6a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001a6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a70:	2302      	movs	r3, #2
 8001a72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001a7c:	2309      	movs	r3, #9
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	4619      	mov	r1, r3
 8001a86:	4805      	ldr	r0, [pc, #20]	; (8001a9c <HAL_CAN_MspInit+0xa8>)
 8001a88:	f000 fd64 	bl	8002554 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001a8c:	bf00      	nop
 8001a8e:	3728      	adds	r7, #40	; 0x28
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40006800 	.word	0x40006800
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40020400 	.word	0x40020400

08001aa0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08a      	sub	sp, #40	; 0x28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	f107 0314 	add.w	r3, r7, #20
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a19      	ldr	r2, [pc, #100]	; (8001b24 <HAL_I2C_MspInit+0x84>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d12c      	bne.n	8001b1c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	4b18      	ldr	r3, [pc, #96]	; (8001b28 <HAL_I2C_MspInit+0x88>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a17      	ldr	r2, [pc, #92]	; (8001b28 <HAL_I2C_MspInit+0x88>)
 8001acc:	f043 0302 	orr.w	r3, r3, #2
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <HAL_I2C_MspInit+0x88>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ade:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ae4:	2312      	movs	r3, #18
 8001ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aec:	2303      	movs	r3, #3
 8001aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001af0:	2304      	movs	r3, #4
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af4:	f107 0314 	add.w	r3, r7, #20
 8001af8:	4619      	mov	r1, r3
 8001afa:	480c      	ldr	r0, [pc, #48]	; (8001b2c <HAL_I2C_MspInit+0x8c>)
 8001afc:	f000 fd2a 	bl	8002554 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b00:	2300      	movs	r3, #0
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <HAL_I2C_MspInit+0x88>)
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	4a07      	ldr	r2, [pc, #28]	; (8001b28 <HAL_I2C_MspInit+0x88>)
 8001b0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <HAL_I2C_MspInit+0x88>)
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b1c:	bf00      	nop
 8001b1e:	3728      	adds	r7, #40	; 0x28
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40005400 	.word	0x40005400
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40020400 	.word	0x40020400

08001b30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08a      	sub	sp, #40	; 0x28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a19      	ldr	r2, [pc, #100]	; (8001bb4 <HAL_UART_MspInit+0x84>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d12b      	bne.n	8001baa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
 8001b56:	4b18      	ldr	r3, [pc, #96]	; (8001bb8 <HAL_UART_MspInit+0x88>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	4a17      	ldr	r2, [pc, #92]	; (8001bb8 <HAL_UART_MspInit+0x88>)
 8001b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b60:	6413      	str	r3, [r2, #64]	; 0x40
 8001b62:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <HAL_UART_MspInit+0x88>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <HAL_UART_MspInit+0x88>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	4a10      	ldr	r2, [pc, #64]	; (8001bb8 <HAL_UART_MspInit+0x88>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <HAL_UART_MspInit+0x88>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b8a:	230c      	movs	r3, #12
 8001b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b96:	2303      	movs	r3, #3
 8001b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b9a:	2307      	movs	r3, #7
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9e:	f107 0314 	add.w	r3, r7, #20
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4805      	ldr	r0, [pc, #20]	; (8001bbc <HAL_UART_MspInit+0x8c>)
 8001ba6:	f000 fcd5 	bl	8002554 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001baa:	bf00      	nop
 8001bac:	3728      	adds	r7, #40	; 0x28
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40004400 	.word	0x40004400
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40020000 	.word	0x40020000

08001bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bc4:	e7fe      	b.n	8001bc4 <NMI_Handler+0x4>

08001bc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bca:	e7fe      	b.n	8001bca <HardFault_Handler+0x4>

08001bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd0:	e7fe      	b.n	8001bd0 <MemManage_Handler+0x4>

08001bd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bd6:	e7fe      	b.n	8001bd6 <BusFault_Handler+0x4>

08001bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bdc:	e7fe      	b.n	8001bdc <UsageFault_Handler+0x4>

08001bde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c0c:	f000 f956 	bl	8001ebc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  return 1;
 8001c18:	2301      	movs	r3, #1
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <_kill>:

int _kill(int pid, int sig)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c2e:	f003 fe63 	bl	80058f8 <__errno>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2216      	movs	r2, #22
 8001c36:	601a      	str	r2, [r3, #0]
  return -1;
 8001c38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <_exit>:

void _exit (int status)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff ffe7 	bl	8001c24 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c56:	e7fe      	b.n	8001c56 <_exit+0x12>

08001c58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	e00a      	b.n	8001c80 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c6a:	f3af 8000 	nop.w
 8001c6e:	4601      	mov	r1, r0
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	1c5a      	adds	r2, r3, #1
 8001c74:	60ba      	str	r2, [r7, #8]
 8001c76:	b2ca      	uxtb	r2, r1
 8001c78:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	dbf0      	blt.n	8001c6a <_read+0x12>
  }

  return len;
 8001c88:	687b      	ldr	r3, [r7, #4]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b086      	sub	sp, #24
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	60f8      	str	r0, [r7, #12]
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
 8001ca2:	e009      	b.n	8001cb8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	1c5a      	adds	r2, r3, #1
 8001ca8:	60ba      	str	r2, [r7, #8]
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	dbf1      	blt.n	8001ca4 <_write+0x12>
  }
  return len;
 8001cc0:	687b      	ldr	r3, [r7, #4]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <_close>:

int _close(int file)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
 8001cea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cf2:	605a      	str	r2, [r3, #4]
  return 0;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <_isatty>:

int _isatty(int file)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d0a:	2301      	movs	r3, #1
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
	...

08001d34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d3c:	4a14      	ldr	r2, [pc, #80]	; (8001d90 <_sbrk+0x5c>)
 8001d3e:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <_sbrk+0x60>)
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d48:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <_sbrk+0x64>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d102      	bne.n	8001d56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d50:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <_sbrk+0x64>)
 8001d52:	4a12      	ldr	r2, [pc, #72]	; (8001d9c <_sbrk+0x68>)
 8001d54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d56:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <_sbrk+0x64>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d207      	bcs.n	8001d74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d64:	f003 fdc8 	bl	80058f8 <__errno>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	220c      	movs	r2, #12
 8001d6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d72:	e009      	b.n	8001d88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d74:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <_sbrk+0x64>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d7a:	4b07      	ldr	r3, [pc, #28]	; (8001d98 <_sbrk+0x64>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	4a05      	ldr	r2, [pc, #20]	; (8001d98 <_sbrk+0x64>)
 8001d84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d86:	68fb      	ldr	r3, [r7, #12]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20020000 	.word	0x20020000
 8001d94:	00000400 	.word	0x00000400
 8001d98:	20000350 	.word	0x20000350
 8001d9c:	200004a8 	.word	0x200004a8

08001da0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <SystemInit+0x20>)
 8001da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001daa:	4a05      	ldr	r2, [pc, #20]	; (8001dc0 <SystemInit+0x20>)
 8001dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001dc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dfc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dc8:	480d      	ldr	r0, [pc, #52]	; (8001e00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dca:	490e      	ldr	r1, [pc, #56]	; (8001e04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001dcc:	4a0e      	ldr	r2, [pc, #56]	; (8001e08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dd0:	e002      	b.n	8001dd8 <LoopCopyDataInit>

08001dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dd6:	3304      	adds	r3, #4

08001dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ddc:	d3f9      	bcc.n	8001dd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dde:	4a0b      	ldr	r2, [pc, #44]	; (8001e0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001de0:	4c0b      	ldr	r4, [pc, #44]	; (8001e10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001de4:	e001      	b.n	8001dea <LoopFillZerobss>

08001de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001de8:	3204      	adds	r2, #4

08001dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dec:	d3fb      	bcc.n	8001de6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dee:	f7ff ffd7 	bl	8001da0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001df2:	f003 fd87 	bl	8005904 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001df6:	f7ff fbf1 	bl	80015dc <main>
  bx  lr    
 8001dfa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001dfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e04:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001e08:	08007fcc 	.word	0x08007fcc
  ldr r2, =_sbss
 8001e0c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001e10:	200004a4 	.word	0x200004a4

08001e14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e14:	e7fe      	b.n	8001e14 <ADC_IRQHandler>
	...

08001e18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e1c:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <HAL_Init+0x40>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a0d      	ldr	r2, [pc, #52]	; (8001e58 <HAL_Init+0x40>)
 8001e22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e28:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <HAL_Init+0x40>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a0a      	ldr	r2, [pc, #40]	; (8001e58 <HAL_Init+0x40>)
 8001e2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e34:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <HAL_Init+0x40>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a07      	ldr	r2, [pc, #28]	; (8001e58 <HAL_Init+0x40>)
 8001e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e40:	2003      	movs	r0, #3
 8001e42:	f000 fb53 	bl	80024ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e46:	2000      	movs	r0, #0
 8001e48:	f000 f808 	bl	8001e5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e4c:	f7ff fdaa 	bl	80019a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40023c00 	.word	0x40023c00

08001e5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e64:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <HAL_InitTick+0x54>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <HAL_InitTick+0x58>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 fb5d 	bl	800253a <HAL_SYSTICK_Config>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e00e      	b.n	8001ea8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b0f      	cmp	r3, #15
 8001e8e:	d80a      	bhi.n	8001ea6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e90:	2200      	movs	r2, #0
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e98:	f000 fb33 	bl	8002502 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e9c:	4a06      	ldr	r2, [pc, #24]	; (8001eb8 <HAL_InitTick+0x5c>)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	e000      	b.n	8001ea8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20000000 	.word	0x20000000
 8001eb4:	20000008 	.word	0x20000008
 8001eb8:	20000004 	.word	0x20000004

08001ebc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ec0:	4b06      	ldr	r3, [pc, #24]	; (8001edc <HAL_IncTick+0x20>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <HAL_IncTick+0x24>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4413      	add	r3, r2
 8001ecc:	4a04      	ldr	r2, [pc, #16]	; (8001ee0 <HAL_IncTick+0x24>)
 8001ece:	6013      	str	r3, [r2, #0]
}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	20000008 	.word	0x20000008
 8001ee0:	20000354 	.word	0x20000354

08001ee4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ee8:	4b03      	ldr	r3, [pc, #12]	; (8001ef8 <HAL_GetTick+0x14>)
 8001eea:	681b      	ldr	r3, [r3, #0]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	20000354 	.word	0x20000354

08001efc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e0ed      	b.n	80020ea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d102      	bne.n	8001f20 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff fd6a 	bl	80019f4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 0201 	orr.w	r2, r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f30:	f7ff ffd8 	bl	8001ee4 <HAL_GetTick>
 8001f34:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f36:	e012      	b.n	8001f5e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f38:	f7ff ffd4 	bl	8001ee4 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b0a      	cmp	r3, #10
 8001f44:	d90b      	bls.n	8001f5e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2205      	movs	r2, #5
 8001f56:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e0c5      	b.n	80020ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0e5      	beq.n	8001f38 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 0202 	bic.w	r2, r2, #2
 8001f7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f7c:	f7ff ffb2 	bl	8001ee4 <HAL_GetTick>
 8001f80:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f82:	e012      	b.n	8001faa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f84:	f7ff ffae 	bl	8001ee4 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b0a      	cmp	r3, #10
 8001f90:	d90b      	bls.n	8001faa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2205      	movs	r2, #5
 8001fa2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e09f      	b.n	80020ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1e5      	bne.n	8001f84 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	7e1b      	ldrb	r3, [r3, #24]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d108      	bne.n	8001fd2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	e007      	b.n	8001fe2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fe0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	7e5b      	ldrb	r3, [r3, #25]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d108      	bne.n	8001ffc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	e007      	b.n	800200c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800200a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	7e9b      	ldrb	r3, [r3, #26]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d108      	bne.n	8002026 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 0220 	orr.w	r2, r2, #32
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	e007      	b.n	8002036 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 0220 	bic.w	r2, r2, #32
 8002034:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	7edb      	ldrb	r3, [r3, #27]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d108      	bne.n	8002050 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 0210 	bic.w	r2, r2, #16
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	e007      	b.n	8002060 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 0210 	orr.w	r2, r2, #16
 800205e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	7f1b      	ldrb	r3, [r3, #28]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d108      	bne.n	800207a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 0208 	orr.w	r2, r2, #8
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	e007      	b.n	800208a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 0208 	bic.w	r2, r2, #8
 8002088:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	7f5b      	ldrb	r3, [r3, #29]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d108      	bne.n	80020a4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f042 0204 	orr.w	r2, r2, #4
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	e007      	b.n	80020b4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 0204 	bic.w	r2, r2, #4
 80020b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	431a      	orrs	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	ea42 0103 	orr.w	r1, r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	1e5a      	subs	r2, r3, #1
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b087      	sub	sp, #28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 3020 	ldrb.w	r3, [r3, #32]
 800210a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800210c:	7cfb      	ldrb	r3, [r7, #19]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d003      	beq.n	800211a <HAL_CAN_ConfigFilter+0x26>
 8002112:	7cfb      	ldrb	r3, [r7, #19]
 8002114:	2b02      	cmp	r3, #2
 8002116:	f040 80be 	bne.w	8002296 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800211a:	4b65      	ldr	r3, [pc, #404]	; (80022b0 <HAL_CAN_ConfigFilter+0x1bc>)
 800211c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002124:	f043 0201 	orr.w	r2, r3, #1
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002134:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002148:	021b      	lsls	r3, r3, #8
 800214a:	431a      	orrs	r2, r3
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	f003 031f 	and.w	r3, r3, #31
 800215a:	2201      	movs	r2, #1
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	43db      	mvns	r3, r3
 800216c:	401a      	ands	r2, r3
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d123      	bne.n	80021c4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	43db      	mvns	r3, r3
 8002186:	401a      	ands	r2, r3
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800219e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	3248      	adds	r2, #72	; 0x48
 80021a4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80021b8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80021ba:	6979      	ldr	r1, [r7, #20]
 80021bc:	3348      	adds	r3, #72	; 0x48
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	440b      	add	r3, r1
 80021c2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d122      	bne.n	8002212 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	431a      	orrs	r2, r3
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80021ec:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	3248      	adds	r2, #72	; 0x48
 80021f2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002206:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002208:	6979      	ldr	r1, [r7, #20]
 800220a:	3348      	adds	r3, #72	; 0x48
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	440b      	add	r3, r1
 8002210:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d109      	bne.n	800222e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	43db      	mvns	r3, r3
 8002224:	401a      	ands	r2, r3
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800222c:	e007      	b.n	800223e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	431a      	orrs	r2, r3
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d109      	bne.n	800225a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	43db      	mvns	r3, r3
 8002250:	401a      	ands	r2, r3
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002258:	e007      	b.n	800226a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	431a      	orrs	r2, r3
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d107      	bne.n	8002282 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	431a      	orrs	r2, r3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002288:	f023 0201 	bic.w	r2, r3, #1
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002292:	2300      	movs	r3, #0
 8002294:	e006      	b.n	80022a4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
  }
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	371c      	adds	r7, #28
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	40006400 	.word	0x40006400

080022b4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d12e      	bne.n	8002326 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2202      	movs	r2, #2
 80022cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0201 	bic.w	r2, r2, #1
 80022de:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80022e0:	f7ff fe00 	bl	8001ee4 <HAL_GetTick>
 80022e4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80022e6:	e012      	b.n	800230e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022e8:	f7ff fdfc 	bl	8001ee4 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b0a      	cmp	r3, #10
 80022f4:	d90b      	bls.n	800230e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2205      	movs	r2, #5
 8002306:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e012      	b.n	8002334 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1e5      	bne.n	80022e8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002322:	2300      	movs	r3, #0
 8002324:	e006      	b.n	8002334 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
  }
}
 8002334:	4618      	mov	r0, r3
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 3020 	ldrb.w	r3, [r3, #32]
 800234c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800234e:	7bfb      	ldrb	r3, [r7, #15]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d002      	beq.n	800235a <HAL_CAN_ActivateNotification+0x1e>
 8002354:	7bfb      	ldrb	r3, [r7, #15]
 8002356:	2b02      	cmp	r3, #2
 8002358:	d109      	bne.n	800236e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6959      	ldr	r1, [r3, #20]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800236a:	2300      	movs	r3, #0
 800236c:	e006      	b.n	800237c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
  }
}
 800237c:	4618      	mov	r0, r3
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002398:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <__NVIC_SetPriorityGrouping+0x44>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023a4:	4013      	ands	r3, r2
 80023a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ba:	4a04      	ldr	r2, [pc, #16]	; (80023cc <__NVIC_SetPriorityGrouping+0x44>)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	60d3      	str	r3, [r2, #12]
}
 80023c0:	bf00      	nop
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d4:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <__NVIC_GetPriorityGrouping+0x18>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	0a1b      	lsrs	r3, r3, #8
 80023da:	f003 0307 	and.w	r3, r3, #7
}
 80023de:	4618      	mov	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	6039      	str	r1, [r7, #0]
 80023f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	db0a      	blt.n	8002416 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	b2da      	uxtb	r2, r3
 8002404:	490c      	ldr	r1, [pc, #48]	; (8002438 <__NVIC_SetPriority+0x4c>)
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	0112      	lsls	r2, r2, #4
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	440b      	add	r3, r1
 8002410:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002414:	e00a      	b.n	800242c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	b2da      	uxtb	r2, r3
 800241a:	4908      	ldr	r1, [pc, #32]	; (800243c <__NVIC_SetPriority+0x50>)
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	3b04      	subs	r3, #4
 8002424:	0112      	lsls	r2, r2, #4
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	440b      	add	r3, r1
 800242a:	761a      	strb	r2, [r3, #24]
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	e000e100 	.word	0xe000e100
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002440:	b480      	push	{r7}
 8002442:	b089      	sub	sp, #36	; 0x24
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f1c3 0307 	rsb	r3, r3, #7
 800245a:	2b04      	cmp	r3, #4
 800245c:	bf28      	it	cs
 800245e:	2304      	movcs	r3, #4
 8002460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3304      	adds	r3, #4
 8002466:	2b06      	cmp	r3, #6
 8002468:	d902      	bls.n	8002470 <NVIC_EncodePriority+0x30>
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	3b03      	subs	r3, #3
 800246e:	e000      	b.n	8002472 <NVIC_EncodePriority+0x32>
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002474:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43da      	mvns	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	401a      	ands	r2, r3
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002488:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	fa01 f303 	lsl.w	r3, r1, r3
 8002492:	43d9      	mvns	r1, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002498:	4313      	orrs	r3, r2
         );
}
 800249a:	4618      	mov	r0, r3
 800249c:	3724      	adds	r7, #36	; 0x24
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
	...

080024a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024b8:	d301      	bcc.n	80024be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ba:	2301      	movs	r3, #1
 80024bc:	e00f      	b.n	80024de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024be:	4a0a      	ldr	r2, [pc, #40]	; (80024e8 <SysTick_Config+0x40>)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024c6:	210f      	movs	r1, #15
 80024c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024cc:	f7ff ff8e 	bl	80023ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024d0:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <SysTick_Config+0x40>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024d6:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <SysTick_Config+0x40>)
 80024d8:	2207      	movs	r2, #7
 80024da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	e000e010 	.word	0xe000e010

080024ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7ff ff47 	bl	8002388 <__NVIC_SetPriorityGrouping>
}
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002502:	b580      	push	{r7, lr}
 8002504:	b086      	sub	sp, #24
 8002506:	af00      	add	r7, sp, #0
 8002508:	4603      	mov	r3, r0
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	607a      	str	r2, [r7, #4]
 800250e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002514:	f7ff ff5c 	bl	80023d0 <__NVIC_GetPriorityGrouping>
 8002518:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	68b9      	ldr	r1, [r7, #8]
 800251e:	6978      	ldr	r0, [r7, #20]
 8002520:	f7ff ff8e 	bl	8002440 <NVIC_EncodePriority>
 8002524:	4602      	mov	r2, r0
 8002526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800252a:	4611      	mov	r1, r2
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff ff5d 	bl	80023ec <__NVIC_SetPriority>
}
 8002532:	bf00      	nop
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7ff ffb0 	bl	80024a8 <SysTick_Config>
 8002548:	4603      	mov	r3, r0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002554:	b480      	push	{r7}
 8002556:	b089      	sub	sp, #36	; 0x24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002562:	2300      	movs	r3, #0
 8002564:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002566:	2300      	movs	r3, #0
 8002568:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
 800256e:	e165      	b.n	800283c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002570:	2201      	movs	r2, #1
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	4013      	ands	r3, r2
 8002582:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	429a      	cmp	r2, r3
 800258a:	f040 8154 	bne.w	8002836 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	2b01      	cmp	r3, #1
 8002598:	d005      	beq.n	80025a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d130      	bne.n	8002608 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	2203      	movs	r2, #3
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4013      	ands	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025dc:	2201      	movs	r2, #1
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	091b      	lsrs	r3, r3, #4
 80025f2:	f003 0201 	and.w	r2, r3, #1
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	2b03      	cmp	r3, #3
 8002612:	d017      	beq.n	8002644 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	2203      	movs	r2, #3
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d123      	bne.n	8002698 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	08da      	lsrs	r2, r3, #3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3208      	adds	r2, #8
 8002658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800265c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	220f      	movs	r2, #15
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	08da      	lsrs	r2, r3, #3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3208      	adds	r2, #8
 8002692:	69b9      	ldr	r1, [r7, #24]
 8002694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	2203      	movs	r2, #3
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 0203 	and.w	r2, r3, #3
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 80ae 	beq.w	8002836 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	4b5d      	ldr	r3, [pc, #372]	; (8002854 <HAL_GPIO_Init+0x300>)
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	4a5c      	ldr	r2, [pc, #368]	; (8002854 <HAL_GPIO_Init+0x300>)
 80026e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ea:	4b5a      	ldr	r3, [pc, #360]	; (8002854 <HAL_GPIO_Init+0x300>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026f6:	4a58      	ldr	r2, [pc, #352]	; (8002858 <HAL_GPIO_Init+0x304>)
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	089b      	lsrs	r3, r3, #2
 80026fc:	3302      	adds	r3, #2
 80026fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	220f      	movs	r2, #15
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4013      	ands	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a4f      	ldr	r2, [pc, #316]	; (800285c <HAL_GPIO_Init+0x308>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d025      	beq.n	800276e <HAL_GPIO_Init+0x21a>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a4e      	ldr	r2, [pc, #312]	; (8002860 <HAL_GPIO_Init+0x30c>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d01f      	beq.n	800276a <HAL_GPIO_Init+0x216>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a4d      	ldr	r2, [pc, #308]	; (8002864 <HAL_GPIO_Init+0x310>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d019      	beq.n	8002766 <HAL_GPIO_Init+0x212>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a4c      	ldr	r2, [pc, #304]	; (8002868 <HAL_GPIO_Init+0x314>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d013      	beq.n	8002762 <HAL_GPIO_Init+0x20e>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a4b      	ldr	r2, [pc, #300]	; (800286c <HAL_GPIO_Init+0x318>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d00d      	beq.n	800275e <HAL_GPIO_Init+0x20a>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a4a      	ldr	r2, [pc, #296]	; (8002870 <HAL_GPIO_Init+0x31c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d007      	beq.n	800275a <HAL_GPIO_Init+0x206>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a49      	ldr	r2, [pc, #292]	; (8002874 <HAL_GPIO_Init+0x320>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d101      	bne.n	8002756 <HAL_GPIO_Init+0x202>
 8002752:	2306      	movs	r3, #6
 8002754:	e00c      	b.n	8002770 <HAL_GPIO_Init+0x21c>
 8002756:	2307      	movs	r3, #7
 8002758:	e00a      	b.n	8002770 <HAL_GPIO_Init+0x21c>
 800275a:	2305      	movs	r3, #5
 800275c:	e008      	b.n	8002770 <HAL_GPIO_Init+0x21c>
 800275e:	2304      	movs	r3, #4
 8002760:	e006      	b.n	8002770 <HAL_GPIO_Init+0x21c>
 8002762:	2303      	movs	r3, #3
 8002764:	e004      	b.n	8002770 <HAL_GPIO_Init+0x21c>
 8002766:	2302      	movs	r3, #2
 8002768:	e002      	b.n	8002770 <HAL_GPIO_Init+0x21c>
 800276a:	2301      	movs	r3, #1
 800276c:	e000      	b.n	8002770 <HAL_GPIO_Init+0x21c>
 800276e:	2300      	movs	r3, #0
 8002770:	69fa      	ldr	r2, [r7, #28]
 8002772:	f002 0203 	and.w	r2, r2, #3
 8002776:	0092      	lsls	r2, r2, #2
 8002778:	4093      	lsls	r3, r2
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4313      	orrs	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002780:	4935      	ldr	r1, [pc, #212]	; (8002858 <HAL_GPIO_Init+0x304>)
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	089b      	lsrs	r3, r3, #2
 8002786:	3302      	adds	r3, #2
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800278e:	4b3a      	ldr	r3, [pc, #232]	; (8002878 <HAL_GPIO_Init+0x324>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	43db      	mvns	r3, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4013      	ands	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027b2:	4a31      	ldr	r2, [pc, #196]	; (8002878 <HAL_GPIO_Init+0x324>)
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027b8:	4b2f      	ldr	r3, [pc, #188]	; (8002878 <HAL_GPIO_Init+0x324>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027dc:	4a26      	ldr	r2, [pc, #152]	; (8002878 <HAL_GPIO_Init+0x324>)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027e2:	4b25      	ldr	r3, [pc, #148]	; (8002878 <HAL_GPIO_Init+0x324>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	43db      	mvns	r3, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4013      	ands	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002806:	4a1c      	ldr	r2, [pc, #112]	; (8002878 <HAL_GPIO_Init+0x324>)
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800280c:	4b1a      	ldr	r3, [pc, #104]	; (8002878 <HAL_GPIO_Init+0x324>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	43db      	mvns	r3, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4013      	ands	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	4313      	orrs	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002830:	4a11      	ldr	r2, [pc, #68]	; (8002878 <HAL_GPIO_Init+0x324>)
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	3301      	adds	r3, #1
 800283a:	61fb      	str	r3, [r7, #28]
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	2b0f      	cmp	r3, #15
 8002840:	f67f ae96 	bls.w	8002570 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002844:	bf00      	nop
 8002846:	bf00      	nop
 8002848:	3724      	adds	r7, #36	; 0x24
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	40023800 	.word	0x40023800
 8002858:	40013800 	.word	0x40013800
 800285c:	40020000 	.word	0x40020000
 8002860:	40020400 	.word	0x40020400
 8002864:	40020800 	.word	0x40020800
 8002868:	40020c00 	.word	0x40020c00
 800286c:	40021000 	.word	0x40021000
 8002870:	40021400 	.word	0x40021400
 8002874:	40021800 	.word	0x40021800
 8002878:	40013c00 	.word	0x40013c00

0800287c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	460b      	mov	r3, r1
 8002886:	807b      	strh	r3, [r7, #2]
 8002888:	4613      	mov	r3, r2
 800288a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800288c:	787b      	ldrb	r3, [r7, #1]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002892:	887a      	ldrh	r2, [r7, #2]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002898:	e003      	b.n	80028a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800289a:	887b      	ldrh	r3, [r7, #2]
 800289c:	041a      	lsls	r2, r3, #16
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	619a      	str	r2, [r3, #24]
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
	...

080028b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e12b      	b.n	8002b1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d106      	bne.n	80028dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff f8e2 	bl	8001aa0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2224      	movs	r2, #36	; 0x24
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f022 0201 	bic.w	r2, r2, #1
 80028f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002902:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002912:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002914:	f001 f9e4 	bl	8003ce0 <HAL_RCC_GetPCLK1Freq>
 8002918:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	4a81      	ldr	r2, [pc, #516]	; (8002b24 <HAL_I2C_Init+0x274>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d807      	bhi.n	8002934 <HAL_I2C_Init+0x84>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4a80      	ldr	r2, [pc, #512]	; (8002b28 <HAL_I2C_Init+0x278>)
 8002928:	4293      	cmp	r3, r2
 800292a:	bf94      	ite	ls
 800292c:	2301      	movls	r3, #1
 800292e:	2300      	movhi	r3, #0
 8002930:	b2db      	uxtb	r3, r3
 8002932:	e006      	b.n	8002942 <HAL_I2C_Init+0x92>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4a7d      	ldr	r2, [pc, #500]	; (8002b2c <HAL_I2C_Init+0x27c>)
 8002938:	4293      	cmp	r3, r2
 800293a:	bf94      	ite	ls
 800293c:	2301      	movls	r3, #1
 800293e:	2300      	movhi	r3, #0
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e0e7      	b.n	8002b1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4a78      	ldr	r2, [pc, #480]	; (8002b30 <HAL_I2C_Init+0x280>)
 800294e:	fba2 2303 	umull	r2, r3, r2, r3
 8002952:	0c9b      	lsrs	r3, r3, #18
 8002954:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68ba      	ldr	r2, [r7, #8]
 8002966:	430a      	orrs	r2, r1
 8002968:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	4a6a      	ldr	r2, [pc, #424]	; (8002b24 <HAL_I2C_Init+0x274>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d802      	bhi.n	8002984 <HAL_I2C_Init+0xd4>
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	3301      	adds	r3, #1
 8002982:	e009      	b.n	8002998 <HAL_I2C_Init+0xe8>
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800298a:	fb02 f303 	mul.w	r3, r2, r3
 800298e:	4a69      	ldr	r2, [pc, #420]	; (8002b34 <HAL_I2C_Init+0x284>)
 8002990:	fba2 2303 	umull	r2, r3, r2, r3
 8002994:	099b      	lsrs	r3, r3, #6
 8002996:	3301      	adds	r3, #1
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6812      	ldr	r2, [r2, #0]
 800299c:	430b      	orrs	r3, r1
 800299e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	495c      	ldr	r1, [pc, #368]	; (8002b24 <HAL_I2C_Init+0x274>)
 80029b4:	428b      	cmp	r3, r1
 80029b6:	d819      	bhi.n	80029ec <HAL_I2C_Init+0x13c>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	1e59      	subs	r1, r3, #1
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80029c6:	1c59      	adds	r1, r3, #1
 80029c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029cc:	400b      	ands	r3, r1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00a      	beq.n	80029e8 <HAL_I2C_Init+0x138>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1e59      	subs	r1, r3, #1
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80029e0:	3301      	adds	r3, #1
 80029e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e6:	e051      	b.n	8002a8c <HAL_I2C_Init+0x1dc>
 80029e8:	2304      	movs	r3, #4
 80029ea:	e04f      	b.n	8002a8c <HAL_I2C_Init+0x1dc>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d111      	bne.n	8002a18 <HAL_I2C_Init+0x168>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	1e58      	subs	r0, r3, #1
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6859      	ldr	r1, [r3, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	440b      	add	r3, r1
 8002a02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a06:	3301      	adds	r3, #1
 8002a08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	bf0c      	ite	eq
 8002a10:	2301      	moveq	r3, #1
 8002a12:	2300      	movne	r3, #0
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	e012      	b.n	8002a3e <HAL_I2C_Init+0x18e>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	1e58      	subs	r0, r3, #1
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6859      	ldr	r1, [r3, #4]
 8002a20:	460b      	mov	r3, r1
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	0099      	lsls	r1, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a2e:	3301      	adds	r3, #1
 8002a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	bf0c      	ite	eq
 8002a38:	2301      	moveq	r3, #1
 8002a3a:	2300      	movne	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <HAL_I2C_Init+0x196>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e022      	b.n	8002a8c <HAL_I2C_Init+0x1dc>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10e      	bne.n	8002a6c <HAL_I2C_Init+0x1bc>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	1e58      	subs	r0, r3, #1
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6859      	ldr	r1, [r3, #4]
 8002a56:	460b      	mov	r3, r1
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	440b      	add	r3, r1
 8002a5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a60:	3301      	adds	r3, #1
 8002a62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a6a:	e00f      	b.n	8002a8c <HAL_I2C_Init+0x1dc>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	1e58      	subs	r0, r3, #1
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6859      	ldr	r1, [r3, #4]
 8002a74:	460b      	mov	r3, r1
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	0099      	lsls	r1, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a82:	3301      	adds	r3, #1
 8002a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	6809      	ldr	r1, [r1, #0]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69da      	ldr	r2, [r3, #28]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002aba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6911      	ldr	r1, [r2, #16]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	68d2      	ldr	r2, [r2, #12]
 8002ac6:	4311      	orrs	r1, r2
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6812      	ldr	r2, [r2, #0]
 8002acc:	430b      	orrs	r3, r1
 8002ace:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	695a      	ldr	r2, [r3, #20]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f042 0201 	orr.w	r2, r2, #1
 8002afa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2220      	movs	r2, #32
 8002b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	000186a0 	.word	0x000186a0
 8002b28:	001e847f 	.word	0x001e847f
 8002b2c:	003d08ff 	.word	0x003d08ff
 8002b30:	431bde83 	.word	0x431bde83
 8002b34:	10624dd3 	.word	0x10624dd3

08002b38 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b088      	sub	sp, #32
 8002b3c:	af02      	add	r7, sp, #8
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	607a      	str	r2, [r7, #4]
 8002b42:	461a      	mov	r2, r3
 8002b44:	460b      	mov	r3, r1
 8002b46:	817b      	strh	r3, [r7, #10]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b4c:	f7ff f9ca 	bl	8001ee4 <HAL_GetTick>
 8002b50:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b20      	cmp	r3, #32
 8002b5c:	f040 80e0 	bne.w	8002d20 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	2319      	movs	r3, #25
 8002b66:	2201      	movs	r2, #1
 8002b68:	4970      	ldr	r1, [pc, #448]	; (8002d2c <HAL_I2C_Master_Transmit+0x1f4>)
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f000 fde8 	bl	8003740 <I2C_WaitOnFlagUntilTimeout>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b76:	2302      	movs	r3, #2
 8002b78:	e0d3      	b.n	8002d22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d101      	bne.n	8002b88 <HAL_I2C_Master_Transmit+0x50>
 8002b84:	2302      	movs	r3, #2
 8002b86:	e0cc      	b.n	8002d22 <HAL_I2C_Master_Transmit+0x1ea>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d007      	beq.n	8002bae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f042 0201 	orr.w	r2, r2, #1
 8002bac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bbc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2221      	movs	r2, #33	; 0x21
 8002bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2210      	movs	r2, #16
 8002bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	893a      	ldrh	r2, [r7, #8]
 8002bde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	4a50      	ldr	r2, [pc, #320]	; (8002d30 <HAL_I2C_Master_Transmit+0x1f8>)
 8002bee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002bf0:	8979      	ldrh	r1, [r7, #10]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	6a3a      	ldr	r2, [r7, #32]
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f000 fbbc 	bl	8003374 <I2C_MasterRequestWrite>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e08d      	b.n	8002d22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c06:	2300      	movs	r3, #0
 8002c08:	613b      	str	r3, [r7, #16]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	613b      	str	r3, [r7, #16]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	613b      	str	r3, [r7, #16]
 8002c1a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c1c:	e066      	b.n	8002cec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	6a39      	ldr	r1, [r7, #32]
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 fe62 	bl	80038ec <I2C_WaitOnTXEFlagUntilTimeout>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00d      	beq.n	8002c4a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d107      	bne.n	8002c46 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e06b      	b.n	8002d22 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	781a      	ldrb	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	1c5a      	adds	r2, r3, #1
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	3b01      	subs	r3, #1
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c72:	3b01      	subs	r3, #1
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d11b      	bne.n	8002cc0 <HAL_I2C_Master_Transmit+0x188>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d017      	beq.n	8002cc0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c94:	781a      	ldrb	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	6a39      	ldr	r1, [r7, #32]
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 fe52 	bl	800396e <I2C_WaitOnBTFFlagUntilTimeout>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00d      	beq.n	8002cec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	2b04      	cmp	r3, #4
 8002cd6:	d107      	bne.n	8002ce8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e01a      	b.n	8002d22 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d194      	bne.n	8002c1e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2220      	movs	r2, #32
 8002d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	e000      	b.n	8002d22 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d20:	2302      	movs	r3, #2
  }
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	00100002 	.word	0x00100002
 8002d30:	ffff0000 	.word	0xffff0000

08002d34 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b08c      	sub	sp, #48	; 0x30
 8002d38:	af02      	add	r7, sp, #8
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	607a      	str	r2, [r7, #4]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	460b      	mov	r3, r1
 8002d42:	817b      	strh	r3, [r7, #10]
 8002d44:	4613      	mov	r3, r2
 8002d46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d48:	f7ff f8cc 	bl	8001ee4 <HAL_GetTick>
 8002d4c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b20      	cmp	r3, #32
 8002d58:	f040 820b 	bne.w	8003172 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	2319      	movs	r3, #25
 8002d62:	2201      	movs	r2, #1
 8002d64:	497c      	ldr	r1, [pc, #496]	; (8002f58 <HAL_I2C_Master_Receive+0x224>)
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 fcea 	bl	8003740 <I2C_WaitOnFlagUntilTimeout>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002d72:	2302      	movs	r3, #2
 8002d74:	e1fe      	b.n	8003174 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d101      	bne.n	8002d84 <HAL_I2C_Master_Receive+0x50>
 8002d80:	2302      	movs	r3, #2
 8002d82:	e1f7      	b.n	8003174 <HAL_I2C_Master_Receive+0x440>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d007      	beq.n	8002daa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f042 0201 	orr.w	r2, r2, #1
 8002da8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002db8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2222      	movs	r2, #34	; 0x22
 8002dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2210      	movs	r2, #16
 8002dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	893a      	ldrh	r2, [r7, #8]
 8002dda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	4a5c      	ldr	r2, [pc, #368]	; (8002f5c <HAL_I2C_Master_Receive+0x228>)
 8002dea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002dec:	8979      	ldrh	r1, [r7, #10]
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 fb40 	bl	8003478 <I2C_MasterRequestRead>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e1b8      	b.n	8003174 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d113      	bne.n	8002e32 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	623b      	str	r3, [r7, #32]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	623b      	str	r3, [r7, #32]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	623b      	str	r3, [r7, #32]
 8002e1e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	e18c      	b.n	800314c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d11b      	bne.n	8002e72 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61fb      	str	r3, [r7, #28]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	61fb      	str	r3, [r7, #28]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	61fb      	str	r3, [r7, #28]
 8002e5e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	e16c      	b.n	800314c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d11b      	bne.n	8002eb2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e88:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	61bb      	str	r3, [r7, #24]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	61bb      	str	r3, [r7, #24]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	61bb      	str	r3, [r7, #24]
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	e14c      	b.n	800314c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ec0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	617b      	str	r3, [r7, #20]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	617b      	str	r3, [r7, #20]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	617b      	str	r3, [r7, #20]
 8002ed6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ed8:	e138      	b.n	800314c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ede:	2b03      	cmp	r3, #3
 8002ee0:	f200 80f1 	bhi.w	80030c6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d123      	bne.n	8002f34 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f000 fd7d 	bl	80039f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e139      	b.n	8003174 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	691a      	ldr	r2, [r3, #16]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	1c5a      	adds	r2, r3, #1
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f32:	e10b      	b.n	800314c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d14e      	bne.n	8002fda <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f42:	2200      	movs	r2, #0
 8002f44:	4906      	ldr	r1, [pc, #24]	; (8002f60 <HAL_I2C_Master_Receive+0x22c>)
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 fbfa 	bl	8003740 <I2C_WaitOnFlagUntilTimeout>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d008      	beq.n	8002f64 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e10e      	b.n	8003174 <HAL_I2C_Master_Receive+0x440>
 8002f56:	bf00      	nop
 8002f58:	00100002 	.word	0x00100002
 8002f5c:	ffff0000 	.word	0xffff0000
 8002f60:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	691a      	ldr	r2, [r3, #16]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	691a      	ldr	r2, [r3, #16]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fd8:	e0b8      	b.n	800314c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	4966      	ldr	r1, [pc, #408]	; (800317c <HAL_I2C_Master_Receive+0x448>)
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f000 fbab 	bl	8003740 <I2C_WaitOnFlagUntilTimeout>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e0bf      	b.n	8003174 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003002:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691a      	ldr	r2, [r3, #16]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	1c5a      	adds	r2, r3, #1
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003020:	3b01      	subs	r3, #1
 8003022:	b29a      	uxth	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302c:	b29b      	uxth	r3, r3
 800302e:	3b01      	subs	r3, #1
 8003030:	b29a      	uxth	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303c:	2200      	movs	r2, #0
 800303e:	494f      	ldr	r1, [pc, #316]	; (800317c <HAL_I2C_Master_Receive+0x448>)
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 fb7d 	bl	8003740 <I2C_WaitOnFlagUntilTimeout>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e091      	b.n	8003174 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800305e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	691a      	ldr	r2, [r3, #16]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	1c5a      	adds	r2, r3, #1
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307c:	3b01      	subs	r3, #1
 800307e:	b29a      	uxth	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003088:	b29b      	uxth	r3, r3
 800308a:	3b01      	subs	r3, #1
 800308c:	b29a      	uxth	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	691a      	ldr	r2, [r3, #16]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	b2d2      	uxtb	r2, r2
 800309e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	1c5a      	adds	r2, r3, #1
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ae:	3b01      	subs	r3, #1
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	3b01      	subs	r3, #1
 80030be:	b29a      	uxth	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030c4:	e042      	b.n	800314c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 fc90 	bl	80039f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e04c      	b.n	8003174 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	691a      	ldr	r2, [r3, #16]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	b2d2      	uxtb	r2, r2
 80030e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ec:	1c5a      	adds	r2, r3, #1
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f6:	3b01      	subs	r3, #1
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003102:	b29b      	uxth	r3, r3
 8003104:	3b01      	subs	r3, #1
 8003106:	b29a      	uxth	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	f003 0304 	and.w	r3, r3, #4
 8003116:	2b04      	cmp	r3, #4
 8003118:	d118      	bne.n	800314c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	691a      	ldr	r2, [r3, #16]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	b2d2      	uxtb	r2, r2
 8003126:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	1c5a      	adds	r2, r3, #1
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003136:	3b01      	subs	r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003142:	b29b      	uxth	r3, r3
 8003144:	3b01      	subs	r3, #1
 8003146:	b29a      	uxth	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003150:	2b00      	cmp	r3, #0
 8003152:	f47f aec2 	bne.w	8002eda <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2220      	movs	r2, #32
 800315a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800316e:	2300      	movs	r3, #0
 8003170:	e000      	b.n	8003174 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003172:	2302      	movs	r3, #2
  }
}
 8003174:	4618      	mov	r0, r3
 8003176:	3728      	adds	r7, #40	; 0x28
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	00010004 	.word	0x00010004

08003180 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b088      	sub	sp, #32
 8003184:	af02      	add	r7, sp, #8
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	4608      	mov	r0, r1
 800318a:	4611      	mov	r1, r2
 800318c:	461a      	mov	r2, r3
 800318e:	4603      	mov	r3, r0
 8003190:	817b      	strh	r3, [r7, #10]
 8003192:	460b      	mov	r3, r1
 8003194:	813b      	strh	r3, [r7, #8]
 8003196:	4613      	mov	r3, r2
 8003198:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800319a:	f7fe fea3 	bl	8001ee4 <HAL_GetTick>
 800319e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b20      	cmp	r3, #32
 80031aa:	f040 80d9 	bne.w	8003360 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	2319      	movs	r3, #25
 80031b4:	2201      	movs	r2, #1
 80031b6:	496d      	ldr	r1, [pc, #436]	; (800336c <HAL_I2C_Mem_Write+0x1ec>)
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f000 fac1 	bl	8003740 <I2C_WaitOnFlagUntilTimeout>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80031c4:	2302      	movs	r3, #2
 80031c6:	e0cc      	b.n	8003362 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_I2C_Mem_Write+0x56>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e0c5      	b.n	8003362 <HAL_I2C_Mem_Write+0x1e2>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d007      	beq.n	80031fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0201 	orr.w	r2, r2, #1
 80031fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800320a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2221      	movs	r2, #33	; 0x21
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2240      	movs	r2, #64	; 0x40
 8003218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6a3a      	ldr	r2, [r7, #32]
 8003226:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800322c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003232:	b29a      	uxth	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4a4d      	ldr	r2, [pc, #308]	; (8003370 <HAL_I2C_Mem_Write+0x1f0>)
 800323c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800323e:	88f8      	ldrh	r0, [r7, #6]
 8003240:	893a      	ldrh	r2, [r7, #8]
 8003242:	8979      	ldrh	r1, [r7, #10]
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	9301      	str	r3, [sp, #4]
 8003248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	4603      	mov	r3, r0
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 f9e0 	bl	8003614 <I2C_RequestMemoryWrite>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d052      	beq.n	8003300 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e081      	b.n	8003362 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f000 fb42 	bl	80038ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00d      	beq.n	800328a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	2b04      	cmp	r3, #4
 8003274:	d107      	bne.n	8003286 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003284:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e06b      	b.n	8003362 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	781a      	ldrb	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	3b01      	subs	r3, #1
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	2b04      	cmp	r3, #4
 80032c6:	d11b      	bne.n	8003300 <HAL_I2C_Mem_Write+0x180>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d017      	beq.n	8003300 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	781a      	ldrb	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	1c5a      	adds	r2, r3, #1
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ea:	3b01      	subs	r3, #1
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	3b01      	subs	r3, #1
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1aa      	bne.n	800325e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 fb2e 	bl	800396e <I2C_WaitOnBTFFlagUntilTimeout>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00d      	beq.n	8003334 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331c:	2b04      	cmp	r3, #4
 800331e:	d107      	bne.n	8003330 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800332e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e016      	b.n	8003362 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003342:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800335c:	2300      	movs	r3, #0
 800335e:	e000      	b.n	8003362 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003360:	2302      	movs	r3, #2
  }
}
 8003362:	4618      	mov	r0, r3
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	00100002 	.word	0x00100002
 8003370:	ffff0000 	.word	0xffff0000

08003374 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af02      	add	r7, sp, #8
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	607a      	str	r2, [r7, #4]
 800337e:	603b      	str	r3, [r7, #0]
 8003380:	460b      	mov	r3, r1
 8003382:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003388:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	2b08      	cmp	r3, #8
 800338e:	d006      	beq.n	800339e <I2C_MasterRequestWrite+0x2a>
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d003      	beq.n	800339e <I2C_MasterRequestWrite+0x2a>
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800339c:	d108      	bne.n	80033b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	e00b      	b.n	80033c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b4:	2b12      	cmp	r3, #18
 80033b6:	d107      	bne.n	80033c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 f9b3 	bl	8003740 <I2C_WaitOnFlagUntilTimeout>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00d      	beq.n	80033fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033ee:	d103      	bne.n	80033f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e035      	b.n	8003468 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003404:	d108      	bne.n	8003418 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003406:	897b      	ldrh	r3, [r7, #10]
 8003408:	b2db      	uxtb	r3, r3
 800340a:	461a      	mov	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003414:	611a      	str	r2, [r3, #16]
 8003416:	e01b      	b.n	8003450 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003418:	897b      	ldrh	r3, [r7, #10]
 800341a:	11db      	asrs	r3, r3, #7
 800341c:	b2db      	uxtb	r3, r3
 800341e:	f003 0306 	and.w	r3, r3, #6
 8003422:	b2db      	uxtb	r3, r3
 8003424:	f063 030f 	orn	r3, r3, #15
 8003428:	b2da      	uxtb	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	490e      	ldr	r1, [pc, #56]	; (8003470 <I2C_MasterRequestWrite+0xfc>)
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 f9d9 	bl	80037ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e010      	b.n	8003468 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003446:	897b      	ldrh	r3, [r7, #10]
 8003448:	b2da      	uxtb	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	4907      	ldr	r1, [pc, #28]	; (8003474 <I2C_MasterRequestWrite+0x100>)
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 f9c9 	bl	80037ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e000      	b.n	8003468 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3718      	adds	r7, #24
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	00010008 	.word	0x00010008
 8003474:	00010002 	.word	0x00010002

08003478 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b088      	sub	sp, #32
 800347c:	af02      	add	r7, sp, #8
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	607a      	str	r2, [r7, #4]
 8003482:	603b      	str	r3, [r7, #0]
 8003484:	460b      	mov	r3, r1
 8003486:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800349c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d006      	beq.n	80034b2 <I2C_MasterRequestRead+0x3a>
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d003      	beq.n	80034b2 <I2C_MasterRequestRead+0x3a>
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034b0:	d108      	bne.n	80034c4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	e00b      	b.n	80034dc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c8:	2b11      	cmp	r3, #17
 80034ca:	d107      	bne.n	80034dc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 f929 	bl	8003740 <I2C_WaitOnFlagUntilTimeout>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00d      	beq.n	8003510 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003502:	d103      	bne.n	800350c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f44f 7200 	mov.w	r2, #512	; 0x200
 800350a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e079      	b.n	8003604 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003518:	d108      	bne.n	800352c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800351a:	897b      	ldrh	r3, [r7, #10]
 800351c:	b2db      	uxtb	r3, r3
 800351e:	f043 0301 	orr.w	r3, r3, #1
 8003522:	b2da      	uxtb	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	611a      	str	r2, [r3, #16]
 800352a:	e05f      	b.n	80035ec <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800352c:	897b      	ldrh	r3, [r7, #10]
 800352e:	11db      	asrs	r3, r3, #7
 8003530:	b2db      	uxtb	r3, r3
 8003532:	f003 0306 	and.w	r3, r3, #6
 8003536:	b2db      	uxtb	r3, r3
 8003538:	f063 030f 	orn	r3, r3, #15
 800353c:	b2da      	uxtb	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	4930      	ldr	r1, [pc, #192]	; (800360c <I2C_MasterRequestRead+0x194>)
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 f94f 	bl	80037ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e054      	b.n	8003604 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800355a:	897b      	ldrh	r3, [r7, #10]
 800355c:	b2da      	uxtb	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	4929      	ldr	r1, [pc, #164]	; (8003610 <I2C_MasterRequestRead+0x198>)
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 f93f 	bl	80037ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e044      	b.n	8003604 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800357a:	2300      	movs	r3, #0
 800357c:	613b      	str	r3, [r7, #16]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	613b      	str	r3, [r7, #16]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	613b      	str	r3, [r7, #16]
 800358e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800359e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f000 f8c7 	bl	8003740 <I2C_WaitOnFlagUntilTimeout>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00d      	beq.n	80035d4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c6:	d103      	bne.n	80035d0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035ce:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e017      	b.n	8003604 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80035d4:	897b      	ldrh	r3, [r7, #10]
 80035d6:	11db      	asrs	r3, r3, #7
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	f003 0306 	and.w	r3, r3, #6
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	f063 030e 	orn	r3, r3, #14
 80035e4:	b2da      	uxtb	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	4907      	ldr	r1, [pc, #28]	; (8003610 <I2C_MasterRequestRead+0x198>)
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 f8fb 	bl	80037ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e000      	b.n	8003604 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	00010008 	.word	0x00010008
 8003610:	00010002 	.word	0x00010002

08003614 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b088      	sub	sp, #32
 8003618:	af02      	add	r7, sp, #8
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	4608      	mov	r0, r1
 800361e:	4611      	mov	r1, r2
 8003620:	461a      	mov	r2, r3
 8003622:	4603      	mov	r3, r0
 8003624:	817b      	strh	r3, [r7, #10]
 8003626:	460b      	mov	r3, r1
 8003628:	813b      	strh	r3, [r7, #8]
 800362a:	4613      	mov	r3, r2
 800362c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800363c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	2200      	movs	r2, #0
 8003646:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 f878 	bl	8003740 <I2C_WaitOnFlagUntilTimeout>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00d      	beq.n	8003672 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003664:	d103      	bne.n	800366e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800366c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e05f      	b.n	8003732 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003672:	897b      	ldrh	r3, [r7, #10]
 8003674:	b2db      	uxtb	r3, r3
 8003676:	461a      	mov	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003680:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	6a3a      	ldr	r2, [r7, #32]
 8003686:	492d      	ldr	r1, [pc, #180]	; (800373c <I2C_RequestMemoryWrite+0x128>)
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 f8b0 	bl	80037ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e04c      	b.n	8003732 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003698:	2300      	movs	r3, #0
 800369a:	617b      	str	r3, [r7, #20]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	617b      	str	r3, [r7, #20]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b0:	6a39      	ldr	r1, [r7, #32]
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f000 f91a 	bl	80038ec <I2C_WaitOnTXEFlagUntilTimeout>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00d      	beq.n	80036da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d107      	bne.n	80036d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e02b      	b.n	8003732 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036da:	88fb      	ldrh	r3, [r7, #6]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d105      	bne.n	80036ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036e0:	893b      	ldrh	r3, [r7, #8]
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	611a      	str	r2, [r3, #16]
 80036ea:	e021      	b.n	8003730 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036ec:	893b      	ldrh	r3, [r7, #8]
 80036ee:	0a1b      	lsrs	r3, r3, #8
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	b2da      	uxtb	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036fc:	6a39      	ldr	r1, [r7, #32]
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 f8f4 	bl	80038ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00d      	beq.n	8003726 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	2b04      	cmp	r3, #4
 8003710:	d107      	bne.n	8003722 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003720:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e005      	b.n	8003732 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003726:	893b      	ldrh	r3, [r7, #8]
 8003728:	b2da      	uxtb	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3718      	adds	r7, #24
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	00010002 	.word	0x00010002

08003740 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	603b      	str	r3, [r7, #0]
 800374c:	4613      	mov	r3, r2
 800374e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003750:	e025      	b.n	800379e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003758:	d021      	beq.n	800379e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800375a:	f7fe fbc3 	bl	8001ee4 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	429a      	cmp	r2, r3
 8003768:	d302      	bcc.n	8003770 <I2C_WaitOnFlagUntilTimeout+0x30>
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d116      	bne.n	800379e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2220      	movs	r2, #32
 800377a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f043 0220 	orr.w	r2, r3, #32
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e023      	b.n	80037e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	0c1b      	lsrs	r3, r3, #16
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d10d      	bne.n	80037c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	43da      	mvns	r2, r3
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	4013      	ands	r3, r2
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	bf0c      	ite	eq
 80037ba:	2301      	moveq	r3, #1
 80037bc:	2300      	movne	r3, #0
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	461a      	mov	r2, r3
 80037c2:	e00c      	b.n	80037de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	43da      	mvns	r2, r3
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	4013      	ands	r3, r2
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	bf0c      	ite	eq
 80037d6:	2301      	moveq	r3, #1
 80037d8:	2300      	movne	r3, #0
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	461a      	mov	r2, r3
 80037de:	79fb      	ldrb	r3, [r7, #7]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d0b6      	beq.n	8003752 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b084      	sub	sp, #16
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	60f8      	str	r0, [r7, #12]
 80037f6:	60b9      	str	r1, [r7, #8]
 80037f8:	607a      	str	r2, [r7, #4]
 80037fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037fc:	e051      	b.n	80038a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800380c:	d123      	bne.n	8003856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800381c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003826:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2220      	movs	r2, #32
 8003832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	f043 0204 	orr.w	r2, r3, #4
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e046      	b.n	80038e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800385c:	d021      	beq.n	80038a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800385e:	f7fe fb41 	bl	8001ee4 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	429a      	cmp	r2, r3
 800386c:	d302      	bcc.n	8003874 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d116      	bne.n	80038a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2220      	movs	r2, #32
 800387e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	f043 0220 	orr.w	r2, r3, #32
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e020      	b.n	80038e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	0c1b      	lsrs	r3, r3, #16
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d10c      	bne.n	80038c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	43da      	mvns	r2, r3
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	4013      	ands	r3, r2
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	bf14      	ite	ne
 80038be:	2301      	movne	r3, #1
 80038c0:	2300      	moveq	r3, #0
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	e00b      	b.n	80038de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	43da      	mvns	r2, r3
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	4013      	ands	r3, r2
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	bf14      	ite	ne
 80038d8:	2301      	movne	r3, #1
 80038da:	2300      	moveq	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d18d      	bne.n	80037fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038f8:	e02d      	b.n	8003956 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 f8ce 	bl	8003a9c <I2C_IsAcknowledgeFailed>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e02d      	b.n	8003966 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003910:	d021      	beq.n	8003956 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003912:	f7fe fae7 	bl	8001ee4 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	429a      	cmp	r2, r3
 8003920:	d302      	bcc.n	8003928 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d116      	bne.n	8003956 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2220      	movs	r2, #32
 8003932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	f043 0220 	orr.w	r2, r3, #32
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e007      	b.n	8003966 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003960:	2b80      	cmp	r3, #128	; 0x80
 8003962:	d1ca      	bne.n	80038fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b084      	sub	sp, #16
 8003972:	af00      	add	r7, sp, #0
 8003974:	60f8      	str	r0, [r7, #12]
 8003976:	60b9      	str	r1, [r7, #8]
 8003978:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800397a:	e02d      	b.n	80039d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 f88d 	bl	8003a9c <I2C_IsAcknowledgeFailed>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e02d      	b.n	80039e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003992:	d021      	beq.n	80039d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003994:	f7fe faa6 	bl	8001ee4 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d302      	bcc.n	80039aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d116      	bne.n	80039d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2220      	movs	r2, #32
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c4:	f043 0220 	orr.w	r2, r3, #32
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e007      	b.n	80039e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	f003 0304 	and.w	r3, r3, #4
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	d1ca      	bne.n	800397c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039fc:	e042      	b.n	8003a84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	f003 0310 	and.w	r3, r3, #16
 8003a08:	2b10      	cmp	r3, #16
 8003a0a:	d119      	bne.n	8003a40 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f06f 0210 	mvn.w	r2, #16
 8003a14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e029      	b.n	8003a94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a40:	f7fe fa50 	bl	8001ee4 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	68ba      	ldr	r2, [r7, #8]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d302      	bcc.n	8003a56 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d116      	bne.n	8003a84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a70:	f043 0220 	orr.w	r2, r3, #32
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e007      	b.n	8003a94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8e:	2b40      	cmp	r3, #64	; 0x40
 8003a90:	d1b5      	bne.n	80039fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ab2:	d11b      	bne.n	8003aec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003abc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad8:	f043 0204 	orr.w	r2, r3, #4
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e000      	b.n	8003aee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
	...

08003afc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e0cc      	b.n	8003caa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b10:	4b68      	ldr	r3, [pc, #416]	; (8003cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 030f 	and.w	r3, r3, #15
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d90c      	bls.n	8003b38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b1e:	4b65      	ldr	r3, [pc, #404]	; (8003cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	b2d2      	uxtb	r2, r2
 8003b24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b26:	4b63      	ldr	r3, [pc, #396]	; (8003cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 030f 	and.w	r3, r3, #15
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d001      	beq.n	8003b38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e0b8      	b.n	8003caa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d020      	beq.n	8003b86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d005      	beq.n	8003b5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b50:	4b59      	ldr	r3, [pc, #356]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	4a58      	ldr	r2, [pc, #352]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0308 	and.w	r3, r3, #8
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d005      	beq.n	8003b74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b68:	4b53      	ldr	r3, [pc, #332]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	4a52      	ldr	r2, [pc, #328]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b74:	4b50      	ldr	r3, [pc, #320]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	494d      	ldr	r1, [pc, #308]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d044      	beq.n	8003c1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d107      	bne.n	8003baa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b9a:	4b47      	ldr	r3, [pc, #284]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d119      	bne.n	8003bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e07f      	b.n	8003caa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d003      	beq.n	8003bba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bb6:	2b03      	cmp	r3, #3
 8003bb8:	d107      	bne.n	8003bca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bba:	4b3f      	ldr	r3, [pc, #252]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d109      	bne.n	8003bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e06f      	b.n	8003caa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bca:	4b3b      	ldr	r3, [pc, #236]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e067      	b.n	8003caa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bda:	4b37      	ldr	r3, [pc, #220]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f023 0203 	bic.w	r2, r3, #3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	4934      	ldr	r1, [pc, #208]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bec:	f7fe f97a 	bl	8001ee4 <HAL_GetTick>
 8003bf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bf2:	e00a      	b.n	8003c0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bf4:	f7fe f976 	bl	8001ee4 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e04f      	b.n	8003caa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c0a:	4b2b      	ldr	r3, [pc, #172]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 020c 	and.w	r2, r3, #12
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d1eb      	bne.n	8003bf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c1c:	4b25      	ldr	r3, [pc, #148]	; (8003cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 030f 	and.w	r3, r3, #15
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d20c      	bcs.n	8003c44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c2a:	4b22      	ldr	r3, [pc, #136]	; (8003cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c32:	4b20      	ldr	r3, [pc, #128]	; (8003cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d001      	beq.n	8003c44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e032      	b.n	8003caa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d008      	beq.n	8003c62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c50:	4b19      	ldr	r3, [pc, #100]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	4916      	ldr	r1, [pc, #88]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d009      	beq.n	8003c82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c6e:	4b12      	ldr	r3, [pc, #72]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	490e      	ldr	r1, [pc, #56]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c82:	f000 f855 	bl	8003d30 <HAL_RCC_GetSysClockFreq>
 8003c86:	4602      	mov	r2, r0
 8003c88:	4b0b      	ldr	r3, [pc, #44]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	091b      	lsrs	r3, r3, #4
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	490a      	ldr	r1, [pc, #40]	; (8003cbc <HAL_RCC_ClockConfig+0x1c0>)
 8003c94:	5ccb      	ldrb	r3, [r1, r3]
 8003c96:	fa22 f303 	lsr.w	r3, r2, r3
 8003c9a:	4a09      	ldr	r2, [pc, #36]	; (8003cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c9e:	4b09      	ldr	r3, [pc, #36]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7fe f8da 	bl	8001e5c <HAL_InitTick>

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40023c00 	.word	0x40023c00
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	08007c30 	.word	0x08007c30
 8003cc0:	20000000 	.word	0x20000000
 8003cc4:	20000004 	.word	0x20000004

08003cc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ccc:	4b03      	ldr	r3, [pc, #12]	; (8003cdc <HAL_RCC_GetHCLKFreq+0x14>)
 8003cce:	681b      	ldr	r3, [r3, #0]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	20000000 	.word	0x20000000

08003ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ce4:	f7ff fff0 	bl	8003cc8 <HAL_RCC_GetHCLKFreq>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	4b05      	ldr	r3, [pc, #20]	; (8003d00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	0a9b      	lsrs	r3, r3, #10
 8003cf0:	f003 0307 	and.w	r3, r3, #7
 8003cf4:	4903      	ldr	r1, [pc, #12]	; (8003d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cf6:	5ccb      	ldrb	r3, [r1, r3]
 8003cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	40023800 	.word	0x40023800
 8003d04:	08007c40 	.word	0x08007c40

08003d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d0c:	f7ff ffdc 	bl	8003cc8 <HAL_RCC_GetHCLKFreq>
 8003d10:	4602      	mov	r2, r0
 8003d12:	4b05      	ldr	r3, [pc, #20]	; (8003d28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	0b5b      	lsrs	r3, r3, #13
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	4903      	ldr	r1, [pc, #12]	; (8003d2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d1e:	5ccb      	ldrb	r3, [r1, r3]
 8003d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	08007c40 	.word	0x08007c40

08003d30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d34:	b0ae      	sub	sp, #184	; 0xb8
 8003d36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003d44:	2300      	movs	r3, #0
 8003d46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003d50:	2300      	movs	r3, #0
 8003d52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d56:	4bcb      	ldr	r3, [pc, #812]	; (8004084 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 030c 	and.w	r3, r3, #12
 8003d5e:	2b0c      	cmp	r3, #12
 8003d60:	f200 8206 	bhi.w	8004170 <HAL_RCC_GetSysClockFreq+0x440>
 8003d64:	a201      	add	r2, pc, #4	; (adr r2, 8003d6c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6a:	bf00      	nop
 8003d6c:	08003da1 	.word	0x08003da1
 8003d70:	08004171 	.word	0x08004171
 8003d74:	08004171 	.word	0x08004171
 8003d78:	08004171 	.word	0x08004171
 8003d7c:	08003da9 	.word	0x08003da9
 8003d80:	08004171 	.word	0x08004171
 8003d84:	08004171 	.word	0x08004171
 8003d88:	08004171 	.word	0x08004171
 8003d8c:	08003db1 	.word	0x08003db1
 8003d90:	08004171 	.word	0x08004171
 8003d94:	08004171 	.word	0x08004171
 8003d98:	08004171 	.word	0x08004171
 8003d9c:	08003fa1 	.word	0x08003fa1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003da0:	4bb9      	ldr	r3, [pc, #740]	; (8004088 <HAL_RCC_GetSysClockFreq+0x358>)
 8003da2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003da6:	e1e7      	b.n	8004178 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003da8:	4bb8      	ldr	r3, [pc, #736]	; (800408c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003daa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003dae:	e1e3      	b.n	8004178 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003db0:	4bb4      	ldr	r3, [pc, #720]	; (8004084 <HAL_RCC_GetSysClockFreq+0x354>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003db8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dbc:	4bb1      	ldr	r3, [pc, #708]	; (8004084 <HAL_RCC_GetSysClockFreq+0x354>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d071      	beq.n	8003eac <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dc8:	4bae      	ldr	r3, [pc, #696]	; (8004084 <HAL_RCC_GetSysClockFreq+0x354>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	099b      	lsrs	r3, r3, #6
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003dd4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003dd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003de0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003de4:	2300      	movs	r3, #0
 8003de6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003dea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003dee:	4622      	mov	r2, r4
 8003df0:	462b      	mov	r3, r5
 8003df2:	f04f 0000 	mov.w	r0, #0
 8003df6:	f04f 0100 	mov.w	r1, #0
 8003dfa:	0159      	lsls	r1, r3, #5
 8003dfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e00:	0150      	lsls	r0, r2, #5
 8003e02:	4602      	mov	r2, r0
 8003e04:	460b      	mov	r3, r1
 8003e06:	4621      	mov	r1, r4
 8003e08:	1a51      	subs	r1, r2, r1
 8003e0a:	6439      	str	r1, [r7, #64]	; 0x40
 8003e0c:	4629      	mov	r1, r5
 8003e0e:	eb63 0301 	sbc.w	r3, r3, r1
 8003e12:	647b      	str	r3, [r7, #68]	; 0x44
 8003e14:	f04f 0200 	mov.w	r2, #0
 8003e18:	f04f 0300 	mov.w	r3, #0
 8003e1c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003e20:	4649      	mov	r1, r9
 8003e22:	018b      	lsls	r3, r1, #6
 8003e24:	4641      	mov	r1, r8
 8003e26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e2a:	4641      	mov	r1, r8
 8003e2c:	018a      	lsls	r2, r1, #6
 8003e2e:	4641      	mov	r1, r8
 8003e30:	1a51      	subs	r1, r2, r1
 8003e32:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e34:	4649      	mov	r1, r9
 8003e36:	eb63 0301 	sbc.w	r3, r3, r1
 8003e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e3c:	f04f 0200 	mov.w	r2, #0
 8003e40:	f04f 0300 	mov.w	r3, #0
 8003e44:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003e48:	4649      	mov	r1, r9
 8003e4a:	00cb      	lsls	r3, r1, #3
 8003e4c:	4641      	mov	r1, r8
 8003e4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e52:	4641      	mov	r1, r8
 8003e54:	00ca      	lsls	r2, r1, #3
 8003e56:	4610      	mov	r0, r2
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	4622      	mov	r2, r4
 8003e5e:	189b      	adds	r3, r3, r2
 8003e60:	633b      	str	r3, [r7, #48]	; 0x30
 8003e62:	462b      	mov	r3, r5
 8003e64:	460a      	mov	r2, r1
 8003e66:	eb42 0303 	adc.w	r3, r2, r3
 8003e6a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	f04f 0300 	mov.w	r3, #0
 8003e74:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e78:	4629      	mov	r1, r5
 8003e7a:	024b      	lsls	r3, r1, #9
 8003e7c:	4621      	mov	r1, r4
 8003e7e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e82:	4621      	mov	r1, r4
 8003e84:	024a      	lsls	r2, r1, #9
 8003e86:	4610      	mov	r0, r2
 8003e88:	4619      	mov	r1, r3
 8003e8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e94:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e98:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003e9c:	f7fc fef4 	bl	8000c88 <__aeabi_uldivmod>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003eaa:	e067      	b.n	8003f7c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eac:	4b75      	ldr	r3, [pc, #468]	; (8004084 <HAL_RCC_GetSysClockFreq+0x354>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	099b      	lsrs	r3, r3, #6
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003eb8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003ebc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ec4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003eca:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003ece:	4622      	mov	r2, r4
 8003ed0:	462b      	mov	r3, r5
 8003ed2:	f04f 0000 	mov.w	r0, #0
 8003ed6:	f04f 0100 	mov.w	r1, #0
 8003eda:	0159      	lsls	r1, r3, #5
 8003edc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ee0:	0150      	lsls	r0, r2, #5
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	4621      	mov	r1, r4
 8003ee8:	1a51      	subs	r1, r2, r1
 8003eea:	62b9      	str	r1, [r7, #40]	; 0x28
 8003eec:	4629      	mov	r1, r5
 8003eee:	eb63 0301 	sbc.w	r3, r3, r1
 8003ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	f04f 0300 	mov.w	r3, #0
 8003efc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003f00:	4649      	mov	r1, r9
 8003f02:	018b      	lsls	r3, r1, #6
 8003f04:	4641      	mov	r1, r8
 8003f06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f0a:	4641      	mov	r1, r8
 8003f0c:	018a      	lsls	r2, r1, #6
 8003f0e:	4641      	mov	r1, r8
 8003f10:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f14:	4649      	mov	r1, r9
 8003f16:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f1a:	f04f 0200 	mov.w	r2, #0
 8003f1e:	f04f 0300 	mov.w	r3, #0
 8003f22:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f26:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f2a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f2e:	4692      	mov	sl, r2
 8003f30:	469b      	mov	fp, r3
 8003f32:	4623      	mov	r3, r4
 8003f34:	eb1a 0303 	adds.w	r3, sl, r3
 8003f38:	623b      	str	r3, [r7, #32]
 8003f3a:	462b      	mov	r3, r5
 8003f3c:	eb4b 0303 	adc.w	r3, fp, r3
 8003f40:	627b      	str	r3, [r7, #36]	; 0x24
 8003f42:	f04f 0200 	mov.w	r2, #0
 8003f46:	f04f 0300 	mov.w	r3, #0
 8003f4a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003f4e:	4629      	mov	r1, r5
 8003f50:	028b      	lsls	r3, r1, #10
 8003f52:	4621      	mov	r1, r4
 8003f54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f58:	4621      	mov	r1, r4
 8003f5a:	028a      	lsls	r2, r1, #10
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	4619      	mov	r1, r3
 8003f60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f64:	2200      	movs	r2, #0
 8003f66:	673b      	str	r3, [r7, #112]	; 0x70
 8003f68:	677a      	str	r2, [r7, #116]	; 0x74
 8003f6a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003f6e:	f7fc fe8b 	bl	8000c88 <__aeabi_uldivmod>
 8003f72:	4602      	mov	r2, r0
 8003f74:	460b      	mov	r3, r1
 8003f76:	4613      	mov	r3, r2
 8003f78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f7c:	4b41      	ldr	r3, [pc, #260]	; (8004084 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	0c1b      	lsrs	r3, r3, #16
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	3301      	adds	r3, #1
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003f8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f9e:	e0eb      	b.n	8004178 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fa0:	4b38      	ldr	r3, [pc, #224]	; (8004084 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fa8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fac:	4b35      	ldr	r3, [pc, #212]	; (8004084 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d06b      	beq.n	8004090 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fb8:	4b32      	ldr	r3, [pc, #200]	; (8004084 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	099b      	lsrs	r3, r3, #6
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003fc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fca:	663b      	str	r3, [r7, #96]	; 0x60
 8003fcc:	2300      	movs	r3, #0
 8003fce:	667b      	str	r3, [r7, #100]	; 0x64
 8003fd0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003fd4:	4622      	mov	r2, r4
 8003fd6:	462b      	mov	r3, r5
 8003fd8:	f04f 0000 	mov.w	r0, #0
 8003fdc:	f04f 0100 	mov.w	r1, #0
 8003fe0:	0159      	lsls	r1, r3, #5
 8003fe2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fe6:	0150      	lsls	r0, r2, #5
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	4621      	mov	r1, r4
 8003fee:	1a51      	subs	r1, r2, r1
 8003ff0:	61b9      	str	r1, [r7, #24]
 8003ff2:	4629      	mov	r1, r5
 8003ff4:	eb63 0301 	sbc.w	r3, r3, r1
 8003ff8:	61fb      	str	r3, [r7, #28]
 8003ffa:	f04f 0200 	mov.w	r2, #0
 8003ffe:	f04f 0300 	mov.w	r3, #0
 8004002:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004006:	4659      	mov	r1, fp
 8004008:	018b      	lsls	r3, r1, #6
 800400a:	4651      	mov	r1, sl
 800400c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004010:	4651      	mov	r1, sl
 8004012:	018a      	lsls	r2, r1, #6
 8004014:	4651      	mov	r1, sl
 8004016:	ebb2 0801 	subs.w	r8, r2, r1
 800401a:	4659      	mov	r1, fp
 800401c:	eb63 0901 	sbc.w	r9, r3, r1
 8004020:	f04f 0200 	mov.w	r2, #0
 8004024:	f04f 0300 	mov.w	r3, #0
 8004028:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800402c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004030:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004034:	4690      	mov	r8, r2
 8004036:	4699      	mov	r9, r3
 8004038:	4623      	mov	r3, r4
 800403a:	eb18 0303 	adds.w	r3, r8, r3
 800403e:	613b      	str	r3, [r7, #16]
 8004040:	462b      	mov	r3, r5
 8004042:	eb49 0303 	adc.w	r3, r9, r3
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	f04f 0200 	mov.w	r2, #0
 800404c:	f04f 0300 	mov.w	r3, #0
 8004050:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004054:	4629      	mov	r1, r5
 8004056:	024b      	lsls	r3, r1, #9
 8004058:	4621      	mov	r1, r4
 800405a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800405e:	4621      	mov	r1, r4
 8004060:	024a      	lsls	r2, r1, #9
 8004062:	4610      	mov	r0, r2
 8004064:	4619      	mov	r1, r3
 8004066:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800406a:	2200      	movs	r2, #0
 800406c:	65bb      	str	r3, [r7, #88]	; 0x58
 800406e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004070:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004074:	f7fc fe08 	bl	8000c88 <__aeabi_uldivmod>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	4613      	mov	r3, r2
 800407e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004082:	e065      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0x420>
 8004084:	40023800 	.word	0x40023800
 8004088:	00f42400 	.word	0x00f42400
 800408c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004090:	4b3d      	ldr	r3, [pc, #244]	; (8004188 <HAL_RCC_GetSysClockFreq+0x458>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	099b      	lsrs	r3, r3, #6
 8004096:	2200      	movs	r2, #0
 8004098:	4618      	mov	r0, r3
 800409a:	4611      	mov	r1, r2
 800409c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040a0:	653b      	str	r3, [r7, #80]	; 0x50
 80040a2:	2300      	movs	r3, #0
 80040a4:	657b      	str	r3, [r7, #84]	; 0x54
 80040a6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80040aa:	4642      	mov	r2, r8
 80040ac:	464b      	mov	r3, r9
 80040ae:	f04f 0000 	mov.w	r0, #0
 80040b2:	f04f 0100 	mov.w	r1, #0
 80040b6:	0159      	lsls	r1, r3, #5
 80040b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040bc:	0150      	lsls	r0, r2, #5
 80040be:	4602      	mov	r2, r0
 80040c0:	460b      	mov	r3, r1
 80040c2:	4641      	mov	r1, r8
 80040c4:	1a51      	subs	r1, r2, r1
 80040c6:	60b9      	str	r1, [r7, #8]
 80040c8:	4649      	mov	r1, r9
 80040ca:	eb63 0301 	sbc.w	r3, r3, r1
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	f04f 0300 	mov.w	r3, #0
 80040d8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80040dc:	4659      	mov	r1, fp
 80040de:	018b      	lsls	r3, r1, #6
 80040e0:	4651      	mov	r1, sl
 80040e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040e6:	4651      	mov	r1, sl
 80040e8:	018a      	lsls	r2, r1, #6
 80040ea:	4651      	mov	r1, sl
 80040ec:	1a54      	subs	r4, r2, r1
 80040ee:	4659      	mov	r1, fp
 80040f0:	eb63 0501 	sbc.w	r5, r3, r1
 80040f4:	f04f 0200 	mov.w	r2, #0
 80040f8:	f04f 0300 	mov.w	r3, #0
 80040fc:	00eb      	lsls	r3, r5, #3
 80040fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004102:	00e2      	lsls	r2, r4, #3
 8004104:	4614      	mov	r4, r2
 8004106:	461d      	mov	r5, r3
 8004108:	4643      	mov	r3, r8
 800410a:	18e3      	adds	r3, r4, r3
 800410c:	603b      	str	r3, [r7, #0]
 800410e:	464b      	mov	r3, r9
 8004110:	eb45 0303 	adc.w	r3, r5, r3
 8004114:	607b      	str	r3, [r7, #4]
 8004116:	f04f 0200 	mov.w	r2, #0
 800411a:	f04f 0300 	mov.w	r3, #0
 800411e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004122:	4629      	mov	r1, r5
 8004124:	028b      	lsls	r3, r1, #10
 8004126:	4621      	mov	r1, r4
 8004128:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800412c:	4621      	mov	r1, r4
 800412e:	028a      	lsls	r2, r1, #10
 8004130:	4610      	mov	r0, r2
 8004132:	4619      	mov	r1, r3
 8004134:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004138:	2200      	movs	r2, #0
 800413a:	64bb      	str	r3, [r7, #72]	; 0x48
 800413c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800413e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004142:	f7fc fda1 	bl	8000c88 <__aeabi_uldivmod>
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	4613      	mov	r3, r2
 800414c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004150:	4b0d      	ldr	r3, [pc, #52]	; (8004188 <HAL_RCC_GetSysClockFreq+0x458>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	0f1b      	lsrs	r3, r3, #28
 8004156:	f003 0307 	and.w	r3, r3, #7
 800415a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800415e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004162:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004166:	fbb2 f3f3 	udiv	r3, r2, r3
 800416a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800416e:	e003      	b.n	8004178 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004170:	4b06      	ldr	r3, [pc, #24]	; (800418c <HAL_RCC_GetSysClockFreq+0x45c>)
 8004172:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004176:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004178:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800417c:	4618      	mov	r0, r3
 800417e:	37b8      	adds	r7, #184	; 0xb8
 8004180:	46bd      	mov	sp, r7
 8004182:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004186:	bf00      	nop
 8004188:	40023800 	.word	0x40023800
 800418c:	00f42400 	.word	0x00f42400

08004190 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e28d      	b.n	80046be <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 8083 	beq.w	80042b6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80041b0:	4b94      	ldr	r3, [pc, #592]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f003 030c 	and.w	r3, r3, #12
 80041b8:	2b04      	cmp	r3, #4
 80041ba:	d019      	beq.n	80041f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041bc:	4b91      	ldr	r3, [pc, #580]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d106      	bne.n	80041d6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041c8:	4b8e      	ldr	r3, [pc, #568]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041d4:	d00c      	beq.n	80041f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041d6:	4b8b      	ldr	r3, [pc, #556]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041de:	2b0c      	cmp	r3, #12
 80041e0:	d112      	bne.n	8004208 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041e2:	4b88      	ldr	r3, [pc, #544]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041ee:	d10b      	bne.n	8004208 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041f0:	4b84      	ldr	r3, [pc, #528]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d05b      	beq.n	80042b4 <HAL_RCC_OscConfig+0x124>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d157      	bne.n	80042b4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e25a      	b.n	80046be <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004210:	d106      	bne.n	8004220 <HAL_RCC_OscConfig+0x90>
 8004212:	4b7c      	ldr	r3, [pc, #496]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a7b      	ldr	r2, [pc, #492]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 8004218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	e01d      	b.n	800425c <HAL_RCC_OscConfig+0xcc>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004228:	d10c      	bne.n	8004244 <HAL_RCC_OscConfig+0xb4>
 800422a:	4b76      	ldr	r3, [pc, #472]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a75      	ldr	r2, [pc, #468]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 8004230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	4b73      	ldr	r3, [pc, #460]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a72      	ldr	r2, [pc, #456]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 800423c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004240:	6013      	str	r3, [r2, #0]
 8004242:	e00b      	b.n	800425c <HAL_RCC_OscConfig+0xcc>
 8004244:	4b6f      	ldr	r3, [pc, #444]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a6e      	ldr	r2, [pc, #440]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 800424a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800424e:	6013      	str	r3, [r2, #0]
 8004250:	4b6c      	ldr	r3, [pc, #432]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a6b      	ldr	r2, [pc, #428]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 8004256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800425a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d013      	beq.n	800428c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004264:	f7fd fe3e 	bl	8001ee4 <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800426c:	f7fd fe3a 	bl	8001ee4 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b64      	cmp	r3, #100	; 0x64
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e21f      	b.n	80046be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427e:	4b61      	ldr	r3, [pc, #388]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0f0      	beq.n	800426c <HAL_RCC_OscConfig+0xdc>
 800428a:	e014      	b.n	80042b6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428c:	f7fd fe2a 	bl	8001ee4 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004294:	f7fd fe26 	bl	8001ee4 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b64      	cmp	r3, #100	; 0x64
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e20b      	b.n	80046be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042a6:	4b57      	ldr	r3, [pc, #348]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1f0      	bne.n	8004294 <HAL_RCC_OscConfig+0x104>
 80042b2:	e000      	b.n	80042b6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d06f      	beq.n	80043a2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80042c2:	4b50      	ldr	r3, [pc, #320]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 030c 	and.w	r3, r3, #12
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d017      	beq.n	80042fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042ce:	4b4d      	ldr	r3, [pc, #308]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80042d6:	2b08      	cmp	r3, #8
 80042d8:	d105      	bne.n	80042e6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042da:	4b4a      	ldr	r3, [pc, #296]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00b      	beq.n	80042fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042e6:	4b47      	ldr	r3, [pc, #284]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042ee:	2b0c      	cmp	r3, #12
 80042f0:	d11c      	bne.n	800432c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042f2:	4b44      	ldr	r3, [pc, #272]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d116      	bne.n	800432c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042fe:	4b41      	ldr	r3, [pc, #260]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d005      	beq.n	8004316 <HAL_RCC_OscConfig+0x186>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d001      	beq.n	8004316 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e1d3      	b.n	80046be <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004316:	4b3b      	ldr	r3, [pc, #236]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	4937      	ldr	r1, [pc, #220]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 8004326:	4313      	orrs	r3, r2
 8004328:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800432a:	e03a      	b.n	80043a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d020      	beq.n	8004376 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004334:	4b34      	ldr	r3, [pc, #208]	; (8004408 <HAL_RCC_OscConfig+0x278>)
 8004336:	2201      	movs	r2, #1
 8004338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433a:	f7fd fdd3 	bl	8001ee4 <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004340:	e008      	b.n	8004354 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004342:	f7fd fdcf 	bl	8001ee4 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e1b4      	b.n	80046be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004354:	4b2b      	ldr	r3, [pc, #172]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0f0      	beq.n	8004342 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004360:	4b28      	ldr	r3, [pc, #160]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	4925      	ldr	r1, [pc, #148]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 8004370:	4313      	orrs	r3, r2
 8004372:	600b      	str	r3, [r1, #0]
 8004374:	e015      	b.n	80043a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004376:	4b24      	ldr	r3, [pc, #144]	; (8004408 <HAL_RCC_OscConfig+0x278>)
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437c:	f7fd fdb2 	bl	8001ee4 <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004384:	f7fd fdae 	bl	8001ee4 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e193      	b.n	80046be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004396:	4b1b      	ldr	r3, [pc, #108]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1f0      	bne.n	8004384 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0308 	and.w	r3, r3, #8
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d036      	beq.n	800441c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d016      	beq.n	80043e4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043b6:	4b15      	ldr	r3, [pc, #84]	; (800440c <HAL_RCC_OscConfig+0x27c>)
 80043b8:	2201      	movs	r2, #1
 80043ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043bc:	f7fd fd92 	bl	8001ee4 <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043c4:	f7fd fd8e 	bl	8001ee4 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e173      	b.n	80046be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043d6:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 80043d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d0f0      	beq.n	80043c4 <HAL_RCC_OscConfig+0x234>
 80043e2:	e01b      	b.n	800441c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043e4:	4b09      	ldr	r3, [pc, #36]	; (800440c <HAL_RCC_OscConfig+0x27c>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ea:	f7fd fd7b 	bl	8001ee4 <HAL_GetTick>
 80043ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f0:	e00e      	b.n	8004410 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043f2:	f7fd fd77 	bl	8001ee4 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d907      	bls.n	8004410 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e15c      	b.n	80046be <HAL_RCC_OscConfig+0x52e>
 8004404:	40023800 	.word	0x40023800
 8004408:	42470000 	.word	0x42470000
 800440c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004410:	4b8a      	ldr	r3, [pc, #552]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 8004412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1ea      	bne.n	80043f2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0304 	and.w	r3, r3, #4
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 8097 	beq.w	8004558 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800442a:	2300      	movs	r3, #0
 800442c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800442e:	4b83      	ldr	r3, [pc, #524]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10f      	bne.n	800445a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800443a:	2300      	movs	r3, #0
 800443c:	60bb      	str	r3, [r7, #8]
 800443e:	4b7f      	ldr	r3, [pc, #508]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	4a7e      	ldr	r2, [pc, #504]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 8004444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004448:	6413      	str	r3, [r2, #64]	; 0x40
 800444a:	4b7c      	ldr	r3, [pc, #496]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004452:	60bb      	str	r3, [r7, #8]
 8004454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004456:	2301      	movs	r3, #1
 8004458:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800445a:	4b79      	ldr	r3, [pc, #484]	; (8004640 <HAL_RCC_OscConfig+0x4b0>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004462:	2b00      	cmp	r3, #0
 8004464:	d118      	bne.n	8004498 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004466:	4b76      	ldr	r3, [pc, #472]	; (8004640 <HAL_RCC_OscConfig+0x4b0>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a75      	ldr	r2, [pc, #468]	; (8004640 <HAL_RCC_OscConfig+0x4b0>)
 800446c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004472:	f7fd fd37 	bl	8001ee4 <HAL_GetTick>
 8004476:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004478:	e008      	b.n	800448c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800447a:	f7fd fd33 	bl	8001ee4 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2b02      	cmp	r3, #2
 8004486:	d901      	bls.n	800448c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e118      	b.n	80046be <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800448c:	4b6c      	ldr	r3, [pc, #432]	; (8004640 <HAL_RCC_OscConfig+0x4b0>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0f0      	beq.n	800447a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d106      	bne.n	80044ae <HAL_RCC_OscConfig+0x31e>
 80044a0:	4b66      	ldr	r3, [pc, #408]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 80044a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a4:	4a65      	ldr	r2, [pc, #404]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 80044a6:	f043 0301 	orr.w	r3, r3, #1
 80044aa:	6713      	str	r3, [r2, #112]	; 0x70
 80044ac:	e01c      	b.n	80044e8 <HAL_RCC_OscConfig+0x358>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	2b05      	cmp	r3, #5
 80044b4:	d10c      	bne.n	80044d0 <HAL_RCC_OscConfig+0x340>
 80044b6:	4b61      	ldr	r3, [pc, #388]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 80044b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ba:	4a60      	ldr	r2, [pc, #384]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 80044bc:	f043 0304 	orr.w	r3, r3, #4
 80044c0:	6713      	str	r3, [r2, #112]	; 0x70
 80044c2:	4b5e      	ldr	r3, [pc, #376]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 80044c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c6:	4a5d      	ldr	r2, [pc, #372]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 80044c8:	f043 0301 	orr.w	r3, r3, #1
 80044cc:	6713      	str	r3, [r2, #112]	; 0x70
 80044ce:	e00b      	b.n	80044e8 <HAL_RCC_OscConfig+0x358>
 80044d0:	4b5a      	ldr	r3, [pc, #360]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 80044d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d4:	4a59      	ldr	r2, [pc, #356]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 80044d6:	f023 0301 	bic.w	r3, r3, #1
 80044da:	6713      	str	r3, [r2, #112]	; 0x70
 80044dc:	4b57      	ldr	r3, [pc, #348]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 80044de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e0:	4a56      	ldr	r2, [pc, #344]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 80044e2:	f023 0304 	bic.w	r3, r3, #4
 80044e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d015      	beq.n	800451c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f0:	f7fd fcf8 	bl	8001ee4 <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044f6:	e00a      	b.n	800450e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044f8:	f7fd fcf4 	bl	8001ee4 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	f241 3288 	movw	r2, #5000	; 0x1388
 8004506:	4293      	cmp	r3, r2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e0d7      	b.n	80046be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800450e:	4b4b      	ldr	r3, [pc, #300]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 8004510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0ee      	beq.n	80044f8 <HAL_RCC_OscConfig+0x368>
 800451a:	e014      	b.n	8004546 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800451c:	f7fd fce2 	bl	8001ee4 <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004522:	e00a      	b.n	800453a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004524:	f7fd fcde 	bl	8001ee4 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004532:	4293      	cmp	r3, r2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e0c1      	b.n	80046be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800453a:	4b40      	ldr	r3, [pc, #256]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 800453c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1ee      	bne.n	8004524 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004546:	7dfb      	ldrb	r3, [r7, #23]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d105      	bne.n	8004558 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800454c:	4b3b      	ldr	r3, [pc, #236]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 800454e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004550:	4a3a      	ldr	r2, [pc, #232]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 8004552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004556:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	2b00      	cmp	r3, #0
 800455e:	f000 80ad 	beq.w	80046bc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004562:	4b36      	ldr	r3, [pc, #216]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 030c 	and.w	r3, r3, #12
 800456a:	2b08      	cmp	r3, #8
 800456c:	d060      	beq.n	8004630 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	2b02      	cmp	r3, #2
 8004574:	d145      	bne.n	8004602 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004576:	4b33      	ldr	r3, [pc, #204]	; (8004644 <HAL_RCC_OscConfig+0x4b4>)
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457c:	f7fd fcb2 	bl	8001ee4 <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004584:	f7fd fcae 	bl	8001ee4 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e093      	b.n	80046be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004596:	4b29      	ldr	r3, [pc, #164]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1f0      	bne.n	8004584 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	69da      	ldr	r2, [r3, #28]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	431a      	orrs	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	019b      	lsls	r3, r3, #6
 80045b2:	431a      	orrs	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b8:	085b      	lsrs	r3, r3, #1
 80045ba:	3b01      	subs	r3, #1
 80045bc:	041b      	lsls	r3, r3, #16
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c4:	061b      	lsls	r3, r3, #24
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045cc:	071b      	lsls	r3, r3, #28
 80045ce:	491b      	ldr	r1, [pc, #108]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045d4:	4b1b      	ldr	r3, [pc, #108]	; (8004644 <HAL_RCC_OscConfig+0x4b4>)
 80045d6:	2201      	movs	r2, #1
 80045d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045da:	f7fd fc83 	bl	8001ee4 <HAL_GetTick>
 80045de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045e0:	e008      	b.n	80045f4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045e2:	f7fd fc7f 	bl	8001ee4 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d901      	bls.n	80045f4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e064      	b.n	80046be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045f4:	4b11      	ldr	r3, [pc, #68]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d0f0      	beq.n	80045e2 <HAL_RCC_OscConfig+0x452>
 8004600:	e05c      	b.n	80046bc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004602:	4b10      	ldr	r3, [pc, #64]	; (8004644 <HAL_RCC_OscConfig+0x4b4>)
 8004604:	2200      	movs	r2, #0
 8004606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004608:	f7fd fc6c 	bl	8001ee4 <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004610:	f7fd fc68 	bl	8001ee4 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e04d      	b.n	80046be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004622:	4b06      	ldr	r3, [pc, #24]	; (800463c <HAL_RCC_OscConfig+0x4ac>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1f0      	bne.n	8004610 <HAL_RCC_OscConfig+0x480>
 800462e:	e045      	b.n	80046bc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d107      	bne.n	8004648 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e040      	b.n	80046be <HAL_RCC_OscConfig+0x52e>
 800463c:	40023800 	.word	0x40023800
 8004640:	40007000 	.word	0x40007000
 8004644:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004648:	4b1f      	ldr	r3, [pc, #124]	; (80046c8 <HAL_RCC_OscConfig+0x538>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d030      	beq.n	80046b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004660:	429a      	cmp	r2, r3
 8004662:	d129      	bne.n	80046b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800466e:	429a      	cmp	r2, r3
 8004670:	d122      	bne.n	80046b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004678:	4013      	ands	r3, r2
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800467e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004680:	4293      	cmp	r3, r2
 8004682:	d119      	bne.n	80046b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468e:	085b      	lsrs	r3, r3, #1
 8004690:	3b01      	subs	r3, #1
 8004692:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004694:	429a      	cmp	r2, r3
 8004696:	d10f      	bne.n	80046b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d107      	bne.n	80046b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d001      	beq.n	80046bc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e000      	b.n	80046be <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3718      	adds	r7, #24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	40023800 	.word	0x40023800

080046cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e03f      	b.n	800475e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d106      	bne.n	80046f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7fd fa1c 	bl	8001b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2224      	movs	r2, #36	; 0x24
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68da      	ldr	r2, [r3, #12]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800470e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f929 	bl	8004968 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	691a      	ldr	r2, [r3, #16]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004724:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	695a      	ldr	r2, [r3, #20]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004734:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68da      	ldr	r2, [r3, #12]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004744:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2220      	movs	r2, #32
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2220      	movs	r2, #32
 8004758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b08a      	sub	sp, #40	; 0x28
 800476a:	af02      	add	r7, sp, #8
 800476c:	60f8      	str	r0, [r7, #12]
 800476e:	60b9      	str	r1, [r7, #8]
 8004770:	603b      	str	r3, [r7, #0]
 8004772:	4613      	mov	r3, r2
 8004774:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004776:	2300      	movs	r3, #0
 8004778:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b20      	cmp	r3, #32
 8004784:	d17c      	bne.n	8004880 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d002      	beq.n	8004792 <HAL_UART_Transmit+0x2c>
 800478c:	88fb      	ldrh	r3, [r7, #6]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e075      	b.n	8004882 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800479c:	2b01      	cmp	r3, #1
 800479e:	d101      	bne.n	80047a4 <HAL_UART_Transmit+0x3e>
 80047a0:	2302      	movs	r3, #2
 80047a2:	e06e      	b.n	8004882 <HAL_UART_Transmit+0x11c>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2221      	movs	r2, #33	; 0x21
 80047b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047ba:	f7fd fb93 	bl	8001ee4 <HAL_GetTick>
 80047be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	88fa      	ldrh	r2, [r7, #6]
 80047c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	88fa      	ldrh	r2, [r7, #6]
 80047ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047d4:	d108      	bne.n	80047e8 <HAL_UART_Transmit+0x82>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d104      	bne.n	80047e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80047de:	2300      	movs	r3, #0
 80047e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	61bb      	str	r3, [r7, #24]
 80047e6:	e003      	b.n	80047f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047ec:	2300      	movs	r3, #0
 80047ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80047f8:	e02a      	b.n	8004850 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	2200      	movs	r2, #0
 8004802:	2180      	movs	r1, #128	; 0x80
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f000 f840 	bl	800488a <UART_WaitOnFlagUntilTimeout>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e036      	b.n	8004882 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10b      	bne.n	8004832 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	461a      	mov	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004828:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	3302      	adds	r3, #2
 800482e:	61bb      	str	r3, [r7, #24]
 8004830:	e007      	b.n	8004842 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	781a      	ldrb	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	3301      	adds	r3, #1
 8004840:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004846:	b29b      	uxth	r3, r3
 8004848:	3b01      	subs	r3, #1
 800484a:	b29a      	uxth	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004854:	b29b      	uxth	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1cf      	bne.n	80047fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2200      	movs	r2, #0
 8004862:	2140      	movs	r1, #64	; 0x40
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f000 f810 	bl	800488a <UART_WaitOnFlagUntilTimeout>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e006      	b.n	8004882 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2220      	movs	r2, #32
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800487c:	2300      	movs	r3, #0
 800487e:	e000      	b.n	8004882 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004880:	2302      	movs	r3, #2
  }
}
 8004882:	4618      	mov	r0, r3
 8004884:	3720      	adds	r7, #32
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b090      	sub	sp, #64	; 0x40
 800488e:	af00      	add	r7, sp, #0
 8004890:	60f8      	str	r0, [r7, #12]
 8004892:	60b9      	str	r1, [r7, #8]
 8004894:	603b      	str	r3, [r7, #0]
 8004896:	4613      	mov	r3, r2
 8004898:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800489a:	e050      	b.n	800493e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800489c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800489e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048a2:	d04c      	beq.n	800493e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80048a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d007      	beq.n	80048ba <UART_WaitOnFlagUntilTimeout+0x30>
 80048aa:	f7fd fb1b 	bl	8001ee4 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d241      	bcs.n	800493e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	330c      	adds	r3, #12
 80048c0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c4:	e853 3f00 	ldrex	r3, [r3]
 80048c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	330c      	adds	r3, #12
 80048d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048da:	637a      	str	r2, [r7, #52]	; 0x34
 80048dc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048e2:	e841 2300 	strex	r3, r2, [r1]
 80048e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1e5      	bne.n	80048ba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	3314      	adds	r3, #20
 80048f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	e853 3f00 	ldrex	r3, [r3]
 80048fc:	613b      	str	r3, [r7, #16]
   return(result);
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	f023 0301 	bic.w	r3, r3, #1
 8004904:	63bb      	str	r3, [r7, #56]	; 0x38
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	3314      	adds	r3, #20
 800490c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800490e:	623a      	str	r2, [r7, #32]
 8004910:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004912:	69f9      	ldr	r1, [r7, #28]
 8004914:	6a3a      	ldr	r2, [r7, #32]
 8004916:	e841 2300 	strex	r3, r2, [r1]
 800491a:	61bb      	str	r3, [r7, #24]
   return(result);
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1e5      	bne.n	80048ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2220      	movs	r2, #32
 8004926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2220      	movs	r2, #32
 800492e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e00f      	b.n	800495e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	4013      	ands	r3, r2
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	429a      	cmp	r2, r3
 800494c:	bf0c      	ite	eq
 800494e:	2301      	moveq	r3, #1
 8004950:	2300      	movne	r3, #0
 8004952:	b2db      	uxtb	r3, r3
 8004954:	461a      	mov	r2, r3
 8004956:	79fb      	ldrb	r3, [r7, #7]
 8004958:	429a      	cmp	r2, r3
 800495a:	d09f      	beq.n	800489c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3740      	adds	r7, #64	; 0x40
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
	...

08004968 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800496c:	b0c0      	sub	sp, #256	; 0x100
 800496e:	af00      	add	r7, sp, #0
 8004970:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004984:	68d9      	ldr	r1, [r3, #12]
 8004986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	ea40 0301 	orr.w	r3, r0, r1
 8004990:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004996:	689a      	ldr	r2, [r3, #8]
 8004998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	431a      	orrs	r2, r3
 80049a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	431a      	orrs	r2, r3
 80049a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80049c0:	f021 010c 	bic.w	r1, r1, #12
 80049c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049ce:	430b      	orrs	r3, r1
 80049d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80049de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e2:	6999      	ldr	r1, [r3, #24]
 80049e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	ea40 0301 	orr.w	r3, r0, r1
 80049ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	4b8f      	ldr	r3, [pc, #572]	; (8004c34 <UART_SetConfig+0x2cc>)
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d005      	beq.n	8004a08 <UART_SetConfig+0xa0>
 80049fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	4b8d      	ldr	r3, [pc, #564]	; (8004c38 <UART_SetConfig+0x2d0>)
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d104      	bne.n	8004a12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a08:	f7ff f97e 	bl	8003d08 <HAL_RCC_GetPCLK2Freq>
 8004a0c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004a10:	e003      	b.n	8004a1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a12:	f7ff f965 	bl	8003ce0 <HAL_RCC_GetPCLK1Freq>
 8004a16:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1e:	69db      	ldr	r3, [r3, #28]
 8004a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a24:	f040 810c 	bne.w	8004c40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a32:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004a3a:	4622      	mov	r2, r4
 8004a3c:	462b      	mov	r3, r5
 8004a3e:	1891      	adds	r1, r2, r2
 8004a40:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a42:	415b      	adcs	r3, r3
 8004a44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a4a:	4621      	mov	r1, r4
 8004a4c:	eb12 0801 	adds.w	r8, r2, r1
 8004a50:	4629      	mov	r1, r5
 8004a52:	eb43 0901 	adc.w	r9, r3, r1
 8004a56:	f04f 0200 	mov.w	r2, #0
 8004a5a:	f04f 0300 	mov.w	r3, #0
 8004a5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a6a:	4690      	mov	r8, r2
 8004a6c:	4699      	mov	r9, r3
 8004a6e:	4623      	mov	r3, r4
 8004a70:	eb18 0303 	adds.w	r3, r8, r3
 8004a74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a78:	462b      	mov	r3, r5
 8004a7a:	eb49 0303 	adc.w	r3, r9, r3
 8004a7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a8e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a96:	460b      	mov	r3, r1
 8004a98:	18db      	adds	r3, r3, r3
 8004a9a:	653b      	str	r3, [r7, #80]	; 0x50
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	eb42 0303 	adc.w	r3, r2, r3
 8004aa2:	657b      	str	r3, [r7, #84]	; 0x54
 8004aa4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004aa8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004aac:	f7fc f8ec 	bl	8000c88 <__aeabi_uldivmod>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	4b61      	ldr	r3, [pc, #388]	; (8004c3c <UART_SetConfig+0x2d4>)
 8004ab6:	fba3 2302 	umull	r2, r3, r3, r2
 8004aba:	095b      	lsrs	r3, r3, #5
 8004abc:	011c      	lsls	r4, r3, #4
 8004abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ac8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004acc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ad0:	4642      	mov	r2, r8
 8004ad2:	464b      	mov	r3, r9
 8004ad4:	1891      	adds	r1, r2, r2
 8004ad6:	64b9      	str	r1, [r7, #72]	; 0x48
 8004ad8:	415b      	adcs	r3, r3
 8004ada:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004adc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ae0:	4641      	mov	r1, r8
 8004ae2:	eb12 0a01 	adds.w	sl, r2, r1
 8004ae6:	4649      	mov	r1, r9
 8004ae8:	eb43 0b01 	adc.w	fp, r3, r1
 8004aec:	f04f 0200 	mov.w	r2, #0
 8004af0:	f04f 0300 	mov.w	r3, #0
 8004af4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004af8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004afc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b00:	4692      	mov	sl, r2
 8004b02:	469b      	mov	fp, r3
 8004b04:	4643      	mov	r3, r8
 8004b06:	eb1a 0303 	adds.w	r3, sl, r3
 8004b0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b0e:	464b      	mov	r3, r9
 8004b10:	eb4b 0303 	adc.w	r3, fp, r3
 8004b14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	18db      	adds	r3, r3, r3
 8004b30:	643b      	str	r3, [r7, #64]	; 0x40
 8004b32:	4613      	mov	r3, r2
 8004b34:	eb42 0303 	adc.w	r3, r2, r3
 8004b38:	647b      	str	r3, [r7, #68]	; 0x44
 8004b3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b42:	f7fc f8a1 	bl	8000c88 <__aeabi_uldivmod>
 8004b46:	4602      	mov	r2, r0
 8004b48:	460b      	mov	r3, r1
 8004b4a:	4611      	mov	r1, r2
 8004b4c:	4b3b      	ldr	r3, [pc, #236]	; (8004c3c <UART_SetConfig+0x2d4>)
 8004b4e:	fba3 2301 	umull	r2, r3, r3, r1
 8004b52:	095b      	lsrs	r3, r3, #5
 8004b54:	2264      	movs	r2, #100	; 0x64
 8004b56:	fb02 f303 	mul.w	r3, r2, r3
 8004b5a:	1acb      	subs	r3, r1, r3
 8004b5c:	00db      	lsls	r3, r3, #3
 8004b5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b62:	4b36      	ldr	r3, [pc, #216]	; (8004c3c <UART_SetConfig+0x2d4>)
 8004b64:	fba3 2302 	umull	r2, r3, r3, r2
 8004b68:	095b      	lsrs	r3, r3, #5
 8004b6a:	005b      	lsls	r3, r3, #1
 8004b6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b70:	441c      	add	r4, r3
 8004b72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b76:	2200      	movs	r2, #0
 8004b78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b84:	4642      	mov	r2, r8
 8004b86:	464b      	mov	r3, r9
 8004b88:	1891      	adds	r1, r2, r2
 8004b8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b8c:	415b      	adcs	r3, r3
 8004b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b94:	4641      	mov	r1, r8
 8004b96:	1851      	adds	r1, r2, r1
 8004b98:	6339      	str	r1, [r7, #48]	; 0x30
 8004b9a:	4649      	mov	r1, r9
 8004b9c:	414b      	adcs	r3, r1
 8004b9e:	637b      	str	r3, [r7, #52]	; 0x34
 8004ba0:	f04f 0200 	mov.w	r2, #0
 8004ba4:	f04f 0300 	mov.w	r3, #0
 8004ba8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004bac:	4659      	mov	r1, fp
 8004bae:	00cb      	lsls	r3, r1, #3
 8004bb0:	4651      	mov	r1, sl
 8004bb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bb6:	4651      	mov	r1, sl
 8004bb8:	00ca      	lsls	r2, r1, #3
 8004bba:	4610      	mov	r0, r2
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	4642      	mov	r2, r8
 8004bc2:	189b      	adds	r3, r3, r2
 8004bc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004bc8:	464b      	mov	r3, r9
 8004bca:	460a      	mov	r2, r1
 8004bcc:	eb42 0303 	adc.w	r3, r2, r3
 8004bd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004be0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004be4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004be8:	460b      	mov	r3, r1
 8004bea:	18db      	adds	r3, r3, r3
 8004bec:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bee:	4613      	mov	r3, r2
 8004bf0:	eb42 0303 	adc.w	r3, r2, r3
 8004bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bf6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bfa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004bfe:	f7fc f843 	bl	8000c88 <__aeabi_uldivmod>
 8004c02:	4602      	mov	r2, r0
 8004c04:	460b      	mov	r3, r1
 8004c06:	4b0d      	ldr	r3, [pc, #52]	; (8004c3c <UART_SetConfig+0x2d4>)
 8004c08:	fba3 1302 	umull	r1, r3, r3, r2
 8004c0c:	095b      	lsrs	r3, r3, #5
 8004c0e:	2164      	movs	r1, #100	; 0x64
 8004c10:	fb01 f303 	mul.w	r3, r1, r3
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	00db      	lsls	r3, r3, #3
 8004c18:	3332      	adds	r3, #50	; 0x32
 8004c1a:	4a08      	ldr	r2, [pc, #32]	; (8004c3c <UART_SetConfig+0x2d4>)
 8004c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c20:	095b      	lsrs	r3, r3, #5
 8004c22:	f003 0207 	and.w	r2, r3, #7
 8004c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4422      	add	r2, r4
 8004c2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c30:	e106      	b.n	8004e40 <UART_SetConfig+0x4d8>
 8004c32:	bf00      	nop
 8004c34:	40011000 	.word	0x40011000
 8004c38:	40011400 	.word	0x40011400
 8004c3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c44:	2200      	movs	r2, #0
 8004c46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004c4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004c52:	4642      	mov	r2, r8
 8004c54:	464b      	mov	r3, r9
 8004c56:	1891      	adds	r1, r2, r2
 8004c58:	6239      	str	r1, [r7, #32]
 8004c5a:	415b      	adcs	r3, r3
 8004c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c62:	4641      	mov	r1, r8
 8004c64:	1854      	adds	r4, r2, r1
 8004c66:	4649      	mov	r1, r9
 8004c68:	eb43 0501 	adc.w	r5, r3, r1
 8004c6c:	f04f 0200 	mov.w	r2, #0
 8004c70:	f04f 0300 	mov.w	r3, #0
 8004c74:	00eb      	lsls	r3, r5, #3
 8004c76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c7a:	00e2      	lsls	r2, r4, #3
 8004c7c:	4614      	mov	r4, r2
 8004c7e:	461d      	mov	r5, r3
 8004c80:	4643      	mov	r3, r8
 8004c82:	18e3      	adds	r3, r4, r3
 8004c84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c88:	464b      	mov	r3, r9
 8004c8a:	eb45 0303 	adc.w	r3, r5, r3
 8004c8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ca2:	f04f 0200 	mov.w	r2, #0
 8004ca6:	f04f 0300 	mov.w	r3, #0
 8004caa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004cae:	4629      	mov	r1, r5
 8004cb0:	008b      	lsls	r3, r1, #2
 8004cb2:	4621      	mov	r1, r4
 8004cb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cb8:	4621      	mov	r1, r4
 8004cba:	008a      	lsls	r2, r1, #2
 8004cbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004cc0:	f7fb ffe2 	bl	8000c88 <__aeabi_uldivmod>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	4b60      	ldr	r3, [pc, #384]	; (8004e4c <UART_SetConfig+0x4e4>)
 8004cca:	fba3 2302 	umull	r2, r3, r3, r2
 8004cce:	095b      	lsrs	r3, r3, #5
 8004cd0:	011c      	lsls	r4, r3, #4
 8004cd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004cdc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ce0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ce4:	4642      	mov	r2, r8
 8004ce6:	464b      	mov	r3, r9
 8004ce8:	1891      	adds	r1, r2, r2
 8004cea:	61b9      	str	r1, [r7, #24]
 8004cec:	415b      	adcs	r3, r3
 8004cee:	61fb      	str	r3, [r7, #28]
 8004cf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cf4:	4641      	mov	r1, r8
 8004cf6:	1851      	adds	r1, r2, r1
 8004cf8:	6139      	str	r1, [r7, #16]
 8004cfa:	4649      	mov	r1, r9
 8004cfc:	414b      	adcs	r3, r1
 8004cfe:	617b      	str	r3, [r7, #20]
 8004d00:	f04f 0200 	mov.w	r2, #0
 8004d04:	f04f 0300 	mov.w	r3, #0
 8004d08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d0c:	4659      	mov	r1, fp
 8004d0e:	00cb      	lsls	r3, r1, #3
 8004d10:	4651      	mov	r1, sl
 8004d12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d16:	4651      	mov	r1, sl
 8004d18:	00ca      	lsls	r2, r1, #3
 8004d1a:	4610      	mov	r0, r2
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	4603      	mov	r3, r0
 8004d20:	4642      	mov	r2, r8
 8004d22:	189b      	adds	r3, r3, r2
 8004d24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d28:	464b      	mov	r3, r9
 8004d2a:	460a      	mov	r2, r1
 8004d2c:	eb42 0303 	adc.w	r3, r2, r3
 8004d30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d40:	f04f 0200 	mov.w	r2, #0
 8004d44:	f04f 0300 	mov.w	r3, #0
 8004d48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004d4c:	4649      	mov	r1, r9
 8004d4e:	008b      	lsls	r3, r1, #2
 8004d50:	4641      	mov	r1, r8
 8004d52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d56:	4641      	mov	r1, r8
 8004d58:	008a      	lsls	r2, r1, #2
 8004d5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d5e:	f7fb ff93 	bl	8000c88 <__aeabi_uldivmod>
 8004d62:	4602      	mov	r2, r0
 8004d64:	460b      	mov	r3, r1
 8004d66:	4611      	mov	r1, r2
 8004d68:	4b38      	ldr	r3, [pc, #224]	; (8004e4c <UART_SetConfig+0x4e4>)
 8004d6a:	fba3 2301 	umull	r2, r3, r3, r1
 8004d6e:	095b      	lsrs	r3, r3, #5
 8004d70:	2264      	movs	r2, #100	; 0x64
 8004d72:	fb02 f303 	mul.w	r3, r2, r3
 8004d76:	1acb      	subs	r3, r1, r3
 8004d78:	011b      	lsls	r3, r3, #4
 8004d7a:	3332      	adds	r3, #50	; 0x32
 8004d7c:	4a33      	ldr	r2, [pc, #204]	; (8004e4c <UART_SetConfig+0x4e4>)
 8004d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d82:	095b      	lsrs	r3, r3, #5
 8004d84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d88:	441c      	add	r4, r3
 8004d8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d8e:	2200      	movs	r2, #0
 8004d90:	673b      	str	r3, [r7, #112]	; 0x70
 8004d92:	677a      	str	r2, [r7, #116]	; 0x74
 8004d94:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d98:	4642      	mov	r2, r8
 8004d9a:	464b      	mov	r3, r9
 8004d9c:	1891      	adds	r1, r2, r2
 8004d9e:	60b9      	str	r1, [r7, #8]
 8004da0:	415b      	adcs	r3, r3
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004da8:	4641      	mov	r1, r8
 8004daa:	1851      	adds	r1, r2, r1
 8004dac:	6039      	str	r1, [r7, #0]
 8004dae:	4649      	mov	r1, r9
 8004db0:	414b      	adcs	r3, r1
 8004db2:	607b      	str	r3, [r7, #4]
 8004db4:	f04f 0200 	mov.w	r2, #0
 8004db8:	f04f 0300 	mov.w	r3, #0
 8004dbc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004dc0:	4659      	mov	r1, fp
 8004dc2:	00cb      	lsls	r3, r1, #3
 8004dc4:	4651      	mov	r1, sl
 8004dc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dca:	4651      	mov	r1, sl
 8004dcc:	00ca      	lsls	r2, r1, #3
 8004dce:	4610      	mov	r0, r2
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	4642      	mov	r2, r8
 8004dd6:	189b      	adds	r3, r3, r2
 8004dd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dda:	464b      	mov	r3, r9
 8004ddc:	460a      	mov	r2, r1
 8004dde:	eb42 0303 	adc.w	r3, r2, r3
 8004de2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	663b      	str	r3, [r7, #96]	; 0x60
 8004dee:	667a      	str	r2, [r7, #100]	; 0x64
 8004df0:	f04f 0200 	mov.w	r2, #0
 8004df4:	f04f 0300 	mov.w	r3, #0
 8004df8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004dfc:	4649      	mov	r1, r9
 8004dfe:	008b      	lsls	r3, r1, #2
 8004e00:	4641      	mov	r1, r8
 8004e02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e06:	4641      	mov	r1, r8
 8004e08:	008a      	lsls	r2, r1, #2
 8004e0a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e0e:	f7fb ff3b 	bl	8000c88 <__aeabi_uldivmod>
 8004e12:	4602      	mov	r2, r0
 8004e14:	460b      	mov	r3, r1
 8004e16:	4b0d      	ldr	r3, [pc, #52]	; (8004e4c <UART_SetConfig+0x4e4>)
 8004e18:	fba3 1302 	umull	r1, r3, r3, r2
 8004e1c:	095b      	lsrs	r3, r3, #5
 8004e1e:	2164      	movs	r1, #100	; 0x64
 8004e20:	fb01 f303 	mul.w	r3, r1, r3
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	011b      	lsls	r3, r3, #4
 8004e28:	3332      	adds	r3, #50	; 0x32
 8004e2a:	4a08      	ldr	r2, [pc, #32]	; (8004e4c <UART_SetConfig+0x4e4>)
 8004e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e30:	095b      	lsrs	r3, r3, #5
 8004e32:	f003 020f 	and.w	r2, r3, #15
 8004e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4422      	add	r2, r4
 8004e3e:	609a      	str	r2, [r3, #8]
}
 8004e40:	bf00      	nop
 8004e42:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004e46:	46bd      	mov	sp, r7
 8004e48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e4c:	51eb851f 	.word	0x51eb851f

08004e50 <__cvt>:
 8004e50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e54:	ec55 4b10 	vmov	r4, r5, d0
 8004e58:	2d00      	cmp	r5, #0
 8004e5a:	460e      	mov	r6, r1
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	462b      	mov	r3, r5
 8004e60:	bfbb      	ittet	lt
 8004e62:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004e66:	461d      	movlt	r5, r3
 8004e68:	2300      	movge	r3, #0
 8004e6a:	232d      	movlt	r3, #45	; 0x2d
 8004e6c:	700b      	strb	r3, [r1, #0]
 8004e6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e70:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004e74:	4691      	mov	r9, r2
 8004e76:	f023 0820 	bic.w	r8, r3, #32
 8004e7a:	bfbc      	itt	lt
 8004e7c:	4622      	movlt	r2, r4
 8004e7e:	4614      	movlt	r4, r2
 8004e80:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e84:	d005      	beq.n	8004e92 <__cvt+0x42>
 8004e86:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004e8a:	d100      	bne.n	8004e8e <__cvt+0x3e>
 8004e8c:	3601      	adds	r6, #1
 8004e8e:	2102      	movs	r1, #2
 8004e90:	e000      	b.n	8004e94 <__cvt+0x44>
 8004e92:	2103      	movs	r1, #3
 8004e94:	ab03      	add	r3, sp, #12
 8004e96:	9301      	str	r3, [sp, #4]
 8004e98:	ab02      	add	r3, sp, #8
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	ec45 4b10 	vmov	d0, r4, r5
 8004ea0:	4653      	mov	r3, sl
 8004ea2:	4632      	mov	r2, r6
 8004ea4:	f000 fdec 	bl	8005a80 <_dtoa_r>
 8004ea8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004eac:	4607      	mov	r7, r0
 8004eae:	d102      	bne.n	8004eb6 <__cvt+0x66>
 8004eb0:	f019 0f01 	tst.w	r9, #1
 8004eb4:	d022      	beq.n	8004efc <__cvt+0xac>
 8004eb6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004eba:	eb07 0906 	add.w	r9, r7, r6
 8004ebe:	d110      	bne.n	8004ee2 <__cvt+0x92>
 8004ec0:	783b      	ldrb	r3, [r7, #0]
 8004ec2:	2b30      	cmp	r3, #48	; 0x30
 8004ec4:	d10a      	bne.n	8004edc <__cvt+0x8c>
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	2300      	movs	r3, #0
 8004eca:	4620      	mov	r0, r4
 8004ecc:	4629      	mov	r1, r5
 8004ece:	f7fb fe1b 	bl	8000b08 <__aeabi_dcmpeq>
 8004ed2:	b918      	cbnz	r0, 8004edc <__cvt+0x8c>
 8004ed4:	f1c6 0601 	rsb	r6, r6, #1
 8004ed8:	f8ca 6000 	str.w	r6, [sl]
 8004edc:	f8da 3000 	ldr.w	r3, [sl]
 8004ee0:	4499      	add	r9, r3
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	4620      	mov	r0, r4
 8004ee8:	4629      	mov	r1, r5
 8004eea:	f7fb fe0d 	bl	8000b08 <__aeabi_dcmpeq>
 8004eee:	b108      	cbz	r0, 8004ef4 <__cvt+0xa4>
 8004ef0:	f8cd 900c 	str.w	r9, [sp, #12]
 8004ef4:	2230      	movs	r2, #48	; 0x30
 8004ef6:	9b03      	ldr	r3, [sp, #12]
 8004ef8:	454b      	cmp	r3, r9
 8004efa:	d307      	bcc.n	8004f0c <__cvt+0xbc>
 8004efc:	9b03      	ldr	r3, [sp, #12]
 8004efe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f00:	1bdb      	subs	r3, r3, r7
 8004f02:	4638      	mov	r0, r7
 8004f04:	6013      	str	r3, [r2, #0]
 8004f06:	b004      	add	sp, #16
 8004f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f0c:	1c59      	adds	r1, r3, #1
 8004f0e:	9103      	str	r1, [sp, #12]
 8004f10:	701a      	strb	r2, [r3, #0]
 8004f12:	e7f0      	b.n	8004ef6 <__cvt+0xa6>

08004f14 <__exponent>:
 8004f14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f16:	4603      	mov	r3, r0
 8004f18:	2900      	cmp	r1, #0
 8004f1a:	bfb8      	it	lt
 8004f1c:	4249      	neglt	r1, r1
 8004f1e:	f803 2b02 	strb.w	r2, [r3], #2
 8004f22:	bfb4      	ite	lt
 8004f24:	222d      	movlt	r2, #45	; 0x2d
 8004f26:	222b      	movge	r2, #43	; 0x2b
 8004f28:	2909      	cmp	r1, #9
 8004f2a:	7042      	strb	r2, [r0, #1]
 8004f2c:	dd2a      	ble.n	8004f84 <__exponent+0x70>
 8004f2e:	f10d 0207 	add.w	r2, sp, #7
 8004f32:	4617      	mov	r7, r2
 8004f34:	260a      	movs	r6, #10
 8004f36:	4694      	mov	ip, r2
 8004f38:	fb91 f5f6 	sdiv	r5, r1, r6
 8004f3c:	fb06 1415 	mls	r4, r6, r5, r1
 8004f40:	3430      	adds	r4, #48	; 0x30
 8004f42:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004f46:	460c      	mov	r4, r1
 8004f48:	2c63      	cmp	r4, #99	; 0x63
 8004f4a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8004f4e:	4629      	mov	r1, r5
 8004f50:	dcf1      	bgt.n	8004f36 <__exponent+0x22>
 8004f52:	3130      	adds	r1, #48	; 0x30
 8004f54:	f1ac 0402 	sub.w	r4, ip, #2
 8004f58:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004f5c:	1c41      	adds	r1, r0, #1
 8004f5e:	4622      	mov	r2, r4
 8004f60:	42ba      	cmp	r2, r7
 8004f62:	d30a      	bcc.n	8004f7a <__exponent+0x66>
 8004f64:	f10d 0209 	add.w	r2, sp, #9
 8004f68:	eba2 020c 	sub.w	r2, r2, ip
 8004f6c:	42bc      	cmp	r4, r7
 8004f6e:	bf88      	it	hi
 8004f70:	2200      	movhi	r2, #0
 8004f72:	4413      	add	r3, r2
 8004f74:	1a18      	subs	r0, r3, r0
 8004f76:	b003      	add	sp, #12
 8004f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f7a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004f7e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004f82:	e7ed      	b.n	8004f60 <__exponent+0x4c>
 8004f84:	2330      	movs	r3, #48	; 0x30
 8004f86:	3130      	adds	r1, #48	; 0x30
 8004f88:	7083      	strb	r3, [r0, #2]
 8004f8a:	70c1      	strb	r1, [r0, #3]
 8004f8c:	1d03      	adds	r3, r0, #4
 8004f8e:	e7f1      	b.n	8004f74 <__exponent+0x60>

08004f90 <_printf_float>:
 8004f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f94:	ed2d 8b02 	vpush	{d8}
 8004f98:	b08d      	sub	sp, #52	; 0x34
 8004f9a:	460c      	mov	r4, r1
 8004f9c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004fa0:	4616      	mov	r6, r2
 8004fa2:	461f      	mov	r7, r3
 8004fa4:	4605      	mov	r5, r0
 8004fa6:	f000 fca3 	bl	80058f0 <_localeconv_r>
 8004faa:	f8d0 a000 	ldr.w	sl, [r0]
 8004fae:	4650      	mov	r0, sl
 8004fb0:	f7fb f97e 	bl	80002b0 <strlen>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	930a      	str	r3, [sp, #40]	; 0x28
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	9305      	str	r3, [sp, #20]
 8004fbc:	f8d8 3000 	ldr.w	r3, [r8]
 8004fc0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004fc4:	3307      	adds	r3, #7
 8004fc6:	f023 0307 	bic.w	r3, r3, #7
 8004fca:	f103 0208 	add.w	r2, r3, #8
 8004fce:	f8c8 2000 	str.w	r2, [r8]
 8004fd2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004fd6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004fda:	9307      	str	r3, [sp, #28]
 8004fdc:	f8cd 8018 	str.w	r8, [sp, #24]
 8004fe0:	ee08 0a10 	vmov	s16, r0
 8004fe4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004fe8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fec:	4b9e      	ldr	r3, [pc, #632]	; (8005268 <_printf_float+0x2d8>)
 8004fee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ff2:	f7fb fdbb 	bl	8000b6c <__aeabi_dcmpun>
 8004ff6:	bb88      	cbnz	r0, 800505c <_printf_float+0xcc>
 8004ff8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ffc:	4b9a      	ldr	r3, [pc, #616]	; (8005268 <_printf_float+0x2d8>)
 8004ffe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005002:	f7fb fd95 	bl	8000b30 <__aeabi_dcmple>
 8005006:	bb48      	cbnz	r0, 800505c <_printf_float+0xcc>
 8005008:	2200      	movs	r2, #0
 800500a:	2300      	movs	r3, #0
 800500c:	4640      	mov	r0, r8
 800500e:	4649      	mov	r1, r9
 8005010:	f7fb fd84 	bl	8000b1c <__aeabi_dcmplt>
 8005014:	b110      	cbz	r0, 800501c <_printf_float+0x8c>
 8005016:	232d      	movs	r3, #45	; 0x2d
 8005018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800501c:	4a93      	ldr	r2, [pc, #588]	; (800526c <_printf_float+0x2dc>)
 800501e:	4b94      	ldr	r3, [pc, #592]	; (8005270 <_printf_float+0x2e0>)
 8005020:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005024:	bf94      	ite	ls
 8005026:	4690      	movls	r8, r2
 8005028:	4698      	movhi	r8, r3
 800502a:	2303      	movs	r3, #3
 800502c:	6123      	str	r3, [r4, #16]
 800502e:	9b05      	ldr	r3, [sp, #20]
 8005030:	f023 0304 	bic.w	r3, r3, #4
 8005034:	6023      	str	r3, [r4, #0]
 8005036:	f04f 0900 	mov.w	r9, #0
 800503a:	9700      	str	r7, [sp, #0]
 800503c:	4633      	mov	r3, r6
 800503e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005040:	4621      	mov	r1, r4
 8005042:	4628      	mov	r0, r5
 8005044:	f000 f9da 	bl	80053fc <_printf_common>
 8005048:	3001      	adds	r0, #1
 800504a:	f040 8090 	bne.w	800516e <_printf_float+0x1de>
 800504e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005052:	b00d      	add	sp, #52	; 0x34
 8005054:	ecbd 8b02 	vpop	{d8}
 8005058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800505c:	4642      	mov	r2, r8
 800505e:	464b      	mov	r3, r9
 8005060:	4640      	mov	r0, r8
 8005062:	4649      	mov	r1, r9
 8005064:	f7fb fd82 	bl	8000b6c <__aeabi_dcmpun>
 8005068:	b140      	cbz	r0, 800507c <_printf_float+0xec>
 800506a:	464b      	mov	r3, r9
 800506c:	2b00      	cmp	r3, #0
 800506e:	bfbc      	itt	lt
 8005070:	232d      	movlt	r3, #45	; 0x2d
 8005072:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005076:	4a7f      	ldr	r2, [pc, #508]	; (8005274 <_printf_float+0x2e4>)
 8005078:	4b7f      	ldr	r3, [pc, #508]	; (8005278 <_printf_float+0x2e8>)
 800507a:	e7d1      	b.n	8005020 <_printf_float+0x90>
 800507c:	6863      	ldr	r3, [r4, #4]
 800507e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005082:	9206      	str	r2, [sp, #24]
 8005084:	1c5a      	adds	r2, r3, #1
 8005086:	d13f      	bne.n	8005108 <_printf_float+0x178>
 8005088:	2306      	movs	r3, #6
 800508a:	6063      	str	r3, [r4, #4]
 800508c:	9b05      	ldr	r3, [sp, #20]
 800508e:	6861      	ldr	r1, [r4, #4]
 8005090:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005094:	2300      	movs	r3, #0
 8005096:	9303      	str	r3, [sp, #12]
 8005098:	ab0a      	add	r3, sp, #40	; 0x28
 800509a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800509e:	ab09      	add	r3, sp, #36	; 0x24
 80050a0:	ec49 8b10 	vmov	d0, r8, r9
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	6022      	str	r2, [r4, #0]
 80050a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80050ac:	4628      	mov	r0, r5
 80050ae:	f7ff fecf 	bl	8004e50 <__cvt>
 80050b2:	9b06      	ldr	r3, [sp, #24]
 80050b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050b6:	2b47      	cmp	r3, #71	; 0x47
 80050b8:	4680      	mov	r8, r0
 80050ba:	d108      	bne.n	80050ce <_printf_float+0x13e>
 80050bc:	1cc8      	adds	r0, r1, #3
 80050be:	db02      	blt.n	80050c6 <_printf_float+0x136>
 80050c0:	6863      	ldr	r3, [r4, #4]
 80050c2:	4299      	cmp	r1, r3
 80050c4:	dd41      	ble.n	800514a <_printf_float+0x1ba>
 80050c6:	f1ab 0302 	sub.w	r3, fp, #2
 80050ca:	fa5f fb83 	uxtb.w	fp, r3
 80050ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80050d2:	d820      	bhi.n	8005116 <_printf_float+0x186>
 80050d4:	3901      	subs	r1, #1
 80050d6:	465a      	mov	r2, fp
 80050d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80050dc:	9109      	str	r1, [sp, #36]	; 0x24
 80050de:	f7ff ff19 	bl	8004f14 <__exponent>
 80050e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050e4:	1813      	adds	r3, r2, r0
 80050e6:	2a01      	cmp	r2, #1
 80050e8:	4681      	mov	r9, r0
 80050ea:	6123      	str	r3, [r4, #16]
 80050ec:	dc02      	bgt.n	80050f4 <_printf_float+0x164>
 80050ee:	6822      	ldr	r2, [r4, #0]
 80050f0:	07d2      	lsls	r2, r2, #31
 80050f2:	d501      	bpl.n	80050f8 <_printf_float+0x168>
 80050f4:	3301      	adds	r3, #1
 80050f6:	6123      	str	r3, [r4, #16]
 80050f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d09c      	beq.n	800503a <_printf_float+0xaa>
 8005100:	232d      	movs	r3, #45	; 0x2d
 8005102:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005106:	e798      	b.n	800503a <_printf_float+0xaa>
 8005108:	9a06      	ldr	r2, [sp, #24]
 800510a:	2a47      	cmp	r2, #71	; 0x47
 800510c:	d1be      	bne.n	800508c <_printf_float+0xfc>
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1bc      	bne.n	800508c <_printf_float+0xfc>
 8005112:	2301      	movs	r3, #1
 8005114:	e7b9      	b.n	800508a <_printf_float+0xfa>
 8005116:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800511a:	d118      	bne.n	800514e <_printf_float+0x1be>
 800511c:	2900      	cmp	r1, #0
 800511e:	6863      	ldr	r3, [r4, #4]
 8005120:	dd0b      	ble.n	800513a <_printf_float+0x1aa>
 8005122:	6121      	str	r1, [r4, #16]
 8005124:	b913      	cbnz	r3, 800512c <_printf_float+0x19c>
 8005126:	6822      	ldr	r2, [r4, #0]
 8005128:	07d0      	lsls	r0, r2, #31
 800512a:	d502      	bpl.n	8005132 <_printf_float+0x1a2>
 800512c:	3301      	adds	r3, #1
 800512e:	440b      	add	r3, r1
 8005130:	6123      	str	r3, [r4, #16]
 8005132:	65a1      	str	r1, [r4, #88]	; 0x58
 8005134:	f04f 0900 	mov.w	r9, #0
 8005138:	e7de      	b.n	80050f8 <_printf_float+0x168>
 800513a:	b913      	cbnz	r3, 8005142 <_printf_float+0x1b2>
 800513c:	6822      	ldr	r2, [r4, #0]
 800513e:	07d2      	lsls	r2, r2, #31
 8005140:	d501      	bpl.n	8005146 <_printf_float+0x1b6>
 8005142:	3302      	adds	r3, #2
 8005144:	e7f4      	b.n	8005130 <_printf_float+0x1a0>
 8005146:	2301      	movs	r3, #1
 8005148:	e7f2      	b.n	8005130 <_printf_float+0x1a0>
 800514a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800514e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005150:	4299      	cmp	r1, r3
 8005152:	db05      	blt.n	8005160 <_printf_float+0x1d0>
 8005154:	6823      	ldr	r3, [r4, #0]
 8005156:	6121      	str	r1, [r4, #16]
 8005158:	07d8      	lsls	r0, r3, #31
 800515a:	d5ea      	bpl.n	8005132 <_printf_float+0x1a2>
 800515c:	1c4b      	adds	r3, r1, #1
 800515e:	e7e7      	b.n	8005130 <_printf_float+0x1a0>
 8005160:	2900      	cmp	r1, #0
 8005162:	bfd4      	ite	le
 8005164:	f1c1 0202 	rsble	r2, r1, #2
 8005168:	2201      	movgt	r2, #1
 800516a:	4413      	add	r3, r2
 800516c:	e7e0      	b.n	8005130 <_printf_float+0x1a0>
 800516e:	6823      	ldr	r3, [r4, #0]
 8005170:	055a      	lsls	r2, r3, #21
 8005172:	d407      	bmi.n	8005184 <_printf_float+0x1f4>
 8005174:	6923      	ldr	r3, [r4, #16]
 8005176:	4642      	mov	r2, r8
 8005178:	4631      	mov	r1, r6
 800517a:	4628      	mov	r0, r5
 800517c:	47b8      	blx	r7
 800517e:	3001      	adds	r0, #1
 8005180:	d12c      	bne.n	80051dc <_printf_float+0x24c>
 8005182:	e764      	b.n	800504e <_printf_float+0xbe>
 8005184:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005188:	f240 80e0 	bls.w	800534c <_printf_float+0x3bc>
 800518c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005190:	2200      	movs	r2, #0
 8005192:	2300      	movs	r3, #0
 8005194:	f7fb fcb8 	bl	8000b08 <__aeabi_dcmpeq>
 8005198:	2800      	cmp	r0, #0
 800519a:	d034      	beq.n	8005206 <_printf_float+0x276>
 800519c:	4a37      	ldr	r2, [pc, #220]	; (800527c <_printf_float+0x2ec>)
 800519e:	2301      	movs	r3, #1
 80051a0:	4631      	mov	r1, r6
 80051a2:	4628      	mov	r0, r5
 80051a4:	47b8      	blx	r7
 80051a6:	3001      	adds	r0, #1
 80051a8:	f43f af51 	beq.w	800504e <_printf_float+0xbe>
 80051ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051b0:	429a      	cmp	r2, r3
 80051b2:	db02      	blt.n	80051ba <_printf_float+0x22a>
 80051b4:	6823      	ldr	r3, [r4, #0]
 80051b6:	07d8      	lsls	r0, r3, #31
 80051b8:	d510      	bpl.n	80051dc <_printf_float+0x24c>
 80051ba:	ee18 3a10 	vmov	r3, s16
 80051be:	4652      	mov	r2, sl
 80051c0:	4631      	mov	r1, r6
 80051c2:	4628      	mov	r0, r5
 80051c4:	47b8      	blx	r7
 80051c6:	3001      	adds	r0, #1
 80051c8:	f43f af41 	beq.w	800504e <_printf_float+0xbe>
 80051cc:	f04f 0800 	mov.w	r8, #0
 80051d0:	f104 091a 	add.w	r9, r4, #26
 80051d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051d6:	3b01      	subs	r3, #1
 80051d8:	4543      	cmp	r3, r8
 80051da:	dc09      	bgt.n	80051f0 <_printf_float+0x260>
 80051dc:	6823      	ldr	r3, [r4, #0]
 80051de:	079b      	lsls	r3, r3, #30
 80051e0:	f100 8107 	bmi.w	80053f2 <_printf_float+0x462>
 80051e4:	68e0      	ldr	r0, [r4, #12]
 80051e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051e8:	4298      	cmp	r0, r3
 80051ea:	bfb8      	it	lt
 80051ec:	4618      	movlt	r0, r3
 80051ee:	e730      	b.n	8005052 <_printf_float+0xc2>
 80051f0:	2301      	movs	r3, #1
 80051f2:	464a      	mov	r2, r9
 80051f4:	4631      	mov	r1, r6
 80051f6:	4628      	mov	r0, r5
 80051f8:	47b8      	blx	r7
 80051fa:	3001      	adds	r0, #1
 80051fc:	f43f af27 	beq.w	800504e <_printf_float+0xbe>
 8005200:	f108 0801 	add.w	r8, r8, #1
 8005204:	e7e6      	b.n	80051d4 <_printf_float+0x244>
 8005206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005208:	2b00      	cmp	r3, #0
 800520a:	dc39      	bgt.n	8005280 <_printf_float+0x2f0>
 800520c:	4a1b      	ldr	r2, [pc, #108]	; (800527c <_printf_float+0x2ec>)
 800520e:	2301      	movs	r3, #1
 8005210:	4631      	mov	r1, r6
 8005212:	4628      	mov	r0, r5
 8005214:	47b8      	blx	r7
 8005216:	3001      	adds	r0, #1
 8005218:	f43f af19 	beq.w	800504e <_printf_float+0xbe>
 800521c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005220:	4313      	orrs	r3, r2
 8005222:	d102      	bne.n	800522a <_printf_float+0x29a>
 8005224:	6823      	ldr	r3, [r4, #0]
 8005226:	07d9      	lsls	r1, r3, #31
 8005228:	d5d8      	bpl.n	80051dc <_printf_float+0x24c>
 800522a:	ee18 3a10 	vmov	r3, s16
 800522e:	4652      	mov	r2, sl
 8005230:	4631      	mov	r1, r6
 8005232:	4628      	mov	r0, r5
 8005234:	47b8      	blx	r7
 8005236:	3001      	adds	r0, #1
 8005238:	f43f af09 	beq.w	800504e <_printf_float+0xbe>
 800523c:	f04f 0900 	mov.w	r9, #0
 8005240:	f104 0a1a 	add.w	sl, r4, #26
 8005244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005246:	425b      	negs	r3, r3
 8005248:	454b      	cmp	r3, r9
 800524a:	dc01      	bgt.n	8005250 <_printf_float+0x2c0>
 800524c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800524e:	e792      	b.n	8005176 <_printf_float+0x1e6>
 8005250:	2301      	movs	r3, #1
 8005252:	4652      	mov	r2, sl
 8005254:	4631      	mov	r1, r6
 8005256:	4628      	mov	r0, r5
 8005258:	47b8      	blx	r7
 800525a:	3001      	adds	r0, #1
 800525c:	f43f aef7 	beq.w	800504e <_printf_float+0xbe>
 8005260:	f109 0901 	add.w	r9, r9, #1
 8005264:	e7ee      	b.n	8005244 <_printf_float+0x2b4>
 8005266:	bf00      	nop
 8005268:	7fefffff 	.word	0x7fefffff
 800526c:	08007c48 	.word	0x08007c48
 8005270:	08007c4c 	.word	0x08007c4c
 8005274:	08007c50 	.word	0x08007c50
 8005278:	08007c54 	.word	0x08007c54
 800527c:	08007c58 	.word	0x08007c58
 8005280:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005282:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005284:	429a      	cmp	r2, r3
 8005286:	bfa8      	it	ge
 8005288:	461a      	movge	r2, r3
 800528a:	2a00      	cmp	r2, #0
 800528c:	4691      	mov	r9, r2
 800528e:	dc37      	bgt.n	8005300 <_printf_float+0x370>
 8005290:	f04f 0b00 	mov.w	fp, #0
 8005294:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005298:	f104 021a 	add.w	r2, r4, #26
 800529c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800529e:	9305      	str	r3, [sp, #20]
 80052a0:	eba3 0309 	sub.w	r3, r3, r9
 80052a4:	455b      	cmp	r3, fp
 80052a6:	dc33      	bgt.n	8005310 <_printf_float+0x380>
 80052a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052ac:	429a      	cmp	r2, r3
 80052ae:	db3b      	blt.n	8005328 <_printf_float+0x398>
 80052b0:	6823      	ldr	r3, [r4, #0]
 80052b2:	07da      	lsls	r2, r3, #31
 80052b4:	d438      	bmi.n	8005328 <_printf_float+0x398>
 80052b6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80052ba:	eba2 0903 	sub.w	r9, r2, r3
 80052be:	9b05      	ldr	r3, [sp, #20]
 80052c0:	1ad2      	subs	r2, r2, r3
 80052c2:	4591      	cmp	r9, r2
 80052c4:	bfa8      	it	ge
 80052c6:	4691      	movge	r9, r2
 80052c8:	f1b9 0f00 	cmp.w	r9, #0
 80052cc:	dc35      	bgt.n	800533a <_printf_float+0x3aa>
 80052ce:	f04f 0800 	mov.w	r8, #0
 80052d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052d6:	f104 0a1a 	add.w	sl, r4, #26
 80052da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052de:	1a9b      	subs	r3, r3, r2
 80052e0:	eba3 0309 	sub.w	r3, r3, r9
 80052e4:	4543      	cmp	r3, r8
 80052e6:	f77f af79 	ble.w	80051dc <_printf_float+0x24c>
 80052ea:	2301      	movs	r3, #1
 80052ec:	4652      	mov	r2, sl
 80052ee:	4631      	mov	r1, r6
 80052f0:	4628      	mov	r0, r5
 80052f2:	47b8      	blx	r7
 80052f4:	3001      	adds	r0, #1
 80052f6:	f43f aeaa 	beq.w	800504e <_printf_float+0xbe>
 80052fa:	f108 0801 	add.w	r8, r8, #1
 80052fe:	e7ec      	b.n	80052da <_printf_float+0x34a>
 8005300:	4613      	mov	r3, r2
 8005302:	4631      	mov	r1, r6
 8005304:	4642      	mov	r2, r8
 8005306:	4628      	mov	r0, r5
 8005308:	47b8      	blx	r7
 800530a:	3001      	adds	r0, #1
 800530c:	d1c0      	bne.n	8005290 <_printf_float+0x300>
 800530e:	e69e      	b.n	800504e <_printf_float+0xbe>
 8005310:	2301      	movs	r3, #1
 8005312:	4631      	mov	r1, r6
 8005314:	4628      	mov	r0, r5
 8005316:	9205      	str	r2, [sp, #20]
 8005318:	47b8      	blx	r7
 800531a:	3001      	adds	r0, #1
 800531c:	f43f ae97 	beq.w	800504e <_printf_float+0xbe>
 8005320:	9a05      	ldr	r2, [sp, #20]
 8005322:	f10b 0b01 	add.w	fp, fp, #1
 8005326:	e7b9      	b.n	800529c <_printf_float+0x30c>
 8005328:	ee18 3a10 	vmov	r3, s16
 800532c:	4652      	mov	r2, sl
 800532e:	4631      	mov	r1, r6
 8005330:	4628      	mov	r0, r5
 8005332:	47b8      	blx	r7
 8005334:	3001      	adds	r0, #1
 8005336:	d1be      	bne.n	80052b6 <_printf_float+0x326>
 8005338:	e689      	b.n	800504e <_printf_float+0xbe>
 800533a:	9a05      	ldr	r2, [sp, #20]
 800533c:	464b      	mov	r3, r9
 800533e:	4442      	add	r2, r8
 8005340:	4631      	mov	r1, r6
 8005342:	4628      	mov	r0, r5
 8005344:	47b8      	blx	r7
 8005346:	3001      	adds	r0, #1
 8005348:	d1c1      	bne.n	80052ce <_printf_float+0x33e>
 800534a:	e680      	b.n	800504e <_printf_float+0xbe>
 800534c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800534e:	2a01      	cmp	r2, #1
 8005350:	dc01      	bgt.n	8005356 <_printf_float+0x3c6>
 8005352:	07db      	lsls	r3, r3, #31
 8005354:	d53a      	bpl.n	80053cc <_printf_float+0x43c>
 8005356:	2301      	movs	r3, #1
 8005358:	4642      	mov	r2, r8
 800535a:	4631      	mov	r1, r6
 800535c:	4628      	mov	r0, r5
 800535e:	47b8      	blx	r7
 8005360:	3001      	adds	r0, #1
 8005362:	f43f ae74 	beq.w	800504e <_printf_float+0xbe>
 8005366:	ee18 3a10 	vmov	r3, s16
 800536a:	4652      	mov	r2, sl
 800536c:	4631      	mov	r1, r6
 800536e:	4628      	mov	r0, r5
 8005370:	47b8      	blx	r7
 8005372:	3001      	adds	r0, #1
 8005374:	f43f ae6b 	beq.w	800504e <_printf_float+0xbe>
 8005378:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800537c:	2200      	movs	r2, #0
 800537e:	2300      	movs	r3, #0
 8005380:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005384:	f7fb fbc0 	bl	8000b08 <__aeabi_dcmpeq>
 8005388:	b9d8      	cbnz	r0, 80053c2 <_printf_float+0x432>
 800538a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800538e:	f108 0201 	add.w	r2, r8, #1
 8005392:	4631      	mov	r1, r6
 8005394:	4628      	mov	r0, r5
 8005396:	47b8      	blx	r7
 8005398:	3001      	adds	r0, #1
 800539a:	d10e      	bne.n	80053ba <_printf_float+0x42a>
 800539c:	e657      	b.n	800504e <_printf_float+0xbe>
 800539e:	2301      	movs	r3, #1
 80053a0:	4652      	mov	r2, sl
 80053a2:	4631      	mov	r1, r6
 80053a4:	4628      	mov	r0, r5
 80053a6:	47b8      	blx	r7
 80053a8:	3001      	adds	r0, #1
 80053aa:	f43f ae50 	beq.w	800504e <_printf_float+0xbe>
 80053ae:	f108 0801 	add.w	r8, r8, #1
 80053b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053b4:	3b01      	subs	r3, #1
 80053b6:	4543      	cmp	r3, r8
 80053b8:	dcf1      	bgt.n	800539e <_printf_float+0x40e>
 80053ba:	464b      	mov	r3, r9
 80053bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80053c0:	e6da      	b.n	8005178 <_printf_float+0x1e8>
 80053c2:	f04f 0800 	mov.w	r8, #0
 80053c6:	f104 0a1a 	add.w	sl, r4, #26
 80053ca:	e7f2      	b.n	80053b2 <_printf_float+0x422>
 80053cc:	2301      	movs	r3, #1
 80053ce:	4642      	mov	r2, r8
 80053d0:	e7df      	b.n	8005392 <_printf_float+0x402>
 80053d2:	2301      	movs	r3, #1
 80053d4:	464a      	mov	r2, r9
 80053d6:	4631      	mov	r1, r6
 80053d8:	4628      	mov	r0, r5
 80053da:	47b8      	blx	r7
 80053dc:	3001      	adds	r0, #1
 80053de:	f43f ae36 	beq.w	800504e <_printf_float+0xbe>
 80053e2:	f108 0801 	add.w	r8, r8, #1
 80053e6:	68e3      	ldr	r3, [r4, #12]
 80053e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80053ea:	1a5b      	subs	r3, r3, r1
 80053ec:	4543      	cmp	r3, r8
 80053ee:	dcf0      	bgt.n	80053d2 <_printf_float+0x442>
 80053f0:	e6f8      	b.n	80051e4 <_printf_float+0x254>
 80053f2:	f04f 0800 	mov.w	r8, #0
 80053f6:	f104 0919 	add.w	r9, r4, #25
 80053fa:	e7f4      	b.n	80053e6 <_printf_float+0x456>

080053fc <_printf_common>:
 80053fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005400:	4616      	mov	r6, r2
 8005402:	4699      	mov	r9, r3
 8005404:	688a      	ldr	r2, [r1, #8]
 8005406:	690b      	ldr	r3, [r1, #16]
 8005408:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800540c:	4293      	cmp	r3, r2
 800540e:	bfb8      	it	lt
 8005410:	4613      	movlt	r3, r2
 8005412:	6033      	str	r3, [r6, #0]
 8005414:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005418:	4607      	mov	r7, r0
 800541a:	460c      	mov	r4, r1
 800541c:	b10a      	cbz	r2, 8005422 <_printf_common+0x26>
 800541e:	3301      	adds	r3, #1
 8005420:	6033      	str	r3, [r6, #0]
 8005422:	6823      	ldr	r3, [r4, #0]
 8005424:	0699      	lsls	r1, r3, #26
 8005426:	bf42      	ittt	mi
 8005428:	6833      	ldrmi	r3, [r6, #0]
 800542a:	3302      	addmi	r3, #2
 800542c:	6033      	strmi	r3, [r6, #0]
 800542e:	6825      	ldr	r5, [r4, #0]
 8005430:	f015 0506 	ands.w	r5, r5, #6
 8005434:	d106      	bne.n	8005444 <_printf_common+0x48>
 8005436:	f104 0a19 	add.w	sl, r4, #25
 800543a:	68e3      	ldr	r3, [r4, #12]
 800543c:	6832      	ldr	r2, [r6, #0]
 800543e:	1a9b      	subs	r3, r3, r2
 8005440:	42ab      	cmp	r3, r5
 8005442:	dc26      	bgt.n	8005492 <_printf_common+0x96>
 8005444:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005448:	1e13      	subs	r3, r2, #0
 800544a:	6822      	ldr	r2, [r4, #0]
 800544c:	bf18      	it	ne
 800544e:	2301      	movne	r3, #1
 8005450:	0692      	lsls	r2, r2, #26
 8005452:	d42b      	bmi.n	80054ac <_printf_common+0xb0>
 8005454:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005458:	4649      	mov	r1, r9
 800545a:	4638      	mov	r0, r7
 800545c:	47c0      	blx	r8
 800545e:	3001      	adds	r0, #1
 8005460:	d01e      	beq.n	80054a0 <_printf_common+0xa4>
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	6922      	ldr	r2, [r4, #16]
 8005466:	f003 0306 	and.w	r3, r3, #6
 800546a:	2b04      	cmp	r3, #4
 800546c:	bf02      	ittt	eq
 800546e:	68e5      	ldreq	r5, [r4, #12]
 8005470:	6833      	ldreq	r3, [r6, #0]
 8005472:	1aed      	subeq	r5, r5, r3
 8005474:	68a3      	ldr	r3, [r4, #8]
 8005476:	bf0c      	ite	eq
 8005478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800547c:	2500      	movne	r5, #0
 800547e:	4293      	cmp	r3, r2
 8005480:	bfc4      	itt	gt
 8005482:	1a9b      	subgt	r3, r3, r2
 8005484:	18ed      	addgt	r5, r5, r3
 8005486:	2600      	movs	r6, #0
 8005488:	341a      	adds	r4, #26
 800548a:	42b5      	cmp	r5, r6
 800548c:	d11a      	bne.n	80054c4 <_printf_common+0xc8>
 800548e:	2000      	movs	r0, #0
 8005490:	e008      	b.n	80054a4 <_printf_common+0xa8>
 8005492:	2301      	movs	r3, #1
 8005494:	4652      	mov	r2, sl
 8005496:	4649      	mov	r1, r9
 8005498:	4638      	mov	r0, r7
 800549a:	47c0      	blx	r8
 800549c:	3001      	adds	r0, #1
 800549e:	d103      	bne.n	80054a8 <_printf_common+0xac>
 80054a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054a8:	3501      	adds	r5, #1
 80054aa:	e7c6      	b.n	800543a <_printf_common+0x3e>
 80054ac:	18e1      	adds	r1, r4, r3
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	2030      	movs	r0, #48	; 0x30
 80054b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054b6:	4422      	add	r2, r4
 80054b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054c0:	3302      	adds	r3, #2
 80054c2:	e7c7      	b.n	8005454 <_printf_common+0x58>
 80054c4:	2301      	movs	r3, #1
 80054c6:	4622      	mov	r2, r4
 80054c8:	4649      	mov	r1, r9
 80054ca:	4638      	mov	r0, r7
 80054cc:	47c0      	blx	r8
 80054ce:	3001      	adds	r0, #1
 80054d0:	d0e6      	beq.n	80054a0 <_printf_common+0xa4>
 80054d2:	3601      	adds	r6, #1
 80054d4:	e7d9      	b.n	800548a <_printf_common+0x8e>
	...

080054d8 <_printf_i>:
 80054d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054dc:	7e0f      	ldrb	r7, [r1, #24]
 80054de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054e0:	2f78      	cmp	r7, #120	; 0x78
 80054e2:	4691      	mov	r9, r2
 80054e4:	4680      	mov	r8, r0
 80054e6:	460c      	mov	r4, r1
 80054e8:	469a      	mov	sl, r3
 80054ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80054ee:	d807      	bhi.n	8005500 <_printf_i+0x28>
 80054f0:	2f62      	cmp	r7, #98	; 0x62
 80054f2:	d80a      	bhi.n	800550a <_printf_i+0x32>
 80054f4:	2f00      	cmp	r7, #0
 80054f6:	f000 80d4 	beq.w	80056a2 <_printf_i+0x1ca>
 80054fa:	2f58      	cmp	r7, #88	; 0x58
 80054fc:	f000 80c0 	beq.w	8005680 <_printf_i+0x1a8>
 8005500:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005504:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005508:	e03a      	b.n	8005580 <_printf_i+0xa8>
 800550a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800550e:	2b15      	cmp	r3, #21
 8005510:	d8f6      	bhi.n	8005500 <_printf_i+0x28>
 8005512:	a101      	add	r1, pc, #4	; (adr r1, 8005518 <_printf_i+0x40>)
 8005514:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005518:	08005571 	.word	0x08005571
 800551c:	08005585 	.word	0x08005585
 8005520:	08005501 	.word	0x08005501
 8005524:	08005501 	.word	0x08005501
 8005528:	08005501 	.word	0x08005501
 800552c:	08005501 	.word	0x08005501
 8005530:	08005585 	.word	0x08005585
 8005534:	08005501 	.word	0x08005501
 8005538:	08005501 	.word	0x08005501
 800553c:	08005501 	.word	0x08005501
 8005540:	08005501 	.word	0x08005501
 8005544:	08005689 	.word	0x08005689
 8005548:	080055b1 	.word	0x080055b1
 800554c:	08005643 	.word	0x08005643
 8005550:	08005501 	.word	0x08005501
 8005554:	08005501 	.word	0x08005501
 8005558:	080056ab 	.word	0x080056ab
 800555c:	08005501 	.word	0x08005501
 8005560:	080055b1 	.word	0x080055b1
 8005564:	08005501 	.word	0x08005501
 8005568:	08005501 	.word	0x08005501
 800556c:	0800564b 	.word	0x0800564b
 8005570:	682b      	ldr	r3, [r5, #0]
 8005572:	1d1a      	adds	r2, r3, #4
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	602a      	str	r2, [r5, #0]
 8005578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800557c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005580:	2301      	movs	r3, #1
 8005582:	e09f      	b.n	80056c4 <_printf_i+0x1ec>
 8005584:	6820      	ldr	r0, [r4, #0]
 8005586:	682b      	ldr	r3, [r5, #0]
 8005588:	0607      	lsls	r7, r0, #24
 800558a:	f103 0104 	add.w	r1, r3, #4
 800558e:	6029      	str	r1, [r5, #0]
 8005590:	d501      	bpl.n	8005596 <_printf_i+0xbe>
 8005592:	681e      	ldr	r6, [r3, #0]
 8005594:	e003      	b.n	800559e <_printf_i+0xc6>
 8005596:	0646      	lsls	r6, r0, #25
 8005598:	d5fb      	bpl.n	8005592 <_printf_i+0xba>
 800559a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800559e:	2e00      	cmp	r6, #0
 80055a0:	da03      	bge.n	80055aa <_printf_i+0xd2>
 80055a2:	232d      	movs	r3, #45	; 0x2d
 80055a4:	4276      	negs	r6, r6
 80055a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055aa:	485a      	ldr	r0, [pc, #360]	; (8005714 <_printf_i+0x23c>)
 80055ac:	230a      	movs	r3, #10
 80055ae:	e012      	b.n	80055d6 <_printf_i+0xfe>
 80055b0:	682b      	ldr	r3, [r5, #0]
 80055b2:	6820      	ldr	r0, [r4, #0]
 80055b4:	1d19      	adds	r1, r3, #4
 80055b6:	6029      	str	r1, [r5, #0]
 80055b8:	0605      	lsls	r5, r0, #24
 80055ba:	d501      	bpl.n	80055c0 <_printf_i+0xe8>
 80055bc:	681e      	ldr	r6, [r3, #0]
 80055be:	e002      	b.n	80055c6 <_printf_i+0xee>
 80055c0:	0641      	lsls	r1, r0, #25
 80055c2:	d5fb      	bpl.n	80055bc <_printf_i+0xe4>
 80055c4:	881e      	ldrh	r6, [r3, #0]
 80055c6:	4853      	ldr	r0, [pc, #332]	; (8005714 <_printf_i+0x23c>)
 80055c8:	2f6f      	cmp	r7, #111	; 0x6f
 80055ca:	bf0c      	ite	eq
 80055cc:	2308      	moveq	r3, #8
 80055ce:	230a      	movne	r3, #10
 80055d0:	2100      	movs	r1, #0
 80055d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055d6:	6865      	ldr	r5, [r4, #4]
 80055d8:	60a5      	str	r5, [r4, #8]
 80055da:	2d00      	cmp	r5, #0
 80055dc:	bfa2      	ittt	ge
 80055de:	6821      	ldrge	r1, [r4, #0]
 80055e0:	f021 0104 	bicge.w	r1, r1, #4
 80055e4:	6021      	strge	r1, [r4, #0]
 80055e6:	b90e      	cbnz	r6, 80055ec <_printf_i+0x114>
 80055e8:	2d00      	cmp	r5, #0
 80055ea:	d04b      	beq.n	8005684 <_printf_i+0x1ac>
 80055ec:	4615      	mov	r5, r2
 80055ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80055f2:	fb03 6711 	mls	r7, r3, r1, r6
 80055f6:	5dc7      	ldrb	r7, [r0, r7]
 80055f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80055fc:	4637      	mov	r7, r6
 80055fe:	42bb      	cmp	r3, r7
 8005600:	460e      	mov	r6, r1
 8005602:	d9f4      	bls.n	80055ee <_printf_i+0x116>
 8005604:	2b08      	cmp	r3, #8
 8005606:	d10b      	bne.n	8005620 <_printf_i+0x148>
 8005608:	6823      	ldr	r3, [r4, #0]
 800560a:	07de      	lsls	r6, r3, #31
 800560c:	d508      	bpl.n	8005620 <_printf_i+0x148>
 800560e:	6923      	ldr	r3, [r4, #16]
 8005610:	6861      	ldr	r1, [r4, #4]
 8005612:	4299      	cmp	r1, r3
 8005614:	bfde      	ittt	le
 8005616:	2330      	movle	r3, #48	; 0x30
 8005618:	f805 3c01 	strble.w	r3, [r5, #-1]
 800561c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005620:	1b52      	subs	r2, r2, r5
 8005622:	6122      	str	r2, [r4, #16]
 8005624:	f8cd a000 	str.w	sl, [sp]
 8005628:	464b      	mov	r3, r9
 800562a:	aa03      	add	r2, sp, #12
 800562c:	4621      	mov	r1, r4
 800562e:	4640      	mov	r0, r8
 8005630:	f7ff fee4 	bl	80053fc <_printf_common>
 8005634:	3001      	adds	r0, #1
 8005636:	d14a      	bne.n	80056ce <_printf_i+0x1f6>
 8005638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800563c:	b004      	add	sp, #16
 800563e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005642:	6823      	ldr	r3, [r4, #0]
 8005644:	f043 0320 	orr.w	r3, r3, #32
 8005648:	6023      	str	r3, [r4, #0]
 800564a:	4833      	ldr	r0, [pc, #204]	; (8005718 <_printf_i+0x240>)
 800564c:	2778      	movs	r7, #120	; 0x78
 800564e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005652:	6823      	ldr	r3, [r4, #0]
 8005654:	6829      	ldr	r1, [r5, #0]
 8005656:	061f      	lsls	r7, r3, #24
 8005658:	f851 6b04 	ldr.w	r6, [r1], #4
 800565c:	d402      	bmi.n	8005664 <_printf_i+0x18c>
 800565e:	065f      	lsls	r7, r3, #25
 8005660:	bf48      	it	mi
 8005662:	b2b6      	uxthmi	r6, r6
 8005664:	07df      	lsls	r7, r3, #31
 8005666:	bf48      	it	mi
 8005668:	f043 0320 	orrmi.w	r3, r3, #32
 800566c:	6029      	str	r1, [r5, #0]
 800566e:	bf48      	it	mi
 8005670:	6023      	strmi	r3, [r4, #0]
 8005672:	b91e      	cbnz	r6, 800567c <_printf_i+0x1a4>
 8005674:	6823      	ldr	r3, [r4, #0]
 8005676:	f023 0320 	bic.w	r3, r3, #32
 800567a:	6023      	str	r3, [r4, #0]
 800567c:	2310      	movs	r3, #16
 800567e:	e7a7      	b.n	80055d0 <_printf_i+0xf8>
 8005680:	4824      	ldr	r0, [pc, #144]	; (8005714 <_printf_i+0x23c>)
 8005682:	e7e4      	b.n	800564e <_printf_i+0x176>
 8005684:	4615      	mov	r5, r2
 8005686:	e7bd      	b.n	8005604 <_printf_i+0x12c>
 8005688:	682b      	ldr	r3, [r5, #0]
 800568a:	6826      	ldr	r6, [r4, #0]
 800568c:	6961      	ldr	r1, [r4, #20]
 800568e:	1d18      	adds	r0, r3, #4
 8005690:	6028      	str	r0, [r5, #0]
 8005692:	0635      	lsls	r5, r6, #24
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	d501      	bpl.n	800569c <_printf_i+0x1c4>
 8005698:	6019      	str	r1, [r3, #0]
 800569a:	e002      	b.n	80056a2 <_printf_i+0x1ca>
 800569c:	0670      	lsls	r0, r6, #25
 800569e:	d5fb      	bpl.n	8005698 <_printf_i+0x1c0>
 80056a0:	8019      	strh	r1, [r3, #0]
 80056a2:	2300      	movs	r3, #0
 80056a4:	6123      	str	r3, [r4, #16]
 80056a6:	4615      	mov	r5, r2
 80056a8:	e7bc      	b.n	8005624 <_printf_i+0x14c>
 80056aa:	682b      	ldr	r3, [r5, #0]
 80056ac:	1d1a      	adds	r2, r3, #4
 80056ae:	602a      	str	r2, [r5, #0]
 80056b0:	681d      	ldr	r5, [r3, #0]
 80056b2:	6862      	ldr	r2, [r4, #4]
 80056b4:	2100      	movs	r1, #0
 80056b6:	4628      	mov	r0, r5
 80056b8:	f7fa fdaa 	bl	8000210 <memchr>
 80056bc:	b108      	cbz	r0, 80056c2 <_printf_i+0x1ea>
 80056be:	1b40      	subs	r0, r0, r5
 80056c0:	6060      	str	r0, [r4, #4]
 80056c2:	6863      	ldr	r3, [r4, #4]
 80056c4:	6123      	str	r3, [r4, #16]
 80056c6:	2300      	movs	r3, #0
 80056c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056cc:	e7aa      	b.n	8005624 <_printf_i+0x14c>
 80056ce:	6923      	ldr	r3, [r4, #16]
 80056d0:	462a      	mov	r2, r5
 80056d2:	4649      	mov	r1, r9
 80056d4:	4640      	mov	r0, r8
 80056d6:	47d0      	blx	sl
 80056d8:	3001      	adds	r0, #1
 80056da:	d0ad      	beq.n	8005638 <_printf_i+0x160>
 80056dc:	6823      	ldr	r3, [r4, #0]
 80056de:	079b      	lsls	r3, r3, #30
 80056e0:	d413      	bmi.n	800570a <_printf_i+0x232>
 80056e2:	68e0      	ldr	r0, [r4, #12]
 80056e4:	9b03      	ldr	r3, [sp, #12]
 80056e6:	4298      	cmp	r0, r3
 80056e8:	bfb8      	it	lt
 80056ea:	4618      	movlt	r0, r3
 80056ec:	e7a6      	b.n	800563c <_printf_i+0x164>
 80056ee:	2301      	movs	r3, #1
 80056f0:	4632      	mov	r2, r6
 80056f2:	4649      	mov	r1, r9
 80056f4:	4640      	mov	r0, r8
 80056f6:	47d0      	blx	sl
 80056f8:	3001      	adds	r0, #1
 80056fa:	d09d      	beq.n	8005638 <_printf_i+0x160>
 80056fc:	3501      	adds	r5, #1
 80056fe:	68e3      	ldr	r3, [r4, #12]
 8005700:	9903      	ldr	r1, [sp, #12]
 8005702:	1a5b      	subs	r3, r3, r1
 8005704:	42ab      	cmp	r3, r5
 8005706:	dcf2      	bgt.n	80056ee <_printf_i+0x216>
 8005708:	e7eb      	b.n	80056e2 <_printf_i+0x20a>
 800570a:	2500      	movs	r5, #0
 800570c:	f104 0619 	add.w	r6, r4, #25
 8005710:	e7f5      	b.n	80056fe <_printf_i+0x226>
 8005712:	bf00      	nop
 8005714:	08007c5a 	.word	0x08007c5a
 8005718:	08007c6b 	.word	0x08007c6b

0800571c <siprintf>:
 800571c:	b40e      	push	{r1, r2, r3}
 800571e:	b500      	push	{lr}
 8005720:	b09c      	sub	sp, #112	; 0x70
 8005722:	ab1d      	add	r3, sp, #116	; 0x74
 8005724:	9002      	str	r0, [sp, #8]
 8005726:	9006      	str	r0, [sp, #24]
 8005728:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800572c:	4809      	ldr	r0, [pc, #36]	; (8005754 <siprintf+0x38>)
 800572e:	9107      	str	r1, [sp, #28]
 8005730:	9104      	str	r1, [sp, #16]
 8005732:	4909      	ldr	r1, [pc, #36]	; (8005758 <siprintf+0x3c>)
 8005734:	f853 2b04 	ldr.w	r2, [r3], #4
 8005738:	9105      	str	r1, [sp, #20]
 800573a:	6800      	ldr	r0, [r0, #0]
 800573c:	9301      	str	r3, [sp, #4]
 800573e:	a902      	add	r1, sp, #8
 8005740:	f000 ffea 	bl	8006718 <_svfiprintf_r>
 8005744:	9b02      	ldr	r3, [sp, #8]
 8005746:	2200      	movs	r2, #0
 8005748:	701a      	strb	r2, [r3, #0]
 800574a:	b01c      	add	sp, #112	; 0x70
 800574c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005750:	b003      	add	sp, #12
 8005752:	4770      	bx	lr
 8005754:	20000064 	.word	0x20000064
 8005758:	ffff0208 	.word	0xffff0208

0800575c <std>:
 800575c:	2300      	movs	r3, #0
 800575e:	b510      	push	{r4, lr}
 8005760:	4604      	mov	r4, r0
 8005762:	e9c0 3300 	strd	r3, r3, [r0]
 8005766:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800576a:	6083      	str	r3, [r0, #8]
 800576c:	8181      	strh	r1, [r0, #12]
 800576e:	6643      	str	r3, [r0, #100]	; 0x64
 8005770:	81c2      	strh	r2, [r0, #14]
 8005772:	6183      	str	r3, [r0, #24]
 8005774:	4619      	mov	r1, r3
 8005776:	2208      	movs	r2, #8
 8005778:	305c      	adds	r0, #92	; 0x5c
 800577a:	f000 f8b1 	bl	80058e0 <memset>
 800577e:	4b0d      	ldr	r3, [pc, #52]	; (80057b4 <std+0x58>)
 8005780:	6263      	str	r3, [r4, #36]	; 0x24
 8005782:	4b0d      	ldr	r3, [pc, #52]	; (80057b8 <std+0x5c>)
 8005784:	62a3      	str	r3, [r4, #40]	; 0x28
 8005786:	4b0d      	ldr	r3, [pc, #52]	; (80057bc <std+0x60>)
 8005788:	62e3      	str	r3, [r4, #44]	; 0x2c
 800578a:	4b0d      	ldr	r3, [pc, #52]	; (80057c0 <std+0x64>)
 800578c:	6323      	str	r3, [r4, #48]	; 0x30
 800578e:	4b0d      	ldr	r3, [pc, #52]	; (80057c4 <std+0x68>)
 8005790:	6224      	str	r4, [r4, #32]
 8005792:	429c      	cmp	r4, r3
 8005794:	d006      	beq.n	80057a4 <std+0x48>
 8005796:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800579a:	4294      	cmp	r4, r2
 800579c:	d002      	beq.n	80057a4 <std+0x48>
 800579e:	33d0      	adds	r3, #208	; 0xd0
 80057a0:	429c      	cmp	r4, r3
 80057a2:	d105      	bne.n	80057b0 <std+0x54>
 80057a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80057a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057ac:	f000 b8ce 	b.w	800594c <__retarget_lock_init_recursive>
 80057b0:	bd10      	pop	{r4, pc}
 80057b2:	bf00      	nop
 80057b4:	080072d1 	.word	0x080072d1
 80057b8:	080072f3 	.word	0x080072f3
 80057bc:	0800732b 	.word	0x0800732b
 80057c0:	0800734f 	.word	0x0800734f
 80057c4:	20000358 	.word	0x20000358

080057c8 <stdio_exit_handler>:
 80057c8:	4a02      	ldr	r2, [pc, #8]	; (80057d4 <stdio_exit_handler+0xc>)
 80057ca:	4903      	ldr	r1, [pc, #12]	; (80057d8 <stdio_exit_handler+0x10>)
 80057cc:	4803      	ldr	r0, [pc, #12]	; (80057dc <stdio_exit_handler+0x14>)
 80057ce:	f000 b869 	b.w	80058a4 <_fwalk_sglue>
 80057d2:	bf00      	nop
 80057d4:	2000000c 	.word	0x2000000c
 80057d8:	08006b71 	.word	0x08006b71
 80057dc:	20000018 	.word	0x20000018

080057e0 <cleanup_stdio>:
 80057e0:	6841      	ldr	r1, [r0, #4]
 80057e2:	4b0c      	ldr	r3, [pc, #48]	; (8005814 <cleanup_stdio+0x34>)
 80057e4:	4299      	cmp	r1, r3
 80057e6:	b510      	push	{r4, lr}
 80057e8:	4604      	mov	r4, r0
 80057ea:	d001      	beq.n	80057f0 <cleanup_stdio+0x10>
 80057ec:	f001 f9c0 	bl	8006b70 <_fflush_r>
 80057f0:	68a1      	ldr	r1, [r4, #8]
 80057f2:	4b09      	ldr	r3, [pc, #36]	; (8005818 <cleanup_stdio+0x38>)
 80057f4:	4299      	cmp	r1, r3
 80057f6:	d002      	beq.n	80057fe <cleanup_stdio+0x1e>
 80057f8:	4620      	mov	r0, r4
 80057fa:	f001 f9b9 	bl	8006b70 <_fflush_r>
 80057fe:	68e1      	ldr	r1, [r4, #12]
 8005800:	4b06      	ldr	r3, [pc, #24]	; (800581c <cleanup_stdio+0x3c>)
 8005802:	4299      	cmp	r1, r3
 8005804:	d004      	beq.n	8005810 <cleanup_stdio+0x30>
 8005806:	4620      	mov	r0, r4
 8005808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800580c:	f001 b9b0 	b.w	8006b70 <_fflush_r>
 8005810:	bd10      	pop	{r4, pc}
 8005812:	bf00      	nop
 8005814:	20000358 	.word	0x20000358
 8005818:	200003c0 	.word	0x200003c0
 800581c:	20000428 	.word	0x20000428

08005820 <global_stdio_init.part.0>:
 8005820:	b510      	push	{r4, lr}
 8005822:	4b0b      	ldr	r3, [pc, #44]	; (8005850 <global_stdio_init.part.0+0x30>)
 8005824:	4c0b      	ldr	r4, [pc, #44]	; (8005854 <global_stdio_init.part.0+0x34>)
 8005826:	4a0c      	ldr	r2, [pc, #48]	; (8005858 <global_stdio_init.part.0+0x38>)
 8005828:	601a      	str	r2, [r3, #0]
 800582a:	4620      	mov	r0, r4
 800582c:	2200      	movs	r2, #0
 800582e:	2104      	movs	r1, #4
 8005830:	f7ff ff94 	bl	800575c <std>
 8005834:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005838:	2201      	movs	r2, #1
 800583a:	2109      	movs	r1, #9
 800583c:	f7ff ff8e 	bl	800575c <std>
 8005840:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005844:	2202      	movs	r2, #2
 8005846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800584a:	2112      	movs	r1, #18
 800584c:	f7ff bf86 	b.w	800575c <std>
 8005850:	20000490 	.word	0x20000490
 8005854:	20000358 	.word	0x20000358
 8005858:	080057c9 	.word	0x080057c9

0800585c <__sfp_lock_acquire>:
 800585c:	4801      	ldr	r0, [pc, #4]	; (8005864 <__sfp_lock_acquire+0x8>)
 800585e:	f000 b876 	b.w	800594e <__retarget_lock_acquire_recursive>
 8005862:	bf00      	nop
 8005864:	20000495 	.word	0x20000495

08005868 <__sfp_lock_release>:
 8005868:	4801      	ldr	r0, [pc, #4]	; (8005870 <__sfp_lock_release+0x8>)
 800586a:	f000 b871 	b.w	8005950 <__retarget_lock_release_recursive>
 800586e:	bf00      	nop
 8005870:	20000495 	.word	0x20000495

08005874 <__sinit>:
 8005874:	b510      	push	{r4, lr}
 8005876:	4604      	mov	r4, r0
 8005878:	f7ff fff0 	bl	800585c <__sfp_lock_acquire>
 800587c:	6a23      	ldr	r3, [r4, #32]
 800587e:	b11b      	cbz	r3, 8005888 <__sinit+0x14>
 8005880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005884:	f7ff bff0 	b.w	8005868 <__sfp_lock_release>
 8005888:	4b04      	ldr	r3, [pc, #16]	; (800589c <__sinit+0x28>)
 800588a:	6223      	str	r3, [r4, #32]
 800588c:	4b04      	ldr	r3, [pc, #16]	; (80058a0 <__sinit+0x2c>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1f5      	bne.n	8005880 <__sinit+0xc>
 8005894:	f7ff ffc4 	bl	8005820 <global_stdio_init.part.0>
 8005898:	e7f2      	b.n	8005880 <__sinit+0xc>
 800589a:	bf00      	nop
 800589c:	080057e1 	.word	0x080057e1
 80058a0:	20000490 	.word	0x20000490

080058a4 <_fwalk_sglue>:
 80058a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058a8:	4607      	mov	r7, r0
 80058aa:	4688      	mov	r8, r1
 80058ac:	4614      	mov	r4, r2
 80058ae:	2600      	movs	r6, #0
 80058b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058b4:	f1b9 0901 	subs.w	r9, r9, #1
 80058b8:	d505      	bpl.n	80058c6 <_fwalk_sglue+0x22>
 80058ba:	6824      	ldr	r4, [r4, #0]
 80058bc:	2c00      	cmp	r4, #0
 80058be:	d1f7      	bne.n	80058b0 <_fwalk_sglue+0xc>
 80058c0:	4630      	mov	r0, r6
 80058c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058c6:	89ab      	ldrh	r3, [r5, #12]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d907      	bls.n	80058dc <_fwalk_sglue+0x38>
 80058cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80058d0:	3301      	adds	r3, #1
 80058d2:	d003      	beq.n	80058dc <_fwalk_sglue+0x38>
 80058d4:	4629      	mov	r1, r5
 80058d6:	4638      	mov	r0, r7
 80058d8:	47c0      	blx	r8
 80058da:	4306      	orrs	r6, r0
 80058dc:	3568      	adds	r5, #104	; 0x68
 80058de:	e7e9      	b.n	80058b4 <_fwalk_sglue+0x10>

080058e0 <memset>:
 80058e0:	4402      	add	r2, r0
 80058e2:	4603      	mov	r3, r0
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d100      	bne.n	80058ea <memset+0xa>
 80058e8:	4770      	bx	lr
 80058ea:	f803 1b01 	strb.w	r1, [r3], #1
 80058ee:	e7f9      	b.n	80058e4 <memset+0x4>

080058f0 <_localeconv_r>:
 80058f0:	4800      	ldr	r0, [pc, #0]	; (80058f4 <_localeconv_r+0x4>)
 80058f2:	4770      	bx	lr
 80058f4:	20000158 	.word	0x20000158

080058f8 <__errno>:
 80058f8:	4b01      	ldr	r3, [pc, #4]	; (8005900 <__errno+0x8>)
 80058fa:	6818      	ldr	r0, [r3, #0]
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	20000064 	.word	0x20000064

08005904 <__libc_init_array>:
 8005904:	b570      	push	{r4, r5, r6, lr}
 8005906:	4d0d      	ldr	r5, [pc, #52]	; (800593c <__libc_init_array+0x38>)
 8005908:	4c0d      	ldr	r4, [pc, #52]	; (8005940 <__libc_init_array+0x3c>)
 800590a:	1b64      	subs	r4, r4, r5
 800590c:	10a4      	asrs	r4, r4, #2
 800590e:	2600      	movs	r6, #0
 8005910:	42a6      	cmp	r6, r4
 8005912:	d109      	bne.n	8005928 <__libc_init_array+0x24>
 8005914:	4d0b      	ldr	r5, [pc, #44]	; (8005944 <__libc_init_array+0x40>)
 8005916:	4c0c      	ldr	r4, [pc, #48]	; (8005948 <__libc_init_array+0x44>)
 8005918:	f002 f91e 	bl	8007b58 <_init>
 800591c:	1b64      	subs	r4, r4, r5
 800591e:	10a4      	asrs	r4, r4, #2
 8005920:	2600      	movs	r6, #0
 8005922:	42a6      	cmp	r6, r4
 8005924:	d105      	bne.n	8005932 <__libc_init_array+0x2e>
 8005926:	bd70      	pop	{r4, r5, r6, pc}
 8005928:	f855 3b04 	ldr.w	r3, [r5], #4
 800592c:	4798      	blx	r3
 800592e:	3601      	adds	r6, #1
 8005930:	e7ee      	b.n	8005910 <__libc_init_array+0xc>
 8005932:	f855 3b04 	ldr.w	r3, [r5], #4
 8005936:	4798      	blx	r3
 8005938:	3601      	adds	r6, #1
 800593a:	e7f2      	b.n	8005922 <__libc_init_array+0x1e>
 800593c:	08007fc4 	.word	0x08007fc4
 8005940:	08007fc4 	.word	0x08007fc4
 8005944:	08007fc4 	.word	0x08007fc4
 8005948:	08007fc8 	.word	0x08007fc8

0800594c <__retarget_lock_init_recursive>:
 800594c:	4770      	bx	lr

0800594e <__retarget_lock_acquire_recursive>:
 800594e:	4770      	bx	lr

08005950 <__retarget_lock_release_recursive>:
 8005950:	4770      	bx	lr

08005952 <memcpy>:
 8005952:	440a      	add	r2, r1
 8005954:	4291      	cmp	r1, r2
 8005956:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800595a:	d100      	bne.n	800595e <memcpy+0xc>
 800595c:	4770      	bx	lr
 800595e:	b510      	push	{r4, lr}
 8005960:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005964:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005968:	4291      	cmp	r1, r2
 800596a:	d1f9      	bne.n	8005960 <memcpy+0xe>
 800596c:	bd10      	pop	{r4, pc}

0800596e <quorem>:
 800596e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005972:	6903      	ldr	r3, [r0, #16]
 8005974:	690c      	ldr	r4, [r1, #16]
 8005976:	42a3      	cmp	r3, r4
 8005978:	4607      	mov	r7, r0
 800597a:	db7e      	blt.n	8005a7a <quorem+0x10c>
 800597c:	3c01      	subs	r4, #1
 800597e:	f101 0814 	add.w	r8, r1, #20
 8005982:	f100 0514 	add.w	r5, r0, #20
 8005986:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800598a:	9301      	str	r3, [sp, #4]
 800598c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005990:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005994:	3301      	adds	r3, #1
 8005996:	429a      	cmp	r2, r3
 8005998:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800599c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80059a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80059a4:	d331      	bcc.n	8005a0a <quorem+0x9c>
 80059a6:	f04f 0e00 	mov.w	lr, #0
 80059aa:	4640      	mov	r0, r8
 80059ac:	46ac      	mov	ip, r5
 80059ae:	46f2      	mov	sl, lr
 80059b0:	f850 2b04 	ldr.w	r2, [r0], #4
 80059b4:	b293      	uxth	r3, r2
 80059b6:	fb06 e303 	mla	r3, r6, r3, lr
 80059ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80059be:	0c1a      	lsrs	r2, r3, #16
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	ebaa 0303 	sub.w	r3, sl, r3
 80059c6:	f8dc a000 	ldr.w	sl, [ip]
 80059ca:	fa13 f38a 	uxtah	r3, r3, sl
 80059ce:	fb06 220e 	mla	r2, r6, lr, r2
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	9b00      	ldr	r3, [sp, #0]
 80059d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80059da:	b292      	uxth	r2, r2
 80059dc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80059e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059e4:	f8bd 3000 	ldrh.w	r3, [sp]
 80059e8:	4581      	cmp	r9, r0
 80059ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059ee:	f84c 3b04 	str.w	r3, [ip], #4
 80059f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80059f6:	d2db      	bcs.n	80059b0 <quorem+0x42>
 80059f8:	f855 300b 	ldr.w	r3, [r5, fp]
 80059fc:	b92b      	cbnz	r3, 8005a0a <quorem+0x9c>
 80059fe:	9b01      	ldr	r3, [sp, #4]
 8005a00:	3b04      	subs	r3, #4
 8005a02:	429d      	cmp	r5, r3
 8005a04:	461a      	mov	r2, r3
 8005a06:	d32c      	bcc.n	8005a62 <quorem+0xf4>
 8005a08:	613c      	str	r4, [r7, #16]
 8005a0a:	4638      	mov	r0, r7
 8005a0c:	f001 fb60 	bl	80070d0 <__mcmp>
 8005a10:	2800      	cmp	r0, #0
 8005a12:	db22      	blt.n	8005a5a <quorem+0xec>
 8005a14:	3601      	adds	r6, #1
 8005a16:	4629      	mov	r1, r5
 8005a18:	2000      	movs	r0, #0
 8005a1a:	f858 2b04 	ldr.w	r2, [r8], #4
 8005a1e:	f8d1 c000 	ldr.w	ip, [r1]
 8005a22:	b293      	uxth	r3, r2
 8005a24:	1ac3      	subs	r3, r0, r3
 8005a26:	0c12      	lsrs	r2, r2, #16
 8005a28:	fa13 f38c 	uxtah	r3, r3, ip
 8005a2c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005a30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a3a:	45c1      	cmp	r9, r8
 8005a3c:	f841 3b04 	str.w	r3, [r1], #4
 8005a40:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005a44:	d2e9      	bcs.n	8005a1a <quorem+0xac>
 8005a46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a4e:	b922      	cbnz	r2, 8005a5a <quorem+0xec>
 8005a50:	3b04      	subs	r3, #4
 8005a52:	429d      	cmp	r5, r3
 8005a54:	461a      	mov	r2, r3
 8005a56:	d30a      	bcc.n	8005a6e <quorem+0x100>
 8005a58:	613c      	str	r4, [r7, #16]
 8005a5a:	4630      	mov	r0, r6
 8005a5c:	b003      	add	sp, #12
 8005a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a62:	6812      	ldr	r2, [r2, #0]
 8005a64:	3b04      	subs	r3, #4
 8005a66:	2a00      	cmp	r2, #0
 8005a68:	d1ce      	bne.n	8005a08 <quorem+0x9a>
 8005a6a:	3c01      	subs	r4, #1
 8005a6c:	e7c9      	b.n	8005a02 <quorem+0x94>
 8005a6e:	6812      	ldr	r2, [r2, #0]
 8005a70:	3b04      	subs	r3, #4
 8005a72:	2a00      	cmp	r2, #0
 8005a74:	d1f0      	bne.n	8005a58 <quorem+0xea>
 8005a76:	3c01      	subs	r4, #1
 8005a78:	e7eb      	b.n	8005a52 <quorem+0xe4>
 8005a7a:	2000      	movs	r0, #0
 8005a7c:	e7ee      	b.n	8005a5c <quorem+0xee>
	...

08005a80 <_dtoa_r>:
 8005a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a84:	ed2d 8b04 	vpush	{d8-d9}
 8005a88:	69c5      	ldr	r5, [r0, #28]
 8005a8a:	b093      	sub	sp, #76	; 0x4c
 8005a8c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005a90:	ec57 6b10 	vmov	r6, r7, d0
 8005a94:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005a98:	9107      	str	r1, [sp, #28]
 8005a9a:	4604      	mov	r4, r0
 8005a9c:	920a      	str	r2, [sp, #40]	; 0x28
 8005a9e:	930d      	str	r3, [sp, #52]	; 0x34
 8005aa0:	b975      	cbnz	r5, 8005ac0 <_dtoa_r+0x40>
 8005aa2:	2010      	movs	r0, #16
 8005aa4:	f000 ff36 	bl	8006914 <malloc>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	61e0      	str	r0, [r4, #28]
 8005aac:	b920      	cbnz	r0, 8005ab8 <_dtoa_r+0x38>
 8005aae:	4bae      	ldr	r3, [pc, #696]	; (8005d68 <_dtoa_r+0x2e8>)
 8005ab0:	21ef      	movs	r1, #239	; 0xef
 8005ab2:	48ae      	ldr	r0, [pc, #696]	; (8005d6c <_dtoa_r+0x2ec>)
 8005ab4:	f001 fcee 	bl	8007494 <__assert_func>
 8005ab8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005abc:	6005      	str	r5, [r0, #0]
 8005abe:	60c5      	str	r5, [r0, #12]
 8005ac0:	69e3      	ldr	r3, [r4, #28]
 8005ac2:	6819      	ldr	r1, [r3, #0]
 8005ac4:	b151      	cbz	r1, 8005adc <_dtoa_r+0x5c>
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	604a      	str	r2, [r1, #4]
 8005aca:	2301      	movs	r3, #1
 8005acc:	4093      	lsls	r3, r2
 8005ace:	608b      	str	r3, [r1, #8]
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	f001 f8c1 	bl	8006c58 <_Bfree>
 8005ad6:	69e3      	ldr	r3, [r4, #28]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	601a      	str	r2, [r3, #0]
 8005adc:	1e3b      	subs	r3, r7, #0
 8005ade:	bfbb      	ittet	lt
 8005ae0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005ae4:	9303      	strlt	r3, [sp, #12]
 8005ae6:	2300      	movge	r3, #0
 8005ae8:	2201      	movlt	r2, #1
 8005aea:	bfac      	ite	ge
 8005aec:	f8c8 3000 	strge.w	r3, [r8]
 8005af0:	f8c8 2000 	strlt.w	r2, [r8]
 8005af4:	4b9e      	ldr	r3, [pc, #632]	; (8005d70 <_dtoa_r+0x2f0>)
 8005af6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005afa:	ea33 0308 	bics.w	r3, r3, r8
 8005afe:	d11b      	bne.n	8005b38 <_dtoa_r+0xb8>
 8005b00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b02:	f242 730f 	movw	r3, #9999	; 0x270f
 8005b06:	6013      	str	r3, [r2, #0]
 8005b08:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005b0c:	4333      	orrs	r3, r6
 8005b0e:	f000 8593 	beq.w	8006638 <_dtoa_r+0xbb8>
 8005b12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b14:	b963      	cbnz	r3, 8005b30 <_dtoa_r+0xb0>
 8005b16:	4b97      	ldr	r3, [pc, #604]	; (8005d74 <_dtoa_r+0x2f4>)
 8005b18:	e027      	b.n	8005b6a <_dtoa_r+0xea>
 8005b1a:	4b97      	ldr	r3, [pc, #604]	; (8005d78 <_dtoa_r+0x2f8>)
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	3308      	adds	r3, #8
 8005b20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005b22:	6013      	str	r3, [r2, #0]
 8005b24:	9800      	ldr	r0, [sp, #0]
 8005b26:	b013      	add	sp, #76	; 0x4c
 8005b28:	ecbd 8b04 	vpop	{d8-d9}
 8005b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b30:	4b90      	ldr	r3, [pc, #576]	; (8005d74 <_dtoa_r+0x2f4>)
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	3303      	adds	r3, #3
 8005b36:	e7f3      	b.n	8005b20 <_dtoa_r+0xa0>
 8005b38:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	ec51 0b17 	vmov	r0, r1, d7
 8005b42:	eeb0 8a47 	vmov.f32	s16, s14
 8005b46:	eef0 8a67 	vmov.f32	s17, s15
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	f7fa ffdc 	bl	8000b08 <__aeabi_dcmpeq>
 8005b50:	4681      	mov	r9, r0
 8005b52:	b160      	cbz	r0, 8005b6e <_dtoa_r+0xee>
 8005b54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b56:	2301      	movs	r3, #1
 8005b58:	6013      	str	r3, [r2, #0]
 8005b5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 8568 	beq.w	8006632 <_dtoa_r+0xbb2>
 8005b62:	4b86      	ldr	r3, [pc, #536]	; (8005d7c <_dtoa_r+0x2fc>)
 8005b64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005b66:	6013      	str	r3, [r2, #0]
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	9300      	str	r3, [sp, #0]
 8005b6c:	e7da      	b.n	8005b24 <_dtoa_r+0xa4>
 8005b6e:	aa10      	add	r2, sp, #64	; 0x40
 8005b70:	a911      	add	r1, sp, #68	; 0x44
 8005b72:	4620      	mov	r0, r4
 8005b74:	eeb0 0a48 	vmov.f32	s0, s16
 8005b78:	eef0 0a68 	vmov.f32	s1, s17
 8005b7c:	f001 fb4e 	bl	800721c <__d2b>
 8005b80:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005b84:	4682      	mov	sl, r0
 8005b86:	2d00      	cmp	r5, #0
 8005b88:	d07f      	beq.n	8005c8a <_dtoa_r+0x20a>
 8005b8a:	ee18 3a90 	vmov	r3, s17
 8005b8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b92:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005b96:	ec51 0b18 	vmov	r0, r1, d8
 8005b9a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005b9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005ba2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	2200      	movs	r2, #0
 8005baa:	4b75      	ldr	r3, [pc, #468]	; (8005d80 <_dtoa_r+0x300>)
 8005bac:	f7fa fb8c 	bl	80002c8 <__aeabi_dsub>
 8005bb0:	a367      	add	r3, pc, #412	; (adr r3, 8005d50 <_dtoa_r+0x2d0>)
 8005bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb6:	f7fa fd3f 	bl	8000638 <__aeabi_dmul>
 8005bba:	a367      	add	r3, pc, #412	; (adr r3, 8005d58 <_dtoa_r+0x2d8>)
 8005bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc0:	f7fa fb84 	bl	80002cc <__adddf3>
 8005bc4:	4606      	mov	r6, r0
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	460f      	mov	r7, r1
 8005bca:	f7fa fccb 	bl	8000564 <__aeabi_i2d>
 8005bce:	a364      	add	r3, pc, #400	; (adr r3, 8005d60 <_dtoa_r+0x2e0>)
 8005bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd4:	f7fa fd30 	bl	8000638 <__aeabi_dmul>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	460b      	mov	r3, r1
 8005bdc:	4630      	mov	r0, r6
 8005bde:	4639      	mov	r1, r7
 8005be0:	f7fa fb74 	bl	80002cc <__adddf3>
 8005be4:	4606      	mov	r6, r0
 8005be6:	460f      	mov	r7, r1
 8005be8:	f7fa ffd6 	bl	8000b98 <__aeabi_d2iz>
 8005bec:	2200      	movs	r2, #0
 8005bee:	4683      	mov	fp, r0
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	4630      	mov	r0, r6
 8005bf4:	4639      	mov	r1, r7
 8005bf6:	f7fa ff91 	bl	8000b1c <__aeabi_dcmplt>
 8005bfa:	b148      	cbz	r0, 8005c10 <_dtoa_r+0x190>
 8005bfc:	4658      	mov	r0, fp
 8005bfe:	f7fa fcb1 	bl	8000564 <__aeabi_i2d>
 8005c02:	4632      	mov	r2, r6
 8005c04:	463b      	mov	r3, r7
 8005c06:	f7fa ff7f 	bl	8000b08 <__aeabi_dcmpeq>
 8005c0a:	b908      	cbnz	r0, 8005c10 <_dtoa_r+0x190>
 8005c0c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005c10:	f1bb 0f16 	cmp.w	fp, #22
 8005c14:	d857      	bhi.n	8005cc6 <_dtoa_r+0x246>
 8005c16:	4b5b      	ldr	r3, [pc, #364]	; (8005d84 <_dtoa_r+0x304>)
 8005c18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c20:	ec51 0b18 	vmov	r0, r1, d8
 8005c24:	f7fa ff7a 	bl	8000b1c <__aeabi_dcmplt>
 8005c28:	2800      	cmp	r0, #0
 8005c2a:	d04e      	beq.n	8005cca <_dtoa_r+0x24a>
 8005c2c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005c30:	2300      	movs	r3, #0
 8005c32:	930c      	str	r3, [sp, #48]	; 0x30
 8005c34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c36:	1b5b      	subs	r3, r3, r5
 8005c38:	1e5a      	subs	r2, r3, #1
 8005c3a:	bf45      	ittet	mi
 8005c3c:	f1c3 0301 	rsbmi	r3, r3, #1
 8005c40:	9305      	strmi	r3, [sp, #20]
 8005c42:	2300      	movpl	r3, #0
 8005c44:	2300      	movmi	r3, #0
 8005c46:	9206      	str	r2, [sp, #24]
 8005c48:	bf54      	ite	pl
 8005c4a:	9305      	strpl	r3, [sp, #20]
 8005c4c:	9306      	strmi	r3, [sp, #24]
 8005c4e:	f1bb 0f00 	cmp.w	fp, #0
 8005c52:	db3c      	blt.n	8005cce <_dtoa_r+0x24e>
 8005c54:	9b06      	ldr	r3, [sp, #24]
 8005c56:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005c5a:	445b      	add	r3, fp
 8005c5c:	9306      	str	r3, [sp, #24]
 8005c5e:	2300      	movs	r3, #0
 8005c60:	9308      	str	r3, [sp, #32]
 8005c62:	9b07      	ldr	r3, [sp, #28]
 8005c64:	2b09      	cmp	r3, #9
 8005c66:	d868      	bhi.n	8005d3a <_dtoa_r+0x2ba>
 8005c68:	2b05      	cmp	r3, #5
 8005c6a:	bfc4      	itt	gt
 8005c6c:	3b04      	subgt	r3, #4
 8005c6e:	9307      	strgt	r3, [sp, #28]
 8005c70:	9b07      	ldr	r3, [sp, #28]
 8005c72:	f1a3 0302 	sub.w	r3, r3, #2
 8005c76:	bfcc      	ite	gt
 8005c78:	2500      	movgt	r5, #0
 8005c7a:	2501      	movle	r5, #1
 8005c7c:	2b03      	cmp	r3, #3
 8005c7e:	f200 8085 	bhi.w	8005d8c <_dtoa_r+0x30c>
 8005c82:	e8df f003 	tbb	[pc, r3]
 8005c86:	3b2e      	.short	0x3b2e
 8005c88:	5839      	.short	0x5839
 8005c8a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005c8e:	441d      	add	r5, r3
 8005c90:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005c94:	2b20      	cmp	r3, #32
 8005c96:	bfc1      	itttt	gt
 8005c98:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005c9c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005ca0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005ca4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005ca8:	bfd6      	itet	le
 8005caa:	f1c3 0320 	rsble	r3, r3, #32
 8005cae:	ea48 0003 	orrgt.w	r0, r8, r3
 8005cb2:	fa06 f003 	lslle.w	r0, r6, r3
 8005cb6:	f7fa fc45 	bl	8000544 <__aeabi_ui2d>
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005cc0:	3d01      	subs	r5, #1
 8005cc2:	920e      	str	r2, [sp, #56]	; 0x38
 8005cc4:	e76f      	b.n	8005ba6 <_dtoa_r+0x126>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e7b3      	b.n	8005c32 <_dtoa_r+0x1b2>
 8005cca:	900c      	str	r0, [sp, #48]	; 0x30
 8005ccc:	e7b2      	b.n	8005c34 <_dtoa_r+0x1b4>
 8005cce:	9b05      	ldr	r3, [sp, #20]
 8005cd0:	eba3 030b 	sub.w	r3, r3, fp
 8005cd4:	9305      	str	r3, [sp, #20]
 8005cd6:	f1cb 0300 	rsb	r3, fp, #0
 8005cda:	9308      	str	r3, [sp, #32]
 8005cdc:	2300      	movs	r3, #0
 8005cde:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ce0:	e7bf      	b.n	8005c62 <_dtoa_r+0x1e2>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	dc52      	bgt.n	8005d92 <_dtoa_r+0x312>
 8005cec:	2301      	movs	r3, #1
 8005cee:	9301      	str	r3, [sp, #4]
 8005cf0:	9304      	str	r3, [sp, #16]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	920a      	str	r2, [sp, #40]	; 0x28
 8005cf6:	e00b      	b.n	8005d10 <_dtoa_r+0x290>
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e7f3      	b.n	8005ce4 <_dtoa_r+0x264>
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8005d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d02:	445b      	add	r3, fp
 8005d04:	9301      	str	r3, [sp, #4]
 8005d06:	3301      	adds	r3, #1
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	9304      	str	r3, [sp, #16]
 8005d0c:	bfb8      	it	lt
 8005d0e:	2301      	movlt	r3, #1
 8005d10:	69e0      	ldr	r0, [r4, #28]
 8005d12:	2100      	movs	r1, #0
 8005d14:	2204      	movs	r2, #4
 8005d16:	f102 0614 	add.w	r6, r2, #20
 8005d1a:	429e      	cmp	r6, r3
 8005d1c:	d93d      	bls.n	8005d9a <_dtoa_r+0x31a>
 8005d1e:	6041      	str	r1, [r0, #4]
 8005d20:	4620      	mov	r0, r4
 8005d22:	f000 ff59 	bl	8006bd8 <_Balloc>
 8005d26:	9000      	str	r0, [sp, #0]
 8005d28:	2800      	cmp	r0, #0
 8005d2a:	d139      	bne.n	8005da0 <_dtoa_r+0x320>
 8005d2c:	4b16      	ldr	r3, [pc, #88]	; (8005d88 <_dtoa_r+0x308>)
 8005d2e:	4602      	mov	r2, r0
 8005d30:	f240 11af 	movw	r1, #431	; 0x1af
 8005d34:	e6bd      	b.n	8005ab2 <_dtoa_r+0x32>
 8005d36:	2301      	movs	r3, #1
 8005d38:	e7e1      	b.n	8005cfe <_dtoa_r+0x27e>
 8005d3a:	2501      	movs	r5, #1
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	9307      	str	r3, [sp, #28]
 8005d40:	9509      	str	r5, [sp, #36]	; 0x24
 8005d42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d46:	9301      	str	r3, [sp, #4]
 8005d48:	9304      	str	r3, [sp, #16]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	2312      	movs	r3, #18
 8005d4e:	e7d1      	b.n	8005cf4 <_dtoa_r+0x274>
 8005d50:	636f4361 	.word	0x636f4361
 8005d54:	3fd287a7 	.word	0x3fd287a7
 8005d58:	8b60c8b3 	.word	0x8b60c8b3
 8005d5c:	3fc68a28 	.word	0x3fc68a28
 8005d60:	509f79fb 	.word	0x509f79fb
 8005d64:	3fd34413 	.word	0x3fd34413
 8005d68:	08007c89 	.word	0x08007c89
 8005d6c:	08007ca0 	.word	0x08007ca0
 8005d70:	7ff00000 	.word	0x7ff00000
 8005d74:	08007c85 	.word	0x08007c85
 8005d78:	08007c7c 	.word	0x08007c7c
 8005d7c:	08007c59 	.word	0x08007c59
 8005d80:	3ff80000 	.word	0x3ff80000
 8005d84:	08007da0 	.word	0x08007da0
 8005d88:	08007cf8 	.word	0x08007cf8
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8005d90:	e7d7      	b.n	8005d42 <_dtoa_r+0x2c2>
 8005d92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d94:	9301      	str	r3, [sp, #4]
 8005d96:	9304      	str	r3, [sp, #16]
 8005d98:	e7ba      	b.n	8005d10 <_dtoa_r+0x290>
 8005d9a:	3101      	adds	r1, #1
 8005d9c:	0052      	lsls	r2, r2, #1
 8005d9e:	e7ba      	b.n	8005d16 <_dtoa_r+0x296>
 8005da0:	69e3      	ldr	r3, [r4, #28]
 8005da2:	9a00      	ldr	r2, [sp, #0]
 8005da4:	601a      	str	r2, [r3, #0]
 8005da6:	9b04      	ldr	r3, [sp, #16]
 8005da8:	2b0e      	cmp	r3, #14
 8005daa:	f200 80a8 	bhi.w	8005efe <_dtoa_r+0x47e>
 8005dae:	2d00      	cmp	r5, #0
 8005db0:	f000 80a5 	beq.w	8005efe <_dtoa_r+0x47e>
 8005db4:	f1bb 0f00 	cmp.w	fp, #0
 8005db8:	dd38      	ble.n	8005e2c <_dtoa_r+0x3ac>
 8005dba:	4bc0      	ldr	r3, [pc, #768]	; (80060bc <_dtoa_r+0x63c>)
 8005dbc:	f00b 020f 	and.w	r2, fp, #15
 8005dc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005dc4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005dc8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005dcc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005dd0:	d019      	beq.n	8005e06 <_dtoa_r+0x386>
 8005dd2:	4bbb      	ldr	r3, [pc, #748]	; (80060c0 <_dtoa_r+0x640>)
 8005dd4:	ec51 0b18 	vmov	r0, r1, d8
 8005dd8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005ddc:	f7fa fd56 	bl	800088c <__aeabi_ddiv>
 8005de0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005de4:	f008 080f 	and.w	r8, r8, #15
 8005de8:	2503      	movs	r5, #3
 8005dea:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80060c0 <_dtoa_r+0x640>
 8005dee:	f1b8 0f00 	cmp.w	r8, #0
 8005df2:	d10a      	bne.n	8005e0a <_dtoa_r+0x38a>
 8005df4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005df8:	4632      	mov	r2, r6
 8005dfa:	463b      	mov	r3, r7
 8005dfc:	f7fa fd46 	bl	800088c <__aeabi_ddiv>
 8005e00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e04:	e02b      	b.n	8005e5e <_dtoa_r+0x3de>
 8005e06:	2502      	movs	r5, #2
 8005e08:	e7ef      	b.n	8005dea <_dtoa_r+0x36a>
 8005e0a:	f018 0f01 	tst.w	r8, #1
 8005e0e:	d008      	beq.n	8005e22 <_dtoa_r+0x3a2>
 8005e10:	4630      	mov	r0, r6
 8005e12:	4639      	mov	r1, r7
 8005e14:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005e18:	f7fa fc0e 	bl	8000638 <__aeabi_dmul>
 8005e1c:	3501      	adds	r5, #1
 8005e1e:	4606      	mov	r6, r0
 8005e20:	460f      	mov	r7, r1
 8005e22:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005e26:	f109 0908 	add.w	r9, r9, #8
 8005e2a:	e7e0      	b.n	8005dee <_dtoa_r+0x36e>
 8005e2c:	f000 809f 	beq.w	8005f6e <_dtoa_r+0x4ee>
 8005e30:	f1cb 0600 	rsb	r6, fp, #0
 8005e34:	4ba1      	ldr	r3, [pc, #644]	; (80060bc <_dtoa_r+0x63c>)
 8005e36:	4fa2      	ldr	r7, [pc, #648]	; (80060c0 <_dtoa_r+0x640>)
 8005e38:	f006 020f 	and.w	r2, r6, #15
 8005e3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e44:	ec51 0b18 	vmov	r0, r1, d8
 8005e48:	f7fa fbf6 	bl	8000638 <__aeabi_dmul>
 8005e4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e50:	1136      	asrs	r6, r6, #4
 8005e52:	2300      	movs	r3, #0
 8005e54:	2502      	movs	r5, #2
 8005e56:	2e00      	cmp	r6, #0
 8005e58:	d17e      	bne.n	8005f58 <_dtoa_r+0x4d8>
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1d0      	bne.n	8005e00 <_dtoa_r+0x380>
 8005e5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e60:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	f000 8084 	beq.w	8005f72 <_dtoa_r+0x4f2>
 8005e6a:	4b96      	ldr	r3, [pc, #600]	; (80060c4 <_dtoa_r+0x644>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	4640      	mov	r0, r8
 8005e70:	4649      	mov	r1, r9
 8005e72:	f7fa fe53 	bl	8000b1c <__aeabi_dcmplt>
 8005e76:	2800      	cmp	r0, #0
 8005e78:	d07b      	beq.n	8005f72 <_dtoa_r+0x4f2>
 8005e7a:	9b04      	ldr	r3, [sp, #16]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d078      	beq.n	8005f72 <_dtoa_r+0x4f2>
 8005e80:	9b01      	ldr	r3, [sp, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	dd39      	ble.n	8005efa <_dtoa_r+0x47a>
 8005e86:	4b90      	ldr	r3, [pc, #576]	; (80060c8 <_dtoa_r+0x648>)
 8005e88:	2200      	movs	r2, #0
 8005e8a:	4640      	mov	r0, r8
 8005e8c:	4649      	mov	r1, r9
 8005e8e:	f7fa fbd3 	bl	8000638 <__aeabi_dmul>
 8005e92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e96:	9e01      	ldr	r6, [sp, #4]
 8005e98:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8005e9c:	3501      	adds	r5, #1
 8005e9e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	f7fa fb5e 	bl	8000564 <__aeabi_i2d>
 8005ea8:	4642      	mov	r2, r8
 8005eaa:	464b      	mov	r3, r9
 8005eac:	f7fa fbc4 	bl	8000638 <__aeabi_dmul>
 8005eb0:	4b86      	ldr	r3, [pc, #536]	; (80060cc <_dtoa_r+0x64c>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f7fa fa0a 	bl	80002cc <__adddf3>
 8005eb8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005ebc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ec0:	9303      	str	r3, [sp, #12]
 8005ec2:	2e00      	cmp	r6, #0
 8005ec4:	d158      	bne.n	8005f78 <_dtoa_r+0x4f8>
 8005ec6:	4b82      	ldr	r3, [pc, #520]	; (80060d0 <_dtoa_r+0x650>)
 8005ec8:	2200      	movs	r2, #0
 8005eca:	4640      	mov	r0, r8
 8005ecc:	4649      	mov	r1, r9
 8005ece:	f7fa f9fb 	bl	80002c8 <__aeabi_dsub>
 8005ed2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ed6:	4680      	mov	r8, r0
 8005ed8:	4689      	mov	r9, r1
 8005eda:	f7fa fe3d 	bl	8000b58 <__aeabi_dcmpgt>
 8005ede:	2800      	cmp	r0, #0
 8005ee0:	f040 8296 	bne.w	8006410 <_dtoa_r+0x990>
 8005ee4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005ee8:	4640      	mov	r0, r8
 8005eea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005eee:	4649      	mov	r1, r9
 8005ef0:	f7fa fe14 	bl	8000b1c <__aeabi_dcmplt>
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	f040 8289 	bne.w	800640c <_dtoa_r+0x98c>
 8005efa:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005efe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f2c0 814e 	blt.w	80061a2 <_dtoa_r+0x722>
 8005f06:	f1bb 0f0e 	cmp.w	fp, #14
 8005f0a:	f300 814a 	bgt.w	80061a2 <_dtoa_r+0x722>
 8005f0e:	4b6b      	ldr	r3, [pc, #428]	; (80060bc <_dtoa_r+0x63c>)
 8005f10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005f14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f280 80dc 	bge.w	80060d8 <_dtoa_r+0x658>
 8005f20:	9b04      	ldr	r3, [sp, #16]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f300 80d8 	bgt.w	80060d8 <_dtoa_r+0x658>
 8005f28:	f040 826f 	bne.w	800640a <_dtoa_r+0x98a>
 8005f2c:	4b68      	ldr	r3, [pc, #416]	; (80060d0 <_dtoa_r+0x650>)
 8005f2e:	2200      	movs	r2, #0
 8005f30:	4640      	mov	r0, r8
 8005f32:	4649      	mov	r1, r9
 8005f34:	f7fa fb80 	bl	8000638 <__aeabi_dmul>
 8005f38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f3c:	f7fa fe02 	bl	8000b44 <__aeabi_dcmpge>
 8005f40:	9e04      	ldr	r6, [sp, #16]
 8005f42:	4637      	mov	r7, r6
 8005f44:	2800      	cmp	r0, #0
 8005f46:	f040 8245 	bne.w	80063d4 <_dtoa_r+0x954>
 8005f4a:	9d00      	ldr	r5, [sp, #0]
 8005f4c:	2331      	movs	r3, #49	; 0x31
 8005f4e:	f805 3b01 	strb.w	r3, [r5], #1
 8005f52:	f10b 0b01 	add.w	fp, fp, #1
 8005f56:	e241      	b.n	80063dc <_dtoa_r+0x95c>
 8005f58:	07f2      	lsls	r2, r6, #31
 8005f5a:	d505      	bpl.n	8005f68 <_dtoa_r+0x4e8>
 8005f5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f60:	f7fa fb6a 	bl	8000638 <__aeabi_dmul>
 8005f64:	3501      	adds	r5, #1
 8005f66:	2301      	movs	r3, #1
 8005f68:	1076      	asrs	r6, r6, #1
 8005f6a:	3708      	adds	r7, #8
 8005f6c:	e773      	b.n	8005e56 <_dtoa_r+0x3d6>
 8005f6e:	2502      	movs	r5, #2
 8005f70:	e775      	b.n	8005e5e <_dtoa_r+0x3de>
 8005f72:	9e04      	ldr	r6, [sp, #16]
 8005f74:	465f      	mov	r7, fp
 8005f76:	e792      	b.n	8005e9e <_dtoa_r+0x41e>
 8005f78:	9900      	ldr	r1, [sp, #0]
 8005f7a:	4b50      	ldr	r3, [pc, #320]	; (80060bc <_dtoa_r+0x63c>)
 8005f7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005f80:	4431      	add	r1, r6
 8005f82:	9102      	str	r1, [sp, #8]
 8005f84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f86:	eeb0 9a47 	vmov.f32	s18, s14
 8005f8a:	eef0 9a67 	vmov.f32	s19, s15
 8005f8e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005f92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005f96:	2900      	cmp	r1, #0
 8005f98:	d044      	beq.n	8006024 <_dtoa_r+0x5a4>
 8005f9a:	494e      	ldr	r1, [pc, #312]	; (80060d4 <_dtoa_r+0x654>)
 8005f9c:	2000      	movs	r0, #0
 8005f9e:	f7fa fc75 	bl	800088c <__aeabi_ddiv>
 8005fa2:	ec53 2b19 	vmov	r2, r3, d9
 8005fa6:	f7fa f98f 	bl	80002c8 <__aeabi_dsub>
 8005faa:	9d00      	ldr	r5, [sp, #0]
 8005fac:	ec41 0b19 	vmov	d9, r0, r1
 8005fb0:	4649      	mov	r1, r9
 8005fb2:	4640      	mov	r0, r8
 8005fb4:	f7fa fdf0 	bl	8000b98 <__aeabi_d2iz>
 8005fb8:	4606      	mov	r6, r0
 8005fba:	f7fa fad3 	bl	8000564 <__aeabi_i2d>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	4640      	mov	r0, r8
 8005fc4:	4649      	mov	r1, r9
 8005fc6:	f7fa f97f 	bl	80002c8 <__aeabi_dsub>
 8005fca:	3630      	adds	r6, #48	; 0x30
 8005fcc:	f805 6b01 	strb.w	r6, [r5], #1
 8005fd0:	ec53 2b19 	vmov	r2, r3, d9
 8005fd4:	4680      	mov	r8, r0
 8005fd6:	4689      	mov	r9, r1
 8005fd8:	f7fa fda0 	bl	8000b1c <__aeabi_dcmplt>
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	d164      	bne.n	80060aa <_dtoa_r+0x62a>
 8005fe0:	4642      	mov	r2, r8
 8005fe2:	464b      	mov	r3, r9
 8005fe4:	4937      	ldr	r1, [pc, #220]	; (80060c4 <_dtoa_r+0x644>)
 8005fe6:	2000      	movs	r0, #0
 8005fe8:	f7fa f96e 	bl	80002c8 <__aeabi_dsub>
 8005fec:	ec53 2b19 	vmov	r2, r3, d9
 8005ff0:	f7fa fd94 	bl	8000b1c <__aeabi_dcmplt>
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	f040 80b6 	bne.w	8006166 <_dtoa_r+0x6e6>
 8005ffa:	9b02      	ldr	r3, [sp, #8]
 8005ffc:	429d      	cmp	r5, r3
 8005ffe:	f43f af7c 	beq.w	8005efa <_dtoa_r+0x47a>
 8006002:	4b31      	ldr	r3, [pc, #196]	; (80060c8 <_dtoa_r+0x648>)
 8006004:	ec51 0b19 	vmov	r0, r1, d9
 8006008:	2200      	movs	r2, #0
 800600a:	f7fa fb15 	bl	8000638 <__aeabi_dmul>
 800600e:	4b2e      	ldr	r3, [pc, #184]	; (80060c8 <_dtoa_r+0x648>)
 8006010:	ec41 0b19 	vmov	d9, r0, r1
 8006014:	2200      	movs	r2, #0
 8006016:	4640      	mov	r0, r8
 8006018:	4649      	mov	r1, r9
 800601a:	f7fa fb0d 	bl	8000638 <__aeabi_dmul>
 800601e:	4680      	mov	r8, r0
 8006020:	4689      	mov	r9, r1
 8006022:	e7c5      	b.n	8005fb0 <_dtoa_r+0x530>
 8006024:	ec51 0b17 	vmov	r0, r1, d7
 8006028:	f7fa fb06 	bl	8000638 <__aeabi_dmul>
 800602c:	9b02      	ldr	r3, [sp, #8]
 800602e:	9d00      	ldr	r5, [sp, #0]
 8006030:	930f      	str	r3, [sp, #60]	; 0x3c
 8006032:	ec41 0b19 	vmov	d9, r0, r1
 8006036:	4649      	mov	r1, r9
 8006038:	4640      	mov	r0, r8
 800603a:	f7fa fdad 	bl	8000b98 <__aeabi_d2iz>
 800603e:	4606      	mov	r6, r0
 8006040:	f7fa fa90 	bl	8000564 <__aeabi_i2d>
 8006044:	3630      	adds	r6, #48	; 0x30
 8006046:	4602      	mov	r2, r0
 8006048:	460b      	mov	r3, r1
 800604a:	4640      	mov	r0, r8
 800604c:	4649      	mov	r1, r9
 800604e:	f7fa f93b 	bl	80002c8 <__aeabi_dsub>
 8006052:	f805 6b01 	strb.w	r6, [r5], #1
 8006056:	9b02      	ldr	r3, [sp, #8]
 8006058:	429d      	cmp	r5, r3
 800605a:	4680      	mov	r8, r0
 800605c:	4689      	mov	r9, r1
 800605e:	f04f 0200 	mov.w	r2, #0
 8006062:	d124      	bne.n	80060ae <_dtoa_r+0x62e>
 8006064:	4b1b      	ldr	r3, [pc, #108]	; (80060d4 <_dtoa_r+0x654>)
 8006066:	ec51 0b19 	vmov	r0, r1, d9
 800606a:	f7fa f92f 	bl	80002cc <__adddf3>
 800606e:	4602      	mov	r2, r0
 8006070:	460b      	mov	r3, r1
 8006072:	4640      	mov	r0, r8
 8006074:	4649      	mov	r1, r9
 8006076:	f7fa fd6f 	bl	8000b58 <__aeabi_dcmpgt>
 800607a:	2800      	cmp	r0, #0
 800607c:	d173      	bne.n	8006166 <_dtoa_r+0x6e6>
 800607e:	ec53 2b19 	vmov	r2, r3, d9
 8006082:	4914      	ldr	r1, [pc, #80]	; (80060d4 <_dtoa_r+0x654>)
 8006084:	2000      	movs	r0, #0
 8006086:	f7fa f91f 	bl	80002c8 <__aeabi_dsub>
 800608a:	4602      	mov	r2, r0
 800608c:	460b      	mov	r3, r1
 800608e:	4640      	mov	r0, r8
 8006090:	4649      	mov	r1, r9
 8006092:	f7fa fd43 	bl	8000b1c <__aeabi_dcmplt>
 8006096:	2800      	cmp	r0, #0
 8006098:	f43f af2f 	beq.w	8005efa <_dtoa_r+0x47a>
 800609c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800609e:	1e6b      	subs	r3, r5, #1
 80060a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80060a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80060a6:	2b30      	cmp	r3, #48	; 0x30
 80060a8:	d0f8      	beq.n	800609c <_dtoa_r+0x61c>
 80060aa:	46bb      	mov	fp, r7
 80060ac:	e04a      	b.n	8006144 <_dtoa_r+0x6c4>
 80060ae:	4b06      	ldr	r3, [pc, #24]	; (80060c8 <_dtoa_r+0x648>)
 80060b0:	f7fa fac2 	bl	8000638 <__aeabi_dmul>
 80060b4:	4680      	mov	r8, r0
 80060b6:	4689      	mov	r9, r1
 80060b8:	e7bd      	b.n	8006036 <_dtoa_r+0x5b6>
 80060ba:	bf00      	nop
 80060bc:	08007da0 	.word	0x08007da0
 80060c0:	08007d78 	.word	0x08007d78
 80060c4:	3ff00000 	.word	0x3ff00000
 80060c8:	40240000 	.word	0x40240000
 80060cc:	401c0000 	.word	0x401c0000
 80060d0:	40140000 	.word	0x40140000
 80060d4:	3fe00000 	.word	0x3fe00000
 80060d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80060dc:	9d00      	ldr	r5, [sp, #0]
 80060de:	4642      	mov	r2, r8
 80060e0:	464b      	mov	r3, r9
 80060e2:	4630      	mov	r0, r6
 80060e4:	4639      	mov	r1, r7
 80060e6:	f7fa fbd1 	bl	800088c <__aeabi_ddiv>
 80060ea:	f7fa fd55 	bl	8000b98 <__aeabi_d2iz>
 80060ee:	9001      	str	r0, [sp, #4]
 80060f0:	f7fa fa38 	bl	8000564 <__aeabi_i2d>
 80060f4:	4642      	mov	r2, r8
 80060f6:	464b      	mov	r3, r9
 80060f8:	f7fa fa9e 	bl	8000638 <__aeabi_dmul>
 80060fc:	4602      	mov	r2, r0
 80060fe:	460b      	mov	r3, r1
 8006100:	4630      	mov	r0, r6
 8006102:	4639      	mov	r1, r7
 8006104:	f7fa f8e0 	bl	80002c8 <__aeabi_dsub>
 8006108:	9e01      	ldr	r6, [sp, #4]
 800610a:	9f04      	ldr	r7, [sp, #16]
 800610c:	3630      	adds	r6, #48	; 0x30
 800610e:	f805 6b01 	strb.w	r6, [r5], #1
 8006112:	9e00      	ldr	r6, [sp, #0]
 8006114:	1bae      	subs	r6, r5, r6
 8006116:	42b7      	cmp	r7, r6
 8006118:	4602      	mov	r2, r0
 800611a:	460b      	mov	r3, r1
 800611c:	d134      	bne.n	8006188 <_dtoa_r+0x708>
 800611e:	f7fa f8d5 	bl	80002cc <__adddf3>
 8006122:	4642      	mov	r2, r8
 8006124:	464b      	mov	r3, r9
 8006126:	4606      	mov	r6, r0
 8006128:	460f      	mov	r7, r1
 800612a:	f7fa fd15 	bl	8000b58 <__aeabi_dcmpgt>
 800612e:	b9c8      	cbnz	r0, 8006164 <_dtoa_r+0x6e4>
 8006130:	4642      	mov	r2, r8
 8006132:	464b      	mov	r3, r9
 8006134:	4630      	mov	r0, r6
 8006136:	4639      	mov	r1, r7
 8006138:	f7fa fce6 	bl	8000b08 <__aeabi_dcmpeq>
 800613c:	b110      	cbz	r0, 8006144 <_dtoa_r+0x6c4>
 800613e:	9b01      	ldr	r3, [sp, #4]
 8006140:	07db      	lsls	r3, r3, #31
 8006142:	d40f      	bmi.n	8006164 <_dtoa_r+0x6e4>
 8006144:	4651      	mov	r1, sl
 8006146:	4620      	mov	r0, r4
 8006148:	f000 fd86 	bl	8006c58 <_Bfree>
 800614c:	2300      	movs	r3, #0
 800614e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006150:	702b      	strb	r3, [r5, #0]
 8006152:	f10b 0301 	add.w	r3, fp, #1
 8006156:	6013      	str	r3, [r2, #0]
 8006158:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800615a:	2b00      	cmp	r3, #0
 800615c:	f43f ace2 	beq.w	8005b24 <_dtoa_r+0xa4>
 8006160:	601d      	str	r5, [r3, #0]
 8006162:	e4df      	b.n	8005b24 <_dtoa_r+0xa4>
 8006164:	465f      	mov	r7, fp
 8006166:	462b      	mov	r3, r5
 8006168:	461d      	mov	r5, r3
 800616a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800616e:	2a39      	cmp	r2, #57	; 0x39
 8006170:	d106      	bne.n	8006180 <_dtoa_r+0x700>
 8006172:	9a00      	ldr	r2, [sp, #0]
 8006174:	429a      	cmp	r2, r3
 8006176:	d1f7      	bne.n	8006168 <_dtoa_r+0x6e8>
 8006178:	9900      	ldr	r1, [sp, #0]
 800617a:	2230      	movs	r2, #48	; 0x30
 800617c:	3701      	adds	r7, #1
 800617e:	700a      	strb	r2, [r1, #0]
 8006180:	781a      	ldrb	r2, [r3, #0]
 8006182:	3201      	adds	r2, #1
 8006184:	701a      	strb	r2, [r3, #0]
 8006186:	e790      	b.n	80060aa <_dtoa_r+0x62a>
 8006188:	4ba3      	ldr	r3, [pc, #652]	; (8006418 <_dtoa_r+0x998>)
 800618a:	2200      	movs	r2, #0
 800618c:	f7fa fa54 	bl	8000638 <__aeabi_dmul>
 8006190:	2200      	movs	r2, #0
 8006192:	2300      	movs	r3, #0
 8006194:	4606      	mov	r6, r0
 8006196:	460f      	mov	r7, r1
 8006198:	f7fa fcb6 	bl	8000b08 <__aeabi_dcmpeq>
 800619c:	2800      	cmp	r0, #0
 800619e:	d09e      	beq.n	80060de <_dtoa_r+0x65e>
 80061a0:	e7d0      	b.n	8006144 <_dtoa_r+0x6c4>
 80061a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061a4:	2a00      	cmp	r2, #0
 80061a6:	f000 80ca 	beq.w	800633e <_dtoa_r+0x8be>
 80061aa:	9a07      	ldr	r2, [sp, #28]
 80061ac:	2a01      	cmp	r2, #1
 80061ae:	f300 80ad 	bgt.w	800630c <_dtoa_r+0x88c>
 80061b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061b4:	2a00      	cmp	r2, #0
 80061b6:	f000 80a5 	beq.w	8006304 <_dtoa_r+0x884>
 80061ba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80061be:	9e08      	ldr	r6, [sp, #32]
 80061c0:	9d05      	ldr	r5, [sp, #20]
 80061c2:	9a05      	ldr	r2, [sp, #20]
 80061c4:	441a      	add	r2, r3
 80061c6:	9205      	str	r2, [sp, #20]
 80061c8:	9a06      	ldr	r2, [sp, #24]
 80061ca:	2101      	movs	r1, #1
 80061cc:	441a      	add	r2, r3
 80061ce:	4620      	mov	r0, r4
 80061d0:	9206      	str	r2, [sp, #24]
 80061d2:	f000 fdf7 	bl	8006dc4 <__i2b>
 80061d6:	4607      	mov	r7, r0
 80061d8:	b165      	cbz	r5, 80061f4 <_dtoa_r+0x774>
 80061da:	9b06      	ldr	r3, [sp, #24]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	dd09      	ble.n	80061f4 <_dtoa_r+0x774>
 80061e0:	42ab      	cmp	r3, r5
 80061e2:	9a05      	ldr	r2, [sp, #20]
 80061e4:	bfa8      	it	ge
 80061e6:	462b      	movge	r3, r5
 80061e8:	1ad2      	subs	r2, r2, r3
 80061ea:	9205      	str	r2, [sp, #20]
 80061ec:	9a06      	ldr	r2, [sp, #24]
 80061ee:	1aed      	subs	r5, r5, r3
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	9306      	str	r3, [sp, #24]
 80061f4:	9b08      	ldr	r3, [sp, #32]
 80061f6:	b1f3      	cbz	r3, 8006236 <_dtoa_r+0x7b6>
 80061f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f000 80a3 	beq.w	8006346 <_dtoa_r+0x8c6>
 8006200:	2e00      	cmp	r6, #0
 8006202:	dd10      	ble.n	8006226 <_dtoa_r+0x7a6>
 8006204:	4639      	mov	r1, r7
 8006206:	4632      	mov	r2, r6
 8006208:	4620      	mov	r0, r4
 800620a:	f000 fe9b 	bl	8006f44 <__pow5mult>
 800620e:	4652      	mov	r2, sl
 8006210:	4601      	mov	r1, r0
 8006212:	4607      	mov	r7, r0
 8006214:	4620      	mov	r0, r4
 8006216:	f000 fdeb 	bl	8006df0 <__multiply>
 800621a:	4651      	mov	r1, sl
 800621c:	4680      	mov	r8, r0
 800621e:	4620      	mov	r0, r4
 8006220:	f000 fd1a 	bl	8006c58 <_Bfree>
 8006224:	46c2      	mov	sl, r8
 8006226:	9b08      	ldr	r3, [sp, #32]
 8006228:	1b9a      	subs	r2, r3, r6
 800622a:	d004      	beq.n	8006236 <_dtoa_r+0x7b6>
 800622c:	4651      	mov	r1, sl
 800622e:	4620      	mov	r0, r4
 8006230:	f000 fe88 	bl	8006f44 <__pow5mult>
 8006234:	4682      	mov	sl, r0
 8006236:	2101      	movs	r1, #1
 8006238:	4620      	mov	r0, r4
 800623a:	f000 fdc3 	bl	8006dc4 <__i2b>
 800623e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006240:	2b00      	cmp	r3, #0
 8006242:	4606      	mov	r6, r0
 8006244:	f340 8081 	ble.w	800634a <_dtoa_r+0x8ca>
 8006248:	461a      	mov	r2, r3
 800624a:	4601      	mov	r1, r0
 800624c:	4620      	mov	r0, r4
 800624e:	f000 fe79 	bl	8006f44 <__pow5mult>
 8006252:	9b07      	ldr	r3, [sp, #28]
 8006254:	2b01      	cmp	r3, #1
 8006256:	4606      	mov	r6, r0
 8006258:	dd7a      	ble.n	8006350 <_dtoa_r+0x8d0>
 800625a:	f04f 0800 	mov.w	r8, #0
 800625e:	6933      	ldr	r3, [r6, #16]
 8006260:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006264:	6918      	ldr	r0, [r3, #16]
 8006266:	f000 fd5f 	bl	8006d28 <__hi0bits>
 800626a:	f1c0 0020 	rsb	r0, r0, #32
 800626e:	9b06      	ldr	r3, [sp, #24]
 8006270:	4418      	add	r0, r3
 8006272:	f010 001f 	ands.w	r0, r0, #31
 8006276:	f000 8094 	beq.w	80063a2 <_dtoa_r+0x922>
 800627a:	f1c0 0320 	rsb	r3, r0, #32
 800627e:	2b04      	cmp	r3, #4
 8006280:	f340 8085 	ble.w	800638e <_dtoa_r+0x90e>
 8006284:	9b05      	ldr	r3, [sp, #20]
 8006286:	f1c0 001c 	rsb	r0, r0, #28
 800628a:	4403      	add	r3, r0
 800628c:	9305      	str	r3, [sp, #20]
 800628e:	9b06      	ldr	r3, [sp, #24]
 8006290:	4403      	add	r3, r0
 8006292:	4405      	add	r5, r0
 8006294:	9306      	str	r3, [sp, #24]
 8006296:	9b05      	ldr	r3, [sp, #20]
 8006298:	2b00      	cmp	r3, #0
 800629a:	dd05      	ble.n	80062a8 <_dtoa_r+0x828>
 800629c:	4651      	mov	r1, sl
 800629e:	461a      	mov	r2, r3
 80062a0:	4620      	mov	r0, r4
 80062a2:	f000 fea9 	bl	8006ff8 <__lshift>
 80062a6:	4682      	mov	sl, r0
 80062a8:	9b06      	ldr	r3, [sp, #24]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	dd05      	ble.n	80062ba <_dtoa_r+0x83a>
 80062ae:	4631      	mov	r1, r6
 80062b0:	461a      	mov	r2, r3
 80062b2:	4620      	mov	r0, r4
 80062b4:	f000 fea0 	bl	8006ff8 <__lshift>
 80062b8:	4606      	mov	r6, r0
 80062ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d072      	beq.n	80063a6 <_dtoa_r+0x926>
 80062c0:	4631      	mov	r1, r6
 80062c2:	4650      	mov	r0, sl
 80062c4:	f000 ff04 	bl	80070d0 <__mcmp>
 80062c8:	2800      	cmp	r0, #0
 80062ca:	da6c      	bge.n	80063a6 <_dtoa_r+0x926>
 80062cc:	2300      	movs	r3, #0
 80062ce:	4651      	mov	r1, sl
 80062d0:	220a      	movs	r2, #10
 80062d2:	4620      	mov	r0, r4
 80062d4:	f000 fce2 	bl	8006c9c <__multadd>
 80062d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062da:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80062de:	4682      	mov	sl, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f000 81b0 	beq.w	8006646 <_dtoa_r+0xbc6>
 80062e6:	2300      	movs	r3, #0
 80062e8:	4639      	mov	r1, r7
 80062ea:	220a      	movs	r2, #10
 80062ec:	4620      	mov	r0, r4
 80062ee:	f000 fcd5 	bl	8006c9c <__multadd>
 80062f2:	9b01      	ldr	r3, [sp, #4]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	4607      	mov	r7, r0
 80062f8:	f300 8096 	bgt.w	8006428 <_dtoa_r+0x9a8>
 80062fc:	9b07      	ldr	r3, [sp, #28]
 80062fe:	2b02      	cmp	r3, #2
 8006300:	dc59      	bgt.n	80063b6 <_dtoa_r+0x936>
 8006302:	e091      	b.n	8006428 <_dtoa_r+0x9a8>
 8006304:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006306:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800630a:	e758      	b.n	80061be <_dtoa_r+0x73e>
 800630c:	9b04      	ldr	r3, [sp, #16]
 800630e:	1e5e      	subs	r6, r3, #1
 8006310:	9b08      	ldr	r3, [sp, #32]
 8006312:	42b3      	cmp	r3, r6
 8006314:	bfbf      	itttt	lt
 8006316:	9b08      	ldrlt	r3, [sp, #32]
 8006318:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800631a:	9608      	strlt	r6, [sp, #32]
 800631c:	1af3      	sublt	r3, r6, r3
 800631e:	bfb4      	ite	lt
 8006320:	18d2      	addlt	r2, r2, r3
 8006322:	1b9e      	subge	r6, r3, r6
 8006324:	9b04      	ldr	r3, [sp, #16]
 8006326:	bfbc      	itt	lt
 8006328:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800632a:	2600      	movlt	r6, #0
 800632c:	2b00      	cmp	r3, #0
 800632e:	bfb7      	itett	lt
 8006330:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006334:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006338:	1a9d      	sublt	r5, r3, r2
 800633a:	2300      	movlt	r3, #0
 800633c:	e741      	b.n	80061c2 <_dtoa_r+0x742>
 800633e:	9e08      	ldr	r6, [sp, #32]
 8006340:	9d05      	ldr	r5, [sp, #20]
 8006342:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006344:	e748      	b.n	80061d8 <_dtoa_r+0x758>
 8006346:	9a08      	ldr	r2, [sp, #32]
 8006348:	e770      	b.n	800622c <_dtoa_r+0x7ac>
 800634a:	9b07      	ldr	r3, [sp, #28]
 800634c:	2b01      	cmp	r3, #1
 800634e:	dc19      	bgt.n	8006384 <_dtoa_r+0x904>
 8006350:	9b02      	ldr	r3, [sp, #8]
 8006352:	b9bb      	cbnz	r3, 8006384 <_dtoa_r+0x904>
 8006354:	9b03      	ldr	r3, [sp, #12]
 8006356:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800635a:	b99b      	cbnz	r3, 8006384 <_dtoa_r+0x904>
 800635c:	9b03      	ldr	r3, [sp, #12]
 800635e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006362:	0d1b      	lsrs	r3, r3, #20
 8006364:	051b      	lsls	r3, r3, #20
 8006366:	b183      	cbz	r3, 800638a <_dtoa_r+0x90a>
 8006368:	9b05      	ldr	r3, [sp, #20]
 800636a:	3301      	adds	r3, #1
 800636c:	9305      	str	r3, [sp, #20]
 800636e:	9b06      	ldr	r3, [sp, #24]
 8006370:	3301      	adds	r3, #1
 8006372:	9306      	str	r3, [sp, #24]
 8006374:	f04f 0801 	mov.w	r8, #1
 8006378:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800637a:	2b00      	cmp	r3, #0
 800637c:	f47f af6f 	bne.w	800625e <_dtoa_r+0x7de>
 8006380:	2001      	movs	r0, #1
 8006382:	e774      	b.n	800626e <_dtoa_r+0x7ee>
 8006384:	f04f 0800 	mov.w	r8, #0
 8006388:	e7f6      	b.n	8006378 <_dtoa_r+0x8f8>
 800638a:	4698      	mov	r8, r3
 800638c:	e7f4      	b.n	8006378 <_dtoa_r+0x8f8>
 800638e:	d082      	beq.n	8006296 <_dtoa_r+0x816>
 8006390:	9a05      	ldr	r2, [sp, #20]
 8006392:	331c      	adds	r3, #28
 8006394:	441a      	add	r2, r3
 8006396:	9205      	str	r2, [sp, #20]
 8006398:	9a06      	ldr	r2, [sp, #24]
 800639a:	441a      	add	r2, r3
 800639c:	441d      	add	r5, r3
 800639e:	9206      	str	r2, [sp, #24]
 80063a0:	e779      	b.n	8006296 <_dtoa_r+0x816>
 80063a2:	4603      	mov	r3, r0
 80063a4:	e7f4      	b.n	8006390 <_dtoa_r+0x910>
 80063a6:	9b04      	ldr	r3, [sp, #16]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	dc37      	bgt.n	800641c <_dtoa_r+0x99c>
 80063ac:	9b07      	ldr	r3, [sp, #28]
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	dd34      	ble.n	800641c <_dtoa_r+0x99c>
 80063b2:	9b04      	ldr	r3, [sp, #16]
 80063b4:	9301      	str	r3, [sp, #4]
 80063b6:	9b01      	ldr	r3, [sp, #4]
 80063b8:	b963      	cbnz	r3, 80063d4 <_dtoa_r+0x954>
 80063ba:	4631      	mov	r1, r6
 80063bc:	2205      	movs	r2, #5
 80063be:	4620      	mov	r0, r4
 80063c0:	f000 fc6c 	bl	8006c9c <__multadd>
 80063c4:	4601      	mov	r1, r0
 80063c6:	4606      	mov	r6, r0
 80063c8:	4650      	mov	r0, sl
 80063ca:	f000 fe81 	bl	80070d0 <__mcmp>
 80063ce:	2800      	cmp	r0, #0
 80063d0:	f73f adbb 	bgt.w	8005f4a <_dtoa_r+0x4ca>
 80063d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063d6:	9d00      	ldr	r5, [sp, #0]
 80063d8:	ea6f 0b03 	mvn.w	fp, r3
 80063dc:	f04f 0800 	mov.w	r8, #0
 80063e0:	4631      	mov	r1, r6
 80063e2:	4620      	mov	r0, r4
 80063e4:	f000 fc38 	bl	8006c58 <_Bfree>
 80063e8:	2f00      	cmp	r7, #0
 80063ea:	f43f aeab 	beq.w	8006144 <_dtoa_r+0x6c4>
 80063ee:	f1b8 0f00 	cmp.w	r8, #0
 80063f2:	d005      	beq.n	8006400 <_dtoa_r+0x980>
 80063f4:	45b8      	cmp	r8, r7
 80063f6:	d003      	beq.n	8006400 <_dtoa_r+0x980>
 80063f8:	4641      	mov	r1, r8
 80063fa:	4620      	mov	r0, r4
 80063fc:	f000 fc2c 	bl	8006c58 <_Bfree>
 8006400:	4639      	mov	r1, r7
 8006402:	4620      	mov	r0, r4
 8006404:	f000 fc28 	bl	8006c58 <_Bfree>
 8006408:	e69c      	b.n	8006144 <_dtoa_r+0x6c4>
 800640a:	2600      	movs	r6, #0
 800640c:	4637      	mov	r7, r6
 800640e:	e7e1      	b.n	80063d4 <_dtoa_r+0x954>
 8006410:	46bb      	mov	fp, r7
 8006412:	4637      	mov	r7, r6
 8006414:	e599      	b.n	8005f4a <_dtoa_r+0x4ca>
 8006416:	bf00      	nop
 8006418:	40240000 	.word	0x40240000
 800641c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800641e:	2b00      	cmp	r3, #0
 8006420:	f000 80c8 	beq.w	80065b4 <_dtoa_r+0xb34>
 8006424:	9b04      	ldr	r3, [sp, #16]
 8006426:	9301      	str	r3, [sp, #4]
 8006428:	2d00      	cmp	r5, #0
 800642a:	dd05      	ble.n	8006438 <_dtoa_r+0x9b8>
 800642c:	4639      	mov	r1, r7
 800642e:	462a      	mov	r2, r5
 8006430:	4620      	mov	r0, r4
 8006432:	f000 fde1 	bl	8006ff8 <__lshift>
 8006436:	4607      	mov	r7, r0
 8006438:	f1b8 0f00 	cmp.w	r8, #0
 800643c:	d05b      	beq.n	80064f6 <_dtoa_r+0xa76>
 800643e:	6879      	ldr	r1, [r7, #4]
 8006440:	4620      	mov	r0, r4
 8006442:	f000 fbc9 	bl	8006bd8 <_Balloc>
 8006446:	4605      	mov	r5, r0
 8006448:	b928      	cbnz	r0, 8006456 <_dtoa_r+0x9d6>
 800644a:	4b83      	ldr	r3, [pc, #524]	; (8006658 <_dtoa_r+0xbd8>)
 800644c:	4602      	mov	r2, r0
 800644e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006452:	f7ff bb2e 	b.w	8005ab2 <_dtoa_r+0x32>
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	3202      	adds	r2, #2
 800645a:	0092      	lsls	r2, r2, #2
 800645c:	f107 010c 	add.w	r1, r7, #12
 8006460:	300c      	adds	r0, #12
 8006462:	f7ff fa76 	bl	8005952 <memcpy>
 8006466:	2201      	movs	r2, #1
 8006468:	4629      	mov	r1, r5
 800646a:	4620      	mov	r0, r4
 800646c:	f000 fdc4 	bl	8006ff8 <__lshift>
 8006470:	9b00      	ldr	r3, [sp, #0]
 8006472:	3301      	adds	r3, #1
 8006474:	9304      	str	r3, [sp, #16]
 8006476:	e9dd 2300 	ldrd	r2, r3, [sp]
 800647a:	4413      	add	r3, r2
 800647c:	9308      	str	r3, [sp, #32]
 800647e:	9b02      	ldr	r3, [sp, #8]
 8006480:	f003 0301 	and.w	r3, r3, #1
 8006484:	46b8      	mov	r8, r7
 8006486:	9306      	str	r3, [sp, #24]
 8006488:	4607      	mov	r7, r0
 800648a:	9b04      	ldr	r3, [sp, #16]
 800648c:	4631      	mov	r1, r6
 800648e:	3b01      	subs	r3, #1
 8006490:	4650      	mov	r0, sl
 8006492:	9301      	str	r3, [sp, #4]
 8006494:	f7ff fa6b 	bl	800596e <quorem>
 8006498:	4641      	mov	r1, r8
 800649a:	9002      	str	r0, [sp, #8]
 800649c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80064a0:	4650      	mov	r0, sl
 80064a2:	f000 fe15 	bl	80070d0 <__mcmp>
 80064a6:	463a      	mov	r2, r7
 80064a8:	9005      	str	r0, [sp, #20]
 80064aa:	4631      	mov	r1, r6
 80064ac:	4620      	mov	r0, r4
 80064ae:	f000 fe2b 	bl	8007108 <__mdiff>
 80064b2:	68c2      	ldr	r2, [r0, #12]
 80064b4:	4605      	mov	r5, r0
 80064b6:	bb02      	cbnz	r2, 80064fa <_dtoa_r+0xa7a>
 80064b8:	4601      	mov	r1, r0
 80064ba:	4650      	mov	r0, sl
 80064bc:	f000 fe08 	bl	80070d0 <__mcmp>
 80064c0:	4602      	mov	r2, r0
 80064c2:	4629      	mov	r1, r5
 80064c4:	4620      	mov	r0, r4
 80064c6:	9209      	str	r2, [sp, #36]	; 0x24
 80064c8:	f000 fbc6 	bl	8006c58 <_Bfree>
 80064cc:	9b07      	ldr	r3, [sp, #28]
 80064ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064d0:	9d04      	ldr	r5, [sp, #16]
 80064d2:	ea43 0102 	orr.w	r1, r3, r2
 80064d6:	9b06      	ldr	r3, [sp, #24]
 80064d8:	4319      	orrs	r1, r3
 80064da:	d110      	bne.n	80064fe <_dtoa_r+0xa7e>
 80064dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80064e0:	d029      	beq.n	8006536 <_dtoa_r+0xab6>
 80064e2:	9b05      	ldr	r3, [sp, #20]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	dd02      	ble.n	80064ee <_dtoa_r+0xa6e>
 80064e8:	9b02      	ldr	r3, [sp, #8]
 80064ea:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80064ee:	9b01      	ldr	r3, [sp, #4]
 80064f0:	f883 9000 	strb.w	r9, [r3]
 80064f4:	e774      	b.n	80063e0 <_dtoa_r+0x960>
 80064f6:	4638      	mov	r0, r7
 80064f8:	e7ba      	b.n	8006470 <_dtoa_r+0x9f0>
 80064fa:	2201      	movs	r2, #1
 80064fc:	e7e1      	b.n	80064c2 <_dtoa_r+0xa42>
 80064fe:	9b05      	ldr	r3, [sp, #20]
 8006500:	2b00      	cmp	r3, #0
 8006502:	db04      	blt.n	800650e <_dtoa_r+0xa8e>
 8006504:	9907      	ldr	r1, [sp, #28]
 8006506:	430b      	orrs	r3, r1
 8006508:	9906      	ldr	r1, [sp, #24]
 800650a:	430b      	orrs	r3, r1
 800650c:	d120      	bne.n	8006550 <_dtoa_r+0xad0>
 800650e:	2a00      	cmp	r2, #0
 8006510:	dded      	ble.n	80064ee <_dtoa_r+0xa6e>
 8006512:	4651      	mov	r1, sl
 8006514:	2201      	movs	r2, #1
 8006516:	4620      	mov	r0, r4
 8006518:	f000 fd6e 	bl	8006ff8 <__lshift>
 800651c:	4631      	mov	r1, r6
 800651e:	4682      	mov	sl, r0
 8006520:	f000 fdd6 	bl	80070d0 <__mcmp>
 8006524:	2800      	cmp	r0, #0
 8006526:	dc03      	bgt.n	8006530 <_dtoa_r+0xab0>
 8006528:	d1e1      	bne.n	80064ee <_dtoa_r+0xa6e>
 800652a:	f019 0f01 	tst.w	r9, #1
 800652e:	d0de      	beq.n	80064ee <_dtoa_r+0xa6e>
 8006530:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006534:	d1d8      	bne.n	80064e8 <_dtoa_r+0xa68>
 8006536:	9a01      	ldr	r2, [sp, #4]
 8006538:	2339      	movs	r3, #57	; 0x39
 800653a:	7013      	strb	r3, [r2, #0]
 800653c:	462b      	mov	r3, r5
 800653e:	461d      	mov	r5, r3
 8006540:	3b01      	subs	r3, #1
 8006542:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006546:	2a39      	cmp	r2, #57	; 0x39
 8006548:	d06c      	beq.n	8006624 <_dtoa_r+0xba4>
 800654a:	3201      	adds	r2, #1
 800654c:	701a      	strb	r2, [r3, #0]
 800654e:	e747      	b.n	80063e0 <_dtoa_r+0x960>
 8006550:	2a00      	cmp	r2, #0
 8006552:	dd07      	ble.n	8006564 <_dtoa_r+0xae4>
 8006554:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006558:	d0ed      	beq.n	8006536 <_dtoa_r+0xab6>
 800655a:	9a01      	ldr	r2, [sp, #4]
 800655c:	f109 0301 	add.w	r3, r9, #1
 8006560:	7013      	strb	r3, [r2, #0]
 8006562:	e73d      	b.n	80063e0 <_dtoa_r+0x960>
 8006564:	9b04      	ldr	r3, [sp, #16]
 8006566:	9a08      	ldr	r2, [sp, #32]
 8006568:	f803 9c01 	strb.w	r9, [r3, #-1]
 800656c:	4293      	cmp	r3, r2
 800656e:	d043      	beq.n	80065f8 <_dtoa_r+0xb78>
 8006570:	4651      	mov	r1, sl
 8006572:	2300      	movs	r3, #0
 8006574:	220a      	movs	r2, #10
 8006576:	4620      	mov	r0, r4
 8006578:	f000 fb90 	bl	8006c9c <__multadd>
 800657c:	45b8      	cmp	r8, r7
 800657e:	4682      	mov	sl, r0
 8006580:	f04f 0300 	mov.w	r3, #0
 8006584:	f04f 020a 	mov.w	r2, #10
 8006588:	4641      	mov	r1, r8
 800658a:	4620      	mov	r0, r4
 800658c:	d107      	bne.n	800659e <_dtoa_r+0xb1e>
 800658e:	f000 fb85 	bl	8006c9c <__multadd>
 8006592:	4680      	mov	r8, r0
 8006594:	4607      	mov	r7, r0
 8006596:	9b04      	ldr	r3, [sp, #16]
 8006598:	3301      	adds	r3, #1
 800659a:	9304      	str	r3, [sp, #16]
 800659c:	e775      	b.n	800648a <_dtoa_r+0xa0a>
 800659e:	f000 fb7d 	bl	8006c9c <__multadd>
 80065a2:	4639      	mov	r1, r7
 80065a4:	4680      	mov	r8, r0
 80065a6:	2300      	movs	r3, #0
 80065a8:	220a      	movs	r2, #10
 80065aa:	4620      	mov	r0, r4
 80065ac:	f000 fb76 	bl	8006c9c <__multadd>
 80065b0:	4607      	mov	r7, r0
 80065b2:	e7f0      	b.n	8006596 <_dtoa_r+0xb16>
 80065b4:	9b04      	ldr	r3, [sp, #16]
 80065b6:	9301      	str	r3, [sp, #4]
 80065b8:	9d00      	ldr	r5, [sp, #0]
 80065ba:	4631      	mov	r1, r6
 80065bc:	4650      	mov	r0, sl
 80065be:	f7ff f9d6 	bl	800596e <quorem>
 80065c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80065c6:	9b00      	ldr	r3, [sp, #0]
 80065c8:	f805 9b01 	strb.w	r9, [r5], #1
 80065cc:	1aea      	subs	r2, r5, r3
 80065ce:	9b01      	ldr	r3, [sp, #4]
 80065d0:	4293      	cmp	r3, r2
 80065d2:	dd07      	ble.n	80065e4 <_dtoa_r+0xb64>
 80065d4:	4651      	mov	r1, sl
 80065d6:	2300      	movs	r3, #0
 80065d8:	220a      	movs	r2, #10
 80065da:	4620      	mov	r0, r4
 80065dc:	f000 fb5e 	bl	8006c9c <__multadd>
 80065e0:	4682      	mov	sl, r0
 80065e2:	e7ea      	b.n	80065ba <_dtoa_r+0xb3a>
 80065e4:	9b01      	ldr	r3, [sp, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	bfc8      	it	gt
 80065ea:	461d      	movgt	r5, r3
 80065ec:	9b00      	ldr	r3, [sp, #0]
 80065ee:	bfd8      	it	le
 80065f0:	2501      	movle	r5, #1
 80065f2:	441d      	add	r5, r3
 80065f4:	f04f 0800 	mov.w	r8, #0
 80065f8:	4651      	mov	r1, sl
 80065fa:	2201      	movs	r2, #1
 80065fc:	4620      	mov	r0, r4
 80065fe:	f000 fcfb 	bl	8006ff8 <__lshift>
 8006602:	4631      	mov	r1, r6
 8006604:	4682      	mov	sl, r0
 8006606:	f000 fd63 	bl	80070d0 <__mcmp>
 800660a:	2800      	cmp	r0, #0
 800660c:	dc96      	bgt.n	800653c <_dtoa_r+0xabc>
 800660e:	d102      	bne.n	8006616 <_dtoa_r+0xb96>
 8006610:	f019 0f01 	tst.w	r9, #1
 8006614:	d192      	bne.n	800653c <_dtoa_r+0xabc>
 8006616:	462b      	mov	r3, r5
 8006618:	461d      	mov	r5, r3
 800661a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800661e:	2a30      	cmp	r2, #48	; 0x30
 8006620:	d0fa      	beq.n	8006618 <_dtoa_r+0xb98>
 8006622:	e6dd      	b.n	80063e0 <_dtoa_r+0x960>
 8006624:	9a00      	ldr	r2, [sp, #0]
 8006626:	429a      	cmp	r2, r3
 8006628:	d189      	bne.n	800653e <_dtoa_r+0xabe>
 800662a:	f10b 0b01 	add.w	fp, fp, #1
 800662e:	2331      	movs	r3, #49	; 0x31
 8006630:	e796      	b.n	8006560 <_dtoa_r+0xae0>
 8006632:	4b0a      	ldr	r3, [pc, #40]	; (800665c <_dtoa_r+0xbdc>)
 8006634:	f7ff ba99 	b.w	8005b6a <_dtoa_r+0xea>
 8006638:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800663a:	2b00      	cmp	r3, #0
 800663c:	f47f aa6d 	bne.w	8005b1a <_dtoa_r+0x9a>
 8006640:	4b07      	ldr	r3, [pc, #28]	; (8006660 <_dtoa_r+0xbe0>)
 8006642:	f7ff ba92 	b.w	8005b6a <_dtoa_r+0xea>
 8006646:	9b01      	ldr	r3, [sp, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	dcb5      	bgt.n	80065b8 <_dtoa_r+0xb38>
 800664c:	9b07      	ldr	r3, [sp, #28]
 800664e:	2b02      	cmp	r3, #2
 8006650:	f73f aeb1 	bgt.w	80063b6 <_dtoa_r+0x936>
 8006654:	e7b0      	b.n	80065b8 <_dtoa_r+0xb38>
 8006656:	bf00      	nop
 8006658:	08007cf8 	.word	0x08007cf8
 800665c:	08007c58 	.word	0x08007c58
 8006660:	08007c7c 	.word	0x08007c7c

08006664 <__ssputs_r>:
 8006664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006668:	688e      	ldr	r6, [r1, #8]
 800666a:	461f      	mov	r7, r3
 800666c:	42be      	cmp	r6, r7
 800666e:	680b      	ldr	r3, [r1, #0]
 8006670:	4682      	mov	sl, r0
 8006672:	460c      	mov	r4, r1
 8006674:	4690      	mov	r8, r2
 8006676:	d82c      	bhi.n	80066d2 <__ssputs_r+0x6e>
 8006678:	898a      	ldrh	r2, [r1, #12]
 800667a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800667e:	d026      	beq.n	80066ce <__ssputs_r+0x6a>
 8006680:	6965      	ldr	r5, [r4, #20]
 8006682:	6909      	ldr	r1, [r1, #16]
 8006684:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006688:	eba3 0901 	sub.w	r9, r3, r1
 800668c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006690:	1c7b      	adds	r3, r7, #1
 8006692:	444b      	add	r3, r9
 8006694:	106d      	asrs	r5, r5, #1
 8006696:	429d      	cmp	r5, r3
 8006698:	bf38      	it	cc
 800669a:	461d      	movcc	r5, r3
 800669c:	0553      	lsls	r3, r2, #21
 800669e:	d527      	bpl.n	80066f0 <__ssputs_r+0x8c>
 80066a0:	4629      	mov	r1, r5
 80066a2:	f000 f95f 	bl	8006964 <_malloc_r>
 80066a6:	4606      	mov	r6, r0
 80066a8:	b360      	cbz	r0, 8006704 <__ssputs_r+0xa0>
 80066aa:	6921      	ldr	r1, [r4, #16]
 80066ac:	464a      	mov	r2, r9
 80066ae:	f7ff f950 	bl	8005952 <memcpy>
 80066b2:	89a3      	ldrh	r3, [r4, #12]
 80066b4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80066b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066bc:	81a3      	strh	r3, [r4, #12]
 80066be:	6126      	str	r6, [r4, #16]
 80066c0:	6165      	str	r5, [r4, #20]
 80066c2:	444e      	add	r6, r9
 80066c4:	eba5 0509 	sub.w	r5, r5, r9
 80066c8:	6026      	str	r6, [r4, #0]
 80066ca:	60a5      	str	r5, [r4, #8]
 80066cc:	463e      	mov	r6, r7
 80066ce:	42be      	cmp	r6, r7
 80066d0:	d900      	bls.n	80066d4 <__ssputs_r+0x70>
 80066d2:	463e      	mov	r6, r7
 80066d4:	6820      	ldr	r0, [r4, #0]
 80066d6:	4632      	mov	r2, r6
 80066d8:	4641      	mov	r1, r8
 80066da:	f000 fe6b 	bl	80073b4 <memmove>
 80066de:	68a3      	ldr	r3, [r4, #8]
 80066e0:	1b9b      	subs	r3, r3, r6
 80066e2:	60a3      	str	r3, [r4, #8]
 80066e4:	6823      	ldr	r3, [r4, #0]
 80066e6:	4433      	add	r3, r6
 80066e8:	6023      	str	r3, [r4, #0]
 80066ea:	2000      	movs	r0, #0
 80066ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066f0:	462a      	mov	r2, r5
 80066f2:	f000 fe30 	bl	8007356 <_realloc_r>
 80066f6:	4606      	mov	r6, r0
 80066f8:	2800      	cmp	r0, #0
 80066fa:	d1e0      	bne.n	80066be <__ssputs_r+0x5a>
 80066fc:	6921      	ldr	r1, [r4, #16]
 80066fe:	4650      	mov	r0, sl
 8006700:	f000 fefc 	bl	80074fc <_free_r>
 8006704:	230c      	movs	r3, #12
 8006706:	f8ca 3000 	str.w	r3, [sl]
 800670a:	89a3      	ldrh	r3, [r4, #12]
 800670c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006710:	81a3      	strh	r3, [r4, #12]
 8006712:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006716:	e7e9      	b.n	80066ec <__ssputs_r+0x88>

08006718 <_svfiprintf_r>:
 8006718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800671c:	4698      	mov	r8, r3
 800671e:	898b      	ldrh	r3, [r1, #12]
 8006720:	061b      	lsls	r3, r3, #24
 8006722:	b09d      	sub	sp, #116	; 0x74
 8006724:	4607      	mov	r7, r0
 8006726:	460d      	mov	r5, r1
 8006728:	4614      	mov	r4, r2
 800672a:	d50e      	bpl.n	800674a <_svfiprintf_r+0x32>
 800672c:	690b      	ldr	r3, [r1, #16]
 800672e:	b963      	cbnz	r3, 800674a <_svfiprintf_r+0x32>
 8006730:	2140      	movs	r1, #64	; 0x40
 8006732:	f000 f917 	bl	8006964 <_malloc_r>
 8006736:	6028      	str	r0, [r5, #0]
 8006738:	6128      	str	r0, [r5, #16]
 800673a:	b920      	cbnz	r0, 8006746 <_svfiprintf_r+0x2e>
 800673c:	230c      	movs	r3, #12
 800673e:	603b      	str	r3, [r7, #0]
 8006740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006744:	e0d0      	b.n	80068e8 <_svfiprintf_r+0x1d0>
 8006746:	2340      	movs	r3, #64	; 0x40
 8006748:	616b      	str	r3, [r5, #20]
 800674a:	2300      	movs	r3, #0
 800674c:	9309      	str	r3, [sp, #36]	; 0x24
 800674e:	2320      	movs	r3, #32
 8006750:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006754:	f8cd 800c 	str.w	r8, [sp, #12]
 8006758:	2330      	movs	r3, #48	; 0x30
 800675a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006900 <_svfiprintf_r+0x1e8>
 800675e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006762:	f04f 0901 	mov.w	r9, #1
 8006766:	4623      	mov	r3, r4
 8006768:	469a      	mov	sl, r3
 800676a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800676e:	b10a      	cbz	r2, 8006774 <_svfiprintf_r+0x5c>
 8006770:	2a25      	cmp	r2, #37	; 0x25
 8006772:	d1f9      	bne.n	8006768 <_svfiprintf_r+0x50>
 8006774:	ebba 0b04 	subs.w	fp, sl, r4
 8006778:	d00b      	beq.n	8006792 <_svfiprintf_r+0x7a>
 800677a:	465b      	mov	r3, fp
 800677c:	4622      	mov	r2, r4
 800677e:	4629      	mov	r1, r5
 8006780:	4638      	mov	r0, r7
 8006782:	f7ff ff6f 	bl	8006664 <__ssputs_r>
 8006786:	3001      	adds	r0, #1
 8006788:	f000 80a9 	beq.w	80068de <_svfiprintf_r+0x1c6>
 800678c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800678e:	445a      	add	r2, fp
 8006790:	9209      	str	r2, [sp, #36]	; 0x24
 8006792:	f89a 3000 	ldrb.w	r3, [sl]
 8006796:	2b00      	cmp	r3, #0
 8006798:	f000 80a1 	beq.w	80068de <_svfiprintf_r+0x1c6>
 800679c:	2300      	movs	r3, #0
 800679e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067a6:	f10a 0a01 	add.w	sl, sl, #1
 80067aa:	9304      	str	r3, [sp, #16]
 80067ac:	9307      	str	r3, [sp, #28]
 80067ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067b2:	931a      	str	r3, [sp, #104]	; 0x68
 80067b4:	4654      	mov	r4, sl
 80067b6:	2205      	movs	r2, #5
 80067b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067bc:	4850      	ldr	r0, [pc, #320]	; (8006900 <_svfiprintf_r+0x1e8>)
 80067be:	f7f9 fd27 	bl	8000210 <memchr>
 80067c2:	9a04      	ldr	r2, [sp, #16]
 80067c4:	b9d8      	cbnz	r0, 80067fe <_svfiprintf_r+0xe6>
 80067c6:	06d0      	lsls	r0, r2, #27
 80067c8:	bf44      	itt	mi
 80067ca:	2320      	movmi	r3, #32
 80067cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067d0:	0711      	lsls	r1, r2, #28
 80067d2:	bf44      	itt	mi
 80067d4:	232b      	movmi	r3, #43	; 0x2b
 80067d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067da:	f89a 3000 	ldrb.w	r3, [sl]
 80067de:	2b2a      	cmp	r3, #42	; 0x2a
 80067e0:	d015      	beq.n	800680e <_svfiprintf_r+0xf6>
 80067e2:	9a07      	ldr	r2, [sp, #28]
 80067e4:	4654      	mov	r4, sl
 80067e6:	2000      	movs	r0, #0
 80067e8:	f04f 0c0a 	mov.w	ip, #10
 80067ec:	4621      	mov	r1, r4
 80067ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067f2:	3b30      	subs	r3, #48	; 0x30
 80067f4:	2b09      	cmp	r3, #9
 80067f6:	d94d      	bls.n	8006894 <_svfiprintf_r+0x17c>
 80067f8:	b1b0      	cbz	r0, 8006828 <_svfiprintf_r+0x110>
 80067fa:	9207      	str	r2, [sp, #28]
 80067fc:	e014      	b.n	8006828 <_svfiprintf_r+0x110>
 80067fe:	eba0 0308 	sub.w	r3, r0, r8
 8006802:	fa09 f303 	lsl.w	r3, r9, r3
 8006806:	4313      	orrs	r3, r2
 8006808:	9304      	str	r3, [sp, #16]
 800680a:	46a2      	mov	sl, r4
 800680c:	e7d2      	b.n	80067b4 <_svfiprintf_r+0x9c>
 800680e:	9b03      	ldr	r3, [sp, #12]
 8006810:	1d19      	adds	r1, r3, #4
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	9103      	str	r1, [sp, #12]
 8006816:	2b00      	cmp	r3, #0
 8006818:	bfbb      	ittet	lt
 800681a:	425b      	neglt	r3, r3
 800681c:	f042 0202 	orrlt.w	r2, r2, #2
 8006820:	9307      	strge	r3, [sp, #28]
 8006822:	9307      	strlt	r3, [sp, #28]
 8006824:	bfb8      	it	lt
 8006826:	9204      	strlt	r2, [sp, #16]
 8006828:	7823      	ldrb	r3, [r4, #0]
 800682a:	2b2e      	cmp	r3, #46	; 0x2e
 800682c:	d10c      	bne.n	8006848 <_svfiprintf_r+0x130>
 800682e:	7863      	ldrb	r3, [r4, #1]
 8006830:	2b2a      	cmp	r3, #42	; 0x2a
 8006832:	d134      	bne.n	800689e <_svfiprintf_r+0x186>
 8006834:	9b03      	ldr	r3, [sp, #12]
 8006836:	1d1a      	adds	r2, r3, #4
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	9203      	str	r2, [sp, #12]
 800683c:	2b00      	cmp	r3, #0
 800683e:	bfb8      	it	lt
 8006840:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006844:	3402      	adds	r4, #2
 8006846:	9305      	str	r3, [sp, #20]
 8006848:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006910 <_svfiprintf_r+0x1f8>
 800684c:	7821      	ldrb	r1, [r4, #0]
 800684e:	2203      	movs	r2, #3
 8006850:	4650      	mov	r0, sl
 8006852:	f7f9 fcdd 	bl	8000210 <memchr>
 8006856:	b138      	cbz	r0, 8006868 <_svfiprintf_r+0x150>
 8006858:	9b04      	ldr	r3, [sp, #16]
 800685a:	eba0 000a 	sub.w	r0, r0, sl
 800685e:	2240      	movs	r2, #64	; 0x40
 8006860:	4082      	lsls	r2, r0
 8006862:	4313      	orrs	r3, r2
 8006864:	3401      	adds	r4, #1
 8006866:	9304      	str	r3, [sp, #16]
 8006868:	f814 1b01 	ldrb.w	r1, [r4], #1
 800686c:	4825      	ldr	r0, [pc, #148]	; (8006904 <_svfiprintf_r+0x1ec>)
 800686e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006872:	2206      	movs	r2, #6
 8006874:	f7f9 fccc 	bl	8000210 <memchr>
 8006878:	2800      	cmp	r0, #0
 800687a:	d038      	beq.n	80068ee <_svfiprintf_r+0x1d6>
 800687c:	4b22      	ldr	r3, [pc, #136]	; (8006908 <_svfiprintf_r+0x1f0>)
 800687e:	bb1b      	cbnz	r3, 80068c8 <_svfiprintf_r+0x1b0>
 8006880:	9b03      	ldr	r3, [sp, #12]
 8006882:	3307      	adds	r3, #7
 8006884:	f023 0307 	bic.w	r3, r3, #7
 8006888:	3308      	adds	r3, #8
 800688a:	9303      	str	r3, [sp, #12]
 800688c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800688e:	4433      	add	r3, r6
 8006890:	9309      	str	r3, [sp, #36]	; 0x24
 8006892:	e768      	b.n	8006766 <_svfiprintf_r+0x4e>
 8006894:	fb0c 3202 	mla	r2, ip, r2, r3
 8006898:	460c      	mov	r4, r1
 800689a:	2001      	movs	r0, #1
 800689c:	e7a6      	b.n	80067ec <_svfiprintf_r+0xd4>
 800689e:	2300      	movs	r3, #0
 80068a0:	3401      	adds	r4, #1
 80068a2:	9305      	str	r3, [sp, #20]
 80068a4:	4619      	mov	r1, r3
 80068a6:	f04f 0c0a 	mov.w	ip, #10
 80068aa:	4620      	mov	r0, r4
 80068ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068b0:	3a30      	subs	r2, #48	; 0x30
 80068b2:	2a09      	cmp	r2, #9
 80068b4:	d903      	bls.n	80068be <_svfiprintf_r+0x1a6>
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d0c6      	beq.n	8006848 <_svfiprintf_r+0x130>
 80068ba:	9105      	str	r1, [sp, #20]
 80068bc:	e7c4      	b.n	8006848 <_svfiprintf_r+0x130>
 80068be:	fb0c 2101 	mla	r1, ip, r1, r2
 80068c2:	4604      	mov	r4, r0
 80068c4:	2301      	movs	r3, #1
 80068c6:	e7f0      	b.n	80068aa <_svfiprintf_r+0x192>
 80068c8:	ab03      	add	r3, sp, #12
 80068ca:	9300      	str	r3, [sp, #0]
 80068cc:	462a      	mov	r2, r5
 80068ce:	4b0f      	ldr	r3, [pc, #60]	; (800690c <_svfiprintf_r+0x1f4>)
 80068d0:	a904      	add	r1, sp, #16
 80068d2:	4638      	mov	r0, r7
 80068d4:	f7fe fb5c 	bl	8004f90 <_printf_float>
 80068d8:	1c42      	adds	r2, r0, #1
 80068da:	4606      	mov	r6, r0
 80068dc:	d1d6      	bne.n	800688c <_svfiprintf_r+0x174>
 80068de:	89ab      	ldrh	r3, [r5, #12]
 80068e0:	065b      	lsls	r3, r3, #25
 80068e2:	f53f af2d 	bmi.w	8006740 <_svfiprintf_r+0x28>
 80068e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068e8:	b01d      	add	sp, #116	; 0x74
 80068ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ee:	ab03      	add	r3, sp, #12
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	462a      	mov	r2, r5
 80068f4:	4b05      	ldr	r3, [pc, #20]	; (800690c <_svfiprintf_r+0x1f4>)
 80068f6:	a904      	add	r1, sp, #16
 80068f8:	4638      	mov	r0, r7
 80068fa:	f7fe fded 	bl	80054d8 <_printf_i>
 80068fe:	e7eb      	b.n	80068d8 <_svfiprintf_r+0x1c0>
 8006900:	08007d09 	.word	0x08007d09
 8006904:	08007d13 	.word	0x08007d13
 8006908:	08004f91 	.word	0x08004f91
 800690c:	08006665 	.word	0x08006665
 8006910:	08007d0f 	.word	0x08007d0f

08006914 <malloc>:
 8006914:	4b02      	ldr	r3, [pc, #8]	; (8006920 <malloc+0xc>)
 8006916:	4601      	mov	r1, r0
 8006918:	6818      	ldr	r0, [r3, #0]
 800691a:	f000 b823 	b.w	8006964 <_malloc_r>
 800691e:	bf00      	nop
 8006920:	20000064 	.word	0x20000064

08006924 <sbrk_aligned>:
 8006924:	b570      	push	{r4, r5, r6, lr}
 8006926:	4e0e      	ldr	r6, [pc, #56]	; (8006960 <sbrk_aligned+0x3c>)
 8006928:	460c      	mov	r4, r1
 800692a:	6831      	ldr	r1, [r6, #0]
 800692c:	4605      	mov	r5, r0
 800692e:	b911      	cbnz	r1, 8006936 <sbrk_aligned+0x12>
 8006930:	f000 fd8e 	bl	8007450 <_sbrk_r>
 8006934:	6030      	str	r0, [r6, #0]
 8006936:	4621      	mov	r1, r4
 8006938:	4628      	mov	r0, r5
 800693a:	f000 fd89 	bl	8007450 <_sbrk_r>
 800693e:	1c43      	adds	r3, r0, #1
 8006940:	d00a      	beq.n	8006958 <sbrk_aligned+0x34>
 8006942:	1cc4      	adds	r4, r0, #3
 8006944:	f024 0403 	bic.w	r4, r4, #3
 8006948:	42a0      	cmp	r0, r4
 800694a:	d007      	beq.n	800695c <sbrk_aligned+0x38>
 800694c:	1a21      	subs	r1, r4, r0
 800694e:	4628      	mov	r0, r5
 8006950:	f000 fd7e 	bl	8007450 <_sbrk_r>
 8006954:	3001      	adds	r0, #1
 8006956:	d101      	bne.n	800695c <sbrk_aligned+0x38>
 8006958:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800695c:	4620      	mov	r0, r4
 800695e:	bd70      	pop	{r4, r5, r6, pc}
 8006960:	2000049c 	.word	0x2000049c

08006964 <_malloc_r>:
 8006964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006968:	1ccd      	adds	r5, r1, #3
 800696a:	f025 0503 	bic.w	r5, r5, #3
 800696e:	3508      	adds	r5, #8
 8006970:	2d0c      	cmp	r5, #12
 8006972:	bf38      	it	cc
 8006974:	250c      	movcc	r5, #12
 8006976:	2d00      	cmp	r5, #0
 8006978:	4607      	mov	r7, r0
 800697a:	db01      	blt.n	8006980 <_malloc_r+0x1c>
 800697c:	42a9      	cmp	r1, r5
 800697e:	d905      	bls.n	800698c <_malloc_r+0x28>
 8006980:	230c      	movs	r3, #12
 8006982:	603b      	str	r3, [r7, #0]
 8006984:	2600      	movs	r6, #0
 8006986:	4630      	mov	r0, r6
 8006988:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800698c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006a60 <_malloc_r+0xfc>
 8006990:	f000 f916 	bl	8006bc0 <__malloc_lock>
 8006994:	f8d8 3000 	ldr.w	r3, [r8]
 8006998:	461c      	mov	r4, r3
 800699a:	bb5c      	cbnz	r4, 80069f4 <_malloc_r+0x90>
 800699c:	4629      	mov	r1, r5
 800699e:	4638      	mov	r0, r7
 80069a0:	f7ff ffc0 	bl	8006924 <sbrk_aligned>
 80069a4:	1c43      	adds	r3, r0, #1
 80069a6:	4604      	mov	r4, r0
 80069a8:	d155      	bne.n	8006a56 <_malloc_r+0xf2>
 80069aa:	f8d8 4000 	ldr.w	r4, [r8]
 80069ae:	4626      	mov	r6, r4
 80069b0:	2e00      	cmp	r6, #0
 80069b2:	d145      	bne.n	8006a40 <_malloc_r+0xdc>
 80069b4:	2c00      	cmp	r4, #0
 80069b6:	d048      	beq.n	8006a4a <_malloc_r+0xe6>
 80069b8:	6823      	ldr	r3, [r4, #0]
 80069ba:	4631      	mov	r1, r6
 80069bc:	4638      	mov	r0, r7
 80069be:	eb04 0903 	add.w	r9, r4, r3
 80069c2:	f000 fd45 	bl	8007450 <_sbrk_r>
 80069c6:	4581      	cmp	r9, r0
 80069c8:	d13f      	bne.n	8006a4a <_malloc_r+0xe6>
 80069ca:	6821      	ldr	r1, [r4, #0]
 80069cc:	1a6d      	subs	r5, r5, r1
 80069ce:	4629      	mov	r1, r5
 80069d0:	4638      	mov	r0, r7
 80069d2:	f7ff ffa7 	bl	8006924 <sbrk_aligned>
 80069d6:	3001      	adds	r0, #1
 80069d8:	d037      	beq.n	8006a4a <_malloc_r+0xe6>
 80069da:	6823      	ldr	r3, [r4, #0]
 80069dc:	442b      	add	r3, r5
 80069de:	6023      	str	r3, [r4, #0]
 80069e0:	f8d8 3000 	ldr.w	r3, [r8]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d038      	beq.n	8006a5a <_malloc_r+0xf6>
 80069e8:	685a      	ldr	r2, [r3, #4]
 80069ea:	42a2      	cmp	r2, r4
 80069ec:	d12b      	bne.n	8006a46 <_malloc_r+0xe2>
 80069ee:	2200      	movs	r2, #0
 80069f0:	605a      	str	r2, [r3, #4]
 80069f2:	e00f      	b.n	8006a14 <_malloc_r+0xb0>
 80069f4:	6822      	ldr	r2, [r4, #0]
 80069f6:	1b52      	subs	r2, r2, r5
 80069f8:	d41f      	bmi.n	8006a3a <_malloc_r+0xd6>
 80069fa:	2a0b      	cmp	r2, #11
 80069fc:	d917      	bls.n	8006a2e <_malloc_r+0xca>
 80069fe:	1961      	adds	r1, r4, r5
 8006a00:	42a3      	cmp	r3, r4
 8006a02:	6025      	str	r5, [r4, #0]
 8006a04:	bf18      	it	ne
 8006a06:	6059      	strne	r1, [r3, #4]
 8006a08:	6863      	ldr	r3, [r4, #4]
 8006a0a:	bf08      	it	eq
 8006a0c:	f8c8 1000 	streq.w	r1, [r8]
 8006a10:	5162      	str	r2, [r4, r5]
 8006a12:	604b      	str	r3, [r1, #4]
 8006a14:	4638      	mov	r0, r7
 8006a16:	f104 060b 	add.w	r6, r4, #11
 8006a1a:	f000 f8d7 	bl	8006bcc <__malloc_unlock>
 8006a1e:	f026 0607 	bic.w	r6, r6, #7
 8006a22:	1d23      	adds	r3, r4, #4
 8006a24:	1af2      	subs	r2, r6, r3
 8006a26:	d0ae      	beq.n	8006986 <_malloc_r+0x22>
 8006a28:	1b9b      	subs	r3, r3, r6
 8006a2a:	50a3      	str	r3, [r4, r2]
 8006a2c:	e7ab      	b.n	8006986 <_malloc_r+0x22>
 8006a2e:	42a3      	cmp	r3, r4
 8006a30:	6862      	ldr	r2, [r4, #4]
 8006a32:	d1dd      	bne.n	80069f0 <_malloc_r+0x8c>
 8006a34:	f8c8 2000 	str.w	r2, [r8]
 8006a38:	e7ec      	b.n	8006a14 <_malloc_r+0xb0>
 8006a3a:	4623      	mov	r3, r4
 8006a3c:	6864      	ldr	r4, [r4, #4]
 8006a3e:	e7ac      	b.n	800699a <_malloc_r+0x36>
 8006a40:	4634      	mov	r4, r6
 8006a42:	6876      	ldr	r6, [r6, #4]
 8006a44:	e7b4      	b.n	80069b0 <_malloc_r+0x4c>
 8006a46:	4613      	mov	r3, r2
 8006a48:	e7cc      	b.n	80069e4 <_malloc_r+0x80>
 8006a4a:	230c      	movs	r3, #12
 8006a4c:	603b      	str	r3, [r7, #0]
 8006a4e:	4638      	mov	r0, r7
 8006a50:	f000 f8bc 	bl	8006bcc <__malloc_unlock>
 8006a54:	e797      	b.n	8006986 <_malloc_r+0x22>
 8006a56:	6025      	str	r5, [r4, #0]
 8006a58:	e7dc      	b.n	8006a14 <_malloc_r+0xb0>
 8006a5a:	605b      	str	r3, [r3, #4]
 8006a5c:	deff      	udf	#255	; 0xff
 8006a5e:	bf00      	nop
 8006a60:	20000498 	.word	0x20000498

08006a64 <__sflush_r>:
 8006a64:	898a      	ldrh	r2, [r1, #12]
 8006a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a6a:	4605      	mov	r5, r0
 8006a6c:	0710      	lsls	r0, r2, #28
 8006a6e:	460c      	mov	r4, r1
 8006a70:	d458      	bmi.n	8006b24 <__sflush_r+0xc0>
 8006a72:	684b      	ldr	r3, [r1, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	dc05      	bgt.n	8006a84 <__sflush_r+0x20>
 8006a78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	dc02      	bgt.n	8006a84 <__sflush_r+0x20>
 8006a7e:	2000      	movs	r0, #0
 8006a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a86:	2e00      	cmp	r6, #0
 8006a88:	d0f9      	beq.n	8006a7e <__sflush_r+0x1a>
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a90:	682f      	ldr	r7, [r5, #0]
 8006a92:	6a21      	ldr	r1, [r4, #32]
 8006a94:	602b      	str	r3, [r5, #0]
 8006a96:	d032      	beq.n	8006afe <__sflush_r+0x9a>
 8006a98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a9a:	89a3      	ldrh	r3, [r4, #12]
 8006a9c:	075a      	lsls	r2, r3, #29
 8006a9e:	d505      	bpl.n	8006aac <__sflush_r+0x48>
 8006aa0:	6863      	ldr	r3, [r4, #4]
 8006aa2:	1ac0      	subs	r0, r0, r3
 8006aa4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006aa6:	b10b      	cbz	r3, 8006aac <__sflush_r+0x48>
 8006aa8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006aaa:	1ac0      	subs	r0, r0, r3
 8006aac:	2300      	movs	r3, #0
 8006aae:	4602      	mov	r2, r0
 8006ab0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ab2:	6a21      	ldr	r1, [r4, #32]
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	47b0      	blx	r6
 8006ab8:	1c43      	adds	r3, r0, #1
 8006aba:	89a3      	ldrh	r3, [r4, #12]
 8006abc:	d106      	bne.n	8006acc <__sflush_r+0x68>
 8006abe:	6829      	ldr	r1, [r5, #0]
 8006ac0:	291d      	cmp	r1, #29
 8006ac2:	d82b      	bhi.n	8006b1c <__sflush_r+0xb8>
 8006ac4:	4a29      	ldr	r2, [pc, #164]	; (8006b6c <__sflush_r+0x108>)
 8006ac6:	410a      	asrs	r2, r1
 8006ac8:	07d6      	lsls	r6, r2, #31
 8006aca:	d427      	bmi.n	8006b1c <__sflush_r+0xb8>
 8006acc:	2200      	movs	r2, #0
 8006ace:	6062      	str	r2, [r4, #4]
 8006ad0:	04d9      	lsls	r1, r3, #19
 8006ad2:	6922      	ldr	r2, [r4, #16]
 8006ad4:	6022      	str	r2, [r4, #0]
 8006ad6:	d504      	bpl.n	8006ae2 <__sflush_r+0x7e>
 8006ad8:	1c42      	adds	r2, r0, #1
 8006ada:	d101      	bne.n	8006ae0 <__sflush_r+0x7c>
 8006adc:	682b      	ldr	r3, [r5, #0]
 8006ade:	b903      	cbnz	r3, 8006ae2 <__sflush_r+0x7e>
 8006ae0:	6560      	str	r0, [r4, #84]	; 0x54
 8006ae2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ae4:	602f      	str	r7, [r5, #0]
 8006ae6:	2900      	cmp	r1, #0
 8006ae8:	d0c9      	beq.n	8006a7e <__sflush_r+0x1a>
 8006aea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006aee:	4299      	cmp	r1, r3
 8006af0:	d002      	beq.n	8006af8 <__sflush_r+0x94>
 8006af2:	4628      	mov	r0, r5
 8006af4:	f000 fd02 	bl	80074fc <_free_r>
 8006af8:	2000      	movs	r0, #0
 8006afa:	6360      	str	r0, [r4, #52]	; 0x34
 8006afc:	e7c0      	b.n	8006a80 <__sflush_r+0x1c>
 8006afe:	2301      	movs	r3, #1
 8006b00:	4628      	mov	r0, r5
 8006b02:	47b0      	blx	r6
 8006b04:	1c41      	adds	r1, r0, #1
 8006b06:	d1c8      	bne.n	8006a9a <__sflush_r+0x36>
 8006b08:	682b      	ldr	r3, [r5, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d0c5      	beq.n	8006a9a <__sflush_r+0x36>
 8006b0e:	2b1d      	cmp	r3, #29
 8006b10:	d001      	beq.n	8006b16 <__sflush_r+0xb2>
 8006b12:	2b16      	cmp	r3, #22
 8006b14:	d101      	bne.n	8006b1a <__sflush_r+0xb6>
 8006b16:	602f      	str	r7, [r5, #0]
 8006b18:	e7b1      	b.n	8006a7e <__sflush_r+0x1a>
 8006b1a:	89a3      	ldrh	r3, [r4, #12]
 8006b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b20:	81a3      	strh	r3, [r4, #12]
 8006b22:	e7ad      	b.n	8006a80 <__sflush_r+0x1c>
 8006b24:	690f      	ldr	r7, [r1, #16]
 8006b26:	2f00      	cmp	r7, #0
 8006b28:	d0a9      	beq.n	8006a7e <__sflush_r+0x1a>
 8006b2a:	0793      	lsls	r3, r2, #30
 8006b2c:	680e      	ldr	r6, [r1, #0]
 8006b2e:	bf08      	it	eq
 8006b30:	694b      	ldreq	r3, [r1, #20]
 8006b32:	600f      	str	r7, [r1, #0]
 8006b34:	bf18      	it	ne
 8006b36:	2300      	movne	r3, #0
 8006b38:	eba6 0807 	sub.w	r8, r6, r7
 8006b3c:	608b      	str	r3, [r1, #8]
 8006b3e:	f1b8 0f00 	cmp.w	r8, #0
 8006b42:	dd9c      	ble.n	8006a7e <__sflush_r+0x1a>
 8006b44:	6a21      	ldr	r1, [r4, #32]
 8006b46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b48:	4643      	mov	r3, r8
 8006b4a:	463a      	mov	r2, r7
 8006b4c:	4628      	mov	r0, r5
 8006b4e:	47b0      	blx	r6
 8006b50:	2800      	cmp	r0, #0
 8006b52:	dc06      	bgt.n	8006b62 <__sflush_r+0xfe>
 8006b54:	89a3      	ldrh	r3, [r4, #12]
 8006b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b5a:	81a3      	strh	r3, [r4, #12]
 8006b5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b60:	e78e      	b.n	8006a80 <__sflush_r+0x1c>
 8006b62:	4407      	add	r7, r0
 8006b64:	eba8 0800 	sub.w	r8, r8, r0
 8006b68:	e7e9      	b.n	8006b3e <__sflush_r+0xda>
 8006b6a:	bf00      	nop
 8006b6c:	dfbffffe 	.word	0xdfbffffe

08006b70 <_fflush_r>:
 8006b70:	b538      	push	{r3, r4, r5, lr}
 8006b72:	690b      	ldr	r3, [r1, #16]
 8006b74:	4605      	mov	r5, r0
 8006b76:	460c      	mov	r4, r1
 8006b78:	b913      	cbnz	r3, 8006b80 <_fflush_r+0x10>
 8006b7a:	2500      	movs	r5, #0
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	bd38      	pop	{r3, r4, r5, pc}
 8006b80:	b118      	cbz	r0, 8006b8a <_fflush_r+0x1a>
 8006b82:	6a03      	ldr	r3, [r0, #32]
 8006b84:	b90b      	cbnz	r3, 8006b8a <_fflush_r+0x1a>
 8006b86:	f7fe fe75 	bl	8005874 <__sinit>
 8006b8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d0f3      	beq.n	8006b7a <_fflush_r+0xa>
 8006b92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b94:	07d0      	lsls	r0, r2, #31
 8006b96:	d404      	bmi.n	8006ba2 <_fflush_r+0x32>
 8006b98:	0599      	lsls	r1, r3, #22
 8006b9a:	d402      	bmi.n	8006ba2 <_fflush_r+0x32>
 8006b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b9e:	f7fe fed6 	bl	800594e <__retarget_lock_acquire_recursive>
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	4621      	mov	r1, r4
 8006ba6:	f7ff ff5d 	bl	8006a64 <__sflush_r>
 8006baa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bac:	07da      	lsls	r2, r3, #31
 8006bae:	4605      	mov	r5, r0
 8006bb0:	d4e4      	bmi.n	8006b7c <_fflush_r+0xc>
 8006bb2:	89a3      	ldrh	r3, [r4, #12]
 8006bb4:	059b      	lsls	r3, r3, #22
 8006bb6:	d4e1      	bmi.n	8006b7c <_fflush_r+0xc>
 8006bb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bba:	f7fe fec9 	bl	8005950 <__retarget_lock_release_recursive>
 8006bbe:	e7dd      	b.n	8006b7c <_fflush_r+0xc>

08006bc0 <__malloc_lock>:
 8006bc0:	4801      	ldr	r0, [pc, #4]	; (8006bc8 <__malloc_lock+0x8>)
 8006bc2:	f7fe bec4 	b.w	800594e <__retarget_lock_acquire_recursive>
 8006bc6:	bf00      	nop
 8006bc8:	20000494 	.word	0x20000494

08006bcc <__malloc_unlock>:
 8006bcc:	4801      	ldr	r0, [pc, #4]	; (8006bd4 <__malloc_unlock+0x8>)
 8006bce:	f7fe bebf 	b.w	8005950 <__retarget_lock_release_recursive>
 8006bd2:	bf00      	nop
 8006bd4:	20000494 	.word	0x20000494

08006bd8 <_Balloc>:
 8006bd8:	b570      	push	{r4, r5, r6, lr}
 8006bda:	69c6      	ldr	r6, [r0, #28]
 8006bdc:	4604      	mov	r4, r0
 8006bde:	460d      	mov	r5, r1
 8006be0:	b976      	cbnz	r6, 8006c00 <_Balloc+0x28>
 8006be2:	2010      	movs	r0, #16
 8006be4:	f7ff fe96 	bl	8006914 <malloc>
 8006be8:	4602      	mov	r2, r0
 8006bea:	61e0      	str	r0, [r4, #28]
 8006bec:	b920      	cbnz	r0, 8006bf8 <_Balloc+0x20>
 8006bee:	4b18      	ldr	r3, [pc, #96]	; (8006c50 <_Balloc+0x78>)
 8006bf0:	4818      	ldr	r0, [pc, #96]	; (8006c54 <_Balloc+0x7c>)
 8006bf2:	216b      	movs	r1, #107	; 0x6b
 8006bf4:	f000 fc4e 	bl	8007494 <__assert_func>
 8006bf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006bfc:	6006      	str	r6, [r0, #0]
 8006bfe:	60c6      	str	r6, [r0, #12]
 8006c00:	69e6      	ldr	r6, [r4, #28]
 8006c02:	68f3      	ldr	r3, [r6, #12]
 8006c04:	b183      	cbz	r3, 8006c28 <_Balloc+0x50>
 8006c06:	69e3      	ldr	r3, [r4, #28]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c0e:	b9b8      	cbnz	r0, 8006c40 <_Balloc+0x68>
 8006c10:	2101      	movs	r1, #1
 8006c12:	fa01 f605 	lsl.w	r6, r1, r5
 8006c16:	1d72      	adds	r2, r6, #5
 8006c18:	0092      	lsls	r2, r2, #2
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	f000 fc58 	bl	80074d0 <_calloc_r>
 8006c20:	b160      	cbz	r0, 8006c3c <_Balloc+0x64>
 8006c22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c26:	e00e      	b.n	8006c46 <_Balloc+0x6e>
 8006c28:	2221      	movs	r2, #33	; 0x21
 8006c2a:	2104      	movs	r1, #4
 8006c2c:	4620      	mov	r0, r4
 8006c2e:	f000 fc4f 	bl	80074d0 <_calloc_r>
 8006c32:	69e3      	ldr	r3, [r4, #28]
 8006c34:	60f0      	str	r0, [r6, #12]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1e4      	bne.n	8006c06 <_Balloc+0x2e>
 8006c3c:	2000      	movs	r0, #0
 8006c3e:	bd70      	pop	{r4, r5, r6, pc}
 8006c40:	6802      	ldr	r2, [r0, #0]
 8006c42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006c46:	2300      	movs	r3, #0
 8006c48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c4c:	e7f7      	b.n	8006c3e <_Balloc+0x66>
 8006c4e:	bf00      	nop
 8006c50:	08007c89 	.word	0x08007c89
 8006c54:	08007d1a 	.word	0x08007d1a

08006c58 <_Bfree>:
 8006c58:	b570      	push	{r4, r5, r6, lr}
 8006c5a:	69c6      	ldr	r6, [r0, #28]
 8006c5c:	4605      	mov	r5, r0
 8006c5e:	460c      	mov	r4, r1
 8006c60:	b976      	cbnz	r6, 8006c80 <_Bfree+0x28>
 8006c62:	2010      	movs	r0, #16
 8006c64:	f7ff fe56 	bl	8006914 <malloc>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	61e8      	str	r0, [r5, #28]
 8006c6c:	b920      	cbnz	r0, 8006c78 <_Bfree+0x20>
 8006c6e:	4b09      	ldr	r3, [pc, #36]	; (8006c94 <_Bfree+0x3c>)
 8006c70:	4809      	ldr	r0, [pc, #36]	; (8006c98 <_Bfree+0x40>)
 8006c72:	218f      	movs	r1, #143	; 0x8f
 8006c74:	f000 fc0e 	bl	8007494 <__assert_func>
 8006c78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c7c:	6006      	str	r6, [r0, #0]
 8006c7e:	60c6      	str	r6, [r0, #12]
 8006c80:	b13c      	cbz	r4, 8006c92 <_Bfree+0x3a>
 8006c82:	69eb      	ldr	r3, [r5, #28]
 8006c84:	6862      	ldr	r2, [r4, #4]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c8c:	6021      	str	r1, [r4, #0]
 8006c8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006c92:	bd70      	pop	{r4, r5, r6, pc}
 8006c94:	08007c89 	.word	0x08007c89
 8006c98:	08007d1a 	.word	0x08007d1a

08006c9c <__multadd>:
 8006c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca0:	690d      	ldr	r5, [r1, #16]
 8006ca2:	4607      	mov	r7, r0
 8006ca4:	460c      	mov	r4, r1
 8006ca6:	461e      	mov	r6, r3
 8006ca8:	f101 0c14 	add.w	ip, r1, #20
 8006cac:	2000      	movs	r0, #0
 8006cae:	f8dc 3000 	ldr.w	r3, [ip]
 8006cb2:	b299      	uxth	r1, r3
 8006cb4:	fb02 6101 	mla	r1, r2, r1, r6
 8006cb8:	0c1e      	lsrs	r6, r3, #16
 8006cba:	0c0b      	lsrs	r3, r1, #16
 8006cbc:	fb02 3306 	mla	r3, r2, r6, r3
 8006cc0:	b289      	uxth	r1, r1
 8006cc2:	3001      	adds	r0, #1
 8006cc4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006cc8:	4285      	cmp	r5, r0
 8006cca:	f84c 1b04 	str.w	r1, [ip], #4
 8006cce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006cd2:	dcec      	bgt.n	8006cae <__multadd+0x12>
 8006cd4:	b30e      	cbz	r6, 8006d1a <__multadd+0x7e>
 8006cd6:	68a3      	ldr	r3, [r4, #8]
 8006cd8:	42ab      	cmp	r3, r5
 8006cda:	dc19      	bgt.n	8006d10 <__multadd+0x74>
 8006cdc:	6861      	ldr	r1, [r4, #4]
 8006cde:	4638      	mov	r0, r7
 8006ce0:	3101      	adds	r1, #1
 8006ce2:	f7ff ff79 	bl	8006bd8 <_Balloc>
 8006ce6:	4680      	mov	r8, r0
 8006ce8:	b928      	cbnz	r0, 8006cf6 <__multadd+0x5a>
 8006cea:	4602      	mov	r2, r0
 8006cec:	4b0c      	ldr	r3, [pc, #48]	; (8006d20 <__multadd+0x84>)
 8006cee:	480d      	ldr	r0, [pc, #52]	; (8006d24 <__multadd+0x88>)
 8006cf0:	21ba      	movs	r1, #186	; 0xba
 8006cf2:	f000 fbcf 	bl	8007494 <__assert_func>
 8006cf6:	6922      	ldr	r2, [r4, #16]
 8006cf8:	3202      	adds	r2, #2
 8006cfa:	f104 010c 	add.w	r1, r4, #12
 8006cfe:	0092      	lsls	r2, r2, #2
 8006d00:	300c      	adds	r0, #12
 8006d02:	f7fe fe26 	bl	8005952 <memcpy>
 8006d06:	4621      	mov	r1, r4
 8006d08:	4638      	mov	r0, r7
 8006d0a:	f7ff ffa5 	bl	8006c58 <_Bfree>
 8006d0e:	4644      	mov	r4, r8
 8006d10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d14:	3501      	adds	r5, #1
 8006d16:	615e      	str	r6, [r3, #20]
 8006d18:	6125      	str	r5, [r4, #16]
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d20:	08007cf8 	.word	0x08007cf8
 8006d24:	08007d1a 	.word	0x08007d1a

08006d28 <__hi0bits>:
 8006d28:	0c03      	lsrs	r3, r0, #16
 8006d2a:	041b      	lsls	r3, r3, #16
 8006d2c:	b9d3      	cbnz	r3, 8006d64 <__hi0bits+0x3c>
 8006d2e:	0400      	lsls	r0, r0, #16
 8006d30:	2310      	movs	r3, #16
 8006d32:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006d36:	bf04      	itt	eq
 8006d38:	0200      	lsleq	r0, r0, #8
 8006d3a:	3308      	addeq	r3, #8
 8006d3c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006d40:	bf04      	itt	eq
 8006d42:	0100      	lsleq	r0, r0, #4
 8006d44:	3304      	addeq	r3, #4
 8006d46:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006d4a:	bf04      	itt	eq
 8006d4c:	0080      	lsleq	r0, r0, #2
 8006d4e:	3302      	addeq	r3, #2
 8006d50:	2800      	cmp	r0, #0
 8006d52:	db05      	blt.n	8006d60 <__hi0bits+0x38>
 8006d54:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006d58:	f103 0301 	add.w	r3, r3, #1
 8006d5c:	bf08      	it	eq
 8006d5e:	2320      	moveq	r3, #32
 8006d60:	4618      	mov	r0, r3
 8006d62:	4770      	bx	lr
 8006d64:	2300      	movs	r3, #0
 8006d66:	e7e4      	b.n	8006d32 <__hi0bits+0xa>

08006d68 <__lo0bits>:
 8006d68:	6803      	ldr	r3, [r0, #0]
 8006d6a:	f013 0207 	ands.w	r2, r3, #7
 8006d6e:	d00c      	beq.n	8006d8a <__lo0bits+0x22>
 8006d70:	07d9      	lsls	r1, r3, #31
 8006d72:	d422      	bmi.n	8006dba <__lo0bits+0x52>
 8006d74:	079a      	lsls	r2, r3, #30
 8006d76:	bf49      	itett	mi
 8006d78:	085b      	lsrmi	r3, r3, #1
 8006d7a:	089b      	lsrpl	r3, r3, #2
 8006d7c:	6003      	strmi	r3, [r0, #0]
 8006d7e:	2201      	movmi	r2, #1
 8006d80:	bf5c      	itt	pl
 8006d82:	6003      	strpl	r3, [r0, #0]
 8006d84:	2202      	movpl	r2, #2
 8006d86:	4610      	mov	r0, r2
 8006d88:	4770      	bx	lr
 8006d8a:	b299      	uxth	r1, r3
 8006d8c:	b909      	cbnz	r1, 8006d92 <__lo0bits+0x2a>
 8006d8e:	0c1b      	lsrs	r3, r3, #16
 8006d90:	2210      	movs	r2, #16
 8006d92:	b2d9      	uxtb	r1, r3
 8006d94:	b909      	cbnz	r1, 8006d9a <__lo0bits+0x32>
 8006d96:	3208      	adds	r2, #8
 8006d98:	0a1b      	lsrs	r3, r3, #8
 8006d9a:	0719      	lsls	r1, r3, #28
 8006d9c:	bf04      	itt	eq
 8006d9e:	091b      	lsreq	r3, r3, #4
 8006da0:	3204      	addeq	r2, #4
 8006da2:	0799      	lsls	r1, r3, #30
 8006da4:	bf04      	itt	eq
 8006da6:	089b      	lsreq	r3, r3, #2
 8006da8:	3202      	addeq	r2, #2
 8006daa:	07d9      	lsls	r1, r3, #31
 8006dac:	d403      	bmi.n	8006db6 <__lo0bits+0x4e>
 8006dae:	085b      	lsrs	r3, r3, #1
 8006db0:	f102 0201 	add.w	r2, r2, #1
 8006db4:	d003      	beq.n	8006dbe <__lo0bits+0x56>
 8006db6:	6003      	str	r3, [r0, #0]
 8006db8:	e7e5      	b.n	8006d86 <__lo0bits+0x1e>
 8006dba:	2200      	movs	r2, #0
 8006dbc:	e7e3      	b.n	8006d86 <__lo0bits+0x1e>
 8006dbe:	2220      	movs	r2, #32
 8006dc0:	e7e1      	b.n	8006d86 <__lo0bits+0x1e>
	...

08006dc4 <__i2b>:
 8006dc4:	b510      	push	{r4, lr}
 8006dc6:	460c      	mov	r4, r1
 8006dc8:	2101      	movs	r1, #1
 8006dca:	f7ff ff05 	bl	8006bd8 <_Balloc>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	b928      	cbnz	r0, 8006dde <__i2b+0x1a>
 8006dd2:	4b05      	ldr	r3, [pc, #20]	; (8006de8 <__i2b+0x24>)
 8006dd4:	4805      	ldr	r0, [pc, #20]	; (8006dec <__i2b+0x28>)
 8006dd6:	f240 1145 	movw	r1, #325	; 0x145
 8006dda:	f000 fb5b 	bl	8007494 <__assert_func>
 8006dde:	2301      	movs	r3, #1
 8006de0:	6144      	str	r4, [r0, #20]
 8006de2:	6103      	str	r3, [r0, #16]
 8006de4:	bd10      	pop	{r4, pc}
 8006de6:	bf00      	nop
 8006de8:	08007cf8 	.word	0x08007cf8
 8006dec:	08007d1a 	.word	0x08007d1a

08006df0 <__multiply>:
 8006df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006df4:	4691      	mov	r9, r2
 8006df6:	690a      	ldr	r2, [r1, #16]
 8006df8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	bfb8      	it	lt
 8006e00:	460b      	movlt	r3, r1
 8006e02:	460c      	mov	r4, r1
 8006e04:	bfbc      	itt	lt
 8006e06:	464c      	movlt	r4, r9
 8006e08:	4699      	movlt	r9, r3
 8006e0a:	6927      	ldr	r7, [r4, #16]
 8006e0c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006e10:	68a3      	ldr	r3, [r4, #8]
 8006e12:	6861      	ldr	r1, [r4, #4]
 8006e14:	eb07 060a 	add.w	r6, r7, sl
 8006e18:	42b3      	cmp	r3, r6
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	bfb8      	it	lt
 8006e1e:	3101      	addlt	r1, #1
 8006e20:	f7ff feda 	bl	8006bd8 <_Balloc>
 8006e24:	b930      	cbnz	r0, 8006e34 <__multiply+0x44>
 8006e26:	4602      	mov	r2, r0
 8006e28:	4b44      	ldr	r3, [pc, #272]	; (8006f3c <__multiply+0x14c>)
 8006e2a:	4845      	ldr	r0, [pc, #276]	; (8006f40 <__multiply+0x150>)
 8006e2c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006e30:	f000 fb30 	bl	8007494 <__assert_func>
 8006e34:	f100 0514 	add.w	r5, r0, #20
 8006e38:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006e3c:	462b      	mov	r3, r5
 8006e3e:	2200      	movs	r2, #0
 8006e40:	4543      	cmp	r3, r8
 8006e42:	d321      	bcc.n	8006e88 <__multiply+0x98>
 8006e44:	f104 0314 	add.w	r3, r4, #20
 8006e48:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006e4c:	f109 0314 	add.w	r3, r9, #20
 8006e50:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006e54:	9202      	str	r2, [sp, #8]
 8006e56:	1b3a      	subs	r2, r7, r4
 8006e58:	3a15      	subs	r2, #21
 8006e5a:	f022 0203 	bic.w	r2, r2, #3
 8006e5e:	3204      	adds	r2, #4
 8006e60:	f104 0115 	add.w	r1, r4, #21
 8006e64:	428f      	cmp	r7, r1
 8006e66:	bf38      	it	cc
 8006e68:	2204      	movcc	r2, #4
 8006e6a:	9201      	str	r2, [sp, #4]
 8006e6c:	9a02      	ldr	r2, [sp, #8]
 8006e6e:	9303      	str	r3, [sp, #12]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d80c      	bhi.n	8006e8e <__multiply+0x9e>
 8006e74:	2e00      	cmp	r6, #0
 8006e76:	dd03      	ble.n	8006e80 <__multiply+0x90>
 8006e78:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d05b      	beq.n	8006f38 <__multiply+0x148>
 8006e80:	6106      	str	r6, [r0, #16]
 8006e82:	b005      	add	sp, #20
 8006e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e88:	f843 2b04 	str.w	r2, [r3], #4
 8006e8c:	e7d8      	b.n	8006e40 <__multiply+0x50>
 8006e8e:	f8b3 a000 	ldrh.w	sl, [r3]
 8006e92:	f1ba 0f00 	cmp.w	sl, #0
 8006e96:	d024      	beq.n	8006ee2 <__multiply+0xf2>
 8006e98:	f104 0e14 	add.w	lr, r4, #20
 8006e9c:	46a9      	mov	r9, r5
 8006e9e:	f04f 0c00 	mov.w	ip, #0
 8006ea2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006ea6:	f8d9 1000 	ldr.w	r1, [r9]
 8006eaa:	fa1f fb82 	uxth.w	fp, r2
 8006eae:	b289      	uxth	r1, r1
 8006eb0:	fb0a 110b 	mla	r1, sl, fp, r1
 8006eb4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006eb8:	f8d9 2000 	ldr.w	r2, [r9]
 8006ebc:	4461      	add	r1, ip
 8006ebe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006ec2:	fb0a c20b 	mla	r2, sl, fp, ip
 8006ec6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006eca:	b289      	uxth	r1, r1
 8006ecc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006ed0:	4577      	cmp	r7, lr
 8006ed2:	f849 1b04 	str.w	r1, [r9], #4
 8006ed6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006eda:	d8e2      	bhi.n	8006ea2 <__multiply+0xb2>
 8006edc:	9a01      	ldr	r2, [sp, #4]
 8006ede:	f845 c002 	str.w	ip, [r5, r2]
 8006ee2:	9a03      	ldr	r2, [sp, #12]
 8006ee4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006ee8:	3304      	adds	r3, #4
 8006eea:	f1b9 0f00 	cmp.w	r9, #0
 8006eee:	d021      	beq.n	8006f34 <__multiply+0x144>
 8006ef0:	6829      	ldr	r1, [r5, #0]
 8006ef2:	f104 0c14 	add.w	ip, r4, #20
 8006ef6:	46ae      	mov	lr, r5
 8006ef8:	f04f 0a00 	mov.w	sl, #0
 8006efc:	f8bc b000 	ldrh.w	fp, [ip]
 8006f00:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006f04:	fb09 220b 	mla	r2, r9, fp, r2
 8006f08:	4452      	add	r2, sl
 8006f0a:	b289      	uxth	r1, r1
 8006f0c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006f10:	f84e 1b04 	str.w	r1, [lr], #4
 8006f14:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006f18:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006f1c:	f8be 1000 	ldrh.w	r1, [lr]
 8006f20:	fb09 110a 	mla	r1, r9, sl, r1
 8006f24:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006f28:	4567      	cmp	r7, ip
 8006f2a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006f2e:	d8e5      	bhi.n	8006efc <__multiply+0x10c>
 8006f30:	9a01      	ldr	r2, [sp, #4]
 8006f32:	50a9      	str	r1, [r5, r2]
 8006f34:	3504      	adds	r5, #4
 8006f36:	e799      	b.n	8006e6c <__multiply+0x7c>
 8006f38:	3e01      	subs	r6, #1
 8006f3a:	e79b      	b.n	8006e74 <__multiply+0x84>
 8006f3c:	08007cf8 	.word	0x08007cf8
 8006f40:	08007d1a 	.word	0x08007d1a

08006f44 <__pow5mult>:
 8006f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f48:	4615      	mov	r5, r2
 8006f4a:	f012 0203 	ands.w	r2, r2, #3
 8006f4e:	4606      	mov	r6, r0
 8006f50:	460f      	mov	r7, r1
 8006f52:	d007      	beq.n	8006f64 <__pow5mult+0x20>
 8006f54:	4c25      	ldr	r4, [pc, #148]	; (8006fec <__pow5mult+0xa8>)
 8006f56:	3a01      	subs	r2, #1
 8006f58:	2300      	movs	r3, #0
 8006f5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006f5e:	f7ff fe9d 	bl	8006c9c <__multadd>
 8006f62:	4607      	mov	r7, r0
 8006f64:	10ad      	asrs	r5, r5, #2
 8006f66:	d03d      	beq.n	8006fe4 <__pow5mult+0xa0>
 8006f68:	69f4      	ldr	r4, [r6, #28]
 8006f6a:	b97c      	cbnz	r4, 8006f8c <__pow5mult+0x48>
 8006f6c:	2010      	movs	r0, #16
 8006f6e:	f7ff fcd1 	bl	8006914 <malloc>
 8006f72:	4602      	mov	r2, r0
 8006f74:	61f0      	str	r0, [r6, #28]
 8006f76:	b928      	cbnz	r0, 8006f84 <__pow5mult+0x40>
 8006f78:	4b1d      	ldr	r3, [pc, #116]	; (8006ff0 <__pow5mult+0xac>)
 8006f7a:	481e      	ldr	r0, [pc, #120]	; (8006ff4 <__pow5mult+0xb0>)
 8006f7c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006f80:	f000 fa88 	bl	8007494 <__assert_func>
 8006f84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f88:	6004      	str	r4, [r0, #0]
 8006f8a:	60c4      	str	r4, [r0, #12]
 8006f8c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006f90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f94:	b94c      	cbnz	r4, 8006faa <__pow5mult+0x66>
 8006f96:	f240 2171 	movw	r1, #625	; 0x271
 8006f9a:	4630      	mov	r0, r6
 8006f9c:	f7ff ff12 	bl	8006dc4 <__i2b>
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	f8c8 0008 	str.w	r0, [r8, #8]
 8006fa6:	4604      	mov	r4, r0
 8006fa8:	6003      	str	r3, [r0, #0]
 8006faa:	f04f 0900 	mov.w	r9, #0
 8006fae:	07eb      	lsls	r3, r5, #31
 8006fb0:	d50a      	bpl.n	8006fc8 <__pow5mult+0x84>
 8006fb2:	4639      	mov	r1, r7
 8006fb4:	4622      	mov	r2, r4
 8006fb6:	4630      	mov	r0, r6
 8006fb8:	f7ff ff1a 	bl	8006df0 <__multiply>
 8006fbc:	4639      	mov	r1, r7
 8006fbe:	4680      	mov	r8, r0
 8006fc0:	4630      	mov	r0, r6
 8006fc2:	f7ff fe49 	bl	8006c58 <_Bfree>
 8006fc6:	4647      	mov	r7, r8
 8006fc8:	106d      	asrs	r5, r5, #1
 8006fca:	d00b      	beq.n	8006fe4 <__pow5mult+0xa0>
 8006fcc:	6820      	ldr	r0, [r4, #0]
 8006fce:	b938      	cbnz	r0, 8006fe0 <__pow5mult+0x9c>
 8006fd0:	4622      	mov	r2, r4
 8006fd2:	4621      	mov	r1, r4
 8006fd4:	4630      	mov	r0, r6
 8006fd6:	f7ff ff0b 	bl	8006df0 <__multiply>
 8006fda:	6020      	str	r0, [r4, #0]
 8006fdc:	f8c0 9000 	str.w	r9, [r0]
 8006fe0:	4604      	mov	r4, r0
 8006fe2:	e7e4      	b.n	8006fae <__pow5mult+0x6a>
 8006fe4:	4638      	mov	r0, r7
 8006fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fea:	bf00      	nop
 8006fec:	08007e68 	.word	0x08007e68
 8006ff0:	08007c89 	.word	0x08007c89
 8006ff4:	08007d1a 	.word	0x08007d1a

08006ff8 <__lshift>:
 8006ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ffc:	460c      	mov	r4, r1
 8006ffe:	6849      	ldr	r1, [r1, #4]
 8007000:	6923      	ldr	r3, [r4, #16]
 8007002:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007006:	68a3      	ldr	r3, [r4, #8]
 8007008:	4607      	mov	r7, r0
 800700a:	4691      	mov	r9, r2
 800700c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007010:	f108 0601 	add.w	r6, r8, #1
 8007014:	42b3      	cmp	r3, r6
 8007016:	db0b      	blt.n	8007030 <__lshift+0x38>
 8007018:	4638      	mov	r0, r7
 800701a:	f7ff fddd 	bl	8006bd8 <_Balloc>
 800701e:	4605      	mov	r5, r0
 8007020:	b948      	cbnz	r0, 8007036 <__lshift+0x3e>
 8007022:	4602      	mov	r2, r0
 8007024:	4b28      	ldr	r3, [pc, #160]	; (80070c8 <__lshift+0xd0>)
 8007026:	4829      	ldr	r0, [pc, #164]	; (80070cc <__lshift+0xd4>)
 8007028:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800702c:	f000 fa32 	bl	8007494 <__assert_func>
 8007030:	3101      	adds	r1, #1
 8007032:	005b      	lsls	r3, r3, #1
 8007034:	e7ee      	b.n	8007014 <__lshift+0x1c>
 8007036:	2300      	movs	r3, #0
 8007038:	f100 0114 	add.w	r1, r0, #20
 800703c:	f100 0210 	add.w	r2, r0, #16
 8007040:	4618      	mov	r0, r3
 8007042:	4553      	cmp	r3, sl
 8007044:	db33      	blt.n	80070ae <__lshift+0xb6>
 8007046:	6920      	ldr	r0, [r4, #16]
 8007048:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800704c:	f104 0314 	add.w	r3, r4, #20
 8007050:	f019 091f 	ands.w	r9, r9, #31
 8007054:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007058:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800705c:	d02b      	beq.n	80070b6 <__lshift+0xbe>
 800705e:	f1c9 0e20 	rsb	lr, r9, #32
 8007062:	468a      	mov	sl, r1
 8007064:	2200      	movs	r2, #0
 8007066:	6818      	ldr	r0, [r3, #0]
 8007068:	fa00 f009 	lsl.w	r0, r0, r9
 800706c:	4310      	orrs	r0, r2
 800706e:	f84a 0b04 	str.w	r0, [sl], #4
 8007072:	f853 2b04 	ldr.w	r2, [r3], #4
 8007076:	459c      	cmp	ip, r3
 8007078:	fa22 f20e 	lsr.w	r2, r2, lr
 800707c:	d8f3      	bhi.n	8007066 <__lshift+0x6e>
 800707e:	ebac 0304 	sub.w	r3, ip, r4
 8007082:	3b15      	subs	r3, #21
 8007084:	f023 0303 	bic.w	r3, r3, #3
 8007088:	3304      	adds	r3, #4
 800708a:	f104 0015 	add.w	r0, r4, #21
 800708e:	4584      	cmp	ip, r0
 8007090:	bf38      	it	cc
 8007092:	2304      	movcc	r3, #4
 8007094:	50ca      	str	r2, [r1, r3]
 8007096:	b10a      	cbz	r2, 800709c <__lshift+0xa4>
 8007098:	f108 0602 	add.w	r6, r8, #2
 800709c:	3e01      	subs	r6, #1
 800709e:	4638      	mov	r0, r7
 80070a0:	612e      	str	r6, [r5, #16]
 80070a2:	4621      	mov	r1, r4
 80070a4:	f7ff fdd8 	bl	8006c58 <_Bfree>
 80070a8:	4628      	mov	r0, r5
 80070aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80070b2:	3301      	adds	r3, #1
 80070b4:	e7c5      	b.n	8007042 <__lshift+0x4a>
 80070b6:	3904      	subs	r1, #4
 80070b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80070bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80070c0:	459c      	cmp	ip, r3
 80070c2:	d8f9      	bhi.n	80070b8 <__lshift+0xc0>
 80070c4:	e7ea      	b.n	800709c <__lshift+0xa4>
 80070c6:	bf00      	nop
 80070c8:	08007cf8 	.word	0x08007cf8
 80070cc:	08007d1a 	.word	0x08007d1a

080070d0 <__mcmp>:
 80070d0:	b530      	push	{r4, r5, lr}
 80070d2:	6902      	ldr	r2, [r0, #16]
 80070d4:	690c      	ldr	r4, [r1, #16]
 80070d6:	1b12      	subs	r2, r2, r4
 80070d8:	d10e      	bne.n	80070f8 <__mcmp+0x28>
 80070da:	f100 0314 	add.w	r3, r0, #20
 80070de:	3114      	adds	r1, #20
 80070e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80070e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80070e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80070ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80070f0:	42a5      	cmp	r5, r4
 80070f2:	d003      	beq.n	80070fc <__mcmp+0x2c>
 80070f4:	d305      	bcc.n	8007102 <__mcmp+0x32>
 80070f6:	2201      	movs	r2, #1
 80070f8:	4610      	mov	r0, r2
 80070fa:	bd30      	pop	{r4, r5, pc}
 80070fc:	4283      	cmp	r3, r0
 80070fe:	d3f3      	bcc.n	80070e8 <__mcmp+0x18>
 8007100:	e7fa      	b.n	80070f8 <__mcmp+0x28>
 8007102:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007106:	e7f7      	b.n	80070f8 <__mcmp+0x28>

08007108 <__mdiff>:
 8007108:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800710c:	460c      	mov	r4, r1
 800710e:	4606      	mov	r6, r0
 8007110:	4611      	mov	r1, r2
 8007112:	4620      	mov	r0, r4
 8007114:	4690      	mov	r8, r2
 8007116:	f7ff ffdb 	bl	80070d0 <__mcmp>
 800711a:	1e05      	subs	r5, r0, #0
 800711c:	d110      	bne.n	8007140 <__mdiff+0x38>
 800711e:	4629      	mov	r1, r5
 8007120:	4630      	mov	r0, r6
 8007122:	f7ff fd59 	bl	8006bd8 <_Balloc>
 8007126:	b930      	cbnz	r0, 8007136 <__mdiff+0x2e>
 8007128:	4b3a      	ldr	r3, [pc, #232]	; (8007214 <__mdiff+0x10c>)
 800712a:	4602      	mov	r2, r0
 800712c:	f240 2137 	movw	r1, #567	; 0x237
 8007130:	4839      	ldr	r0, [pc, #228]	; (8007218 <__mdiff+0x110>)
 8007132:	f000 f9af 	bl	8007494 <__assert_func>
 8007136:	2301      	movs	r3, #1
 8007138:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800713c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007140:	bfa4      	itt	ge
 8007142:	4643      	movge	r3, r8
 8007144:	46a0      	movge	r8, r4
 8007146:	4630      	mov	r0, r6
 8007148:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800714c:	bfa6      	itte	ge
 800714e:	461c      	movge	r4, r3
 8007150:	2500      	movge	r5, #0
 8007152:	2501      	movlt	r5, #1
 8007154:	f7ff fd40 	bl	8006bd8 <_Balloc>
 8007158:	b920      	cbnz	r0, 8007164 <__mdiff+0x5c>
 800715a:	4b2e      	ldr	r3, [pc, #184]	; (8007214 <__mdiff+0x10c>)
 800715c:	4602      	mov	r2, r0
 800715e:	f240 2145 	movw	r1, #581	; 0x245
 8007162:	e7e5      	b.n	8007130 <__mdiff+0x28>
 8007164:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007168:	6926      	ldr	r6, [r4, #16]
 800716a:	60c5      	str	r5, [r0, #12]
 800716c:	f104 0914 	add.w	r9, r4, #20
 8007170:	f108 0514 	add.w	r5, r8, #20
 8007174:	f100 0e14 	add.w	lr, r0, #20
 8007178:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800717c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007180:	f108 0210 	add.w	r2, r8, #16
 8007184:	46f2      	mov	sl, lr
 8007186:	2100      	movs	r1, #0
 8007188:	f859 3b04 	ldr.w	r3, [r9], #4
 800718c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007190:	fa11 f88b 	uxtah	r8, r1, fp
 8007194:	b299      	uxth	r1, r3
 8007196:	0c1b      	lsrs	r3, r3, #16
 8007198:	eba8 0801 	sub.w	r8, r8, r1
 800719c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80071a0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80071a4:	fa1f f888 	uxth.w	r8, r8
 80071a8:	1419      	asrs	r1, r3, #16
 80071aa:	454e      	cmp	r6, r9
 80071ac:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80071b0:	f84a 3b04 	str.w	r3, [sl], #4
 80071b4:	d8e8      	bhi.n	8007188 <__mdiff+0x80>
 80071b6:	1b33      	subs	r3, r6, r4
 80071b8:	3b15      	subs	r3, #21
 80071ba:	f023 0303 	bic.w	r3, r3, #3
 80071be:	3304      	adds	r3, #4
 80071c0:	3415      	adds	r4, #21
 80071c2:	42a6      	cmp	r6, r4
 80071c4:	bf38      	it	cc
 80071c6:	2304      	movcc	r3, #4
 80071c8:	441d      	add	r5, r3
 80071ca:	4473      	add	r3, lr
 80071cc:	469e      	mov	lr, r3
 80071ce:	462e      	mov	r6, r5
 80071d0:	4566      	cmp	r6, ip
 80071d2:	d30e      	bcc.n	80071f2 <__mdiff+0xea>
 80071d4:	f10c 0203 	add.w	r2, ip, #3
 80071d8:	1b52      	subs	r2, r2, r5
 80071da:	f022 0203 	bic.w	r2, r2, #3
 80071de:	3d03      	subs	r5, #3
 80071e0:	45ac      	cmp	ip, r5
 80071e2:	bf38      	it	cc
 80071e4:	2200      	movcc	r2, #0
 80071e6:	4413      	add	r3, r2
 80071e8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80071ec:	b17a      	cbz	r2, 800720e <__mdiff+0x106>
 80071ee:	6107      	str	r7, [r0, #16]
 80071f0:	e7a4      	b.n	800713c <__mdiff+0x34>
 80071f2:	f856 8b04 	ldr.w	r8, [r6], #4
 80071f6:	fa11 f288 	uxtah	r2, r1, r8
 80071fa:	1414      	asrs	r4, r2, #16
 80071fc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007200:	b292      	uxth	r2, r2
 8007202:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007206:	f84e 2b04 	str.w	r2, [lr], #4
 800720a:	1421      	asrs	r1, r4, #16
 800720c:	e7e0      	b.n	80071d0 <__mdiff+0xc8>
 800720e:	3f01      	subs	r7, #1
 8007210:	e7ea      	b.n	80071e8 <__mdiff+0xe0>
 8007212:	bf00      	nop
 8007214:	08007cf8 	.word	0x08007cf8
 8007218:	08007d1a 	.word	0x08007d1a

0800721c <__d2b>:
 800721c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007220:	460f      	mov	r7, r1
 8007222:	2101      	movs	r1, #1
 8007224:	ec59 8b10 	vmov	r8, r9, d0
 8007228:	4616      	mov	r6, r2
 800722a:	f7ff fcd5 	bl	8006bd8 <_Balloc>
 800722e:	4604      	mov	r4, r0
 8007230:	b930      	cbnz	r0, 8007240 <__d2b+0x24>
 8007232:	4602      	mov	r2, r0
 8007234:	4b24      	ldr	r3, [pc, #144]	; (80072c8 <__d2b+0xac>)
 8007236:	4825      	ldr	r0, [pc, #148]	; (80072cc <__d2b+0xb0>)
 8007238:	f240 310f 	movw	r1, #783	; 0x30f
 800723c:	f000 f92a 	bl	8007494 <__assert_func>
 8007240:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007244:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007248:	bb2d      	cbnz	r5, 8007296 <__d2b+0x7a>
 800724a:	9301      	str	r3, [sp, #4]
 800724c:	f1b8 0300 	subs.w	r3, r8, #0
 8007250:	d026      	beq.n	80072a0 <__d2b+0x84>
 8007252:	4668      	mov	r0, sp
 8007254:	9300      	str	r3, [sp, #0]
 8007256:	f7ff fd87 	bl	8006d68 <__lo0bits>
 800725a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800725e:	b1e8      	cbz	r0, 800729c <__d2b+0x80>
 8007260:	f1c0 0320 	rsb	r3, r0, #32
 8007264:	fa02 f303 	lsl.w	r3, r2, r3
 8007268:	430b      	orrs	r3, r1
 800726a:	40c2      	lsrs	r2, r0
 800726c:	6163      	str	r3, [r4, #20]
 800726e:	9201      	str	r2, [sp, #4]
 8007270:	9b01      	ldr	r3, [sp, #4]
 8007272:	61a3      	str	r3, [r4, #24]
 8007274:	2b00      	cmp	r3, #0
 8007276:	bf14      	ite	ne
 8007278:	2202      	movne	r2, #2
 800727a:	2201      	moveq	r2, #1
 800727c:	6122      	str	r2, [r4, #16]
 800727e:	b1bd      	cbz	r5, 80072b0 <__d2b+0x94>
 8007280:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007284:	4405      	add	r5, r0
 8007286:	603d      	str	r5, [r7, #0]
 8007288:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800728c:	6030      	str	r0, [r6, #0]
 800728e:	4620      	mov	r0, r4
 8007290:	b003      	add	sp, #12
 8007292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007296:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800729a:	e7d6      	b.n	800724a <__d2b+0x2e>
 800729c:	6161      	str	r1, [r4, #20]
 800729e:	e7e7      	b.n	8007270 <__d2b+0x54>
 80072a0:	a801      	add	r0, sp, #4
 80072a2:	f7ff fd61 	bl	8006d68 <__lo0bits>
 80072a6:	9b01      	ldr	r3, [sp, #4]
 80072a8:	6163      	str	r3, [r4, #20]
 80072aa:	3020      	adds	r0, #32
 80072ac:	2201      	movs	r2, #1
 80072ae:	e7e5      	b.n	800727c <__d2b+0x60>
 80072b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80072b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80072b8:	6038      	str	r0, [r7, #0]
 80072ba:	6918      	ldr	r0, [r3, #16]
 80072bc:	f7ff fd34 	bl	8006d28 <__hi0bits>
 80072c0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80072c4:	e7e2      	b.n	800728c <__d2b+0x70>
 80072c6:	bf00      	nop
 80072c8:	08007cf8 	.word	0x08007cf8
 80072cc:	08007d1a 	.word	0x08007d1a

080072d0 <__sread>:
 80072d0:	b510      	push	{r4, lr}
 80072d2:	460c      	mov	r4, r1
 80072d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072d8:	f000 f8a8 	bl	800742c <_read_r>
 80072dc:	2800      	cmp	r0, #0
 80072de:	bfab      	itete	ge
 80072e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80072e2:	89a3      	ldrhlt	r3, [r4, #12]
 80072e4:	181b      	addge	r3, r3, r0
 80072e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80072ea:	bfac      	ite	ge
 80072ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80072ee:	81a3      	strhlt	r3, [r4, #12]
 80072f0:	bd10      	pop	{r4, pc}

080072f2 <__swrite>:
 80072f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072f6:	461f      	mov	r7, r3
 80072f8:	898b      	ldrh	r3, [r1, #12]
 80072fa:	05db      	lsls	r3, r3, #23
 80072fc:	4605      	mov	r5, r0
 80072fe:	460c      	mov	r4, r1
 8007300:	4616      	mov	r6, r2
 8007302:	d505      	bpl.n	8007310 <__swrite+0x1e>
 8007304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007308:	2302      	movs	r3, #2
 800730a:	2200      	movs	r2, #0
 800730c:	f000 f87c 	bl	8007408 <_lseek_r>
 8007310:	89a3      	ldrh	r3, [r4, #12]
 8007312:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007316:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800731a:	81a3      	strh	r3, [r4, #12]
 800731c:	4632      	mov	r2, r6
 800731e:	463b      	mov	r3, r7
 8007320:	4628      	mov	r0, r5
 8007322:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007326:	f000 b8a3 	b.w	8007470 <_write_r>

0800732a <__sseek>:
 800732a:	b510      	push	{r4, lr}
 800732c:	460c      	mov	r4, r1
 800732e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007332:	f000 f869 	bl	8007408 <_lseek_r>
 8007336:	1c43      	adds	r3, r0, #1
 8007338:	89a3      	ldrh	r3, [r4, #12]
 800733a:	bf15      	itete	ne
 800733c:	6560      	strne	r0, [r4, #84]	; 0x54
 800733e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007342:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007346:	81a3      	strheq	r3, [r4, #12]
 8007348:	bf18      	it	ne
 800734a:	81a3      	strhne	r3, [r4, #12]
 800734c:	bd10      	pop	{r4, pc}

0800734e <__sclose>:
 800734e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007352:	f000 b849 	b.w	80073e8 <_close_r>

08007356 <_realloc_r>:
 8007356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800735a:	4680      	mov	r8, r0
 800735c:	4614      	mov	r4, r2
 800735e:	460e      	mov	r6, r1
 8007360:	b921      	cbnz	r1, 800736c <_realloc_r+0x16>
 8007362:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007366:	4611      	mov	r1, r2
 8007368:	f7ff bafc 	b.w	8006964 <_malloc_r>
 800736c:	b92a      	cbnz	r2, 800737a <_realloc_r+0x24>
 800736e:	f000 f8c5 	bl	80074fc <_free_r>
 8007372:	4625      	mov	r5, r4
 8007374:	4628      	mov	r0, r5
 8007376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800737a:	f000 f91d 	bl	80075b8 <_malloc_usable_size_r>
 800737e:	4284      	cmp	r4, r0
 8007380:	4607      	mov	r7, r0
 8007382:	d802      	bhi.n	800738a <_realloc_r+0x34>
 8007384:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007388:	d812      	bhi.n	80073b0 <_realloc_r+0x5a>
 800738a:	4621      	mov	r1, r4
 800738c:	4640      	mov	r0, r8
 800738e:	f7ff fae9 	bl	8006964 <_malloc_r>
 8007392:	4605      	mov	r5, r0
 8007394:	2800      	cmp	r0, #0
 8007396:	d0ed      	beq.n	8007374 <_realloc_r+0x1e>
 8007398:	42bc      	cmp	r4, r7
 800739a:	4622      	mov	r2, r4
 800739c:	4631      	mov	r1, r6
 800739e:	bf28      	it	cs
 80073a0:	463a      	movcs	r2, r7
 80073a2:	f7fe fad6 	bl	8005952 <memcpy>
 80073a6:	4631      	mov	r1, r6
 80073a8:	4640      	mov	r0, r8
 80073aa:	f000 f8a7 	bl	80074fc <_free_r>
 80073ae:	e7e1      	b.n	8007374 <_realloc_r+0x1e>
 80073b0:	4635      	mov	r5, r6
 80073b2:	e7df      	b.n	8007374 <_realloc_r+0x1e>

080073b4 <memmove>:
 80073b4:	4288      	cmp	r0, r1
 80073b6:	b510      	push	{r4, lr}
 80073b8:	eb01 0402 	add.w	r4, r1, r2
 80073bc:	d902      	bls.n	80073c4 <memmove+0x10>
 80073be:	4284      	cmp	r4, r0
 80073c0:	4623      	mov	r3, r4
 80073c2:	d807      	bhi.n	80073d4 <memmove+0x20>
 80073c4:	1e43      	subs	r3, r0, #1
 80073c6:	42a1      	cmp	r1, r4
 80073c8:	d008      	beq.n	80073dc <memmove+0x28>
 80073ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073d2:	e7f8      	b.n	80073c6 <memmove+0x12>
 80073d4:	4402      	add	r2, r0
 80073d6:	4601      	mov	r1, r0
 80073d8:	428a      	cmp	r2, r1
 80073da:	d100      	bne.n	80073de <memmove+0x2a>
 80073dc:	bd10      	pop	{r4, pc}
 80073de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80073e6:	e7f7      	b.n	80073d8 <memmove+0x24>

080073e8 <_close_r>:
 80073e8:	b538      	push	{r3, r4, r5, lr}
 80073ea:	4d06      	ldr	r5, [pc, #24]	; (8007404 <_close_r+0x1c>)
 80073ec:	2300      	movs	r3, #0
 80073ee:	4604      	mov	r4, r0
 80073f0:	4608      	mov	r0, r1
 80073f2:	602b      	str	r3, [r5, #0]
 80073f4:	f7fa fc69 	bl	8001cca <_close>
 80073f8:	1c43      	adds	r3, r0, #1
 80073fa:	d102      	bne.n	8007402 <_close_r+0x1a>
 80073fc:	682b      	ldr	r3, [r5, #0]
 80073fe:	b103      	cbz	r3, 8007402 <_close_r+0x1a>
 8007400:	6023      	str	r3, [r4, #0]
 8007402:	bd38      	pop	{r3, r4, r5, pc}
 8007404:	200004a0 	.word	0x200004a0

08007408 <_lseek_r>:
 8007408:	b538      	push	{r3, r4, r5, lr}
 800740a:	4d07      	ldr	r5, [pc, #28]	; (8007428 <_lseek_r+0x20>)
 800740c:	4604      	mov	r4, r0
 800740e:	4608      	mov	r0, r1
 8007410:	4611      	mov	r1, r2
 8007412:	2200      	movs	r2, #0
 8007414:	602a      	str	r2, [r5, #0]
 8007416:	461a      	mov	r2, r3
 8007418:	f7fa fc7e 	bl	8001d18 <_lseek>
 800741c:	1c43      	adds	r3, r0, #1
 800741e:	d102      	bne.n	8007426 <_lseek_r+0x1e>
 8007420:	682b      	ldr	r3, [r5, #0]
 8007422:	b103      	cbz	r3, 8007426 <_lseek_r+0x1e>
 8007424:	6023      	str	r3, [r4, #0]
 8007426:	bd38      	pop	{r3, r4, r5, pc}
 8007428:	200004a0 	.word	0x200004a0

0800742c <_read_r>:
 800742c:	b538      	push	{r3, r4, r5, lr}
 800742e:	4d07      	ldr	r5, [pc, #28]	; (800744c <_read_r+0x20>)
 8007430:	4604      	mov	r4, r0
 8007432:	4608      	mov	r0, r1
 8007434:	4611      	mov	r1, r2
 8007436:	2200      	movs	r2, #0
 8007438:	602a      	str	r2, [r5, #0]
 800743a:	461a      	mov	r2, r3
 800743c:	f7fa fc0c 	bl	8001c58 <_read>
 8007440:	1c43      	adds	r3, r0, #1
 8007442:	d102      	bne.n	800744a <_read_r+0x1e>
 8007444:	682b      	ldr	r3, [r5, #0]
 8007446:	b103      	cbz	r3, 800744a <_read_r+0x1e>
 8007448:	6023      	str	r3, [r4, #0]
 800744a:	bd38      	pop	{r3, r4, r5, pc}
 800744c:	200004a0 	.word	0x200004a0

08007450 <_sbrk_r>:
 8007450:	b538      	push	{r3, r4, r5, lr}
 8007452:	4d06      	ldr	r5, [pc, #24]	; (800746c <_sbrk_r+0x1c>)
 8007454:	2300      	movs	r3, #0
 8007456:	4604      	mov	r4, r0
 8007458:	4608      	mov	r0, r1
 800745a:	602b      	str	r3, [r5, #0]
 800745c:	f7fa fc6a 	bl	8001d34 <_sbrk>
 8007460:	1c43      	adds	r3, r0, #1
 8007462:	d102      	bne.n	800746a <_sbrk_r+0x1a>
 8007464:	682b      	ldr	r3, [r5, #0]
 8007466:	b103      	cbz	r3, 800746a <_sbrk_r+0x1a>
 8007468:	6023      	str	r3, [r4, #0]
 800746a:	bd38      	pop	{r3, r4, r5, pc}
 800746c:	200004a0 	.word	0x200004a0

08007470 <_write_r>:
 8007470:	b538      	push	{r3, r4, r5, lr}
 8007472:	4d07      	ldr	r5, [pc, #28]	; (8007490 <_write_r+0x20>)
 8007474:	4604      	mov	r4, r0
 8007476:	4608      	mov	r0, r1
 8007478:	4611      	mov	r1, r2
 800747a:	2200      	movs	r2, #0
 800747c:	602a      	str	r2, [r5, #0]
 800747e:	461a      	mov	r2, r3
 8007480:	f7fa fc07 	bl	8001c92 <_write>
 8007484:	1c43      	adds	r3, r0, #1
 8007486:	d102      	bne.n	800748e <_write_r+0x1e>
 8007488:	682b      	ldr	r3, [r5, #0]
 800748a:	b103      	cbz	r3, 800748e <_write_r+0x1e>
 800748c:	6023      	str	r3, [r4, #0]
 800748e:	bd38      	pop	{r3, r4, r5, pc}
 8007490:	200004a0 	.word	0x200004a0

08007494 <__assert_func>:
 8007494:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007496:	4614      	mov	r4, r2
 8007498:	461a      	mov	r2, r3
 800749a:	4b09      	ldr	r3, [pc, #36]	; (80074c0 <__assert_func+0x2c>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4605      	mov	r5, r0
 80074a0:	68d8      	ldr	r0, [r3, #12]
 80074a2:	b14c      	cbz	r4, 80074b8 <__assert_func+0x24>
 80074a4:	4b07      	ldr	r3, [pc, #28]	; (80074c4 <__assert_func+0x30>)
 80074a6:	9100      	str	r1, [sp, #0]
 80074a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80074ac:	4906      	ldr	r1, [pc, #24]	; (80074c8 <__assert_func+0x34>)
 80074ae:	462b      	mov	r3, r5
 80074b0:	f000 f88a 	bl	80075c8 <fiprintf>
 80074b4:	f000 f8a7 	bl	8007606 <abort>
 80074b8:	4b04      	ldr	r3, [pc, #16]	; (80074cc <__assert_func+0x38>)
 80074ba:	461c      	mov	r4, r3
 80074bc:	e7f3      	b.n	80074a6 <__assert_func+0x12>
 80074be:	bf00      	nop
 80074c0:	20000064 	.word	0x20000064
 80074c4:	08007f7f 	.word	0x08007f7f
 80074c8:	08007f8c 	.word	0x08007f8c
 80074cc:	08007fba 	.word	0x08007fba

080074d0 <_calloc_r>:
 80074d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074d2:	fba1 2402 	umull	r2, r4, r1, r2
 80074d6:	b94c      	cbnz	r4, 80074ec <_calloc_r+0x1c>
 80074d8:	4611      	mov	r1, r2
 80074da:	9201      	str	r2, [sp, #4]
 80074dc:	f7ff fa42 	bl	8006964 <_malloc_r>
 80074e0:	9a01      	ldr	r2, [sp, #4]
 80074e2:	4605      	mov	r5, r0
 80074e4:	b930      	cbnz	r0, 80074f4 <_calloc_r+0x24>
 80074e6:	4628      	mov	r0, r5
 80074e8:	b003      	add	sp, #12
 80074ea:	bd30      	pop	{r4, r5, pc}
 80074ec:	220c      	movs	r2, #12
 80074ee:	6002      	str	r2, [r0, #0]
 80074f0:	2500      	movs	r5, #0
 80074f2:	e7f8      	b.n	80074e6 <_calloc_r+0x16>
 80074f4:	4621      	mov	r1, r4
 80074f6:	f7fe f9f3 	bl	80058e0 <memset>
 80074fa:	e7f4      	b.n	80074e6 <_calloc_r+0x16>

080074fc <_free_r>:
 80074fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074fe:	2900      	cmp	r1, #0
 8007500:	d044      	beq.n	800758c <_free_r+0x90>
 8007502:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007506:	9001      	str	r0, [sp, #4]
 8007508:	2b00      	cmp	r3, #0
 800750a:	f1a1 0404 	sub.w	r4, r1, #4
 800750e:	bfb8      	it	lt
 8007510:	18e4      	addlt	r4, r4, r3
 8007512:	f7ff fb55 	bl	8006bc0 <__malloc_lock>
 8007516:	4a1e      	ldr	r2, [pc, #120]	; (8007590 <_free_r+0x94>)
 8007518:	9801      	ldr	r0, [sp, #4]
 800751a:	6813      	ldr	r3, [r2, #0]
 800751c:	b933      	cbnz	r3, 800752c <_free_r+0x30>
 800751e:	6063      	str	r3, [r4, #4]
 8007520:	6014      	str	r4, [r2, #0]
 8007522:	b003      	add	sp, #12
 8007524:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007528:	f7ff bb50 	b.w	8006bcc <__malloc_unlock>
 800752c:	42a3      	cmp	r3, r4
 800752e:	d908      	bls.n	8007542 <_free_r+0x46>
 8007530:	6825      	ldr	r5, [r4, #0]
 8007532:	1961      	adds	r1, r4, r5
 8007534:	428b      	cmp	r3, r1
 8007536:	bf01      	itttt	eq
 8007538:	6819      	ldreq	r1, [r3, #0]
 800753a:	685b      	ldreq	r3, [r3, #4]
 800753c:	1949      	addeq	r1, r1, r5
 800753e:	6021      	streq	r1, [r4, #0]
 8007540:	e7ed      	b.n	800751e <_free_r+0x22>
 8007542:	461a      	mov	r2, r3
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	b10b      	cbz	r3, 800754c <_free_r+0x50>
 8007548:	42a3      	cmp	r3, r4
 800754a:	d9fa      	bls.n	8007542 <_free_r+0x46>
 800754c:	6811      	ldr	r1, [r2, #0]
 800754e:	1855      	adds	r5, r2, r1
 8007550:	42a5      	cmp	r5, r4
 8007552:	d10b      	bne.n	800756c <_free_r+0x70>
 8007554:	6824      	ldr	r4, [r4, #0]
 8007556:	4421      	add	r1, r4
 8007558:	1854      	adds	r4, r2, r1
 800755a:	42a3      	cmp	r3, r4
 800755c:	6011      	str	r1, [r2, #0]
 800755e:	d1e0      	bne.n	8007522 <_free_r+0x26>
 8007560:	681c      	ldr	r4, [r3, #0]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	6053      	str	r3, [r2, #4]
 8007566:	440c      	add	r4, r1
 8007568:	6014      	str	r4, [r2, #0]
 800756a:	e7da      	b.n	8007522 <_free_r+0x26>
 800756c:	d902      	bls.n	8007574 <_free_r+0x78>
 800756e:	230c      	movs	r3, #12
 8007570:	6003      	str	r3, [r0, #0]
 8007572:	e7d6      	b.n	8007522 <_free_r+0x26>
 8007574:	6825      	ldr	r5, [r4, #0]
 8007576:	1961      	adds	r1, r4, r5
 8007578:	428b      	cmp	r3, r1
 800757a:	bf04      	itt	eq
 800757c:	6819      	ldreq	r1, [r3, #0]
 800757e:	685b      	ldreq	r3, [r3, #4]
 8007580:	6063      	str	r3, [r4, #4]
 8007582:	bf04      	itt	eq
 8007584:	1949      	addeq	r1, r1, r5
 8007586:	6021      	streq	r1, [r4, #0]
 8007588:	6054      	str	r4, [r2, #4]
 800758a:	e7ca      	b.n	8007522 <_free_r+0x26>
 800758c:	b003      	add	sp, #12
 800758e:	bd30      	pop	{r4, r5, pc}
 8007590:	20000498 	.word	0x20000498

08007594 <__ascii_mbtowc>:
 8007594:	b082      	sub	sp, #8
 8007596:	b901      	cbnz	r1, 800759a <__ascii_mbtowc+0x6>
 8007598:	a901      	add	r1, sp, #4
 800759a:	b142      	cbz	r2, 80075ae <__ascii_mbtowc+0x1a>
 800759c:	b14b      	cbz	r3, 80075b2 <__ascii_mbtowc+0x1e>
 800759e:	7813      	ldrb	r3, [r2, #0]
 80075a0:	600b      	str	r3, [r1, #0]
 80075a2:	7812      	ldrb	r2, [r2, #0]
 80075a4:	1e10      	subs	r0, r2, #0
 80075a6:	bf18      	it	ne
 80075a8:	2001      	movne	r0, #1
 80075aa:	b002      	add	sp, #8
 80075ac:	4770      	bx	lr
 80075ae:	4610      	mov	r0, r2
 80075b0:	e7fb      	b.n	80075aa <__ascii_mbtowc+0x16>
 80075b2:	f06f 0001 	mvn.w	r0, #1
 80075b6:	e7f8      	b.n	80075aa <__ascii_mbtowc+0x16>

080075b8 <_malloc_usable_size_r>:
 80075b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075bc:	1f18      	subs	r0, r3, #4
 80075be:	2b00      	cmp	r3, #0
 80075c0:	bfbc      	itt	lt
 80075c2:	580b      	ldrlt	r3, [r1, r0]
 80075c4:	18c0      	addlt	r0, r0, r3
 80075c6:	4770      	bx	lr

080075c8 <fiprintf>:
 80075c8:	b40e      	push	{r1, r2, r3}
 80075ca:	b503      	push	{r0, r1, lr}
 80075cc:	4601      	mov	r1, r0
 80075ce:	ab03      	add	r3, sp, #12
 80075d0:	4805      	ldr	r0, [pc, #20]	; (80075e8 <fiprintf+0x20>)
 80075d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80075d6:	6800      	ldr	r0, [r0, #0]
 80075d8:	9301      	str	r3, [sp, #4]
 80075da:	f000 f845 	bl	8007668 <_vfiprintf_r>
 80075de:	b002      	add	sp, #8
 80075e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80075e4:	b003      	add	sp, #12
 80075e6:	4770      	bx	lr
 80075e8:	20000064 	.word	0x20000064

080075ec <__ascii_wctomb>:
 80075ec:	b149      	cbz	r1, 8007602 <__ascii_wctomb+0x16>
 80075ee:	2aff      	cmp	r2, #255	; 0xff
 80075f0:	bf85      	ittet	hi
 80075f2:	238a      	movhi	r3, #138	; 0x8a
 80075f4:	6003      	strhi	r3, [r0, #0]
 80075f6:	700a      	strbls	r2, [r1, #0]
 80075f8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80075fc:	bf98      	it	ls
 80075fe:	2001      	movls	r0, #1
 8007600:	4770      	bx	lr
 8007602:	4608      	mov	r0, r1
 8007604:	4770      	bx	lr

08007606 <abort>:
 8007606:	b508      	push	{r3, lr}
 8007608:	2006      	movs	r0, #6
 800760a:	f000 fa89 	bl	8007b20 <raise>
 800760e:	2001      	movs	r0, #1
 8007610:	f7fa fb18 	bl	8001c44 <_exit>

08007614 <__sfputc_r>:
 8007614:	6893      	ldr	r3, [r2, #8]
 8007616:	3b01      	subs	r3, #1
 8007618:	2b00      	cmp	r3, #0
 800761a:	b410      	push	{r4}
 800761c:	6093      	str	r3, [r2, #8]
 800761e:	da08      	bge.n	8007632 <__sfputc_r+0x1e>
 8007620:	6994      	ldr	r4, [r2, #24]
 8007622:	42a3      	cmp	r3, r4
 8007624:	db01      	blt.n	800762a <__sfputc_r+0x16>
 8007626:	290a      	cmp	r1, #10
 8007628:	d103      	bne.n	8007632 <__sfputc_r+0x1e>
 800762a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800762e:	f000 b935 	b.w	800789c <__swbuf_r>
 8007632:	6813      	ldr	r3, [r2, #0]
 8007634:	1c58      	adds	r0, r3, #1
 8007636:	6010      	str	r0, [r2, #0]
 8007638:	7019      	strb	r1, [r3, #0]
 800763a:	4608      	mov	r0, r1
 800763c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007640:	4770      	bx	lr

08007642 <__sfputs_r>:
 8007642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007644:	4606      	mov	r6, r0
 8007646:	460f      	mov	r7, r1
 8007648:	4614      	mov	r4, r2
 800764a:	18d5      	adds	r5, r2, r3
 800764c:	42ac      	cmp	r4, r5
 800764e:	d101      	bne.n	8007654 <__sfputs_r+0x12>
 8007650:	2000      	movs	r0, #0
 8007652:	e007      	b.n	8007664 <__sfputs_r+0x22>
 8007654:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007658:	463a      	mov	r2, r7
 800765a:	4630      	mov	r0, r6
 800765c:	f7ff ffda 	bl	8007614 <__sfputc_r>
 8007660:	1c43      	adds	r3, r0, #1
 8007662:	d1f3      	bne.n	800764c <__sfputs_r+0xa>
 8007664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007668 <_vfiprintf_r>:
 8007668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800766c:	460d      	mov	r5, r1
 800766e:	b09d      	sub	sp, #116	; 0x74
 8007670:	4614      	mov	r4, r2
 8007672:	4698      	mov	r8, r3
 8007674:	4606      	mov	r6, r0
 8007676:	b118      	cbz	r0, 8007680 <_vfiprintf_r+0x18>
 8007678:	6a03      	ldr	r3, [r0, #32]
 800767a:	b90b      	cbnz	r3, 8007680 <_vfiprintf_r+0x18>
 800767c:	f7fe f8fa 	bl	8005874 <__sinit>
 8007680:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007682:	07d9      	lsls	r1, r3, #31
 8007684:	d405      	bmi.n	8007692 <_vfiprintf_r+0x2a>
 8007686:	89ab      	ldrh	r3, [r5, #12]
 8007688:	059a      	lsls	r2, r3, #22
 800768a:	d402      	bmi.n	8007692 <_vfiprintf_r+0x2a>
 800768c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800768e:	f7fe f95e 	bl	800594e <__retarget_lock_acquire_recursive>
 8007692:	89ab      	ldrh	r3, [r5, #12]
 8007694:	071b      	lsls	r3, r3, #28
 8007696:	d501      	bpl.n	800769c <_vfiprintf_r+0x34>
 8007698:	692b      	ldr	r3, [r5, #16]
 800769a:	b99b      	cbnz	r3, 80076c4 <_vfiprintf_r+0x5c>
 800769c:	4629      	mov	r1, r5
 800769e:	4630      	mov	r0, r6
 80076a0:	f000 f93a 	bl	8007918 <__swsetup_r>
 80076a4:	b170      	cbz	r0, 80076c4 <_vfiprintf_r+0x5c>
 80076a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076a8:	07dc      	lsls	r4, r3, #31
 80076aa:	d504      	bpl.n	80076b6 <_vfiprintf_r+0x4e>
 80076ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076b0:	b01d      	add	sp, #116	; 0x74
 80076b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076b6:	89ab      	ldrh	r3, [r5, #12]
 80076b8:	0598      	lsls	r0, r3, #22
 80076ba:	d4f7      	bmi.n	80076ac <_vfiprintf_r+0x44>
 80076bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076be:	f7fe f947 	bl	8005950 <__retarget_lock_release_recursive>
 80076c2:	e7f3      	b.n	80076ac <_vfiprintf_r+0x44>
 80076c4:	2300      	movs	r3, #0
 80076c6:	9309      	str	r3, [sp, #36]	; 0x24
 80076c8:	2320      	movs	r3, #32
 80076ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80076d2:	2330      	movs	r3, #48	; 0x30
 80076d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007888 <_vfiprintf_r+0x220>
 80076d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076dc:	f04f 0901 	mov.w	r9, #1
 80076e0:	4623      	mov	r3, r4
 80076e2:	469a      	mov	sl, r3
 80076e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076e8:	b10a      	cbz	r2, 80076ee <_vfiprintf_r+0x86>
 80076ea:	2a25      	cmp	r2, #37	; 0x25
 80076ec:	d1f9      	bne.n	80076e2 <_vfiprintf_r+0x7a>
 80076ee:	ebba 0b04 	subs.w	fp, sl, r4
 80076f2:	d00b      	beq.n	800770c <_vfiprintf_r+0xa4>
 80076f4:	465b      	mov	r3, fp
 80076f6:	4622      	mov	r2, r4
 80076f8:	4629      	mov	r1, r5
 80076fa:	4630      	mov	r0, r6
 80076fc:	f7ff ffa1 	bl	8007642 <__sfputs_r>
 8007700:	3001      	adds	r0, #1
 8007702:	f000 80a9 	beq.w	8007858 <_vfiprintf_r+0x1f0>
 8007706:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007708:	445a      	add	r2, fp
 800770a:	9209      	str	r2, [sp, #36]	; 0x24
 800770c:	f89a 3000 	ldrb.w	r3, [sl]
 8007710:	2b00      	cmp	r3, #0
 8007712:	f000 80a1 	beq.w	8007858 <_vfiprintf_r+0x1f0>
 8007716:	2300      	movs	r3, #0
 8007718:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800771c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007720:	f10a 0a01 	add.w	sl, sl, #1
 8007724:	9304      	str	r3, [sp, #16]
 8007726:	9307      	str	r3, [sp, #28]
 8007728:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800772c:	931a      	str	r3, [sp, #104]	; 0x68
 800772e:	4654      	mov	r4, sl
 8007730:	2205      	movs	r2, #5
 8007732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007736:	4854      	ldr	r0, [pc, #336]	; (8007888 <_vfiprintf_r+0x220>)
 8007738:	f7f8 fd6a 	bl	8000210 <memchr>
 800773c:	9a04      	ldr	r2, [sp, #16]
 800773e:	b9d8      	cbnz	r0, 8007778 <_vfiprintf_r+0x110>
 8007740:	06d1      	lsls	r1, r2, #27
 8007742:	bf44      	itt	mi
 8007744:	2320      	movmi	r3, #32
 8007746:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800774a:	0713      	lsls	r3, r2, #28
 800774c:	bf44      	itt	mi
 800774e:	232b      	movmi	r3, #43	; 0x2b
 8007750:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007754:	f89a 3000 	ldrb.w	r3, [sl]
 8007758:	2b2a      	cmp	r3, #42	; 0x2a
 800775a:	d015      	beq.n	8007788 <_vfiprintf_r+0x120>
 800775c:	9a07      	ldr	r2, [sp, #28]
 800775e:	4654      	mov	r4, sl
 8007760:	2000      	movs	r0, #0
 8007762:	f04f 0c0a 	mov.w	ip, #10
 8007766:	4621      	mov	r1, r4
 8007768:	f811 3b01 	ldrb.w	r3, [r1], #1
 800776c:	3b30      	subs	r3, #48	; 0x30
 800776e:	2b09      	cmp	r3, #9
 8007770:	d94d      	bls.n	800780e <_vfiprintf_r+0x1a6>
 8007772:	b1b0      	cbz	r0, 80077a2 <_vfiprintf_r+0x13a>
 8007774:	9207      	str	r2, [sp, #28]
 8007776:	e014      	b.n	80077a2 <_vfiprintf_r+0x13a>
 8007778:	eba0 0308 	sub.w	r3, r0, r8
 800777c:	fa09 f303 	lsl.w	r3, r9, r3
 8007780:	4313      	orrs	r3, r2
 8007782:	9304      	str	r3, [sp, #16]
 8007784:	46a2      	mov	sl, r4
 8007786:	e7d2      	b.n	800772e <_vfiprintf_r+0xc6>
 8007788:	9b03      	ldr	r3, [sp, #12]
 800778a:	1d19      	adds	r1, r3, #4
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	9103      	str	r1, [sp, #12]
 8007790:	2b00      	cmp	r3, #0
 8007792:	bfbb      	ittet	lt
 8007794:	425b      	neglt	r3, r3
 8007796:	f042 0202 	orrlt.w	r2, r2, #2
 800779a:	9307      	strge	r3, [sp, #28]
 800779c:	9307      	strlt	r3, [sp, #28]
 800779e:	bfb8      	it	lt
 80077a0:	9204      	strlt	r2, [sp, #16]
 80077a2:	7823      	ldrb	r3, [r4, #0]
 80077a4:	2b2e      	cmp	r3, #46	; 0x2e
 80077a6:	d10c      	bne.n	80077c2 <_vfiprintf_r+0x15a>
 80077a8:	7863      	ldrb	r3, [r4, #1]
 80077aa:	2b2a      	cmp	r3, #42	; 0x2a
 80077ac:	d134      	bne.n	8007818 <_vfiprintf_r+0x1b0>
 80077ae:	9b03      	ldr	r3, [sp, #12]
 80077b0:	1d1a      	adds	r2, r3, #4
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	9203      	str	r2, [sp, #12]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	bfb8      	it	lt
 80077ba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80077be:	3402      	adds	r4, #2
 80077c0:	9305      	str	r3, [sp, #20]
 80077c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007898 <_vfiprintf_r+0x230>
 80077c6:	7821      	ldrb	r1, [r4, #0]
 80077c8:	2203      	movs	r2, #3
 80077ca:	4650      	mov	r0, sl
 80077cc:	f7f8 fd20 	bl	8000210 <memchr>
 80077d0:	b138      	cbz	r0, 80077e2 <_vfiprintf_r+0x17a>
 80077d2:	9b04      	ldr	r3, [sp, #16]
 80077d4:	eba0 000a 	sub.w	r0, r0, sl
 80077d8:	2240      	movs	r2, #64	; 0x40
 80077da:	4082      	lsls	r2, r0
 80077dc:	4313      	orrs	r3, r2
 80077de:	3401      	adds	r4, #1
 80077e0:	9304      	str	r3, [sp, #16]
 80077e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077e6:	4829      	ldr	r0, [pc, #164]	; (800788c <_vfiprintf_r+0x224>)
 80077e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077ec:	2206      	movs	r2, #6
 80077ee:	f7f8 fd0f 	bl	8000210 <memchr>
 80077f2:	2800      	cmp	r0, #0
 80077f4:	d03f      	beq.n	8007876 <_vfiprintf_r+0x20e>
 80077f6:	4b26      	ldr	r3, [pc, #152]	; (8007890 <_vfiprintf_r+0x228>)
 80077f8:	bb1b      	cbnz	r3, 8007842 <_vfiprintf_r+0x1da>
 80077fa:	9b03      	ldr	r3, [sp, #12]
 80077fc:	3307      	adds	r3, #7
 80077fe:	f023 0307 	bic.w	r3, r3, #7
 8007802:	3308      	adds	r3, #8
 8007804:	9303      	str	r3, [sp, #12]
 8007806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007808:	443b      	add	r3, r7
 800780a:	9309      	str	r3, [sp, #36]	; 0x24
 800780c:	e768      	b.n	80076e0 <_vfiprintf_r+0x78>
 800780e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007812:	460c      	mov	r4, r1
 8007814:	2001      	movs	r0, #1
 8007816:	e7a6      	b.n	8007766 <_vfiprintf_r+0xfe>
 8007818:	2300      	movs	r3, #0
 800781a:	3401      	adds	r4, #1
 800781c:	9305      	str	r3, [sp, #20]
 800781e:	4619      	mov	r1, r3
 8007820:	f04f 0c0a 	mov.w	ip, #10
 8007824:	4620      	mov	r0, r4
 8007826:	f810 2b01 	ldrb.w	r2, [r0], #1
 800782a:	3a30      	subs	r2, #48	; 0x30
 800782c:	2a09      	cmp	r2, #9
 800782e:	d903      	bls.n	8007838 <_vfiprintf_r+0x1d0>
 8007830:	2b00      	cmp	r3, #0
 8007832:	d0c6      	beq.n	80077c2 <_vfiprintf_r+0x15a>
 8007834:	9105      	str	r1, [sp, #20]
 8007836:	e7c4      	b.n	80077c2 <_vfiprintf_r+0x15a>
 8007838:	fb0c 2101 	mla	r1, ip, r1, r2
 800783c:	4604      	mov	r4, r0
 800783e:	2301      	movs	r3, #1
 8007840:	e7f0      	b.n	8007824 <_vfiprintf_r+0x1bc>
 8007842:	ab03      	add	r3, sp, #12
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	462a      	mov	r2, r5
 8007848:	4b12      	ldr	r3, [pc, #72]	; (8007894 <_vfiprintf_r+0x22c>)
 800784a:	a904      	add	r1, sp, #16
 800784c:	4630      	mov	r0, r6
 800784e:	f7fd fb9f 	bl	8004f90 <_printf_float>
 8007852:	4607      	mov	r7, r0
 8007854:	1c78      	adds	r0, r7, #1
 8007856:	d1d6      	bne.n	8007806 <_vfiprintf_r+0x19e>
 8007858:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800785a:	07d9      	lsls	r1, r3, #31
 800785c:	d405      	bmi.n	800786a <_vfiprintf_r+0x202>
 800785e:	89ab      	ldrh	r3, [r5, #12]
 8007860:	059a      	lsls	r2, r3, #22
 8007862:	d402      	bmi.n	800786a <_vfiprintf_r+0x202>
 8007864:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007866:	f7fe f873 	bl	8005950 <__retarget_lock_release_recursive>
 800786a:	89ab      	ldrh	r3, [r5, #12]
 800786c:	065b      	lsls	r3, r3, #25
 800786e:	f53f af1d 	bmi.w	80076ac <_vfiprintf_r+0x44>
 8007872:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007874:	e71c      	b.n	80076b0 <_vfiprintf_r+0x48>
 8007876:	ab03      	add	r3, sp, #12
 8007878:	9300      	str	r3, [sp, #0]
 800787a:	462a      	mov	r2, r5
 800787c:	4b05      	ldr	r3, [pc, #20]	; (8007894 <_vfiprintf_r+0x22c>)
 800787e:	a904      	add	r1, sp, #16
 8007880:	4630      	mov	r0, r6
 8007882:	f7fd fe29 	bl	80054d8 <_printf_i>
 8007886:	e7e4      	b.n	8007852 <_vfiprintf_r+0x1ea>
 8007888:	08007d09 	.word	0x08007d09
 800788c:	08007d13 	.word	0x08007d13
 8007890:	08004f91 	.word	0x08004f91
 8007894:	08007643 	.word	0x08007643
 8007898:	08007d0f 	.word	0x08007d0f

0800789c <__swbuf_r>:
 800789c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800789e:	460e      	mov	r6, r1
 80078a0:	4614      	mov	r4, r2
 80078a2:	4605      	mov	r5, r0
 80078a4:	b118      	cbz	r0, 80078ae <__swbuf_r+0x12>
 80078a6:	6a03      	ldr	r3, [r0, #32]
 80078a8:	b90b      	cbnz	r3, 80078ae <__swbuf_r+0x12>
 80078aa:	f7fd ffe3 	bl	8005874 <__sinit>
 80078ae:	69a3      	ldr	r3, [r4, #24]
 80078b0:	60a3      	str	r3, [r4, #8]
 80078b2:	89a3      	ldrh	r3, [r4, #12]
 80078b4:	071a      	lsls	r2, r3, #28
 80078b6:	d525      	bpl.n	8007904 <__swbuf_r+0x68>
 80078b8:	6923      	ldr	r3, [r4, #16]
 80078ba:	b31b      	cbz	r3, 8007904 <__swbuf_r+0x68>
 80078bc:	6823      	ldr	r3, [r4, #0]
 80078be:	6922      	ldr	r2, [r4, #16]
 80078c0:	1a98      	subs	r0, r3, r2
 80078c2:	6963      	ldr	r3, [r4, #20]
 80078c4:	b2f6      	uxtb	r6, r6
 80078c6:	4283      	cmp	r3, r0
 80078c8:	4637      	mov	r7, r6
 80078ca:	dc04      	bgt.n	80078d6 <__swbuf_r+0x3a>
 80078cc:	4621      	mov	r1, r4
 80078ce:	4628      	mov	r0, r5
 80078d0:	f7ff f94e 	bl	8006b70 <_fflush_r>
 80078d4:	b9e0      	cbnz	r0, 8007910 <__swbuf_r+0x74>
 80078d6:	68a3      	ldr	r3, [r4, #8]
 80078d8:	3b01      	subs	r3, #1
 80078da:	60a3      	str	r3, [r4, #8]
 80078dc:	6823      	ldr	r3, [r4, #0]
 80078de:	1c5a      	adds	r2, r3, #1
 80078e0:	6022      	str	r2, [r4, #0]
 80078e2:	701e      	strb	r6, [r3, #0]
 80078e4:	6962      	ldr	r2, [r4, #20]
 80078e6:	1c43      	adds	r3, r0, #1
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d004      	beq.n	80078f6 <__swbuf_r+0x5a>
 80078ec:	89a3      	ldrh	r3, [r4, #12]
 80078ee:	07db      	lsls	r3, r3, #31
 80078f0:	d506      	bpl.n	8007900 <__swbuf_r+0x64>
 80078f2:	2e0a      	cmp	r6, #10
 80078f4:	d104      	bne.n	8007900 <__swbuf_r+0x64>
 80078f6:	4621      	mov	r1, r4
 80078f8:	4628      	mov	r0, r5
 80078fa:	f7ff f939 	bl	8006b70 <_fflush_r>
 80078fe:	b938      	cbnz	r0, 8007910 <__swbuf_r+0x74>
 8007900:	4638      	mov	r0, r7
 8007902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007904:	4621      	mov	r1, r4
 8007906:	4628      	mov	r0, r5
 8007908:	f000 f806 	bl	8007918 <__swsetup_r>
 800790c:	2800      	cmp	r0, #0
 800790e:	d0d5      	beq.n	80078bc <__swbuf_r+0x20>
 8007910:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007914:	e7f4      	b.n	8007900 <__swbuf_r+0x64>
	...

08007918 <__swsetup_r>:
 8007918:	b538      	push	{r3, r4, r5, lr}
 800791a:	4b2a      	ldr	r3, [pc, #168]	; (80079c4 <__swsetup_r+0xac>)
 800791c:	4605      	mov	r5, r0
 800791e:	6818      	ldr	r0, [r3, #0]
 8007920:	460c      	mov	r4, r1
 8007922:	b118      	cbz	r0, 800792c <__swsetup_r+0x14>
 8007924:	6a03      	ldr	r3, [r0, #32]
 8007926:	b90b      	cbnz	r3, 800792c <__swsetup_r+0x14>
 8007928:	f7fd ffa4 	bl	8005874 <__sinit>
 800792c:	89a3      	ldrh	r3, [r4, #12]
 800792e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007932:	0718      	lsls	r0, r3, #28
 8007934:	d422      	bmi.n	800797c <__swsetup_r+0x64>
 8007936:	06d9      	lsls	r1, r3, #27
 8007938:	d407      	bmi.n	800794a <__swsetup_r+0x32>
 800793a:	2309      	movs	r3, #9
 800793c:	602b      	str	r3, [r5, #0]
 800793e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007942:	81a3      	strh	r3, [r4, #12]
 8007944:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007948:	e034      	b.n	80079b4 <__swsetup_r+0x9c>
 800794a:	0758      	lsls	r0, r3, #29
 800794c:	d512      	bpl.n	8007974 <__swsetup_r+0x5c>
 800794e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007950:	b141      	cbz	r1, 8007964 <__swsetup_r+0x4c>
 8007952:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007956:	4299      	cmp	r1, r3
 8007958:	d002      	beq.n	8007960 <__swsetup_r+0x48>
 800795a:	4628      	mov	r0, r5
 800795c:	f7ff fdce 	bl	80074fc <_free_r>
 8007960:	2300      	movs	r3, #0
 8007962:	6363      	str	r3, [r4, #52]	; 0x34
 8007964:	89a3      	ldrh	r3, [r4, #12]
 8007966:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800796a:	81a3      	strh	r3, [r4, #12]
 800796c:	2300      	movs	r3, #0
 800796e:	6063      	str	r3, [r4, #4]
 8007970:	6923      	ldr	r3, [r4, #16]
 8007972:	6023      	str	r3, [r4, #0]
 8007974:	89a3      	ldrh	r3, [r4, #12]
 8007976:	f043 0308 	orr.w	r3, r3, #8
 800797a:	81a3      	strh	r3, [r4, #12]
 800797c:	6923      	ldr	r3, [r4, #16]
 800797e:	b94b      	cbnz	r3, 8007994 <__swsetup_r+0x7c>
 8007980:	89a3      	ldrh	r3, [r4, #12]
 8007982:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007986:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800798a:	d003      	beq.n	8007994 <__swsetup_r+0x7c>
 800798c:	4621      	mov	r1, r4
 800798e:	4628      	mov	r0, r5
 8007990:	f000 f840 	bl	8007a14 <__smakebuf_r>
 8007994:	89a0      	ldrh	r0, [r4, #12]
 8007996:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800799a:	f010 0301 	ands.w	r3, r0, #1
 800799e:	d00a      	beq.n	80079b6 <__swsetup_r+0x9e>
 80079a0:	2300      	movs	r3, #0
 80079a2:	60a3      	str	r3, [r4, #8]
 80079a4:	6963      	ldr	r3, [r4, #20]
 80079a6:	425b      	negs	r3, r3
 80079a8:	61a3      	str	r3, [r4, #24]
 80079aa:	6923      	ldr	r3, [r4, #16]
 80079ac:	b943      	cbnz	r3, 80079c0 <__swsetup_r+0xa8>
 80079ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80079b2:	d1c4      	bne.n	800793e <__swsetup_r+0x26>
 80079b4:	bd38      	pop	{r3, r4, r5, pc}
 80079b6:	0781      	lsls	r1, r0, #30
 80079b8:	bf58      	it	pl
 80079ba:	6963      	ldrpl	r3, [r4, #20]
 80079bc:	60a3      	str	r3, [r4, #8]
 80079be:	e7f4      	b.n	80079aa <__swsetup_r+0x92>
 80079c0:	2000      	movs	r0, #0
 80079c2:	e7f7      	b.n	80079b4 <__swsetup_r+0x9c>
 80079c4:	20000064 	.word	0x20000064

080079c8 <__swhatbuf_r>:
 80079c8:	b570      	push	{r4, r5, r6, lr}
 80079ca:	460c      	mov	r4, r1
 80079cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079d0:	2900      	cmp	r1, #0
 80079d2:	b096      	sub	sp, #88	; 0x58
 80079d4:	4615      	mov	r5, r2
 80079d6:	461e      	mov	r6, r3
 80079d8:	da0d      	bge.n	80079f6 <__swhatbuf_r+0x2e>
 80079da:	89a3      	ldrh	r3, [r4, #12]
 80079dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80079e0:	f04f 0100 	mov.w	r1, #0
 80079e4:	bf0c      	ite	eq
 80079e6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80079ea:	2340      	movne	r3, #64	; 0x40
 80079ec:	2000      	movs	r0, #0
 80079ee:	6031      	str	r1, [r6, #0]
 80079f0:	602b      	str	r3, [r5, #0]
 80079f2:	b016      	add	sp, #88	; 0x58
 80079f4:	bd70      	pop	{r4, r5, r6, pc}
 80079f6:	466a      	mov	r2, sp
 80079f8:	f000 f848 	bl	8007a8c <_fstat_r>
 80079fc:	2800      	cmp	r0, #0
 80079fe:	dbec      	blt.n	80079da <__swhatbuf_r+0x12>
 8007a00:	9901      	ldr	r1, [sp, #4]
 8007a02:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007a06:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007a0a:	4259      	negs	r1, r3
 8007a0c:	4159      	adcs	r1, r3
 8007a0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a12:	e7eb      	b.n	80079ec <__swhatbuf_r+0x24>

08007a14 <__smakebuf_r>:
 8007a14:	898b      	ldrh	r3, [r1, #12]
 8007a16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a18:	079d      	lsls	r5, r3, #30
 8007a1a:	4606      	mov	r6, r0
 8007a1c:	460c      	mov	r4, r1
 8007a1e:	d507      	bpl.n	8007a30 <__smakebuf_r+0x1c>
 8007a20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a24:	6023      	str	r3, [r4, #0]
 8007a26:	6123      	str	r3, [r4, #16]
 8007a28:	2301      	movs	r3, #1
 8007a2a:	6163      	str	r3, [r4, #20]
 8007a2c:	b002      	add	sp, #8
 8007a2e:	bd70      	pop	{r4, r5, r6, pc}
 8007a30:	ab01      	add	r3, sp, #4
 8007a32:	466a      	mov	r2, sp
 8007a34:	f7ff ffc8 	bl	80079c8 <__swhatbuf_r>
 8007a38:	9900      	ldr	r1, [sp, #0]
 8007a3a:	4605      	mov	r5, r0
 8007a3c:	4630      	mov	r0, r6
 8007a3e:	f7fe ff91 	bl	8006964 <_malloc_r>
 8007a42:	b948      	cbnz	r0, 8007a58 <__smakebuf_r+0x44>
 8007a44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a48:	059a      	lsls	r2, r3, #22
 8007a4a:	d4ef      	bmi.n	8007a2c <__smakebuf_r+0x18>
 8007a4c:	f023 0303 	bic.w	r3, r3, #3
 8007a50:	f043 0302 	orr.w	r3, r3, #2
 8007a54:	81a3      	strh	r3, [r4, #12]
 8007a56:	e7e3      	b.n	8007a20 <__smakebuf_r+0xc>
 8007a58:	89a3      	ldrh	r3, [r4, #12]
 8007a5a:	6020      	str	r0, [r4, #0]
 8007a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a60:	81a3      	strh	r3, [r4, #12]
 8007a62:	9b00      	ldr	r3, [sp, #0]
 8007a64:	6163      	str	r3, [r4, #20]
 8007a66:	9b01      	ldr	r3, [sp, #4]
 8007a68:	6120      	str	r0, [r4, #16]
 8007a6a:	b15b      	cbz	r3, 8007a84 <__smakebuf_r+0x70>
 8007a6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a70:	4630      	mov	r0, r6
 8007a72:	f000 f81d 	bl	8007ab0 <_isatty_r>
 8007a76:	b128      	cbz	r0, 8007a84 <__smakebuf_r+0x70>
 8007a78:	89a3      	ldrh	r3, [r4, #12]
 8007a7a:	f023 0303 	bic.w	r3, r3, #3
 8007a7e:	f043 0301 	orr.w	r3, r3, #1
 8007a82:	81a3      	strh	r3, [r4, #12]
 8007a84:	89a3      	ldrh	r3, [r4, #12]
 8007a86:	431d      	orrs	r5, r3
 8007a88:	81a5      	strh	r5, [r4, #12]
 8007a8a:	e7cf      	b.n	8007a2c <__smakebuf_r+0x18>

08007a8c <_fstat_r>:
 8007a8c:	b538      	push	{r3, r4, r5, lr}
 8007a8e:	4d07      	ldr	r5, [pc, #28]	; (8007aac <_fstat_r+0x20>)
 8007a90:	2300      	movs	r3, #0
 8007a92:	4604      	mov	r4, r0
 8007a94:	4608      	mov	r0, r1
 8007a96:	4611      	mov	r1, r2
 8007a98:	602b      	str	r3, [r5, #0]
 8007a9a:	f7fa f922 	bl	8001ce2 <_fstat>
 8007a9e:	1c43      	adds	r3, r0, #1
 8007aa0:	d102      	bne.n	8007aa8 <_fstat_r+0x1c>
 8007aa2:	682b      	ldr	r3, [r5, #0]
 8007aa4:	b103      	cbz	r3, 8007aa8 <_fstat_r+0x1c>
 8007aa6:	6023      	str	r3, [r4, #0]
 8007aa8:	bd38      	pop	{r3, r4, r5, pc}
 8007aaa:	bf00      	nop
 8007aac:	200004a0 	.word	0x200004a0

08007ab0 <_isatty_r>:
 8007ab0:	b538      	push	{r3, r4, r5, lr}
 8007ab2:	4d06      	ldr	r5, [pc, #24]	; (8007acc <_isatty_r+0x1c>)
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	4604      	mov	r4, r0
 8007ab8:	4608      	mov	r0, r1
 8007aba:	602b      	str	r3, [r5, #0]
 8007abc:	f7fa f921 	bl	8001d02 <_isatty>
 8007ac0:	1c43      	adds	r3, r0, #1
 8007ac2:	d102      	bne.n	8007aca <_isatty_r+0x1a>
 8007ac4:	682b      	ldr	r3, [r5, #0]
 8007ac6:	b103      	cbz	r3, 8007aca <_isatty_r+0x1a>
 8007ac8:	6023      	str	r3, [r4, #0]
 8007aca:	bd38      	pop	{r3, r4, r5, pc}
 8007acc:	200004a0 	.word	0x200004a0

08007ad0 <_raise_r>:
 8007ad0:	291f      	cmp	r1, #31
 8007ad2:	b538      	push	{r3, r4, r5, lr}
 8007ad4:	4604      	mov	r4, r0
 8007ad6:	460d      	mov	r5, r1
 8007ad8:	d904      	bls.n	8007ae4 <_raise_r+0x14>
 8007ada:	2316      	movs	r3, #22
 8007adc:	6003      	str	r3, [r0, #0]
 8007ade:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ae2:	bd38      	pop	{r3, r4, r5, pc}
 8007ae4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007ae6:	b112      	cbz	r2, 8007aee <_raise_r+0x1e>
 8007ae8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007aec:	b94b      	cbnz	r3, 8007b02 <_raise_r+0x32>
 8007aee:	4620      	mov	r0, r4
 8007af0:	f000 f830 	bl	8007b54 <_getpid_r>
 8007af4:	462a      	mov	r2, r5
 8007af6:	4601      	mov	r1, r0
 8007af8:	4620      	mov	r0, r4
 8007afa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007afe:	f000 b817 	b.w	8007b30 <_kill_r>
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d00a      	beq.n	8007b1c <_raise_r+0x4c>
 8007b06:	1c59      	adds	r1, r3, #1
 8007b08:	d103      	bne.n	8007b12 <_raise_r+0x42>
 8007b0a:	2316      	movs	r3, #22
 8007b0c:	6003      	str	r3, [r0, #0]
 8007b0e:	2001      	movs	r0, #1
 8007b10:	e7e7      	b.n	8007ae2 <_raise_r+0x12>
 8007b12:	2400      	movs	r4, #0
 8007b14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007b18:	4628      	mov	r0, r5
 8007b1a:	4798      	blx	r3
 8007b1c:	2000      	movs	r0, #0
 8007b1e:	e7e0      	b.n	8007ae2 <_raise_r+0x12>

08007b20 <raise>:
 8007b20:	4b02      	ldr	r3, [pc, #8]	; (8007b2c <raise+0xc>)
 8007b22:	4601      	mov	r1, r0
 8007b24:	6818      	ldr	r0, [r3, #0]
 8007b26:	f7ff bfd3 	b.w	8007ad0 <_raise_r>
 8007b2a:	bf00      	nop
 8007b2c:	20000064 	.word	0x20000064

08007b30 <_kill_r>:
 8007b30:	b538      	push	{r3, r4, r5, lr}
 8007b32:	4d07      	ldr	r5, [pc, #28]	; (8007b50 <_kill_r+0x20>)
 8007b34:	2300      	movs	r3, #0
 8007b36:	4604      	mov	r4, r0
 8007b38:	4608      	mov	r0, r1
 8007b3a:	4611      	mov	r1, r2
 8007b3c:	602b      	str	r3, [r5, #0]
 8007b3e:	f7fa f871 	bl	8001c24 <_kill>
 8007b42:	1c43      	adds	r3, r0, #1
 8007b44:	d102      	bne.n	8007b4c <_kill_r+0x1c>
 8007b46:	682b      	ldr	r3, [r5, #0]
 8007b48:	b103      	cbz	r3, 8007b4c <_kill_r+0x1c>
 8007b4a:	6023      	str	r3, [r4, #0]
 8007b4c:	bd38      	pop	{r3, r4, r5, pc}
 8007b4e:	bf00      	nop
 8007b50:	200004a0 	.word	0x200004a0

08007b54 <_getpid_r>:
 8007b54:	f7fa b85e 	b.w	8001c14 <_getpid>

08007b58 <_init>:
 8007b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b5a:	bf00      	nop
 8007b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b5e:	bc08      	pop	{r3}
 8007b60:	469e      	mov	lr, r3
 8007b62:	4770      	bx	lr

08007b64 <_fini>:
 8007b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b66:	bf00      	nop
 8007b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b6a:	bc08      	pop	{r3}
 8007b6c:	469e      	mov	lr, r3
 8007b6e:	4770      	bx	lr
