
HIL_LVPDB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075ac  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  08007780  08007780  00008780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b88  08007b88  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007b88  08007b88  00008b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b90  08007b90  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b90  08007b90  00008b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b94  08007b94  00008b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007b98  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  200001d4  08007d6c  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  08007d6c  000094bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f649  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027df  00000000  00000000  0001884d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  0001b030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009a2  00000000  00000000  0001bca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a50  00000000  00000000  0001c642  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011985  00000000  00000000  00040092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfa29  00000000  00000000  00051a17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00121440  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043d0  00000000  00000000  00121484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00125854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007764 	.word	0x08007764

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08007764 	.word	0x08007764

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <FEB_CAN_Init>:

uint32_t FEB_CAN_Tx_Mailbox;

// **************************************** Functions ****************************************

void FEB_CAN_Init(void) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	FEB_CAN_Filter_Config();
 8000edc:	f000 f80c 	bl	8000ef8 <FEB_CAN_Filter_Config>
	if (HAL_CAN_Start(&hcan2) != HAL_OK) {
 8000ee0:	4804      	ldr	r0, [pc, #16]	@ (8000ef4 <FEB_CAN_Init+0x1c>)
 8000ee2:	f001 f8d9 	bl	8002098 <HAL_CAN_Start>
        // Code Error - Shutdown
	}

	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8000ee6:	2102      	movs	r1, #2
 8000ee8:	4802      	ldr	r0, [pc, #8]	@ (8000ef4 <FEB_CAN_Init+0x1c>)
 8000eea:	f001 fa3b 	bl	8002364 <HAL_CAN_ActivateNotification>
	}
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200002a4 	.word	0x200002a4

08000ef8 <FEB_CAN_Filter_Config>:

void FEB_CAN_Filter_Config(void) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
	uint8_t filter_bank = 14;
 8000efe:	230e      	movs	r3, #14
 8000f00:	71fb      	strb	r3, [r7, #7]
//	filter_bank = FEB_CAN_APPS_Filter(&hcan2, CAN_RX_FIFO0, filter_bank);
	filter_bank = FEB_CAN_ICS_Filter(&hcan2, CAN_RX_FIFO0, filter_bank);
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	461a      	mov	r2, r3
 8000f06:	2100      	movs	r1, #0
 8000f08:	4804      	ldr	r0, [pc, #16]	@ (8000f1c <FEB_CAN_Filter_Config+0x24>)
 8000f0a:	f000 f873 	bl	8000ff4 <FEB_CAN_ICS_Filter>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
	// Assign Filter
    // filter_bank = Function(&hcan2, CAN_RX_FIFO0, filter_bank);
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200002a4 	.word	0x200002a4

08000f20 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &FEB_CAN_Rx_Header, FEB_CAN_Rx_Data) == HAL_OK) {
 8000f28:	4b0a      	ldr	r3, [pc, #40]	@ (8000f54 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000f2a:	4a0b      	ldr	r2, [pc, #44]	@ (8000f58 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f001 f8f6 	bl	8002120 <HAL_CAN_GetRxMessage>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d107      	bne.n	8000f4a <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
		FEB_CAN_APPS_Str_Msg(&FEB_CAN_Rx_Header, FEB_CAN_Rx_Data);
 8000f3a:	4906      	ldr	r1, [pc, #24]	@ (8000f54 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000f3c:	4806      	ldr	r0, [pc, #24]	@ (8000f58 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000f3e:	f000 f80d 	bl	8000f5c <FEB_CAN_APPS_Str_Msg>
		FEB_CAN_ICS_Store_Msg(&FEB_CAN_Rx_Header, FEB_CAN_Rx_Data);
 8000f42:	4904      	ldr	r1, [pc, #16]	@ (8000f54 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000f44:	4804      	ldr	r0, [pc, #16]	@ (8000f58 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000f46:	f000 f87f 	bl	8001048 <FEB_CAN_ICS_Store_Msg>
		//FEB_SW_APPS_Str_Message(&FEB_CAN_Tx_Header, FEB_CAN_Rx_Data);

	}
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	2000020c 	.word	0x2000020c
 8000f58:	200001f0 	.word	0x200001f0

08000f5c <FEB_CAN_APPS_Str_Msg>:

	return filter_bank;
}


void FEB_CAN_APPS_Str_Msg(CAN_RxHeaderTypeDef *FEB_CAN_Rx_Header, uint8_t FEB_CAN_Rx_Data[]) {
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]

	switch(FEB_CAN_Rx_Header->StdId) {
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2b07      	cmp	r3, #7
 8000f6c:	d002      	beq.n	8000f74 <FEB_CAN_APPS_Str_Msg+0x18>
 8000f6e:	2b80      	cmp	r3, #128	@ 0x80
 8000f70:	d01c      	beq.n	8000fac <FEB_CAN_APPS_Str_Msg+0x50>
			data_current = (data_current << 8) | FEB_CAN_Rx_Data[2];
			data_current = (data_current << 8) | FEB_CAN_Rx_Data[3]; // LSB
			memcpy(&(FEB_CAN_APPS_Message.current), &(data_current), 4);
	    	break;
	}
}
 8000f72:	e037      	b.n	8000fe4 <FEB_CAN_APPS_Str_Msg+0x88>
		    uint32_t data_brakepedal = FEB_CAN_Rx_Data[0];        // MSB
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	60fb      	str	r3, [r7, #12]
		    data_brakepedal = (data_brakepedal << 8) | FEB_CAN_Rx_Data[1];
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	021b      	lsls	r3, r3, #8
 8000f7e:	683a      	ldr	r2, [r7, #0]
 8000f80:	3201      	adds	r2, #1
 8000f82:	7812      	ldrb	r2, [r2, #0]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	60fb      	str	r3, [r7, #12]
		    data_brakepedal = (data_brakepedal << 8) | FEB_CAN_Rx_Data[2];
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	021b      	lsls	r3, r3, #8
 8000f8c:	683a      	ldr	r2, [r7, #0]
 8000f8e:	3202      	adds	r2, #2
 8000f90:	7812      	ldrb	r2, [r2, #0]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	60fb      	str	r3, [r7, #12]
		    data_brakepedal = (data_brakepedal << 8) | FEB_CAN_Rx_Data[3]; // LSB
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	021b      	lsls	r3, r3, #8
 8000f9a:	683a      	ldr	r2, [r7, #0]
 8000f9c:	3203      	adds	r2, #3
 8000f9e:	7812      	ldrb	r2, [r2, #0]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	60fb      	str	r3, [r7, #12]
	    	memcpy(&(FEB_CAN_APPS_Message.brake_pedal), &(data_brakepedal), 4);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4a12      	ldr	r2, [pc, #72]	@ (8000ff0 <FEB_CAN_APPS_Str_Msg+0x94>)
 8000fa8:	6013      	str	r3, [r2, #0]
	    	break;
 8000faa:	e01b      	b.n	8000fe4 <FEB_CAN_APPS_Str_Msg+0x88>
			uint32_t data_current = FEB_CAN_Rx_Data[0];        // MSB
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	60bb      	str	r3, [r7, #8]
			data_current = (data_current << 8) | FEB_CAN_Rx_Data[1];
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	021b      	lsls	r3, r3, #8
 8000fb6:	683a      	ldr	r2, [r7, #0]
 8000fb8:	3201      	adds	r2, #1
 8000fba:	7812      	ldrb	r2, [r2, #0]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	60bb      	str	r3, [r7, #8]
			data_current = (data_current << 8) | FEB_CAN_Rx_Data[2];
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	021b      	lsls	r3, r3, #8
 8000fc4:	683a      	ldr	r2, [r7, #0]
 8000fc6:	3202      	adds	r2, #2
 8000fc8:	7812      	ldrb	r2, [r2, #0]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	60bb      	str	r3, [r7, #8]
			data_current = (data_current << 8) | FEB_CAN_Rx_Data[3]; // LSB
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	021b      	lsls	r3, r3, #8
 8000fd2:	683a      	ldr	r2, [r7, #0]
 8000fd4:	3203      	adds	r2, #3
 8000fd6:	7812      	ldrb	r2, [r2, #0]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	60bb      	str	r3, [r7, #8]
			memcpy(&(FEB_CAN_APPS_Message.current), &(data_current), 4);
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	4a04      	ldr	r2, [pc, #16]	@ (8000ff0 <FEB_CAN_APPS_Str_Msg+0x94>)
 8000fe0:	6053      	str	r3, [r2, #4]
	    	break;
 8000fe2:	bf00      	nop
}
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	20000214 	.word	0x20000214

08000ff4 <FEB_CAN_ICS_Filter>:
// ******************************** Variables ********************************
bool READY_TO_DRIVE = 0;

// **************************************** Functions ****************************************

uint8_t FEB_CAN_ICS_Filter(CAN_HandleTypeDef* hcan, uint8_t FIFO_assignment, uint8_t filter_bank) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08c      	sub	sp, #48	@ 0x30
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	70fb      	strb	r3, [r7, #3]
 8001000:	4613      	mov	r3, r2
 8001002:	70bb      	strb	r3, [r7, #2]
    // For multiple filters, create array of filter IDs and loop over IDs.

	CAN_FilterTypeDef filter_config;

    // Standard CAN - 2.0A - 11 bit
    filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8001004:	2301      	movs	r3, #1
 8001006:	62bb      	str	r3, [r7, #40]	@ 0x28
	filter_config.FilterBank = filter_bank;
 8001008:	78bb      	ldrb	r3, [r7, #2]
 800100a:	61fb      	str	r3, [r7, #28]
	filter_config.FilterFIFOAssignment = FIFO_assignment;
 800100c:	78fb      	ldrb	r3, [r7, #3]
 800100e:	61bb      	str	r3, [r7, #24]
	filter_config.FilterIdHigh = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	60bb      	str	r3, [r7, #8]
	filter_config.FilterIdLow = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
	filter_config.FilterMaskIdHigh = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	613b      	str	r3, [r7, #16]
	filter_config.FilterMaskIdLow = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
	filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8001020:	2300      	movs	r3, #0
 8001022:	623b      	str	r3, [r7, #32]
	filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8001024:	2301      	movs	r3, #1
 8001026:	627b      	str	r3, [r7, #36]	@ 0x24
	filter_config.SlaveStartFilterBank = 14;
 8001028:	230e      	movs	r3, #14
 800102a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    filter_bank++;
 800102c:	78bb      	ldrb	r3, [r7, #2]
 800102e:	3301      	adds	r3, #1
 8001030:	70bb      	strb	r3, [r7, #2]

	if (HAL_CAN_ConfigFilter(hcan, &filter_config) != HAL_OK) {
 8001032:	f107 0308 	add.w	r3, r7, #8
 8001036:	4619      	mov	r1, r3
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 ff4d 	bl	8001ed8 <HAL_CAN_ConfigFilter>
        // Code Error - Shutdown
	}

	return filter_bank;
 800103e:	78bb      	ldrb	r3, [r7, #2]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3730      	adds	r7, #48	@ 0x30
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <FEB_CAN_ICS_Store_Msg>:

void FEB_CAN_ICS_Store_Msg(CAN_RxHeaderTypeDef *rx_header, uint8_t rx_data[]) {
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
	switch(rx_header->StdId) {
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2b05      	cmp	r3, #5
 8001058:	d10b      	bne.n	8001072 <FEB_CAN_ICS_Store_Msg+0x2a>
		case FEB_CAN_ID_ICS_BUTTON_STATE:
				READY_TO_DRIVE = rx_data[0] & (1 << 1);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	2b00      	cmp	r3, #0
 8001064:	bf14      	ite	ne
 8001066:	2301      	movne	r3, #1
 8001068:	2300      	moveq	r3, #0
 800106a:	b2da      	uxtb	r2, r3
 800106c:	4b04      	ldr	r3, [pc, #16]	@ (8001080 <FEB_CAN_ICS_Store_Msg+0x38>)
 800106e:	701a      	strb	r2, [r3, #0]
				break;
 8001070:	bf00      	nop
	}
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	2000021c 	.word	0x2000021c

08001084 <FEB_Main_Setup>:

char buf[128];
int buf_len;
extern UART_HandleTypeDef huart2;

void FEB_Main_Setup(void) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b08e      	sub	sp, #56	@ 0x38
 8001088:	af02      	add	r7, sp, #8


	// configuration register value
	uint8_t CONFIG[2] = {0b01000001, 0b00100111}; // default settings
 800108a:	f242 7341 	movw	r3, #10049	@ 0x2741
 800108e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	 * Values needed to calibrate each of the TPS chips. This value gets passed
	 * into the init function called in later
	 */

	// calibration register values
	uint8_t MAIN_CAL[2] = {0b00000110, 0b10001110}; // Imax = 50A
 8001090:	f648 6306 	movw	r3, #36358	@ 0x8e06
 8001094:	853b      	strh	r3, [r7, #40]	@ 0x28
	uint8_t CP_CAL[2] = {0b00010111, 0b01101000};
 8001096:	f646 0317 	movw	r3, #26647	@ 0x6817
 800109a:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint8_t AF_CAL[2] = {0b00101000, 0b11110110};
 800109c:	f24f 6328 	movw	r3, #63016	@ 0xf628
 80010a0:	843b      	strh	r3, [r7, #32]
	uint8_t EX_CAL[2] = {0b00110110, 0b10011101};
 80010a2:	f649 5336 	movw	r3, #40246	@ 0x9d36
 80010a6:	83bb      	strh	r3, [r7, #28]

	// alert types
	uint8_t UNDERV[2] = {0b00010000, 0b00000000};
 80010a8:	2310      	movs	r3, #16
 80010aa:	833b      	strh	r3, [r7, #24]
	uint8_t OVERPWR[2] = {0b00001000, 0b00000000};
 80010ac:	2308      	movs	r3, #8
 80010ae:	82bb      	strh	r3, [r7, #20]

	// limits
	uint8_t LV_LIMIT[2] = {0b01000100, 0b11000000}; // = 22 / 1.25mV/bit = 17600; New limit
 80010b0:	f24c 0344 	movw	r3, #49220	@ 0xc044
 80010b4:	823b      	strh	r3, [r7, #16]
	uint8_t CP_LIMIT[2] = {0b00000001, 0b01010000}; // = 336, 14 * 24
 80010b6:	f245 0301 	movw	r3, #20481	@ 0x5001
 80010ba:	81bb      	strh	r3, [r7, #12]
	uint8_t AF_LIMIT[2] = {0b00000000, 0b11000000}; // = 192, 8 * 24
 80010bc:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80010c0:	813b      	strh	r3, [r7, #8]
	uint8_t EX_LIMIT[2] = {0b00000000, 0b10010000}; // = 144, 6 * 24
 80010c2:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80010c6:	80bb      	strh	r3, [r7, #4]

	buf_len = sprintf((char*) buf, "pre can init\n");
 80010c8:	495f      	ldr	r1, [pc, #380]	@ (8001248 <FEB_Main_Setup+0x1c4>)
 80010ca:	4860      	ldr	r0, [pc, #384]	@ (800124c <FEB_Main_Setup+0x1c8>)
 80010cc:	f004 f95a 	bl	8005384 <siprintf>
 80010d0:	4603      	mov	r3, r0
 80010d2:	4a5f      	ldr	r2, [pc, #380]	@ (8001250 <FEB_Main_Setup+0x1cc>)
 80010d4:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 80010d6:	4b5e      	ldr	r3, [pc, #376]	@ (8001250 <FEB_Main_Setup+0x1cc>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010e0:	495a      	ldr	r1, [pc, #360]	@ (800124c <FEB_Main_Setup+0x1c8>)
 80010e2:	485c      	ldr	r0, [pc, #368]	@ (8001254 <FEB_Main_Setup+0x1d0>)
 80010e4:	f003 f93a 	bl	800435c <HAL_UART_Transmit>
	FEB_CAN_Init();
 80010e8:	f7ff fef6 	bl	8000ed8 <FEB_CAN_Init>
	//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);// pull PA0 high to enable shutdown source

	//TODO: GET ACCURATE UNDERV AND OVERPWR AND DIFFERENT LIMITS. THESE ARE PRIMARILY PLACEHOLDERS.

	// Testing i2c set up successful, serial monitor baud rate 115200
	buf_len = sprintf((char*) buf, "pre tps setup\n");
 80010ec:	495a      	ldr	r1, [pc, #360]	@ (8001258 <FEB_Main_Setup+0x1d4>)
 80010ee:	4857      	ldr	r0, [pc, #348]	@ (800124c <FEB_Main_Setup+0x1c8>)
 80010f0:	f004 f948 	bl	8005384 <siprintf>
 80010f4:	4603      	mov	r3, r0
 80010f6:	4a56      	ldr	r2, [pc, #344]	@ (8001250 <FEB_Main_Setup+0x1cc>)
 80010f8:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 80010fa:	4b55      	ldr	r3, [pc, #340]	@ (8001250 <FEB_Main_Setup+0x1cc>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	b29a      	uxth	r2, r3
 8001100:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001104:	4951      	ldr	r1, [pc, #324]	@ (800124c <FEB_Main_Setup+0x1c8>)
 8001106:	4853      	ldr	r0, [pc, #332]	@ (8001254 <FEB_Main_Setup+0x1d0>)
 8001108:	f003 f928 	bl	800435c <HAL_UART_Transmit>

	FEB_SETUP_TPS2482(&hi2c1, LV_ADDR, CONFIG, MAIN_CAL, UNDERV, LV_LIMIT);
 800110c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001110:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	9301      	str	r3, [sp, #4]
 800111a:	f107 0318 	add.w	r3, r7, #24
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	460b      	mov	r3, r1
 8001122:	2180      	movs	r1, #128	@ 0x80
 8001124:	484d      	ldr	r0, [pc, #308]	@ (800125c <FEB_Main_Setup+0x1d8>)
 8001126:	f000 f8ad 	bl	8001284 <FEB_SETUP_TPS2482>
	buf_len = sprintf((char*) buf, "post lv setup\n");
 800112a:	494d      	ldr	r1, [pc, #308]	@ (8001260 <FEB_Main_Setup+0x1dc>)
 800112c:	4847      	ldr	r0, [pc, #284]	@ (800124c <FEB_Main_Setup+0x1c8>)
 800112e:	f004 f929 	bl	8005384 <siprintf>
 8001132:	4603      	mov	r3, r0
 8001134:	4a46      	ldr	r2, [pc, #280]	@ (8001250 <FEB_Main_Setup+0x1cc>)
 8001136:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 8001138:	4b45      	ldr	r3, [pc, #276]	@ (8001250 <FEB_Main_Setup+0x1cc>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	b29a      	uxth	r2, r3
 800113e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001142:	4942      	ldr	r1, [pc, #264]	@ (800124c <FEB_Main_Setup+0x1c8>)
 8001144:	4843      	ldr	r0, [pc, #268]	@ (8001254 <FEB_Main_Setup+0x1d0>)
 8001146:	f003 f909 	bl	800435c <HAL_UART_Transmit>

	FEB_SETUP_TPS2482(&hi2c1, CP_ADDR, CONFIG, CP_CAL, OVERPWR, CP_LIMIT);
 800114a:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800114e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001152:	f107 030c 	add.w	r3, r7, #12
 8001156:	9301      	str	r3, [sp, #4]
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	460b      	mov	r3, r1
 8001160:	2188      	movs	r1, #136	@ 0x88
 8001162:	483e      	ldr	r0, [pc, #248]	@ (800125c <FEB_Main_Setup+0x1d8>)
 8001164:	f000 f88e 	bl	8001284 <FEB_SETUP_TPS2482>
	buf_len = sprintf((char*) buf, "post cp setup\n");
 8001168:	493e      	ldr	r1, [pc, #248]	@ (8001264 <FEB_Main_Setup+0x1e0>)
 800116a:	4838      	ldr	r0, [pc, #224]	@ (800124c <FEB_Main_Setup+0x1c8>)
 800116c:	f004 f90a 	bl	8005384 <siprintf>
 8001170:	4603      	mov	r3, r0
 8001172:	4a37      	ldr	r2, [pc, #220]	@ (8001250 <FEB_Main_Setup+0x1cc>)
 8001174:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 8001176:	4b36      	ldr	r3, [pc, #216]	@ (8001250 <FEB_Main_Setup+0x1cc>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	b29a      	uxth	r2, r3
 800117c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001180:	4932      	ldr	r1, [pc, #200]	@ (800124c <FEB_Main_Setup+0x1c8>)
 8001182:	4834      	ldr	r0, [pc, #208]	@ (8001254 <FEB_Main_Setup+0x1d0>)
 8001184:	f003 f8ea 	bl	800435c <HAL_UART_Transmit>

	FEB_SETUP_TPS2482(&hi2c1, AF_ADDR, CONFIG, AF_CAL, OVERPWR, AF_LIMIT);
 8001188:	f107 0120 	add.w	r1, r7, #32
 800118c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001190:	f107 0308 	add.w	r3, r7, #8
 8001194:	9301      	str	r3, [sp, #4]
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	460b      	mov	r3, r1
 800119e:	218a      	movs	r1, #138	@ 0x8a
 80011a0:	482e      	ldr	r0, [pc, #184]	@ (800125c <FEB_Main_Setup+0x1d8>)
 80011a2:	f000 f86f 	bl	8001284 <FEB_SETUP_TPS2482>
	buf_len = sprintf((char*) buf, "post af setup\n");
 80011a6:	4930      	ldr	r1, [pc, #192]	@ (8001268 <FEB_Main_Setup+0x1e4>)
 80011a8:	4828      	ldr	r0, [pc, #160]	@ (800124c <FEB_Main_Setup+0x1c8>)
 80011aa:	f004 f8eb 	bl	8005384 <siprintf>
 80011ae:	4603      	mov	r3, r0
 80011b0:	4a27      	ldr	r2, [pc, #156]	@ (8001250 <FEB_Main_Setup+0x1cc>)
 80011b2:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 80011b4:	4b26      	ldr	r3, [pc, #152]	@ (8001250 <FEB_Main_Setup+0x1cc>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011be:	4923      	ldr	r1, [pc, #140]	@ (800124c <FEB_Main_Setup+0x1c8>)
 80011c0:	4824      	ldr	r0, [pc, #144]	@ (8001254 <FEB_Main_Setup+0x1d0>)
 80011c2:	f003 f8cb 	bl	800435c <HAL_UART_Transmit>

	FEB_SETUP_TPS2482(&hi2c1, EX_ADDR, CONFIG, EX_CAL, OVERPWR, EX_LIMIT);
 80011c6:	f107 011c 	add.w	r1, r7, #28
 80011ca:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	9301      	str	r3, [sp, #4]
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	460b      	mov	r3, r1
 80011da:	2182      	movs	r1, #130	@ 0x82
 80011dc:	481f      	ldr	r0, [pc, #124]	@ (800125c <FEB_Main_Setup+0x1d8>)
 80011de:	f000 f851 	bl	8001284 <FEB_SETUP_TPS2482>
	buf_len = sprintf((char*) buf, "post ex setup\n");
 80011e2:	4922      	ldr	r1, [pc, #136]	@ (800126c <FEB_Main_Setup+0x1e8>)
 80011e4:	4819      	ldr	r0, [pc, #100]	@ (800124c <FEB_Main_Setup+0x1c8>)
 80011e6:	f004 f8cd 	bl	8005384 <siprintf>
 80011ea:	4603      	mov	r3, r0
 80011ec:	4a18      	ldr	r2, [pc, #96]	@ (8001250 <FEB_Main_Setup+0x1cc>)
 80011ee:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 80011f0:	4b17      	ldr	r3, [pc, #92]	@ (8001250 <FEB_Main_Setup+0x1cc>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011fa:	4914      	ldr	r1, [pc, #80]	@ (800124c <FEB_Main_Setup+0x1c8>)
 80011fc:	4815      	ldr	r0, [pc, #84]	@ (8001254 <FEB_Main_Setup+0x1d0>)
 80011fe:	f003 f8ad 	bl	800435c <HAL_UART_Transmit>

	FEB_SETUP_TPS2482(&hi2c1, SH_ADDR, CONFIG, EX_CAL, OVERPWR, EX_LIMIT);
 8001202:	f107 011c 	add.w	r1, r7, #28
 8001206:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	9301      	str	r3, [sp, #4]
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	460b      	mov	r3, r1
 8001216:	2190      	movs	r1, #144	@ 0x90
 8001218:	4810      	ldr	r0, [pc, #64]	@ (800125c <FEB_Main_Setup+0x1d8>)
 800121a:	f000 f833 	bl	8001284 <FEB_SETUP_TPS2482>
	buf_len = sprintf((char*) buf, "post sh and tps setup\n");
 800121e:	4914      	ldr	r1, [pc, #80]	@ (8001270 <FEB_Main_Setup+0x1ec>)
 8001220:	480a      	ldr	r0, [pc, #40]	@ (800124c <FEB_Main_Setup+0x1c8>)
 8001222:	f004 f8af 	bl	8005384 <siprintf>
 8001226:	4603      	mov	r3, r0
 8001228:	4a09      	ldr	r2, [pc, #36]	@ (8001250 <FEB_Main_Setup+0x1cc>)
 800122a:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 800122c:	4b08      	ldr	r3, [pc, #32]	@ (8001250 <FEB_Main_Setup+0x1cc>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	b29a      	uxth	r2, r3
 8001232:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001236:	4905      	ldr	r1, [pc, #20]	@ (800124c <FEB_Main_Setup+0x1c8>)
 8001238:	4806      	ldr	r0, [pc, #24]	@ (8001254 <FEB_Main_Setup+0x1d0>)
 800123a:	f003 f88f 	bl	800435c <HAL_UART_Transmit>

	//Not sure if enable seperately from ready to drive
	//	Enable_Shutdown_Source();

}
 800123e:	bf00      	nop
 8001240:	3730      	adds	r7, #48	@ 0x30
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	08007780 	.word	0x08007780
 800124c:	20000220 	.word	0x20000220
 8001250:	200002a0 	.word	0x200002a0
 8001254:	20000320 	.word	0x20000320
 8001258:	08007790 	.word	0x08007790
 800125c:	200002cc 	.word	0x200002cc
 8001260:	080077a0 	.word	0x080077a0
 8001264:	080077b0 	.word	0x080077b0
 8001268:	080077c0 	.word	0x080077c0
 800126c:	080077d0 	.word	0x080077d0
 8001270:	080077e0 	.word	0x080077e0

08001274 <FEB_Main_Loop>:


void FEB_Main_Loop(void) {
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
//  //FEB_CAN_Transmit(&hcan1, LVPDB_CP_CURRENT, &cp_current_reading);
//  apps_current_reading = FEB_CAN_APPS_Message.current;
//
//  buf_len = sprintf((char*) buf, "Current Draw (LV, EX, CP, APPS): %.3f, %.3f, %.3f, %.3f\r\n", current_reading, ex_current_reading, cp_current_reading, apps_current_reading);
//  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
	HAL_Delay(1000);
 8001278:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800127c:	f000 fd0c 	bl	8001c98 <HAL_Delay>
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}

08001284 <FEB_SETUP_TPS2482>:
float ex_current_reading;
float cp_current_reading;

extern I2C_HandleTypeDef hi2c1;

void FEB_SETUP_TPS2482(I2C_HandleTypeDef *hi2cp, uint8_t DEV_ADDR, uint8_t CONFIG[], uint8_t CAL_REG[], uint8_t ALERT[], uint8_t LIMIT[]) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	@ 0x28
 8001288:	af04      	add	r7, sp, #16
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	607a      	str	r2, [r7, #4]
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	460b      	mov	r3, r1
 8001292:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Mem_Write(hi2cp, DEV_ADDR, 0x00, 1, CONFIG, 2, HAL_MAX_DELAY); // configure
 8001294:	7afb      	ldrb	r3, [r7, #11]
 8001296:	b299      	uxth	r1, r3
 8001298:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800129c:	9302      	str	r3, [sp, #8]
 800129e:	2302      	movs	r3, #2
 80012a0:	9301      	str	r3, [sp, #4]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	2301      	movs	r3, #1
 80012a8:	2200      	movs	r2, #0
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f001 feb4 	bl	8003018 <HAL_I2C_Mem_Write>
 80012b0:	4603      	mov	r3, r0
 80012b2:	75fb      	strb	r3, [r7, #23]
//	if (ret != HAL_OK) {
//			// error handler
//		__disable_irq();
//		while(1);
//	}
	ret = HAL_I2C_Mem_Write(hi2cp, DEV_ADDR, 0x05, 1, CAL_REG, 2, HAL_MAX_DELAY); // calibrate
 80012b4:	7afb      	ldrb	r3, [r7, #11]
 80012b6:	b299      	uxth	r1, r3
 80012b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012bc:	9302      	str	r3, [sp, #8]
 80012be:	2302      	movs	r3, #2
 80012c0:	9301      	str	r3, [sp, #4]
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	9300      	str	r3, [sp, #0]
 80012c6:	2301      	movs	r3, #1
 80012c8:	2205      	movs	r2, #5
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f001 fea4 	bl	8003018 <HAL_I2C_Mem_Write>
 80012d0:	4603      	mov	r3, r0
 80012d2:	75fb      	strb	r3, [r7, #23]
//	if (ret != HAL_OK) {
//			// error handler
//		__disable_irq();
//		while(1);
//	}
	ret = HAL_I2C_Mem_Write(hi2cp, DEV_ADDR, 0x06, 1, ALERT, 2, HAL_MAX_DELAY); // set alert
 80012d4:	7afb      	ldrb	r3, [r7, #11]
 80012d6:	b299      	uxth	r1, r3
 80012d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012dc:	9302      	str	r3, [sp, #8]
 80012de:	2302      	movs	r3, #2
 80012e0:	9301      	str	r3, [sp, #4]
 80012e2:	6a3b      	ldr	r3, [r7, #32]
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	2301      	movs	r3, #1
 80012e8:	2206      	movs	r2, #6
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f001 fe94 	bl	8003018 <HAL_I2C_Mem_Write>
 80012f0:	4603      	mov	r3, r0
 80012f2:	75fb      	strb	r3, [r7, #23]
//	if (ret != HAL_OK) {
//			// error handler
//		__disable_irq();
//		while(1);
//	}
	ret = HAL_I2C_Mem_Write(hi2cp, DEV_ADDR, 0x07, 1, LIMIT, 2, HAL_MAX_DELAY); // set limit
 80012f4:	7afb      	ldrb	r3, [r7, #11]
 80012f6:	b299      	uxth	r1, r3
 80012f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012fc:	9302      	str	r3, [sp, #8]
 80012fe:	2302      	movs	r3, #2
 8001300:	9301      	str	r3, [sp, #4]
 8001302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2301      	movs	r3, #1
 8001308:	2207      	movs	r2, #7
 800130a:	68f8      	ldr	r0, [r7, #12]
 800130c:	f001 fe84 	bl	8003018 <HAL_I2C_Mem_Write>
 8001310:	4603      	mov	r3, r0
 8001312:	75fb      	strb	r3, [r7, #23]
//	}

	if (ret != HAL_OK) {

	}
}
 8001314:	bf00      	nop
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b0a2      	sub	sp, #136	@ 0x88
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001322:	f000 fc47 	bl	8001bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001326:	f000 f823 	bl	8001370 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800132a:	f000 f91b 	bl	8001564 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800132e:	f000 f8ef 	bl	8001510 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001332:	f000 f8bf 	bl	80014b4 <MX_I2C1_Init>
  MX_CAN2_Init();
 8001336:	f000 f887 	bl	8001448 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */

  FEB_Main_Setup();
 800133a:	f7ff fea3 	bl	8001084 <FEB_Main_Setup>
  char buf[128];
  int buf_len;
  while (1)
  {

	buf_len = sprintf((char*) buf, "Test");
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	4909      	ldr	r1, [pc, #36]	@ (8001368 <main+0x4c>)
 8001342:	4618      	mov	r0, r3
 8001344:	f004 f81e 	bl	8005384 <siprintf>
 8001348:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 800134c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001350:	b29a      	uxth	r2, r3
 8001352:	1d39      	adds	r1, r7, #4
 8001354:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001358:	4804      	ldr	r0, [pc, #16]	@ (800136c <main+0x50>)
 800135a:	f002 ffff 	bl	800435c <HAL_UART_Transmit>
	FEB_Main_Loop();
 800135e:	f7ff ff89 	bl	8001274 <FEB_Main_Loop>
	buf_len = sprintf((char*) buf, "Test");
 8001362:	bf00      	nop
 8001364:	e7eb      	b.n	800133e <main+0x22>
 8001366:	bf00      	nop
 8001368:	080077f8 	.word	0x080077f8
 800136c:	20000320 	.word	0x20000320

08001370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b094      	sub	sp, #80	@ 0x50
 8001374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001376:	f107 031c 	add.w	r3, r7, #28
 800137a:	2234      	movs	r2, #52	@ 0x34
 800137c:	2100      	movs	r1, #0
 800137e:	4618      	mov	r0, r3
 8001380:	f004 f8e2 	bl	8005548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001384:	f107 0308 	add.w	r3, r7, #8
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001394:	2300      	movs	r3, #0
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	4b29      	ldr	r3, [pc, #164]	@ (8001440 <SystemClock_Config+0xd0>)
 800139a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139c:	4a28      	ldr	r2, [pc, #160]	@ (8001440 <SystemClock_Config+0xd0>)
 800139e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80013a4:	4b26      	ldr	r3, [pc, #152]	@ (8001440 <SystemClock_Config+0xd0>)
 80013a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013b0:	2300      	movs	r3, #0
 80013b2:	603b      	str	r3, [r7, #0]
 80013b4:	4b23      	ldr	r3, [pc, #140]	@ (8001444 <SystemClock_Config+0xd4>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a22      	ldr	r2, [pc, #136]	@ (8001444 <SystemClock_Config+0xd4>)
 80013ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013be:	6013      	str	r3, [r2, #0]
 80013c0:	4b20      	ldr	r3, [pc, #128]	@ (8001444 <SystemClock_Config+0xd4>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013c8:	603b      	str	r3, [r7, #0]
 80013ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013cc:	2301      	movs	r3, #1
 80013ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d6:	2302      	movs	r3, #2
 80013d8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013e0:	2304      	movs	r3, #4
 80013e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 80013e4:	23a0      	movs	r3, #160	@ 0xa0
 80013e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013e8:	2302      	movs	r3, #2
 80013ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013ec:	2302      	movs	r3, #2
 80013ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013f0:	2302      	movs	r3, #2
 80013f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f4:	f107 031c 	add.w	r3, r7, #28
 80013f8:	4618      	mov	r0, r3
 80013fa:	f002 fcc1 	bl	8003d80 <HAL_RCC_OscConfig>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001404:	f000 f96c 	bl	80016e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001408:	230f      	movs	r3, #15
 800140a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800140c:	2302      	movs	r3, #2
 800140e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001410:	2300      	movs	r3, #0
 8001412:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001414:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001418:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800141a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800141e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001420:	f107 0308 	add.w	r3, r7, #8
 8001424:	2105      	movs	r1, #5
 8001426:	4618      	mov	r0, r3
 8001428:	f002 f960 	bl	80036ec <HAL_RCC_ClockConfig>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001432:	f000 f955 	bl	80016e0 <Error_Handler>
  }
}
 8001436:	bf00      	nop
 8001438:	3750      	adds	r7, #80	@ 0x50
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40023800 	.word	0x40023800
 8001444:	40007000 	.word	0x40007000

08001448 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800144c:	4b17      	ldr	r3, [pc, #92]	@ (80014ac <MX_CAN2_Init+0x64>)
 800144e:	4a18      	ldr	r2, [pc, #96]	@ (80014b0 <MX_CAN2_Init+0x68>)
 8001450:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8001452:	4b16      	ldr	r3, [pc, #88]	@ (80014ac <MX_CAN2_Init+0x64>)
 8001454:	2210      	movs	r2, #16
 8001456:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001458:	4b14      	ldr	r3, [pc, #80]	@ (80014ac <MX_CAN2_Init+0x64>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800145e:	4b13      	ldr	r3, [pc, #76]	@ (80014ac <MX_CAN2_Init+0x64>)
 8001460:	2200      	movs	r2, #0
 8001462:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001464:	4b11      	ldr	r3, [pc, #68]	@ (80014ac <MX_CAN2_Init+0x64>)
 8001466:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800146a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 800146c:	4b0f      	ldr	r3, [pc, #60]	@ (80014ac <MX_CAN2_Init+0x64>)
 800146e:	2200      	movs	r2, #0
 8001470:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001472:	4b0e      	ldr	r3, [pc, #56]	@ (80014ac <MX_CAN2_Init+0x64>)
 8001474:	2200      	movs	r2, #0
 8001476:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001478:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <MX_CAN2_Init+0x64>)
 800147a:	2200      	movs	r2, #0
 800147c:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800147e:	4b0b      	ldr	r3, [pc, #44]	@ (80014ac <MX_CAN2_Init+0x64>)
 8001480:	2200      	movs	r2, #0
 8001482:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001484:	4b09      	ldr	r3, [pc, #36]	@ (80014ac <MX_CAN2_Init+0x64>)
 8001486:	2200      	movs	r2, #0
 8001488:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800148a:	4b08      	ldr	r3, [pc, #32]	@ (80014ac <MX_CAN2_Init+0x64>)
 800148c:	2200      	movs	r2, #0
 800148e:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001490:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <MX_CAN2_Init+0x64>)
 8001492:	2200      	movs	r2, #0
 8001494:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001496:	4805      	ldr	r0, [pc, #20]	@ (80014ac <MX_CAN2_Init+0x64>)
 8001498:	f000 fc22 	bl	8001ce0 <HAL_CAN_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 80014a2:	f000 f91d 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200002a4 	.word	0x200002a4
 80014b0:	40006800 	.word	0x40006800

080014b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014b8:	4b12      	ldr	r3, [pc, #72]	@ (8001504 <MX_I2C1_Init+0x50>)
 80014ba:	4a13      	ldr	r2, [pc, #76]	@ (8001508 <MX_I2C1_Init+0x54>)
 80014bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014be:	4b11      	ldr	r3, [pc, #68]	@ (8001504 <MX_I2C1_Init+0x50>)
 80014c0:	4a12      	ldr	r2, [pc, #72]	@ (800150c <MX_I2C1_Init+0x58>)
 80014c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001504 <MX_I2C1_Init+0x50>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001504 <MX_I2C1_Init+0x50>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001504 <MX_I2C1_Init+0x50>)
 80014d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001504 <MX_I2C1_Init+0x50>)
 80014da:	2200      	movs	r2, #0
 80014dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014de:	4b09      	ldr	r3, [pc, #36]	@ (8001504 <MX_I2C1_Init+0x50>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014e4:	4b07      	ldr	r3, [pc, #28]	@ (8001504 <MX_I2C1_Init+0x50>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ea:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <MX_I2C1_Init+0x50>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014f0:	4804      	ldr	r0, [pc, #16]	@ (8001504 <MX_I2C1_Init+0x50>)
 80014f2:	f001 fc4d 	bl	8002d90 <HAL_I2C_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014fc:	f000 f8f0 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}
 8001504:	200002cc 	.word	0x200002cc
 8001508:	40005400 	.word	0x40005400
 800150c:	000186a0 	.word	0x000186a0

08001510 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001514:	4b11      	ldr	r3, [pc, #68]	@ (800155c <MX_USART2_UART_Init+0x4c>)
 8001516:	4a12      	ldr	r2, [pc, #72]	@ (8001560 <MX_USART2_UART_Init+0x50>)
 8001518:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800151a:	4b10      	ldr	r3, [pc, #64]	@ (800155c <MX_USART2_UART_Init+0x4c>)
 800151c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001520:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001522:	4b0e      	ldr	r3, [pc, #56]	@ (800155c <MX_USART2_UART_Init+0x4c>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001528:	4b0c      	ldr	r3, [pc, #48]	@ (800155c <MX_USART2_UART_Init+0x4c>)
 800152a:	2200      	movs	r2, #0
 800152c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800152e:	4b0b      	ldr	r3, [pc, #44]	@ (800155c <MX_USART2_UART_Init+0x4c>)
 8001530:	2200      	movs	r2, #0
 8001532:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001534:	4b09      	ldr	r3, [pc, #36]	@ (800155c <MX_USART2_UART_Init+0x4c>)
 8001536:	220c      	movs	r2, #12
 8001538:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153a:	4b08      	ldr	r3, [pc, #32]	@ (800155c <MX_USART2_UART_Init+0x4c>)
 800153c:	2200      	movs	r2, #0
 800153e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001540:	4b06      	ldr	r3, [pc, #24]	@ (800155c <MX_USART2_UART_Init+0x4c>)
 8001542:	2200      	movs	r2, #0
 8001544:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001546:	4805      	ldr	r0, [pc, #20]	@ (800155c <MX_USART2_UART_Init+0x4c>)
 8001548:	f002 feb8 	bl	80042bc <HAL_UART_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001552:	f000 f8c5 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000320 	.word	0x20000320
 8001560:	40004400 	.word	0x40004400

08001564 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08a      	sub	sp, #40	@ 0x28
 8001568:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
 8001578:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	4b54      	ldr	r3, [pc, #336]	@ (80016d0 <MX_GPIO_Init+0x16c>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	4a53      	ldr	r2, [pc, #332]	@ (80016d0 <MX_GPIO_Init+0x16c>)
 8001584:	f043 0304 	orr.w	r3, r3, #4
 8001588:	6313      	str	r3, [r2, #48]	@ 0x30
 800158a:	4b51      	ldr	r3, [pc, #324]	@ (80016d0 <MX_GPIO_Init+0x16c>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	f003 0304 	and.w	r3, r3, #4
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	4b4d      	ldr	r3, [pc, #308]	@ (80016d0 <MX_GPIO_Init+0x16c>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	4a4c      	ldr	r2, [pc, #304]	@ (80016d0 <MX_GPIO_Init+0x16c>)
 80015a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a6:	4b4a      	ldr	r3, [pc, #296]	@ (80016d0 <MX_GPIO_Init+0x16c>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	4b46      	ldr	r3, [pc, #280]	@ (80016d0 <MX_GPIO_Init+0x16c>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	4a45      	ldr	r2, [pc, #276]	@ (80016d0 <MX_GPIO_Init+0x16c>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c2:	4b43      	ldr	r3, [pc, #268]	@ (80016d0 <MX_GPIO_Init+0x16c>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	4b3f      	ldr	r3, [pc, #252]	@ (80016d0 <MX_GPIO_Init+0x16c>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	4a3e      	ldr	r2, [pc, #248]	@ (80016d0 <MX_GPIO_Init+0x16c>)
 80015d8:	f043 0302 	orr.w	r3, r3, #2
 80015dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015de:	4b3c      	ldr	r3, [pc, #240]	@ (80016d0 <MX_GPIO_Init+0x16c>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	607b      	str	r3, [r7, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_11, GPIO_PIN_RESET);
 80015ea:	2200      	movs	r2, #0
 80015ec:	f640 0108 	movw	r1, #2056	@ 0x808
 80015f0:	4838      	ldr	r0, [pc, #224]	@ (80016d4 <MX_GPIO_Init+0x170>)
 80015f2:	f001 fbb3 	bl	8002d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2123      	movs	r1, #35	@ 0x23
 80015fa:	4837      	ldr	r0, [pc, #220]	@ (80016d8 <MX_GPIO_Init+0x174>)
 80015fc:	f001 fbae 	bl	8002d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001600:	2200      	movs	r2, #0
 8001602:	2120      	movs	r1, #32
 8001604:	4835      	ldr	r0, [pc, #212]	@ (80016dc <MX_GPIO_Init+0x178>)
 8001606:	f001 fba9 	bl	8002d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800160a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800160e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001610:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	4619      	mov	r1, r3
 8001620:	482c      	ldr	r0, [pc, #176]	@ (80016d4 <MX_GPIO_Init+0x170>)
 8001622:	f001 fa07 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC10
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001626:	f241 4307 	movw	r3, #5127	@ 0x1407
 800162a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800162c:	2300      	movs	r3, #0
 800162e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	4619      	mov	r1, r3
 800163a:	4826      	ldr	r0, [pc, #152]	@ (80016d4 <MX_GPIO_Init+0x170>)
 800163c:	f001 f9fa 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_11;
 8001640:	f640 0308 	movw	r3, #2056	@ 0x808
 8001644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001646:	2301      	movs	r3, #1
 8001648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164e:	2300      	movs	r3, #0
 8001650:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4619      	mov	r1, r3
 8001658:	481e      	ldr	r0, [pc, #120]	@ (80016d4 <MX_GPIO_Init+0x170>)
 800165a:	f001 f9eb 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD2_Pin;
 800165e:	2323      	movs	r3, #35	@ 0x23
 8001660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001662:	2301      	movs	r3, #1
 8001664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	2300      	movs	r3, #0
 800166c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	4619      	mov	r1, r3
 8001674:	4818      	ldr	r0, [pc, #96]	@ (80016d8 <MX_GPIO_Init+0x174>)
 8001676:	f001 f9dd 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 800167a:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 800167e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001680:	2300      	movs	r3, #0
 8001682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	4619      	mov	r1, r3
 800168e:	4812      	ldr	r0, [pc, #72]	@ (80016d8 <MX_GPIO_Init+0x174>)
 8001690:	f001 f9d0 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8001694:	23d0      	movs	r3, #208	@ 0xd0
 8001696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001698:	2300      	movs	r3, #0
 800169a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	4619      	mov	r1, r3
 80016a6:	480d      	ldr	r0, [pc, #52]	@ (80016dc <MX_GPIO_Init+0x178>)
 80016a8:	f001 f9c4 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80016ac:	2320      	movs	r3, #32
 80016ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b0:	2301      	movs	r3, #1
 80016b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	4619      	mov	r1, r3
 80016c2:	4806      	ldr	r0, [pc, #24]	@ (80016dc <MX_GPIO_Init+0x178>)
 80016c4:	f001 f9b6 	bl	8002a34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016c8:	bf00      	nop
 80016ca:	3728      	adds	r7, #40	@ 0x28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40020800 	.word	0x40020800
 80016d8:	40020000 	.word	0x40020000
 80016dc:	40020400 	.word	0x40020400

080016e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e4:	b672      	cpsid	i
}
 80016e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <Error_Handler+0x8>

080016ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	607b      	str	r3, [r7, #4]
 80016f6:	4b10      	ldr	r3, [pc, #64]	@ (8001738 <HAL_MspInit+0x4c>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001738 <HAL_MspInit+0x4c>)
 80016fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001700:	6453      	str	r3, [r2, #68]	@ 0x44
 8001702:	4b0d      	ldr	r3, [pc, #52]	@ (8001738 <HAL_MspInit+0x4c>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001706:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	603b      	str	r3, [r7, #0]
 8001712:	4b09      	ldr	r3, [pc, #36]	@ (8001738 <HAL_MspInit+0x4c>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001716:	4a08      	ldr	r2, [pc, #32]	@ (8001738 <HAL_MspInit+0x4c>)
 8001718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800171c:	6413      	str	r3, [r2, #64]	@ 0x40
 800171e:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <HAL_MspInit+0x4c>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800172a:	2007      	movs	r0, #7
 800172c:	f001 f940 	bl	80029b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40023800 	.word	0x40023800

0800173c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08a      	sub	sp, #40	@ 0x28
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a28      	ldr	r2, [pc, #160]	@ (80017fc <HAL_CAN_MspInit+0xc0>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d14a      	bne.n	80017f4 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	4b27      	ldr	r3, [pc, #156]	@ (8001800 <HAL_CAN_MspInit+0xc4>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001766:	4a26      	ldr	r2, [pc, #152]	@ (8001800 <HAL_CAN_MspInit+0xc4>)
 8001768:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800176c:	6413      	str	r3, [r2, #64]	@ 0x40
 800176e:	4b24      	ldr	r3, [pc, #144]	@ (8001800 <HAL_CAN_MspInit+0xc4>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001772:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	4b20      	ldr	r3, [pc, #128]	@ (8001800 <HAL_CAN_MspInit+0xc4>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001782:	4a1f      	ldr	r2, [pc, #124]	@ (8001800 <HAL_CAN_MspInit+0xc4>)
 8001784:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001788:	6413      	str	r3, [r2, #64]	@ 0x40
 800178a:	4b1d      	ldr	r3, [pc, #116]	@ (8001800 <HAL_CAN_MspInit+0xc4>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	4b19      	ldr	r3, [pc, #100]	@ (8001800 <HAL_CAN_MspInit+0xc4>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	4a18      	ldr	r2, [pc, #96]	@ (8001800 <HAL_CAN_MspInit+0xc4>)
 80017a0:	f043 0302 	orr.w	r3, r3, #2
 80017a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a6:	4b16      	ldr	r3, [pc, #88]	@ (8001800 <HAL_CAN_MspInit+0xc4>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80017b2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80017b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b8:	2302      	movs	r3, #2
 80017ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c0:	2303      	movs	r3, #3
 80017c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80017c4:	2309      	movs	r3, #9
 80017c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	4619      	mov	r1, r3
 80017ce:	480d      	ldr	r0, [pc, #52]	@ (8001804 <HAL_CAN_MspInit+0xc8>)
 80017d0:	f001 f930 	bl	8002a34 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80017d4:	2200      	movs	r2, #0
 80017d6:	2100      	movs	r1, #0
 80017d8:	2040      	movs	r0, #64	@ 0x40
 80017da:	f001 f8f4 	bl	80029c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80017de:	2040      	movs	r0, #64	@ 0x40
 80017e0:	f001 f90d 	bl	80029fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 80017e4:	2200      	movs	r2, #0
 80017e6:	2100      	movs	r1, #0
 80017e8:	2041      	movs	r0, #65	@ 0x41
 80017ea:	f001 f8ec 	bl	80029c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80017ee:	2041      	movs	r0, #65	@ 0x41
 80017f0:	f001 f905 	bl	80029fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80017f4:	bf00      	nop
 80017f6:	3728      	adds	r7, #40	@ 0x28
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40006800 	.word	0x40006800
 8001800:	40023800 	.word	0x40023800
 8001804:	40020400 	.word	0x40020400

08001808 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08a      	sub	sp, #40	@ 0x28
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a19      	ldr	r2, [pc, #100]	@ (800188c <HAL_I2C_MspInit+0x84>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d12c      	bne.n	8001884 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	4b18      	ldr	r3, [pc, #96]	@ (8001890 <HAL_I2C_MspInit+0x88>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	4a17      	ldr	r2, [pc, #92]	@ (8001890 <HAL_I2C_MspInit+0x88>)
 8001834:	f043 0302 	orr.w	r3, r3, #2
 8001838:	6313      	str	r3, [r2, #48]	@ 0x30
 800183a:	4b15      	ldr	r3, [pc, #84]	@ (8001890 <HAL_I2C_MspInit+0x88>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	613b      	str	r3, [r7, #16]
 8001844:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001846:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800184a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800184c:	2312      	movs	r3, #18
 800184e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001854:	2303      	movs	r3, #3
 8001856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001858:	2304      	movs	r3, #4
 800185a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	4619      	mov	r1, r3
 8001862:	480c      	ldr	r0, [pc, #48]	@ (8001894 <HAL_I2C_MspInit+0x8c>)
 8001864:	f001 f8e6 	bl	8002a34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001868:	2300      	movs	r3, #0
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	4b08      	ldr	r3, [pc, #32]	@ (8001890 <HAL_I2C_MspInit+0x88>)
 800186e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001870:	4a07      	ldr	r2, [pc, #28]	@ (8001890 <HAL_I2C_MspInit+0x88>)
 8001872:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001876:	6413      	str	r3, [r2, #64]	@ 0x40
 8001878:	4b05      	ldr	r3, [pc, #20]	@ (8001890 <HAL_I2C_MspInit+0x88>)
 800187a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001884:	bf00      	nop
 8001886:	3728      	adds	r7, #40	@ 0x28
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40005400 	.word	0x40005400
 8001890:	40023800 	.word	0x40023800
 8001894:	40020400 	.word	0x40020400

08001898 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08a      	sub	sp, #40	@ 0x28
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a19      	ldr	r2, [pc, #100]	@ (800191c <HAL_UART_MspInit+0x84>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d12b      	bne.n	8001912 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	4b18      	ldr	r3, [pc, #96]	@ (8001920 <HAL_UART_MspInit+0x88>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c2:	4a17      	ldr	r2, [pc, #92]	@ (8001920 <HAL_UART_MspInit+0x88>)
 80018c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ca:	4b15      	ldr	r3, [pc, #84]	@ (8001920 <HAL_UART_MspInit+0x88>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	4b11      	ldr	r3, [pc, #68]	@ (8001920 <HAL_UART_MspInit+0x88>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018de:	4a10      	ldr	r2, [pc, #64]	@ (8001920 <HAL_UART_MspInit+0x88>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001920 <HAL_UART_MspInit+0x88>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018f2:	230c      	movs	r3, #12
 80018f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	2302      	movs	r3, #2
 80018f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fe:	2303      	movs	r3, #3
 8001900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001902:	2307      	movs	r3, #7
 8001904:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	4619      	mov	r1, r3
 800190c:	4805      	ldr	r0, [pc, #20]	@ (8001924 <HAL_UART_MspInit+0x8c>)
 800190e:	f001 f891 	bl	8002a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001912:	bf00      	nop
 8001914:	3728      	adds	r7, #40	@ 0x28
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40004400 	.word	0x40004400
 8001920:	40023800 	.word	0x40023800
 8001924:	40020000 	.word	0x40020000

08001928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800192c:	bf00      	nop
 800192e:	e7fd      	b.n	800192c <NMI_Handler+0x4>

08001930 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001934:	bf00      	nop
 8001936:	e7fd      	b.n	8001934 <HardFault_Handler+0x4>

08001938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800193c:	bf00      	nop
 800193e:	e7fd      	b.n	800193c <MemManage_Handler+0x4>

08001940 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001944:	bf00      	nop
 8001946:	e7fd      	b.n	8001944 <BusFault_Handler+0x4>

08001948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800194c:	bf00      	nop
 800194e:	e7fd      	b.n	800194c <UsageFault_Handler+0x4>

08001950 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800197e:	f000 f96b 	bl	8001c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800198c:	4802      	ldr	r0, [pc, #8]	@ (8001998 <CAN2_RX0_IRQHandler+0x10>)
 800198e:	f000 fd0f 	bl	80023b0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	200002a4 	.word	0x200002a4

0800199c <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80019a0:	4802      	ldr	r0, [pc, #8]	@ (80019ac <CAN2_RX1_IRQHandler+0x10>)
 80019a2:	f000 fd05 	bl	80023b0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	200002a4 	.word	0x200002a4

080019b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return 1;
 80019b4:	2301      	movs	r3, #1
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <_kill>:

int _kill(int pid, int sig)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019ca:	f003 fdc9 	bl	8005560 <__errno>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2216      	movs	r2, #22
 80019d2:	601a      	str	r2, [r3, #0]
  return -1;
 80019d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <_exit>:

void _exit (int status)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7ff ffe7 	bl	80019c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019f2:	bf00      	nop
 80019f4:	e7fd      	b.n	80019f2 <_exit+0x12>

080019f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b086      	sub	sp, #24
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	60f8      	str	r0, [r7, #12]
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
 8001a06:	e00a      	b.n	8001a1e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a08:	f3af 8000 	nop.w
 8001a0c:	4601      	mov	r1, r0
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	1c5a      	adds	r2, r3, #1
 8001a12:	60ba      	str	r2, [r7, #8]
 8001a14:	b2ca      	uxtb	r2, r1
 8001a16:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	dbf0      	blt.n	8001a08 <_read+0x12>
  }

  return len;
 8001a26:	687b      	ldr	r3, [r7, #4]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	e009      	b.n	8001a56 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	1c5a      	adds	r2, r3, #1
 8001a46:	60ba      	str	r2, [r7, #8]
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	3301      	adds	r3, #1
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	dbf1      	blt.n	8001a42 <_write+0x12>
  }
  return len;
 8001a5e:	687b      	ldr	r3, [r7, #4]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <_close>:

int _close(int file)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a90:	605a      	str	r2, [r3, #4]
  return 0;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <_isatty>:

int _isatty(int file)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001aa8:	2301      	movs	r3, #1
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b085      	sub	sp, #20
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	60f8      	str	r0, [r7, #12]
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ad8:	4a14      	ldr	r2, [pc, #80]	@ (8001b2c <_sbrk+0x5c>)
 8001ada:	4b15      	ldr	r3, [pc, #84]	@ (8001b30 <_sbrk+0x60>)
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ae4:	4b13      	ldr	r3, [pc, #76]	@ (8001b34 <_sbrk+0x64>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d102      	bne.n	8001af2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aec:	4b11      	ldr	r3, [pc, #68]	@ (8001b34 <_sbrk+0x64>)
 8001aee:	4a12      	ldr	r2, [pc, #72]	@ (8001b38 <_sbrk+0x68>)
 8001af0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001af2:	4b10      	ldr	r3, [pc, #64]	@ (8001b34 <_sbrk+0x64>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4413      	add	r3, r2
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d207      	bcs.n	8001b10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b00:	f003 fd2e 	bl	8005560 <__errno>
 8001b04:	4603      	mov	r3, r0
 8001b06:	220c      	movs	r2, #12
 8001b08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b0e:	e009      	b.n	8001b24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b10:	4b08      	ldr	r3, [pc, #32]	@ (8001b34 <_sbrk+0x64>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b16:	4b07      	ldr	r3, [pc, #28]	@ (8001b34 <_sbrk+0x64>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	4a05      	ldr	r2, [pc, #20]	@ (8001b34 <_sbrk+0x64>)
 8001b20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b22:	68fb      	ldr	r3, [r7, #12]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20020000 	.word	0x20020000
 8001b30:	00000400 	.word	0x00000400
 8001b34:	20000368 	.word	0x20000368
 8001b38:	200004c0 	.word	0x200004c0

08001b3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b40:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <SystemInit+0x20>)
 8001b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b46:	4a05      	ldr	r2, [pc, #20]	@ (8001b5c <SystemInit+0x20>)
 8001b48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b64:	480d      	ldr	r0, [pc, #52]	@ (8001b9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b66:	490e      	ldr	r1, [pc, #56]	@ (8001ba0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b68:	4a0e      	ldr	r2, [pc, #56]	@ (8001ba4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b6c:	e002      	b.n	8001b74 <LoopCopyDataInit>

08001b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b72:	3304      	adds	r3, #4

08001b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b78:	d3f9      	bcc.n	8001b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b7a:	4a0b      	ldr	r2, [pc, #44]	@ (8001ba8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b7c:	4c0b      	ldr	r4, [pc, #44]	@ (8001bac <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b80:	e001      	b.n	8001b86 <LoopFillZerobss>

08001b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b84:	3204      	adds	r2, #4

08001b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b88:	d3fb      	bcc.n	8001b82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b8a:	f7ff ffd7 	bl	8001b3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b8e:	f003 fced 	bl	800556c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b92:	f7ff fbc3 	bl	800131c <main>
  bx  lr    
 8001b96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ba0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001ba4:	08007b98 	.word	0x08007b98
  ldr r2, =_sbss
 8001ba8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001bac:	200004bc 	.word	0x200004bc

08001bb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bb0:	e7fe      	b.n	8001bb0 <ADC_IRQHandler>
	...

08001bb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf4 <HAL_Init+0x40>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a0d      	ldr	r2, [pc, #52]	@ (8001bf4 <HAL_Init+0x40>)
 8001bbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf4 <HAL_Init+0x40>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf4 <HAL_Init+0x40>)
 8001bca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bd0:	4b08      	ldr	r3, [pc, #32]	@ (8001bf4 <HAL_Init+0x40>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a07      	ldr	r2, [pc, #28]	@ (8001bf4 <HAL_Init+0x40>)
 8001bd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bdc:	2003      	movs	r0, #3
 8001bde:	f000 fee7 	bl	80029b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001be2:	2000      	movs	r0, #0
 8001be4:	f000 f808 	bl	8001bf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001be8:	f7ff fd80 	bl	80016ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40023c00 	.word	0x40023c00

08001bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c00:	4b12      	ldr	r3, [pc, #72]	@ (8001c4c <HAL_InitTick+0x54>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b12      	ldr	r3, [pc, #72]	@ (8001c50 <HAL_InitTick+0x58>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 feff 	bl	8002a1a <HAL_SYSTICK_Config>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e00e      	b.n	8001c44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b0f      	cmp	r3, #15
 8001c2a:	d80a      	bhi.n	8001c42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c34:	f000 fec7 	bl	80029c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c38:	4a06      	ldr	r2, [pc, #24]	@ (8001c54 <HAL_InitTick+0x5c>)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	e000      	b.n	8001c44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20000000 	.word	0x20000000
 8001c50:	20000008 	.word	0x20000008
 8001c54:	20000004 	.word	0x20000004

08001c58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c5c:	4b06      	ldr	r3, [pc, #24]	@ (8001c78 <HAL_IncTick+0x20>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	461a      	mov	r2, r3
 8001c62:	4b06      	ldr	r3, [pc, #24]	@ (8001c7c <HAL_IncTick+0x24>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4413      	add	r3, r2
 8001c68:	4a04      	ldr	r2, [pc, #16]	@ (8001c7c <HAL_IncTick+0x24>)
 8001c6a:	6013      	str	r3, [r2, #0]
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	20000008 	.word	0x20000008
 8001c7c:	2000036c 	.word	0x2000036c

08001c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return uwTick;
 8001c84:	4b03      	ldr	r3, [pc, #12]	@ (8001c94 <HAL_GetTick+0x14>)
 8001c86:	681b      	ldr	r3, [r3, #0]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	2000036c 	.word	0x2000036c

08001c98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca0:	f7ff ffee 	bl	8001c80 <HAL_GetTick>
 8001ca4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001cb0:	d005      	beq.n	8001cbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001cdc <HAL_Delay+0x44>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4413      	add	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cbe:	bf00      	nop
 8001cc0:	f7ff ffde 	bl	8001c80 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d8f7      	bhi.n	8001cc0 <HAL_Delay+0x28>
  {
  }
}
 8001cd0:	bf00      	nop
 8001cd2:	bf00      	nop
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000008 	.word	0x20000008

08001ce0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e0ed      	b.n	8001ece <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d102      	bne.n	8001d04 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff fd1c 	bl	800173c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f042 0201 	orr.w	r2, r2, #1
 8001d12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d14:	f7ff ffb4 	bl	8001c80 <HAL_GetTick>
 8001d18:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d1a:	e012      	b.n	8001d42 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d1c:	f7ff ffb0 	bl	8001c80 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b0a      	cmp	r3, #10
 8001d28:	d90b      	bls.n	8001d42 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2205      	movs	r2, #5
 8001d3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e0c5      	b.n	8001ece <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d0e5      	beq.n	8001d1c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0202 	bic.w	r2, r2, #2
 8001d5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d60:	f7ff ff8e 	bl	8001c80 <HAL_GetTick>
 8001d64:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d66:	e012      	b.n	8001d8e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d68:	f7ff ff8a 	bl	8001c80 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b0a      	cmp	r3, #10
 8001d74:	d90b      	bls.n	8001d8e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d7a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2205      	movs	r2, #5
 8001d86:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e09f      	b.n	8001ece <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1e5      	bne.n	8001d68 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	7e1b      	ldrb	r3, [r3, #24]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d108      	bne.n	8001db6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	e007      	b.n	8001dc6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001dc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	7e5b      	ldrb	r3, [r3, #25]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d108      	bne.n	8001de0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	e007      	b.n	8001df0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001dee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	7e9b      	ldrb	r3, [r3, #26]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d108      	bne.n	8001e0a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 0220 	orr.w	r2, r2, #32
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	e007      	b.n	8001e1a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0220 	bic.w	r2, r2, #32
 8001e18:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	7edb      	ldrb	r3, [r3, #27]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d108      	bne.n	8001e34 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0210 	bic.w	r2, r2, #16
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	e007      	b.n	8001e44 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0210 	orr.w	r2, r2, #16
 8001e42:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	7f1b      	ldrb	r3, [r3, #28]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d108      	bne.n	8001e5e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0208 	orr.w	r2, r2, #8
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	e007      	b.n	8001e6e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 0208 	bic.w	r2, r2, #8
 8001e6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	7f5b      	ldrb	r3, [r3, #29]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d108      	bne.n	8001e88 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f042 0204 	orr.w	r2, r2, #4
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	e007      	b.n	8001e98 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 0204 	bic.w	r2, r2, #4
 8001e96:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	ea42 0103 	orr.w	r1, r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	1e5a      	subs	r2, r3, #1
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b087      	sub	sp, #28
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eee:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001ef0:	7cfb      	ldrb	r3, [r7, #19]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d003      	beq.n	8001efe <HAL_CAN_ConfigFilter+0x26>
 8001ef6:	7cfb      	ldrb	r3, [r7, #19]
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	f040 80be 	bne.w	800207a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001efe:	4b65      	ldr	r3, [pc, #404]	@ (8002094 <HAL_CAN_ConfigFilter+0x1bc>)
 8001f00:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f08:	f043 0201 	orr.w	r2, r3, #1
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f18:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2c:	021b      	lsls	r3, r3, #8
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	f003 031f 	and.w	r3, r3, #31
 8001f3e:	2201      	movs	r2, #1
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	401a      	ands	r2, r3
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	69db      	ldr	r3, [r3, #28]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d123      	bne.n	8001fa8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	401a      	ands	r2, r3
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f82:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	3248      	adds	r2, #72	@ 0x48
 8001f88:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f9c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f9e:	6979      	ldr	r1, [r7, #20]
 8001fa0:	3348      	adds	r3, #72	@ 0x48
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	440b      	add	r3, r1
 8001fa6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d122      	bne.n	8001ff6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001fd0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	3248      	adds	r2, #72	@ 0x48
 8001fd6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fea:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fec:	6979      	ldr	r1, [r7, #20]
 8001fee:	3348      	adds	r3, #72	@ 0x48
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	440b      	add	r3, r1
 8001ff4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d109      	bne.n	8002012 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	43db      	mvns	r3, r3
 8002008:	401a      	ands	r2, r3
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002010:	e007      	b.n	8002022 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	431a      	orrs	r2, r3
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d109      	bne.n	800203e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	43db      	mvns	r3, r3
 8002034:	401a      	ands	r2, r3
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800203c:	e007      	b.n	800204e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	431a      	orrs	r2, r3
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d107      	bne.n	8002066 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	431a      	orrs	r2, r3
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800206c:	f023 0201 	bic.w	r2, r3, #1
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	e006      	b.n	8002088 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
  }
}
 8002088:	4618      	mov	r0, r3
 800208a:	371c      	adds	r7, #28
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	40006400 	.word	0x40006400

08002098 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d12e      	bne.n	800210a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2202      	movs	r2, #2
 80020b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0201 	bic.w	r2, r2, #1
 80020c2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80020c4:	f7ff fddc 	bl	8001c80 <HAL_GetTick>
 80020c8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80020ca:	e012      	b.n	80020f2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020cc:	f7ff fdd8 	bl	8001c80 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b0a      	cmp	r3, #10
 80020d8:	d90b      	bls.n	80020f2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020de:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2205      	movs	r2, #5
 80020ea:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e012      	b.n	8002118 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1e5      	bne.n	80020cc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002106:	2300      	movs	r3, #0
 8002108:	e006      	b.n	8002118 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
  }
}
 8002118:	4618      	mov	r0, r3
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002120:	b480      	push	{r7}
 8002122:	b087      	sub	sp, #28
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
 800212c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002134:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002136:	7dfb      	ldrb	r3, [r7, #23]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d003      	beq.n	8002144 <HAL_CAN_GetRxMessage+0x24>
 800213c:	7dfb      	ldrb	r3, [r7, #23]
 800213e:	2b02      	cmp	r3, #2
 8002140:	f040 8103 	bne.w	800234a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10e      	bne.n	8002168 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	f003 0303 	and.w	r3, r3, #3
 8002154:	2b00      	cmp	r3, #0
 8002156:	d116      	bne.n	8002186 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e0f7      	b.n	8002358 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d107      	bne.n	8002186 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e0e8      	b.n	8002358 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	331b      	adds	r3, #27
 800218e:	011b      	lsls	r3, r3, #4
 8002190:	4413      	add	r3, r2
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0204 	and.w	r2, r3, #4
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10c      	bne.n	80021be <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	331b      	adds	r3, #27
 80021ac:	011b      	lsls	r3, r3, #4
 80021ae:	4413      	add	r3, r2
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	0d5b      	lsrs	r3, r3, #21
 80021b4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	e00b      	b.n	80021d6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	331b      	adds	r3, #27
 80021c6:	011b      	lsls	r3, r3, #4
 80021c8:	4413      	add	r3, r2
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	08db      	lsrs	r3, r3, #3
 80021ce:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	331b      	adds	r3, #27
 80021de:	011b      	lsls	r3, r3, #4
 80021e0:	4413      	add	r3, r2
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0202 	and.w	r2, r3, #2
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	331b      	adds	r3, #27
 80021f4:	011b      	lsls	r3, r3, #4
 80021f6:	4413      	add	r3, r2
 80021f8:	3304      	adds	r3, #4
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0308 	and.w	r3, r3, #8
 8002200:	2b00      	cmp	r3, #0
 8002202:	d003      	beq.n	800220c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2208      	movs	r2, #8
 8002208:	611a      	str	r2, [r3, #16]
 800220a:	e00b      	b.n	8002224 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	331b      	adds	r3, #27
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	4413      	add	r3, r2
 8002218:	3304      	adds	r3, #4
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 020f 	and.w	r2, r3, #15
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	331b      	adds	r3, #27
 800222c:	011b      	lsls	r3, r3, #4
 800222e:	4413      	add	r3, r2
 8002230:	3304      	adds	r3, #4
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	0a1b      	lsrs	r3, r3, #8
 8002236:	b2da      	uxtb	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	331b      	adds	r3, #27
 8002244:	011b      	lsls	r3, r3, #4
 8002246:	4413      	add	r3, r2
 8002248:	3304      	adds	r3, #4
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	0c1b      	lsrs	r3, r3, #16
 800224e:	b29a      	uxth	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	011b      	lsls	r3, r3, #4
 800225c:	4413      	add	r3, r2
 800225e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	b2da      	uxtb	r2, r3
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	011b      	lsls	r3, r3, #4
 8002272:	4413      	add	r3, r2
 8002274:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	0a1a      	lsrs	r2, r3, #8
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	3301      	adds	r3, #1
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	011b      	lsls	r3, r3, #4
 800228c:	4413      	add	r3, r2
 800228e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	0c1a      	lsrs	r2, r3, #16
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	3302      	adds	r3, #2
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	011b      	lsls	r3, r3, #4
 80022a6:	4413      	add	r3, r2
 80022a8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	0e1a      	lsrs	r2, r3, #24
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	3303      	adds	r3, #3
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	011b      	lsls	r3, r3, #4
 80022c0:	4413      	add	r3, r2
 80022c2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	3304      	adds	r3, #4
 80022cc:	b2d2      	uxtb	r2, r2
 80022ce:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	011b      	lsls	r3, r3, #4
 80022d8:	4413      	add	r3, r2
 80022da:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	0a1a      	lsrs	r2, r3, #8
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	3305      	adds	r3, #5
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	011b      	lsls	r3, r3, #4
 80022f2:	4413      	add	r3, r2
 80022f4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	0c1a      	lsrs	r2, r3, #16
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	3306      	adds	r3, #6
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	011b      	lsls	r3, r3, #4
 800230c:	4413      	add	r3, r2
 800230e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	0e1a      	lsrs	r2, r3, #24
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	3307      	adds	r3, #7
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d108      	bne.n	8002336 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0220 	orr.w	r2, r2, #32
 8002332:	60da      	str	r2, [r3, #12]
 8002334:	e007      	b.n	8002346 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	691a      	ldr	r2, [r3, #16]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f042 0220 	orr.w	r2, r2, #32
 8002344:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	e006      	b.n	8002358 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
  }
}
 8002358:	4618      	mov	r0, r3
 800235a:	371c      	adds	r7, #28
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002374:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002376:	7bfb      	ldrb	r3, [r7, #15]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d002      	beq.n	8002382 <HAL_CAN_ActivateNotification+0x1e>
 800237c:	7bfb      	ldrb	r3, [r7, #15]
 800237e:	2b02      	cmp	r3, #2
 8002380:	d109      	bne.n	8002396 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6959      	ldr	r1, [r3, #20]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	430a      	orrs	r2, r1
 8002390:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	e006      	b.n	80023a4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
  }
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08a      	sub	sp, #40	@ 0x28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80023b8:	2300      	movs	r3, #0
 80023ba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80023ec:	6a3b      	ldr	r3, [r7, #32]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d07c      	beq.n	80024f0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d023      	beq.n	8002448 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2201      	movs	r2, #1
 8002406:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f983 	bl	800271e <HAL_CAN_TxMailbox0CompleteCallback>
 8002418:	e016      	b.n	8002448 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	2b00      	cmp	r3, #0
 8002422:	d004      	beq.n	800242e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002426:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800242a:	627b      	str	r3, [r7, #36]	@ 0x24
 800242c:	e00c      	b.n	8002448 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	f003 0308 	and.w	r3, r3, #8
 8002434:	2b00      	cmp	r3, #0
 8002436:	d004      	beq.n	8002442 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800243e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002440:	e002      	b.n	8002448 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f989 	bl	800275a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800244e:	2b00      	cmp	r3, #0
 8002450:	d024      	beq.n	800249c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800245a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f963 	bl	8002732 <HAL_CAN_TxMailbox1CompleteCallback>
 800246c:	e016      	b.n	800249c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002474:	2b00      	cmp	r3, #0
 8002476:	d004      	beq.n	8002482 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800247e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002480:	e00c      	b.n	800249c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002488:	2b00      	cmp	r3, #0
 800248a:	d004      	beq.n	8002496 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800248c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002492:	627b      	str	r3, [r7, #36]	@ 0x24
 8002494:	e002      	b.n	800249c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 f969 	bl	800276e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d024      	beq.n	80024f0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80024ae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f943 	bl	8002746 <HAL_CAN_TxMailbox2CompleteCallback>
 80024c0:	e016      	b.n	80024f0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d004      	beq.n	80024d6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80024cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80024d4:	e00c      	b.n	80024f0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d004      	beq.n	80024ea <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80024e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80024e8:	e002      	b.n	80024f0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 f949 	bl	8002782 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80024f0:	6a3b      	ldr	r3, [r7, #32]
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00c      	beq.n	8002514 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	f003 0310 	and.w	r3, r3, #16
 8002500:	2b00      	cmp	r3, #0
 8002502:	d007      	beq.n	8002514 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002506:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800250a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2210      	movs	r2, #16
 8002512:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002514:	6a3b      	ldr	r3, [r7, #32]
 8002516:	f003 0304 	and.w	r3, r3, #4
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00b      	beq.n	8002536 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	f003 0308 	and.w	r3, r3, #8
 8002524:	2b00      	cmp	r3, #0
 8002526:	d006      	beq.n	8002536 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2208      	movs	r2, #8
 800252e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f930 	bl	8002796 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002536:	6a3b      	ldr	r3, [r7, #32]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d009      	beq.n	8002554 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d002      	beq.n	8002554 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7fe fce6 	bl	8000f20 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002554:	6a3b      	ldr	r3, [r7, #32]
 8002556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00c      	beq.n	8002578 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	f003 0310 	and.w	r3, r3, #16
 8002564:	2b00      	cmp	r3, #0
 8002566:	d007      	beq.n	8002578 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800256e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2210      	movs	r2, #16
 8002576:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	f003 0320 	and.w	r3, r3, #32
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00b      	beq.n	800259a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	f003 0308 	and.w	r3, r3, #8
 8002588:	2b00      	cmp	r3, #0
 800258a:	d006      	beq.n	800259a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2208      	movs	r2, #8
 8002592:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f000 f912 	bl	80027be <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800259a:	6a3b      	ldr	r3, [r7, #32]
 800259c:	f003 0310 	and.w	r3, r3, #16
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d009      	beq.n	80025b8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d002      	beq.n	80025b8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f8f9 	bl	80027aa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80025b8:	6a3b      	ldr	r3, [r7, #32]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00b      	beq.n	80025da <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	f003 0310 	and.w	r3, r3, #16
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d006      	beq.n	80025da <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2210      	movs	r2, #16
 80025d2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 f8fc 	bl	80027d2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00b      	beq.n	80025fc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d006      	beq.n	80025fc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2208      	movs	r2, #8
 80025f4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f8f5 	bl	80027e6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80025fc:	6a3b      	ldr	r3, [r7, #32]
 80025fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d07b      	beq.n	80026fe <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	d072      	beq.n	80026f6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002610:	6a3b      	ldr	r3, [r7, #32]
 8002612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002616:	2b00      	cmp	r3, #0
 8002618:	d008      	beq.n	800262c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800262c:	6a3b      	ldr	r3, [r7, #32]
 800262e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002632:	2b00      	cmp	r3, #0
 8002634:	d008      	beq.n	8002648 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002642:	f043 0302 	orr.w	r3, r3, #2
 8002646:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002648:	6a3b      	ldr	r3, [r7, #32]
 800264a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800264e:	2b00      	cmp	r3, #0
 8002650:	d008      	beq.n	8002664 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002658:	2b00      	cmp	r3, #0
 800265a:	d003      	beq.n	8002664 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800265c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265e:	f043 0304 	orr.w	r3, r3, #4
 8002662:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002664:	6a3b      	ldr	r3, [r7, #32]
 8002666:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800266a:	2b00      	cmp	r3, #0
 800266c:	d043      	beq.n	80026f6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002674:	2b00      	cmp	r3, #0
 8002676:	d03e      	beq.n	80026f6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800267e:	2b60      	cmp	r3, #96	@ 0x60
 8002680:	d02b      	beq.n	80026da <HAL_CAN_IRQHandler+0x32a>
 8002682:	2b60      	cmp	r3, #96	@ 0x60
 8002684:	d82e      	bhi.n	80026e4 <HAL_CAN_IRQHandler+0x334>
 8002686:	2b50      	cmp	r3, #80	@ 0x50
 8002688:	d022      	beq.n	80026d0 <HAL_CAN_IRQHandler+0x320>
 800268a:	2b50      	cmp	r3, #80	@ 0x50
 800268c:	d82a      	bhi.n	80026e4 <HAL_CAN_IRQHandler+0x334>
 800268e:	2b40      	cmp	r3, #64	@ 0x40
 8002690:	d019      	beq.n	80026c6 <HAL_CAN_IRQHandler+0x316>
 8002692:	2b40      	cmp	r3, #64	@ 0x40
 8002694:	d826      	bhi.n	80026e4 <HAL_CAN_IRQHandler+0x334>
 8002696:	2b30      	cmp	r3, #48	@ 0x30
 8002698:	d010      	beq.n	80026bc <HAL_CAN_IRQHandler+0x30c>
 800269a:	2b30      	cmp	r3, #48	@ 0x30
 800269c:	d822      	bhi.n	80026e4 <HAL_CAN_IRQHandler+0x334>
 800269e:	2b10      	cmp	r3, #16
 80026a0:	d002      	beq.n	80026a8 <HAL_CAN_IRQHandler+0x2f8>
 80026a2:	2b20      	cmp	r3, #32
 80026a4:	d005      	beq.n	80026b2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80026a6:	e01d      	b.n	80026e4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80026a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026aa:	f043 0308 	orr.w	r3, r3, #8
 80026ae:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80026b0:	e019      	b.n	80026e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80026b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b4:	f043 0310 	orr.w	r3, r3, #16
 80026b8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80026ba:	e014      	b.n	80026e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80026bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026be:	f043 0320 	orr.w	r3, r3, #32
 80026c2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80026c4:	e00f      	b.n	80026e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80026c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026cc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80026ce:	e00a      	b.n	80026e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80026d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026d6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80026d8:	e005      	b.n	80026e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80026da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026e0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80026e2:	e000      	b.n	80026e6 <HAL_CAN_IRQHandler+0x336>
            break;
 80026e4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	699a      	ldr	r2, [r3, #24]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80026f4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2204      	movs	r2, #4
 80026fc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80026fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002700:	2b00      	cmp	r3, #0
 8002702:	d008      	beq.n	8002716 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f872 	bl	80027fa <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002716:	bf00      	nop
 8002718:	3728      	adds	r7, #40	@ 0x28
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80027aa:	b480      	push	{r7}
 80027ac:	b083      	sub	sp, #12
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
	...

08002810 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002820:	4b0c      	ldr	r3, [pc, #48]	@ (8002854 <__NVIC_SetPriorityGrouping+0x44>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800282c:	4013      	ands	r3, r2
 800282e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002838:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800283c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002842:	4a04      	ldr	r2, [pc, #16]	@ (8002854 <__NVIC_SetPriorityGrouping+0x44>)
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	60d3      	str	r3, [r2, #12]
}
 8002848:	bf00      	nop
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	e000ed00 	.word	0xe000ed00

08002858 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800285c:	4b04      	ldr	r3, [pc, #16]	@ (8002870 <__NVIC_GetPriorityGrouping+0x18>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	0a1b      	lsrs	r3, r3, #8
 8002862:	f003 0307 	and.w	r3, r3, #7
}
 8002866:	4618      	mov	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	e000ed00 	.word	0xe000ed00

08002874 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800287e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002882:	2b00      	cmp	r3, #0
 8002884:	db0b      	blt.n	800289e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	f003 021f 	and.w	r2, r3, #31
 800288c:	4907      	ldr	r1, [pc, #28]	@ (80028ac <__NVIC_EnableIRQ+0x38>)
 800288e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002892:	095b      	lsrs	r3, r3, #5
 8002894:	2001      	movs	r0, #1
 8002896:	fa00 f202 	lsl.w	r2, r0, r2
 800289a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	e000e100 	.word	0xe000e100

080028b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	6039      	str	r1, [r7, #0]
 80028ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	db0a      	blt.n	80028da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	490c      	ldr	r1, [pc, #48]	@ (80028fc <__NVIC_SetPriority+0x4c>)
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	0112      	lsls	r2, r2, #4
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	440b      	add	r3, r1
 80028d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028d8:	e00a      	b.n	80028f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	4908      	ldr	r1, [pc, #32]	@ (8002900 <__NVIC_SetPriority+0x50>)
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	3b04      	subs	r3, #4
 80028e8:	0112      	lsls	r2, r2, #4
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	440b      	add	r3, r1
 80028ee:	761a      	strb	r2, [r3, #24]
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	e000e100 	.word	0xe000e100
 8002900:	e000ed00 	.word	0xe000ed00

08002904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002904:	b480      	push	{r7}
 8002906:	b089      	sub	sp, #36	@ 0x24
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f1c3 0307 	rsb	r3, r3, #7
 800291e:	2b04      	cmp	r3, #4
 8002920:	bf28      	it	cs
 8002922:	2304      	movcs	r3, #4
 8002924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	3304      	adds	r3, #4
 800292a:	2b06      	cmp	r3, #6
 800292c:	d902      	bls.n	8002934 <NVIC_EncodePriority+0x30>
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	3b03      	subs	r3, #3
 8002932:	e000      	b.n	8002936 <NVIC_EncodePriority+0x32>
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002938:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43da      	mvns	r2, r3
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	401a      	ands	r2, r3
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800294c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	fa01 f303 	lsl.w	r3, r1, r3
 8002956:	43d9      	mvns	r1, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800295c:	4313      	orrs	r3, r2
         );
}
 800295e:	4618      	mov	r0, r3
 8002960:	3724      	adds	r7, #36	@ 0x24
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
	...

0800296c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3b01      	subs	r3, #1
 8002978:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800297c:	d301      	bcc.n	8002982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800297e:	2301      	movs	r3, #1
 8002980:	e00f      	b.n	80029a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002982:	4a0a      	ldr	r2, [pc, #40]	@ (80029ac <SysTick_Config+0x40>)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3b01      	subs	r3, #1
 8002988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800298a:	210f      	movs	r1, #15
 800298c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002990:	f7ff ff8e 	bl	80028b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002994:	4b05      	ldr	r3, [pc, #20]	@ (80029ac <SysTick_Config+0x40>)
 8002996:	2200      	movs	r2, #0
 8002998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800299a:	4b04      	ldr	r3, [pc, #16]	@ (80029ac <SysTick_Config+0x40>)
 800299c:	2207      	movs	r2, #7
 800299e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	e000e010 	.word	0xe000e010

080029b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7ff ff29 	bl	8002810 <__NVIC_SetPriorityGrouping>
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b086      	sub	sp, #24
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	4603      	mov	r3, r0
 80029ce:	60b9      	str	r1, [r7, #8]
 80029d0:	607a      	str	r2, [r7, #4]
 80029d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029d8:	f7ff ff3e 	bl	8002858 <__NVIC_GetPriorityGrouping>
 80029dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	68b9      	ldr	r1, [r7, #8]
 80029e2:	6978      	ldr	r0, [r7, #20]
 80029e4:	f7ff ff8e 	bl	8002904 <NVIC_EncodePriority>
 80029e8:	4602      	mov	r2, r0
 80029ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ee:	4611      	mov	r1, r2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff ff5d 	bl	80028b0 <__NVIC_SetPriority>
}
 80029f6:	bf00      	nop
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	4603      	mov	r3, r0
 8002a06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff ff31 	bl	8002874 <__NVIC_EnableIRQ>
}
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b082      	sub	sp, #8
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7ff ffa2 	bl	800296c <SysTick_Config>
 8002a28:	4603      	mov	r3, r0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
	...

08002a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b089      	sub	sp, #36	@ 0x24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61fb      	str	r3, [r7, #28]
 8002a4e:	e165      	b.n	8002d1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a50:	2201      	movs	r2, #1
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	4013      	ands	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	f040 8154 	bne.w	8002d16 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d005      	beq.n	8002a86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d130      	bne.n	8002ae8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	2203      	movs	r2, #3
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	43db      	mvns	r3, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002abc:	2201      	movs	r2, #1
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	091b      	lsrs	r3, r3, #4
 8002ad2:	f003 0201 	and.w	r2, r3, #1
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	2b03      	cmp	r3, #3
 8002af2:	d017      	beq.n	8002b24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	2203      	movs	r2, #3
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 0303 	and.w	r3, r3, #3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d123      	bne.n	8002b78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	08da      	lsrs	r2, r3, #3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3208      	adds	r2, #8
 8002b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	220f      	movs	r2, #15
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4013      	ands	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	691a      	ldr	r2, [r3, #16]
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	08da      	lsrs	r2, r3, #3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	3208      	adds	r2, #8
 8002b72:	69b9      	ldr	r1, [r7, #24]
 8002b74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	2203      	movs	r2, #3
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 0203 	and.w	r2, r3, #3
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 80ae 	beq.w	8002d16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	4b5d      	ldr	r3, [pc, #372]	@ (8002d34 <HAL_GPIO_Init+0x300>)
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc2:	4a5c      	ldr	r2, [pc, #368]	@ (8002d34 <HAL_GPIO_Init+0x300>)
 8002bc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bca:	4b5a      	ldr	r3, [pc, #360]	@ (8002d34 <HAL_GPIO_Init+0x300>)
 8002bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bd6:	4a58      	ldr	r2, [pc, #352]	@ (8002d38 <HAL_GPIO_Init+0x304>)
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	089b      	lsrs	r3, r3, #2
 8002bdc:	3302      	adds	r3, #2
 8002bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	220f      	movs	r2, #15
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a4f      	ldr	r2, [pc, #316]	@ (8002d3c <HAL_GPIO_Init+0x308>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d025      	beq.n	8002c4e <HAL_GPIO_Init+0x21a>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a4e      	ldr	r2, [pc, #312]	@ (8002d40 <HAL_GPIO_Init+0x30c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d01f      	beq.n	8002c4a <HAL_GPIO_Init+0x216>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a4d      	ldr	r2, [pc, #308]	@ (8002d44 <HAL_GPIO_Init+0x310>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d019      	beq.n	8002c46 <HAL_GPIO_Init+0x212>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a4c      	ldr	r2, [pc, #304]	@ (8002d48 <HAL_GPIO_Init+0x314>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d013      	beq.n	8002c42 <HAL_GPIO_Init+0x20e>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a4b      	ldr	r2, [pc, #300]	@ (8002d4c <HAL_GPIO_Init+0x318>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d00d      	beq.n	8002c3e <HAL_GPIO_Init+0x20a>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a4a      	ldr	r2, [pc, #296]	@ (8002d50 <HAL_GPIO_Init+0x31c>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d007      	beq.n	8002c3a <HAL_GPIO_Init+0x206>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a49      	ldr	r2, [pc, #292]	@ (8002d54 <HAL_GPIO_Init+0x320>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d101      	bne.n	8002c36 <HAL_GPIO_Init+0x202>
 8002c32:	2306      	movs	r3, #6
 8002c34:	e00c      	b.n	8002c50 <HAL_GPIO_Init+0x21c>
 8002c36:	2307      	movs	r3, #7
 8002c38:	e00a      	b.n	8002c50 <HAL_GPIO_Init+0x21c>
 8002c3a:	2305      	movs	r3, #5
 8002c3c:	e008      	b.n	8002c50 <HAL_GPIO_Init+0x21c>
 8002c3e:	2304      	movs	r3, #4
 8002c40:	e006      	b.n	8002c50 <HAL_GPIO_Init+0x21c>
 8002c42:	2303      	movs	r3, #3
 8002c44:	e004      	b.n	8002c50 <HAL_GPIO_Init+0x21c>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e002      	b.n	8002c50 <HAL_GPIO_Init+0x21c>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <HAL_GPIO_Init+0x21c>
 8002c4e:	2300      	movs	r3, #0
 8002c50:	69fa      	ldr	r2, [r7, #28]
 8002c52:	f002 0203 	and.w	r2, r2, #3
 8002c56:	0092      	lsls	r2, r2, #2
 8002c58:	4093      	lsls	r3, r2
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c60:	4935      	ldr	r1, [pc, #212]	@ (8002d38 <HAL_GPIO_Init+0x304>)
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	089b      	lsrs	r3, r3, #2
 8002c66:	3302      	adds	r3, #2
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c6e:	4b3a      	ldr	r3, [pc, #232]	@ (8002d58 <HAL_GPIO_Init+0x324>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	43db      	mvns	r3, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c92:	4a31      	ldr	r2, [pc, #196]	@ (8002d58 <HAL_GPIO_Init+0x324>)
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c98:	4b2f      	ldr	r3, [pc, #188]	@ (8002d58 <HAL_GPIO_Init+0x324>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cbc:	4a26      	ldr	r2, [pc, #152]	@ (8002d58 <HAL_GPIO_Init+0x324>)
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cc2:	4b25      	ldr	r3, [pc, #148]	@ (8002d58 <HAL_GPIO_Init+0x324>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ce6:	4a1c      	ldr	r2, [pc, #112]	@ (8002d58 <HAL_GPIO_Init+0x324>)
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cec:	4b1a      	ldr	r3, [pc, #104]	@ (8002d58 <HAL_GPIO_Init+0x324>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d003      	beq.n	8002d10 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d10:	4a11      	ldr	r2, [pc, #68]	@ (8002d58 <HAL_GPIO_Init+0x324>)
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	61fb      	str	r3, [r7, #28]
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	2b0f      	cmp	r3, #15
 8002d20:	f67f ae96 	bls.w	8002a50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d24:	bf00      	nop
 8002d26:	bf00      	nop
 8002d28:	3724      	adds	r7, #36	@ 0x24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	40023800 	.word	0x40023800
 8002d38:	40013800 	.word	0x40013800
 8002d3c:	40020000 	.word	0x40020000
 8002d40:	40020400 	.word	0x40020400
 8002d44:	40020800 	.word	0x40020800
 8002d48:	40020c00 	.word	0x40020c00
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	40021400 	.word	0x40021400
 8002d54:	40021800 	.word	0x40021800
 8002d58:	40013c00 	.word	0x40013c00

08002d5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	807b      	strh	r3, [r7, #2]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d6c:	787b      	ldrb	r3, [r7, #1]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d72:	887a      	ldrh	r2, [r7, #2]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d78:	e003      	b.n	8002d82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d7a:	887b      	ldrh	r3, [r7, #2]
 8002d7c:	041a      	lsls	r2, r3, #16
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	619a      	str	r2, [r3, #24]
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
	...

08002d90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e12b      	b.n	8002ffa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d106      	bne.n	8002dbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7fe fd26 	bl	8001808 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2224      	movs	r2, #36	@ 0x24
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0201 	bic.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002de2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002df2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002df4:	f000 fd6c 	bl	80038d0 <HAL_RCC_GetPCLK1Freq>
 8002df8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	4a81      	ldr	r2, [pc, #516]	@ (8003004 <HAL_I2C_Init+0x274>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d807      	bhi.n	8002e14 <HAL_I2C_Init+0x84>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4a80      	ldr	r2, [pc, #512]	@ (8003008 <HAL_I2C_Init+0x278>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	bf94      	ite	ls
 8002e0c:	2301      	movls	r3, #1
 8002e0e:	2300      	movhi	r3, #0
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	e006      	b.n	8002e22 <HAL_I2C_Init+0x92>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4a7d      	ldr	r2, [pc, #500]	@ (800300c <HAL_I2C_Init+0x27c>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	bf94      	ite	ls
 8002e1c:	2301      	movls	r3, #1
 8002e1e:	2300      	movhi	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e0e7      	b.n	8002ffa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	4a78      	ldr	r2, [pc, #480]	@ (8003010 <HAL_I2C_Init+0x280>)
 8002e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e32:	0c9b      	lsrs	r3, r3, #18
 8002e34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	4a6a      	ldr	r2, [pc, #424]	@ (8003004 <HAL_I2C_Init+0x274>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d802      	bhi.n	8002e64 <HAL_I2C_Init+0xd4>
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	3301      	adds	r3, #1
 8002e62:	e009      	b.n	8002e78 <HAL_I2C_Init+0xe8>
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002e6a:	fb02 f303 	mul.w	r3, r2, r3
 8002e6e:	4a69      	ldr	r2, [pc, #420]	@ (8003014 <HAL_I2C_Init+0x284>)
 8002e70:	fba2 2303 	umull	r2, r3, r2, r3
 8002e74:	099b      	lsrs	r3, r3, #6
 8002e76:	3301      	adds	r3, #1
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002e8a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	495c      	ldr	r1, [pc, #368]	@ (8003004 <HAL_I2C_Init+0x274>)
 8002e94:	428b      	cmp	r3, r1
 8002e96:	d819      	bhi.n	8002ecc <HAL_I2C_Init+0x13c>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	1e59      	subs	r1, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ea6:	1c59      	adds	r1, r3, #1
 8002ea8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002eac:	400b      	ands	r3, r1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00a      	beq.n	8002ec8 <HAL_I2C_Init+0x138>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	1e59      	subs	r1, r3, #1
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec6:	e051      	b.n	8002f6c <HAL_I2C_Init+0x1dc>
 8002ec8:	2304      	movs	r3, #4
 8002eca:	e04f      	b.n	8002f6c <HAL_I2C_Init+0x1dc>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d111      	bne.n	8002ef8 <HAL_I2C_Init+0x168>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	1e58      	subs	r0, r3, #1
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6859      	ldr	r1, [r3, #4]
 8002edc:	460b      	mov	r3, r1
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	440b      	add	r3, r1
 8002ee2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	bf0c      	ite	eq
 8002ef0:	2301      	moveq	r3, #1
 8002ef2:	2300      	movne	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	e012      	b.n	8002f1e <HAL_I2C_Init+0x18e>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	1e58      	subs	r0, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6859      	ldr	r1, [r3, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	0099      	lsls	r1, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f0e:	3301      	adds	r3, #1
 8002f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	bf0c      	ite	eq
 8002f18:	2301      	moveq	r3, #1
 8002f1a:	2300      	movne	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_I2C_Init+0x196>
 8002f22:	2301      	movs	r3, #1
 8002f24:	e022      	b.n	8002f6c <HAL_I2C_Init+0x1dc>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10e      	bne.n	8002f4c <HAL_I2C_Init+0x1bc>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	1e58      	subs	r0, r3, #1
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6859      	ldr	r1, [r3, #4]
 8002f36:	460b      	mov	r3, r1
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	440b      	add	r3, r1
 8002f3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f40:	3301      	adds	r3, #1
 8002f42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f4a:	e00f      	b.n	8002f6c <HAL_I2C_Init+0x1dc>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	1e58      	subs	r0, r3, #1
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6859      	ldr	r1, [r3, #4]
 8002f54:	460b      	mov	r3, r1
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	0099      	lsls	r1, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f62:	3301      	adds	r3, #1
 8002f64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	6809      	ldr	r1, [r1, #0]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69da      	ldr	r2, [r3, #28]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	431a      	orrs	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002f9a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6911      	ldr	r1, [r2, #16]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	68d2      	ldr	r2, [r2, #12]
 8002fa6:	4311      	orrs	r1, r2
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6812      	ldr	r2, [r2, #0]
 8002fac:	430b      	orrs	r3, r1
 8002fae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695a      	ldr	r2, [r3, #20]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	000186a0 	.word	0x000186a0
 8003008:	001e847f 	.word	0x001e847f
 800300c:	003d08ff 	.word	0x003d08ff
 8003010:	431bde83 	.word	0x431bde83
 8003014:	10624dd3 	.word	0x10624dd3

08003018 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b088      	sub	sp, #32
 800301c:	af02      	add	r7, sp, #8
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	4608      	mov	r0, r1
 8003022:	4611      	mov	r1, r2
 8003024:	461a      	mov	r2, r3
 8003026:	4603      	mov	r3, r0
 8003028:	817b      	strh	r3, [r7, #10]
 800302a:	460b      	mov	r3, r1
 800302c:	813b      	strh	r3, [r7, #8]
 800302e:	4613      	mov	r3, r2
 8003030:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003032:	f7fe fe25 	bl	8001c80 <HAL_GetTick>
 8003036:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b20      	cmp	r3, #32
 8003042:	f040 80d9 	bne.w	80031f8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	2319      	movs	r3, #25
 800304c:	2201      	movs	r2, #1
 800304e:	496d      	ldr	r1, [pc, #436]	@ (8003204 <HAL_I2C_Mem_Write+0x1ec>)
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 f971 	bl	8003338 <I2C_WaitOnFlagUntilTimeout>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800305c:	2302      	movs	r3, #2
 800305e:	e0cc      	b.n	80031fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003066:	2b01      	cmp	r3, #1
 8003068:	d101      	bne.n	800306e <HAL_I2C_Mem_Write+0x56>
 800306a:	2302      	movs	r3, #2
 800306c:	e0c5      	b.n	80031fa <HAL_I2C_Mem_Write+0x1e2>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b01      	cmp	r3, #1
 8003082:	d007      	beq.n	8003094 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0201 	orr.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2221      	movs	r2, #33	@ 0x21
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2240      	movs	r2, #64	@ 0x40
 80030b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6a3a      	ldr	r2, [r7, #32]
 80030be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80030c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	4a4d      	ldr	r2, [pc, #308]	@ (8003208 <HAL_I2C_Mem_Write+0x1f0>)
 80030d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030d6:	88f8      	ldrh	r0, [r7, #6]
 80030d8:	893a      	ldrh	r2, [r7, #8]
 80030da:	8979      	ldrh	r1, [r7, #10]
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	9301      	str	r3, [sp, #4]
 80030e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	4603      	mov	r3, r0
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 f890 	bl	800320c <I2C_RequestMemoryWrite>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d052      	beq.n	8003198 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e081      	b.n	80031fa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 fa36 	bl	800356c <I2C_WaitOnTXEFlagUntilTimeout>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00d      	beq.n	8003122 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310a:	2b04      	cmp	r3, #4
 800310c:	d107      	bne.n	800311e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800311c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e06b      	b.n	80031fa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003126:	781a      	ldrb	r2, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003132:	1c5a      	adds	r2, r3, #1
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800313c:	3b01      	subs	r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003148:	b29b      	uxth	r3, r3
 800314a:	3b01      	subs	r3, #1
 800314c:	b29a      	uxth	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b04      	cmp	r3, #4
 800315e:	d11b      	bne.n	8003198 <HAL_I2C_Mem_Write+0x180>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003164:	2b00      	cmp	r3, #0
 8003166:	d017      	beq.n	8003198 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316c:	781a      	ldrb	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003178:	1c5a      	adds	r2, r3, #1
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003182:	3b01      	subs	r3, #1
 8003184:	b29a      	uxth	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800318e:	b29b      	uxth	r3, r3
 8003190:	3b01      	subs	r3, #1
 8003192:	b29a      	uxth	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1aa      	bne.n	80030f6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 fa29 	bl	80035fc <I2C_WaitOnBTFFlagUntilTimeout>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00d      	beq.n	80031cc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b4:	2b04      	cmp	r3, #4
 80031b6:	d107      	bne.n	80031c8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e016      	b.n	80031fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2220      	movs	r2, #32
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80031f4:	2300      	movs	r3, #0
 80031f6:	e000      	b.n	80031fa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80031f8:	2302      	movs	r3, #2
  }
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3718      	adds	r7, #24
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	00100002 	.word	0x00100002
 8003208:	ffff0000 	.word	0xffff0000

0800320c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b088      	sub	sp, #32
 8003210:	af02      	add	r7, sp, #8
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	4608      	mov	r0, r1
 8003216:	4611      	mov	r1, r2
 8003218:	461a      	mov	r2, r3
 800321a:	4603      	mov	r3, r0
 800321c:	817b      	strh	r3, [r7, #10]
 800321e:	460b      	mov	r3, r1
 8003220:	813b      	strh	r3, [r7, #8]
 8003222:	4613      	mov	r3, r2
 8003224:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003234:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	6a3b      	ldr	r3, [r7, #32]
 800323c:	2200      	movs	r2, #0
 800323e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 f878 	bl	8003338 <I2C_WaitOnFlagUntilTimeout>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00d      	beq.n	800326a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003258:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800325c:	d103      	bne.n	8003266 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003264:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e05f      	b.n	800332a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800326a:	897b      	ldrh	r3, [r7, #10]
 800326c:	b2db      	uxtb	r3, r3
 800326e:	461a      	mov	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003278:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800327a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327c:	6a3a      	ldr	r2, [r7, #32]
 800327e:	492d      	ldr	r1, [pc, #180]	@ (8003334 <I2C_RequestMemoryWrite+0x128>)
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 f8d3 	bl	800342c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e04c      	b.n	800332a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003290:	2300      	movs	r3, #0
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	617b      	str	r3, [r7, #20]
 80032a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032a8:	6a39      	ldr	r1, [r7, #32]
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 f95e 	bl	800356c <I2C_WaitOnTXEFlagUntilTimeout>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00d      	beq.n	80032d2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d107      	bne.n	80032ce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e02b      	b.n	800332a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032d2:	88fb      	ldrh	r3, [r7, #6]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d105      	bne.n	80032e4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032d8:	893b      	ldrh	r3, [r7, #8]
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	611a      	str	r2, [r3, #16]
 80032e2:	e021      	b.n	8003328 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80032e4:	893b      	ldrh	r3, [r7, #8]
 80032e6:	0a1b      	lsrs	r3, r3, #8
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	b2da      	uxtb	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032f4:	6a39      	ldr	r1, [r7, #32]
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 f938 	bl	800356c <I2C_WaitOnTXEFlagUntilTimeout>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00d      	beq.n	800331e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003306:	2b04      	cmp	r3, #4
 8003308:	d107      	bne.n	800331a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003318:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e005      	b.n	800332a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800331e:	893b      	ldrh	r3, [r7, #8]
 8003320:	b2da      	uxtb	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3718      	adds	r7, #24
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	00010002 	.word	0x00010002

08003338 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	603b      	str	r3, [r7, #0]
 8003344:	4613      	mov	r3, r2
 8003346:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003348:	e048      	b.n	80033dc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003350:	d044      	beq.n	80033dc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003352:	f7fe fc95 	bl	8001c80 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	429a      	cmp	r2, r3
 8003360:	d302      	bcc.n	8003368 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d139      	bne.n	80033dc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	0c1b      	lsrs	r3, r3, #16
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b01      	cmp	r3, #1
 8003370:	d10d      	bne.n	800338e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	43da      	mvns	r2, r3
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	4013      	ands	r3, r2
 800337e:	b29b      	uxth	r3, r3
 8003380:	2b00      	cmp	r3, #0
 8003382:	bf0c      	ite	eq
 8003384:	2301      	moveq	r3, #1
 8003386:	2300      	movne	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	461a      	mov	r2, r3
 800338c:	e00c      	b.n	80033a8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	43da      	mvns	r2, r3
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	4013      	ands	r3, r2
 800339a:	b29b      	uxth	r3, r3
 800339c:	2b00      	cmp	r3, #0
 800339e:	bf0c      	ite	eq
 80033a0:	2301      	moveq	r3, #1
 80033a2:	2300      	movne	r3, #0
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	461a      	mov	r2, r3
 80033a8:	79fb      	ldrb	r3, [r7, #7]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d116      	bne.n	80033dc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2220      	movs	r2, #32
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c8:	f043 0220 	orr.w	r2, r3, #32
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e023      	b.n	8003424 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	0c1b      	lsrs	r3, r3, #16
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d10d      	bne.n	8003402 <I2C_WaitOnFlagUntilTimeout+0xca>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	43da      	mvns	r2, r3
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	4013      	ands	r3, r2
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	bf0c      	ite	eq
 80033f8:	2301      	moveq	r3, #1
 80033fa:	2300      	movne	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	461a      	mov	r2, r3
 8003400:	e00c      	b.n	800341c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	43da      	mvns	r2, r3
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	4013      	ands	r3, r2
 800340e:	b29b      	uxth	r3, r3
 8003410:	2b00      	cmp	r3, #0
 8003412:	bf0c      	ite	eq
 8003414:	2301      	moveq	r3, #1
 8003416:	2300      	movne	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	461a      	mov	r2, r3
 800341c:	79fb      	ldrb	r3, [r7, #7]
 800341e:	429a      	cmp	r2, r3
 8003420:	d093      	beq.n	800334a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
 8003438:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800343a:	e071      	b.n	8003520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003446:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800344a:	d123      	bne.n	8003494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800345a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003464:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003480:	f043 0204 	orr.w	r2, r3, #4
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e067      	b.n	8003564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800349a:	d041      	beq.n	8003520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800349c:	f7fe fbf0 	bl	8001c80 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d302      	bcc.n	80034b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d136      	bne.n	8003520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	0c1b      	lsrs	r3, r3, #16
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d10c      	bne.n	80034d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	43da      	mvns	r2, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	4013      	ands	r3, r2
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	bf14      	ite	ne
 80034ce:	2301      	movne	r3, #1
 80034d0:	2300      	moveq	r3, #0
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	e00b      	b.n	80034ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	43da      	mvns	r2, r3
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	4013      	ands	r3, r2
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	bf14      	ite	ne
 80034e8:	2301      	movne	r3, #1
 80034ea:	2300      	moveq	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d016      	beq.n	8003520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2220      	movs	r2, #32
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350c:	f043 0220 	orr.w	r2, r3, #32
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e021      	b.n	8003564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	0c1b      	lsrs	r3, r3, #16
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b01      	cmp	r3, #1
 8003528:	d10c      	bne.n	8003544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	43da      	mvns	r2, r3
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	4013      	ands	r3, r2
 8003536:	b29b      	uxth	r3, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	bf14      	ite	ne
 800353c:	2301      	movne	r3, #1
 800353e:	2300      	moveq	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	e00b      	b.n	800355c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	43da      	mvns	r2, r3
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	4013      	ands	r3, r2
 8003550:	b29b      	uxth	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	bf14      	ite	ne
 8003556:	2301      	movne	r3, #1
 8003558:	2300      	moveq	r3, #0
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	f47f af6d 	bne.w	800343c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003578:	e034      	b.n	80035e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f000 f886 	bl	800368c <I2C_IsAcknowledgeFailed>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e034      	b.n	80035f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003590:	d028      	beq.n	80035e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003592:	f7fe fb75 	bl	8001c80 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	68ba      	ldr	r2, [r7, #8]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d302      	bcc.n	80035a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d11d      	bne.n	80035e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035b2:	2b80      	cmp	r3, #128	@ 0x80
 80035b4:	d016      	beq.n	80035e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2220      	movs	r2, #32
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d0:	f043 0220 	orr.w	r2, r3, #32
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e007      	b.n	80035f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ee:	2b80      	cmp	r3, #128	@ 0x80
 80035f0:	d1c3      	bne.n	800357a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003608:	e034      	b.n	8003674 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f000 f83e 	bl	800368c <I2C_IsAcknowledgeFailed>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e034      	b.n	8003684 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003620:	d028      	beq.n	8003674 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003622:	f7fe fb2d 	bl	8001c80 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	68ba      	ldr	r2, [r7, #8]
 800362e:	429a      	cmp	r2, r3
 8003630:	d302      	bcc.n	8003638 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d11d      	bne.n	8003674 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	f003 0304 	and.w	r3, r3, #4
 8003642:	2b04      	cmp	r3, #4
 8003644:	d016      	beq.n	8003674 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2220      	movs	r2, #32
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003660:	f043 0220 	orr.w	r2, r3, #32
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e007      	b.n	8003684 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	f003 0304 	and.w	r3, r3, #4
 800367e:	2b04      	cmp	r3, #4
 8003680:	d1c3      	bne.n	800360a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800369e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036a2:	d11b      	bne.n	80036dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2220      	movs	r2, #32
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c8:	f043 0204 	orr.w	r2, r3, #4
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e000      	b.n	80036de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
	...

080036ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e0cc      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003700:	4b68      	ldr	r3, [pc, #416]	@ (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 030f 	and.w	r3, r3, #15
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	429a      	cmp	r2, r3
 800370c:	d90c      	bls.n	8003728 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370e:	4b65      	ldr	r3, [pc, #404]	@ (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003716:	4b63      	ldr	r3, [pc, #396]	@ (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	429a      	cmp	r2, r3
 8003722:	d001      	beq.n	8003728 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e0b8      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d020      	beq.n	8003776 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003740:	4b59      	ldr	r3, [pc, #356]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	4a58      	ldr	r2, [pc, #352]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003746:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800374a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0308 	and.w	r3, r3, #8
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003758:	4b53      	ldr	r3, [pc, #332]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	4a52      	ldr	r2, [pc, #328]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003762:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003764:	4b50      	ldr	r3, [pc, #320]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	494d      	ldr	r1, [pc, #308]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003772:	4313      	orrs	r3, r2
 8003774:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d044      	beq.n	800380c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d107      	bne.n	800379a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800378a:	4b47      	ldr	r3, [pc, #284]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d119      	bne.n	80037ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e07f      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d003      	beq.n	80037aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037a6:	2b03      	cmp	r3, #3
 80037a8:	d107      	bne.n	80037ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037aa:	4b3f      	ldr	r3, [pc, #252]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d109      	bne.n	80037ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e06f      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ba:	4b3b      	ldr	r3, [pc, #236]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e067      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ca:	4b37      	ldr	r3, [pc, #220]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f023 0203 	bic.w	r2, r3, #3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	4934      	ldr	r1, [pc, #208]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037dc:	f7fe fa50 	bl	8001c80 <HAL_GetTick>
 80037e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e2:	e00a      	b.n	80037fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e4:	f7fe fa4c 	bl	8001c80 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e04f      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fa:	4b2b      	ldr	r3, [pc, #172]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 020c 	and.w	r2, r3, #12
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	429a      	cmp	r2, r3
 800380a:	d1eb      	bne.n	80037e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800380c:	4b25      	ldr	r3, [pc, #148]	@ (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 030f 	and.w	r3, r3, #15
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d20c      	bcs.n	8003834 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381a:	4b22      	ldr	r3, [pc, #136]	@ (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003822:	4b20      	ldr	r3, [pc, #128]	@ (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d001      	beq.n	8003834 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e032      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	d008      	beq.n	8003852 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003840:	4b19      	ldr	r3, [pc, #100]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	4916      	ldr	r1, [pc, #88]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	4313      	orrs	r3, r2
 8003850:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	2b00      	cmp	r3, #0
 800385c:	d009      	beq.n	8003872 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800385e:	4b12      	ldr	r3, [pc, #72]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	490e      	ldr	r1, [pc, #56]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800386e:	4313      	orrs	r3, r2
 8003870:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003872:	f000 f855 	bl	8003920 <HAL_RCC_GetSysClockFreq>
 8003876:	4602      	mov	r2, r0
 8003878:	4b0b      	ldr	r3, [pc, #44]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	091b      	lsrs	r3, r3, #4
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	490a      	ldr	r1, [pc, #40]	@ (80038ac <HAL_RCC_ClockConfig+0x1c0>)
 8003884:	5ccb      	ldrb	r3, [r1, r3]
 8003886:	fa22 f303 	lsr.w	r3, r2, r3
 800388a:	4a09      	ldr	r2, [pc, #36]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 800388c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800388e:	4b09      	ldr	r3, [pc, #36]	@ (80038b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f7fe f9b0 	bl	8001bf8 <HAL_InitTick>

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	40023c00 	.word	0x40023c00
 80038a8:	40023800 	.word	0x40023800
 80038ac:	08007800 	.word	0x08007800
 80038b0:	20000000 	.word	0x20000000
 80038b4:	20000004 	.word	0x20000004

080038b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038bc:	4b03      	ldr	r3, [pc, #12]	@ (80038cc <HAL_RCC_GetHCLKFreq+0x14>)
 80038be:	681b      	ldr	r3, [r3, #0]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	20000000 	.word	0x20000000

080038d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038d4:	f7ff fff0 	bl	80038b8 <HAL_RCC_GetHCLKFreq>
 80038d8:	4602      	mov	r2, r0
 80038da:	4b05      	ldr	r3, [pc, #20]	@ (80038f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	0a9b      	lsrs	r3, r3, #10
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	4903      	ldr	r1, [pc, #12]	@ (80038f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038e6:	5ccb      	ldrb	r3, [r1, r3]
 80038e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40023800 	.word	0x40023800
 80038f4:	08007810 	.word	0x08007810

080038f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038fc:	f7ff ffdc 	bl	80038b8 <HAL_RCC_GetHCLKFreq>
 8003900:	4602      	mov	r2, r0
 8003902:	4b05      	ldr	r3, [pc, #20]	@ (8003918 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	0b5b      	lsrs	r3, r3, #13
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	4903      	ldr	r1, [pc, #12]	@ (800391c <HAL_RCC_GetPCLK2Freq+0x24>)
 800390e:	5ccb      	ldrb	r3, [r1, r3]
 8003910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003914:	4618      	mov	r0, r3
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40023800 	.word	0x40023800
 800391c:	08007810 	.word	0x08007810

08003920 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003924:	b0ae      	sub	sp, #184	@ 0xb8
 8003926:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800392e:	2300      	movs	r3, #0
 8003930:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003934:	2300      	movs	r3, #0
 8003936:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800393a:	2300      	movs	r3, #0
 800393c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003940:	2300      	movs	r3, #0
 8003942:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003946:	4bcb      	ldr	r3, [pc, #812]	@ (8003c74 <HAL_RCC_GetSysClockFreq+0x354>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 030c 	and.w	r3, r3, #12
 800394e:	2b0c      	cmp	r3, #12
 8003950:	f200 8206 	bhi.w	8003d60 <HAL_RCC_GetSysClockFreq+0x440>
 8003954:	a201      	add	r2, pc, #4	@ (adr r2, 800395c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395a:	bf00      	nop
 800395c:	08003991 	.word	0x08003991
 8003960:	08003d61 	.word	0x08003d61
 8003964:	08003d61 	.word	0x08003d61
 8003968:	08003d61 	.word	0x08003d61
 800396c:	08003999 	.word	0x08003999
 8003970:	08003d61 	.word	0x08003d61
 8003974:	08003d61 	.word	0x08003d61
 8003978:	08003d61 	.word	0x08003d61
 800397c:	080039a1 	.word	0x080039a1
 8003980:	08003d61 	.word	0x08003d61
 8003984:	08003d61 	.word	0x08003d61
 8003988:	08003d61 	.word	0x08003d61
 800398c:	08003b91 	.word	0x08003b91
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003990:	4bb9      	ldr	r3, [pc, #740]	@ (8003c78 <HAL_RCC_GetSysClockFreq+0x358>)
 8003992:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8003996:	e1e7      	b.n	8003d68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003998:	4bb8      	ldr	r3, [pc, #736]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0x35c>)
 800399a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800399e:	e1e3      	b.n	8003d68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039a0:	4bb4      	ldr	r3, [pc, #720]	@ (8003c74 <HAL_RCC_GetSysClockFreq+0x354>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039ac:	4bb1      	ldr	r3, [pc, #708]	@ (8003c74 <HAL_RCC_GetSysClockFreq+0x354>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d071      	beq.n	8003a9c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039b8:	4bae      	ldr	r3, [pc, #696]	@ (8003c74 <HAL_RCC_GetSysClockFreq+0x354>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	099b      	lsrs	r3, r3, #6
 80039be:	2200      	movs	r2, #0
 80039c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80039c4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80039c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80039cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80039d4:	2300      	movs	r3, #0
 80039d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80039da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80039de:	4622      	mov	r2, r4
 80039e0:	462b      	mov	r3, r5
 80039e2:	f04f 0000 	mov.w	r0, #0
 80039e6:	f04f 0100 	mov.w	r1, #0
 80039ea:	0159      	lsls	r1, r3, #5
 80039ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039f0:	0150      	lsls	r0, r2, #5
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	4621      	mov	r1, r4
 80039f8:	1a51      	subs	r1, r2, r1
 80039fa:	6439      	str	r1, [r7, #64]	@ 0x40
 80039fc:	4629      	mov	r1, r5
 80039fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003a02:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a04:	f04f 0200 	mov.w	r2, #0
 8003a08:	f04f 0300 	mov.w	r3, #0
 8003a0c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003a10:	4649      	mov	r1, r9
 8003a12:	018b      	lsls	r3, r1, #6
 8003a14:	4641      	mov	r1, r8
 8003a16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a1a:	4641      	mov	r1, r8
 8003a1c:	018a      	lsls	r2, r1, #6
 8003a1e:	4641      	mov	r1, r8
 8003a20:	1a51      	subs	r1, r2, r1
 8003a22:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003a24:	4649      	mov	r1, r9
 8003a26:	eb63 0301 	sbc.w	r3, r3, r1
 8003a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	f04f 0300 	mov.w	r3, #0
 8003a34:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003a38:	4649      	mov	r1, r9
 8003a3a:	00cb      	lsls	r3, r1, #3
 8003a3c:	4641      	mov	r1, r8
 8003a3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a42:	4641      	mov	r1, r8
 8003a44:	00ca      	lsls	r2, r1, #3
 8003a46:	4610      	mov	r0, r2
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	4622      	mov	r2, r4
 8003a4e:	189b      	adds	r3, r3, r2
 8003a50:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a52:	462b      	mov	r3, r5
 8003a54:	460a      	mov	r2, r1
 8003a56:	eb42 0303 	adc.w	r3, r2, r3
 8003a5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	f04f 0300 	mov.w	r3, #0
 8003a64:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003a68:	4629      	mov	r1, r5
 8003a6a:	024b      	lsls	r3, r1, #9
 8003a6c:	4621      	mov	r1, r4
 8003a6e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a72:	4621      	mov	r1, r4
 8003a74:	024a      	lsls	r2, r1, #9
 8003a76:	4610      	mov	r0, r2
 8003a78:	4619      	mov	r1, r3
 8003a7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a84:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003a88:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003a8c:	f7fd f8ac 	bl	8000be8 <__aeabi_uldivmod>
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	4613      	mov	r3, r2
 8003a96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a9a:	e067      	b.n	8003b6c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a9c:	4b75      	ldr	r3, [pc, #468]	@ (8003c74 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	099b      	lsrs	r3, r3, #6
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003aa8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003aac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003aba:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003abe:	4622      	mov	r2, r4
 8003ac0:	462b      	mov	r3, r5
 8003ac2:	f04f 0000 	mov.w	r0, #0
 8003ac6:	f04f 0100 	mov.w	r1, #0
 8003aca:	0159      	lsls	r1, r3, #5
 8003acc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ad0:	0150      	lsls	r0, r2, #5
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	4621      	mov	r1, r4
 8003ad8:	1a51      	subs	r1, r2, r1
 8003ada:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003adc:	4629      	mov	r1, r5
 8003ade:	eb63 0301 	sbc.w	r3, r3, r1
 8003ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003af0:	4649      	mov	r1, r9
 8003af2:	018b      	lsls	r3, r1, #6
 8003af4:	4641      	mov	r1, r8
 8003af6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003afa:	4641      	mov	r1, r8
 8003afc:	018a      	lsls	r2, r1, #6
 8003afe:	4641      	mov	r1, r8
 8003b00:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b04:	4649      	mov	r1, r9
 8003b06:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	f04f 0300 	mov.w	r3, #0
 8003b12:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b16:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b1e:	4692      	mov	sl, r2
 8003b20:	469b      	mov	fp, r3
 8003b22:	4623      	mov	r3, r4
 8003b24:	eb1a 0303 	adds.w	r3, sl, r3
 8003b28:	623b      	str	r3, [r7, #32]
 8003b2a:	462b      	mov	r3, r5
 8003b2c:	eb4b 0303 	adc.w	r3, fp, r3
 8003b30:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b32:	f04f 0200 	mov.w	r2, #0
 8003b36:	f04f 0300 	mov.w	r3, #0
 8003b3a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003b3e:	4629      	mov	r1, r5
 8003b40:	028b      	lsls	r3, r1, #10
 8003b42:	4621      	mov	r1, r4
 8003b44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b48:	4621      	mov	r1, r4
 8003b4a:	028a      	lsls	r2, r1, #10
 8003b4c:	4610      	mov	r0, r2
 8003b4e:	4619      	mov	r1, r3
 8003b50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b54:	2200      	movs	r2, #0
 8003b56:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b58:	677a      	str	r2, [r7, #116]	@ 0x74
 8003b5a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003b5e:	f7fd f843 	bl	8000be8 <__aeabi_uldivmod>
 8003b62:	4602      	mov	r2, r0
 8003b64:	460b      	mov	r3, r1
 8003b66:	4613      	mov	r3, r2
 8003b68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b6c:	4b41      	ldr	r3, [pc, #260]	@ (8003c74 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	0c1b      	lsrs	r3, r3, #16
 8003b72:	f003 0303 	and.w	r3, r3, #3
 8003b76:	3301      	adds	r3, #1
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8003b7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003b8e:	e0eb      	b.n	8003d68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b90:	4b38      	ldr	r3, [pc, #224]	@ (8003c74 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b9c:	4b35      	ldr	r3, [pc, #212]	@ (8003c74 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d06b      	beq.n	8003c80 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ba8:	4b32      	ldr	r3, [pc, #200]	@ (8003c74 <HAL_RCC_GetSysClockFreq+0x354>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	099b      	lsrs	r3, r3, #6
 8003bae:	2200      	movs	r2, #0
 8003bb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003bb2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003bb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bba:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	667b      	str	r3, [r7, #100]	@ 0x64
 8003bc0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003bc4:	4622      	mov	r2, r4
 8003bc6:	462b      	mov	r3, r5
 8003bc8:	f04f 0000 	mov.w	r0, #0
 8003bcc:	f04f 0100 	mov.w	r1, #0
 8003bd0:	0159      	lsls	r1, r3, #5
 8003bd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bd6:	0150      	lsls	r0, r2, #5
 8003bd8:	4602      	mov	r2, r0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	4621      	mov	r1, r4
 8003bde:	1a51      	subs	r1, r2, r1
 8003be0:	61b9      	str	r1, [r7, #24]
 8003be2:	4629      	mov	r1, r5
 8003be4:	eb63 0301 	sbc.w	r3, r3, r1
 8003be8:	61fb      	str	r3, [r7, #28]
 8003bea:	f04f 0200 	mov.w	r2, #0
 8003bee:	f04f 0300 	mov.w	r3, #0
 8003bf2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003bf6:	4659      	mov	r1, fp
 8003bf8:	018b      	lsls	r3, r1, #6
 8003bfa:	4651      	mov	r1, sl
 8003bfc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c00:	4651      	mov	r1, sl
 8003c02:	018a      	lsls	r2, r1, #6
 8003c04:	4651      	mov	r1, sl
 8003c06:	ebb2 0801 	subs.w	r8, r2, r1
 8003c0a:	4659      	mov	r1, fp
 8003c0c:	eb63 0901 	sbc.w	r9, r3, r1
 8003c10:	f04f 0200 	mov.w	r2, #0
 8003c14:	f04f 0300 	mov.w	r3, #0
 8003c18:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c1c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c20:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c24:	4690      	mov	r8, r2
 8003c26:	4699      	mov	r9, r3
 8003c28:	4623      	mov	r3, r4
 8003c2a:	eb18 0303 	adds.w	r3, r8, r3
 8003c2e:	613b      	str	r3, [r7, #16]
 8003c30:	462b      	mov	r3, r5
 8003c32:	eb49 0303 	adc.w	r3, r9, r3
 8003c36:	617b      	str	r3, [r7, #20]
 8003c38:	f04f 0200 	mov.w	r2, #0
 8003c3c:	f04f 0300 	mov.w	r3, #0
 8003c40:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003c44:	4629      	mov	r1, r5
 8003c46:	024b      	lsls	r3, r1, #9
 8003c48:	4621      	mov	r1, r4
 8003c4a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c4e:	4621      	mov	r1, r4
 8003c50:	024a      	lsls	r2, r1, #9
 8003c52:	4610      	mov	r0, r2
 8003c54:	4619      	mov	r1, r3
 8003c56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c5e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003c60:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003c64:	f7fc ffc0 	bl	8000be8 <__aeabi_uldivmod>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c72:	e065      	b.n	8003d40 <HAL_RCC_GetSysClockFreq+0x420>
 8003c74:	40023800 	.word	0x40023800
 8003c78:	00f42400 	.word	0x00f42400
 8003c7c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c80:	4b3d      	ldr	r3, [pc, #244]	@ (8003d78 <HAL_RCC_GetSysClockFreq+0x458>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	099b      	lsrs	r3, r3, #6
 8003c86:	2200      	movs	r2, #0
 8003c88:	4618      	mov	r0, r3
 8003c8a:	4611      	mov	r1, r2
 8003c8c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c90:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c92:	2300      	movs	r3, #0
 8003c94:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c96:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003c9a:	4642      	mov	r2, r8
 8003c9c:	464b      	mov	r3, r9
 8003c9e:	f04f 0000 	mov.w	r0, #0
 8003ca2:	f04f 0100 	mov.w	r1, #0
 8003ca6:	0159      	lsls	r1, r3, #5
 8003ca8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cac:	0150      	lsls	r0, r2, #5
 8003cae:	4602      	mov	r2, r0
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	4641      	mov	r1, r8
 8003cb4:	1a51      	subs	r1, r2, r1
 8003cb6:	60b9      	str	r1, [r7, #8]
 8003cb8:	4649      	mov	r1, r9
 8003cba:	eb63 0301 	sbc.w	r3, r3, r1
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	f04f 0200 	mov.w	r2, #0
 8003cc4:	f04f 0300 	mov.w	r3, #0
 8003cc8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003ccc:	4659      	mov	r1, fp
 8003cce:	018b      	lsls	r3, r1, #6
 8003cd0:	4651      	mov	r1, sl
 8003cd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cd6:	4651      	mov	r1, sl
 8003cd8:	018a      	lsls	r2, r1, #6
 8003cda:	4651      	mov	r1, sl
 8003cdc:	1a54      	subs	r4, r2, r1
 8003cde:	4659      	mov	r1, fp
 8003ce0:	eb63 0501 	sbc.w	r5, r3, r1
 8003ce4:	f04f 0200 	mov.w	r2, #0
 8003ce8:	f04f 0300 	mov.w	r3, #0
 8003cec:	00eb      	lsls	r3, r5, #3
 8003cee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cf2:	00e2      	lsls	r2, r4, #3
 8003cf4:	4614      	mov	r4, r2
 8003cf6:	461d      	mov	r5, r3
 8003cf8:	4643      	mov	r3, r8
 8003cfa:	18e3      	adds	r3, r4, r3
 8003cfc:	603b      	str	r3, [r7, #0]
 8003cfe:	464b      	mov	r3, r9
 8003d00:	eb45 0303 	adc.w	r3, r5, r3
 8003d04:	607b      	str	r3, [r7, #4]
 8003d06:	f04f 0200 	mov.w	r2, #0
 8003d0a:	f04f 0300 	mov.w	r3, #0
 8003d0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d12:	4629      	mov	r1, r5
 8003d14:	028b      	lsls	r3, r1, #10
 8003d16:	4621      	mov	r1, r4
 8003d18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d1c:	4621      	mov	r1, r4
 8003d1e:	028a      	lsls	r2, r1, #10
 8003d20:	4610      	mov	r0, r2
 8003d22:	4619      	mov	r1, r3
 8003d24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d28:	2200      	movs	r2, #0
 8003d2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d2c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003d2e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003d32:	f7fc ff59 	bl	8000be8 <__aeabi_uldivmod>
 8003d36:	4602      	mov	r2, r0
 8003d38:	460b      	mov	r3, r1
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003d40:	4b0d      	ldr	r3, [pc, #52]	@ (8003d78 <HAL_RCC_GetSysClockFreq+0x458>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	0f1b      	lsrs	r3, r3, #28
 8003d46:	f003 0307 	and.w	r3, r3, #7
 8003d4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8003d4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003d52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d5e:	e003      	b.n	8003d68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d60:	4b06      	ldr	r3, [pc, #24]	@ (8003d7c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003d62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d66:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	37b8      	adds	r7, #184	@ 0xb8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d76:	bf00      	nop
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	00f42400 	.word	0x00f42400

08003d80 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e28d      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 8083 	beq.w	8003ea6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003da0:	4b94      	ldr	r3, [pc, #592]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f003 030c 	and.w	r3, r3, #12
 8003da8:	2b04      	cmp	r3, #4
 8003daa:	d019      	beq.n	8003de0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003dac:	4b91      	ldr	r3, [pc, #580]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003db4:	2b08      	cmp	r3, #8
 8003db6:	d106      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003db8:	4b8e      	ldr	r3, [pc, #568]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dc4:	d00c      	beq.n	8003de0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dc6:	4b8b      	ldr	r3, [pc, #556]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003dce:	2b0c      	cmp	r3, #12
 8003dd0:	d112      	bne.n	8003df8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dd2:	4b88      	ldr	r3, [pc, #544]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dde:	d10b      	bne.n	8003df8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de0:	4b84      	ldr	r3, [pc, #528]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d05b      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x124>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d157      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e25a      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e00:	d106      	bne.n	8003e10 <HAL_RCC_OscConfig+0x90>
 8003e02:	4b7c      	ldr	r3, [pc, #496]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a7b      	ldr	r2, [pc, #492]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003e08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e0c:	6013      	str	r3, [r2, #0]
 8003e0e:	e01d      	b.n	8003e4c <HAL_RCC_OscConfig+0xcc>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e18:	d10c      	bne.n	8003e34 <HAL_RCC_OscConfig+0xb4>
 8003e1a:	4b76      	ldr	r3, [pc, #472]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a75      	ldr	r2, [pc, #468]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003e20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	4b73      	ldr	r3, [pc, #460]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a72      	ldr	r2, [pc, #456]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003e2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e30:	6013      	str	r3, [r2, #0]
 8003e32:	e00b      	b.n	8003e4c <HAL_RCC_OscConfig+0xcc>
 8003e34:	4b6f      	ldr	r3, [pc, #444]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a6e      	ldr	r2, [pc, #440]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003e3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	4b6c      	ldr	r3, [pc, #432]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a6b      	ldr	r2, [pc, #428]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003e46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d013      	beq.n	8003e7c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e54:	f7fd ff14 	bl	8001c80 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e5c:	f7fd ff10 	bl	8001c80 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b64      	cmp	r3, #100	@ 0x64
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e21f      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6e:	4b61      	ldr	r3, [pc, #388]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0f0      	beq.n	8003e5c <HAL_RCC_OscConfig+0xdc>
 8003e7a:	e014      	b.n	8003ea6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7c:	f7fd ff00 	bl	8001c80 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e84:	f7fd fefc 	bl	8001c80 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b64      	cmp	r3, #100	@ 0x64
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e20b      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e96:	4b57      	ldr	r3, [pc, #348]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1f0      	bne.n	8003e84 <HAL_RCC_OscConfig+0x104>
 8003ea2:	e000      	b.n	8003ea6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d06f      	beq.n	8003f92 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003eb2:	4b50      	ldr	r3, [pc, #320]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 030c 	and.w	r3, r3, #12
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d017      	beq.n	8003eee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ebe:	4b4d      	ldr	r3, [pc, #308]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003ec6:	2b08      	cmp	r3, #8
 8003ec8:	d105      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003eca:	4b4a      	ldr	r3, [pc, #296]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00b      	beq.n	8003eee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ed6:	4b47      	ldr	r3, [pc, #284]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ede:	2b0c      	cmp	r3, #12
 8003ee0:	d11c      	bne.n	8003f1c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ee2:	4b44      	ldr	r3, [pc, #272]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d116      	bne.n	8003f1c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eee:	4b41      	ldr	r3, [pc, #260]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d005      	beq.n	8003f06 <HAL_RCC_OscConfig+0x186>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d001      	beq.n	8003f06 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e1d3      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f06:	4b3b      	ldr	r3, [pc, #236]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	4937      	ldr	r1, [pc, #220]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f1a:	e03a      	b.n	8003f92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d020      	beq.n	8003f66 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f24:	4b34      	ldr	r3, [pc, #208]	@ (8003ff8 <HAL_RCC_OscConfig+0x278>)
 8003f26:	2201      	movs	r2, #1
 8003f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2a:	f7fd fea9 	bl	8001c80 <HAL_GetTick>
 8003f2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f30:	e008      	b.n	8003f44 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f32:	f7fd fea5 	bl	8001c80 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e1b4      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f44:	4b2b      	ldr	r3, [pc, #172]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d0f0      	beq.n	8003f32 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f50:	4b28      	ldr	r3, [pc, #160]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	4925      	ldr	r1, [pc, #148]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	600b      	str	r3, [r1, #0]
 8003f64:	e015      	b.n	8003f92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f66:	4b24      	ldr	r3, [pc, #144]	@ (8003ff8 <HAL_RCC_OscConfig+0x278>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6c:	f7fd fe88 	bl	8001c80 <HAL_GetTick>
 8003f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f74:	f7fd fe84 	bl	8001c80 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e193      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f86:	4b1b      	ldr	r3, [pc, #108]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1f0      	bne.n	8003f74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0308 	and.w	r3, r3, #8
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d036      	beq.n	800400c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d016      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fa6:	4b15      	ldr	r3, [pc, #84]	@ (8003ffc <HAL_RCC_OscConfig+0x27c>)
 8003fa8:	2201      	movs	r2, #1
 8003faa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fac:	f7fd fe68 	bl	8001c80 <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fb4:	f7fd fe64 	bl	8001c80 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e173      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003fc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0f0      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x234>
 8003fd2:	e01b      	b.n	800400c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fd4:	4b09      	ldr	r3, [pc, #36]	@ (8003ffc <HAL_RCC_OscConfig+0x27c>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fda:	f7fd fe51 	bl	8001c80 <HAL_GetTick>
 8003fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fe0:	e00e      	b.n	8004000 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fe2:	f7fd fe4d 	bl	8001c80 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d907      	bls.n	8004000 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e15c      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
 8003ff4:	40023800 	.word	0x40023800
 8003ff8:	42470000 	.word	0x42470000
 8003ffc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004000:	4b8a      	ldr	r3, [pc, #552]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 8004002:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1ea      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 8097 	beq.w	8004148 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800401a:	2300      	movs	r3, #0
 800401c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800401e:	4b83      	ldr	r3, [pc, #524]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 8004020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004022:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10f      	bne.n	800404a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800402a:	2300      	movs	r3, #0
 800402c:	60bb      	str	r3, [r7, #8]
 800402e:	4b7f      	ldr	r3, [pc, #508]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 8004030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004032:	4a7e      	ldr	r2, [pc, #504]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 8004034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004038:	6413      	str	r3, [r2, #64]	@ 0x40
 800403a:	4b7c      	ldr	r3, [pc, #496]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 800403c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004042:	60bb      	str	r3, [r7, #8]
 8004044:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004046:	2301      	movs	r3, #1
 8004048:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800404a:	4b79      	ldr	r3, [pc, #484]	@ (8004230 <HAL_RCC_OscConfig+0x4b0>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004052:	2b00      	cmp	r3, #0
 8004054:	d118      	bne.n	8004088 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004056:	4b76      	ldr	r3, [pc, #472]	@ (8004230 <HAL_RCC_OscConfig+0x4b0>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a75      	ldr	r2, [pc, #468]	@ (8004230 <HAL_RCC_OscConfig+0x4b0>)
 800405c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004060:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004062:	f7fd fe0d 	bl	8001c80 <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004068:	e008      	b.n	800407c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800406a:	f7fd fe09 	bl	8001c80 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e118      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800407c:	4b6c      	ldr	r3, [pc, #432]	@ (8004230 <HAL_RCC_OscConfig+0x4b0>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0f0      	beq.n	800406a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d106      	bne.n	800409e <HAL_RCC_OscConfig+0x31e>
 8004090:	4b66      	ldr	r3, [pc, #408]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 8004092:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004094:	4a65      	ldr	r2, [pc, #404]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 8004096:	f043 0301 	orr.w	r3, r3, #1
 800409a:	6713      	str	r3, [r2, #112]	@ 0x70
 800409c:	e01c      	b.n	80040d8 <HAL_RCC_OscConfig+0x358>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	2b05      	cmp	r3, #5
 80040a4:	d10c      	bne.n	80040c0 <HAL_RCC_OscConfig+0x340>
 80040a6:	4b61      	ldr	r3, [pc, #388]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 80040a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040aa:	4a60      	ldr	r2, [pc, #384]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 80040ac:	f043 0304 	orr.w	r3, r3, #4
 80040b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80040b2:	4b5e      	ldr	r3, [pc, #376]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 80040b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b6:	4a5d      	ldr	r2, [pc, #372]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 80040b8:	f043 0301 	orr.w	r3, r3, #1
 80040bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80040be:	e00b      	b.n	80040d8 <HAL_RCC_OscConfig+0x358>
 80040c0:	4b5a      	ldr	r3, [pc, #360]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 80040c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c4:	4a59      	ldr	r2, [pc, #356]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 80040c6:	f023 0301 	bic.w	r3, r3, #1
 80040ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80040cc:	4b57      	ldr	r3, [pc, #348]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 80040ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d0:	4a56      	ldr	r2, [pc, #344]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 80040d2:	f023 0304 	bic.w	r3, r3, #4
 80040d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d015      	beq.n	800410c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e0:	f7fd fdce 	bl	8001c80 <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e6:	e00a      	b.n	80040fe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040e8:	f7fd fdca 	bl	8001c80 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e0d7      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040fe:	4b4b      	ldr	r3, [pc, #300]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 8004100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0ee      	beq.n	80040e8 <HAL_RCC_OscConfig+0x368>
 800410a:	e014      	b.n	8004136 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800410c:	f7fd fdb8 	bl	8001c80 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004112:	e00a      	b.n	800412a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004114:	f7fd fdb4 	bl	8001c80 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004122:	4293      	cmp	r3, r2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e0c1      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800412a:	4b40      	ldr	r3, [pc, #256]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 800412c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1ee      	bne.n	8004114 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004136:	7dfb      	ldrb	r3, [r7, #23]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d105      	bne.n	8004148 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800413c:	4b3b      	ldr	r3, [pc, #236]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 800413e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004140:	4a3a      	ldr	r2, [pc, #232]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 8004142:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004146:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 80ad 	beq.w	80042ac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004152:	4b36      	ldr	r3, [pc, #216]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 030c 	and.w	r3, r3, #12
 800415a:	2b08      	cmp	r3, #8
 800415c:	d060      	beq.n	8004220 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	2b02      	cmp	r3, #2
 8004164:	d145      	bne.n	80041f2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004166:	4b33      	ldr	r3, [pc, #204]	@ (8004234 <HAL_RCC_OscConfig+0x4b4>)
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416c:	f7fd fd88 	bl	8001c80 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004174:	f7fd fd84 	bl	8001c80 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e093      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004186:	4b29      	ldr	r3, [pc, #164]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1f0      	bne.n	8004174 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	69da      	ldr	r2, [r3, #28]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	431a      	orrs	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a0:	019b      	lsls	r3, r3, #6
 80041a2:	431a      	orrs	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a8:	085b      	lsrs	r3, r3, #1
 80041aa:	3b01      	subs	r3, #1
 80041ac:	041b      	lsls	r3, r3, #16
 80041ae:	431a      	orrs	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b4:	061b      	lsls	r3, r3, #24
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041bc:	071b      	lsls	r3, r3, #28
 80041be:	491b      	ldr	r1, [pc, #108]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004234 <HAL_RCC_OscConfig+0x4b4>)
 80041c6:	2201      	movs	r2, #1
 80041c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ca:	f7fd fd59 	bl	8001c80 <HAL_GetTick>
 80041ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041d0:	e008      	b.n	80041e4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041d2:	f7fd fd55 	bl	8001c80 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d901      	bls.n	80041e4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e064      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e4:	4b11      	ldr	r3, [pc, #68]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d0f0      	beq.n	80041d2 <HAL_RCC_OscConfig+0x452>
 80041f0:	e05c      	b.n	80042ac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041f2:	4b10      	ldr	r3, [pc, #64]	@ (8004234 <HAL_RCC_OscConfig+0x4b4>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f8:	f7fd fd42 	bl	8001c80 <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004200:	f7fd fd3e 	bl	8001c80 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e04d      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004212:	4b06      	ldr	r3, [pc, #24]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1f0      	bne.n	8004200 <HAL_RCC_OscConfig+0x480>
 800421e:	e045      	b.n	80042ac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d107      	bne.n	8004238 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e040      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
 800422c:	40023800 	.word	0x40023800
 8004230:	40007000 	.word	0x40007000
 8004234:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004238:	4b1f      	ldr	r3, [pc, #124]	@ (80042b8 <HAL_RCC_OscConfig+0x538>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d030      	beq.n	80042a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004250:	429a      	cmp	r2, r3
 8004252:	d129      	bne.n	80042a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800425e:	429a      	cmp	r2, r3
 8004260:	d122      	bne.n	80042a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004268:	4013      	ands	r3, r2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800426e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004270:	4293      	cmp	r3, r2
 8004272:	d119      	bne.n	80042a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800427e:	085b      	lsrs	r3, r3, #1
 8004280:	3b01      	subs	r3, #1
 8004282:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004284:	429a      	cmp	r2, r3
 8004286:	d10f      	bne.n	80042a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004292:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004294:	429a      	cmp	r2, r3
 8004296:	d107      	bne.n	80042a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d001      	beq.n	80042ac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e000      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	40023800 	.word	0x40023800

080042bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e042      	b.n	8004354 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d106      	bne.n	80042e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7fd fad8 	bl	8001898 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2224      	movs	r2, #36	@ 0x24
 80042ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68da      	ldr	r2, [r3, #12]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 f973 	bl	80045ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	691a      	ldr	r2, [r3, #16]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004314:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	695a      	ldr	r2, [r3, #20]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004324:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68da      	ldr	r2, [r3, #12]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004334:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2220      	movs	r2, #32
 8004340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2220      	movs	r2, #32
 8004348:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3708      	adds	r7, #8
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08a      	sub	sp, #40	@ 0x28
 8004360:	af02      	add	r7, sp, #8
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	603b      	str	r3, [r7, #0]
 8004368:	4613      	mov	r3, r2
 800436a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800436c:	2300      	movs	r3, #0
 800436e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b20      	cmp	r3, #32
 800437a:	d175      	bne.n	8004468 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d002      	beq.n	8004388 <HAL_UART_Transmit+0x2c>
 8004382:	88fb      	ldrh	r3, [r7, #6]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e06e      	b.n	800446a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2221      	movs	r2, #33	@ 0x21
 8004396:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800439a:	f7fd fc71 	bl	8001c80 <HAL_GetTick>
 800439e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	88fa      	ldrh	r2, [r7, #6]
 80043a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	88fa      	ldrh	r2, [r7, #6]
 80043aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043b4:	d108      	bne.n	80043c8 <HAL_UART_Transmit+0x6c>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d104      	bne.n	80043c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80043be:	2300      	movs	r3, #0
 80043c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	61bb      	str	r3, [r7, #24]
 80043c6:	e003      	b.n	80043d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043cc:	2300      	movs	r3, #0
 80043ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80043d0:	e02e      	b.n	8004430 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2200      	movs	r2, #0
 80043da:	2180      	movs	r1, #128	@ 0x80
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f000 f848 	bl	8004472 <UART_WaitOnFlagUntilTimeout>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d005      	beq.n	80043f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e03a      	b.n	800446a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10b      	bne.n	8004412 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	881b      	ldrh	r3, [r3, #0]
 80043fe:	461a      	mov	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004408:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	3302      	adds	r3, #2
 800440e:	61bb      	str	r3, [r7, #24]
 8004410:	e007      	b.n	8004422 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	781a      	ldrb	r2, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	3301      	adds	r3, #1
 8004420:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004426:	b29b      	uxth	r3, r3
 8004428:	3b01      	subs	r3, #1
 800442a:	b29a      	uxth	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004434:	b29b      	uxth	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1cb      	bne.n	80043d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	2200      	movs	r2, #0
 8004442:	2140      	movs	r1, #64	@ 0x40
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f000 f814 	bl	8004472 <UART_WaitOnFlagUntilTimeout>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d005      	beq.n	800445c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2220      	movs	r2, #32
 8004454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e006      	b.n	800446a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2220      	movs	r2, #32
 8004460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004464:	2300      	movs	r3, #0
 8004466:	e000      	b.n	800446a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004468:	2302      	movs	r3, #2
  }
}
 800446a:	4618      	mov	r0, r3
 800446c:	3720      	adds	r7, #32
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b086      	sub	sp, #24
 8004476:	af00      	add	r7, sp, #0
 8004478:	60f8      	str	r0, [r7, #12]
 800447a:	60b9      	str	r1, [r7, #8]
 800447c:	603b      	str	r3, [r7, #0]
 800447e:	4613      	mov	r3, r2
 8004480:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004482:	e03b      	b.n	80044fc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800448a:	d037      	beq.n	80044fc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800448c:	f7fd fbf8 	bl	8001c80 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	6a3a      	ldr	r2, [r7, #32]
 8004498:	429a      	cmp	r2, r3
 800449a:	d302      	bcc.n	80044a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e03a      	b.n	800451c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d023      	beq.n	80044fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	2b80      	cmp	r3, #128	@ 0x80
 80044b8:	d020      	beq.n	80044fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2b40      	cmp	r3, #64	@ 0x40
 80044be:	d01d      	beq.n	80044fc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0308 	and.w	r3, r3, #8
 80044ca:	2b08      	cmp	r3, #8
 80044cc:	d116      	bne.n	80044fc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80044ce:	2300      	movs	r3, #0
 80044d0:	617b      	str	r3, [r7, #20]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	617b      	str	r3, [r7, #20]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	617b      	str	r3, [r7, #20]
 80044e2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 f81d 	bl	8004524 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2208      	movs	r2, #8
 80044ee:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e00f      	b.n	800451c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	4013      	ands	r3, r2
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	429a      	cmp	r2, r3
 800450a:	bf0c      	ite	eq
 800450c:	2301      	moveq	r3, #1
 800450e:	2300      	movne	r3, #0
 8004510:	b2db      	uxtb	r3, r3
 8004512:	461a      	mov	r2, r3
 8004514:	79fb      	ldrb	r3, [r7, #7]
 8004516:	429a      	cmp	r2, r3
 8004518:	d0b4      	beq.n	8004484 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3718      	adds	r7, #24
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004524:	b480      	push	{r7}
 8004526:	b095      	sub	sp, #84	@ 0x54
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	330c      	adds	r3, #12
 8004532:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004536:	e853 3f00 	ldrex	r3, [r3]
 800453a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800453c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800453e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004542:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	330c      	adds	r3, #12
 800454a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800454c:	643a      	str	r2, [r7, #64]	@ 0x40
 800454e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004550:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004552:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004554:	e841 2300 	strex	r3, r2, [r1]
 8004558:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800455a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1e5      	bne.n	800452c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	3314      	adds	r3, #20
 8004566:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004568:	6a3b      	ldr	r3, [r7, #32]
 800456a:	e853 3f00 	ldrex	r3, [r3]
 800456e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	f023 0301 	bic.w	r3, r3, #1
 8004576:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	3314      	adds	r3, #20
 800457e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004580:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004582:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004584:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004586:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004588:	e841 2300 	strex	r3, r2, [r1]
 800458c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800458e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1e5      	bne.n	8004560 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004598:	2b01      	cmp	r3, #1
 800459a:	d119      	bne.n	80045d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	330c      	adds	r3, #12
 80045a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	e853 3f00 	ldrex	r3, [r3]
 80045aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	f023 0310 	bic.w	r3, r3, #16
 80045b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	330c      	adds	r3, #12
 80045ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045bc:	61ba      	str	r2, [r7, #24]
 80045be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c0:	6979      	ldr	r1, [r7, #20]
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	e841 2300 	strex	r3, r2, [r1]
 80045c8:	613b      	str	r3, [r7, #16]
   return(result);
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1e5      	bne.n	800459c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80045de:	bf00      	nop
 80045e0:	3754      	adds	r7, #84	@ 0x54
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
	...

080045ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045f0:	b0c0      	sub	sp, #256	@ 0x100
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004608:	68d9      	ldr	r1, [r3, #12]
 800460a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	ea40 0301 	orr.w	r3, r0, r1
 8004614:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800461a:	689a      	ldr	r2, [r3, #8]
 800461c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	431a      	orrs	r2, r3
 8004624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	431a      	orrs	r2, r3
 800462c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	4313      	orrs	r3, r2
 8004634:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004644:	f021 010c 	bic.w	r1, r1, #12
 8004648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004652:	430b      	orrs	r3, r1
 8004654:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004666:	6999      	ldr	r1, [r3, #24]
 8004668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	ea40 0301 	orr.w	r3, r0, r1
 8004672:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	4b8f      	ldr	r3, [pc, #572]	@ (80048b8 <UART_SetConfig+0x2cc>)
 800467c:	429a      	cmp	r2, r3
 800467e:	d005      	beq.n	800468c <UART_SetConfig+0xa0>
 8004680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	4b8d      	ldr	r3, [pc, #564]	@ (80048bc <UART_SetConfig+0x2d0>)
 8004688:	429a      	cmp	r2, r3
 800468a:	d104      	bne.n	8004696 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800468c:	f7ff f934 	bl	80038f8 <HAL_RCC_GetPCLK2Freq>
 8004690:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004694:	e003      	b.n	800469e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004696:	f7ff f91b 	bl	80038d0 <HAL_RCC_GetPCLK1Freq>
 800469a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800469e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046a2:	69db      	ldr	r3, [r3, #28]
 80046a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046a8:	f040 810c 	bne.w	80048c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046b0:	2200      	movs	r2, #0
 80046b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80046b6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80046ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80046be:	4622      	mov	r2, r4
 80046c0:	462b      	mov	r3, r5
 80046c2:	1891      	adds	r1, r2, r2
 80046c4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80046c6:	415b      	adcs	r3, r3
 80046c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80046ce:	4621      	mov	r1, r4
 80046d0:	eb12 0801 	adds.w	r8, r2, r1
 80046d4:	4629      	mov	r1, r5
 80046d6:	eb43 0901 	adc.w	r9, r3, r1
 80046da:	f04f 0200 	mov.w	r2, #0
 80046de:	f04f 0300 	mov.w	r3, #0
 80046e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046ee:	4690      	mov	r8, r2
 80046f0:	4699      	mov	r9, r3
 80046f2:	4623      	mov	r3, r4
 80046f4:	eb18 0303 	adds.w	r3, r8, r3
 80046f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80046fc:	462b      	mov	r3, r5
 80046fe:	eb49 0303 	adc.w	r3, r9, r3
 8004702:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004712:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004716:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800471a:	460b      	mov	r3, r1
 800471c:	18db      	adds	r3, r3, r3
 800471e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004720:	4613      	mov	r3, r2
 8004722:	eb42 0303 	adc.w	r3, r2, r3
 8004726:	657b      	str	r3, [r7, #84]	@ 0x54
 8004728:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800472c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004730:	f7fc fa5a 	bl	8000be8 <__aeabi_uldivmod>
 8004734:	4602      	mov	r2, r0
 8004736:	460b      	mov	r3, r1
 8004738:	4b61      	ldr	r3, [pc, #388]	@ (80048c0 <UART_SetConfig+0x2d4>)
 800473a:	fba3 2302 	umull	r2, r3, r3, r2
 800473e:	095b      	lsrs	r3, r3, #5
 8004740:	011c      	lsls	r4, r3, #4
 8004742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004746:	2200      	movs	r2, #0
 8004748:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800474c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004750:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004754:	4642      	mov	r2, r8
 8004756:	464b      	mov	r3, r9
 8004758:	1891      	adds	r1, r2, r2
 800475a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800475c:	415b      	adcs	r3, r3
 800475e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004760:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004764:	4641      	mov	r1, r8
 8004766:	eb12 0a01 	adds.w	sl, r2, r1
 800476a:	4649      	mov	r1, r9
 800476c:	eb43 0b01 	adc.w	fp, r3, r1
 8004770:	f04f 0200 	mov.w	r2, #0
 8004774:	f04f 0300 	mov.w	r3, #0
 8004778:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800477c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004780:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004784:	4692      	mov	sl, r2
 8004786:	469b      	mov	fp, r3
 8004788:	4643      	mov	r3, r8
 800478a:	eb1a 0303 	adds.w	r3, sl, r3
 800478e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004792:	464b      	mov	r3, r9
 8004794:	eb4b 0303 	adc.w	r3, fp, r3
 8004798:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800479c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80047a8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80047ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80047b0:	460b      	mov	r3, r1
 80047b2:	18db      	adds	r3, r3, r3
 80047b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80047b6:	4613      	mov	r3, r2
 80047b8:	eb42 0303 	adc.w	r3, r2, r3
 80047bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80047be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80047c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80047c6:	f7fc fa0f 	bl	8000be8 <__aeabi_uldivmod>
 80047ca:	4602      	mov	r2, r0
 80047cc:	460b      	mov	r3, r1
 80047ce:	4611      	mov	r1, r2
 80047d0:	4b3b      	ldr	r3, [pc, #236]	@ (80048c0 <UART_SetConfig+0x2d4>)
 80047d2:	fba3 2301 	umull	r2, r3, r3, r1
 80047d6:	095b      	lsrs	r3, r3, #5
 80047d8:	2264      	movs	r2, #100	@ 0x64
 80047da:	fb02 f303 	mul.w	r3, r2, r3
 80047de:	1acb      	subs	r3, r1, r3
 80047e0:	00db      	lsls	r3, r3, #3
 80047e2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80047e6:	4b36      	ldr	r3, [pc, #216]	@ (80048c0 <UART_SetConfig+0x2d4>)
 80047e8:	fba3 2302 	umull	r2, r3, r3, r2
 80047ec:	095b      	lsrs	r3, r3, #5
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80047f4:	441c      	add	r4, r3
 80047f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047fa:	2200      	movs	r2, #0
 80047fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004800:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004804:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004808:	4642      	mov	r2, r8
 800480a:	464b      	mov	r3, r9
 800480c:	1891      	adds	r1, r2, r2
 800480e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004810:	415b      	adcs	r3, r3
 8004812:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004814:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004818:	4641      	mov	r1, r8
 800481a:	1851      	adds	r1, r2, r1
 800481c:	6339      	str	r1, [r7, #48]	@ 0x30
 800481e:	4649      	mov	r1, r9
 8004820:	414b      	adcs	r3, r1
 8004822:	637b      	str	r3, [r7, #52]	@ 0x34
 8004824:	f04f 0200 	mov.w	r2, #0
 8004828:	f04f 0300 	mov.w	r3, #0
 800482c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004830:	4659      	mov	r1, fp
 8004832:	00cb      	lsls	r3, r1, #3
 8004834:	4651      	mov	r1, sl
 8004836:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800483a:	4651      	mov	r1, sl
 800483c:	00ca      	lsls	r2, r1, #3
 800483e:	4610      	mov	r0, r2
 8004840:	4619      	mov	r1, r3
 8004842:	4603      	mov	r3, r0
 8004844:	4642      	mov	r2, r8
 8004846:	189b      	adds	r3, r3, r2
 8004848:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800484c:	464b      	mov	r3, r9
 800484e:	460a      	mov	r2, r1
 8004850:	eb42 0303 	adc.w	r3, r2, r3
 8004854:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004864:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004868:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800486c:	460b      	mov	r3, r1
 800486e:	18db      	adds	r3, r3, r3
 8004870:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004872:	4613      	mov	r3, r2
 8004874:	eb42 0303 	adc.w	r3, r2, r3
 8004878:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800487a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800487e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004882:	f7fc f9b1 	bl	8000be8 <__aeabi_uldivmod>
 8004886:	4602      	mov	r2, r0
 8004888:	460b      	mov	r3, r1
 800488a:	4b0d      	ldr	r3, [pc, #52]	@ (80048c0 <UART_SetConfig+0x2d4>)
 800488c:	fba3 1302 	umull	r1, r3, r3, r2
 8004890:	095b      	lsrs	r3, r3, #5
 8004892:	2164      	movs	r1, #100	@ 0x64
 8004894:	fb01 f303 	mul.w	r3, r1, r3
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	3332      	adds	r3, #50	@ 0x32
 800489e:	4a08      	ldr	r2, [pc, #32]	@ (80048c0 <UART_SetConfig+0x2d4>)
 80048a0:	fba2 2303 	umull	r2, r3, r2, r3
 80048a4:	095b      	lsrs	r3, r3, #5
 80048a6:	f003 0207 	and.w	r2, r3, #7
 80048aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4422      	add	r2, r4
 80048b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80048b4:	e106      	b.n	8004ac4 <UART_SetConfig+0x4d8>
 80048b6:	bf00      	nop
 80048b8:	40011000 	.word	0x40011000
 80048bc:	40011400 	.word	0x40011400
 80048c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048c8:	2200      	movs	r2, #0
 80048ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80048ce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80048d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80048d6:	4642      	mov	r2, r8
 80048d8:	464b      	mov	r3, r9
 80048da:	1891      	adds	r1, r2, r2
 80048dc:	6239      	str	r1, [r7, #32]
 80048de:	415b      	adcs	r3, r3
 80048e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80048e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048e6:	4641      	mov	r1, r8
 80048e8:	1854      	adds	r4, r2, r1
 80048ea:	4649      	mov	r1, r9
 80048ec:	eb43 0501 	adc.w	r5, r3, r1
 80048f0:	f04f 0200 	mov.w	r2, #0
 80048f4:	f04f 0300 	mov.w	r3, #0
 80048f8:	00eb      	lsls	r3, r5, #3
 80048fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048fe:	00e2      	lsls	r2, r4, #3
 8004900:	4614      	mov	r4, r2
 8004902:	461d      	mov	r5, r3
 8004904:	4643      	mov	r3, r8
 8004906:	18e3      	adds	r3, r4, r3
 8004908:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800490c:	464b      	mov	r3, r9
 800490e:	eb45 0303 	adc.w	r3, r5, r3
 8004912:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004922:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004926:	f04f 0200 	mov.w	r2, #0
 800492a:	f04f 0300 	mov.w	r3, #0
 800492e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004932:	4629      	mov	r1, r5
 8004934:	008b      	lsls	r3, r1, #2
 8004936:	4621      	mov	r1, r4
 8004938:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800493c:	4621      	mov	r1, r4
 800493e:	008a      	lsls	r2, r1, #2
 8004940:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004944:	f7fc f950 	bl	8000be8 <__aeabi_uldivmod>
 8004948:	4602      	mov	r2, r0
 800494a:	460b      	mov	r3, r1
 800494c:	4b60      	ldr	r3, [pc, #384]	@ (8004ad0 <UART_SetConfig+0x4e4>)
 800494e:	fba3 2302 	umull	r2, r3, r3, r2
 8004952:	095b      	lsrs	r3, r3, #5
 8004954:	011c      	lsls	r4, r3, #4
 8004956:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800495a:	2200      	movs	r2, #0
 800495c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004960:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004964:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004968:	4642      	mov	r2, r8
 800496a:	464b      	mov	r3, r9
 800496c:	1891      	adds	r1, r2, r2
 800496e:	61b9      	str	r1, [r7, #24]
 8004970:	415b      	adcs	r3, r3
 8004972:	61fb      	str	r3, [r7, #28]
 8004974:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004978:	4641      	mov	r1, r8
 800497a:	1851      	adds	r1, r2, r1
 800497c:	6139      	str	r1, [r7, #16]
 800497e:	4649      	mov	r1, r9
 8004980:	414b      	adcs	r3, r1
 8004982:	617b      	str	r3, [r7, #20]
 8004984:	f04f 0200 	mov.w	r2, #0
 8004988:	f04f 0300 	mov.w	r3, #0
 800498c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004990:	4659      	mov	r1, fp
 8004992:	00cb      	lsls	r3, r1, #3
 8004994:	4651      	mov	r1, sl
 8004996:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800499a:	4651      	mov	r1, sl
 800499c:	00ca      	lsls	r2, r1, #3
 800499e:	4610      	mov	r0, r2
 80049a0:	4619      	mov	r1, r3
 80049a2:	4603      	mov	r3, r0
 80049a4:	4642      	mov	r2, r8
 80049a6:	189b      	adds	r3, r3, r2
 80049a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80049ac:	464b      	mov	r3, r9
 80049ae:	460a      	mov	r2, r1
 80049b0:	eb42 0303 	adc.w	r3, r2, r3
 80049b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80049b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80049c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80049c4:	f04f 0200 	mov.w	r2, #0
 80049c8:	f04f 0300 	mov.w	r3, #0
 80049cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80049d0:	4649      	mov	r1, r9
 80049d2:	008b      	lsls	r3, r1, #2
 80049d4:	4641      	mov	r1, r8
 80049d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049da:	4641      	mov	r1, r8
 80049dc:	008a      	lsls	r2, r1, #2
 80049de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80049e2:	f7fc f901 	bl	8000be8 <__aeabi_uldivmod>
 80049e6:	4602      	mov	r2, r0
 80049e8:	460b      	mov	r3, r1
 80049ea:	4611      	mov	r1, r2
 80049ec:	4b38      	ldr	r3, [pc, #224]	@ (8004ad0 <UART_SetConfig+0x4e4>)
 80049ee:	fba3 2301 	umull	r2, r3, r3, r1
 80049f2:	095b      	lsrs	r3, r3, #5
 80049f4:	2264      	movs	r2, #100	@ 0x64
 80049f6:	fb02 f303 	mul.w	r3, r2, r3
 80049fa:	1acb      	subs	r3, r1, r3
 80049fc:	011b      	lsls	r3, r3, #4
 80049fe:	3332      	adds	r3, #50	@ 0x32
 8004a00:	4a33      	ldr	r2, [pc, #204]	@ (8004ad0 <UART_SetConfig+0x4e4>)
 8004a02:	fba2 2303 	umull	r2, r3, r2, r3
 8004a06:	095b      	lsrs	r3, r3, #5
 8004a08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a0c:	441c      	add	r4, r3
 8004a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a12:	2200      	movs	r2, #0
 8004a14:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a16:	677a      	str	r2, [r7, #116]	@ 0x74
 8004a18:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004a1c:	4642      	mov	r2, r8
 8004a1e:	464b      	mov	r3, r9
 8004a20:	1891      	adds	r1, r2, r2
 8004a22:	60b9      	str	r1, [r7, #8]
 8004a24:	415b      	adcs	r3, r3
 8004a26:	60fb      	str	r3, [r7, #12]
 8004a28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a2c:	4641      	mov	r1, r8
 8004a2e:	1851      	adds	r1, r2, r1
 8004a30:	6039      	str	r1, [r7, #0]
 8004a32:	4649      	mov	r1, r9
 8004a34:	414b      	adcs	r3, r1
 8004a36:	607b      	str	r3, [r7, #4]
 8004a38:	f04f 0200 	mov.w	r2, #0
 8004a3c:	f04f 0300 	mov.w	r3, #0
 8004a40:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a44:	4659      	mov	r1, fp
 8004a46:	00cb      	lsls	r3, r1, #3
 8004a48:	4651      	mov	r1, sl
 8004a4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a4e:	4651      	mov	r1, sl
 8004a50:	00ca      	lsls	r2, r1, #3
 8004a52:	4610      	mov	r0, r2
 8004a54:	4619      	mov	r1, r3
 8004a56:	4603      	mov	r3, r0
 8004a58:	4642      	mov	r2, r8
 8004a5a:	189b      	adds	r3, r3, r2
 8004a5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a5e:	464b      	mov	r3, r9
 8004a60:	460a      	mov	r2, r1
 8004a62:	eb42 0303 	adc.w	r3, r2, r3
 8004a66:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a72:	667a      	str	r2, [r7, #100]	@ 0x64
 8004a74:	f04f 0200 	mov.w	r2, #0
 8004a78:	f04f 0300 	mov.w	r3, #0
 8004a7c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004a80:	4649      	mov	r1, r9
 8004a82:	008b      	lsls	r3, r1, #2
 8004a84:	4641      	mov	r1, r8
 8004a86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a8a:	4641      	mov	r1, r8
 8004a8c:	008a      	lsls	r2, r1, #2
 8004a8e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004a92:	f7fc f8a9 	bl	8000be8 <__aeabi_uldivmod>
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ad0 <UART_SetConfig+0x4e4>)
 8004a9c:	fba3 1302 	umull	r1, r3, r3, r2
 8004aa0:	095b      	lsrs	r3, r3, #5
 8004aa2:	2164      	movs	r1, #100	@ 0x64
 8004aa4:	fb01 f303 	mul.w	r3, r1, r3
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	011b      	lsls	r3, r3, #4
 8004aac:	3332      	adds	r3, #50	@ 0x32
 8004aae:	4a08      	ldr	r2, [pc, #32]	@ (8004ad0 <UART_SetConfig+0x4e4>)
 8004ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab4:	095b      	lsrs	r3, r3, #5
 8004ab6:	f003 020f 	and.w	r2, r3, #15
 8004aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4422      	add	r2, r4
 8004ac2:	609a      	str	r2, [r3, #8]
}
 8004ac4:	bf00      	nop
 8004ac6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004aca:	46bd      	mov	sp, r7
 8004acc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ad0:	51eb851f 	.word	0x51eb851f

08004ad4 <__cvt>:
 8004ad4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ad8:	ec57 6b10 	vmov	r6, r7, d0
 8004adc:	2f00      	cmp	r7, #0
 8004ade:	460c      	mov	r4, r1
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	463b      	mov	r3, r7
 8004ae4:	bfbb      	ittet	lt
 8004ae6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004aea:	461f      	movlt	r7, r3
 8004aec:	2300      	movge	r3, #0
 8004aee:	232d      	movlt	r3, #45	@ 0x2d
 8004af0:	700b      	strb	r3, [r1, #0]
 8004af2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004af4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004af8:	4691      	mov	r9, r2
 8004afa:	f023 0820 	bic.w	r8, r3, #32
 8004afe:	bfbc      	itt	lt
 8004b00:	4632      	movlt	r2, r6
 8004b02:	4616      	movlt	r6, r2
 8004b04:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004b08:	d005      	beq.n	8004b16 <__cvt+0x42>
 8004b0a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004b0e:	d100      	bne.n	8004b12 <__cvt+0x3e>
 8004b10:	3401      	adds	r4, #1
 8004b12:	2102      	movs	r1, #2
 8004b14:	e000      	b.n	8004b18 <__cvt+0x44>
 8004b16:	2103      	movs	r1, #3
 8004b18:	ab03      	add	r3, sp, #12
 8004b1a:	9301      	str	r3, [sp, #4]
 8004b1c:	ab02      	add	r3, sp, #8
 8004b1e:	9300      	str	r3, [sp, #0]
 8004b20:	ec47 6b10 	vmov	d0, r6, r7
 8004b24:	4653      	mov	r3, sl
 8004b26:	4622      	mov	r2, r4
 8004b28:	f000 fdd2 	bl	80056d0 <_dtoa_r>
 8004b2c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004b30:	4605      	mov	r5, r0
 8004b32:	d119      	bne.n	8004b68 <__cvt+0x94>
 8004b34:	f019 0f01 	tst.w	r9, #1
 8004b38:	d00e      	beq.n	8004b58 <__cvt+0x84>
 8004b3a:	eb00 0904 	add.w	r9, r0, r4
 8004b3e:	2200      	movs	r2, #0
 8004b40:	2300      	movs	r3, #0
 8004b42:	4630      	mov	r0, r6
 8004b44:	4639      	mov	r1, r7
 8004b46:	f7fb ffdf 	bl	8000b08 <__aeabi_dcmpeq>
 8004b4a:	b108      	cbz	r0, 8004b50 <__cvt+0x7c>
 8004b4c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004b50:	2230      	movs	r2, #48	@ 0x30
 8004b52:	9b03      	ldr	r3, [sp, #12]
 8004b54:	454b      	cmp	r3, r9
 8004b56:	d31e      	bcc.n	8004b96 <__cvt+0xc2>
 8004b58:	9b03      	ldr	r3, [sp, #12]
 8004b5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004b5c:	1b5b      	subs	r3, r3, r5
 8004b5e:	4628      	mov	r0, r5
 8004b60:	6013      	str	r3, [r2, #0]
 8004b62:	b004      	add	sp, #16
 8004b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b68:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004b6c:	eb00 0904 	add.w	r9, r0, r4
 8004b70:	d1e5      	bne.n	8004b3e <__cvt+0x6a>
 8004b72:	7803      	ldrb	r3, [r0, #0]
 8004b74:	2b30      	cmp	r3, #48	@ 0x30
 8004b76:	d10a      	bne.n	8004b8e <__cvt+0xba>
 8004b78:	2200      	movs	r2, #0
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	4630      	mov	r0, r6
 8004b7e:	4639      	mov	r1, r7
 8004b80:	f7fb ffc2 	bl	8000b08 <__aeabi_dcmpeq>
 8004b84:	b918      	cbnz	r0, 8004b8e <__cvt+0xba>
 8004b86:	f1c4 0401 	rsb	r4, r4, #1
 8004b8a:	f8ca 4000 	str.w	r4, [sl]
 8004b8e:	f8da 3000 	ldr.w	r3, [sl]
 8004b92:	4499      	add	r9, r3
 8004b94:	e7d3      	b.n	8004b3e <__cvt+0x6a>
 8004b96:	1c59      	adds	r1, r3, #1
 8004b98:	9103      	str	r1, [sp, #12]
 8004b9a:	701a      	strb	r2, [r3, #0]
 8004b9c:	e7d9      	b.n	8004b52 <__cvt+0x7e>

08004b9e <__exponent>:
 8004b9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ba0:	2900      	cmp	r1, #0
 8004ba2:	bfba      	itte	lt
 8004ba4:	4249      	neglt	r1, r1
 8004ba6:	232d      	movlt	r3, #45	@ 0x2d
 8004ba8:	232b      	movge	r3, #43	@ 0x2b
 8004baa:	2909      	cmp	r1, #9
 8004bac:	7002      	strb	r2, [r0, #0]
 8004bae:	7043      	strb	r3, [r0, #1]
 8004bb0:	dd29      	ble.n	8004c06 <__exponent+0x68>
 8004bb2:	f10d 0307 	add.w	r3, sp, #7
 8004bb6:	461d      	mov	r5, r3
 8004bb8:	270a      	movs	r7, #10
 8004bba:	461a      	mov	r2, r3
 8004bbc:	fbb1 f6f7 	udiv	r6, r1, r7
 8004bc0:	fb07 1416 	mls	r4, r7, r6, r1
 8004bc4:	3430      	adds	r4, #48	@ 0x30
 8004bc6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004bca:	460c      	mov	r4, r1
 8004bcc:	2c63      	cmp	r4, #99	@ 0x63
 8004bce:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8004bd2:	4631      	mov	r1, r6
 8004bd4:	dcf1      	bgt.n	8004bba <__exponent+0x1c>
 8004bd6:	3130      	adds	r1, #48	@ 0x30
 8004bd8:	1e94      	subs	r4, r2, #2
 8004bda:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004bde:	1c41      	adds	r1, r0, #1
 8004be0:	4623      	mov	r3, r4
 8004be2:	42ab      	cmp	r3, r5
 8004be4:	d30a      	bcc.n	8004bfc <__exponent+0x5e>
 8004be6:	f10d 0309 	add.w	r3, sp, #9
 8004bea:	1a9b      	subs	r3, r3, r2
 8004bec:	42ac      	cmp	r4, r5
 8004bee:	bf88      	it	hi
 8004bf0:	2300      	movhi	r3, #0
 8004bf2:	3302      	adds	r3, #2
 8004bf4:	4403      	add	r3, r0
 8004bf6:	1a18      	subs	r0, r3, r0
 8004bf8:	b003      	add	sp, #12
 8004bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bfc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004c00:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004c04:	e7ed      	b.n	8004be2 <__exponent+0x44>
 8004c06:	2330      	movs	r3, #48	@ 0x30
 8004c08:	3130      	adds	r1, #48	@ 0x30
 8004c0a:	7083      	strb	r3, [r0, #2]
 8004c0c:	70c1      	strb	r1, [r0, #3]
 8004c0e:	1d03      	adds	r3, r0, #4
 8004c10:	e7f1      	b.n	8004bf6 <__exponent+0x58>
	...

08004c14 <_printf_float>:
 8004c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c18:	b08d      	sub	sp, #52	@ 0x34
 8004c1a:	460c      	mov	r4, r1
 8004c1c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004c20:	4616      	mov	r6, r2
 8004c22:	461f      	mov	r7, r3
 8004c24:	4605      	mov	r5, r0
 8004c26:	f000 fc97 	bl	8005558 <_localeconv_r>
 8004c2a:	6803      	ldr	r3, [r0, #0]
 8004c2c:	9304      	str	r3, [sp, #16]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7fb fb3e 	bl	80002b0 <strlen>
 8004c34:	2300      	movs	r3, #0
 8004c36:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c38:	f8d8 3000 	ldr.w	r3, [r8]
 8004c3c:	9005      	str	r0, [sp, #20]
 8004c3e:	3307      	adds	r3, #7
 8004c40:	f023 0307 	bic.w	r3, r3, #7
 8004c44:	f103 0208 	add.w	r2, r3, #8
 8004c48:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004c4c:	f8d4 b000 	ldr.w	fp, [r4]
 8004c50:	f8c8 2000 	str.w	r2, [r8]
 8004c54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004c58:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004c5c:	9307      	str	r3, [sp, #28]
 8004c5e:	f8cd 8018 	str.w	r8, [sp, #24]
 8004c62:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004c66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c6a:	4b9c      	ldr	r3, [pc, #624]	@ (8004edc <_printf_float+0x2c8>)
 8004c6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004c70:	f7fb ff7c 	bl	8000b6c <__aeabi_dcmpun>
 8004c74:	bb70      	cbnz	r0, 8004cd4 <_printf_float+0xc0>
 8004c76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c7a:	4b98      	ldr	r3, [pc, #608]	@ (8004edc <_printf_float+0x2c8>)
 8004c7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004c80:	f7fb ff56 	bl	8000b30 <__aeabi_dcmple>
 8004c84:	bb30      	cbnz	r0, 8004cd4 <_printf_float+0xc0>
 8004c86:	2200      	movs	r2, #0
 8004c88:	2300      	movs	r3, #0
 8004c8a:	4640      	mov	r0, r8
 8004c8c:	4649      	mov	r1, r9
 8004c8e:	f7fb ff45 	bl	8000b1c <__aeabi_dcmplt>
 8004c92:	b110      	cbz	r0, 8004c9a <_printf_float+0x86>
 8004c94:	232d      	movs	r3, #45	@ 0x2d
 8004c96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c9a:	4a91      	ldr	r2, [pc, #580]	@ (8004ee0 <_printf_float+0x2cc>)
 8004c9c:	4b91      	ldr	r3, [pc, #580]	@ (8004ee4 <_printf_float+0x2d0>)
 8004c9e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004ca2:	bf94      	ite	ls
 8004ca4:	4690      	movls	r8, r2
 8004ca6:	4698      	movhi	r8, r3
 8004ca8:	2303      	movs	r3, #3
 8004caa:	6123      	str	r3, [r4, #16]
 8004cac:	f02b 0304 	bic.w	r3, fp, #4
 8004cb0:	6023      	str	r3, [r4, #0]
 8004cb2:	f04f 0900 	mov.w	r9, #0
 8004cb6:	9700      	str	r7, [sp, #0]
 8004cb8:	4633      	mov	r3, r6
 8004cba:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004cbc:	4621      	mov	r1, r4
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	f000 f9d2 	bl	8005068 <_printf_common>
 8004cc4:	3001      	adds	r0, #1
 8004cc6:	f040 808d 	bne.w	8004de4 <_printf_float+0x1d0>
 8004cca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004cce:	b00d      	add	sp, #52	@ 0x34
 8004cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cd4:	4642      	mov	r2, r8
 8004cd6:	464b      	mov	r3, r9
 8004cd8:	4640      	mov	r0, r8
 8004cda:	4649      	mov	r1, r9
 8004cdc:	f7fb ff46 	bl	8000b6c <__aeabi_dcmpun>
 8004ce0:	b140      	cbz	r0, 8004cf4 <_printf_float+0xe0>
 8004ce2:	464b      	mov	r3, r9
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	bfbc      	itt	lt
 8004ce8:	232d      	movlt	r3, #45	@ 0x2d
 8004cea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004cee:	4a7e      	ldr	r2, [pc, #504]	@ (8004ee8 <_printf_float+0x2d4>)
 8004cf0:	4b7e      	ldr	r3, [pc, #504]	@ (8004eec <_printf_float+0x2d8>)
 8004cf2:	e7d4      	b.n	8004c9e <_printf_float+0x8a>
 8004cf4:	6863      	ldr	r3, [r4, #4]
 8004cf6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004cfa:	9206      	str	r2, [sp, #24]
 8004cfc:	1c5a      	adds	r2, r3, #1
 8004cfe:	d13b      	bne.n	8004d78 <_printf_float+0x164>
 8004d00:	2306      	movs	r3, #6
 8004d02:	6063      	str	r3, [r4, #4]
 8004d04:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004d08:	2300      	movs	r3, #0
 8004d0a:	6022      	str	r2, [r4, #0]
 8004d0c:	9303      	str	r3, [sp, #12]
 8004d0e:	ab0a      	add	r3, sp, #40	@ 0x28
 8004d10:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004d14:	ab09      	add	r3, sp, #36	@ 0x24
 8004d16:	9300      	str	r3, [sp, #0]
 8004d18:	6861      	ldr	r1, [r4, #4]
 8004d1a:	ec49 8b10 	vmov	d0, r8, r9
 8004d1e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004d22:	4628      	mov	r0, r5
 8004d24:	f7ff fed6 	bl	8004ad4 <__cvt>
 8004d28:	9b06      	ldr	r3, [sp, #24]
 8004d2a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004d2c:	2b47      	cmp	r3, #71	@ 0x47
 8004d2e:	4680      	mov	r8, r0
 8004d30:	d129      	bne.n	8004d86 <_printf_float+0x172>
 8004d32:	1cc8      	adds	r0, r1, #3
 8004d34:	db02      	blt.n	8004d3c <_printf_float+0x128>
 8004d36:	6863      	ldr	r3, [r4, #4]
 8004d38:	4299      	cmp	r1, r3
 8004d3a:	dd41      	ble.n	8004dc0 <_printf_float+0x1ac>
 8004d3c:	f1aa 0a02 	sub.w	sl, sl, #2
 8004d40:	fa5f fa8a 	uxtb.w	sl, sl
 8004d44:	3901      	subs	r1, #1
 8004d46:	4652      	mov	r2, sl
 8004d48:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004d4c:	9109      	str	r1, [sp, #36]	@ 0x24
 8004d4e:	f7ff ff26 	bl	8004b9e <__exponent>
 8004d52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004d54:	1813      	adds	r3, r2, r0
 8004d56:	2a01      	cmp	r2, #1
 8004d58:	4681      	mov	r9, r0
 8004d5a:	6123      	str	r3, [r4, #16]
 8004d5c:	dc02      	bgt.n	8004d64 <_printf_float+0x150>
 8004d5e:	6822      	ldr	r2, [r4, #0]
 8004d60:	07d2      	lsls	r2, r2, #31
 8004d62:	d501      	bpl.n	8004d68 <_printf_float+0x154>
 8004d64:	3301      	adds	r3, #1
 8004d66:	6123      	str	r3, [r4, #16]
 8004d68:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d0a2      	beq.n	8004cb6 <_printf_float+0xa2>
 8004d70:	232d      	movs	r3, #45	@ 0x2d
 8004d72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d76:	e79e      	b.n	8004cb6 <_printf_float+0xa2>
 8004d78:	9a06      	ldr	r2, [sp, #24]
 8004d7a:	2a47      	cmp	r2, #71	@ 0x47
 8004d7c:	d1c2      	bne.n	8004d04 <_printf_float+0xf0>
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1c0      	bne.n	8004d04 <_printf_float+0xf0>
 8004d82:	2301      	movs	r3, #1
 8004d84:	e7bd      	b.n	8004d02 <_printf_float+0xee>
 8004d86:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004d8a:	d9db      	bls.n	8004d44 <_printf_float+0x130>
 8004d8c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004d90:	d118      	bne.n	8004dc4 <_printf_float+0x1b0>
 8004d92:	2900      	cmp	r1, #0
 8004d94:	6863      	ldr	r3, [r4, #4]
 8004d96:	dd0b      	ble.n	8004db0 <_printf_float+0x19c>
 8004d98:	6121      	str	r1, [r4, #16]
 8004d9a:	b913      	cbnz	r3, 8004da2 <_printf_float+0x18e>
 8004d9c:	6822      	ldr	r2, [r4, #0]
 8004d9e:	07d0      	lsls	r0, r2, #31
 8004da0:	d502      	bpl.n	8004da8 <_printf_float+0x194>
 8004da2:	3301      	adds	r3, #1
 8004da4:	440b      	add	r3, r1
 8004da6:	6123      	str	r3, [r4, #16]
 8004da8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004daa:	f04f 0900 	mov.w	r9, #0
 8004dae:	e7db      	b.n	8004d68 <_printf_float+0x154>
 8004db0:	b913      	cbnz	r3, 8004db8 <_printf_float+0x1a4>
 8004db2:	6822      	ldr	r2, [r4, #0]
 8004db4:	07d2      	lsls	r2, r2, #31
 8004db6:	d501      	bpl.n	8004dbc <_printf_float+0x1a8>
 8004db8:	3302      	adds	r3, #2
 8004dba:	e7f4      	b.n	8004da6 <_printf_float+0x192>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e7f2      	b.n	8004da6 <_printf_float+0x192>
 8004dc0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004dc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004dc6:	4299      	cmp	r1, r3
 8004dc8:	db05      	blt.n	8004dd6 <_printf_float+0x1c2>
 8004dca:	6823      	ldr	r3, [r4, #0]
 8004dcc:	6121      	str	r1, [r4, #16]
 8004dce:	07d8      	lsls	r0, r3, #31
 8004dd0:	d5ea      	bpl.n	8004da8 <_printf_float+0x194>
 8004dd2:	1c4b      	adds	r3, r1, #1
 8004dd4:	e7e7      	b.n	8004da6 <_printf_float+0x192>
 8004dd6:	2900      	cmp	r1, #0
 8004dd8:	bfd4      	ite	le
 8004dda:	f1c1 0202 	rsble	r2, r1, #2
 8004dde:	2201      	movgt	r2, #1
 8004de0:	4413      	add	r3, r2
 8004de2:	e7e0      	b.n	8004da6 <_printf_float+0x192>
 8004de4:	6823      	ldr	r3, [r4, #0]
 8004de6:	055a      	lsls	r2, r3, #21
 8004de8:	d407      	bmi.n	8004dfa <_printf_float+0x1e6>
 8004dea:	6923      	ldr	r3, [r4, #16]
 8004dec:	4642      	mov	r2, r8
 8004dee:	4631      	mov	r1, r6
 8004df0:	4628      	mov	r0, r5
 8004df2:	47b8      	blx	r7
 8004df4:	3001      	adds	r0, #1
 8004df6:	d12b      	bne.n	8004e50 <_printf_float+0x23c>
 8004df8:	e767      	b.n	8004cca <_printf_float+0xb6>
 8004dfa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004dfe:	f240 80dd 	bls.w	8004fbc <_printf_float+0x3a8>
 8004e02:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004e06:	2200      	movs	r2, #0
 8004e08:	2300      	movs	r3, #0
 8004e0a:	f7fb fe7d 	bl	8000b08 <__aeabi_dcmpeq>
 8004e0e:	2800      	cmp	r0, #0
 8004e10:	d033      	beq.n	8004e7a <_printf_float+0x266>
 8004e12:	4a37      	ldr	r2, [pc, #220]	@ (8004ef0 <_printf_float+0x2dc>)
 8004e14:	2301      	movs	r3, #1
 8004e16:	4631      	mov	r1, r6
 8004e18:	4628      	mov	r0, r5
 8004e1a:	47b8      	blx	r7
 8004e1c:	3001      	adds	r0, #1
 8004e1e:	f43f af54 	beq.w	8004cca <_printf_float+0xb6>
 8004e22:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004e26:	4543      	cmp	r3, r8
 8004e28:	db02      	blt.n	8004e30 <_printf_float+0x21c>
 8004e2a:	6823      	ldr	r3, [r4, #0]
 8004e2c:	07d8      	lsls	r0, r3, #31
 8004e2e:	d50f      	bpl.n	8004e50 <_printf_float+0x23c>
 8004e30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e34:	4631      	mov	r1, r6
 8004e36:	4628      	mov	r0, r5
 8004e38:	47b8      	blx	r7
 8004e3a:	3001      	adds	r0, #1
 8004e3c:	f43f af45 	beq.w	8004cca <_printf_float+0xb6>
 8004e40:	f04f 0900 	mov.w	r9, #0
 8004e44:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004e48:	f104 0a1a 	add.w	sl, r4, #26
 8004e4c:	45c8      	cmp	r8, r9
 8004e4e:	dc09      	bgt.n	8004e64 <_printf_float+0x250>
 8004e50:	6823      	ldr	r3, [r4, #0]
 8004e52:	079b      	lsls	r3, r3, #30
 8004e54:	f100 8103 	bmi.w	800505e <_printf_float+0x44a>
 8004e58:	68e0      	ldr	r0, [r4, #12]
 8004e5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e5c:	4298      	cmp	r0, r3
 8004e5e:	bfb8      	it	lt
 8004e60:	4618      	movlt	r0, r3
 8004e62:	e734      	b.n	8004cce <_printf_float+0xba>
 8004e64:	2301      	movs	r3, #1
 8004e66:	4652      	mov	r2, sl
 8004e68:	4631      	mov	r1, r6
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	47b8      	blx	r7
 8004e6e:	3001      	adds	r0, #1
 8004e70:	f43f af2b 	beq.w	8004cca <_printf_float+0xb6>
 8004e74:	f109 0901 	add.w	r9, r9, #1
 8004e78:	e7e8      	b.n	8004e4c <_printf_float+0x238>
 8004e7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	dc39      	bgt.n	8004ef4 <_printf_float+0x2e0>
 8004e80:	4a1b      	ldr	r2, [pc, #108]	@ (8004ef0 <_printf_float+0x2dc>)
 8004e82:	2301      	movs	r3, #1
 8004e84:	4631      	mov	r1, r6
 8004e86:	4628      	mov	r0, r5
 8004e88:	47b8      	blx	r7
 8004e8a:	3001      	adds	r0, #1
 8004e8c:	f43f af1d 	beq.w	8004cca <_printf_float+0xb6>
 8004e90:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004e94:	ea59 0303 	orrs.w	r3, r9, r3
 8004e98:	d102      	bne.n	8004ea0 <_printf_float+0x28c>
 8004e9a:	6823      	ldr	r3, [r4, #0]
 8004e9c:	07d9      	lsls	r1, r3, #31
 8004e9e:	d5d7      	bpl.n	8004e50 <_printf_float+0x23c>
 8004ea0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ea4:	4631      	mov	r1, r6
 8004ea6:	4628      	mov	r0, r5
 8004ea8:	47b8      	blx	r7
 8004eaa:	3001      	adds	r0, #1
 8004eac:	f43f af0d 	beq.w	8004cca <_printf_float+0xb6>
 8004eb0:	f04f 0a00 	mov.w	sl, #0
 8004eb4:	f104 0b1a 	add.w	fp, r4, #26
 8004eb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004eba:	425b      	negs	r3, r3
 8004ebc:	4553      	cmp	r3, sl
 8004ebe:	dc01      	bgt.n	8004ec4 <_printf_float+0x2b0>
 8004ec0:	464b      	mov	r3, r9
 8004ec2:	e793      	b.n	8004dec <_printf_float+0x1d8>
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	465a      	mov	r2, fp
 8004ec8:	4631      	mov	r1, r6
 8004eca:	4628      	mov	r0, r5
 8004ecc:	47b8      	blx	r7
 8004ece:	3001      	adds	r0, #1
 8004ed0:	f43f aefb 	beq.w	8004cca <_printf_float+0xb6>
 8004ed4:	f10a 0a01 	add.w	sl, sl, #1
 8004ed8:	e7ee      	b.n	8004eb8 <_printf_float+0x2a4>
 8004eda:	bf00      	nop
 8004edc:	7fefffff 	.word	0x7fefffff
 8004ee0:	08007818 	.word	0x08007818
 8004ee4:	0800781c 	.word	0x0800781c
 8004ee8:	08007820 	.word	0x08007820
 8004eec:	08007824 	.word	0x08007824
 8004ef0:	08007828 	.word	0x08007828
 8004ef4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004ef6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004efa:	4553      	cmp	r3, sl
 8004efc:	bfa8      	it	ge
 8004efe:	4653      	movge	r3, sl
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	4699      	mov	r9, r3
 8004f04:	dc36      	bgt.n	8004f74 <_printf_float+0x360>
 8004f06:	f04f 0b00 	mov.w	fp, #0
 8004f0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f0e:	f104 021a 	add.w	r2, r4, #26
 8004f12:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004f14:	9306      	str	r3, [sp, #24]
 8004f16:	eba3 0309 	sub.w	r3, r3, r9
 8004f1a:	455b      	cmp	r3, fp
 8004f1c:	dc31      	bgt.n	8004f82 <_printf_float+0x36e>
 8004f1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f20:	459a      	cmp	sl, r3
 8004f22:	dc3a      	bgt.n	8004f9a <_printf_float+0x386>
 8004f24:	6823      	ldr	r3, [r4, #0]
 8004f26:	07da      	lsls	r2, r3, #31
 8004f28:	d437      	bmi.n	8004f9a <_printf_float+0x386>
 8004f2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f2c:	ebaa 0903 	sub.w	r9, sl, r3
 8004f30:	9b06      	ldr	r3, [sp, #24]
 8004f32:	ebaa 0303 	sub.w	r3, sl, r3
 8004f36:	4599      	cmp	r9, r3
 8004f38:	bfa8      	it	ge
 8004f3a:	4699      	movge	r9, r3
 8004f3c:	f1b9 0f00 	cmp.w	r9, #0
 8004f40:	dc33      	bgt.n	8004faa <_printf_float+0x396>
 8004f42:	f04f 0800 	mov.w	r8, #0
 8004f46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f4a:	f104 0b1a 	add.w	fp, r4, #26
 8004f4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f50:	ebaa 0303 	sub.w	r3, sl, r3
 8004f54:	eba3 0309 	sub.w	r3, r3, r9
 8004f58:	4543      	cmp	r3, r8
 8004f5a:	f77f af79 	ble.w	8004e50 <_printf_float+0x23c>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	465a      	mov	r2, fp
 8004f62:	4631      	mov	r1, r6
 8004f64:	4628      	mov	r0, r5
 8004f66:	47b8      	blx	r7
 8004f68:	3001      	adds	r0, #1
 8004f6a:	f43f aeae 	beq.w	8004cca <_printf_float+0xb6>
 8004f6e:	f108 0801 	add.w	r8, r8, #1
 8004f72:	e7ec      	b.n	8004f4e <_printf_float+0x33a>
 8004f74:	4642      	mov	r2, r8
 8004f76:	4631      	mov	r1, r6
 8004f78:	4628      	mov	r0, r5
 8004f7a:	47b8      	blx	r7
 8004f7c:	3001      	adds	r0, #1
 8004f7e:	d1c2      	bne.n	8004f06 <_printf_float+0x2f2>
 8004f80:	e6a3      	b.n	8004cca <_printf_float+0xb6>
 8004f82:	2301      	movs	r3, #1
 8004f84:	4631      	mov	r1, r6
 8004f86:	4628      	mov	r0, r5
 8004f88:	9206      	str	r2, [sp, #24]
 8004f8a:	47b8      	blx	r7
 8004f8c:	3001      	adds	r0, #1
 8004f8e:	f43f ae9c 	beq.w	8004cca <_printf_float+0xb6>
 8004f92:	9a06      	ldr	r2, [sp, #24]
 8004f94:	f10b 0b01 	add.w	fp, fp, #1
 8004f98:	e7bb      	b.n	8004f12 <_printf_float+0x2fe>
 8004f9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f9e:	4631      	mov	r1, r6
 8004fa0:	4628      	mov	r0, r5
 8004fa2:	47b8      	blx	r7
 8004fa4:	3001      	adds	r0, #1
 8004fa6:	d1c0      	bne.n	8004f2a <_printf_float+0x316>
 8004fa8:	e68f      	b.n	8004cca <_printf_float+0xb6>
 8004faa:	9a06      	ldr	r2, [sp, #24]
 8004fac:	464b      	mov	r3, r9
 8004fae:	4442      	add	r2, r8
 8004fb0:	4631      	mov	r1, r6
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	47b8      	blx	r7
 8004fb6:	3001      	adds	r0, #1
 8004fb8:	d1c3      	bne.n	8004f42 <_printf_float+0x32e>
 8004fba:	e686      	b.n	8004cca <_printf_float+0xb6>
 8004fbc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004fc0:	f1ba 0f01 	cmp.w	sl, #1
 8004fc4:	dc01      	bgt.n	8004fca <_printf_float+0x3b6>
 8004fc6:	07db      	lsls	r3, r3, #31
 8004fc8:	d536      	bpl.n	8005038 <_printf_float+0x424>
 8004fca:	2301      	movs	r3, #1
 8004fcc:	4642      	mov	r2, r8
 8004fce:	4631      	mov	r1, r6
 8004fd0:	4628      	mov	r0, r5
 8004fd2:	47b8      	blx	r7
 8004fd4:	3001      	adds	r0, #1
 8004fd6:	f43f ae78 	beq.w	8004cca <_printf_float+0xb6>
 8004fda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fde:	4631      	mov	r1, r6
 8004fe0:	4628      	mov	r0, r5
 8004fe2:	47b8      	blx	r7
 8004fe4:	3001      	adds	r0, #1
 8004fe6:	f43f ae70 	beq.w	8004cca <_printf_float+0xb6>
 8004fea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004fee:	2200      	movs	r2, #0
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004ff6:	f7fb fd87 	bl	8000b08 <__aeabi_dcmpeq>
 8004ffa:	b9c0      	cbnz	r0, 800502e <_printf_float+0x41a>
 8004ffc:	4653      	mov	r3, sl
 8004ffe:	f108 0201 	add.w	r2, r8, #1
 8005002:	4631      	mov	r1, r6
 8005004:	4628      	mov	r0, r5
 8005006:	47b8      	blx	r7
 8005008:	3001      	adds	r0, #1
 800500a:	d10c      	bne.n	8005026 <_printf_float+0x412>
 800500c:	e65d      	b.n	8004cca <_printf_float+0xb6>
 800500e:	2301      	movs	r3, #1
 8005010:	465a      	mov	r2, fp
 8005012:	4631      	mov	r1, r6
 8005014:	4628      	mov	r0, r5
 8005016:	47b8      	blx	r7
 8005018:	3001      	adds	r0, #1
 800501a:	f43f ae56 	beq.w	8004cca <_printf_float+0xb6>
 800501e:	f108 0801 	add.w	r8, r8, #1
 8005022:	45d0      	cmp	r8, sl
 8005024:	dbf3      	blt.n	800500e <_printf_float+0x3fa>
 8005026:	464b      	mov	r3, r9
 8005028:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800502c:	e6df      	b.n	8004dee <_printf_float+0x1da>
 800502e:	f04f 0800 	mov.w	r8, #0
 8005032:	f104 0b1a 	add.w	fp, r4, #26
 8005036:	e7f4      	b.n	8005022 <_printf_float+0x40e>
 8005038:	2301      	movs	r3, #1
 800503a:	4642      	mov	r2, r8
 800503c:	e7e1      	b.n	8005002 <_printf_float+0x3ee>
 800503e:	2301      	movs	r3, #1
 8005040:	464a      	mov	r2, r9
 8005042:	4631      	mov	r1, r6
 8005044:	4628      	mov	r0, r5
 8005046:	47b8      	blx	r7
 8005048:	3001      	adds	r0, #1
 800504a:	f43f ae3e 	beq.w	8004cca <_printf_float+0xb6>
 800504e:	f108 0801 	add.w	r8, r8, #1
 8005052:	68e3      	ldr	r3, [r4, #12]
 8005054:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005056:	1a5b      	subs	r3, r3, r1
 8005058:	4543      	cmp	r3, r8
 800505a:	dcf0      	bgt.n	800503e <_printf_float+0x42a>
 800505c:	e6fc      	b.n	8004e58 <_printf_float+0x244>
 800505e:	f04f 0800 	mov.w	r8, #0
 8005062:	f104 0919 	add.w	r9, r4, #25
 8005066:	e7f4      	b.n	8005052 <_printf_float+0x43e>

08005068 <_printf_common>:
 8005068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800506c:	4616      	mov	r6, r2
 800506e:	4698      	mov	r8, r3
 8005070:	688a      	ldr	r2, [r1, #8]
 8005072:	690b      	ldr	r3, [r1, #16]
 8005074:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005078:	4293      	cmp	r3, r2
 800507a:	bfb8      	it	lt
 800507c:	4613      	movlt	r3, r2
 800507e:	6033      	str	r3, [r6, #0]
 8005080:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005084:	4607      	mov	r7, r0
 8005086:	460c      	mov	r4, r1
 8005088:	b10a      	cbz	r2, 800508e <_printf_common+0x26>
 800508a:	3301      	adds	r3, #1
 800508c:	6033      	str	r3, [r6, #0]
 800508e:	6823      	ldr	r3, [r4, #0]
 8005090:	0699      	lsls	r1, r3, #26
 8005092:	bf42      	ittt	mi
 8005094:	6833      	ldrmi	r3, [r6, #0]
 8005096:	3302      	addmi	r3, #2
 8005098:	6033      	strmi	r3, [r6, #0]
 800509a:	6825      	ldr	r5, [r4, #0]
 800509c:	f015 0506 	ands.w	r5, r5, #6
 80050a0:	d106      	bne.n	80050b0 <_printf_common+0x48>
 80050a2:	f104 0a19 	add.w	sl, r4, #25
 80050a6:	68e3      	ldr	r3, [r4, #12]
 80050a8:	6832      	ldr	r2, [r6, #0]
 80050aa:	1a9b      	subs	r3, r3, r2
 80050ac:	42ab      	cmp	r3, r5
 80050ae:	dc26      	bgt.n	80050fe <_printf_common+0x96>
 80050b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80050b4:	6822      	ldr	r2, [r4, #0]
 80050b6:	3b00      	subs	r3, #0
 80050b8:	bf18      	it	ne
 80050ba:	2301      	movne	r3, #1
 80050bc:	0692      	lsls	r2, r2, #26
 80050be:	d42b      	bmi.n	8005118 <_printf_common+0xb0>
 80050c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80050c4:	4641      	mov	r1, r8
 80050c6:	4638      	mov	r0, r7
 80050c8:	47c8      	blx	r9
 80050ca:	3001      	adds	r0, #1
 80050cc:	d01e      	beq.n	800510c <_printf_common+0xa4>
 80050ce:	6823      	ldr	r3, [r4, #0]
 80050d0:	6922      	ldr	r2, [r4, #16]
 80050d2:	f003 0306 	and.w	r3, r3, #6
 80050d6:	2b04      	cmp	r3, #4
 80050d8:	bf02      	ittt	eq
 80050da:	68e5      	ldreq	r5, [r4, #12]
 80050dc:	6833      	ldreq	r3, [r6, #0]
 80050de:	1aed      	subeq	r5, r5, r3
 80050e0:	68a3      	ldr	r3, [r4, #8]
 80050e2:	bf0c      	ite	eq
 80050e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050e8:	2500      	movne	r5, #0
 80050ea:	4293      	cmp	r3, r2
 80050ec:	bfc4      	itt	gt
 80050ee:	1a9b      	subgt	r3, r3, r2
 80050f0:	18ed      	addgt	r5, r5, r3
 80050f2:	2600      	movs	r6, #0
 80050f4:	341a      	adds	r4, #26
 80050f6:	42b5      	cmp	r5, r6
 80050f8:	d11a      	bne.n	8005130 <_printf_common+0xc8>
 80050fa:	2000      	movs	r0, #0
 80050fc:	e008      	b.n	8005110 <_printf_common+0xa8>
 80050fe:	2301      	movs	r3, #1
 8005100:	4652      	mov	r2, sl
 8005102:	4641      	mov	r1, r8
 8005104:	4638      	mov	r0, r7
 8005106:	47c8      	blx	r9
 8005108:	3001      	adds	r0, #1
 800510a:	d103      	bne.n	8005114 <_printf_common+0xac>
 800510c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005114:	3501      	adds	r5, #1
 8005116:	e7c6      	b.n	80050a6 <_printf_common+0x3e>
 8005118:	18e1      	adds	r1, r4, r3
 800511a:	1c5a      	adds	r2, r3, #1
 800511c:	2030      	movs	r0, #48	@ 0x30
 800511e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005122:	4422      	add	r2, r4
 8005124:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005128:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800512c:	3302      	adds	r3, #2
 800512e:	e7c7      	b.n	80050c0 <_printf_common+0x58>
 8005130:	2301      	movs	r3, #1
 8005132:	4622      	mov	r2, r4
 8005134:	4641      	mov	r1, r8
 8005136:	4638      	mov	r0, r7
 8005138:	47c8      	blx	r9
 800513a:	3001      	adds	r0, #1
 800513c:	d0e6      	beq.n	800510c <_printf_common+0xa4>
 800513e:	3601      	adds	r6, #1
 8005140:	e7d9      	b.n	80050f6 <_printf_common+0x8e>
	...

08005144 <_printf_i>:
 8005144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005148:	7e0f      	ldrb	r7, [r1, #24]
 800514a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800514c:	2f78      	cmp	r7, #120	@ 0x78
 800514e:	4691      	mov	r9, r2
 8005150:	4680      	mov	r8, r0
 8005152:	460c      	mov	r4, r1
 8005154:	469a      	mov	sl, r3
 8005156:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800515a:	d807      	bhi.n	800516c <_printf_i+0x28>
 800515c:	2f62      	cmp	r7, #98	@ 0x62
 800515e:	d80a      	bhi.n	8005176 <_printf_i+0x32>
 8005160:	2f00      	cmp	r7, #0
 8005162:	f000 80d2 	beq.w	800530a <_printf_i+0x1c6>
 8005166:	2f58      	cmp	r7, #88	@ 0x58
 8005168:	f000 80b9 	beq.w	80052de <_printf_i+0x19a>
 800516c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005170:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005174:	e03a      	b.n	80051ec <_printf_i+0xa8>
 8005176:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800517a:	2b15      	cmp	r3, #21
 800517c:	d8f6      	bhi.n	800516c <_printf_i+0x28>
 800517e:	a101      	add	r1, pc, #4	@ (adr r1, 8005184 <_printf_i+0x40>)
 8005180:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005184:	080051dd 	.word	0x080051dd
 8005188:	080051f1 	.word	0x080051f1
 800518c:	0800516d 	.word	0x0800516d
 8005190:	0800516d 	.word	0x0800516d
 8005194:	0800516d 	.word	0x0800516d
 8005198:	0800516d 	.word	0x0800516d
 800519c:	080051f1 	.word	0x080051f1
 80051a0:	0800516d 	.word	0x0800516d
 80051a4:	0800516d 	.word	0x0800516d
 80051a8:	0800516d 	.word	0x0800516d
 80051ac:	0800516d 	.word	0x0800516d
 80051b0:	080052f1 	.word	0x080052f1
 80051b4:	0800521b 	.word	0x0800521b
 80051b8:	080052ab 	.word	0x080052ab
 80051bc:	0800516d 	.word	0x0800516d
 80051c0:	0800516d 	.word	0x0800516d
 80051c4:	08005313 	.word	0x08005313
 80051c8:	0800516d 	.word	0x0800516d
 80051cc:	0800521b 	.word	0x0800521b
 80051d0:	0800516d 	.word	0x0800516d
 80051d4:	0800516d 	.word	0x0800516d
 80051d8:	080052b3 	.word	0x080052b3
 80051dc:	6833      	ldr	r3, [r6, #0]
 80051de:	1d1a      	adds	r2, r3, #4
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	6032      	str	r2, [r6, #0]
 80051e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80051ec:	2301      	movs	r3, #1
 80051ee:	e09d      	b.n	800532c <_printf_i+0x1e8>
 80051f0:	6833      	ldr	r3, [r6, #0]
 80051f2:	6820      	ldr	r0, [r4, #0]
 80051f4:	1d19      	adds	r1, r3, #4
 80051f6:	6031      	str	r1, [r6, #0]
 80051f8:	0606      	lsls	r6, r0, #24
 80051fa:	d501      	bpl.n	8005200 <_printf_i+0xbc>
 80051fc:	681d      	ldr	r5, [r3, #0]
 80051fe:	e003      	b.n	8005208 <_printf_i+0xc4>
 8005200:	0645      	lsls	r5, r0, #25
 8005202:	d5fb      	bpl.n	80051fc <_printf_i+0xb8>
 8005204:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005208:	2d00      	cmp	r5, #0
 800520a:	da03      	bge.n	8005214 <_printf_i+0xd0>
 800520c:	232d      	movs	r3, #45	@ 0x2d
 800520e:	426d      	negs	r5, r5
 8005210:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005214:	4859      	ldr	r0, [pc, #356]	@ (800537c <_printf_i+0x238>)
 8005216:	230a      	movs	r3, #10
 8005218:	e011      	b.n	800523e <_printf_i+0xfa>
 800521a:	6821      	ldr	r1, [r4, #0]
 800521c:	6833      	ldr	r3, [r6, #0]
 800521e:	0608      	lsls	r0, r1, #24
 8005220:	f853 5b04 	ldr.w	r5, [r3], #4
 8005224:	d402      	bmi.n	800522c <_printf_i+0xe8>
 8005226:	0649      	lsls	r1, r1, #25
 8005228:	bf48      	it	mi
 800522a:	b2ad      	uxthmi	r5, r5
 800522c:	2f6f      	cmp	r7, #111	@ 0x6f
 800522e:	4853      	ldr	r0, [pc, #332]	@ (800537c <_printf_i+0x238>)
 8005230:	6033      	str	r3, [r6, #0]
 8005232:	bf14      	ite	ne
 8005234:	230a      	movne	r3, #10
 8005236:	2308      	moveq	r3, #8
 8005238:	2100      	movs	r1, #0
 800523a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800523e:	6866      	ldr	r6, [r4, #4]
 8005240:	60a6      	str	r6, [r4, #8]
 8005242:	2e00      	cmp	r6, #0
 8005244:	bfa2      	ittt	ge
 8005246:	6821      	ldrge	r1, [r4, #0]
 8005248:	f021 0104 	bicge.w	r1, r1, #4
 800524c:	6021      	strge	r1, [r4, #0]
 800524e:	b90d      	cbnz	r5, 8005254 <_printf_i+0x110>
 8005250:	2e00      	cmp	r6, #0
 8005252:	d04b      	beq.n	80052ec <_printf_i+0x1a8>
 8005254:	4616      	mov	r6, r2
 8005256:	fbb5 f1f3 	udiv	r1, r5, r3
 800525a:	fb03 5711 	mls	r7, r3, r1, r5
 800525e:	5dc7      	ldrb	r7, [r0, r7]
 8005260:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005264:	462f      	mov	r7, r5
 8005266:	42bb      	cmp	r3, r7
 8005268:	460d      	mov	r5, r1
 800526a:	d9f4      	bls.n	8005256 <_printf_i+0x112>
 800526c:	2b08      	cmp	r3, #8
 800526e:	d10b      	bne.n	8005288 <_printf_i+0x144>
 8005270:	6823      	ldr	r3, [r4, #0]
 8005272:	07df      	lsls	r7, r3, #31
 8005274:	d508      	bpl.n	8005288 <_printf_i+0x144>
 8005276:	6923      	ldr	r3, [r4, #16]
 8005278:	6861      	ldr	r1, [r4, #4]
 800527a:	4299      	cmp	r1, r3
 800527c:	bfde      	ittt	le
 800527e:	2330      	movle	r3, #48	@ 0x30
 8005280:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005284:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005288:	1b92      	subs	r2, r2, r6
 800528a:	6122      	str	r2, [r4, #16]
 800528c:	f8cd a000 	str.w	sl, [sp]
 8005290:	464b      	mov	r3, r9
 8005292:	aa03      	add	r2, sp, #12
 8005294:	4621      	mov	r1, r4
 8005296:	4640      	mov	r0, r8
 8005298:	f7ff fee6 	bl	8005068 <_printf_common>
 800529c:	3001      	adds	r0, #1
 800529e:	d14a      	bne.n	8005336 <_printf_i+0x1f2>
 80052a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80052a4:	b004      	add	sp, #16
 80052a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052aa:	6823      	ldr	r3, [r4, #0]
 80052ac:	f043 0320 	orr.w	r3, r3, #32
 80052b0:	6023      	str	r3, [r4, #0]
 80052b2:	4833      	ldr	r0, [pc, #204]	@ (8005380 <_printf_i+0x23c>)
 80052b4:	2778      	movs	r7, #120	@ 0x78
 80052b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80052ba:	6823      	ldr	r3, [r4, #0]
 80052bc:	6831      	ldr	r1, [r6, #0]
 80052be:	061f      	lsls	r7, r3, #24
 80052c0:	f851 5b04 	ldr.w	r5, [r1], #4
 80052c4:	d402      	bmi.n	80052cc <_printf_i+0x188>
 80052c6:	065f      	lsls	r7, r3, #25
 80052c8:	bf48      	it	mi
 80052ca:	b2ad      	uxthmi	r5, r5
 80052cc:	6031      	str	r1, [r6, #0]
 80052ce:	07d9      	lsls	r1, r3, #31
 80052d0:	bf44      	itt	mi
 80052d2:	f043 0320 	orrmi.w	r3, r3, #32
 80052d6:	6023      	strmi	r3, [r4, #0]
 80052d8:	b11d      	cbz	r5, 80052e2 <_printf_i+0x19e>
 80052da:	2310      	movs	r3, #16
 80052dc:	e7ac      	b.n	8005238 <_printf_i+0xf4>
 80052de:	4827      	ldr	r0, [pc, #156]	@ (800537c <_printf_i+0x238>)
 80052e0:	e7e9      	b.n	80052b6 <_printf_i+0x172>
 80052e2:	6823      	ldr	r3, [r4, #0]
 80052e4:	f023 0320 	bic.w	r3, r3, #32
 80052e8:	6023      	str	r3, [r4, #0]
 80052ea:	e7f6      	b.n	80052da <_printf_i+0x196>
 80052ec:	4616      	mov	r6, r2
 80052ee:	e7bd      	b.n	800526c <_printf_i+0x128>
 80052f0:	6833      	ldr	r3, [r6, #0]
 80052f2:	6825      	ldr	r5, [r4, #0]
 80052f4:	6961      	ldr	r1, [r4, #20]
 80052f6:	1d18      	adds	r0, r3, #4
 80052f8:	6030      	str	r0, [r6, #0]
 80052fa:	062e      	lsls	r6, r5, #24
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	d501      	bpl.n	8005304 <_printf_i+0x1c0>
 8005300:	6019      	str	r1, [r3, #0]
 8005302:	e002      	b.n	800530a <_printf_i+0x1c6>
 8005304:	0668      	lsls	r0, r5, #25
 8005306:	d5fb      	bpl.n	8005300 <_printf_i+0x1bc>
 8005308:	8019      	strh	r1, [r3, #0]
 800530a:	2300      	movs	r3, #0
 800530c:	6123      	str	r3, [r4, #16]
 800530e:	4616      	mov	r6, r2
 8005310:	e7bc      	b.n	800528c <_printf_i+0x148>
 8005312:	6833      	ldr	r3, [r6, #0]
 8005314:	1d1a      	adds	r2, r3, #4
 8005316:	6032      	str	r2, [r6, #0]
 8005318:	681e      	ldr	r6, [r3, #0]
 800531a:	6862      	ldr	r2, [r4, #4]
 800531c:	2100      	movs	r1, #0
 800531e:	4630      	mov	r0, r6
 8005320:	f7fa ff76 	bl	8000210 <memchr>
 8005324:	b108      	cbz	r0, 800532a <_printf_i+0x1e6>
 8005326:	1b80      	subs	r0, r0, r6
 8005328:	6060      	str	r0, [r4, #4]
 800532a:	6863      	ldr	r3, [r4, #4]
 800532c:	6123      	str	r3, [r4, #16]
 800532e:	2300      	movs	r3, #0
 8005330:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005334:	e7aa      	b.n	800528c <_printf_i+0x148>
 8005336:	6923      	ldr	r3, [r4, #16]
 8005338:	4632      	mov	r2, r6
 800533a:	4649      	mov	r1, r9
 800533c:	4640      	mov	r0, r8
 800533e:	47d0      	blx	sl
 8005340:	3001      	adds	r0, #1
 8005342:	d0ad      	beq.n	80052a0 <_printf_i+0x15c>
 8005344:	6823      	ldr	r3, [r4, #0]
 8005346:	079b      	lsls	r3, r3, #30
 8005348:	d413      	bmi.n	8005372 <_printf_i+0x22e>
 800534a:	68e0      	ldr	r0, [r4, #12]
 800534c:	9b03      	ldr	r3, [sp, #12]
 800534e:	4298      	cmp	r0, r3
 8005350:	bfb8      	it	lt
 8005352:	4618      	movlt	r0, r3
 8005354:	e7a6      	b.n	80052a4 <_printf_i+0x160>
 8005356:	2301      	movs	r3, #1
 8005358:	4632      	mov	r2, r6
 800535a:	4649      	mov	r1, r9
 800535c:	4640      	mov	r0, r8
 800535e:	47d0      	blx	sl
 8005360:	3001      	adds	r0, #1
 8005362:	d09d      	beq.n	80052a0 <_printf_i+0x15c>
 8005364:	3501      	adds	r5, #1
 8005366:	68e3      	ldr	r3, [r4, #12]
 8005368:	9903      	ldr	r1, [sp, #12]
 800536a:	1a5b      	subs	r3, r3, r1
 800536c:	42ab      	cmp	r3, r5
 800536e:	dcf2      	bgt.n	8005356 <_printf_i+0x212>
 8005370:	e7eb      	b.n	800534a <_printf_i+0x206>
 8005372:	2500      	movs	r5, #0
 8005374:	f104 0619 	add.w	r6, r4, #25
 8005378:	e7f5      	b.n	8005366 <_printf_i+0x222>
 800537a:	bf00      	nop
 800537c:	0800782a 	.word	0x0800782a
 8005380:	0800783b 	.word	0x0800783b

08005384 <siprintf>:
 8005384:	b40e      	push	{r1, r2, r3}
 8005386:	b500      	push	{lr}
 8005388:	b09c      	sub	sp, #112	@ 0x70
 800538a:	ab1d      	add	r3, sp, #116	@ 0x74
 800538c:	9002      	str	r0, [sp, #8]
 800538e:	9006      	str	r0, [sp, #24]
 8005390:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005394:	4809      	ldr	r0, [pc, #36]	@ (80053bc <siprintf+0x38>)
 8005396:	9107      	str	r1, [sp, #28]
 8005398:	9104      	str	r1, [sp, #16]
 800539a:	4909      	ldr	r1, [pc, #36]	@ (80053c0 <siprintf+0x3c>)
 800539c:	f853 2b04 	ldr.w	r2, [r3], #4
 80053a0:	9105      	str	r1, [sp, #20]
 80053a2:	6800      	ldr	r0, [r0, #0]
 80053a4:	9301      	str	r3, [sp, #4]
 80053a6:	a902      	add	r1, sp, #8
 80053a8:	f000 ffb2 	bl	8006310 <_svfiprintf_r>
 80053ac:	9b02      	ldr	r3, [sp, #8]
 80053ae:	2200      	movs	r2, #0
 80053b0:	701a      	strb	r2, [r3, #0]
 80053b2:	b01c      	add	sp, #112	@ 0x70
 80053b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80053b8:	b003      	add	sp, #12
 80053ba:	4770      	bx	lr
 80053bc:	20000018 	.word	0x20000018
 80053c0:	ffff0208 	.word	0xffff0208

080053c4 <std>:
 80053c4:	2300      	movs	r3, #0
 80053c6:	b510      	push	{r4, lr}
 80053c8:	4604      	mov	r4, r0
 80053ca:	e9c0 3300 	strd	r3, r3, [r0]
 80053ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80053d2:	6083      	str	r3, [r0, #8]
 80053d4:	8181      	strh	r1, [r0, #12]
 80053d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80053d8:	81c2      	strh	r2, [r0, #14]
 80053da:	6183      	str	r3, [r0, #24]
 80053dc:	4619      	mov	r1, r3
 80053de:	2208      	movs	r2, #8
 80053e0:	305c      	adds	r0, #92	@ 0x5c
 80053e2:	f000 f8b1 	bl	8005548 <memset>
 80053e6:	4b0d      	ldr	r3, [pc, #52]	@ (800541c <std+0x58>)
 80053e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80053ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005420 <std+0x5c>)
 80053ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80053ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005424 <std+0x60>)
 80053f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80053f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005428 <std+0x64>)
 80053f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80053f6:	4b0d      	ldr	r3, [pc, #52]	@ (800542c <std+0x68>)
 80053f8:	6224      	str	r4, [r4, #32]
 80053fa:	429c      	cmp	r4, r3
 80053fc:	d006      	beq.n	800540c <std+0x48>
 80053fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005402:	4294      	cmp	r4, r2
 8005404:	d002      	beq.n	800540c <std+0x48>
 8005406:	33d0      	adds	r3, #208	@ 0xd0
 8005408:	429c      	cmp	r4, r3
 800540a:	d105      	bne.n	8005418 <std+0x54>
 800540c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005414:	f000 b8ce 	b.w	80055b4 <__retarget_lock_init_recursive>
 8005418:	bd10      	pop	{r4, pc}
 800541a:	bf00      	nop
 800541c:	08006ed1 	.word	0x08006ed1
 8005420:	08006ef3 	.word	0x08006ef3
 8005424:	08006f2b 	.word	0x08006f2b
 8005428:	08006f4f 	.word	0x08006f4f
 800542c:	20000370 	.word	0x20000370

08005430 <stdio_exit_handler>:
 8005430:	4a02      	ldr	r2, [pc, #8]	@ (800543c <stdio_exit_handler+0xc>)
 8005432:	4903      	ldr	r1, [pc, #12]	@ (8005440 <stdio_exit_handler+0x10>)
 8005434:	4803      	ldr	r0, [pc, #12]	@ (8005444 <stdio_exit_handler+0x14>)
 8005436:	f000 b869 	b.w	800550c <_fwalk_sglue>
 800543a:	bf00      	nop
 800543c:	2000000c 	.word	0x2000000c
 8005440:	08006765 	.word	0x08006765
 8005444:	2000001c 	.word	0x2000001c

08005448 <cleanup_stdio>:
 8005448:	6841      	ldr	r1, [r0, #4]
 800544a:	4b0c      	ldr	r3, [pc, #48]	@ (800547c <cleanup_stdio+0x34>)
 800544c:	4299      	cmp	r1, r3
 800544e:	b510      	push	{r4, lr}
 8005450:	4604      	mov	r4, r0
 8005452:	d001      	beq.n	8005458 <cleanup_stdio+0x10>
 8005454:	f001 f986 	bl	8006764 <_fflush_r>
 8005458:	68a1      	ldr	r1, [r4, #8]
 800545a:	4b09      	ldr	r3, [pc, #36]	@ (8005480 <cleanup_stdio+0x38>)
 800545c:	4299      	cmp	r1, r3
 800545e:	d002      	beq.n	8005466 <cleanup_stdio+0x1e>
 8005460:	4620      	mov	r0, r4
 8005462:	f001 f97f 	bl	8006764 <_fflush_r>
 8005466:	68e1      	ldr	r1, [r4, #12]
 8005468:	4b06      	ldr	r3, [pc, #24]	@ (8005484 <cleanup_stdio+0x3c>)
 800546a:	4299      	cmp	r1, r3
 800546c:	d004      	beq.n	8005478 <cleanup_stdio+0x30>
 800546e:	4620      	mov	r0, r4
 8005470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005474:	f001 b976 	b.w	8006764 <_fflush_r>
 8005478:	bd10      	pop	{r4, pc}
 800547a:	bf00      	nop
 800547c:	20000370 	.word	0x20000370
 8005480:	200003d8 	.word	0x200003d8
 8005484:	20000440 	.word	0x20000440

08005488 <global_stdio_init.part.0>:
 8005488:	b510      	push	{r4, lr}
 800548a:	4b0b      	ldr	r3, [pc, #44]	@ (80054b8 <global_stdio_init.part.0+0x30>)
 800548c:	4c0b      	ldr	r4, [pc, #44]	@ (80054bc <global_stdio_init.part.0+0x34>)
 800548e:	4a0c      	ldr	r2, [pc, #48]	@ (80054c0 <global_stdio_init.part.0+0x38>)
 8005490:	601a      	str	r2, [r3, #0]
 8005492:	4620      	mov	r0, r4
 8005494:	2200      	movs	r2, #0
 8005496:	2104      	movs	r1, #4
 8005498:	f7ff ff94 	bl	80053c4 <std>
 800549c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80054a0:	2201      	movs	r2, #1
 80054a2:	2109      	movs	r1, #9
 80054a4:	f7ff ff8e 	bl	80053c4 <std>
 80054a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80054ac:	2202      	movs	r2, #2
 80054ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054b2:	2112      	movs	r1, #18
 80054b4:	f7ff bf86 	b.w	80053c4 <std>
 80054b8:	200004a8 	.word	0x200004a8
 80054bc:	20000370 	.word	0x20000370
 80054c0:	08005431 	.word	0x08005431

080054c4 <__sfp_lock_acquire>:
 80054c4:	4801      	ldr	r0, [pc, #4]	@ (80054cc <__sfp_lock_acquire+0x8>)
 80054c6:	f000 b876 	b.w	80055b6 <__retarget_lock_acquire_recursive>
 80054ca:	bf00      	nop
 80054cc:	200004ad 	.word	0x200004ad

080054d0 <__sfp_lock_release>:
 80054d0:	4801      	ldr	r0, [pc, #4]	@ (80054d8 <__sfp_lock_release+0x8>)
 80054d2:	f000 b871 	b.w	80055b8 <__retarget_lock_release_recursive>
 80054d6:	bf00      	nop
 80054d8:	200004ad 	.word	0x200004ad

080054dc <__sinit>:
 80054dc:	b510      	push	{r4, lr}
 80054de:	4604      	mov	r4, r0
 80054e0:	f7ff fff0 	bl	80054c4 <__sfp_lock_acquire>
 80054e4:	6a23      	ldr	r3, [r4, #32]
 80054e6:	b11b      	cbz	r3, 80054f0 <__sinit+0x14>
 80054e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054ec:	f7ff bff0 	b.w	80054d0 <__sfp_lock_release>
 80054f0:	4b04      	ldr	r3, [pc, #16]	@ (8005504 <__sinit+0x28>)
 80054f2:	6223      	str	r3, [r4, #32]
 80054f4:	4b04      	ldr	r3, [pc, #16]	@ (8005508 <__sinit+0x2c>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1f5      	bne.n	80054e8 <__sinit+0xc>
 80054fc:	f7ff ffc4 	bl	8005488 <global_stdio_init.part.0>
 8005500:	e7f2      	b.n	80054e8 <__sinit+0xc>
 8005502:	bf00      	nop
 8005504:	08005449 	.word	0x08005449
 8005508:	200004a8 	.word	0x200004a8

0800550c <_fwalk_sglue>:
 800550c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005510:	4607      	mov	r7, r0
 8005512:	4688      	mov	r8, r1
 8005514:	4614      	mov	r4, r2
 8005516:	2600      	movs	r6, #0
 8005518:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800551c:	f1b9 0901 	subs.w	r9, r9, #1
 8005520:	d505      	bpl.n	800552e <_fwalk_sglue+0x22>
 8005522:	6824      	ldr	r4, [r4, #0]
 8005524:	2c00      	cmp	r4, #0
 8005526:	d1f7      	bne.n	8005518 <_fwalk_sglue+0xc>
 8005528:	4630      	mov	r0, r6
 800552a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800552e:	89ab      	ldrh	r3, [r5, #12]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d907      	bls.n	8005544 <_fwalk_sglue+0x38>
 8005534:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005538:	3301      	adds	r3, #1
 800553a:	d003      	beq.n	8005544 <_fwalk_sglue+0x38>
 800553c:	4629      	mov	r1, r5
 800553e:	4638      	mov	r0, r7
 8005540:	47c0      	blx	r8
 8005542:	4306      	orrs	r6, r0
 8005544:	3568      	adds	r5, #104	@ 0x68
 8005546:	e7e9      	b.n	800551c <_fwalk_sglue+0x10>

08005548 <memset>:
 8005548:	4402      	add	r2, r0
 800554a:	4603      	mov	r3, r0
 800554c:	4293      	cmp	r3, r2
 800554e:	d100      	bne.n	8005552 <memset+0xa>
 8005550:	4770      	bx	lr
 8005552:	f803 1b01 	strb.w	r1, [r3], #1
 8005556:	e7f9      	b.n	800554c <memset+0x4>

08005558 <_localeconv_r>:
 8005558:	4800      	ldr	r0, [pc, #0]	@ (800555c <_localeconv_r+0x4>)
 800555a:	4770      	bx	lr
 800555c:	20000158 	.word	0x20000158

08005560 <__errno>:
 8005560:	4b01      	ldr	r3, [pc, #4]	@ (8005568 <__errno+0x8>)
 8005562:	6818      	ldr	r0, [r3, #0]
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	20000018 	.word	0x20000018

0800556c <__libc_init_array>:
 800556c:	b570      	push	{r4, r5, r6, lr}
 800556e:	4d0d      	ldr	r5, [pc, #52]	@ (80055a4 <__libc_init_array+0x38>)
 8005570:	4c0d      	ldr	r4, [pc, #52]	@ (80055a8 <__libc_init_array+0x3c>)
 8005572:	1b64      	subs	r4, r4, r5
 8005574:	10a4      	asrs	r4, r4, #2
 8005576:	2600      	movs	r6, #0
 8005578:	42a6      	cmp	r6, r4
 800557a:	d109      	bne.n	8005590 <__libc_init_array+0x24>
 800557c:	4d0b      	ldr	r5, [pc, #44]	@ (80055ac <__libc_init_array+0x40>)
 800557e:	4c0c      	ldr	r4, [pc, #48]	@ (80055b0 <__libc_init_array+0x44>)
 8005580:	f002 f8f0 	bl	8007764 <_init>
 8005584:	1b64      	subs	r4, r4, r5
 8005586:	10a4      	asrs	r4, r4, #2
 8005588:	2600      	movs	r6, #0
 800558a:	42a6      	cmp	r6, r4
 800558c:	d105      	bne.n	800559a <__libc_init_array+0x2e>
 800558e:	bd70      	pop	{r4, r5, r6, pc}
 8005590:	f855 3b04 	ldr.w	r3, [r5], #4
 8005594:	4798      	blx	r3
 8005596:	3601      	adds	r6, #1
 8005598:	e7ee      	b.n	8005578 <__libc_init_array+0xc>
 800559a:	f855 3b04 	ldr.w	r3, [r5], #4
 800559e:	4798      	blx	r3
 80055a0:	3601      	adds	r6, #1
 80055a2:	e7f2      	b.n	800558a <__libc_init_array+0x1e>
 80055a4:	08007b90 	.word	0x08007b90
 80055a8:	08007b90 	.word	0x08007b90
 80055ac:	08007b90 	.word	0x08007b90
 80055b0:	08007b94 	.word	0x08007b94

080055b4 <__retarget_lock_init_recursive>:
 80055b4:	4770      	bx	lr

080055b6 <__retarget_lock_acquire_recursive>:
 80055b6:	4770      	bx	lr

080055b8 <__retarget_lock_release_recursive>:
 80055b8:	4770      	bx	lr

080055ba <quorem>:
 80055ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055be:	6903      	ldr	r3, [r0, #16]
 80055c0:	690c      	ldr	r4, [r1, #16]
 80055c2:	42a3      	cmp	r3, r4
 80055c4:	4607      	mov	r7, r0
 80055c6:	db7e      	blt.n	80056c6 <quorem+0x10c>
 80055c8:	3c01      	subs	r4, #1
 80055ca:	f101 0814 	add.w	r8, r1, #20
 80055ce:	00a3      	lsls	r3, r4, #2
 80055d0:	f100 0514 	add.w	r5, r0, #20
 80055d4:	9300      	str	r3, [sp, #0]
 80055d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055da:	9301      	str	r3, [sp, #4]
 80055dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80055e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055e4:	3301      	adds	r3, #1
 80055e6:	429a      	cmp	r2, r3
 80055e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80055ec:	fbb2 f6f3 	udiv	r6, r2, r3
 80055f0:	d32e      	bcc.n	8005650 <quorem+0x96>
 80055f2:	f04f 0a00 	mov.w	sl, #0
 80055f6:	46c4      	mov	ip, r8
 80055f8:	46ae      	mov	lr, r5
 80055fa:	46d3      	mov	fp, sl
 80055fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005600:	b298      	uxth	r0, r3
 8005602:	fb06 a000 	mla	r0, r6, r0, sl
 8005606:	0c02      	lsrs	r2, r0, #16
 8005608:	0c1b      	lsrs	r3, r3, #16
 800560a:	fb06 2303 	mla	r3, r6, r3, r2
 800560e:	f8de 2000 	ldr.w	r2, [lr]
 8005612:	b280      	uxth	r0, r0
 8005614:	b292      	uxth	r2, r2
 8005616:	1a12      	subs	r2, r2, r0
 8005618:	445a      	add	r2, fp
 800561a:	f8de 0000 	ldr.w	r0, [lr]
 800561e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005622:	b29b      	uxth	r3, r3
 8005624:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005628:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800562c:	b292      	uxth	r2, r2
 800562e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005632:	45e1      	cmp	r9, ip
 8005634:	f84e 2b04 	str.w	r2, [lr], #4
 8005638:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800563c:	d2de      	bcs.n	80055fc <quorem+0x42>
 800563e:	9b00      	ldr	r3, [sp, #0]
 8005640:	58eb      	ldr	r3, [r5, r3]
 8005642:	b92b      	cbnz	r3, 8005650 <quorem+0x96>
 8005644:	9b01      	ldr	r3, [sp, #4]
 8005646:	3b04      	subs	r3, #4
 8005648:	429d      	cmp	r5, r3
 800564a:	461a      	mov	r2, r3
 800564c:	d32f      	bcc.n	80056ae <quorem+0xf4>
 800564e:	613c      	str	r4, [r7, #16]
 8005650:	4638      	mov	r0, r7
 8005652:	f001 fb35 	bl	8006cc0 <__mcmp>
 8005656:	2800      	cmp	r0, #0
 8005658:	db25      	blt.n	80056a6 <quorem+0xec>
 800565a:	4629      	mov	r1, r5
 800565c:	2000      	movs	r0, #0
 800565e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005662:	f8d1 c000 	ldr.w	ip, [r1]
 8005666:	fa1f fe82 	uxth.w	lr, r2
 800566a:	fa1f f38c 	uxth.w	r3, ip
 800566e:	eba3 030e 	sub.w	r3, r3, lr
 8005672:	4403      	add	r3, r0
 8005674:	0c12      	lsrs	r2, r2, #16
 8005676:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800567a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800567e:	b29b      	uxth	r3, r3
 8005680:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005684:	45c1      	cmp	r9, r8
 8005686:	f841 3b04 	str.w	r3, [r1], #4
 800568a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800568e:	d2e6      	bcs.n	800565e <quorem+0xa4>
 8005690:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005694:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005698:	b922      	cbnz	r2, 80056a4 <quorem+0xea>
 800569a:	3b04      	subs	r3, #4
 800569c:	429d      	cmp	r5, r3
 800569e:	461a      	mov	r2, r3
 80056a0:	d30b      	bcc.n	80056ba <quorem+0x100>
 80056a2:	613c      	str	r4, [r7, #16]
 80056a4:	3601      	adds	r6, #1
 80056a6:	4630      	mov	r0, r6
 80056a8:	b003      	add	sp, #12
 80056aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ae:	6812      	ldr	r2, [r2, #0]
 80056b0:	3b04      	subs	r3, #4
 80056b2:	2a00      	cmp	r2, #0
 80056b4:	d1cb      	bne.n	800564e <quorem+0x94>
 80056b6:	3c01      	subs	r4, #1
 80056b8:	e7c6      	b.n	8005648 <quorem+0x8e>
 80056ba:	6812      	ldr	r2, [r2, #0]
 80056bc:	3b04      	subs	r3, #4
 80056be:	2a00      	cmp	r2, #0
 80056c0:	d1ef      	bne.n	80056a2 <quorem+0xe8>
 80056c2:	3c01      	subs	r4, #1
 80056c4:	e7ea      	b.n	800569c <quorem+0xe2>
 80056c6:	2000      	movs	r0, #0
 80056c8:	e7ee      	b.n	80056a8 <quorem+0xee>
 80056ca:	0000      	movs	r0, r0
 80056cc:	0000      	movs	r0, r0
	...

080056d0 <_dtoa_r>:
 80056d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056d4:	69c7      	ldr	r7, [r0, #28]
 80056d6:	b099      	sub	sp, #100	@ 0x64
 80056d8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80056dc:	ec55 4b10 	vmov	r4, r5, d0
 80056e0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80056e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80056e4:	4683      	mov	fp, r0
 80056e6:	920e      	str	r2, [sp, #56]	@ 0x38
 80056e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80056ea:	b97f      	cbnz	r7, 800570c <_dtoa_r+0x3c>
 80056ec:	2010      	movs	r0, #16
 80056ee:	f000 ff0b 	bl	8006508 <malloc>
 80056f2:	4602      	mov	r2, r0
 80056f4:	f8cb 001c 	str.w	r0, [fp, #28]
 80056f8:	b920      	cbnz	r0, 8005704 <_dtoa_r+0x34>
 80056fa:	4ba7      	ldr	r3, [pc, #668]	@ (8005998 <_dtoa_r+0x2c8>)
 80056fc:	21ef      	movs	r1, #239	@ 0xef
 80056fe:	48a7      	ldr	r0, [pc, #668]	@ (800599c <_dtoa_r+0x2cc>)
 8005700:	f001 fcd6 	bl	80070b0 <__assert_func>
 8005704:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005708:	6007      	str	r7, [r0, #0]
 800570a:	60c7      	str	r7, [r0, #12]
 800570c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005710:	6819      	ldr	r1, [r3, #0]
 8005712:	b159      	cbz	r1, 800572c <_dtoa_r+0x5c>
 8005714:	685a      	ldr	r2, [r3, #4]
 8005716:	604a      	str	r2, [r1, #4]
 8005718:	2301      	movs	r3, #1
 800571a:	4093      	lsls	r3, r2
 800571c:	608b      	str	r3, [r1, #8]
 800571e:	4658      	mov	r0, fp
 8005720:	f001 f894 	bl	800684c <_Bfree>
 8005724:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005728:	2200      	movs	r2, #0
 800572a:	601a      	str	r2, [r3, #0]
 800572c:	1e2b      	subs	r3, r5, #0
 800572e:	bfb9      	ittee	lt
 8005730:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005734:	9303      	strlt	r3, [sp, #12]
 8005736:	2300      	movge	r3, #0
 8005738:	6033      	strge	r3, [r6, #0]
 800573a:	9f03      	ldr	r7, [sp, #12]
 800573c:	4b98      	ldr	r3, [pc, #608]	@ (80059a0 <_dtoa_r+0x2d0>)
 800573e:	bfbc      	itt	lt
 8005740:	2201      	movlt	r2, #1
 8005742:	6032      	strlt	r2, [r6, #0]
 8005744:	43bb      	bics	r3, r7
 8005746:	d112      	bne.n	800576e <_dtoa_r+0x9e>
 8005748:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800574a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800574e:	6013      	str	r3, [r2, #0]
 8005750:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005754:	4323      	orrs	r3, r4
 8005756:	f000 854d 	beq.w	80061f4 <_dtoa_r+0xb24>
 800575a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800575c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80059b4 <_dtoa_r+0x2e4>
 8005760:	2b00      	cmp	r3, #0
 8005762:	f000 854f 	beq.w	8006204 <_dtoa_r+0xb34>
 8005766:	f10a 0303 	add.w	r3, sl, #3
 800576a:	f000 bd49 	b.w	8006200 <_dtoa_r+0xb30>
 800576e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005772:	2200      	movs	r2, #0
 8005774:	ec51 0b17 	vmov	r0, r1, d7
 8005778:	2300      	movs	r3, #0
 800577a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800577e:	f7fb f9c3 	bl	8000b08 <__aeabi_dcmpeq>
 8005782:	4680      	mov	r8, r0
 8005784:	b158      	cbz	r0, 800579e <_dtoa_r+0xce>
 8005786:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005788:	2301      	movs	r3, #1
 800578a:	6013      	str	r3, [r2, #0]
 800578c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800578e:	b113      	cbz	r3, 8005796 <_dtoa_r+0xc6>
 8005790:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005792:	4b84      	ldr	r3, [pc, #528]	@ (80059a4 <_dtoa_r+0x2d4>)
 8005794:	6013      	str	r3, [r2, #0]
 8005796:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80059b8 <_dtoa_r+0x2e8>
 800579a:	f000 bd33 	b.w	8006204 <_dtoa_r+0xb34>
 800579e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80057a2:	aa16      	add	r2, sp, #88	@ 0x58
 80057a4:	a917      	add	r1, sp, #92	@ 0x5c
 80057a6:	4658      	mov	r0, fp
 80057a8:	f001 fb3a 	bl	8006e20 <__d2b>
 80057ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80057b0:	4681      	mov	r9, r0
 80057b2:	2e00      	cmp	r6, #0
 80057b4:	d077      	beq.n	80058a6 <_dtoa_r+0x1d6>
 80057b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80057b8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80057bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80057c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80057c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80057cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80057d0:	4619      	mov	r1, r3
 80057d2:	2200      	movs	r2, #0
 80057d4:	4b74      	ldr	r3, [pc, #464]	@ (80059a8 <_dtoa_r+0x2d8>)
 80057d6:	f7fa fd77 	bl	80002c8 <__aeabi_dsub>
 80057da:	a369      	add	r3, pc, #420	@ (adr r3, 8005980 <_dtoa_r+0x2b0>)
 80057dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e0:	f7fa ff2a 	bl	8000638 <__aeabi_dmul>
 80057e4:	a368      	add	r3, pc, #416	@ (adr r3, 8005988 <_dtoa_r+0x2b8>)
 80057e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ea:	f7fa fd6f 	bl	80002cc <__adddf3>
 80057ee:	4604      	mov	r4, r0
 80057f0:	4630      	mov	r0, r6
 80057f2:	460d      	mov	r5, r1
 80057f4:	f7fa feb6 	bl	8000564 <__aeabi_i2d>
 80057f8:	a365      	add	r3, pc, #404	@ (adr r3, 8005990 <_dtoa_r+0x2c0>)
 80057fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fe:	f7fa ff1b 	bl	8000638 <__aeabi_dmul>
 8005802:	4602      	mov	r2, r0
 8005804:	460b      	mov	r3, r1
 8005806:	4620      	mov	r0, r4
 8005808:	4629      	mov	r1, r5
 800580a:	f7fa fd5f 	bl	80002cc <__adddf3>
 800580e:	4604      	mov	r4, r0
 8005810:	460d      	mov	r5, r1
 8005812:	f7fb f9c1 	bl	8000b98 <__aeabi_d2iz>
 8005816:	2200      	movs	r2, #0
 8005818:	4607      	mov	r7, r0
 800581a:	2300      	movs	r3, #0
 800581c:	4620      	mov	r0, r4
 800581e:	4629      	mov	r1, r5
 8005820:	f7fb f97c 	bl	8000b1c <__aeabi_dcmplt>
 8005824:	b140      	cbz	r0, 8005838 <_dtoa_r+0x168>
 8005826:	4638      	mov	r0, r7
 8005828:	f7fa fe9c 	bl	8000564 <__aeabi_i2d>
 800582c:	4622      	mov	r2, r4
 800582e:	462b      	mov	r3, r5
 8005830:	f7fb f96a 	bl	8000b08 <__aeabi_dcmpeq>
 8005834:	b900      	cbnz	r0, 8005838 <_dtoa_r+0x168>
 8005836:	3f01      	subs	r7, #1
 8005838:	2f16      	cmp	r7, #22
 800583a:	d851      	bhi.n	80058e0 <_dtoa_r+0x210>
 800583c:	4b5b      	ldr	r3, [pc, #364]	@ (80059ac <_dtoa_r+0x2dc>)
 800583e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005846:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800584a:	f7fb f967 	bl	8000b1c <__aeabi_dcmplt>
 800584e:	2800      	cmp	r0, #0
 8005850:	d048      	beq.n	80058e4 <_dtoa_r+0x214>
 8005852:	3f01      	subs	r7, #1
 8005854:	2300      	movs	r3, #0
 8005856:	9312      	str	r3, [sp, #72]	@ 0x48
 8005858:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800585a:	1b9b      	subs	r3, r3, r6
 800585c:	1e5a      	subs	r2, r3, #1
 800585e:	bf44      	itt	mi
 8005860:	f1c3 0801 	rsbmi	r8, r3, #1
 8005864:	2300      	movmi	r3, #0
 8005866:	9208      	str	r2, [sp, #32]
 8005868:	bf54      	ite	pl
 800586a:	f04f 0800 	movpl.w	r8, #0
 800586e:	9308      	strmi	r3, [sp, #32]
 8005870:	2f00      	cmp	r7, #0
 8005872:	db39      	blt.n	80058e8 <_dtoa_r+0x218>
 8005874:	9b08      	ldr	r3, [sp, #32]
 8005876:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005878:	443b      	add	r3, r7
 800587a:	9308      	str	r3, [sp, #32]
 800587c:	2300      	movs	r3, #0
 800587e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005880:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005882:	2b09      	cmp	r3, #9
 8005884:	d864      	bhi.n	8005950 <_dtoa_r+0x280>
 8005886:	2b05      	cmp	r3, #5
 8005888:	bfc4      	itt	gt
 800588a:	3b04      	subgt	r3, #4
 800588c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800588e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005890:	f1a3 0302 	sub.w	r3, r3, #2
 8005894:	bfcc      	ite	gt
 8005896:	2400      	movgt	r4, #0
 8005898:	2401      	movle	r4, #1
 800589a:	2b03      	cmp	r3, #3
 800589c:	d863      	bhi.n	8005966 <_dtoa_r+0x296>
 800589e:	e8df f003 	tbb	[pc, r3]
 80058a2:	372a      	.short	0x372a
 80058a4:	5535      	.short	0x5535
 80058a6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80058aa:	441e      	add	r6, r3
 80058ac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80058b0:	2b20      	cmp	r3, #32
 80058b2:	bfc1      	itttt	gt
 80058b4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80058b8:	409f      	lslgt	r7, r3
 80058ba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80058be:	fa24 f303 	lsrgt.w	r3, r4, r3
 80058c2:	bfd6      	itet	le
 80058c4:	f1c3 0320 	rsble	r3, r3, #32
 80058c8:	ea47 0003 	orrgt.w	r0, r7, r3
 80058cc:	fa04 f003 	lslle.w	r0, r4, r3
 80058d0:	f7fa fe38 	bl	8000544 <__aeabi_ui2d>
 80058d4:	2201      	movs	r2, #1
 80058d6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80058da:	3e01      	subs	r6, #1
 80058dc:	9214      	str	r2, [sp, #80]	@ 0x50
 80058de:	e777      	b.n	80057d0 <_dtoa_r+0x100>
 80058e0:	2301      	movs	r3, #1
 80058e2:	e7b8      	b.n	8005856 <_dtoa_r+0x186>
 80058e4:	9012      	str	r0, [sp, #72]	@ 0x48
 80058e6:	e7b7      	b.n	8005858 <_dtoa_r+0x188>
 80058e8:	427b      	negs	r3, r7
 80058ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80058ec:	2300      	movs	r3, #0
 80058ee:	eba8 0807 	sub.w	r8, r8, r7
 80058f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80058f4:	e7c4      	b.n	8005880 <_dtoa_r+0x1b0>
 80058f6:	2300      	movs	r3, #0
 80058f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	dc35      	bgt.n	800596c <_dtoa_r+0x29c>
 8005900:	2301      	movs	r3, #1
 8005902:	9300      	str	r3, [sp, #0]
 8005904:	9307      	str	r3, [sp, #28]
 8005906:	461a      	mov	r2, r3
 8005908:	920e      	str	r2, [sp, #56]	@ 0x38
 800590a:	e00b      	b.n	8005924 <_dtoa_r+0x254>
 800590c:	2301      	movs	r3, #1
 800590e:	e7f3      	b.n	80058f8 <_dtoa_r+0x228>
 8005910:	2300      	movs	r3, #0
 8005912:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005914:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005916:	18fb      	adds	r3, r7, r3
 8005918:	9300      	str	r3, [sp, #0]
 800591a:	3301      	adds	r3, #1
 800591c:	2b01      	cmp	r3, #1
 800591e:	9307      	str	r3, [sp, #28]
 8005920:	bfb8      	it	lt
 8005922:	2301      	movlt	r3, #1
 8005924:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005928:	2100      	movs	r1, #0
 800592a:	2204      	movs	r2, #4
 800592c:	f102 0514 	add.w	r5, r2, #20
 8005930:	429d      	cmp	r5, r3
 8005932:	d91f      	bls.n	8005974 <_dtoa_r+0x2a4>
 8005934:	6041      	str	r1, [r0, #4]
 8005936:	4658      	mov	r0, fp
 8005938:	f000 ff48 	bl	80067cc <_Balloc>
 800593c:	4682      	mov	sl, r0
 800593e:	2800      	cmp	r0, #0
 8005940:	d13c      	bne.n	80059bc <_dtoa_r+0x2ec>
 8005942:	4b1b      	ldr	r3, [pc, #108]	@ (80059b0 <_dtoa_r+0x2e0>)
 8005944:	4602      	mov	r2, r0
 8005946:	f240 11af 	movw	r1, #431	@ 0x1af
 800594a:	e6d8      	b.n	80056fe <_dtoa_r+0x2e>
 800594c:	2301      	movs	r3, #1
 800594e:	e7e0      	b.n	8005912 <_dtoa_r+0x242>
 8005950:	2401      	movs	r4, #1
 8005952:	2300      	movs	r3, #0
 8005954:	9309      	str	r3, [sp, #36]	@ 0x24
 8005956:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005958:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800595c:	9300      	str	r3, [sp, #0]
 800595e:	9307      	str	r3, [sp, #28]
 8005960:	2200      	movs	r2, #0
 8005962:	2312      	movs	r3, #18
 8005964:	e7d0      	b.n	8005908 <_dtoa_r+0x238>
 8005966:	2301      	movs	r3, #1
 8005968:	930b      	str	r3, [sp, #44]	@ 0x2c
 800596a:	e7f5      	b.n	8005958 <_dtoa_r+0x288>
 800596c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800596e:	9300      	str	r3, [sp, #0]
 8005970:	9307      	str	r3, [sp, #28]
 8005972:	e7d7      	b.n	8005924 <_dtoa_r+0x254>
 8005974:	3101      	adds	r1, #1
 8005976:	0052      	lsls	r2, r2, #1
 8005978:	e7d8      	b.n	800592c <_dtoa_r+0x25c>
 800597a:	bf00      	nop
 800597c:	f3af 8000 	nop.w
 8005980:	636f4361 	.word	0x636f4361
 8005984:	3fd287a7 	.word	0x3fd287a7
 8005988:	8b60c8b3 	.word	0x8b60c8b3
 800598c:	3fc68a28 	.word	0x3fc68a28
 8005990:	509f79fb 	.word	0x509f79fb
 8005994:	3fd34413 	.word	0x3fd34413
 8005998:	08007859 	.word	0x08007859
 800599c:	08007870 	.word	0x08007870
 80059a0:	7ff00000 	.word	0x7ff00000
 80059a4:	08007829 	.word	0x08007829
 80059a8:	3ff80000 	.word	0x3ff80000
 80059ac:	08007978 	.word	0x08007978
 80059b0:	080078c8 	.word	0x080078c8
 80059b4:	08007855 	.word	0x08007855
 80059b8:	08007828 	.word	0x08007828
 80059bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80059c0:	6018      	str	r0, [r3, #0]
 80059c2:	9b07      	ldr	r3, [sp, #28]
 80059c4:	2b0e      	cmp	r3, #14
 80059c6:	f200 80a4 	bhi.w	8005b12 <_dtoa_r+0x442>
 80059ca:	2c00      	cmp	r4, #0
 80059cc:	f000 80a1 	beq.w	8005b12 <_dtoa_r+0x442>
 80059d0:	2f00      	cmp	r7, #0
 80059d2:	dd33      	ble.n	8005a3c <_dtoa_r+0x36c>
 80059d4:	4bad      	ldr	r3, [pc, #692]	@ (8005c8c <_dtoa_r+0x5bc>)
 80059d6:	f007 020f 	and.w	r2, r7, #15
 80059da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059de:	ed93 7b00 	vldr	d7, [r3]
 80059e2:	05f8      	lsls	r0, r7, #23
 80059e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80059e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80059ec:	d516      	bpl.n	8005a1c <_dtoa_r+0x34c>
 80059ee:	4ba8      	ldr	r3, [pc, #672]	@ (8005c90 <_dtoa_r+0x5c0>)
 80059f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80059f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80059f8:	f7fa ff48 	bl	800088c <__aeabi_ddiv>
 80059fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a00:	f004 040f 	and.w	r4, r4, #15
 8005a04:	2603      	movs	r6, #3
 8005a06:	4da2      	ldr	r5, [pc, #648]	@ (8005c90 <_dtoa_r+0x5c0>)
 8005a08:	b954      	cbnz	r4, 8005a20 <_dtoa_r+0x350>
 8005a0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a12:	f7fa ff3b 	bl	800088c <__aeabi_ddiv>
 8005a16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a1a:	e028      	b.n	8005a6e <_dtoa_r+0x39e>
 8005a1c:	2602      	movs	r6, #2
 8005a1e:	e7f2      	b.n	8005a06 <_dtoa_r+0x336>
 8005a20:	07e1      	lsls	r1, r4, #31
 8005a22:	d508      	bpl.n	8005a36 <_dtoa_r+0x366>
 8005a24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005a2c:	f7fa fe04 	bl	8000638 <__aeabi_dmul>
 8005a30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a34:	3601      	adds	r6, #1
 8005a36:	1064      	asrs	r4, r4, #1
 8005a38:	3508      	adds	r5, #8
 8005a3a:	e7e5      	b.n	8005a08 <_dtoa_r+0x338>
 8005a3c:	f000 80d2 	beq.w	8005be4 <_dtoa_r+0x514>
 8005a40:	427c      	negs	r4, r7
 8005a42:	4b92      	ldr	r3, [pc, #584]	@ (8005c8c <_dtoa_r+0x5bc>)
 8005a44:	4d92      	ldr	r5, [pc, #584]	@ (8005c90 <_dtoa_r+0x5c0>)
 8005a46:	f004 020f 	and.w	r2, r4, #15
 8005a4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a56:	f7fa fdef 	bl	8000638 <__aeabi_dmul>
 8005a5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a5e:	1124      	asrs	r4, r4, #4
 8005a60:	2300      	movs	r3, #0
 8005a62:	2602      	movs	r6, #2
 8005a64:	2c00      	cmp	r4, #0
 8005a66:	f040 80b2 	bne.w	8005bce <_dtoa_r+0x4fe>
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1d3      	bne.n	8005a16 <_dtoa_r+0x346>
 8005a6e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005a70:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f000 80b7 	beq.w	8005be8 <_dtoa_r+0x518>
 8005a7a:	4b86      	ldr	r3, [pc, #536]	@ (8005c94 <_dtoa_r+0x5c4>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	4620      	mov	r0, r4
 8005a80:	4629      	mov	r1, r5
 8005a82:	f7fb f84b 	bl	8000b1c <__aeabi_dcmplt>
 8005a86:	2800      	cmp	r0, #0
 8005a88:	f000 80ae 	beq.w	8005be8 <_dtoa_r+0x518>
 8005a8c:	9b07      	ldr	r3, [sp, #28]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 80aa 	beq.w	8005be8 <_dtoa_r+0x518>
 8005a94:	9b00      	ldr	r3, [sp, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	dd37      	ble.n	8005b0a <_dtoa_r+0x43a>
 8005a9a:	1e7b      	subs	r3, r7, #1
 8005a9c:	9304      	str	r3, [sp, #16]
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	4b7d      	ldr	r3, [pc, #500]	@ (8005c98 <_dtoa_r+0x5c8>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	4629      	mov	r1, r5
 8005aa6:	f7fa fdc7 	bl	8000638 <__aeabi_dmul>
 8005aaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005aae:	9c00      	ldr	r4, [sp, #0]
 8005ab0:	3601      	adds	r6, #1
 8005ab2:	4630      	mov	r0, r6
 8005ab4:	f7fa fd56 	bl	8000564 <__aeabi_i2d>
 8005ab8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005abc:	f7fa fdbc 	bl	8000638 <__aeabi_dmul>
 8005ac0:	4b76      	ldr	r3, [pc, #472]	@ (8005c9c <_dtoa_r+0x5cc>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f7fa fc02 	bl	80002cc <__adddf3>
 8005ac8:	4605      	mov	r5, r0
 8005aca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005ace:	2c00      	cmp	r4, #0
 8005ad0:	f040 808d 	bne.w	8005bee <_dtoa_r+0x51e>
 8005ad4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ad8:	4b71      	ldr	r3, [pc, #452]	@ (8005ca0 <_dtoa_r+0x5d0>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	f7fa fbf4 	bl	80002c8 <__aeabi_dsub>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005ae8:	462a      	mov	r2, r5
 8005aea:	4633      	mov	r3, r6
 8005aec:	f7fb f834 	bl	8000b58 <__aeabi_dcmpgt>
 8005af0:	2800      	cmp	r0, #0
 8005af2:	f040 828b 	bne.w	800600c <_dtoa_r+0x93c>
 8005af6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005afa:	462a      	mov	r2, r5
 8005afc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005b00:	f7fb f80c 	bl	8000b1c <__aeabi_dcmplt>
 8005b04:	2800      	cmp	r0, #0
 8005b06:	f040 8128 	bne.w	8005d5a <_dtoa_r+0x68a>
 8005b0a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005b0e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005b12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f2c0 815a 	blt.w	8005dce <_dtoa_r+0x6fe>
 8005b1a:	2f0e      	cmp	r7, #14
 8005b1c:	f300 8157 	bgt.w	8005dce <_dtoa_r+0x6fe>
 8005b20:	4b5a      	ldr	r3, [pc, #360]	@ (8005c8c <_dtoa_r+0x5bc>)
 8005b22:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005b26:	ed93 7b00 	vldr	d7, [r3]
 8005b2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	ed8d 7b00 	vstr	d7, [sp]
 8005b32:	da03      	bge.n	8005b3c <_dtoa_r+0x46c>
 8005b34:	9b07      	ldr	r3, [sp, #28]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f340 8101 	ble.w	8005d3e <_dtoa_r+0x66e>
 8005b3c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005b40:	4656      	mov	r6, sl
 8005b42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b46:	4620      	mov	r0, r4
 8005b48:	4629      	mov	r1, r5
 8005b4a:	f7fa fe9f 	bl	800088c <__aeabi_ddiv>
 8005b4e:	f7fb f823 	bl	8000b98 <__aeabi_d2iz>
 8005b52:	4680      	mov	r8, r0
 8005b54:	f7fa fd06 	bl	8000564 <__aeabi_i2d>
 8005b58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b5c:	f7fa fd6c 	bl	8000638 <__aeabi_dmul>
 8005b60:	4602      	mov	r2, r0
 8005b62:	460b      	mov	r3, r1
 8005b64:	4620      	mov	r0, r4
 8005b66:	4629      	mov	r1, r5
 8005b68:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005b6c:	f7fa fbac 	bl	80002c8 <__aeabi_dsub>
 8005b70:	f806 4b01 	strb.w	r4, [r6], #1
 8005b74:	9d07      	ldr	r5, [sp, #28]
 8005b76:	eba6 040a 	sub.w	r4, r6, sl
 8005b7a:	42a5      	cmp	r5, r4
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	460b      	mov	r3, r1
 8005b80:	f040 8117 	bne.w	8005db2 <_dtoa_r+0x6e2>
 8005b84:	f7fa fba2 	bl	80002cc <__adddf3>
 8005b88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b8c:	4604      	mov	r4, r0
 8005b8e:	460d      	mov	r5, r1
 8005b90:	f7fa ffe2 	bl	8000b58 <__aeabi_dcmpgt>
 8005b94:	2800      	cmp	r0, #0
 8005b96:	f040 80f9 	bne.w	8005d8c <_dtoa_r+0x6bc>
 8005b9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b9e:	4620      	mov	r0, r4
 8005ba0:	4629      	mov	r1, r5
 8005ba2:	f7fa ffb1 	bl	8000b08 <__aeabi_dcmpeq>
 8005ba6:	b118      	cbz	r0, 8005bb0 <_dtoa_r+0x4e0>
 8005ba8:	f018 0f01 	tst.w	r8, #1
 8005bac:	f040 80ee 	bne.w	8005d8c <_dtoa_r+0x6bc>
 8005bb0:	4649      	mov	r1, r9
 8005bb2:	4658      	mov	r0, fp
 8005bb4:	f000 fe4a 	bl	800684c <_Bfree>
 8005bb8:	2300      	movs	r3, #0
 8005bba:	7033      	strb	r3, [r6, #0]
 8005bbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005bbe:	3701      	adds	r7, #1
 8005bc0:	601f      	str	r7, [r3, #0]
 8005bc2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f000 831d 	beq.w	8006204 <_dtoa_r+0xb34>
 8005bca:	601e      	str	r6, [r3, #0]
 8005bcc:	e31a      	b.n	8006204 <_dtoa_r+0xb34>
 8005bce:	07e2      	lsls	r2, r4, #31
 8005bd0:	d505      	bpl.n	8005bde <_dtoa_r+0x50e>
 8005bd2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005bd6:	f7fa fd2f 	bl	8000638 <__aeabi_dmul>
 8005bda:	3601      	adds	r6, #1
 8005bdc:	2301      	movs	r3, #1
 8005bde:	1064      	asrs	r4, r4, #1
 8005be0:	3508      	adds	r5, #8
 8005be2:	e73f      	b.n	8005a64 <_dtoa_r+0x394>
 8005be4:	2602      	movs	r6, #2
 8005be6:	e742      	b.n	8005a6e <_dtoa_r+0x39e>
 8005be8:	9c07      	ldr	r4, [sp, #28]
 8005bea:	9704      	str	r7, [sp, #16]
 8005bec:	e761      	b.n	8005ab2 <_dtoa_r+0x3e2>
 8005bee:	4b27      	ldr	r3, [pc, #156]	@ (8005c8c <_dtoa_r+0x5bc>)
 8005bf0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005bf2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005bf6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005bfa:	4454      	add	r4, sl
 8005bfc:	2900      	cmp	r1, #0
 8005bfe:	d053      	beq.n	8005ca8 <_dtoa_r+0x5d8>
 8005c00:	4928      	ldr	r1, [pc, #160]	@ (8005ca4 <_dtoa_r+0x5d4>)
 8005c02:	2000      	movs	r0, #0
 8005c04:	f7fa fe42 	bl	800088c <__aeabi_ddiv>
 8005c08:	4633      	mov	r3, r6
 8005c0a:	462a      	mov	r2, r5
 8005c0c:	f7fa fb5c 	bl	80002c8 <__aeabi_dsub>
 8005c10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c14:	4656      	mov	r6, sl
 8005c16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c1a:	f7fa ffbd 	bl	8000b98 <__aeabi_d2iz>
 8005c1e:	4605      	mov	r5, r0
 8005c20:	f7fa fca0 	bl	8000564 <__aeabi_i2d>
 8005c24:	4602      	mov	r2, r0
 8005c26:	460b      	mov	r3, r1
 8005c28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c2c:	f7fa fb4c 	bl	80002c8 <__aeabi_dsub>
 8005c30:	3530      	adds	r5, #48	@ 0x30
 8005c32:	4602      	mov	r2, r0
 8005c34:	460b      	mov	r3, r1
 8005c36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c3a:	f806 5b01 	strb.w	r5, [r6], #1
 8005c3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c42:	f7fa ff6b 	bl	8000b1c <__aeabi_dcmplt>
 8005c46:	2800      	cmp	r0, #0
 8005c48:	d171      	bne.n	8005d2e <_dtoa_r+0x65e>
 8005c4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c4e:	4911      	ldr	r1, [pc, #68]	@ (8005c94 <_dtoa_r+0x5c4>)
 8005c50:	2000      	movs	r0, #0
 8005c52:	f7fa fb39 	bl	80002c8 <__aeabi_dsub>
 8005c56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c5a:	f7fa ff5f 	bl	8000b1c <__aeabi_dcmplt>
 8005c5e:	2800      	cmp	r0, #0
 8005c60:	f040 8095 	bne.w	8005d8e <_dtoa_r+0x6be>
 8005c64:	42a6      	cmp	r6, r4
 8005c66:	f43f af50 	beq.w	8005b0a <_dtoa_r+0x43a>
 8005c6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8005c98 <_dtoa_r+0x5c8>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	f7fa fce1 	bl	8000638 <__aeabi_dmul>
 8005c76:	4b08      	ldr	r3, [pc, #32]	@ (8005c98 <_dtoa_r+0x5c8>)
 8005c78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c82:	f7fa fcd9 	bl	8000638 <__aeabi_dmul>
 8005c86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c8a:	e7c4      	b.n	8005c16 <_dtoa_r+0x546>
 8005c8c:	08007978 	.word	0x08007978
 8005c90:	08007950 	.word	0x08007950
 8005c94:	3ff00000 	.word	0x3ff00000
 8005c98:	40240000 	.word	0x40240000
 8005c9c:	401c0000 	.word	0x401c0000
 8005ca0:	40140000 	.word	0x40140000
 8005ca4:	3fe00000 	.word	0x3fe00000
 8005ca8:	4631      	mov	r1, r6
 8005caa:	4628      	mov	r0, r5
 8005cac:	f7fa fcc4 	bl	8000638 <__aeabi_dmul>
 8005cb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005cb4:	9415      	str	r4, [sp, #84]	@ 0x54
 8005cb6:	4656      	mov	r6, sl
 8005cb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cbc:	f7fa ff6c 	bl	8000b98 <__aeabi_d2iz>
 8005cc0:	4605      	mov	r5, r0
 8005cc2:	f7fa fc4f 	bl	8000564 <__aeabi_i2d>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	460b      	mov	r3, r1
 8005cca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cce:	f7fa fafb 	bl	80002c8 <__aeabi_dsub>
 8005cd2:	3530      	adds	r5, #48	@ 0x30
 8005cd4:	f806 5b01 	strb.w	r5, [r6], #1
 8005cd8:	4602      	mov	r2, r0
 8005cda:	460b      	mov	r3, r1
 8005cdc:	42a6      	cmp	r6, r4
 8005cde:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005ce2:	f04f 0200 	mov.w	r2, #0
 8005ce6:	d124      	bne.n	8005d32 <_dtoa_r+0x662>
 8005ce8:	4bac      	ldr	r3, [pc, #688]	@ (8005f9c <_dtoa_r+0x8cc>)
 8005cea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005cee:	f7fa faed 	bl	80002cc <__adddf3>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cfa:	f7fa ff2d 	bl	8000b58 <__aeabi_dcmpgt>
 8005cfe:	2800      	cmp	r0, #0
 8005d00:	d145      	bne.n	8005d8e <_dtoa_r+0x6be>
 8005d02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005d06:	49a5      	ldr	r1, [pc, #660]	@ (8005f9c <_dtoa_r+0x8cc>)
 8005d08:	2000      	movs	r0, #0
 8005d0a:	f7fa fadd 	bl	80002c8 <__aeabi_dsub>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	460b      	mov	r3, r1
 8005d12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d16:	f7fa ff01 	bl	8000b1c <__aeabi_dcmplt>
 8005d1a:	2800      	cmp	r0, #0
 8005d1c:	f43f aef5 	beq.w	8005b0a <_dtoa_r+0x43a>
 8005d20:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005d22:	1e73      	subs	r3, r6, #1
 8005d24:	9315      	str	r3, [sp, #84]	@ 0x54
 8005d26:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005d2a:	2b30      	cmp	r3, #48	@ 0x30
 8005d2c:	d0f8      	beq.n	8005d20 <_dtoa_r+0x650>
 8005d2e:	9f04      	ldr	r7, [sp, #16]
 8005d30:	e73e      	b.n	8005bb0 <_dtoa_r+0x4e0>
 8005d32:	4b9b      	ldr	r3, [pc, #620]	@ (8005fa0 <_dtoa_r+0x8d0>)
 8005d34:	f7fa fc80 	bl	8000638 <__aeabi_dmul>
 8005d38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d3c:	e7bc      	b.n	8005cb8 <_dtoa_r+0x5e8>
 8005d3e:	d10c      	bne.n	8005d5a <_dtoa_r+0x68a>
 8005d40:	4b98      	ldr	r3, [pc, #608]	@ (8005fa4 <_dtoa_r+0x8d4>)
 8005d42:	2200      	movs	r2, #0
 8005d44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d48:	f7fa fc76 	bl	8000638 <__aeabi_dmul>
 8005d4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d50:	f7fa fef8 	bl	8000b44 <__aeabi_dcmpge>
 8005d54:	2800      	cmp	r0, #0
 8005d56:	f000 8157 	beq.w	8006008 <_dtoa_r+0x938>
 8005d5a:	2400      	movs	r4, #0
 8005d5c:	4625      	mov	r5, r4
 8005d5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d60:	43db      	mvns	r3, r3
 8005d62:	9304      	str	r3, [sp, #16]
 8005d64:	4656      	mov	r6, sl
 8005d66:	2700      	movs	r7, #0
 8005d68:	4621      	mov	r1, r4
 8005d6a:	4658      	mov	r0, fp
 8005d6c:	f000 fd6e 	bl	800684c <_Bfree>
 8005d70:	2d00      	cmp	r5, #0
 8005d72:	d0dc      	beq.n	8005d2e <_dtoa_r+0x65e>
 8005d74:	b12f      	cbz	r7, 8005d82 <_dtoa_r+0x6b2>
 8005d76:	42af      	cmp	r7, r5
 8005d78:	d003      	beq.n	8005d82 <_dtoa_r+0x6b2>
 8005d7a:	4639      	mov	r1, r7
 8005d7c:	4658      	mov	r0, fp
 8005d7e:	f000 fd65 	bl	800684c <_Bfree>
 8005d82:	4629      	mov	r1, r5
 8005d84:	4658      	mov	r0, fp
 8005d86:	f000 fd61 	bl	800684c <_Bfree>
 8005d8a:	e7d0      	b.n	8005d2e <_dtoa_r+0x65e>
 8005d8c:	9704      	str	r7, [sp, #16]
 8005d8e:	4633      	mov	r3, r6
 8005d90:	461e      	mov	r6, r3
 8005d92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d96:	2a39      	cmp	r2, #57	@ 0x39
 8005d98:	d107      	bne.n	8005daa <_dtoa_r+0x6da>
 8005d9a:	459a      	cmp	sl, r3
 8005d9c:	d1f8      	bne.n	8005d90 <_dtoa_r+0x6c0>
 8005d9e:	9a04      	ldr	r2, [sp, #16]
 8005da0:	3201      	adds	r2, #1
 8005da2:	9204      	str	r2, [sp, #16]
 8005da4:	2230      	movs	r2, #48	@ 0x30
 8005da6:	f88a 2000 	strb.w	r2, [sl]
 8005daa:	781a      	ldrb	r2, [r3, #0]
 8005dac:	3201      	adds	r2, #1
 8005dae:	701a      	strb	r2, [r3, #0]
 8005db0:	e7bd      	b.n	8005d2e <_dtoa_r+0x65e>
 8005db2:	4b7b      	ldr	r3, [pc, #492]	@ (8005fa0 <_dtoa_r+0x8d0>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	f7fa fc3f 	bl	8000638 <__aeabi_dmul>
 8005dba:	2200      	movs	r2, #0
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	4604      	mov	r4, r0
 8005dc0:	460d      	mov	r5, r1
 8005dc2:	f7fa fea1 	bl	8000b08 <__aeabi_dcmpeq>
 8005dc6:	2800      	cmp	r0, #0
 8005dc8:	f43f aebb 	beq.w	8005b42 <_dtoa_r+0x472>
 8005dcc:	e6f0      	b.n	8005bb0 <_dtoa_r+0x4e0>
 8005dce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005dd0:	2a00      	cmp	r2, #0
 8005dd2:	f000 80db 	beq.w	8005f8c <_dtoa_r+0x8bc>
 8005dd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005dd8:	2a01      	cmp	r2, #1
 8005dda:	f300 80bf 	bgt.w	8005f5c <_dtoa_r+0x88c>
 8005dde:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005de0:	2a00      	cmp	r2, #0
 8005de2:	f000 80b7 	beq.w	8005f54 <_dtoa_r+0x884>
 8005de6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005dea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005dec:	4646      	mov	r6, r8
 8005dee:	9a08      	ldr	r2, [sp, #32]
 8005df0:	2101      	movs	r1, #1
 8005df2:	441a      	add	r2, r3
 8005df4:	4658      	mov	r0, fp
 8005df6:	4498      	add	r8, r3
 8005df8:	9208      	str	r2, [sp, #32]
 8005dfa:	f000 fddb 	bl	80069b4 <__i2b>
 8005dfe:	4605      	mov	r5, r0
 8005e00:	b15e      	cbz	r6, 8005e1a <_dtoa_r+0x74a>
 8005e02:	9b08      	ldr	r3, [sp, #32]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	dd08      	ble.n	8005e1a <_dtoa_r+0x74a>
 8005e08:	42b3      	cmp	r3, r6
 8005e0a:	9a08      	ldr	r2, [sp, #32]
 8005e0c:	bfa8      	it	ge
 8005e0e:	4633      	movge	r3, r6
 8005e10:	eba8 0803 	sub.w	r8, r8, r3
 8005e14:	1af6      	subs	r6, r6, r3
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	9308      	str	r3, [sp, #32]
 8005e1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e1c:	b1f3      	cbz	r3, 8005e5c <_dtoa_r+0x78c>
 8005e1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 80b7 	beq.w	8005f94 <_dtoa_r+0x8c4>
 8005e26:	b18c      	cbz	r4, 8005e4c <_dtoa_r+0x77c>
 8005e28:	4629      	mov	r1, r5
 8005e2a:	4622      	mov	r2, r4
 8005e2c:	4658      	mov	r0, fp
 8005e2e:	f000 fe81 	bl	8006b34 <__pow5mult>
 8005e32:	464a      	mov	r2, r9
 8005e34:	4601      	mov	r1, r0
 8005e36:	4605      	mov	r5, r0
 8005e38:	4658      	mov	r0, fp
 8005e3a:	f000 fdd1 	bl	80069e0 <__multiply>
 8005e3e:	4649      	mov	r1, r9
 8005e40:	9004      	str	r0, [sp, #16]
 8005e42:	4658      	mov	r0, fp
 8005e44:	f000 fd02 	bl	800684c <_Bfree>
 8005e48:	9b04      	ldr	r3, [sp, #16]
 8005e4a:	4699      	mov	r9, r3
 8005e4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e4e:	1b1a      	subs	r2, r3, r4
 8005e50:	d004      	beq.n	8005e5c <_dtoa_r+0x78c>
 8005e52:	4649      	mov	r1, r9
 8005e54:	4658      	mov	r0, fp
 8005e56:	f000 fe6d 	bl	8006b34 <__pow5mult>
 8005e5a:	4681      	mov	r9, r0
 8005e5c:	2101      	movs	r1, #1
 8005e5e:	4658      	mov	r0, fp
 8005e60:	f000 fda8 	bl	80069b4 <__i2b>
 8005e64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e66:	4604      	mov	r4, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f000 81cf 	beq.w	800620c <_dtoa_r+0xb3c>
 8005e6e:	461a      	mov	r2, r3
 8005e70:	4601      	mov	r1, r0
 8005e72:	4658      	mov	r0, fp
 8005e74:	f000 fe5e 	bl	8006b34 <__pow5mult>
 8005e78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	4604      	mov	r4, r0
 8005e7e:	f300 8095 	bgt.w	8005fac <_dtoa_r+0x8dc>
 8005e82:	9b02      	ldr	r3, [sp, #8]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f040 8087 	bne.w	8005f98 <_dtoa_r+0x8c8>
 8005e8a:	9b03      	ldr	r3, [sp, #12]
 8005e8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f040 8089 	bne.w	8005fa8 <_dtoa_r+0x8d8>
 8005e96:	9b03      	ldr	r3, [sp, #12]
 8005e98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e9c:	0d1b      	lsrs	r3, r3, #20
 8005e9e:	051b      	lsls	r3, r3, #20
 8005ea0:	b12b      	cbz	r3, 8005eae <_dtoa_r+0x7de>
 8005ea2:	9b08      	ldr	r3, [sp, #32]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	9308      	str	r3, [sp, #32]
 8005ea8:	f108 0801 	add.w	r8, r8, #1
 8005eac:	2301      	movs	r3, #1
 8005eae:	930a      	str	r3, [sp, #40]	@ 0x28
 8005eb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f000 81b0 	beq.w	8006218 <_dtoa_r+0xb48>
 8005eb8:	6923      	ldr	r3, [r4, #16]
 8005eba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005ebe:	6918      	ldr	r0, [r3, #16]
 8005ec0:	f000 fd2c 	bl	800691c <__hi0bits>
 8005ec4:	f1c0 0020 	rsb	r0, r0, #32
 8005ec8:	9b08      	ldr	r3, [sp, #32]
 8005eca:	4418      	add	r0, r3
 8005ecc:	f010 001f 	ands.w	r0, r0, #31
 8005ed0:	d077      	beq.n	8005fc2 <_dtoa_r+0x8f2>
 8005ed2:	f1c0 0320 	rsb	r3, r0, #32
 8005ed6:	2b04      	cmp	r3, #4
 8005ed8:	dd6b      	ble.n	8005fb2 <_dtoa_r+0x8e2>
 8005eda:	9b08      	ldr	r3, [sp, #32]
 8005edc:	f1c0 001c 	rsb	r0, r0, #28
 8005ee0:	4403      	add	r3, r0
 8005ee2:	4480      	add	r8, r0
 8005ee4:	4406      	add	r6, r0
 8005ee6:	9308      	str	r3, [sp, #32]
 8005ee8:	f1b8 0f00 	cmp.w	r8, #0
 8005eec:	dd05      	ble.n	8005efa <_dtoa_r+0x82a>
 8005eee:	4649      	mov	r1, r9
 8005ef0:	4642      	mov	r2, r8
 8005ef2:	4658      	mov	r0, fp
 8005ef4:	f000 fe78 	bl	8006be8 <__lshift>
 8005ef8:	4681      	mov	r9, r0
 8005efa:	9b08      	ldr	r3, [sp, #32]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	dd05      	ble.n	8005f0c <_dtoa_r+0x83c>
 8005f00:	4621      	mov	r1, r4
 8005f02:	461a      	mov	r2, r3
 8005f04:	4658      	mov	r0, fp
 8005f06:	f000 fe6f 	bl	8006be8 <__lshift>
 8005f0a:	4604      	mov	r4, r0
 8005f0c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d059      	beq.n	8005fc6 <_dtoa_r+0x8f6>
 8005f12:	4621      	mov	r1, r4
 8005f14:	4648      	mov	r0, r9
 8005f16:	f000 fed3 	bl	8006cc0 <__mcmp>
 8005f1a:	2800      	cmp	r0, #0
 8005f1c:	da53      	bge.n	8005fc6 <_dtoa_r+0x8f6>
 8005f1e:	1e7b      	subs	r3, r7, #1
 8005f20:	9304      	str	r3, [sp, #16]
 8005f22:	4649      	mov	r1, r9
 8005f24:	2300      	movs	r3, #0
 8005f26:	220a      	movs	r2, #10
 8005f28:	4658      	mov	r0, fp
 8005f2a:	f000 fcb1 	bl	8006890 <__multadd>
 8005f2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f30:	4681      	mov	r9, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f000 8172 	beq.w	800621c <_dtoa_r+0xb4c>
 8005f38:	2300      	movs	r3, #0
 8005f3a:	4629      	mov	r1, r5
 8005f3c:	220a      	movs	r2, #10
 8005f3e:	4658      	mov	r0, fp
 8005f40:	f000 fca6 	bl	8006890 <__multadd>
 8005f44:	9b00      	ldr	r3, [sp, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	4605      	mov	r5, r0
 8005f4a:	dc67      	bgt.n	800601c <_dtoa_r+0x94c>
 8005f4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	dc41      	bgt.n	8005fd6 <_dtoa_r+0x906>
 8005f52:	e063      	b.n	800601c <_dtoa_r+0x94c>
 8005f54:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005f56:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005f5a:	e746      	b.n	8005dea <_dtoa_r+0x71a>
 8005f5c:	9b07      	ldr	r3, [sp, #28]
 8005f5e:	1e5c      	subs	r4, r3, #1
 8005f60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f62:	42a3      	cmp	r3, r4
 8005f64:	bfbf      	itttt	lt
 8005f66:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005f68:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005f6a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005f6c:	1ae3      	sublt	r3, r4, r3
 8005f6e:	bfb4      	ite	lt
 8005f70:	18d2      	addlt	r2, r2, r3
 8005f72:	1b1c      	subge	r4, r3, r4
 8005f74:	9b07      	ldr	r3, [sp, #28]
 8005f76:	bfbc      	itt	lt
 8005f78:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005f7a:	2400      	movlt	r4, #0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	bfb5      	itete	lt
 8005f80:	eba8 0603 	sublt.w	r6, r8, r3
 8005f84:	9b07      	ldrge	r3, [sp, #28]
 8005f86:	2300      	movlt	r3, #0
 8005f88:	4646      	movge	r6, r8
 8005f8a:	e730      	b.n	8005dee <_dtoa_r+0x71e>
 8005f8c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005f8e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005f90:	4646      	mov	r6, r8
 8005f92:	e735      	b.n	8005e00 <_dtoa_r+0x730>
 8005f94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f96:	e75c      	b.n	8005e52 <_dtoa_r+0x782>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	e788      	b.n	8005eae <_dtoa_r+0x7de>
 8005f9c:	3fe00000 	.word	0x3fe00000
 8005fa0:	40240000 	.word	0x40240000
 8005fa4:	40140000 	.word	0x40140000
 8005fa8:	9b02      	ldr	r3, [sp, #8]
 8005faa:	e780      	b.n	8005eae <_dtoa_r+0x7de>
 8005fac:	2300      	movs	r3, #0
 8005fae:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fb0:	e782      	b.n	8005eb8 <_dtoa_r+0x7e8>
 8005fb2:	d099      	beq.n	8005ee8 <_dtoa_r+0x818>
 8005fb4:	9a08      	ldr	r2, [sp, #32]
 8005fb6:	331c      	adds	r3, #28
 8005fb8:	441a      	add	r2, r3
 8005fba:	4498      	add	r8, r3
 8005fbc:	441e      	add	r6, r3
 8005fbe:	9208      	str	r2, [sp, #32]
 8005fc0:	e792      	b.n	8005ee8 <_dtoa_r+0x818>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	e7f6      	b.n	8005fb4 <_dtoa_r+0x8e4>
 8005fc6:	9b07      	ldr	r3, [sp, #28]
 8005fc8:	9704      	str	r7, [sp, #16]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	dc20      	bgt.n	8006010 <_dtoa_r+0x940>
 8005fce:	9300      	str	r3, [sp, #0]
 8005fd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	dd1e      	ble.n	8006014 <_dtoa_r+0x944>
 8005fd6:	9b00      	ldr	r3, [sp, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f47f aec0 	bne.w	8005d5e <_dtoa_r+0x68e>
 8005fde:	4621      	mov	r1, r4
 8005fe0:	2205      	movs	r2, #5
 8005fe2:	4658      	mov	r0, fp
 8005fe4:	f000 fc54 	bl	8006890 <__multadd>
 8005fe8:	4601      	mov	r1, r0
 8005fea:	4604      	mov	r4, r0
 8005fec:	4648      	mov	r0, r9
 8005fee:	f000 fe67 	bl	8006cc0 <__mcmp>
 8005ff2:	2800      	cmp	r0, #0
 8005ff4:	f77f aeb3 	ble.w	8005d5e <_dtoa_r+0x68e>
 8005ff8:	4656      	mov	r6, sl
 8005ffa:	2331      	movs	r3, #49	@ 0x31
 8005ffc:	f806 3b01 	strb.w	r3, [r6], #1
 8006000:	9b04      	ldr	r3, [sp, #16]
 8006002:	3301      	adds	r3, #1
 8006004:	9304      	str	r3, [sp, #16]
 8006006:	e6ae      	b.n	8005d66 <_dtoa_r+0x696>
 8006008:	9c07      	ldr	r4, [sp, #28]
 800600a:	9704      	str	r7, [sp, #16]
 800600c:	4625      	mov	r5, r4
 800600e:	e7f3      	b.n	8005ff8 <_dtoa_r+0x928>
 8006010:	9b07      	ldr	r3, [sp, #28]
 8006012:	9300      	str	r3, [sp, #0]
 8006014:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006016:	2b00      	cmp	r3, #0
 8006018:	f000 8104 	beq.w	8006224 <_dtoa_r+0xb54>
 800601c:	2e00      	cmp	r6, #0
 800601e:	dd05      	ble.n	800602c <_dtoa_r+0x95c>
 8006020:	4629      	mov	r1, r5
 8006022:	4632      	mov	r2, r6
 8006024:	4658      	mov	r0, fp
 8006026:	f000 fddf 	bl	8006be8 <__lshift>
 800602a:	4605      	mov	r5, r0
 800602c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800602e:	2b00      	cmp	r3, #0
 8006030:	d05a      	beq.n	80060e8 <_dtoa_r+0xa18>
 8006032:	6869      	ldr	r1, [r5, #4]
 8006034:	4658      	mov	r0, fp
 8006036:	f000 fbc9 	bl	80067cc <_Balloc>
 800603a:	4606      	mov	r6, r0
 800603c:	b928      	cbnz	r0, 800604a <_dtoa_r+0x97a>
 800603e:	4b84      	ldr	r3, [pc, #528]	@ (8006250 <_dtoa_r+0xb80>)
 8006040:	4602      	mov	r2, r0
 8006042:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006046:	f7ff bb5a 	b.w	80056fe <_dtoa_r+0x2e>
 800604a:	692a      	ldr	r2, [r5, #16]
 800604c:	3202      	adds	r2, #2
 800604e:	0092      	lsls	r2, r2, #2
 8006050:	f105 010c 	add.w	r1, r5, #12
 8006054:	300c      	adds	r0, #12
 8006056:	f001 f81d 	bl	8007094 <memcpy>
 800605a:	2201      	movs	r2, #1
 800605c:	4631      	mov	r1, r6
 800605e:	4658      	mov	r0, fp
 8006060:	f000 fdc2 	bl	8006be8 <__lshift>
 8006064:	f10a 0301 	add.w	r3, sl, #1
 8006068:	9307      	str	r3, [sp, #28]
 800606a:	9b00      	ldr	r3, [sp, #0]
 800606c:	4453      	add	r3, sl
 800606e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006070:	9b02      	ldr	r3, [sp, #8]
 8006072:	f003 0301 	and.w	r3, r3, #1
 8006076:	462f      	mov	r7, r5
 8006078:	930a      	str	r3, [sp, #40]	@ 0x28
 800607a:	4605      	mov	r5, r0
 800607c:	9b07      	ldr	r3, [sp, #28]
 800607e:	4621      	mov	r1, r4
 8006080:	3b01      	subs	r3, #1
 8006082:	4648      	mov	r0, r9
 8006084:	9300      	str	r3, [sp, #0]
 8006086:	f7ff fa98 	bl	80055ba <quorem>
 800608a:	4639      	mov	r1, r7
 800608c:	9002      	str	r0, [sp, #8]
 800608e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006092:	4648      	mov	r0, r9
 8006094:	f000 fe14 	bl	8006cc0 <__mcmp>
 8006098:	462a      	mov	r2, r5
 800609a:	9008      	str	r0, [sp, #32]
 800609c:	4621      	mov	r1, r4
 800609e:	4658      	mov	r0, fp
 80060a0:	f000 fe2a 	bl	8006cf8 <__mdiff>
 80060a4:	68c2      	ldr	r2, [r0, #12]
 80060a6:	4606      	mov	r6, r0
 80060a8:	bb02      	cbnz	r2, 80060ec <_dtoa_r+0xa1c>
 80060aa:	4601      	mov	r1, r0
 80060ac:	4648      	mov	r0, r9
 80060ae:	f000 fe07 	bl	8006cc0 <__mcmp>
 80060b2:	4602      	mov	r2, r0
 80060b4:	4631      	mov	r1, r6
 80060b6:	4658      	mov	r0, fp
 80060b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80060ba:	f000 fbc7 	bl	800684c <_Bfree>
 80060be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80060c2:	9e07      	ldr	r6, [sp, #28]
 80060c4:	ea43 0102 	orr.w	r1, r3, r2
 80060c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060ca:	4319      	orrs	r1, r3
 80060cc:	d110      	bne.n	80060f0 <_dtoa_r+0xa20>
 80060ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80060d2:	d029      	beq.n	8006128 <_dtoa_r+0xa58>
 80060d4:	9b08      	ldr	r3, [sp, #32]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	dd02      	ble.n	80060e0 <_dtoa_r+0xa10>
 80060da:	9b02      	ldr	r3, [sp, #8]
 80060dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80060e0:	9b00      	ldr	r3, [sp, #0]
 80060e2:	f883 8000 	strb.w	r8, [r3]
 80060e6:	e63f      	b.n	8005d68 <_dtoa_r+0x698>
 80060e8:	4628      	mov	r0, r5
 80060ea:	e7bb      	b.n	8006064 <_dtoa_r+0x994>
 80060ec:	2201      	movs	r2, #1
 80060ee:	e7e1      	b.n	80060b4 <_dtoa_r+0x9e4>
 80060f0:	9b08      	ldr	r3, [sp, #32]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	db04      	blt.n	8006100 <_dtoa_r+0xa30>
 80060f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80060f8:	430b      	orrs	r3, r1
 80060fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80060fc:	430b      	orrs	r3, r1
 80060fe:	d120      	bne.n	8006142 <_dtoa_r+0xa72>
 8006100:	2a00      	cmp	r2, #0
 8006102:	dded      	ble.n	80060e0 <_dtoa_r+0xa10>
 8006104:	4649      	mov	r1, r9
 8006106:	2201      	movs	r2, #1
 8006108:	4658      	mov	r0, fp
 800610a:	f000 fd6d 	bl	8006be8 <__lshift>
 800610e:	4621      	mov	r1, r4
 8006110:	4681      	mov	r9, r0
 8006112:	f000 fdd5 	bl	8006cc0 <__mcmp>
 8006116:	2800      	cmp	r0, #0
 8006118:	dc03      	bgt.n	8006122 <_dtoa_r+0xa52>
 800611a:	d1e1      	bne.n	80060e0 <_dtoa_r+0xa10>
 800611c:	f018 0f01 	tst.w	r8, #1
 8006120:	d0de      	beq.n	80060e0 <_dtoa_r+0xa10>
 8006122:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006126:	d1d8      	bne.n	80060da <_dtoa_r+0xa0a>
 8006128:	9a00      	ldr	r2, [sp, #0]
 800612a:	2339      	movs	r3, #57	@ 0x39
 800612c:	7013      	strb	r3, [r2, #0]
 800612e:	4633      	mov	r3, r6
 8006130:	461e      	mov	r6, r3
 8006132:	3b01      	subs	r3, #1
 8006134:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006138:	2a39      	cmp	r2, #57	@ 0x39
 800613a:	d052      	beq.n	80061e2 <_dtoa_r+0xb12>
 800613c:	3201      	adds	r2, #1
 800613e:	701a      	strb	r2, [r3, #0]
 8006140:	e612      	b.n	8005d68 <_dtoa_r+0x698>
 8006142:	2a00      	cmp	r2, #0
 8006144:	dd07      	ble.n	8006156 <_dtoa_r+0xa86>
 8006146:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800614a:	d0ed      	beq.n	8006128 <_dtoa_r+0xa58>
 800614c:	9a00      	ldr	r2, [sp, #0]
 800614e:	f108 0301 	add.w	r3, r8, #1
 8006152:	7013      	strb	r3, [r2, #0]
 8006154:	e608      	b.n	8005d68 <_dtoa_r+0x698>
 8006156:	9b07      	ldr	r3, [sp, #28]
 8006158:	9a07      	ldr	r2, [sp, #28]
 800615a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800615e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006160:	4293      	cmp	r3, r2
 8006162:	d028      	beq.n	80061b6 <_dtoa_r+0xae6>
 8006164:	4649      	mov	r1, r9
 8006166:	2300      	movs	r3, #0
 8006168:	220a      	movs	r2, #10
 800616a:	4658      	mov	r0, fp
 800616c:	f000 fb90 	bl	8006890 <__multadd>
 8006170:	42af      	cmp	r7, r5
 8006172:	4681      	mov	r9, r0
 8006174:	f04f 0300 	mov.w	r3, #0
 8006178:	f04f 020a 	mov.w	r2, #10
 800617c:	4639      	mov	r1, r7
 800617e:	4658      	mov	r0, fp
 8006180:	d107      	bne.n	8006192 <_dtoa_r+0xac2>
 8006182:	f000 fb85 	bl	8006890 <__multadd>
 8006186:	4607      	mov	r7, r0
 8006188:	4605      	mov	r5, r0
 800618a:	9b07      	ldr	r3, [sp, #28]
 800618c:	3301      	adds	r3, #1
 800618e:	9307      	str	r3, [sp, #28]
 8006190:	e774      	b.n	800607c <_dtoa_r+0x9ac>
 8006192:	f000 fb7d 	bl	8006890 <__multadd>
 8006196:	4629      	mov	r1, r5
 8006198:	4607      	mov	r7, r0
 800619a:	2300      	movs	r3, #0
 800619c:	220a      	movs	r2, #10
 800619e:	4658      	mov	r0, fp
 80061a0:	f000 fb76 	bl	8006890 <__multadd>
 80061a4:	4605      	mov	r5, r0
 80061a6:	e7f0      	b.n	800618a <_dtoa_r+0xaba>
 80061a8:	9b00      	ldr	r3, [sp, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	bfcc      	ite	gt
 80061ae:	461e      	movgt	r6, r3
 80061b0:	2601      	movle	r6, #1
 80061b2:	4456      	add	r6, sl
 80061b4:	2700      	movs	r7, #0
 80061b6:	4649      	mov	r1, r9
 80061b8:	2201      	movs	r2, #1
 80061ba:	4658      	mov	r0, fp
 80061bc:	f000 fd14 	bl	8006be8 <__lshift>
 80061c0:	4621      	mov	r1, r4
 80061c2:	4681      	mov	r9, r0
 80061c4:	f000 fd7c 	bl	8006cc0 <__mcmp>
 80061c8:	2800      	cmp	r0, #0
 80061ca:	dcb0      	bgt.n	800612e <_dtoa_r+0xa5e>
 80061cc:	d102      	bne.n	80061d4 <_dtoa_r+0xb04>
 80061ce:	f018 0f01 	tst.w	r8, #1
 80061d2:	d1ac      	bne.n	800612e <_dtoa_r+0xa5e>
 80061d4:	4633      	mov	r3, r6
 80061d6:	461e      	mov	r6, r3
 80061d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061dc:	2a30      	cmp	r2, #48	@ 0x30
 80061de:	d0fa      	beq.n	80061d6 <_dtoa_r+0xb06>
 80061e0:	e5c2      	b.n	8005d68 <_dtoa_r+0x698>
 80061e2:	459a      	cmp	sl, r3
 80061e4:	d1a4      	bne.n	8006130 <_dtoa_r+0xa60>
 80061e6:	9b04      	ldr	r3, [sp, #16]
 80061e8:	3301      	adds	r3, #1
 80061ea:	9304      	str	r3, [sp, #16]
 80061ec:	2331      	movs	r3, #49	@ 0x31
 80061ee:	f88a 3000 	strb.w	r3, [sl]
 80061f2:	e5b9      	b.n	8005d68 <_dtoa_r+0x698>
 80061f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80061f6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006254 <_dtoa_r+0xb84>
 80061fa:	b11b      	cbz	r3, 8006204 <_dtoa_r+0xb34>
 80061fc:	f10a 0308 	add.w	r3, sl, #8
 8006200:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006202:	6013      	str	r3, [r2, #0]
 8006204:	4650      	mov	r0, sl
 8006206:	b019      	add	sp, #100	@ 0x64
 8006208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800620c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800620e:	2b01      	cmp	r3, #1
 8006210:	f77f ae37 	ble.w	8005e82 <_dtoa_r+0x7b2>
 8006214:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006216:	930a      	str	r3, [sp, #40]	@ 0x28
 8006218:	2001      	movs	r0, #1
 800621a:	e655      	b.n	8005ec8 <_dtoa_r+0x7f8>
 800621c:	9b00      	ldr	r3, [sp, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	f77f aed6 	ble.w	8005fd0 <_dtoa_r+0x900>
 8006224:	4656      	mov	r6, sl
 8006226:	4621      	mov	r1, r4
 8006228:	4648      	mov	r0, r9
 800622a:	f7ff f9c6 	bl	80055ba <quorem>
 800622e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006232:	f806 8b01 	strb.w	r8, [r6], #1
 8006236:	9b00      	ldr	r3, [sp, #0]
 8006238:	eba6 020a 	sub.w	r2, r6, sl
 800623c:	4293      	cmp	r3, r2
 800623e:	ddb3      	ble.n	80061a8 <_dtoa_r+0xad8>
 8006240:	4649      	mov	r1, r9
 8006242:	2300      	movs	r3, #0
 8006244:	220a      	movs	r2, #10
 8006246:	4658      	mov	r0, fp
 8006248:	f000 fb22 	bl	8006890 <__multadd>
 800624c:	4681      	mov	r9, r0
 800624e:	e7ea      	b.n	8006226 <_dtoa_r+0xb56>
 8006250:	080078c8 	.word	0x080078c8
 8006254:	0800784c 	.word	0x0800784c

08006258 <__ssputs_r>:
 8006258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800625c:	688e      	ldr	r6, [r1, #8]
 800625e:	461f      	mov	r7, r3
 8006260:	42be      	cmp	r6, r7
 8006262:	680b      	ldr	r3, [r1, #0]
 8006264:	4682      	mov	sl, r0
 8006266:	460c      	mov	r4, r1
 8006268:	4690      	mov	r8, r2
 800626a:	d82d      	bhi.n	80062c8 <__ssputs_r+0x70>
 800626c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006270:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006274:	d026      	beq.n	80062c4 <__ssputs_r+0x6c>
 8006276:	6965      	ldr	r5, [r4, #20]
 8006278:	6909      	ldr	r1, [r1, #16]
 800627a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800627e:	eba3 0901 	sub.w	r9, r3, r1
 8006282:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006286:	1c7b      	adds	r3, r7, #1
 8006288:	444b      	add	r3, r9
 800628a:	106d      	asrs	r5, r5, #1
 800628c:	429d      	cmp	r5, r3
 800628e:	bf38      	it	cc
 8006290:	461d      	movcc	r5, r3
 8006292:	0553      	lsls	r3, r2, #21
 8006294:	d527      	bpl.n	80062e6 <__ssputs_r+0x8e>
 8006296:	4629      	mov	r1, r5
 8006298:	f000 f960 	bl	800655c <_malloc_r>
 800629c:	4606      	mov	r6, r0
 800629e:	b360      	cbz	r0, 80062fa <__ssputs_r+0xa2>
 80062a0:	6921      	ldr	r1, [r4, #16]
 80062a2:	464a      	mov	r2, r9
 80062a4:	f000 fef6 	bl	8007094 <memcpy>
 80062a8:	89a3      	ldrh	r3, [r4, #12]
 80062aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80062ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062b2:	81a3      	strh	r3, [r4, #12]
 80062b4:	6126      	str	r6, [r4, #16]
 80062b6:	6165      	str	r5, [r4, #20]
 80062b8:	444e      	add	r6, r9
 80062ba:	eba5 0509 	sub.w	r5, r5, r9
 80062be:	6026      	str	r6, [r4, #0]
 80062c0:	60a5      	str	r5, [r4, #8]
 80062c2:	463e      	mov	r6, r7
 80062c4:	42be      	cmp	r6, r7
 80062c6:	d900      	bls.n	80062ca <__ssputs_r+0x72>
 80062c8:	463e      	mov	r6, r7
 80062ca:	6820      	ldr	r0, [r4, #0]
 80062cc:	4632      	mov	r2, r6
 80062ce:	4641      	mov	r1, r8
 80062d0:	f000 fe6f 	bl	8006fb2 <memmove>
 80062d4:	68a3      	ldr	r3, [r4, #8]
 80062d6:	1b9b      	subs	r3, r3, r6
 80062d8:	60a3      	str	r3, [r4, #8]
 80062da:	6823      	ldr	r3, [r4, #0]
 80062dc:	4433      	add	r3, r6
 80062de:	6023      	str	r3, [r4, #0]
 80062e0:	2000      	movs	r0, #0
 80062e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062e6:	462a      	mov	r2, r5
 80062e8:	f000 fe35 	bl	8006f56 <_realloc_r>
 80062ec:	4606      	mov	r6, r0
 80062ee:	2800      	cmp	r0, #0
 80062f0:	d1e0      	bne.n	80062b4 <__ssputs_r+0x5c>
 80062f2:	6921      	ldr	r1, [r4, #16]
 80062f4:	4650      	mov	r0, sl
 80062f6:	f000 ff0d 	bl	8007114 <_free_r>
 80062fa:	230c      	movs	r3, #12
 80062fc:	f8ca 3000 	str.w	r3, [sl]
 8006300:	89a3      	ldrh	r3, [r4, #12]
 8006302:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006306:	81a3      	strh	r3, [r4, #12]
 8006308:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800630c:	e7e9      	b.n	80062e2 <__ssputs_r+0x8a>
	...

08006310 <_svfiprintf_r>:
 8006310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006314:	4698      	mov	r8, r3
 8006316:	898b      	ldrh	r3, [r1, #12]
 8006318:	061b      	lsls	r3, r3, #24
 800631a:	b09d      	sub	sp, #116	@ 0x74
 800631c:	4607      	mov	r7, r0
 800631e:	460d      	mov	r5, r1
 8006320:	4614      	mov	r4, r2
 8006322:	d510      	bpl.n	8006346 <_svfiprintf_r+0x36>
 8006324:	690b      	ldr	r3, [r1, #16]
 8006326:	b973      	cbnz	r3, 8006346 <_svfiprintf_r+0x36>
 8006328:	2140      	movs	r1, #64	@ 0x40
 800632a:	f000 f917 	bl	800655c <_malloc_r>
 800632e:	6028      	str	r0, [r5, #0]
 8006330:	6128      	str	r0, [r5, #16]
 8006332:	b930      	cbnz	r0, 8006342 <_svfiprintf_r+0x32>
 8006334:	230c      	movs	r3, #12
 8006336:	603b      	str	r3, [r7, #0]
 8006338:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800633c:	b01d      	add	sp, #116	@ 0x74
 800633e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006342:	2340      	movs	r3, #64	@ 0x40
 8006344:	616b      	str	r3, [r5, #20]
 8006346:	2300      	movs	r3, #0
 8006348:	9309      	str	r3, [sp, #36]	@ 0x24
 800634a:	2320      	movs	r3, #32
 800634c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006350:	f8cd 800c 	str.w	r8, [sp, #12]
 8006354:	2330      	movs	r3, #48	@ 0x30
 8006356:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80064f4 <_svfiprintf_r+0x1e4>
 800635a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800635e:	f04f 0901 	mov.w	r9, #1
 8006362:	4623      	mov	r3, r4
 8006364:	469a      	mov	sl, r3
 8006366:	f813 2b01 	ldrb.w	r2, [r3], #1
 800636a:	b10a      	cbz	r2, 8006370 <_svfiprintf_r+0x60>
 800636c:	2a25      	cmp	r2, #37	@ 0x25
 800636e:	d1f9      	bne.n	8006364 <_svfiprintf_r+0x54>
 8006370:	ebba 0b04 	subs.w	fp, sl, r4
 8006374:	d00b      	beq.n	800638e <_svfiprintf_r+0x7e>
 8006376:	465b      	mov	r3, fp
 8006378:	4622      	mov	r2, r4
 800637a:	4629      	mov	r1, r5
 800637c:	4638      	mov	r0, r7
 800637e:	f7ff ff6b 	bl	8006258 <__ssputs_r>
 8006382:	3001      	adds	r0, #1
 8006384:	f000 80a7 	beq.w	80064d6 <_svfiprintf_r+0x1c6>
 8006388:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800638a:	445a      	add	r2, fp
 800638c:	9209      	str	r2, [sp, #36]	@ 0x24
 800638e:	f89a 3000 	ldrb.w	r3, [sl]
 8006392:	2b00      	cmp	r3, #0
 8006394:	f000 809f 	beq.w	80064d6 <_svfiprintf_r+0x1c6>
 8006398:	2300      	movs	r3, #0
 800639a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800639e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063a2:	f10a 0a01 	add.w	sl, sl, #1
 80063a6:	9304      	str	r3, [sp, #16]
 80063a8:	9307      	str	r3, [sp, #28]
 80063aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80063ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80063b0:	4654      	mov	r4, sl
 80063b2:	2205      	movs	r2, #5
 80063b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063b8:	484e      	ldr	r0, [pc, #312]	@ (80064f4 <_svfiprintf_r+0x1e4>)
 80063ba:	f7f9 ff29 	bl	8000210 <memchr>
 80063be:	9a04      	ldr	r2, [sp, #16]
 80063c0:	b9d8      	cbnz	r0, 80063fa <_svfiprintf_r+0xea>
 80063c2:	06d0      	lsls	r0, r2, #27
 80063c4:	bf44      	itt	mi
 80063c6:	2320      	movmi	r3, #32
 80063c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80063cc:	0711      	lsls	r1, r2, #28
 80063ce:	bf44      	itt	mi
 80063d0:	232b      	movmi	r3, #43	@ 0x2b
 80063d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80063d6:	f89a 3000 	ldrb.w	r3, [sl]
 80063da:	2b2a      	cmp	r3, #42	@ 0x2a
 80063dc:	d015      	beq.n	800640a <_svfiprintf_r+0xfa>
 80063de:	9a07      	ldr	r2, [sp, #28]
 80063e0:	4654      	mov	r4, sl
 80063e2:	2000      	movs	r0, #0
 80063e4:	f04f 0c0a 	mov.w	ip, #10
 80063e8:	4621      	mov	r1, r4
 80063ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063ee:	3b30      	subs	r3, #48	@ 0x30
 80063f0:	2b09      	cmp	r3, #9
 80063f2:	d94b      	bls.n	800648c <_svfiprintf_r+0x17c>
 80063f4:	b1b0      	cbz	r0, 8006424 <_svfiprintf_r+0x114>
 80063f6:	9207      	str	r2, [sp, #28]
 80063f8:	e014      	b.n	8006424 <_svfiprintf_r+0x114>
 80063fa:	eba0 0308 	sub.w	r3, r0, r8
 80063fe:	fa09 f303 	lsl.w	r3, r9, r3
 8006402:	4313      	orrs	r3, r2
 8006404:	9304      	str	r3, [sp, #16]
 8006406:	46a2      	mov	sl, r4
 8006408:	e7d2      	b.n	80063b0 <_svfiprintf_r+0xa0>
 800640a:	9b03      	ldr	r3, [sp, #12]
 800640c:	1d19      	adds	r1, r3, #4
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	9103      	str	r1, [sp, #12]
 8006412:	2b00      	cmp	r3, #0
 8006414:	bfbb      	ittet	lt
 8006416:	425b      	neglt	r3, r3
 8006418:	f042 0202 	orrlt.w	r2, r2, #2
 800641c:	9307      	strge	r3, [sp, #28]
 800641e:	9307      	strlt	r3, [sp, #28]
 8006420:	bfb8      	it	lt
 8006422:	9204      	strlt	r2, [sp, #16]
 8006424:	7823      	ldrb	r3, [r4, #0]
 8006426:	2b2e      	cmp	r3, #46	@ 0x2e
 8006428:	d10a      	bne.n	8006440 <_svfiprintf_r+0x130>
 800642a:	7863      	ldrb	r3, [r4, #1]
 800642c:	2b2a      	cmp	r3, #42	@ 0x2a
 800642e:	d132      	bne.n	8006496 <_svfiprintf_r+0x186>
 8006430:	9b03      	ldr	r3, [sp, #12]
 8006432:	1d1a      	adds	r2, r3, #4
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	9203      	str	r2, [sp, #12]
 8006438:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800643c:	3402      	adds	r4, #2
 800643e:	9305      	str	r3, [sp, #20]
 8006440:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006504 <_svfiprintf_r+0x1f4>
 8006444:	7821      	ldrb	r1, [r4, #0]
 8006446:	2203      	movs	r2, #3
 8006448:	4650      	mov	r0, sl
 800644a:	f7f9 fee1 	bl	8000210 <memchr>
 800644e:	b138      	cbz	r0, 8006460 <_svfiprintf_r+0x150>
 8006450:	9b04      	ldr	r3, [sp, #16]
 8006452:	eba0 000a 	sub.w	r0, r0, sl
 8006456:	2240      	movs	r2, #64	@ 0x40
 8006458:	4082      	lsls	r2, r0
 800645a:	4313      	orrs	r3, r2
 800645c:	3401      	adds	r4, #1
 800645e:	9304      	str	r3, [sp, #16]
 8006460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006464:	4824      	ldr	r0, [pc, #144]	@ (80064f8 <_svfiprintf_r+0x1e8>)
 8006466:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800646a:	2206      	movs	r2, #6
 800646c:	f7f9 fed0 	bl	8000210 <memchr>
 8006470:	2800      	cmp	r0, #0
 8006472:	d036      	beq.n	80064e2 <_svfiprintf_r+0x1d2>
 8006474:	4b21      	ldr	r3, [pc, #132]	@ (80064fc <_svfiprintf_r+0x1ec>)
 8006476:	bb1b      	cbnz	r3, 80064c0 <_svfiprintf_r+0x1b0>
 8006478:	9b03      	ldr	r3, [sp, #12]
 800647a:	3307      	adds	r3, #7
 800647c:	f023 0307 	bic.w	r3, r3, #7
 8006480:	3308      	adds	r3, #8
 8006482:	9303      	str	r3, [sp, #12]
 8006484:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006486:	4433      	add	r3, r6
 8006488:	9309      	str	r3, [sp, #36]	@ 0x24
 800648a:	e76a      	b.n	8006362 <_svfiprintf_r+0x52>
 800648c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006490:	460c      	mov	r4, r1
 8006492:	2001      	movs	r0, #1
 8006494:	e7a8      	b.n	80063e8 <_svfiprintf_r+0xd8>
 8006496:	2300      	movs	r3, #0
 8006498:	3401      	adds	r4, #1
 800649a:	9305      	str	r3, [sp, #20]
 800649c:	4619      	mov	r1, r3
 800649e:	f04f 0c0a 	mov.w	ip, #10
 80064a2:	4620      	mov	r0, r4
 80064a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064a8:	3a30      	subs	r2, #48	@ 0x30
 80064aa:	2a09      	cmp	r2, #9
 80064ac:	d903      	bls.n	80064b6 <_svfiprintf_r+0x1a6>
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d0c6      	beq.n	8006440 <_svfiprintf_r+0x130>
 80064b2:	9105      	str	r1, [sp, #20]
 80064b4:	e7c4      	b.n	8006440 <_svfiprintf_r+0x130>
 80064b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80064ba:	4604      	mov	r4, r0
 80064bc:	2301      	movs	r3, #1
 80064be:	e7f0      	b.n	80064a2 <_svfiprintf_r+0x192>
 80064c0:	ab03      	add	r3, sp, #12
 80064c2:	9300      	str	r3, [sp, #0]
 80064c4:	462a      	mov	r2, r5
 80064c6:	4b0e      	ldr	r3, [pc, #56]	@ (8006500 <_svfiprintf_r+0x1f0>)
 80064c8:	a904      	add	r1, sp, #16
 80064ca:	4638      	mov	r0, r7
 80064cc:	f7fe fba2 	bl	8004c14 <_printf_float>
 80064d0:	1c42      	adds	r2, r0, #1
 80064d2:	4606      	mov	r6, r0
 80064d4:	d1d6      	bne.n	8006484 <_svfiprintf_r+0x174>
 80064d6:	89ab      	ldrh	r3, [r5, #12]
 80064d8:	065b      	lsls	r3, r3, #25
 80064da:	f53f af2d 	bmi.w	8006338 <_svfiprintf_r+0x28>
 80064de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80064e0:	e72c      	b.n	800633c <_svfiprintf_r+0x2c>
 80064e2:	ab03      	add	r3, sp, #12
 80064e4:	9300      	str	r3, [sp, #0]
 80064e6:	462a      	mov	r2, r5
 80064e8:	4b05      	ldr	r3, [pc, #20]	@ (8006500 <_svfiprintf_r+0x1f0>)
 80064ea:	a904      	add	r1, sp, #16
 80064ec:	4638      	mov	r0, r7
 80064ee:	f7fe fe29 	bl	8005144 <_printf_i>
 80064f2:	e7ed      	b.n	80064d0 <_svfiprintf_r+0x1c0>
 80064f4:	080078d9 	.word	0x080078d9
 80064f8:	080078e3 	.word	0x080078e3
 80064fc:	08004c15 	.word	0x08004c15
 8006500:	08006259 	.word	0x08006259
 8006504:	080078df 	.word	0x080078df

08006508 <malloc>:
 8006508:	4b02      	ldr	r3, [pc, #8]	@ (8006514 <malloc+0xc>)
 800650a:	4601      	mov	r1, r0
 800650c:	6818      	ldr	r0, [r3, #0]
 800650e:	f000 b825 	b.w	800655c <_malloc_r>
 8006512:	bf00      	nop
 8006514:	20000018 	.word	0x20000018

08006518 <sbrk_aligned>:
 8006518:	b570      	push	{r4, r5, r6, lr}
 800651a:	4e0f      	ldr	r6, [pc, #60]	@ (8006558 <sbrk_aligned+0x40>)
 800651c:	460c      	mov	r4, r1
 800651e:	6831      	ldr	r1, [r6, #0]
 8006520:	4605      	mov	r5, r0
 8006522:	b911      	cbnz	r1, 800652a <sbrk_aligned+0x12>
 8006524:	f000 fd94 	bl	8007050 <_sbrk_r>
 8006528:	6030      	str	r0, [r6, #0]
 800652a:	4621      	mov	r1, r4
 800652c:	4628      	mov	r0, r5
 800652e:	f000 fd8f 	bl	8007050 <_sbrk_r>
 8006532:	1c43      	adds	r3, r0, #1
 8006534:	d103      	bne.n	800653e <sbrk_aligned+0x26>
 8006536:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800653a:	4620      	mov	r0, r4
 800653c:	bd70      	pop	{r4, r5, r6, pc}
 800653e:	1cc4      	adds	r4, r0, #3
 8006540:	f024 0403 	bic.w	r4, r4, #3
 8006544:	42a0      	cmp	r0, r4
 8006546:	d0f8      	beq.n	800653a <sbrk_aligned+0x22>
 8006548:	1a21      	subs	r1, r4, r0
 800654a:	4628      	mov	r0, r5
 800654c:	f000 fd80 	bl	8007050 <_sbrk_r>
 8006550:	3001      	adds	r0, #1
 8006552:	d1f2      	bne.n	800653a <sbrk_aligned+0x22>
 8006554:	e7ef      	b.n	8006536 <sbrk_aligned+0x1e>
 8006556:	bf00      	nop
 8006558:	200004b0 	.word	0x200004b0

0800655c <_malloc_r>:
 800655c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006560:	1ccd      	adds	r5, r1, #3
 8006562:	f025 0503 	bic.w	r5, r5, #3
 8006566:	3508      	adds	r5, #8
 8006568:	2d0c      	cmp	r5, #12
 800656a:	bf38      	it	cc
 800656c:	250c      	movcc	r5, #12
 800656e:	2d00      	cmp	r5, #0
 8006570:	4606      	mov	r6, r0
 8006572:	db01      	blt.n	8006578 <_malloc_r+0x1c>
 8006574:	42a9      	cmp	r1, r5
 8006576:	d904      	bls.n	8006582 <_malloc_r+0x26>
 8006578:	230c      	movs	r3, #12
 800657a:	6033      	str	r3, [r6, #0]
 800657c:	2000      	movs	r0, #0
 800657e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006582:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006658 <_malloc_r+0xfc>
 8006586:	f000 f915 	bl	80067b4 <__malloc_lock>
 800658a:	f8d8 3000 	ldr.w	r3, [r8]
 800658e:	461c      	mov	r4, r3
 8006590:	bb44      	cbnz	r4, 80065e4 <_malloc_r+0x88>
 8006592:	4629      	mov	r1, r5
 8006594:	4630      	mov	r0, r6
 8006596:	f7ff ffbf 	bl	8006518 <sbrk_aligned>
 800659a:	1c43      	adds	r3, r0, #1
 800659c:	4604      	mov	r4, r0
 800659e:	d158      	bne.n	8006652 <_malloc_r+0xf6>
 80065a0:	f8d8 4000 	ldr.w	r4, [r8]
 80065a4:	4627      	mov	r7, r4
 80065a6:	2f00      	cmp	r7, #0
 80065a8:	d143      	bne.n	8006632 <_malloc_r+0xd6>
 80065aa:	2c00      	cmp	r4, #0
 80065ac:	d04b      	beq.n	8006646 <_malloc_r+0xea>
 80065ae:	6823      	ldr	r3, [r4, #0]
 80065b0:	4639      	mov	r1, r7
 80065b2:	4630      	mov	r0, r6
 80065b4:	eb04 0903 	add.w	r9, r4, r3
 80065b8:	f000 fd4a 	bl	8007050 <_sbrk_r>
 80065bc:	4581      	cmp	r9, r0
 80065be:	d142      	bne.n	8006646 <_malloc_r+0xea>
 80065c0:	6821      	ldr	r1, [r4, #0]
 80065c2:	1a6d      	subs	r5, r5, r1
 80065c4:	4629      	mov	r1, r5
 80065c6:	4630      	mov	r0, r6
 80065c8:	f7ff ffa6 	bl	8006518 <sbrk_aligned>
 80065cc:	3001      	adds	r0, #1
 80065ce:	d03a      	beq.n	8006646 <_malloc_r+0xea>
 80065d0:	6823      	ldr	r3, [r4, #0]
 80065d2:	442b      	add	r3, r5
 80065d4:	6023      	str	r3, [r4, #0]
 80065d6:	f8d8 3000 	ldr.w	r3, [r8]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	bb62      	cbnz	r2, 8006638 <_malloc_r+0xdc>
 80065de:	f8c8 7000 	str.w	r7, [r8]
 80065e2:	e00f      	b.n	8006604 <_malloc_r+0xa8>
 80065e4:	6822      	ldr	r2, [r4, #0]
 80065e6:	1b52      	subs	r2, r2, r5
 80065e8:	d420      	bmi.n	800662c <_malloc_r+0xd0>
 80065ea:	2a0b      	cmp	r2, #11
 80065ec:	d917      	bls.n	800661e <_malloc_r+0xc2>
 80065ee:	1961      	adds	r1, r4, r5
 80065f0:	42a3      	cmp	r3, r4
 80065f2:	6025      	str	r5, [r4, #0]
 80065f4:	bf18      	it	ne
 80065f6:	6059      	strne	r1, [r3, #4]
 80065f8:	6863      	ldr	r3, [r4, #4]
 80065fa:	bf08      	it	eq
 80065fc:	f8c8 1000 	streq.w	r1, [r8]
 8006600:	5162      	str	r2, [r4, r5]
 8006602:	604b      	str	r3, [r1, #4]
 8006604:	4630      	mov	r0, r6
 8006606:	f000 f8db 	bl	80067c0 <__malloc_unlock>
 800660a:	f104 000b 	add.w	r0, r4, #11
 800660e:	1d23      	adds	r3, r4, #4
 8006610:	f020 0007 	bic.w	r0, r0, #7
 8006614:	1ac2      	subs	r2, r0, r3
 8006616:	bf1c      	itt	ne
 8006618:	1a1b      	subne	r3, r3, r0
 800661a:	50a3      	strne	r3, [r4, r2]
 800661c:	e7af      	b.n	800657e <_malloc_r+0x22>
 800661e:	6862      	ldr	r2, [r4, #4]
 8006620:	42a3      	cmp	r3, r4
 8006622:	bf0c      	ite	eq
 8006624:	f8c8 2000 	streq.w	r2, [r8]
 8006628:	605a      	strne	r2, [r3, #4]
 800662a:	e7eb      	b.n	8006604 <_malloc_r+0xa8>
 800662c:	4623      	mov	r3, r4
 800662e:	6864      	ldr	r4, [r4, #4]
 8006630:	e7ae      	b.n	8006590 <_malloc_r+0x34>
 8006632:	463c      	mov	r4, r7
 8006634:	687f      	ldr	r7, [r7, #4]
 8006636:	e7b6      	b.n	80065a6 <_malloc_r+0x4a>
 8006638:	461a      	mov	r2, r3
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	42a3      	cmp	r3, r4
 800663e:	d1fb      	bne.n	8006638 <_malloc_r+0xdc>
 8006640:	2300      	movs	r3, #0
 8006642:	6053      	str	r3, [r2, #4]
 8006644:	e7de      	b.n	8006604 <_malloc_r+0xa8>
 8006646:	230c      	movs	r3, #12
 8006648:	6033      	str	r3, [r6, #0]
 800664a:	4630      	mov	r0, r6
 800664c:	f000 f8b8 	bl	80067c0 <__malloc_unlock>
 8006650:	e794      	b.n	800657c <_malloc_r+0x20>
 8006652:	6005      	str	r5, [r0, #0]
 8006654:	e7d6      	b.n	8006604 <_malloc_r+0xa8>
 8006656:	bf00      	nop
 8006658:	200004b4 	.word	0x200004b4

0800665c <__sflush_r>:
 800665c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006664:	0716      	lsls	r6, r2, #28
 8006666:	4605      	mov	r5, r0
 8006668:	460c      	mov	r4, r1
 800666a:	d454      	bmi.n	8006716 <__sflush_r+0xba>
 800666c:	684b      	ldr	r3, [r1, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	dc02      	bgt.n	8006678 <__sflush_r+0x1c>
 8006672:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006674:	2b00      	cmp	r3, #0
 8006676:	dd48      	ble.n	800670a <__sflush_r+0xae>
 8006678:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800667a:	2e00      	cmp	r6, #0
 800667c:	d045      	beq.n	800670a <__sflush_r+0xae>
 800667e:	2300      	movs	r3, #0
 8006680:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006684:	682f      	ldr	r7, [r5, #0]
 8006686:	6a21      	ldr	r1, [r4, #32]
 8006688:	602b      	str	r3, [r5, #0]
 800668a:	d030      	beq.n	80066ee <__sflush_r+0x92>
 800668c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800668e:	89a3      	ldrh	r3, [r4, #12]
 8006690:	0759      	lsls	r1, r3, #29
 8006692:	d505      	bpl.n	80066a0 <__sflush_r+0x44>
 8006694:	6863      	ldr	r3, [r4, #4]
 8006696:	1ad2      	subs	r2, r2, r3
 8006698:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800669a:	b10b      	cbz	r3, 80066a0 <__sflush_r+0x44>
 800669c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800669e:	1ad2      	subs	r2, r2, r3
 80066a0:	2300      	movs	r3, #0
 80066a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80066a4:	6a21      	ldr	r1, [r4, #32]
 80066a6:	4628      	mov	r0, r5
 80066a8:	47b0      	blx	r6
 80066aa:	1c43      	adds	r3, r0, #1
 80066ac:	89a3      	ldrh	r3, [r4, #12]
 80066ae:	d106      	bne.n	80066be <__sflush_r+0x62>
 80066b0:	6829      	ldr	r1, [r5, #0]
 80066b2:	291d      	cmp	r1, #29
 80066b4:	d82b      	bhi.n	800670e <__sflush_r+0xb2>
 80066b6:	4a2a      	ldr	r2, [pc, #168]	@ (8006760 <__sflush_r+0x104>)
 80066b8:	410a      	asrs	r2, r1
 80066ba:	07d6      	lsls	r6, r2, #31
 80066bc:	d427      	bmi.n	800670e <__sflush_r+0xb2>
 80066be:	2200      	movs	r2, #0
 80066c0:	6062      	str	r2, [r4, #4]
 80066c2:	04d9      	lsls	r1, r3, #19
 80066c4:	6922      	ldr	r2, [r4, #16]
 80066c6:	6022      	str	r2, [r4, #0]
 80066c8:	d504      	bpl.n	80066d4 <__sflush_r+0x78>
 80066ca:	1c42      	adds	r2, r0, #1
 80066cc:	d101      	bne.n	80066d2 <__sflush_r+0x76>
 80066ce:	682b      	ldr	r3, [r5, #0]
 80066d0:	b903      	cbnz	r3, 80066d4 <__sflush_r+0x78>
 80066d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80066d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80066d6:	602f      	str	r7, [r5, #0]
 80066d8:	b1b9      	cbz	r1, 800670a <__sflush_r+0xae>
 80066da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80066de:	4299      	cmp	r1, r3
 80066e0:	d002      	beq.n	80066e8 <__sflush_r+0x8c>
 80066e2:	4628      	mov	r0, r5
 80066e4:	f000 fd16 	bl	8007114 <_free_r>
 80066e8:	2300      	movs	r3, #0
 80066ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80066ec:	e00d      	b.n	800670a <__sflush_r+0xae>
 80066ee:	2301      	movs	r3, #1
 80066f0:	4628      	mov	r0, r5
 80066f2:	47b0      	blx	r6
 80066f4:	4602      	mov	r2, r0
 80066f6:	1c50      	adds	r0, r2, #1
 80066f8:	d1c9      	bne.n	800668e <__sflush_r+0x32>
 80066fa:	682b      	ldr	r3, [r5, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d0c6      	beq.n	800668e <__sflush_r+0x32>
 8006700:	2b1d      	cmp	r3, #29
 8006702:	d001      	beq.n	8006708 <__sflush_r+0xac>
 8006704:	2b16      	cmp	r3, #22
 8006706:	d11e      	bne.n	8006746 <__sflush_r+0xea>
 8006708:	602f      	str	r7, [r5, #0]
 800670a:	2000      	movs	r0, #0
 800670c:	e022      	b.n	8006754 <__sflush_r+0xf8>
 800670e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006712:	b21b      	sxth	r3, r3
 8006714:	e01b      	b.n	800674e <__sflush_r+0xf2>
 8006716:	690f      	ldr	r7, [r1, #16]
 8006718:	2f00      	cmp	r7, #0
 800671a:	d0f6      	beq.n	800670a <__sflush_r+0xae>
 800671c:	0793      	lsls	r3, r2, #30
 800671e:	680e      	ldr	r6, [r1, #0]
 8006720:	bf08      	it	eq
 8006722:	694b      	ldreq	r3, [r1, #20]
 8006724:	600f      	str	r7, [r1, #0]
 8006726:	bf18      	it	ne
 8006728:	2300      	movne	r3, #0
 800672a:	eba6 0807 	sub.w	r8, r6, r7
 800672e:	608b      	str	r3, [r1, #8]
 8006730:	f1b8 0f00 	cmp.w	r8, #0
 8006734:	dde9      	ble.n	800670a <__sflush_r+0xae>
 8006736:	6a21      	ldr	r1, [r4, #32]
 8006738:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800673a:	4643      	mov	r3, r8
 800673c:	463a      	mov	r2, r7
 800673e:	4628      	mov	r0, r5
 8006740:	47b0      	blx	r6
 8006742:	2800      	cmp	r0, #0
 8006744:	dc08      	bgt.n	8006758 <__sflush_r+0xfc>
 8006746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800674a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800674e:	81a3      	strh	r3, [r4, #12]
 8006750:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006758:	4407      	add	r7, r0
 800675a:	eba8 0800 	sub.w	r8, r8, r0
 800675e:	e7e7      	b.n	8006730 <__sflush_r+0xd4>
 8006760:	dfbffffe 	.word	0xdfbffffe

08006764 <_fflush_r>:
 8006764:	b538      	push	{r3, r4, r5, lr}
 8006766:	690b      	ldr	r3, [r1, #16]
 8006768:	4605      	mov	r5, r0
 800676a:	460c      	mov	r4, r1
 800676c:	b913      	cbnz	r3, 8006774 <_fflush_r+0x10>
 800676e:	2500      	movs	r5, #0
 8006770:	4628      	mov	r0, r5
 8006772:	bd38      	pop	{r3, r4, r5, pc}
 8006774:	b118      	cbz	r0, 800677e <_fflush_r+0x1a>
 8006776:	6a03      	ldr	r3, [r0, #32]
 8006778:	b90b      	cbnz	r3, 800677e <_fflush_r+0x1a>
 800677a:	f7fe feaf 	bl	80054dc <__sinit>
 800677e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d0f3      	beq.n	800676e <_fflush_r+0xa>
 8006786:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006788:	07d0      	lsls	r0, r2, #31
 800678a:	d404      	bmi.n	8006796 <_fflush_r+0x32>
 800678c:	0599      	lsls	r1, r3, #22
 800678e:	d402      	bmi.n	8006796 <_fflush_r+0x32>
 8006790:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006792:	f7fe ff10 	bl	80055b6 <__retarget_lock_acquire_recursive>
 8006796:	4628      	mov	r0, r5
 8006798:	4621      	mov	r1, r4
 800679a:	f7ff ff5f 	bl	800665c <__sflush_r>
 800679e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80067a0:	07da      	lsls	r2, r3, #31
 80067a2:	4605      	mov	r5, r0
 80067a4:	d4e4      	bmi.n	8006770 <_fflush_r+0xc>
 80067a6:	89a3      	ldrh	r3, [r4, #12]
 80067a8:	059b      	lsls	r3, r3, #22
 80067aa:	d4e1      	bmi.n	8006770 <_fflush_r+0xc>
 80067ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067ae:	f7fe ff03 	bl	80055b8 <__retarget_lock_release_recursive>
 80067b2:	e7dd      	b.n	8006770 <_fflush_r+0xc>

080067b4 <__malloc_lock>:
 80067b4:	4801      	ldr	r0, [pc, #4]	@ (80067bc <__malloc_lock+0x8>)
 80067b6:	f7fe befe 	b.w	80055b6 <__retarget_lock_acquire_recursive>
 80067ba:	bf00      	nop
 80067bc:	200004ac 	.word	0x200004ac

080067c0 <__malloc_unlock>:
 80067c0:	4801      	ldr	r0, [pc, #4]	@ (80067c8 <__malloc_unlock+0x8>)
 80067c2:	f7fe bef9 	b.w	80055b8 <__retarget_lock_release_recursive>
 80067c6:	bf00      	nop
 80067c8:	200004ac 	.word	0x200004ac

080067cc <_Balloc>:
 80067cc:	b570      	push	{r4, r5, r6, lr}
 80067ce:	69c6      	ldr	r6, [r0, #28]
 80067d0:	4604      	mov	r4, r0
 80067d2:	460d      	mov	r5, r1
 80067d4:	b976      	cbnz	r6, 80067f4 <_Balloc+0x28>
 80067d6:	2010      	movs	r0, #16
 80067d8:	f7ff fe96 	bl	8006508 <malloc>
 80067dc:	4602      	mov	r2, r0
 80067de:	61e0      	str	r0, [r4, #28]
 80067e0:	b920      	cbnz	r0, 80067ec <_Balloc+0x20>
 80067e2:	4b18      	ldr	r3, [pc, #96]	@ (8006844 <_Balloc+0x78>)
 80067e4:	4818      	ldr	r0, [pc, #96]	@ (8006848 <_Balloc+0x7c>)
 80067e6:	216b      	movs	r1, #107	@ 0x6b
 80067e8:	f000 fc62 	bl	80070b0 <__assert_func>
 80067ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80067f0:	6006      	str	r6, [r0, #0]
 80067f2:	60c6      	str	r6, [r0, #12]
 80067f4:	69e6      	ldr	r6, [r4, #28]
 80067f6:	68f3      	ldr	r3, [r6, #12]
 80067f8:	b183      	cbz	r3, 800681c <_Balloc+0x50>
 80067fa:	69e3      	ldr	r3, [r4, #28]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006802:	b9b8      	cbnz	r0, 8006834 <_Balloc+0x68>
 8006804:	2101      	movs	r1, #1
 8006806:	fa01 f605 	lsl.w	r6, r1, r5
 800680a:	1d72      	adds	r2, r6, #5
 800680c:	0092      	lsls	r2, r2, #2
 800680e:	4620      	mov	r0, r4
 8006810:	f000 fc6c 	bl	80070ec <_calloc_r>
 8006814:	b160      	cbz	r0, 8006830 <_Balloc+0x64>
 8006816:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800681a:	e00e      	b.n	800683a <_Balloc+0x6e>
 800681c:	2221      	movs	r2, #33	@ 0x21
 800681e:	2104      	movs	r1, #4
 8006820:	4620      	mov	r0, r4
 8006822:	f000 fc63 	bl	80070ec <_calloc_r>
 8006826:	69e3      	ldr	r3, [r4, #28]
 8006828:	60f0      	str	r0, [r6, #12]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1e4      	bne.n	80067fa <_Balloc+0x2e>
 8006830:	2000      	movs	r0, #0
 8006832:	bd70      	pop	{r4, r5, r6, pc}
 8006834:	6802      	ldr	r2, [r0, #0]
 8006836:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800683a:	2300      	movs	r3, #0
 800683c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006840:	e7f7      	b.n	8006832 <_Balloc+0x66>
 8006842:	bf00      	nop
 8006844:	08007859 	.word	0x08007859
 8006848:	080078ea 	.word	0x080078ea

0800684c <_Bfree>:
 800684c:	b570      	push	{r4, r5, r6, lr}
 800684e:	69c6      	ldr	r6, [r0, #28]
 8006850:	4605      	mov	r5, r0
 8006852:	460c      	mov	r4, r1
 8006854:	b976      	cbnz	r6, 8006874 <_Bfree+0x28>
 8006856:	2010      	movs	r0, #16
 8006858:	f7ff fe56 	bl	8006508 <malloc>
 800685c:	4602      	mov	r2, r0
 800685e:	61e8      	str	r0, [r5, #28]
 8006860:	b920      	cbnz	r0, 800686c <_Bfree+0x20>
 8006862:	4b09      	ldr	r3, [pc, #36]	@ (8006888 <_Bfree+0x3c>)
 8006864:	4809      	ldr	r0, [pc, #36]	@ (800688c <_Bfree+0x40>)
 8006866:	218f      	movs	r1, #143	@ 0x8f
 8006868:	f000 fc22 	bl	80070b0 <__assert_func>
 800686c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006870:	6006      	str	r6, [r0, #0]
 8006872:	60c6      	str	r6, [r0, #12]
 8006874:	b13c      	cbz	r4, 8006886 <_Bfree+0x3a>
 8006876:	69eb      	ldr	r3, [r5, #28]
 8006878:	6862      	ldr	r2, [r4, #4]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006880:	6021      	str	r1, [r4, #0]
 8006882:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006886:	bd70      	pop	{r4, r5, r6, pc}
 8006888:	08007859 	.word	0x08007859
 800688c:	080078ea 	.word	0x080078ea

08006890 <__multadd>:
 8006890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006894:	690d      	ldr	r5, [r1, #16]
 8006896:	4607      	mov	r7, r0
 8006898:	460c      	mov	r4, r1
 800689a:	461e      	mov	r6, r3
 800689c:	f101 0c14 	add.w	ip, r1, #20
 80068a0:	2000      	movs	r0, #0
 80068a2:	f8dc 3000 	ldr.w	r3, [ip]
 80068a6:	b299      	uxth	r1, r3
 80068a8:	fb02 6101 	mla	r1, r2, r1, r6
 80068ac:	0c1e      	lsrs	r6, r3, #16
 80068ae:	0c0b      	lsrs	r3, r1, #16
 80068b0:	fb02 3306 	mla	r3, r2, r6, r3
 80068b4:	b289      	uxth	r1, r1
 80068b6:	3001      	adds	r0, #1
 80068b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80068bc:	4285      	cmp	r5, r0
 80068be:	f84c 1b04 	str.w	r1, [ip], #4
 80068c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80068c6:	dcec      	bgt.n	80068a2 <__multadd+0x12>
 80068c8:	b30e      	cbz	r6, 800690e <__multadd+0x7e>
 80068ca:	68a3      	ldr	r3, [r4, #8]
 80068cc:	42ab      	cmp	r3, r5
 80068ce:	dc19      	bgt.n	8006904 <__multadd+0x74>
 80068d0:	6861      	ldr	r1, [r4, #4]
 80068d2:	4638      	mov	r0, r7
 80068d4:	3101      	adds	r1, #1
 80068d6:	f7ff ff79 	bl	80067cc <_Balloc>
 80068da:	4680      	mov	r8, r0
 80068dc:	b928      	cbnz	r0, 80068ea <__multadd+0x5a>
 80068de:	4602      	mov	r2, r0
 80068e0:	4b0c      	ldr	r3, [pc, #48]	@ (8006914 <__multadd+0x84>)
 80068e2:	480d      	ldr	r0, [pc, #52]	@ (8006918 <__multadd+0x88>)
 80068e4:	21ba      	movs	r1, #186	@ 0xba
 80068e6:	f000 fbe3 	bl	80070b0 <__assert_func>
 80068ea:	6922      	ldr	r2, [r4, #16]
 80068ec:	3202      	adds	r2, #2
 80068ee:	f104 010c 	add.w	r1, r4, #12
 80068f2:	0092      	lsls	r2, r2, #2
 80068f4:	300c      	adds	r0, #12
 80068f6:	f000 fbcd 	bl	8007094 <memcpy>
 80068fa:	4621      	mov	r1, r4
 80068fc:	4638      	mov	r0, r7
 80068fe:	f7ff ffa5 	bl	800684c <_Bfree>
 8006902:	4644      	mov	r4, r8
 8006904:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006908:	3501      	adds	r5, #1
 800690a:	615e      	str	r6, [r3, #20]
 800690c:	6125      	str	r5, [r4, #16]
 800690e:	4620      	mov	r0, r4
 8006910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006914:	080078c8 	.word	0x080078c8
 8006918:	080078ea 	.word	0x080078ea

0800691c <__hi0bits>:
 800691c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006920:	4603      	mov	r3, r0
 8006922:	bf36      	itet	cc
 8006924:	0403      	lslcc	r3, r0, #16
 8006926:	2000      	movcs	r0, #0
 8006928:	2010      	movcc	r0, #16
 800692a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800692e:	bf3c      	itt	cc
 8006930:	021b      	lslcc	r3, r3, #8
 8006932:	3008      	addcc	r0, #8
 8006934:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006938:	bf3c      	itt	cc
 800693a:	011b      	lslcc	r3, r3, #4
 800693c:	3004      	addcc	r0, #4
 800693e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006942:	bf3c      	itt	cc
 8006944:	009b      	lslcc	r3, r3, #2
 8006946:	3002      	addcc	r0, #2
 8006948:	2b00      	cmp	r3, #0
 800694a:	db05      	blt.n	8006958 <__hi0bits+0x3c>
 800694c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006950:	f100 0001 	add.w	r0, r0, #1
 8006954:	bf08      	it	eq
 8006956:	2020      	moveq	r0, #32
 8006958:	4770      	bx	lr

0800695a <__lo0bits>:
 800695a:	6803      	ldr	r3, [r0, #0]
 800695c:	4602      	mov	r2, r0
 800695e:	f013 0007 	ands.w	r0, r3, #7
 8006962:	d00b      	beq.n	800697c <__lo0bits+0x22>
 8006964:	07d9      	lsls	r1, r3, #31
 8006966:	d421      	bmi.n	80069ac <__lo0bits+0x52>
 8006968:	0798      	lsls	r0, r3, #30
 800696a:	bf49      	itett	mi
 800696c:	085b      	lsrmi	r3, r3, #1
 800696e:	089b      	lsrpl	r3, r3, #2
 8006970:	2001      	movmi	r0, #1
 8006972:	6013      	strmi	r3, [r2, #0]
 8006974:	bf5c      	itt	pl
 8006976:	6013      	strpl	r3, [r2, #0]
 8006978:	2002      	movpl	r0, #2
 800697a:	4770      	bx	lr
 800697c:	b299      	uxth	r1, r3
 800697e:	b909      	cbnz	r1, 8006984 <__lo0bits+0x2a>
 8006980:	0c1b      	lsrs	r3, r3, #16
 8006982:	2010      	movs	r0, #16
 8006984:	b2d9      	uxtb	r1, r3
 8006986:	b909      	cbnz	r1, 800698c <__lo0bits+0x32>
 8006988:	3008      	adds	r0, #8
 800698a:	0a1b      	lsrs	r3, r3, #8
 800698c:	0719      	lsls	r1, r3, #28
 800698e:	bf04      	itt	eq
 8006990:	091b      	lsreq	r3, r3, #4
 8006992:	3004      	addeq	r0, #4
 8006994:	0799      	lsls	r1, r3, #30
 8006996:	bf04      	itt	eq
 8006998:	089b      	lsreq	r3, r3, #2
 800699a:	3002      	addeq	r0, #2
 800699c:	07d9      	lsls	r1, r3, #31
 800699e:	d403      	bmi.n	80069a8 <__lo0bits+0x4e>
 80069a0:	085b      	lsrs	r3, r3, #1
 80069a2:	f100 0001 	add.w	r0, r0, #1
 80069a6:	d003      	beq.n	80069b0 <__lo0bits+0x56>
 80069a8:	6013      	str	r3, [r2, #0]
 80069aa:	4770      	bx	lr
 80069ac:	2000      	movs	r0, #0
 80069ae:	4770      	bx	lr
 80069b0:	2020      	movs	r0, #32
 80069b2:	4770      	bx	lr

080069b4 <__i2b>:
 80069b4:	b510      	push	{r4, lr}
 80069b6:	460c      	mov	r4, r1
 80069b8:	2101      	movs	r1, #1
 80069ba:	f7ff ff07 	bl	80067cc <_Balloc>
 80069be:	4602      	mov	r2, r0
 80069c0:	b928      	cbnz	r0, 80069ce <__i2b+0x1a>
 80069c2:	4b05      	ldr	r3, [pc, #20]	@ (80069d8 <__i2b+0x24>)
 80069c4:	4805      	ldr	r0, [pc, #20]	@ (80069dc <__i2b+0x28>)
 80069c6:	f240 1145 	movw	r1, #325	@ 0x145
 80069ca:	f000 fb71 	bl	80070b0 <__assert_func>
 80069ce:	2301      	movs	r3, #1
 80069d0:	6144      	str	r4, [r0, #20]
 80069d2:	6103      	str	r3, [r0, #16]
 80069d4:	bd10      	pop	{r4, pc}
 80069d6:	bf00      	nop
 80069d8:	080078c8 	.word	0x080078c8
 80069dc:	080078ea 	.word	0x080078ea

080069e0 <__multiply>:
 80069e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e4:	4614      	mov	r4, r2
 80069e6:	690a      	ldr	r2, [r1, #16]
 80069e8:	6923      	ldr	r3, [r4, #16]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	bfa8      	it	ge
 80069ee:	4623      	movge	r3, r4
 80069f0:	460f      	mov	r7, r1
 80069f2:	bfa4      	itt	ge
 80069f4:	460c      	movge	r4, r1
 80069f6:	461f      	movge	r7, r3
 80069f8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80069fc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006a00:	68a3      	ldr	r3, [r4, #8]
 8006a02:	6861      	ldr	r1, [r4, #4]
 8006a04:	eb0a 0609 	add.w	r6, sl, r9
 8006a08:	42b3      	cmp	r3, r6
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	bfb8      	it	lt
 8006a0e:	3101      	addlt	r1, #1
 8006a10:	f7ff fedc 	bl	80067cc <_Balloc>
 8006a14:	b930      	cbnz	r0, 8006a24 <__multiply+0x44>
 8006a16:	4602      	mov	r2, r0
 8006a18:	4b44      	ldr	r3, [pc, #272]	@ (8006b2c <__multiply+0x14c>)
 8006a1a:	4845      	ldr	r0, [pc, #276]	@ (8006b30 <__multiply+0x150>)
 8006a1c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006a20:	f000 fb46 	bl	80070b0 <__assert_func>
 8006a24:	f100 0514 	add.w	r5, r0, #20
 8006a28:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006a2c:	462b      	mov	r3, r5
 8006a2e:	2200      	movs	r2, #0
 8006a30:	4543      	cmp	r3, r8
 8006a32:	d321      	bcc.n	8006a78 <__multiply+0x98>
 8006a34:	f107 0114 	add.w	r1, r7, #20
 8006a38:	f104 0214 	add.w	r2, r4, #20
 8006a3c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006a40:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006a44:	9302      	str	r3, [sp, #8]
 8006a46:	1b13      	subs	r3, r2, r4
 8006a48:	3b15      	subs	r3, #21
 8006a4a:	f023 0303 	bic.w	r3, r3, #3
 8006a4e:	3304      	adds	r3, #4
 8006a50:	f104 0715 	add.w	r7, r4, #21
 8006a54:	42ba      	cmp	r2, r7
 8006a56:	bf38      	it	cc
 8006a58:	2304      	movcc	r3, #4
 8006a5a:	9301      	str	r3, [sp, #4]
 8006a5c:	9b02      	ldr	r3, [sp, #8]
 8006a5e:	9103      	str	r1, [sp, #12]
 8006a60:	428b      	cmp	r3, r1
 8006a62:	d80c      	bhi.n	8006a7e <__multiply+0x9e>
 8006a64:	2e00      	cmp	r6, #0
 8006a66:	dd03      	ble.n	8006a70 <__multiply+0x90>
 8006a68:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d05b      	beq.n	8006b28 <__multiply+0x148>
 8006a70:	6106      	str	r6, [r0, #16]
 8006a72:	b005      	add	sp, #20
 8006a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a78:	f843 2b04 	str.w	r2, [r3], #4
 8006a7c:	e7d8      	b.n	8006a30 <__multiply+0x50>
 8006a7e:	f8b1 a000 	ldrh.w	sl, [r1]
 8006a82:	f1ba 0f00 	cmp.w	sl, #0
 8006a86:	d024      	beq.n	8006ad2 <__multiply+0xf2>
 8006a88:	f104 0e14 	add.w	lr, r4, #20
 8006a8c:	46a9      	mov	r9, r5
 8006a8e:	f04f 0c00 	mov.w	ip, #0
 8006a92:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006a96:	f8d9 3000 	ldr.w	r3, [r9]
 8006a9a:	fa1f fb87 	uxth.w	fp, r7
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	fb0a 330b 	mla	r3, sl, fp, r3
 8006aa4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006aa8:	f8d9 7000 	ldr.w	r7, [r9]
 8006aac:	4463      	add	r3, ip
 8006aae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006ab2:	fb0a c70b 	mla	r7, sl, fp, ip
 8006ab6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006ac0:	4572      	cmp	r2, lr
 8006ac2:	f849 3b04 	str.w	r3, [r9], #4
 8006ac6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006aca:	d8e2      	bhi.n	8006a92 <__multiply+0xb2>
 8006acc:	9b01      	ldr	r3, [sp, #4]
 8006ace:	f845 c003 	str.w	ip, [r5, r3]
 8006ad2:	9b03      	ldr	r3, [sp, #12]
 8006ad4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006ad8:	3104      	adds	r1, #4
 8006ada:	f1b9 0f00 	cmp.w	r9, #0
 8006ade:	d021      	beq.n	8006b24 <__multiply+0x144>
 8006ae0:	682b      	ldr	r3, [r5, #0]
 8006ae2:	f104 0c14 	add.w	ip, r4, #20
 8006ae6:	46ae      	mov	lr, r5
 8006ae8:	f04f 0a00 	mov.w	sl, #0
 8006aec:	f8bc b000 	ldrh.w	fp, [ip]
 8006af0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006af4:	fb09 770b 	mla	r7, r9, fp, r7
 8006af8:	4457      	add	r7, sl
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006b00:	f84e 3b04 	str.w	r3, [lr], #4
 8006b04:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006b08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b0c:	f8be 3000 	ldrh.w	r3, [lr]
 8006b10:	fb09 330a 	mla	r3, r9, sl, r3
 8006b14:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006b18:	4562      	cmp	r2, ip
 8006b1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b1e:	d8e5      	bhi.n	8006aec <__multiply+0x10c>
 8006b20:	9f01      	ldr	r7, [sp, #4]
 8006b22:	51eb      	str	r3, [r5, r7]
 8006b24:	3504      	adds	r5, #4
 8006b26:	e799      	b.n	8006a5c <__multiply+0x7c>
 8006b28:	3e01      	subs	r6, #1
 8006b2a:	e79b      	b.n	8006a64 <__multiply+0x84>
 8006b2c:	080078c8 	.word	0x080078c8
 8006b30:	080078ea 	.word	0x080078ea

08006b34 <__pow5mult>:
 8006b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b38:	4615      	mov	r5, r2
 8006b3a:	f012 0203 	ands.w	r2, r2, #3
 8006b3e:	4607      	mov	r7, r0
 8006b40:	460e      	mov	r6, r1
 8006b42:	d007      	beq.n	8006b54 <__pow5mult+0x20>
 8006b44:	4c25      	ldr	r4, [pc, #148]	@ (8006bdc <__pow5mult+0xa8>)
 8006b46:	3a01      	subs	r2, #1
 8006b48:	2300      	movs	r3, #0
 8006b4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006b4e:	f7ff fe9f 	bl	8006890 <__multadd>
 8006b52:	4606      	mov	r6, r0
 8006b54:	10ad      	asrs	r5, r5, #2
 8006b56:	d03d      	beq.n	8006bd4 <__pow5mult+0xa0>
 8006b58:	69fc      	ldr	r4, [r7, #28]
 8006b5a:	b97c      	cbnz	r4, 8006b7c <__pow5mult+0x48>
 8006b5c:	2010      	movs	r0, #16
 8006b5e:	f7ff fcd3 	bl	8006508 <malloc>
 8006b62:	4602      	mov	r2, r0
 8006b64:	61f8      	str	r0, [r7, #28]
 8006b66:	b928      	cbnz	r0, 8006b74 <__pow5mult+0x40>
 8006b68:	4b1d      	ldr	r3, [pc, #116]	@ (8006be0 <__pow5mult+0xac>)
 8006b6a:	481e      	ldr	r0, [pc, #120]	@ (8006be4 <__pow5mult+0xb0>)
 8006b6c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006b70:	f000 fa9e 	bl	80070b0 <__assert_func>
 8006b74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b78:	6004      	str	r4, [r0, #0]
 8006b7a:	60c4      	str	r4, [r0, #12]
 8006b7c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006b80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006b84:	b94c      	cbnz	r4, 8006b9a <__pow5mult+0x66>
 8006b86:	f240 2171 	movw	r1, #625	@ 0x271
 8006b8a:	4638      	mov	r0, r7
 8006b8c:	f7ff ff12 	bl	80069b4 <__i2b>
 8006b90:	2300      	movs	r3, #0
 8006b92:	f8c8 0008 	str.w	r0, [r8, #8]
 8006b96:	4604      	mov	r4, r0
 8006b98:	6003      	str	r3, [r0, #0]
 8006b9a:	f04f 0900 	mov.w	r9, #0
 8006b9e:	07eb      	lsls	r3, r5, #31
 8006ba0:	d50a      	bpl.n	8006bb8 <__pow5mult+0x84>
 8006ba2:	4631      	mov	r1, r6
 8006ba4:	4622      	mov	r2, r4
 8006ba6:	4638      	mov	r0, r7
 8006ba8:	f7ff ff1a 	bl	80069e0 <__multiply>
 8006bac:	4631      	mov	r1, r6
 8006bae:	4680      	mov	r8, r0
 8006bb0:	4638      	mov	r0, r7
 8006bb2:	f7ff fe4b 	bl	800684c <_Bfree>
 8006bb6:	4646      	mov	r6, r8
 8006bb8:	106d      	asrs	r5, r5, #1
 8006bba:	d00b      	beq.n	8006bd4 <__pow5mult+0xa0>
 8006bbc:	6820      	ldr	r0, [r4, #0]
 8006bbe:	b938      	cbnz	r0, 8006bd0 <__pow5mult+0x9c>
 8006bc0:	4622      	mov	r2, r4
 8006bc2:	4621      	mov	r1, r4
 8006bc4:	4638      	mov	r0, r7
 8006bc6:	f7ff ff0b 	bl	80069e0 <__multiply>
 8006bca:	6020      	str	r0, [r4, #0]
 8006bcc:	f8c0 9000 	str.w	r9, [r0]
 8006bd0:	4604      	mov	r4, r0
 8006bd2:	e7e4      	b.n	8006b9e <__pow5mult+0x6a>
 8006bd4:	4630      	mov	r0, r6
 8006bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bda:	bf00      	nop
 8006bdc:	08007944 	.word	0x08007944
 8006be0:	08007859 	.word	0x08007859
 8006be4:	080078ea 	.word	0x080078ea

08006be8 <__lshift>:
 8006be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bec:	460c      	mov	r4, r1
 8006bee:	6849      	ldr	r1, [r1, #4]
 8006bf0:	6923      	ldr	r3, [r4, #16]
 8006bf2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006bf6:	68a3      	ldr	r3, [r4, #8]
 8006bf8:	4607      	mov	r7, r0
 8006bfa:	4691      	mov	r9, r2
 8006bfc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006c00:	f108 0601 	add.w	r6, r8, #1
 8006c04:	42b3      	cmp	r3, r6
 8006c06:	db0b      	blt.n	8006c20 <__lshift+0x38>
 8006c08:	4638      	mov	r0, r7
 8006c0a:	f7ff fddf 	bl	80067cc <_Balloc>
 8006c0e:	4605      	mov	r5, r0
 8006c10:	b948      	cbnz	r0, 8006c26 <__lshift+0x3e>
 8006c12:	4602      	mov	r2, r0
 8006c14:	4b28      	ldr	r3, [pc, #160]	@ (8006cb8 <__lshift+0xd0>)
 8006c16:	4829      	ldr	r0, [pc, #164]	@ (8006cbc <__lshift+0xd4>)
 8006c18:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006c1c:	f000 fa48 	bl	80070b0 <__assert_func>
 8006c20:	3101      	adds	r1, #1
 8006c22:	005b      	lsls	r3, r3, #1
 8006c24:	e7ee      	b.n	8006c04 <__lshift+0x1c>
 8006c26:	2300      	movs	r3, #0
 8006c28:	f100 0114 	add.w	r1, r0, #20
 8006c2c:	f100 0210 	add.w	r2, r0, #16
 8006c30:	4618      	mov	r0, r3
 8006c32:	4553      	cmp	r3, sl
 8006c34:	db33      	blt.n	8006c9e <__lshift+0xb6>
 8006c36:	6920      	ldr	r0, [r4, #16]
 8006c38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006c3c:	f104 0314 	add.w	r3, r4, #20
 8006c40:	f019 091f 	ands.w	r9, r9, #31
 8006c44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006c48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006c4c:	d02b      	beq.n	8006ca6 <__lshift+0xbe>
 8006c4e:	f1c9 0e20 	rsb	lr, r9, #32
 8006c52:	468a      	mov	sl, r1
 8006c54:	2200      	movs	r2, #0
 8006c56:	6818      	ldr	r0, [r3, #0]
 8006c58:	fa00 f009 	lsl.w	r0, r0, r9
 8006c5c:	4310      	orrs	r0, r2
 8006c5e:	f84a 0b04 	str.w	r0, [sl], #4
 8006c62:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c66:	459c      	cmp	ip, r3
 8006c68:	fa22 f20e 	lsr.w	r2, r2, lr
 8006c6c:	d8f3      	bhi.n	8006c56 <__lshift+0x6e>
 8006c6e:	ebac 0304 	sub.w	r3, ip, r4
 8006c72:	3b15      	subs	r3, #21
 8006c74:	f023 0303 	bic.w	r3, r3, #3
 8006c78:	3304      	adds	r3, #4
 8006c7a:	f104 0015 	add.w	r0, r4, #21
 8006c7e:	4584      	cmp	ip, r0
 8006c80:	bf38      	it	cc
 8006c82:	2304      	movcc	r3, #4
 8006c84:	50ca      	str	r2, [r1, r3]
 8006c86:	b10a      	cbz	r2, 8006c8c <__lshift+0xa4>
 8006c88:	f108 0602 	add.w	r6, r8, #2
 8006c8c:	3e01      	subs	r6, #1
 8006c8e:	4638      	mov	r0, r7
 8006c90:	612e      	str	r6, [r5, #16]
 8006c92:	4621      	mov	r1, r4
 8006c94:	f7ff fdda 	bl	800684c <_Bfree>
 8006c98:	4628      	mov	r0, r5
 8006c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	e7c5      	b.n	8006c32 <__lshift+0x4a>
 8006ca6:	3904      	subs	r1, #4
 8006ca8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cac:	f841 2f04 	str.w	r2, [r1, #4]!
 8006cb0:	459c      	cmp	ip, r3
 8006cb2:	d8f9      	bhi.n	8006ca8 <__lshift+0xc0>
 8006cb4:	e7ea      	b.n	8006c8c <__lshift+0xa4>
 8006cb6:	bf00      	nop
 8006cb8:	080078c8 	.word	0x080078c8
 8006cbc:	080078ea 	.word	0x080078ea

08006cc0 <__mcmp>:
 8006cc0:	690a      	ldr	r2, [r1, #16]
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	6900      	ldr	r0, [r0, #16]
 8006cc6:	1a80      	subs	r0, r0, r2
 8006cc8:	b530      	push	{r4, r5, lr}
 8006cca:	d10e      	bne.n	8006cea <__mcmp+0x2a>
 8006ccc:	3314      	adds	r3, #20
 8006cce:	3114      	adds	r1, #20
 8006cd0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006cd4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006cd8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006cdc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006ce0:	4295      	cmp	r5, r2
 8006ce2:	d003      	beq.n	8006cec <__mcmp+0x2c>
 8006ce4:	d205      	bcs.n	8006cf2 <__mcmp+0x32>
 8006ce6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006cea:	bd30      	pop	{r4, r5, pc}
 8006cec:	42a3      	cmp	r3, r4
 8006cee:	d3f3      	bcc.n	8006cd8 <__mcmp+0x18>
 8006cf0:	e7fb      	b.n	8006cea <__mcmp+0x2a>
 8006cf2:	2001      	movs	r0, #1
 8006cf4:	e7f9      	b.n	8006cea <__mcmp+0x2a>
	...

08006cf8 <__mdiff>:
 8006cf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cfc:	4689      	mov	r9, r1
 8006cfe:	4606      	mov	r6, r0
 8006d00:	4611      	mov	r1, r2
 8006d02:	4648      	mov	r0, r9
 8006d04:	4614      	mov	r4, r2
 8006d06:	f7ff ffdb 	bl	8006cc0 <__mcmp>
 8006d0a:	1e05      	subs	r5, r0, #0
 8006d0c:	d112      	bne.n	8006d34 <__mdiff+0x3c>
 8006d0e:	4629      	mov	r1, r5
 8006d10:	4630      	mov	r0, r6
 8006d12:	f7ff fd5b 	bl	80067cc <_Balloc>
 8006d16:	4602      	mov	r2, r0
 8006d18:	b928      	cbnz	r0, 8006d26 <__mdiff+0x2e>
 8006d1a:	4b3f      	ldr	r3, [pc, #252]	@ (8006e18 <__mdiff+0x120>)
 8006d1c:	f240 2137 	movw	r1, #567	@ 0x237
 8006d20:	483e      	ldr	r0, [pc, #248]	@ (8006e1c <__mdiff+0x124>)
 8006d22:	f000 f9c5 	bl	80070b0 <__assert_func>
 8006d26:	2301      	movs	r3, #1
 8006d28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006d2c:	4610      	mov	r0, r2
 8006d2e:	b003      	add	sp, #12
 8006d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d34:	bfbc      	itt	lt
 8006d36:	464b      	movlt	r3, r9
 8006d38:	46a1      	movlt	r9, r4
 8006d3a:	4630      	mov	r0, r6
 8006d3c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006d40:	bfba      	itte	lt
 8006d42:	461c      	movlt	r4, r3
 8006d44:	2501      	movlt	r5, #1
 8006d46:	2500      	movge	r5, #0
 8006d48:	f7ff fd40 	bl	80067cc <_Balloc>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	b918      	cbnz	r0, 8006d58 <__mdiff+0x60>
 8006d50:	4b31      	ldr	r3, [pc, #196]	@ (8006e18 <__mdiff+0x120>)
 8006d52:	f240 2145 	movw	r1, #581	@ 0x245
 8006d56:	e7e3      	b.n	8006d20 <__mdiff+0x28>
 8006d58:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006d5c:	6926      	ldr	r6, [r4, #16]
 8006d5e:	60c5      	str	r5, [r0, #12]
 8006d60:	f109 0310 	add.w	r3, r9, #16
 8006d64:	f109 0514 	add.w	r5, r9, #20
 8006d68:	f104 0e14 	add.w	lr, r4, #20
 8006d6c:	f100 0b14 	add.w	fp, r0, #20
 8006d70:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006d74:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006d78:	9301      	str	r3, [sp, #4]
 8006d7a:	46d9      	mov	r9, fp
 8006d7c:	f04f 0c00 	mov.w	ip, #0
 8006d80:	9b01      	ldr	r3, [sp, #4]
 8006d82:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006d86:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006d8a:	9301      	str	r3, [sp, #4]
 8006d8c:	fa1f f38a 	uxth.w	r3, sl
 8006d90:	4619      	mov	r1, r3
 8006d92:	b283      	uxth	r3, r0
 8006d94:	1acb      	subs	r3, r1, r3
 8006d96:	0c00      	lsrs	r0, r0, #16
 8006d98:	4463      	add	r3, ip
 8006d9a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006d9e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006da8:	4576      	cmp	r6, lr
 8006daa:	f849 3b04 	str.w	r3, [r9], #4
 8006dae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006db2:	d8e5      	bhi.n	8006d80 <__mdiff+0x88>
 8006db4:	1b33      	subs	r3, r6, r4
 8006db6:	3b15      	subs	r3, #21
 8006db8:	f023 0303 	bic.w	r3, r3, #3
 8006dbc:	3415      	adds	r4, #21
 8006dbe:	3304      	adds	r3, #4
 8006dc0:	42a6      	cmp	r6, r4
 8006dc2:	bf38      	it	cc
 8006dc4:	2304      	movcc	r3, #4
 8006dc6:	441d      	add	r5, r3
 8006dc8:	445b      	add	r3, fp
 8006dca:	461e      	mov	r6, r3
 8006dcc:	462c      	mov	r4, r5
 8006dce:	4544      	cmp	r4, r8
 8006dd0:	d30e      	bcc.n	8006df0 <__mdiff+0xf8>
 8006dd2:	f108 0103 	add.w	r1, r8, #3
 8006dd6:	1b49      	subs	r1, r1, r5
 8006dd8:	f021 0103 	bic.w	r1, r1, #3
 8006ddc:	3d03      	subs	r5, #3
 8006dde:	45a8      	cmp	r8, r5
 8006de0:	bf38      	it	cc
 8006de2:	2100      	movcc	r1, #0
 8006de4:	440b      	add	r3, r1
 8006de6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006dea:	b191      	cbz	r1, 8006e12 <__mdiff+0x11a>
 8006dec:	6117      	str	r7, [r2, #16]
 8006dee:	e79d      	b.n	8006d2c <__mdiff+0x34>
 8006df0:	f854 1b04 	ldr.w	r1, [r4], #4
 8006df4:	46e6      	mov	lr, ip
 8006df6:	0c08      	lsrs	r0, r1, #16
 8006df8:	fa1c fc81 	uxtah	ip, ip, r1
 8006dfc:	4471      	add	r1, lr
 8006dfe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006e02:	b289      	uxth	r1, r1
 8006e04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006e08:	f846 1b04 	str.w	r1, [r6], #4
 8006e0c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006e10:	e7dd      	b.n	8006dce <__mdiff+0xd6>
 8006e12:	3f01      	subs	r7, #1
 8006e14:	e7e7      	b.n	8006de6 <__mdiff+0xee>
 8006e16:	bf00      	nop
 8006e18:	080078c8 	.word	0x080078c8
 8006e1c:	080078ea 	.word	0x080078ea

08006e20 <__d2b>:
 8006e20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006e24:	460f      	mov	r7, r1
 8006e26:	2101      	movs	r1, #1
 8006e28:	ec59 8b10 	vmov	r8, r9, d0
 8006e2c:	4616      	mov	r6, r2
 8006e2e:	f7ff fccd 	bl	80067cc <_Balloc>
 8006e32:	4604      	mov	r4, r0
 8006e34:	b930      	cbnz	r0, 8006e44 <__d2b+0x24>
 8006e36:	4602      	mov	r2, r0
 8006e38:	4b23      	ldr	r3, [pc, #140]	@ (8006ec8 <__d2b+0xa8>)
 8006e3a:	4824      	ldr	r0, [pc, #144]	@ (8006ecc <__d2b+0xac>)
 8006e3c:	f240 310f 	movw	r1, #783	@ 0x30f
 8006e40:	f000 f936 	bl	80070b0 <__assert_func>
 8006e44:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006e48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e4c:	b10d      	cbz	r5, 8006e52 <__d2b+0x32>
 8006e4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e52:	9301      	str	r3, [sp, #4]
 8006e54:	f1b8 0300 	subs.w	r3, r8, #0
 8006e58:	d023      	beq.n	8006ea2 <__d2b+0x82>
 8006e5a:	4668      	mov	r0, sp
 8006e5c:	9300      	str	r3, [sp, #0]
 8006e5e:	f7ff fd7c 	bl	800695a <__lo0bits>
 8006e62:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006e66:	b1d0      	cbz	r0, 8006e9e <__d2b+0x7e>
 8006e68:	f1c0 0320 	rsb	r3, r0, #32
 8006e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e70:	430b      	orrs	r3, r1
 8006e72:	40c2      	lsrs	r2, r0
 8006e74:	6163      	str	r3, [r4, #20]
 8006e76:	9201      	str	r2, [sp, #4]
 8006e78:	9b01      	ldr	r3, [sp, #4]
 8006e7a:	61a3      	str	r3, [r4, #24]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	bf0c      	ite	eq
 8006e80:	2201      	moveq	r2, #1
 8006e82:	2202      	movne	r2, #2
 8006e84:	6122      	str	r2, [r4, #16]
 8006e86:	b1a5      	cbz	r5, 8006eb2 <__d2b+0x92>
 8006e88:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006e8c:	4405      	add	r5, r0
 8006e8e:	603d      	str	r5, [r7, #0]
 8006e90:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006e94:	6030      	str	r0, [r6, #0]
 8006e96:	4620      	mov	r0, r4
 8006e98:	b003      	add	sp, #12
 8006e9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e9e:	6161      	str	r1, [r4, #20]
 8006ea0:	e7ea      	b.n	8006e78 <__d2b+0x58>
 8006ea2:	a801      	add	r0, sp, #4
 8006ea4:	f7ff fd59 	bl	800695a <__lo0bits>
 8006ea8:	9b01      	ldr	r3, [sp, #4]
 8006eaa:	6163      	str	r3, [r4, #20]
 8006eac:	3020      	adds	r0, #32
 8006eae:	2201      	movs	r2, #1
 8006eb0:	e7e8      	b.n	8006e84 <__d2b+0x64>
 8006eb2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006eb6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006eba:	6038      	str	r0, [r7, #0]
 8006ebc:	6918      	ldr	r0, [r3, #16]
 8006ebe:	f7ff fd2d 	bl	800691c <__hi0bits>
 8006ec2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006ec6:	e7e5      	b.n	8006e94 <__d2b+0x74>
 8006ec8:	080078c8 	.word	0x080078c8
 8006ecc:	080078ea 	.word	0x080078ea

08006ed0 <__sread>:
 8006ed0:	b510      	push	{r4, lr}
 8006ed2:	460c      	mov	r4, r1
 8006ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ed8:	f000 f8a8 	bl	800702c <_read_r>
 8006edc:	2800      	cmp	r0, #0
 8006ede:	bfab      	itete	ge
 8006ee0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006ee2:	89a3      	ldrhlt	r3, [r4, #12]
 8006ee4:	181b      	addge	r3, r3, r0
 8006ee6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006eea:	bfac      	ite	ge
 8006eec:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006eee:	81a3      	strhlt	r3, [r4, #12]
 8006ef0:	bd10      	pop	{r4, pc}

08006ef2 <__swrite>:
 8006ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ef6:	461f      	mov	r7, r3
 8006ef8:	898b      	ldrh	r3, [r1, #12]
 8006efa:	05db      	lsls	r3, r3, #23
 8006efc:	4605      	mov	r5, r0
 8006efe:	460c      	mov	r4, r1
 8006f00:	4616      	mov	r6, r2
 8006f02:	d505      	bpl.n	8006f10 <__swrite+0x1e>
 8006f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f08:	2302      	movs	r3, #2
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f000 f87c 	bl	8007008 <_lseek_r>
 8006f10:	89a3      	ldrh	r3, [r4, #12]
 8006f12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f1a:	81a3      	strh	r3, [r4, #12]
 8006f1c:	4632      	mov	r2, r6
 8006f1e:	463b      	mov	r3, r7
 8006f20:	4628      	mov	r0, r5
 8006f22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f26:	f000 b8a3 	b.w	8007070 <_write_r>

08006f2a <__sseek>:
 8006f2a:	b510      	push	{r4, lr}
 8006f2c:	460c      	mov	r4, r1
 8006f2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f32:	f000 f869 	bl	8007008 <_lseek_r>
 8006f36:	1c43      	adds	r3, r0, #1
 8006f38:	89a3      	ldrh	r3, [r4, #12]
 8006f3a:	bf15      	itete	ne
 8006f3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006f3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006f42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006f46:	81a3      	strheq	r3, [r4, #12]
 8006f48:	bf18      	it	ne
 8006f4a:	81a3      	strhne	r3, [r4, #12]
 8006f4c:	bd10      	pop	{r4, pc}

08006f4e <__sclose>:
 8006f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f52:	f000 b849 	b.w	8006fe8 <_close_r>

08006f56 <_realloc_r>:
 8006f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f5a:	4680      	mov	r8, r0
 8006f5c:	4615      	mov	r5, r2
 8006f5e:	460c      	mov	r4, r1
 8006f60:	b921      	cbnz	r1, 8006f6c <_realloc_r+0x16>
 8006f62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f66:	4611      	mov	r1, r2
 8006f68:	f7ff baf8 	b.w	800655c <_malloc_r>
 8006f6c:	b92a      	cbnz	r2, 8006f7a <_realloc_r+0x24>
 8006f6e:	f000 f8d1 	bl	8007114 <_free_r>
 8006f72:	2400      	movs	r4, #0
 8006f74:	4620      	mov	r0, r4
 8006f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f7a:	f000 f927 	bl	80071cc <_malloc_usable_size_r>
 8006f7e:	4285      	cmp	r5, r0
 8006f80:	4606      	mov	r6, r0
 8006f82:	d802      	bhi.n	8006f8a <_realloc_r+0x34>
 8006f84:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006f88:	d8f4      	bhi.n	8006f74 <_realloc_r+0x1e>
 8006f8a:	4629      	mov	r1, r5
 8006f8c:	4640      	mov	r0, r8
 8006f8e:	f7ff fae5 	bl	800655c <_malloc_r>
 8006f92:	4607      	mov	r7, r0
 8006f94:	2800      	cmp	r0, #0
 8006f96:	d0ec      	beq.n	8006f72 <_realloc_r+0x1c>
 8006f98:	42b5      	cmp	r5, r6
 8006f9a:	462a      	mov	r2, r5
 8006f9c:	4621      	mov	r1, r4
 8006f9e:	bf28      	it	cs
 8006fa0:	4632      	movcs	r2, r6
 8006fa2:	f000 f877 	bl	8007094 <memcpy>
 8006fa6:	4621      	mov	r1, r4
 8006fa8:	4640      	mov	r0, r8
 8006faa:	f000 f8b3 	bl	8007114 <_free_r>
 8006fae:	463c      	mov	r4, r7
 8006fb0:	e7e0      	b.n	8006f74 <_realloc_r+0x1e>

08006fb2 <memmove>:
 8006fb2:	4288      	cmp	r0, r1
 8006fb4:	b510      	push	{r4, lr}
 8006fb6:	eb01 0402 	add.w	r4, r1, r2
 8006fba:	d902      	bls.n	8006fc2 <memmove+0x10>
 8006fbc:	4284      	cmp	r4, r0
 8006fbe:	4623      	mov	r3, r4
 8006fc0:	d807      	bhi.n	8006fd2 <memmove+0x20>
 8006fc2:	1e43      	subs	r3, r0, #1
 8006fc4:	42a1      	cmp	r1, r4
 8006fc6:	d008      	beq.n	8006fda <memmove+0x28>
 8006fc8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006fcc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006fd0:	e7f8      	b.n	8006fc4 <memmove+0x12>
 8006fd2:	4402      	add	r2, r0
 8006fd4:	4601      	mov	r1, r0
 8006fd6:	428a      	cmp	r2, r1
 8006fd8:	d100      	bne.n	8006fdc <memmove+0x2a>
 8006fda:	bd10      	pop	{r4, pc}
 8006fdc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006fe0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006fe4:	e7f7      	b.n	8006fd6 <memmove+0x24>
	...

08006fe8 <_close_r>:
 8006fe8:	b538      	push	{r3, r4, r5, lr}
 8006fea:	4d06      	ldr	r5, [pc, #24]	@ (8007004 <_close_r+0x1c>)
 8006fec:	2300      	movs	r3, #0
 8006fee:	4604      	mov	r4, r0
 8006ff0:	4608      	mov	r0, r1
 8006ff2:	602b      	str	r3, [r5, #0]
 8006ff4:	f7fa fd38 	bl	8001a68 <_close>
 8006ff8:	1c43      	adds	r3, r0, #1
 8006ffa:	d102      	bne.n	8007002 <_close_r+0x1a>
 8006ffc:	682b      	ldr	r3, [r5, #0]
 8006ffe:	b103      	cbz	r3, 8007002 <_close_r+0x1a>
 8007000:	6023      	str	r3, [r4, #0]
 8007002:	bd38      	pop	{r3, r4, r5, pc}
 8007004:	200004b8 	.word	0x200004b8

08007008 <_lseek_r>:
 8007008:	b538      	push	{r3, r4, r5, lr}
 800700a:	4d07      	ldr	r5, [pc, #28]	@ (8007028 <_lseek_r+0x20>)
 800700c:	4604      	mov	r4, r0
 800700e:	4608      	mov	r0, r1
 8007010:	4611      	mov	r1, r2
 8007012:	2200      	movs	r2, #0
 8007014:	602a      	str	r2, [r5, #0]
 8007016:	461a      	mov	r2, r3
 8007018:	f7fa fd4d 	bl	8001ab6 <_lseek>
 800701c:	1c43      	adds	r3, r0, #1
 800701e:	d102      	bne.n	8007026 <_lseek_r+0x1e>
 8007020:	682b      	ldr	r3, [r5, #0]
 8007022:	b103      	cbz	r3, 8007026 <_lseek_r+0x1e>
 8007024:	6023      	str	r3, [r4, #0]
 8007026:	bd38      	pop	{r3, r4, r5, pc}
 8007028:	200004b8 	.word	0x200004b8

0800702c <_read_r>:
 800702c:	b538      	push	{r3, r4, r5, lr}
 800702e:	4d07      	ldr	r5, [pc, #28]	@ (800704c <_read_r+0x20>)
 8007030:	4604      	mov	r4, r0
 8007032:	4608      	mov	r0, r1
 8007034:	4611      	mov	r1, r2
 8007036:	2200      	movs	r2, #0
 8007038:	602a      	str	r2, [r5, #0]
 800703a:	461a      	mov	r2, r3
 800703c:	f7fa fcdb 	bl	80019f6 <_read>
 8007040:	1c43      	adds	r3, r0, #1
 8007042:	d102      	bne.n	800704a <_read_r+0x1e>
 8007044:	682b      	ldr	r3, [r5, #0]
 8007046:	b103      	cbz	r3, 800704a <_read_r+0x1e>
 8007048:	6023      	str	r3, [r4, #0]
 800704a:	bd38      	pop	{r3, r4, r5, pc}
 800704c:	200004b8 	.word	0x200004b8

08007050 <_sbrk_r>:
 8007050:	b538      	push	{r3, r4, r5, lr}
 8007052:	4d06      	ldr	r5, [pc, #24]	@ (800706c <_sbrk_r+0x1c>)
 8007054:	2300      	movs	r3, #0
 8007056:	4604      	mov	r4, r0
 8007058:	4608      	mov	r0, r1
 800705a:	602b      	str	r3, [r5, #0]
 800705c:	f7fa fd38 	bl	8001ad0 <_sbrk>
 8007060:	1c43      	adds	r3, r0, #1
 8007062:	d102      	bne.n	800706a <_sbrk_r+0x1a>
 8007064:	682b      	ldr	r3, [r5, #0]
 8007066:	b103      	cbz	r3, 800706a <_sbrk_r+0x1a>
 8007068:	6023      	str	r3, [r4, #0]
 800706a:	bd38      	pop	{r3, r4, r5, pc}
 800706c:	200004b8 	.word	0x200004b8

08007070 <_write_r>:
 8007070:	b538      	push	{r3, r4, r5, lr}
 8007072:	4d07      	ldr	r5, [pc, #28]	@ (8007090 <_write_r+0x20>)
 8007074:	4604      	mov	r4, r0
 8007076:	4608      	mov	r0, r1
 8007078:	4611      	mov	r1, r2
 800707a:	2200      	movs	r2, #0
 800707c:	602a      	str	r2, [r5, #0]
 800707e:	461a      	mov	r2, r3
 8007080:	f7fa fcd6 	bl	8001a30 <_write>
 8007084:	1c43      	adds	r3, r0, #1
 8007086:	d102      	bne.n	800708e <_write_r+0x1e>
 8007088:	682b      	ldr	r3, [r5, #0]
 800708a:	b103      	cbz	r3, 800708e <_write_r+0x1e>
 800708c:	6023      	str	r3, [r4, #0]
 800708e:	bd38      	pop	{r3, r4, r5, pc}
 8007090:	200004b8 	.word	0x200004b8

08007094 <memcpy>:
 8007094:	440a      	add	r2, r1
 8007096:	4291      	cmp	r1, r2
 8007098:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800709c:	d100      	bne.n	80070a0 <memcpy+0xc>
 800709e:	4770      	bx	lr
 80070a0:	b510      	push	{r4, lr}
 80070a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070aa:	4291      	cmp	r1, r2
 80070ac:	d1f9      	bne.n	80070a2 <memcpy+0xe>
 80070ae:	bd10      	pop	{r4, pc}

080070b0 <__assert_func>:
 80070b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80070b2:	4614      	mov	r4, r2
 80070b4:	461a      	mov	r2, r3
 80070b6:	4b09      	ldr	r3, [pc, #36]	@ (80070dc <__assert_func+0x2c>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4605      	mov	r5, r0
 80070bc:	68d8      	ldr	r0, [r3, #12]
 80070be:	b954      	cbnz	r4, 80070d6 <__assert_func+0x26>
 80070c0:	4b07      	ldr	r3, [pc, #28]	@ (80070e0 <__assert_func+0x30>)
 80070c2:	461c      	mov	r4, r3
 80070c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80070c8:	9100      	str	r1, [sp, #0]
 80070ca:	462b      	mov	r3, r5
 80070cc:	4905      	ldr	r1, [pc, #20]	@ (80070e4 <__assert_func+0x34>)
 80070ce:	f000 f885 	bl	80071dc <fiprintf>
 80070d2:	f000 f8a2 	bl	800721a <abort>
 80070d6:	4b04      	ldr	r3, [pc, #16]	@ (80070e8 <__assert_func+0x38>)
 80070d8:	e7f4      	b.n	80070c4 <__assert_func+0x14>
 80070da:	bf00      	nop
 80070dc:	20000018 	.word	0x20000018
 80070e0:	08007b86 	.word	0x08007b86
 80070e4:	08007b58 	.word	0x08007b58
 80070e8:	08007b4b 	.word	0x08007b4b

080070ec <_calloc_r>:
 80070ec:	b570      	push	{r4, r5, r6, lr}
 80070ee:	fba1 5402 	umull	r5, r4, r1, r2
 80070f2:	b93c      	cbnz	r4, 8007104 <_calloc_r+0x18>
 80070f4:	4629      	mov	r1, r5
 80070f6:	f7ff fa31 	bl	800655c <_malloc_r>
 80070fa:	4606      	mov	r6, r0
 80070fc:	b928      	cbnz	r0, 800710a <_calloc_r+0x1e>
 80070fe:	2600      	movs	r6, #0
 8007100:	4630      	mov	r0, r6
 8007102:	bd70      	pop	{r4, r5, r6, pc}
 8007104:	220c      	movs	r2, #12
 8007106:	6002      	str	r2, [r0, #0]
 8007108:	e7f9      	b.n	80070fe <_calloc_r+0x12>
 800710a:	462a      	mov	r2, r5
 800710c:	4621      	mov	r1, r4
 800710e:	f7fe fa1b 	bl	8005548 <memset>
 8007112:	e7f5      	b.n	8007100 <_calloc_r+0x14>

08007114 <_free_r>:
 8007114:	b538      	push	{r3, r4, r5, lr}
 8007116:	4605      	mov	r5, r0
 8007118:	2900      	cmp	r1, #0
 800711a:	d041      	beq.n	80071a0 <_free_r+0x8c>
 800711c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007120:	1f0c      	subs	r4, r1, #4
 8007122:	2b00      	cmp	r3, #0
 8007124:	bfb8      	it	lt
 8007126:	18e4      	addlt	r4, r4, r3
 8007128:	f7ff fb44 	bl	80067b4 <__malloc_lock>
 800712c:	4a1d      	ldr	r2, [pc, #116]	@ (80071a4 <_free_r+0x90>)
 800712e:	6813      	ldr	r3, [r2, #0]
 8007130:	b933      	cbnz	r3, 8007140 <_free_r+0x2c>
 8007132:	6063      	str	r3, [r4, #4]
 8007134:	6014      	str	r4, [r2, #0]
 8007136:	4628      	mov	r0, r5
 8007138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800713c:	f7ff bb40 	b.w	80067c0 <__malloc_unlock>
 8007140:	42a3      	cmp	r3, r4
 8007142:	d908      	bls.n	8007156 <_free_r+0x42>
 8007144:	6820      	ldr	r0, [r4, #0]
 8007146:	1821      	adds	r1, r4, r0
 8007148:	428b      	cmp	r3, r1
 800714a:	bf01      	itttt	eq
 800714c:	6819      	ldreq	r1, [r3, #0]
 800714e:	685b      	ldreq	r3, [r3, #4]
 8007150:	1809      	addeq	r1, r1, r0
 8007152:	6021      	streq	r1, [r4, #0]
 8007154:	e7ed      	b.n	8007132 <_free_r+0x1e>
 8007156:	461a      	mov	r2, r3
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	b10b      	cbz	r3, 8007160 <_free_r+0x4c>
 800715c:	42a3      	cmp	r3, r4
 800715e:	d9fa      	bls.n	8007156 <_free_r+0x42>
 8007160:	6811      	ldr	r1, [r2, #0]
 8007162:	1850      	adds	r0, r2, r1
 8007164:	42a0      	cmp	r0, r4
 8007166:	d10b      	bne.n	8007180 <_free_r+0x6c>
 8007168:	6820      	ldr	r0, [r4, #0]
 800716a:	4401      	add	r1, r0
 800716c:	1850      	adds	r0, r2, r1
 800716e:	4283      	cmp	r3, r0
 8007170:	6011      	str	r1, [r2, #0]
 8007172:	d1e0      	bne.n	8007136 <_free_r+0x22>
 8007174:	6818      	ldr	r0, [r3, #0]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	6053      	str	r3, [r2, #4]
 800717a:	4408      	add	r0, r1
 800717c:	6010      	str	r0, [r2, #0]
 800717e:	e7da      	b.n	8007136 <_free_r+0x22>
 8007180:	d902      	bls.n	8007188 <_free_r+0x74>
 8007182:	230c      	movs	r3, #12
 8007184:	602b      	str	r3, [r5, #0]
 8007186:	e7d6      	b.n	8007136 <_free_r+0x22>
 8007188:	6820      	ldr	r0, [r4, #0]
 800718a:	1821      	adds	r1, r4, r0
 800718c:	428b      	cmp	r3, r1
 800718e:	bf04      	itt	eq
 8007190:	6819      	ldreq	r1, [r3, #0]
 8007192:	685b      	ldreq	r3, [r3, #4]
 8007194:	6063      	str	r3, [r4, #4]
 8007196:	bf04      	itt	eq
 8007198:	1809      	addeq	r1, r1, r0
 800719a:	6021      	streq	r1, [r4, #0]
 800719c:	6054      	str	r4, [r2, #4]
 800719e:	e7ca      	b.n	8007136 <_free_r+0x22>
 80071a0:	bd38      	pop	{r3, r4, r5, pc}
 80071a2:	bf00      	nop
 80071a4:	200004b4 	.word	0x200004b4

080071a8 <__ascii_mbtowc>:
 80071a8:	b082      	sub	sp, #8
 80071aa:	b901      	cbnz	r1, 80071ae <__ascii_mbtowc+0x6>
 80071ac:	a901      	add	r1, sp, #4
 80071ae:	b142      	cbz	r2, 80071c2 <__ascii_mbtowc+0x1a>
 80071b0:	b14b      	cbz	r3, 80071c6 <__ascii_mbtowc+0x1e>
 80071b2:	7813      	ldrb	r3, [r2, #0]
 80071b4:	600b      	str	r3, [r1, #0]
 80071b6:	7812      	ldrb	r2, [r2, #0]
 80071b8:	1e10      	subs	r0, r2, #0
 80071ba:	bf18      	it	ne
 80071bc:	2001      	movne	r0, #1
 80071be:	b002      	add	sp, #8
 80071c0:	4770      	bx	lr
 80071c2:	4610      	mov	r0, r2
 80071c4:	e7fb      	b.n	80071be <__ascii_mbtowc+0x16>
 80071c6:	f06f 0001 	mvn.w	r0, #1
 80071ca:	e7f8      	b.n	80071be <__ascii_mbtowc+0x16>

080071cc <_malloc_usable_size_r>:
 80071cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071d0:	1f18      	subs	r0, r3, #4
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	bfbc      	itt	lt
 80071d6:	580b      	ldrlt	r3, [r1, r0]
 80071d8:	18c0      	addlt	r0, r0, r3
 80071da:	4770      	bx	lr

080071dc <fiprintf>:
 80071dc:	b40e      	push	{r1, r2, r3}
 80071de:	b503      	push	{r0, r1, lr}
 80071e0:	4601      	mov	r1, r0
 80071e2:	ab03      	add	r3, sp, #12
 80071e4:	4805      	ldr	r0, [pc, #20]	@ (80071fc <fiprintf+0x20>)
 80071e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80071ea:	6800      	ldr	r0, [r0, #0]
 80071ec:	9301      	str	r3, [sp, #4]
 80071ee:	f000 f845 	bl	800727c <_vfiprintf_r>
 80071f2:	b002      	add	sp, #8
 80071f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80071f8:	b003      	add	sp, #12
 80071fa:	4770      	bx	lr
 80071fc:	20000018 	.word	0x20000018

08007200 <__ascii_wctomb>:
 8007200:	4603      	mov	r3, r0
 8007202:	4608      	mov	r0, r1
 8007204:	b141      	cbz	r1, 8007218 <__ascii_wctomb+0x18>
 8007206:	2aff      	cmp	r2, #255	@ 0xff
 8007208:	d904      	bls.n	8007214 <__ascii_wctomb+0x14>
 800720a:	228a      	movs	r2, #138	@ 0x8a
 800720c:	601a      	str	r2, [r3, #0]
 800720e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007212:	4770      	bx	lr
 8007214:	700a      	strb	r2, [r1, #0]
 8007216:	2001      	movs	r0, #1
 8007218:	4770      	bx	lr

0800721a <abort>:
 800721a:	b508      	push	{r3, lr}
 800721c:	2006      	movs	r0, #6
 800721e:	f000 fa85 	bl	800772c <raise>
 8007222:	2001      	movs	r0, #1
 8007224:	f7fa fbdc 	bl	80019e0 <_exit>

08007228 <__sfputc_r>:
 8007228:	6893      	ldr	r3, [r2, #8]
 800722a:	3b01      	subs	r3, #1
 800722c:	2b00      	cmp	r3, #0
 800722e:	b410      	push	{r4}
 8007230:	6093      	str	r3, [r2, #8]
 8007232:	da08      	bge.n	8007246 <__sfputc_r+0x1e>
 8007234:	6994      	ldr	r4, [r2, #24]
 8007236:	42a3      	cmp	r3, r4
 8007238:	db01      	blt.n	800723e <__sfputc_r+0x16>
 800723a:	290a      	cmp	r1, #10
 800723c:	d103      	bne.n	8007246 <__sfputc_r+0x1e>
 800723e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007242:	f000 b933 	b.w	80074ac <__swbuf_r>
 8007246:	6813      	ldr	r3, [r2, #0]
 8007248:	1c58      	adds	r0, r3, #1
 800724a:	6010      	str	r0, [r2, #0]
 800724c:	7019      	strb	r1, [r3, #0]
 800724e:	4608      	mov	r0, r1
 8007250:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007254:	4770      	bx	lr

08007256 <__sfputs_r>:
 8007256:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007258:	4606      	mov	r6, r0
 800725a:	460f      	mov	r7, r1
 800725c:	4614      	mov	r4, r2
 800725e:	18d5      	adds	r5, r2, r3
 8007260:	42ac      	cmp	r4, r5
 8007262:	d101      	bne.n	8007268 <__sfputs_r+0x12>
 8007264:	2000      	movs	r0, #0
 8007266:	e007      	b.n	8007278 <__sfputs_r+0x22>
 8007268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800726c:	463a      	mov	r2, r7
 800726e:	4630      	mov	r0, r6
 8007270:	f7ff ffda 	bl	8007228 <__sfputc_r>
 8007274:	1c43      	adds	r3, r0, #1
 8007276:	d1f3      	bne.n	8007260 <__sfputs_r+0xa>
 8007278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800727c <_vfiprintf_r>:
 800727c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007280:	460d      	mov	r5, r1
 8007282:	b09d      	sub	sp, #116	@ 0x74
 8007284:	4614      	mov	r4, r2
 8007286:	4698      	mov	r8, r3
 8007288:	4606      	mov	r6, r0
 800728a:	b118      	cbz	r0, 8007294 <_vfiprintf_r+0x18>
 800728c:	6a03      	ldr	r3, [r0, #32]
 800728e:	b90b      	cbnz	r3, 8007294 <_vfiprintf_r+0x18>
 8007290:	f7fe f924 	bl	80054dc <__sinit>
 8007294:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007296:	07d9      	lsls	r1, r3, #31
 8007298:	d405      	bmi.n	80072a6 <_vfiprintf_r+0x2a>
 800729a:	89ab      	ldrh	r3, [r5, #12]
 800729c:	059a      	lsls	r2, r3, #22
 800729e:	d402      	bmi.n	80072a6 <_vfiprintf_r+0x2a>
 80072a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80072a2:	f7fe f988 	bl	80055b6 <__retarget_lock_acquire_recursive>
 80072a6:	89ab      	ldrh	r3, [r5, #12]
 80072a8:	071b      	lsls	r3, r3, #28
 80072aa:	d501      	bpl.n	80072b0 <_vfiprintf_r+0x34>
 80072ac:	692b      	ldr	r3, [r5, #16]
 80072ae:	b99b      	cbnz	r3, 80072d8 <_vfiprintf_r+0x5c>
 80072b0:	4629      	mov	r1, r5
 80072b2:	4630      	mov	r0, r6
 80072b4:	f000 f938 	bl	8007528 <__swsetup_r>
 80072b8:	b170      	cbz	r0, 80072d8 <_vfiprintf_r+0x5c>
 80072ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80072bc:	07dc      	lsls	r4, r3, #31
 80072be:	d504      	bpl.n	80072ca <_vfiprintf_r+0x4e>
 80072c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80072c4:	b01d      	add	sp, #116	@ 0x74
 80072c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ca:	89ab      	ldrh	r3, [r5, #12]
 80072cc:	0598      	lsls	r0, r3, #22
 80072ce:	d4f7      	bmi.n	80072c0 <_vfiprintf_r+0x44>
 80072d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80072d2:	f7fe f971 	bl	80055b8 <__retarget_lock_release_recursive>
 80072d6:	e7f3      	b.n	80072c0 <_vfiprintf_r+0x44>
 80072d8:	2300      	movs	r3, #0
 80072da:	9309      	str	r3, [sp, #36]	@ 0x24
 80072dc:	2320      	movs	r3, #32
 80072de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80072e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80072e6:	2330      	movs	r3, #48	@ 0x30
 80072e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007498 <_vfiprintf_r+0x21c>
 80072ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80072f0:	f04f 0901 	mov.w	r9, #1
 80072f4:	4623      	mov	r3, r4
 80072f6:	469a      	mov	sl, r3
 80072f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072fc:	b10a      	cbz	r2, 8007302 <_vfiprintf_r+0x86>
 80072fe:	2a25      	cmp	r2, #37	@ 0x25
 8007300:	d1f9      	bne.n	80072f6 <_vfiprintf_r+0x7a>
 8007302:	ebba 0b04 	subs.w	fp, sl, r4
 8007306:	d00b      	beq.n	8007320 <_vfiprintf_r+0xa4>
 8007308:	465b      	mov	r3, fp
 800730a:	4622      	mov	r2, r4
 800730c:	4629      	mov	r1, r5
 800730e:	4630      	mov	r0, r6
 8007310:	f7ff ffa1 	bl	8007256 <__sfputs_r>
 8007314:	3001      	adds	r0, #1
 8007316:	f000 80a7 	beq.w	8007468 <_vfiprintf_r+0x1ec>
 800731a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800731c:	445a      	add	r2, fp
 800731e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007320:	f89a 3000 	ldrb.w	r3, [sl]
 8007324:	2b00      	cmp	r3, #0
 8007326:	f000 809f 	beq.w	8007468 <_vfiprintf_r+0x1ec>
 800732a:	2300      	movs	r3, #0
 800732c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007330:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007334:	f10a 0a01 	add.w	sl, sl, #1
 8007338:	9304      	str	r3, [sp, #16]
 800733a:	9307      	str	r3, [sp, #28]
 800733c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007340:	931a      	str	r3, [sp, #104]	@ 0x68
 8007342:	4654      	mov	r4, sl
 8007344:	2205      	movs	r2, #5
 8007346:	f814 1b01 	ldrb.w	r1, [r4], #1
 800734a:	4853      	ldr	r0, [pc, #332]	@ (8007498 <_vfiprintf_r+0x21c>)
 800734c:	f7f8 ff60 	bl	8000210 <memchr>
 8007350:	9a04      	ldr	r2, [sp, #16]
 8007352:	b9d8      	cbnz	r0, 800738c <_vfiprintf_r+0x110>
 8007354:	06d1      	lsls	r1, r2, #27
 8007356:	bf44      	itt	mi
 8007358:	2320      	movmi	r3, #32
 800735a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800735e:	0713      	lsls	r3, r2, #28
 8007360:	bf44      	itt	mi
 8007362:	232b      	movmi	r3, #43	@ 0x2b
 8007364:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007368:	f89a 3000 	ldrb.w	r3, [sl]
 800736c:	2b2a      	cmp	r3, #42	@ 0x2a
 800736e:	d015      	beq.n	800739c <_vfiprintf_r+0x120>
 8007370:	9a07      	ldr	r2, [sp, #28]
 8007372:	4654      	mov	r4, sl
 8007374:	2000      	movs	r0, #0
 8007376:	f04f 0c0a 	mov.w	ip, #10
 800737a:	4621      	mov	r1, r4
 800737c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007380:	3b30      	subs	r3, #48	@ 0x30
 8007382:	2b09      	cmp	r3, #9
 8007384:	d94b      	bls.n	800741e <_vfiprintf_r+0x1a2>
 8007386:	b1b0      	cbz	r0, 80073b6 <_vfiprintf_r+0x13a>
 8007388:	9207      	str	r2, [sp, #28]
 800738a:	e014      	b.n	80073b6 <_vfiprintf_r+0x13a>
 800738c:	eba0 0308 	sub.w	r3, r0, r8
 8007390:	fa09 f303 	lsl.w	r3, r9, r3
 8007394:	4313      	orrs	r3, r2
 8007396:	9304      	str	r3, [sp, #16]
 8007398:	46a2      	mov	sl, r4
 800739a:	e7d2      	b.n	8007342 <_vfiprintf_r+0xc6>
 800739c:	9b03      	ldr	r3, [sp, #12]
 800739e:	1d19      	adds	r1, r3, #4
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	9103      	str	r1, [sp, #12]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	bfbb      	ittet	lt
 80073a8:	425b      	neglt	r3, r3
 80073aa:	f042 0202 	orrlt.w	r2, r2, #2
 80073ae:	9307      	strge	r3, [sp, #28]
 80073b0:	9307      	strlt	r3, [sp, #28]
 80073b2:	bfb8      	it	lt
 80073b4:	9204      	strlt	r2, [sp, #16]
 80073b6:	7823      	ldrb	r3, [r4, #0]
 80073b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80073ba:	d10a      	bne.n	80073d2 <_vfiprintf_r+0x156>
 80073bc:	7863      	ldrb	r3, [r4, #1]
 80073be:	2b2a      	cmp	r3, #42	@ 0x2a
 80073c0:	d132      	bne.n	8007428 <_vfiprintf_r+0x1ac>
 80073c2:	9b03      	ldr	r3, [sp, #12]
 80073c4:	1d1a      	adds	r2, r3, #4
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	9203      	str	r2, [sp, #12]
 80073ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80073ce:	3402      	adds	r4, #2
 80073d0:	9305      	str	r3, [sp, #20]
 80073d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80074a8 <_vfiprintf_r+0x22c>
 80073d6:	7821      	ldrb	r1, [r4, #0]
 80073d8:	2203      	movs	r2, #3
 80073da:	4650      	mov	r0, sl
 80073dc:	f7f8 ff18 	bl	8000210 <memchr>
 80073e0:	b138      	cbz	r0, 80073f2 <_vfiprintf_r+0x176>
 80073e2:	9b04      	ldr	r3, [sp, #16]
 80073e4:	eba0 000a 	sub.w	r0, r0, sl
 80073e8:	2240      	movs	r2, #64	@ 0x40
 80073ea:	4082      	lsls	r2, r0
 80073ec:	4313      	orrs	r3, r2
 80073ee:	3401      	adds	r4, #1
 80073f0:	9304      	str	r3, [sp, #16]
 80073f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073f6:	4829      	ldr	r0, [pc, #164]	@ (800749c <_vfiprintf_r+0x220>)
 80073f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80073fc:	2206      	movs	r2, #6
 80073fe:	f7f8 ff07 	bl	8000210 <memchr>
 8007402:	2800      	cmp	r0, #0
 8007404:	d03f      	beq.n	8007486 <_vfiprintf_r+0x20a>
 8007406:	4b26      	ldr	r3, [pc, #152]	@ (80074a0 <_vfiprintf_r+0x224>)
 8007408:	bb1b      	cbnz	r3, 8007452 <_vfiprintf_r+0x1d6>
 800740a:	9b03      	ldr	r3, [sp, #12]
 800740c:	3307      	adds	r3, #7
 800740e:	f023 0307 	bic.w	r3, r3, #7
 8007412:	3308      	adds	r3, #8
 8007414:	9303      	str	r3, [sp, #12]
 8007416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007418:	443b      	add	r3, r7
 800741a:	9309      	str	r3, [sp, #36]	@ 0x24
 800741c:	e76a      	b.n	80072f4 <_vfiprintf_r+0x78>
 800741e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007422:	460c      	mov	r4, r1
 8007424:	2001      	movs	r0, #1
 8007426:	e7a8      	b.n	800737a <_vfiprintf_r+0xfe>
 8007428:	2300      	movs	r3, #0
 800742a:	3401      	adds	r4, #1
 800742c:	9305      	str	r3, [sp, #20]
 800742e:	4619      	mov	r1, r3
 8007430:	f04f 0c0a 	mov.w	ip, #10
 8007434:	4620      	mov	r0, r4
 8007436:	f810 2b01 	ldrb.w	r2, [r0], #1
 800743a:	3a30      	subs	r2, #48	@ 0x30
 800743c:	2a09      	cmp	r2, #9
 800743e:	d903      	bls.n	8007448 <_vfiprintf_r+0x1cc>
 8007440:	2b00      	cmp	r3, #0
 8007442:	d0c6      	beq.n	80073d2 <_vfiprintf_r+0x156>
 8007444:	9105      	str	r1, [sp, #20]
 8007446:	e7c4      	b.n	80073d2 <_vfiprintf_r+0x156>
 8007448:	fb0c 2101 	mla	r1, ip, r1, r2
 800744c:	4604      	mov	r4, r0
 800744e:	2301      	movs	r3, #1
 8007450:	e7f0      	b.n	8007434 <_vfiprintf_r+0x1b8>
 8007452:	ab03      	add	r3, sp, #12
 8007454:	9300      	str	r3, [sp, #0]
 8007456:	462a      	mov	r2, r5
 8007458:	4b12      	ldr	r3, [pc, #72]	@ (80074a4 <_vfiprintf_r+0x228>)
 800745a:	a904      	add	r1, sp, #16
 800745c:	4630      	mov	r0, r6
 800745e:	f7fd fbd9 	bl	8004c14 <_printf_float>
 8007462:	4607      	mov	r7, r0
 8007464:	1c78      	adds	r0, r7, #1
 8007466:	d1d6      	bne.n	8007416 <_vfiprintf_r+0x19a>
 8007468:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800746a:	07d9      	lsls	r1, r3, #31
 800746c:	d405      	bmi.n	800747a <_vfiprintf_r+0x1fe>
 800746e:	89ab      	ldrh	r3, [r5, #12]
 8007470:	059a      	lsls	r2, r3, #22
 8007472:	d402      	bmi.n	800747a <_vfiprintf_r+0x1fe>
 8007474:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007476:	f7fe f89f 	bl	80055b8 <__retarget_lock_release_recursive>
 800747a:	89ab      	ldrh	r3, [r5, #12]
 800747c:	065b      	lsls	r3, r3, #25
 800747e:	f53f af1f 	bmi.w	80072c0 <_vfiprintf_r+0x44>
 8007482:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007484:	e71e      	b.n	80072c4 <_vfiprintf_r+0x48>
 8007486:	ab03      	add	r3, sp, #12
 8007488:	9300      	str	r3, [sp, #0]
 800748a:	462a      	mov	r2, r5
 800748c:	4b05      	ldr	r3, [pc, #20]	@ (80074a4 <_vfiprintf_r+0x228>)
 800748e:	a904      	add	r1, sp, #16
 8007490:	4630      	mov	r0, r6
 8007492:	f7fd fe57 	bl	8005144 <_printf_i>
 8007496:	e7e4      	b.n	8007462 <_vfiprintf_r+0x1e6>
 8007498:	080078d9 	.word	0x080078d9
 800749c:	080078e3 	.word	0x080078e3
 80074a0:	08004c15 	.word	0x08004c15
 80074a4:	08007257 	.word	0x08007257
 80074a8:	080078df 	.word	0x080078df

080074ac <__swbuf_r>:
 80074ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ae:	460e      	mov	r6, r1
 80074b0:	4614      	mov	r4, r2
 80074b2:	4605      	mov	r5, r0
 80074b4:	b118      	cbz	r0, 80074be <__swbuf_r+0x12>
 80074b6:	6a03      	ldr	r3, [r0, #32]
 80074b8:	b90b      	cbnz	r3, 80074be <__swbuf_r+0x12>
 80074ba:	f7fe f80f 	bl	80054dc <__sinit>
 80074be:	69a3      	ldr	r3, [r4, #24]
 80074c0:	60a3      	str	r3, [r4, #8]
 80074c2:	89a3      	ldrh	r3, [r4, #12]
 80074c4:	071a      	lsls	r2, r3, #28
 80074c6:	d501      	bpl.n	80074cc <__swbuf_r+0x20>
 80074c8:	6923      	ldr	r3, [r4, #16]
 80074ca:	b943      	cbnz	r3, 80074de <__swbuf_r+0x32>
 80074cc:	4621      	mov	r1, r4
 80074ce:	4628      	mov	r0, r5
 80074d0:	f000 f82a 	bl	8007528 <__swsetup_r>
 80074d4:	b118      	cbz	r0, 80074de <__swbuf_r+0x32>
 80074d6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80074da:	4638      	mov	r0, r7
 80074dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074de:	6823      	ldr	r3, [r4, #0]
 80074e0:	6922      	ldr	r2, [r4, #16]
 80074e2:	1a98      	subs	r0, r3, r2
 80074e4:	6963      	ldr	r3, [r4, #20]
 80074e6:	b2f6      	uxtb	r6, r6
 80074e8:	4283      	cmp	r3, r0
 80074ea:	4637      	mov	r7, r6
 80074ec:	dc05      	bgt.n	80074fa <__swbuf_r+0x4e>
 80074ee:	4621      	mov	r1, r4
 80074f0:	4628      	mov	r0, r5
 80074f2:	f7ff f937 	bl	8006764 <_fflush_r>
 80074f6:	2800      	cmp	r0, #0
 80074f8:	d1ed      	bne.n	80074d6 <__swbuf_r+0x2a>
 80074fa:	68a3      	ldr	r3, [r4, #8]
 80074fc:	3b01      	subs	r3, #1
 80074fe:	60a3      	str	r3, [r4, #8]
 8007500:	6823      	ldr	r3, [r4, #0]
 8007502:	1c5a      	adds	r2, r3, #1
 8007504:	6022      	str	r2, [r4, #0]
 8007506:	701e      	strb	r6, [r3, #0]
 8007508:	6962      	ldr	r2, [r4, #20]
 800750a:	1c43      	adds	r3, r0, #1
 800750c:	429a      	cmp	r2, r3
 800750e:	d004      	beq.n	800751a <__swbuf_r+0x6e>
 8007510:	89a3      	ldrh	r3, [r4, #12]
 8007512:	07db      	lsls	r3, r3, #31
 8007514:	d5e1      	bpl.n	80074da <__swbuf_r+0x2e>
 8007516:	2e0a      	cmp	r6, #10
 8007518:	d1df      	bne.n	80074da <__swbuf_r+0x2e>
 800751a:	4621      	mov	r1, r4
 800751c:	4628      	mov	r0, r5
 800751e:	f7ff f921 	bl	8006764 <_fflush_r>
 8007522:	2800      	cmp	r0, #0
 8007524:	d0d9      	beq.n	80074da <__swbuf_r+0x2e>
 8007526:	e7d6      	b.n	80074d6 <__swbuf_r+0x2a>

08007528 <__swsetup_r>:
 8007528:	b538      	push	{r3, r4, r5, lr}
 800752a:	4b29      	ldr	r3, [pc, #164]	@ (80075d0 <__swsetup_r+0xa8>)
 800752c:	4605      	mov	r5, r0
 800752e:	6818      	ldr	r0, [r3, #0]
 8007530:	460c      	mov	r4, r1
 8007532:	b118      	cbz	r0, 800753c <__swsetup_r+0x14>
 8007534:	6a03      	ldr	r3, [r0, #32]
 8007536:	b90b      	cbnz	r3, 800753c <__swsetup_r+0x14>
 8007538:	f7fd ffd0 	bl	80054dc <__sinit>
 800753c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007540:	0719      	lsls	r1, r3, #28
 8007542:	d422      	bmi.n	800758a <__swsetup_r+0x62>
 8007544:	06da      	lsls	r2, r3, #27
 8007546:	d407      	bmi.n	8007558 <__swsetup_r+0x30>
 8007548:	2209      	movs	r2, #9
 800754a:	602a      	str	r2, [r5, #0]
 800754c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007550:	81a3      	strh	r3, [r4, #12]
 8007552:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007556:	e033      	b.n	80075c0 <__swsetup_r+0x98>
 8007558:	0758      	lsls	r0, r3, #29
 800755a:	d512      	bpl.n	8007582 <__swsetup_r+0x5a>
 800755c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800755e:	b141      	cbz	r1, 8007572 <__swsetup_r+0x4a>
 8007560:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007564:	4299      	cmp	r1, r3
 8007566:	d002      	beq.n	800756e <__swsetup_r+0x46>
 8007568:	4628      	mov	r0, r5
 800756a:	f7ff fdd3 	bl	8007114 <_free_r>
 800756e:	2300      	movs	r3, #0
 8007570:	6363      	str	r3, [r4, #52]	@ 0x34
 8007572:	89a3      	ldrh	r3, [r4, #12]
 8007574:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007578:	81a3      	strh	r3, [r4, #12]
 800757a:	2300      	movs	r3, #0
 800757c:	6063      	str	r3, [r4, #4]
 800757e:	6923      	ldr	r3, [r4, #16]
 8007580:	6023      	str	r3, [r4, #0]
 8007582:	89a3      	ldrh	r3, [r4, #12]
 8007584:	f043 0308 	orr.w	r3, r3, #8
 8007588:	81a3      	strh	r3, [r4, #12]
 800758a:	6923      	ldr	r3, [r4, #16]
 800758c:	b94b      	cbnz	r3, 80075a2 <__swsetup_r+0x7a>
 800758e:	89a3      	ldrh	r3, [r4, #12]
 8007590:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007594:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007598:	d003      	beq.n	80075a2 <__swsetup_r+0x7a>
 800759a:	4621      	mov	r1, r4
 800759c:	4628      	mov	r0, r5
 800759e:	f000 f83f 	bl	8007620 <__smakebuf_r>
 80075a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075a6:	f013 0201 	ands.w	r2, r3, #1
 80075aa:	d00a      	beq.n	80075c2 <__swsetup_r+0x9a>
 80075ac:	2200      	movs	r2, #0
 80075ae:	60a2      	str	r2, [r4, #8]
 80075b0:	6962      	ldr	r2, [r4, #20]
 80075b2:	4252      	negs	r2, r2
 80075b4:	61a2      	str	r2, [r4, #24]
 80075b6:	6922      	ldr	r2, [r4, #16]
 80075b8:	b942      	cbnz	r2, 80075cc <__swsetup_r+0xa4>
 80075ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80075be:	d1c5      	bne.n	800754c <__swsetup_r+0x24>
 80075c0:	bd38      	pop	{r3, r4, r5, pc}
 80075c2:	0799      	lsls	r1, r3, #30
 80075c4:	bf58      	it	pl
 80075c6:	6962      	ldrpl	r2, [r4, #20]
 80075c8:	60a2      	str	r2, [r4, #8]
 80075ca:	e7f4      	b.n	80075b6 <__swsetup_r+0x8e>
 80075cc:	2000      	movs	r0, #0
 80075ce:	e7f7      	b.n	80075c0 <__swsetup_r+0x98>
 80075d0:	20000018 	.word	0x20000018

080075d4 <__swhatbuf_r>:
 80075d4:	b570      	push	{r4, r5, r6, lr}
 80075d6:	460c      	mov	r4, r1
 80075d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075dc:	2900      	cmp	r1, #0
 80075de:	b096      	sub	sp, #88	@ 0x58
 80075e0:	4615      	mov	r5, r2
 80075e2:	461e      	mov	r6, r3
 80075e4:	da0d      	bge.n	8007602 <__swhatbuf_r+0x2e>
 80075e6:	89a3      	ldrh	r3, [r4, #12]
 80075e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80075ec:	f04f 0100 	mov.w	r1, #0
 80075f0:	bf14      	ite	ne
 80075f2:	2340      	movne	r3, #64	@ 0x40
 80075f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80075f8:	2000      	movs	r0, #0
 80075fa:	6031      	str	r1, [r6, #0]
 80075fc:	602b      	str	r3, [r5, #0]
 80075fe:	b016      	add	sp, #88	@ 0x58
 8007600:	bd70      	pop	{r4, r5, r6, pc}
 8007602:	466a      	mov	r2, sp
 8007604:	f000 f848 	bl	8007698 <_fstat_r>
 8007608:	2800      	cmp	r0, #0
 800760a:	dbec      	blt.n	80075e6 <__swhatbuf_r+0x12>
 800760c:	9901      	ldr	r1, [sp, #4]
 800760e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007612:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007616:	4259      	negs	r1, r3
 8007618:	4159      	adcs	r1, r3
 800761a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800761e:	e7eb      	b.n	80075f8 <__swhatbuf_r+0x24>

08007620 <__smakebuf_r>:
 8007620:	898b      	ldrh	r3, [r1, #12]
 8007622:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007624:	079d      	lsls	r5, r3, #30
 8007626:	4606      	mov	r6, r0
 8007628:	460c      	mov	r4, r1
 800762a:	d507      	bpl.n	800763c <__smakebuf_r+0x1c>
 800762c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007630:	6023      	str	r3, [r4, #0]
 8007632:	6123      	str	r3, [r4, #16]
 8007634:	2301      	movs	r3, #1
 8007636:	6163      	str	r3, [r4, #20]
 8007638:	b003      	add	sp, #12
 800763a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800763c:	ab01      	add	r3, sp, #4
 800763e:	466a      	mov	r2, sp
 8007640:	f7ff ffc8 	bl	80075d4 <__swhatbuf_r>
 8007644:	9f00      	ldr	r7, [sp, #0]
 8007646:	4605      	mov	r5, r0
 8007648:	4639      	mov	r1, r7
 800764a:	4630      	mov	r0, r6
 800764c:	f7fe ff86 	bl	800655c <_malloc_r>
 8007650:	b948      	cbnz	r0, 8007666 <__smakebuf_r+0x46>
 8007652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007656:	059a      	lsls	r2, r3, #22
 8007658:	d4ee      	bmi.n	8007638 <__smakebuf_r+0x18>
 800765a:	f023 0303 	bic.w	r3, r3, #3
 800765e:	f043 0302 	orr.w	r3, r3, #2
 8007662:	81a3      	strh	r3, [r4, #12]
 8007664:	e7e2      	b.n	800762c <__smakebuf_r+0xc>
 8007666:	89a3      	ldrh	r3, [r4, #12]
 8007668:	6020      	str	r0, [r4, #0]
 800766a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800766e:	81a3      	strh	r3, [r4, #12]
 8007670:	9b01      	ldr	r3, [sp, #4]
 8007672:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007676:	b15b      	cbz	r3, 8007690 <__smakebuf_r+0x70>
 8007678:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800767c:	4630      	mov	r0, r6
 800767e:	f000 f81d 	bl	80076bc <_isatty_r>
 8007682:	b128      	cbz	r0, 8007690 <__smakebuf_r+0x70>
 8007684:	89a3      	ldrh	r3, [r4, #12]
 8007686:	f023 0303 	bic.w	r3, r3, #3
 800768a:	f043 0301 	orr.w	r3, r3, #1
 800768e:	81a3      	strh	r3, [r4, #12]
 8007690:	89a3      	ldrh	r3, [r4, #12]
 8007692:	431d      	orrs	r5, r3
 8007694:	81a5      	strh	r5, [r4, #12]
 8007696:	e7cf      	b.n	8007638 <__smakebuf_r+0x18>

08007698 <_fstat_r>:
 8007698:	b538      	push	{r3, r4, r5, lr}
 800769a:	4d07      	ldr	r5, [pc, #28]	@ (80076b8 <_fstat_r+0x20>)
 800769c:	2300      	movs	r3, #0
 800769e:	4604      	mov	r4, r0
 80076a0:	4608      	mov	r0, r1
 80076a2:	4611      	mov	r1, r2
 80076a4:	602b      	str	r3, [r5, #0]
 80076a6:	f7fa f9eb 	bl	8001a80 <_fstat>
 80076aa:	1c43      	adds	r3, r0, #1
 80076ac:	d102      	bne.n	80076b4 <_fstat_r+0x1c>
 80076ae:	682b      	ldr	r3, [r5, #0]
 80076b0:	b103      	cbz	r3, 80076b4 <_fstat_r+0x1c>
 80076b2:	6023      	str	r3, [r4, #0]
 80076b4:	bd38      	pop	{r3, r4, r5, pc}
 80076b6:	bf00      	nop
 80076b8:	200004b8 	.word	0x200004b8

080076bc <_isatty_r>:
 80076bc:	b538      	push	{r3, r4, r5, lr}
 80076be:	4d06      	ldr	r5, [pc, #24]	@ (80076d8 <_isatty_r+0x1c>)
 80076c0:	2300      	movs	r3, #0
 80076c2:	4604      	mov	r4, r0
 80076c4:	4608      	mov	r0, r1
 80076c6:	602b      	str	r3, [r5, #0]
 80076c8:	f7fa f9ea 	bl	8001aa0 <_isatty>
 80076cc:	1c43      	adds	r3, r0, #1
 80076ce:	d102      	bne.n	80076d6 <_isatty_r+0x1a>
 80076d0:	682b      	ldr	r3, [r5, #0]
 80076d2:	b103      	cbz	r3, 80076d6 <_isatty_r+0x1a>
 80076d4:	6023      	str	r3, [r4, #0]
 80076d6:	bd38      	pop	{r3, r4, r5, pc}
 80076d8:	200004b8 	.word	0x200004b8

080076dc <_raise_r>:
 80076dc:	291f      	cmp	r1, #31
 80076de:	b538      	push	{r3, r4, r5, lr}
 80076e0:	4605      	mov	r5, r0
 80076e2:	460c      	mov	r4, r1
 80076e4:	d904      	bls.n	80076f0 <_raise_r+0x14>
 80076e6:	2316      	movs	r3, #22
 80076e8:	6003      	str	r3, [r0, #0]
 80076ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80076ee:	bd38      	pop	{r3, r4, r5, pc}
 80076f0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80076f2:	b112      	cbz	r2, 80076fa <_raise_r+0x1e>
 80076f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80076f8:	b94b      	cbnz	r3, 800770e <_raise_r+0x32>
 80076fa:	4628      	mov	r0, r5
 80076fc:	f000 f830 	bl	8007760 <_getpid_r>
 8007700:	4622      	mov	r2, r4
 8007702:	4601      	mov	r1, r0
 8007704:	4628      	mov	r0, r5
 8007706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800770a:	f000 b817 	b.w	800773c <_kill_r>
 800770e:	2b01      	cmp	r3, #1
 8007710:	d00a      	beq.n	8007728 <_raise_r+0x4c>
 8007712:	1c59      	adds	r1, r3, #1
 8007714:	d103      	bne.n	800771e <_raise_r+0x42>
 8007716:	2316      	movs	r3, #22
 8007718:	6003      	str	r3, [r0, #0]
 800771a:	2001      	movs	r0, #1
 800771c:	e7e7      	b.n	80076ee <_raise_r+0x12>
 800771e:	2100      	movs	r1, #0
 8007720:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007724:	4620      	mov	r0, r4
 8007726:	4798      	blx	r3
 8007728:	2000      	movs	r0, #0
 800772a:	e7e0      	b.n	80076ee <_raise_r+0x12>

0800772c <raise>:
 800772c:	4b02      	ldr	r3, [pc, #8]	@ (8007738 <raise+0xc>)
 800772e:	4601      	mov	r1, r0
 8007730:	6818      	ldr	r0, [r3, #0]
 8007732:	f7ff bfd3 	b.w	80076dc <_raise_r>
 8007736:	bf00      	nop
 8007738:	20000018 	.word	0x20000018

0800773c <_kill_r>:
 800773c:	b538      	push	{r3, r4, r5, lr}
 800773e:	4d07      	ldr	r5, [pc, #28]	@ (800775c <_kill_r+0x20>)
 8007740:	2300      	movs	r3, #0
 8007742:	4604      	mov	r4, r0
 8007744:	4608      	mov	r0, r1
 8007746:	4611      	mov	r1, r2
 8007748:	602b      	str	r3, [r5, #0]
 800774a:	f7fa f939 	bl	80019c0 <_kill>
 800774e:	1c43      	adds	r3, r0, #1
 8007750:	d102      	bne.n	8007758 <_kill_r+0x1c>
 8007752:	682b      	ldr	r3, [r5, #0]
 8007754:	b103      	cbz	r3, 8007758 <_kill_r+0x1c>
 8007756:	6023      	str	r3, [r4, #0]
 8007758:	bd38      	pop	{r3, r4, r5, pc}
 800775a:	bf00      	nop
 800775c:	200004b8 	.word	0x200004b8

08007760 <_getpid_r>:
 8007760:	f7fa b926 	b.w	80019b0 <_getpid>

08007764 <_init>:
 8007764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007766:	bf00      	nop
 8007768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800776a:	bc08      	pop	{r3}
 800776c:	469e      	mov	lr, r3
 800776e:	4770      	bx	lr

08007770 <_fini>:
 8007770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007772:	bf00      	nop
 8007774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007776:	bc08      	pop	{r3}
 8007778:	469e      	mov	lr, r3
 800777a:	4770      	bx	lr
