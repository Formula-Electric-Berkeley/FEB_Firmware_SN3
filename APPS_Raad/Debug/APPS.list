
APPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055e0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080057b0  080057b0  000067b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005844  08005844  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005844  08005844  00006844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800584c  0800584c  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800584c  0800584c  0000684c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005850  08005850  00006850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005854  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  20000060  080058b4  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  080058b4  00007330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000102c8  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002907  00000000  00000000  00017358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  00019c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a47  00000000  00000000  0001a9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023999  00000000  00000000  0001b3ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012818  00000000  00000000  0003ed88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dac7b  00000000  00000000  000515a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012c21b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d30  00000000  00000000  0012c260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0012ff90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005798 	.word	0x08005798

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08005798 	.word	0x08005798

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c20:	f000 b96a 	b.w	8000ef8 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f806 	bl	8000c3c <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__udivmoddi4>:
 8000c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c40:	9d08      	ldr	r5, [sp, #32]
 8000c42:	460c      	mov	r4, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14e      	bne.n	8000ce6 <__udivmoddi4+0xaa>
 8000c48:	4694      	mov	ip, r2
 8000c4a:	458c      	cmp	ip, r1
 8000c4c:	4686      	mov	lr, r0
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	d962      	bls.n	8000d1a <__udivmoddi4+0xde>
 8000c54:	b14a      	cbz	r2, 8000c6a <__udivmoddi4+0x2e>
 8000c56:	f1c2 0320 	rsb	r3, r2, #32
 8000c5a:	4091      	lsls	r1, r2
 8000c5c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c64:	4319      	orrs	r1, r3
 8000c66:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6e:	fa1f f68c 	uxth.w	r6, ip
 8000c72:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c7a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c82:	fb04 f106 	mul.w	r1, r4, r6
 8000c86:	4299      	cmp	r1, r3
 8000c88:	d90a      	bls.n	8000ca0 <__udivmoddi4+0x64>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c92:	f080 8112 	bcs.w	8000eba <__udivmoddi4+0x27e>
 8000c96:	4299      	cmp	r1, r3
 8000c98:	f240 810f 	bls.w	8000eba <__udivmoddi4+0x27e>
 8000c9c:	3c02      	subs	r4, #2
 8000c9e:	4463      	add	r3, ip
 8000ca0:	1a59      	subs	r1, r3, r1
 8000ca2:	fa1f f38e 	uxth.w	r3, lr
 8000ca6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000caa:	fb07 1110 	mls	r1, r7, r0, r1
 8000cae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb2:	fb00 f606 	mul.w	r6, r0, r6
 8000cb6:	429e      	cmp	r6, r3
 8000cb8:	d90a      	bls.n	8000cd0 <__udivmoddi4+0x94>
 8000cba:	eb1c 0303 	adds.w	r3, ip, r3
 8000cbe:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cc2:	f080 80fc 	bcs.w	8000ebe <__udivmoddi4+0x282>
 8000cc6:	429e      	cmp	r6, r3
 8000cc8:	f240 80f9 	bls.w	8000ebe <__udivmoddi4+0x282>
 8000ccc:	4463      	add	r3, ip
 8000cce:	3802      	subs	r0, #2
 8000cd0:	1b9b      	subs	r3, r3, r6
 8000cd2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	b11d      	cbz	r5, 8000ce2 <__udivmoddi4+0xa6>
 8000cda:	40d3      	lsrs	r3, r2
 8000cdc:	2200      	movs	r2, #0
 8000cde:	e9c5 3200 	strd	r3, r2, [r5]
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d905      	bls.n	8000cf6 <__udivmoddi4+0xba>
 8000cea:	b10d      	cbz	r5, 8000cf0 <__udivmoddi4+0xb4>
 8000cec:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	e7f5      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000cf6:	fab3 f183 	clz	r1, r3
 8000cfa:	2900      	cmp	r1, #0
 8000cfc:	d146      	bne.n	8000d8c <__udivmoddi4+0x150>
 8000cfe:	42a3      	cmp	r3, r4
 8000d00:	d302      	bcc.n	8000d08 <__udivmoddi4+0xcc>
 8000d02:	4290      	cmp	r0, r2
 8000d04:	f0c0 80f0 	bcc.w	8000ee8 <__udivmoddi4+0x2ac>
 8000d08:	1a86      	subs	r6, r0, r2
 8000d0a:	eb64 0303 	sbc.w	r3, r4, r3
 8000d0e:	2001      	movs	r0, #1
 8000d10:	2d00      	cmp	r5, #0
 8000d12:	d0e6      	beq.n	8000ce2 <__udivmoddi4+0xa6>
 8000d14:	e9c5 6300 	strd	r6, r3, [r5]
 8000d18:	e7e3      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000d1a:	2a00      	cmp	r2, #0
 8000d1c:	f040 8090 	bne.w	8000e40 <__udivmoddi4+0x204>
 8000d20:	eba1 040c 	sub.w	r4, r1, ip
 8000d24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d28:	fa1f f78c 	uxth.w	r7, ip
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb08 4416 	mls	r4, r8, r6, r4
 8000d3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3e:	fb07 f006 	mul.w	r0, r7, r6
 8000d42:	4298      	cmp	r0, r3
 8000d44:	d908      	bls.n	8000d58 <__udivmoddi4+0x11c>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x11a>
 8000d50:	4298      	cmp	r0, r3
 8000d52:	f200 80cd 	bhi.w	8000ef0 <__udivmoddi4+0x2b4>
 8000d56:	4626      	mov	r6, r4
 8000d58:	1a1c      	subs	r4, r3, r0
 8000d5a:	fa1f f38e 	uxth.w	r3, lr
 8000d5e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d62:	fb08 4410 	mls	r4, r8, r0, r4
 8000d66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d6a:	fb00 f707 	mul.w	r7, r0, r7
 8000d6e:	429f      	cmp	r7, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x148>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x146>
 8000d7c:	429f      	cmp	r7, r3
 8000d7e:	f200 80b0 	bhi.w	8000ee2 <__udivmoddi4+0x2a6>
 8000d82:	4620      	mov	r0, r4
 8000d84:	1bdb      	subs	r3, r3, r7
 8000d86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8a:	e7a5      	b.n	8000cd8 <__udivmoddi4+0x9c>
 8000d8c:	f1c1 0620 	rsb	r6, r1, #32
 8000d90:	408b      	lsls	r3, r1
 8000d92:	fa22 f706 	lsr.w	r7, r2, r6
 8000d96:	431f      	orrs	r7, r3
 8000d98:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d9c:	fa04 f301 	lsl.w	r3, r4, r1
 8000da0:	ea43 030c 	orr.w	r3, r3, ip
 8000da4:	40f4      	lsrs	r4, r6
 8000da6:	fa00 f801 	lsl.w	r8, r0, r1
 8000daa:	0c38      	lsrs	r0, r7, #16
 8000dac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000db0:	fbb4 fef0 	udiv	lr, r4, r0
 8000db4:	fa1f fc87 	uxth.w	ip, r7
 8000db8:	fb00 441e 	mls	r4, r0, lr, r4
 8000dbc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc0:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc4:	45a1      	cmp	r9, r4
 8000dc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dca:	d90a      	bls.n	8000de2 <__udivmoddi4+0x1a6>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dd2:	f080 8084 	bcs.w	8000ede <__udivmoddi4+0x2a2>
 8000dd6:	45a1      	cmp	r9, r4
 8000dd8:	f240 8081 	bls.w	8000ede <__udivmoddi4+0x2a2>
 8000ddc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000de0:	443c      	add	r4, r7
 8000de2:	eba4 0409 	sub.w	r4, r4, r9
 8000de6:	fa1f f983 	uxth.w	r9, r3
 8000dea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dee:	fb00 4413 	mls	r4, r0, r3, r4
 8000df2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dfa:	45a4      	cmp	ip, r4
 8000dfc:	d907      	bls.n	8000e0e <__udivmoddi4+0x1d2>
 8000dfe:	193c      	adds	r4, r7, r4
 8000e00:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e04:	d267      	bcs.n	8000ed6 <__udivmoddi4+0x29a>
 8000e06:	45a4      	cmp	ip, r4
 8000e08:	d965      	bls.n	8000ed6 <__udivmoddi4+0x29a>
 8000e0a:	3b02      	subs	r3, #2
 8000e0c:	443c      	add	r4, r7
 8000e0e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e12:	fba0 9302 	umull	r9, r3, r0, r2
 8000e16:	eba4 040c 	sub.w	r4, r4, ip
 8000e1a:	429c      	cmp	r4, r3
 8000e1c:	46ce      	mov	lr, r9
 8000e1e:	469c      	mov	ip, r3
 8000e20:	d351      	bcc.n	8000ec6 <__udivmoddi4+0x28a>
 8000e22:	d04e      	beq.n	8000ec2 <__udivmoddi4+0x286>
 8000e24:	b155      	cbz	r5, 8000e3c <__udivmoddi4+0x200>
 8000e26:	ebb8 030e 	subs.w	r3, r8, lr
 8000e2a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e2e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e32:	40cb      	lsrs	r3, r1
 8000e34:	431e      	orrs	r6, r3
 8000e36:	40cc      	lsrs	r4, r1
 8000e38:	e9c5 6400 	strd	r6, r4, [r5]
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	e750      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000e40:	f1c2 0320 	rsb	r3, r2, #32
 8000e44:	fa20 f103 	lsr.w	r1, r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e50:	4094      	lsls	r4, r2
 8000e52:	430c      	orrs	r4, r1
 8000e54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e58:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e5c:	fa1f f78c 	uxth.w	r7, ip
 8000e60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e64:	fb08 3110 	mls	r1, r8, r0, r3
 8000e68:	0c23      	lsrs	r3, r4, #16
 8000e6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6e:	fb00 f107 	mul.w	r1, r0, r7
 8000e72:	4299      	cmp	r1, r3
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x24c>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e7e:	d22c      	bcs.n	8000eda <__udivmoddi4+0x29e>
 8000e80:	4299      	cmp	r1, r3
 8000e82:	d92a      	bls.n	8000eda <__udivmoddi4+0x29e>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1a5b      	subs	r3, r3, r1
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e90:	fb08 3311 	mls	r3, r8, r1, r3
 8000e94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e98:	fb01 f307 	mul.w	r3, r1, r7
 8000e9c:	42a3      	cmp	r3, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x276>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ea8:	d213      	bcs.n	8000ed2 <__udivmoddi4+0x296>
 8000eaa:	42a3      	cmp	r3, r4
 8000eac:	d911      	bls.n	8000ed2 <__udivmoddi4+0x296>
 8000eae:	3902      	subs	r1, #2
 8000eb0:	4464      	add	r4, ip
 8000eb2:	1ae4      	subs	r4, r4, r3
 8000eb4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eb8:	e739      	b.n	8000d2e <__udivmoddi4+0xf2>
 8000eba:	4604      	mov	r4, r0
 8000ebc:	e6f0      	b.n	8000ca0 <__udivmoddi4+0x64>
 8000ebe:	4608      	mov	r0, r1
 8000ec0:	e706      	b.n	8000cd0 <__udivmoddi4+0x94>
 8000ec2:	45c8      	cmp	r8, r9
 8000ec4:	d2ae      	bcs.n	8000e24 <__udivmoddi4+0x1e8>
 8000ec6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eca:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ece:	3801      	subs	r0, #1
 8000ed0:	e7a8      	b.n	8000e24 <__udivmoddi4+0x1e8>
 8000ed2:	4631      	mov	r1, r6
 8000ed4:	e7ed      	b.n	8000eb2 <__udivmoddi4+0x276>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	e799      	b.n	8000e0e <__udivmoddi4+0x1d2>
 8000eda:	4630      	mov	r0, r6
 8000edc:	e7d4      	b.n	8000e88 <__udivmoddi4+0x24c>
 8000ede:	46d6      	mov	lr, sl
 8000ee0:	e77f      	b.n	8000de2 <__udivmoddi4+0x1a6>
 8000ee2:	4463      	add	r3, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e74d      	b.n	8000d84 <__udivmoddi4+0x148>
 8000ee8:	4606      	mov	r6, r0
 8000eea:	4623      	mov	r3, r4
 8000eec:	4608      	mov	r0, r1
 8000eee:	e70f      	b.n	8000d10 <__udivmoddi4+0xd4>
 8000ef0:	3e02      	subs	r6, #2
 8000ef2:	4463      	add	r3, ip
 8000ef4:	e730      	b.n	8000d58 <__udivmoddi4+0x11c>
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <FEB_CAN_Init>:

uint32_t FEB_CAN_Tx_Mailbox;

// **************************************** Functions ****************************************

void FEB_CAN_Init(void) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	FEB_CAN_Filter_Config();
 8000f00:	f000 f80c 	bl	8000f1c <FEB_CAN_Filter_Config>
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8000f04:	4804      	ldr	r0, [pc, #16]	@ (8000f18 <FEB_CAN_Init+0x1c>)
 8000f06:	f001 fcef 	bl	80028e8 <HAL_CAN_Start>
        // Code Error - Shutdown
	}
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000f0a:	2102      	movs	r1, #2
 8000f0c:	4802      	ldr	r0, [pc, #8]	@ (8000f18 <FEB_CAN_Init+0x1c>)
 8000f0e:	f001 ff56 	bl	8002dbe <HAL_CAN_ActivateNotification>
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	2000011c 	.word	0x2000011c

08000f1c <FEB_CAN_Filter_Config>:

void FEB_CAN_Filter_Config(void) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
	uint8_t filter_bank = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	71fb      	strb	r3, [r7, #7]
    filter_bank = FEB_CAN_ICS_Filter(&hcan1, CAN_RX_FIFO0, filter_bank);
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4804      	ldr	r0, [pc, #16]	@ (8000f40 <FEB_CAN_Filter_Config+0x24>)
 8000f2e:	f000 f823 	bl	8000f78 <FEB_CAN_ICS_Filter>
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]

	// Assign Filter
    // filter_bank = Function(&hcan1, CAN_RX_FIFO0, filter_bank);
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	2000011c 	.word	0x2000011c

08000f44 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &FEB_CAN_Rx_Header, FEB_CAN_Rx_Data) == HAL_OK) {
 8000f4c:	4b08      	ldr	r3, [pc, #32]	@ (8000f70 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000f4e:	4a09      	ldr	r2, [pc, #36]	@ (8000f74 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000f50:	2100      	movs	r1, #0
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f001 fe11 	bl	8002b7a <HAL_CAN_GetRxMessage>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d103      	bne.n	8000f66 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
		FEB_CAN_ICS_Rx_Handler(&FEB_CAN_Rx_Header, FEB_CAN_Rx_Data);
 8000f5e:	4904      	ldr	r1, [pc, #16]	@ (8000f70 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000f60:	4804      	ldr	r0, [pc, #16]	@ (8000f74 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000f62:	f000 f833 	bl	8000fcc <FEB_CAN_ICS_Rx_Handler>
		// Store Message
        // Function(&FEB_CAN_Rx_Header, FEB_CAN_Rx_Data);
	}
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	200000b8 	.word	0x200000b8
 8000f74:	20000094 	.word	0x20000094

08000f78 <FEB_CAN_ICS_Filter>:

uint8_t speed = 10;

// **************************************** Functions ****************************************

uint8_t FEB_CAN_ICS_Filter(CAN_HandleTypeDef* hcan, uint8_t FIFO_assignment, uint8_t filter_bank) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08c      	sub	sp, #48	@ 0x30
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	460b      	mov	r3, r1
 8000f82:	70fb      	strb	r3, [r7, #3]
 8000f84:	4613      	mov	r3, r2
 8000f86:	70bb      	strb	r3, [r7, #2]
    // For multiple filters, create array of filter IDs and loop over IDs.

	CAN_FilterTypeDef filter_config;

    // Standard CAN - 2.0A - 11 bit
    filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
	filter_config.FilterBank = filter_bank;
 8000f8c:	78bb      	ldrb	r3, [r7, #2]
 8000f8e:	61fb      	str	r3, [r7, #28]
	filter_config.FilterFIFOAssignment = FIFO_assignment;
 8000f90:	78fb      	ldrb	r3, [r7, #3]
 8000f92:	61bb      	str	r3, [r7, #24]
	filter_config.FilterIdHigh = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60bb      	str	r3, [r7, #8]
	filter_config.FilterIdLow = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
	filter_config.FilterMaskIdHigh = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	613b      	str	r3, [r7, #16]
	filter_config.FilterMaskIdLow = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
	filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	623b      	str	r3, [r7, #32]
	filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	627b      	str	r3, [r7, #36]	@ 0x24
	filter_config.SlaveStartFilterBank = 27;
 8000fac:	231b      	movs	r3, #27
 8000fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    filter_bank++;
 8000fb0:	78bb      	ldrb	r3, [r7, #2]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	70bb      	strb	r3, [r7, #2]

	if (HAL_CAN_ConfigFilter(hcan, &filter_config) != HAL_OK) {
 8000fb6:	f107 0308 	add.w	r3, r7, #8
 8000fba:	4619      	mov	r1, r3
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f001 fbb3 	bl	8002728 <HAL_CAN_ConfigFilter>
        // Code Error - Shutdown
	}

	return filter_bank;
 8000fc2:	78bb      	ldrb	r3, [r7, #2]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3730      	adds	r7, #48	@ 0x30
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <FEB_CAN_ICS_Rx_Handler>:

void FEB_CAN_ICS_Rx_Handler(CAN_RxHeaderTypeDef *FEB_CAN_Rx_Header, uint8_t FEB_CAN_Rx_Data[]) {
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
	speed = FEB_CAN_Rx_Data[0];
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	781a      	ldrb	r2, [r3, #0]
 8000fda:	4b04      	ldr	r3, [pc, #16]	@ (8000fec <FEB_CAN_ICS_Rx_Handler+0x20>)
 8000fdc:	701a      	strb	r2, [r3, #0]
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000000 	.word	0x20000000

08000ff0 <FEB_CAN_RMS_Torque>:
//	}
//	uint16_t maxTorque = min(MAX_TORQUE, (accumulator_voltage * PEAK_CURRENT) / motor_speed);
//	return maxTorque;
//}

void FEB_CAN_RMS_Torque(void){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	RMSControl.torque = 10*FEB_Normalized_getAcc();
 8000ff4:	f000 f89c 	bl	8001130 <FEB_Normalized_getAcc>
 8000ff8:	eef0 7a40 	vmov.f32	s15, s0
 8000ffc:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001000:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001004:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001008:	ee17 3a90 	vmov	r3, s15
 800100c:	b29a      	uxth	r2, r3
 800100e:	4b03      	ldr	r3, [pc, #12]	@ (800101c <FEB_CAN_RMS_Torque+0x2c>)
 8001010:	801a      	strh	r2, [r3, #0]
	FEB_CAN_RMS_Transmit_updateTorque();
 8001012:	f000 f805 	bl	8001020 <FEB_CAN_RMS_Transmit_updateTorque>
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200000c4 	.word	0x200000c4

08001020 <FEB_CAN_RMS_Transmit_updateTorque>:

	// Select CAN msg to broadcast
	FEB_CAN_RMS_Transmit_paramBroadcast();
}

void FEB_CAN_RMS_Transmit_updateTorque(void) { //TODO: Create Custom Transmit function and update below call
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  //uint8_t message_data[8] = {RMSControl.torque & 0xFF, RMSControl.torque >> 8, 0, 0, 0, RMSControl.enabled, 0, 0};
	FEB_CAN_Tx_Header.DLC = 8;
 8001024:	4b1e      	ldr	r3, [pc, #120]	@ (80010a0 <FEB_CAN_RMS_Transmit_updateTorque+0x80>)
 8001026:	2208      	movs	r2, #8
 8001028:	611a      	str	r2, [r3, #16]
	FEB_CAN_Tx_Header.StdId = 0x0C0; //ID for sending paramater messages for RMS
 800102a:	4b1d      	ldr	r3, [pc, #116]	@ (80010a0 <FEB_CAN_RMS_Transmit_updateTorque+0x80>)
 800102c:	22c0      	movs	r2, #192	@ 0xc0
 800102e:	601a      	str	r2, [r3, #0]
	FEB_CAN_Tx_Header.IDE = CAN_ID_STD;
 8001030:	4b1b      	ldr	r3, [pc, #108]	@ (80010a0 <FEB_CAN_RMS_Transmit_updateTorque+0x80>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
	FEB_CAN_Tx_Header.RTR = CAN_RTR_DATA;
 8001036:	4b1a      	ldr	r3, [pc, #104]	@ (80010a0 <FEB_CAN_RMS_Transmit_updateTorque+0x80>)
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
	FEB_CAN_Tx_Header.TransmitGlobalTime = DISABLE;
 800103c:	4b18      	ldr	r3, [pc, #96]	@ (80010a0 <FEB_CAN_RMS_Transmit_updateTorque+0x80>)
 800103e:	2200      	movs	r2, #0
 8001040:	751a      	strb	r2, [r3, #20]

	// Copy data to Tx buffer
	FEB_CAN_Tx_Data[0] = RMSControl.torque & 0xFF;
 8001042:	4b18      	ldr	r3, [pc, #96]	@ (80010a4 <FEB_CAN_RMS_Transmit_updateTorque+0x84>)
 8001044:	881b      	ldrh	r3, [r3, #0]
 8001046:	b2da      	uxtb	r2, r3
 8001048:	4b17      	ldr	r3, [pc, #92]	@ (80010a8 <FEB_CAN_RMS_Transmit_updateTorque+0x88>)
 800104a:	701a      	strb	r2, [r3, #0]
	FEB_CAN_Tx_Data[1] = RMSControl.torque >> 8;
 800104c:	4b15      	ldr	r3, [pc, #84]	@ (80010a4 <FEB_CAN_RMS_Transmit_updateTorque+0x84>)
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	0a1b      	lsrs	r3, r3, #8
 8001052:	b29b      	uxth	r3, r3
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4b14      	ldr	r3, [pc, #80]	@ (80010a8 <FEB_CAN_RMS_Transmit_updateTorque+0x88>)
 8001058:	705a      	strb	r2, [r3, #1]
	FEB_CAN_Tx_Data[2] = 0;
 800105a:	4b13      	ldr	r3, [pc, #76]	@ (80010a8 <FEB_CAN_RMS_Transmit_updateTorque+0x88>)
 800105c:	2200      	movs	r2, #0
 800105e:	709a      	strb	r2, [r3, #2]
	FEB_CAN_Tx_Data[3] = 0;
 8001060:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <FEB_CAN_RMS_Transmit_updateTorque+0x88>)
 8001062:	2200      	movs	r2, #0
 8001064:	70da      	strb	r2, [r3, #3]
	FEB_CAN_Tx_Data[4] = 0;
 8001066:	4b10      	ldr	r3, [pc, #64]	@ (80010a8 <FEB_CAN_RMS_Transmit_updateTorque+0x88>)
 8001068:	2200      	movs	r2, #0
 800106a:	711a      	strb	r2, [r3, #4]
	FEB_CAN_Tx_Data[5] = RMSControl.enabled;
 800106c:	4b0d      	ldr	r3, [pc, #52]	@ (80010a4 <FEB_CAN_RMS_Transmit_updateTorque+0x84>)
 800106e:	789a      	ldrb	r2, [r3, #2]
 8001070:	4b0d      	ldr	r3, [pc, #52]	@ (80010a8 <FEB_CAN_RMS_Transmit_updateTorque+0x88>)
 8001072:	715a      	strb	r2, [r3, #5]
	FEB_CAN_Tx_Data[6] = 0;
 8001074:	4b0c      	ldr	r3, [pc, #48]	@ (80010a8 <FEB_CAN_RMS_Transmit_updateTorque+0x88>)
 8001076:	2200      	movs	r2, #0
 8001078:	719a      	strb	r2, [r3, #6]
	FEB_CAN_Tx_Data[7] = 0;
 800107a:	4b0b      	ldr	r3, [pc, #44]	@ (80010a8 <FEB_CAN_RMS_Transmit_updateTorque+0x88>)
 800107c:	2200      	movs	r2, #0
 800107e:	71da      	strb	r2, [r3, #7]

	// Delay until mailbox available
	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0) {}
 8001080:	bf00      	nop
 8001082:	480a      	ldr	r0, [pc, #40]	@ (80010ac <FEB_CAN_RMS_Transmit_updateTorque+0x8c>)
 8001084:	f001 fd44 	bl	8002b10 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d0f9      	beq.n	8001082 <FEB_CAN_RMS_Transmit_updateTorque+0x62>

	// Add Tx data to mailbox
	if (HAL_CAN_AddTxMessage(&hcan1, &FEB_CAN_Tx_Header, FEB_CAN_Tx_Data, &FEB_CAN_Tx_Mailbox) != HAL_OK) {
 800108e:	4b08      	ldr	r3, [pc, #32]	@ (80010b0 <FEB_CAN_RMS_Transmit_updateTorque+0x90>)
 8001090:	4a05      	ldr	r2, [pc, #20]	@ (80010a8 <FEB_CAN_RMS_Transmit_updateTorque+0x88>)
 8001092:	4903      	ldr	r1, [pc, #12]	@ (80010a0 <FEB_CAN_RMS_Transmit_updateTorque+0x80>)
 8001094:	4805      	ldr	r0, [pc, #20]	@ (80010ac <FEB_CAN_RMS_Transmit_updateTorque+0x8c>)
 8001096:	f001 fc6b 	bl	8002970 <HAL_CAN_AddTxMessage>
		// Code Error - Shutdown
	}
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	2000007c 	.word	0x2000007c
 80010a4:	200000c4 	.word	0x200000c4
 80010a8:	200000b0 	.word	0x200000b0
 80010ac:	2000011c 	.word	0x2000011c
 80010b0:	200000c0 	.word	0x200000c0

080010b4 <FEB_Main_Setup>:
char buf[128];
uint8_t buf_len; //stolen from Main_Setup (SN2)

// ********************************** Functions **********************************

void FEB_Main_Setup(void){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
//	HAL_ADCEx_InjectedStart(&hadc1); //@lovehate - where does this go
//	FEB_Timer_Init();
//	FEB_TPS2482_Setup();
	FEB_CAN_Init(); //FEB_CAN_Init() // The transceiver must be connected otherwise you get sent into an infinite loop
 80010b8:	f7ff ff20 	bl	8000efc <FEB_CAN_Init>
//	FEB_CAN_RMS_Setup();

}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <FEB_Main_While>:

void FEB_Main_While(void){
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
	FEB_Read_Accel_Pedal();
 80010c4:	f000 f844 	bl	8001150 <FEB_Read_Accel_Pedal>
//	FEB_CAN_RMS_Torque();
//	FEB_Normalized_CAN_sendBrake();
//	FEB_TPS2482_sendReadings(); //TODO: create transmit function for TPS2482
//	FEB_CAN_RMS_torqueTransmit(); //UART for debugging
//	FEB_CAN_RMS_Transmit_updateTorque();
	FEB_Normalized_updateAcc();
 80010c8:	f000 f8c8 	bl	800125c <FEB_Normalized_updateAcc>
	FEB_CAN_RMS_Torque();
 80010cc:	f7ff ff90 	bl	8000ff0 <FEB_CAN_RMS_Torque>
//	FEB_CAN_BSPD_Transmit();
	HAL_Delay(100);
 80010d0:	2064      	movs	r0, #100	@ 0x64
 80010d2:	f000 fe2d 	bl	8001d30 <HAL_Delay>
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <FEB_Read_ADC>:
float normalized_brake;
bool isImpl = false;

// **************************************** Functions ****************************************

uint16_t FEB_Read_ADC(uint32_t channel){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig={0};
 80010e4:	f107 0308 	add.w	r3, r7, #8
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
	sConfig.Channel = channel;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80010f6:	2301      	movs	r3, #1
 80010f8:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80010fa:	2307      	movs	r3, #7
 80010fc:	613b      	str	r3, [r7, #16]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fe:	f107 0308 	add.w	r3, r7, #8
 8001102:	4619      	mov	r1, r3
 8001104:	4809      	ldr	r0, [pc, #36]	@ (800112c <FEB_Read_ADC+0x50>)
 8001106:	f000 ffe5 	bl	80020d4 <HAL_ADC_ConfigChannel>
	{
//	   Error_Handler();
	}

	HAL_ADC_Start(&hadc1);
 800110a:	4808      	ldr	r0, [pc, #32]	@ (800112c <FEB_Read_ADC+0x50>)
 800110c:	f000 fe78 	bl	8001e00 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8001110:	2164      	movs	r1, #100	@ 0x64
 8001112:	4806      	ldr	r0, [pc, #24]	@ (800112c <FEB_Read_ADC+0x50>)
 8001114:	f000 ff46 	bl	8001fa4 <HAL_ADC_PollForConversion>
	return (uint16_t)HAL_ADC_GetValue(&hadc1);
 8001118:	4804      	ldr	r0, [pc, #16]	@ (800112c <FEB_Read_ADC+0x50>)
 800111a:	f000 ffce 	bl	80020ba <HAL_ADC_GetValue>
 800111e:	4603      	mov	r3, r0
 8001120:	b29b      	uxth	r3, r3

}
 8001122:	4618      	mov	r0, r3
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	200000d4 	.word	0x200000d4

08001130 <FEB_Normalized_getAcc>:

float FEB_Normalized_getAcc(){
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
	return normalized_acc;
 8001134:	4b04      	ldr	r3, [pc, #16]	@ (8001148 <FEB_Normalized_getAcc+0x18>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	ee07 3a90 	vmov	s15, r3
}
 800113c:	eeb0 0a67 	vmov.f32	s0, s15
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	200000c8 	.word	0x200000c8
 800114c:	00000000 	.word	0x00000000

08001150 <FEB_Read_Accel_Pedal>:

void FEB_Normalized_setAcc0(){
	normalized_acc = 0.0;
}

void FEB_Read_Accel_Pedal() {
 8001150:	b580      	push	{r7, lr}
 8001152:	b0a6      	sub	sp, #152	@ 0x98
 8001154:	af00      	add	r7, sp, #0
	uint16_t accel_pedal_1_raw = FEB_Read_ADC(ACC_PEDAL_1);
 8001156:	2001      	movs	r0, #1
 8001158:	f7ff ffc0 	bl	80010dc <FEB_Read_ADC>
 800115c:	4603      	mov	r3, r0
 800115e:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

	float accel_pedal_1_position = 0.03256 * accel_pedal_1_raw - 13.4;
 8001162:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff f9fc 	bl	8000564 <__aeabi_i2d>
 800116c:	a337      	add	r3, pc, #220	@ (adr r3, 800124c <FEB_Read_Accel_Pedal+0xfc>)
 800116e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001172:	f7ff fa61 	bl	8000638 <__aeabi_dmul>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	4610      	mov	r0, r2
 800117c:	4619      	mov	r1, r3
 800117e:	a335      	add	r3, pc, #212	@ (adr r3, 8001254 <FEB_Read_Accel_Pedal+0x104>)
 8001180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001184:	f7ff f8a0 	bl	80002c8 <__aeabi_dsub>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4610      	mov	r0, r2
 800118e:	4619      	mov	r1, r3
 8001190:	f7ff fcec 	bl	8000b6c <__aeabi_d2f>
 8001194:	4603      	mov	r3, r0
 8001196:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

	if (accel_pedal_1_position > 100.0) {
 800119a:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 800119e:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001238 <FEB_Read_Accel_Pedal+0xe8>
 80011a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011aa:	dd02      	ble.n	80011b2 <FEB_Read_Accel_Pedal+0x62>
		accel_pedal_1_position = 100.0;
 80011ac:	4b23      	ldr	r3, [pc, #140]	@ (800123c <FEB_Read_Accel_Pedal+0xec>)
 80011ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	}

	if (accel_pedal_1_position < 0.0) {
 80011b2:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 80011b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011be:	d503      	bpl.n	80011c8 <FEB_Read_Accel_Pedal+0x78>
		accel_pedal_1_position = 0.0;
 80011c0:	f04f 0300 	mov.w	r3, #0
 80011c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	}

	int accel_pedal_1_position_int1 = accel_pedal_1_position;
 80011c8:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 80011cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011d0:	ee17 3a90 	vmov	r3, s15
 80011d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	float accel_pedal_1_position_frac = accel_pedal_1_position - accel_pedal_1_position_int1;
 80011d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80011dc:	ee07 3a90 	vmov	s15, r3
 80011e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e4:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 80011e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ec:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
	int accel_pedal_1_position_int2 = accel_pedal_1_position_frac * 1000;
 80011f0:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 80011f4:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001240 <FEB_Read_Accel_Pedal+0xf0>
 80011f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001200:	ee17 3a90 	vmov	r3, s15
 8001204:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

	char buf[128];
	sprintf(buf, "[SENSOR] Accelerator Position: %d.%d%%\n", accel_pedal_1_position_int1, accel_pedal_1_position_int2);
 8001208:	1d38      	adds	r0, r7, #4
 800120a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800120e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001212:	490c      	ldr	r1, [pc, #48]	@ (8001244 <FEB_Read_Accel_Pedal+0xf4>)
 8001214:	f003 fe20 	bl	8004e58 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)buf, strlen(buf), HAL_MAX_DELAY);
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	4618      	mov	r0, r3
 800121c:	f7fe fff8 	bl	8000210 <strlen>
 8001220:	4603      	mov	r3, r0
 8001222:	b29a      	uxth	r2, r3
 8001224:	1d39      	adds	r1, r7, #4
 8001226:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800122a:	4807      	ldr	r0, [pc, #28]	@ (8001248 <FEB_Read_Accel_Pedal+0xf8>)
 800122c:	f003 fa58 	bl	80046e0 <HAL_UART_Transmit>
}
 8001230:	bf00      	nop
 8001232:	3798      	adds	r7, #152	@ 0x98
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	42c80000 	.word	0x42c80000
 800123c:	42c80000 	.word	0x42c80000
 8001240:	447a0000 	.word	0x447a0000
 8001244:	080057b0 	.word	0x080057b0
 8001248:	20000198 	.word	0x20000198
 800124c:	4e50c5eb 	.word	0x4e50c5eb
 8001250:	3fa0abb4 	.word	0x3fa0abb4
 8001254:	cccccccd 	.word	0xcccccccd
 8001258:	402acccc 	.word	0x402acccc

0800125c <FEB_Normalized_updateAcc>:

void FEB_Normalized_updateAcc(){
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
	normalized_acc = FEB_Normalized_Acc_Pedals();
 8001260:	f000 f80a 	bl	8001278 <FEB_Normalized_Acc_Pedals>
 8001264:	eef0 7a40 	vmov.f32	s15, s0
 8001268:	4b02      	ldr	r3, [pc, #8]	@ (8001274 <FEB_Normalized_updateAcc+0x18>)
 800126a:	edc3 7a00 	vstr	s15, [r3]
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200000c8 	.word	0x200000c8

08001278 <FEB_Normalized_Acc_Pedals>:

float FEB_Normalized_Acc_Pedals(){
 8001278:	b580      	push	{r7, lr}
 800127a:	b0a6      	sub	sp, #152	@ 0x98
 800127c:	af00      	add	r7, sp, #0
	// raw ADC readings of the two acc pedal sensors
	uint16_t acc_pedal_1 = FEB_Read_ADC(ACC_PEDAL_1);
 800127e:	2001      	movs	r0, #1
 8001280:	f7ff ff2c 	bl	80010dc <FEB_Read_ADC>
 8001284:	4603      	mov	r3, r0
 8001286:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
	uint16_t acc_pedal_2 = FEB_Read_ADC(ACC_PEDAL_2);
 800128a:	2000      	movs	r0, #0
 800128c:	f7ff ff26 	bl	80010dc <FEB_Read_ADC>
 8001290:	4603      	mov	r3, r0
 8001292:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
	char buf[128];
	uint8_t buf_len;
	buf_len = sprintf(buf, "acc1:%d acc2:%d\n", acc_pedal_1, acc_pedal_2);
 8001296:	f8b7 2096 	ldrh.w	r2, [r7, #150]	@ 0x96
 800129a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800129e:	1d38      	adds	r0, r7, #4
 80012a0:	496f      	ldr	r1, [pc, #444]	@ (8001460 <FEB_Normalized_Acc_Pedals+0x1e8>)
 80012a2:	f003 fdd9 	bl	8004e58 <siprintf>
 80012a6:	4603      	mov	r3, r0
 80012a8:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
	HAL_UART_Transmit(&huart2,(uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 80012ac:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	1d39      	adds	r1, r7, #4
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012b8:	486a      	ldr	r0, [pc, #424]	@ (8001464 <FEB_Normalized_Acc_Pedals+0x1ec>)
 80012ba:	f003 fa11 	bl	80046e0 <HAL_UART_Transmit>


	// check implausibility for shorting
	if (acc_pedal_1 < Sensor_Min || acc_pedal_1 > Sensor_Max
 80012be:	f240 1299 	movw	r2, #409	@ 0x199
 80012c2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d320      	bcc.n	800130c <FEB_Normalized_Acc_Pedals+0x94>
 80012ca:	f640 6265 	movw	r2, #3685	@ 0xe65
 80012ce:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d81a      	bhi.n	800130c <FEB_Normalized_Acc_Pedals+0x94>
			|| acc_pedal_2 < Sensor_Min || acc_pedal_2 > Sensor_Max
 80012d6:	f240 1299 	movw	r2, #409	@ 0x199
 80012da:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80012de:	4293      	cmp	r3, r2
 80012e0:	d314      	bcc.n	800130c <FEB_Normalized_Acc_Pedals+0x94>
 80012e2:	f640 6265 	movw	r2, #3685	@ 0xe65
 80012e6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d80e      	bhi.n	800130c <FEB_Normalized_Acc_Pedals+0x94>
			|| abs(acc_pedal_1 - acc_pedal_2) < 100) {
 80012ee:	f8b7 2096 	ldrh.w	r2, [r7, #150]	@ 0x96
 80012f2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	f113 0f63 	cmn.w	r3, #99	@ 0x63
 80012fc:	db0c      	blt.n	8001318 <FEB_Normalized_Acc_Pedals+0xa0>
 80012fe:	f8b7 2096 	ldrh.w	r2, [r7, #150]	@ 0x96
 8001302:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b63      	cmp	r3, #99	@ 0x63
 800130a:	dc05      	bgt.n	8001318 <FEB_Normalized_Acc_Pedals+0xa0>
		isImpl = true;
 800130c:	4b56      	ldr	r3, [pc, #344]	@ (8001468 <FEB_Normalized_Acc_Pedals+0x1f0>)
 800130e:	2201      	movs	r2, #1
 8001310:	701a      	strb	r2, [r3, #0]
		return 0.0;
 8001312:	f04f 0300 	mov.w	r3, #0
 8001316:	e088      	b.n	800142a <FEB_Normalized_Acc_Pedals+0x1b2>
	}

	//convert to % travel
	// sensor 1 has positive slope
	float ped1_normalized = (acc_pedal_1 - ACC_PEDAL_1_START)/ (ACC_PEDAL_1_END - ACC_PEDAL_1_START);
 8001318:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff f921 	bl	8000564 <__aeabi_i2d>
 8001322:	a345      	add	r3, pc, #276	@ (adr r3, 8001438 <FEB_Normalized_Acc_Pedals+0x1c0>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7fe ffce 	bl	80002c8 <__aeabi_dsub>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	a342      	add	r3, pc, #264	@ (adr r3, 8001440 <FEB_Normalized_Acc_Pedals+0x1c8>)
 8001336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133a:	f7ff faa7 	bl	800088c <__aeabi_ddiv>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4610      	mov	r0, r2
 8001344:	4619      	mov	r1, r3
 8001346:	f7ff fc11 	bl	8000b6c <__aeabi_d2f>
 800134a:	4603      	mov	r3, r0
 800134c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	// sensor 2 has negative slope
	// TODO: uncomment this when ped2 is connected

//	float ped2_normalized = (acc_pedal_2 - ACC_PEDAL_2_START) / (ACC_PEDAL_2_END - ACC_PEDAL_2_START);
	float ped2_normalized = 0.0;
 8001350:	f04f 0300 	mov.w	r3, #0
 8001354:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
//		return 0.0;
//	}

	// TODO: uncomment this when ped2 is connected
//	float final_normalized = 0.5*(ped1_normalized + ped2_normalized);
	float final_normalized = 0.5*(ped1_normalized + ped1_normalized);
 8001358:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800135c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001360:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001364:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001368:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84


	// Implausiblity check if both pedals are stepped
	if (normalized_brake > 0.2 && normalized_acc > 0.1) {
 800136c:	4b3f      	ldr	r3, [pc, #252]	@ (800146c <FEB_Normalized_Acc_Pedals+0x1f4>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff f909 	bl	8000588 <__aeabi_f2d>
 8001376:	a334      	add	r3, pc, #208	@ (adr r3, 8001448 <FEB_Normalized_Acc_Pedals+0x1d0>)
 8001378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137c:	f7ff fbec 	bl	8000b58 <__aeabi_dcmpgt>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d00f      	beq.n	80013a6 <FEB_Normalized_Acc_Pedals+0x12e>
 8001386:	4b3a      	ldr	r3, [pc, #232]	@ (8001470 <FEB_Normalized_Acc_Pedals+0x1f8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff f8fc 	bl	8000588 <__aeabi_f2d>
 8001390:	a32f      	add	r3, pc, #188	@ (adr r3, 8001450 <FEB_Normalized_Acc_Pedals+0x1d8>)
 8001392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001396:	f7ff fbdf 	bl	8000b58 <__aeabi_dcmpgt>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d002      	beq.n	80013a6 <FEB_Normalized_Acc_Pedals+0x12e>
		isImpl = true;
 80013a0:	4b31      	ldr	r3, [pc, #196]	@ (8001468 <FEB_Normalized_Acc_Pedals+0x1f0>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	701a      	strb	r2, [r3, #0]
	}

	// recover from implausibility if acc pedal is not 5% less
	if (final_normalized < 0.05 && isImpl) {
 80013a6:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80013aa:	f7ff f8ed 	bl	8000588 <__aeabi_f2d>
 80013ae:	a32a      	add	r3, pc, #168	@ (adr r3, 8001458 <FEB_Normalized_Acc_Pedals+0x1e0>)
 80013b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b4:	f7ff fbb2 	bl	8000b1c <__aeabi_dcmplt>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d006      	beq.n	80013cc <FEB_Normalized_Acc_Pedals+0x154>
 80013be:	4b2a      	ldr	r3, [pc, #168]	@ (8001468 <FEB_Normalized_Acc_Pedals+0x1f0>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d002      	beq.n	80013cc <FEB_Normalized_Acc_Pedals+0x154>
		isImpl = false;
 80013c6:	4b28      	ldr	r3, [pc, #160]	@ (8001468 <FEB_Normalized_Acc_Pedals+0x1f0>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	701a      	strb	r2, [r3, #0]
	}

	if (!isImpl) {
 80013cc:	4b26      	ldr	r3, [pc, #152]	@ (8001468 <FEB_Normalized_Acc_Pedals+0x1f0>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	f083 0301 	eor.w	r3, r3, #1
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d025      	beq.n	8001426 <FEB_Normalized_Acc_Pedals+0x1ae>
		final_normalized = final_normalized > 1 ? 1 : final_normalized;
 80013da:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80013de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80013e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ea:	dd02      	ble.n	80013f2 <FEB_Normalized_Acc_Pedals+0x17a>
 80013ec:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80013f0:	e001      	b.n	80013f6 <FEB_Normalized_Acc_Pedals+0x17e>
 80013f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80013f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		final_normalized = final_normalized < 0.05 ? 0 : final_normalized;
 80013fa:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80013fe:	f7ff f8c3 	bl	8000588 <__aeabi_f2d>
 8001402:	a315      	add	r3, pc, #84	@ (adr r3, 8001458 <FEB_Normalized_Acc_Pedals+0x1e0>)
 8001404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001408:	f7ff fb88 	bl	8000b1c <__aeabi_dcmplt>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d002      	beq.n	8001418 <FEB_Normalized_Acc_Pedals+0x1a0>
 8001412:	f04f 0300 	mov.w	r3, #0
 8001416:	e001      	b.n	800141c <FEB_Normalized_Acc_Pedals+0x1a4>
 8001418:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800141c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		return final_normalized;
 8001420:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001424:	e001      	b.n	800142a <FEB_Normalized_Acc_Pedals+0x1b2>
	} else {
		return 0.0;
 8001426:	f04f 0300 	mov.w	r3, #0
	}
}
 800142a:	ee07 3a90 	vmov	s15, r3
 800142e:	eeb0 0a67 	vmov.f32	s0, s15
 8001432:	3798      	adds	r7, #152	@ 0x98
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	00000000 	.word	0x00000000
 800143c:	4079a000 	.word	0x4079a000
 8001440:	00000000 	.word	0x00000000
 8001444:	40a70c00 	.word	0x40a70c00
 8001448:	9999999a 	.word	0x9999999a
 800144c:	3fc99999 	.word	0x3fc99999
 8001450:	9999999a 	.word	0x9999999a
 8001454:	3fb99999 	.word	0x3fb99999
 8001458:	9999999a 	.word	0x9999999a
 800145c:	3fa99999 	.word	0x3fa99999
 8001460:	080057d8 	.word	0x080057d8
 8001464:	20000198 	.word	0x20000198
 8001468:	200000d0 	.word	0x200000d0
 800146c:	200000cc 	.word	0x200000cc
 8001470:	200000c8 	.word	0x200000c8

08001474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001478:	f000 fbe8 	bl	8001c4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800147c:	f000 f810 	bl	80014a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001480:	f000 f94a 	bl	8001718 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001484:	f000 f91e 	bl	80016c4 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8001488:	f000 f8b8 	bl	80015fc <MX_CAN1_Init>
  MX_I2C1_Init();
 800148c:	f000 f8ec 	bl	8001668 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001490:	f000 f872 	bl	8001578 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  FEB_Main_Setup();
 8001494:	f7ff fe0e 	bl	80010b4 <FEB_Main_Setup>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  FEB_Main_While();
 8001498:	f7ff fe12 	bl	80010c0 <FEB_Main_While>
 800149c:	e7fc      	b.n	8001498 <main+0x24>
	...

080014a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b094      	sub	sp, #80	@ 0x50
 80014a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a6:	f107 031c 	add.w	r3, r7, #28
 80014aa:	2234      	movs	r2, #52	@ 0x34
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f003 fcf2 	bl	8004e98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b4:	f107 0308 	add.w	r3, r7, #8
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c4:	2300      	movs	r3, #0
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	4b29      	ldr	r3, [pc, #164]	@ (8001570 <SystemClock_Config+0xd0>)
 80014ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014cc:	4a28      	ldr	r2, [pc, #160]	@ (8001570 <SystemClock_Config+0xd0>)
 80014ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80014d4:	4b26      	ldr	r3, [pc, #152]	@ (8001570 <SystemClock_Config+0xd0>)
 80014d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e0:	2300      	movs	r3, #0
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	4b23      	ldr	r3, [pc, #140]	@ (8001574 <SystemClock_Config+0xd4>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a22      	ldr	r2, [pc, #136]	@ (8001574 <SystemClock_Config+0xd4>)
 80014ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	4b20      	ldr	r3, [pc, #128]	@ (8001574 <SystemClock_Config+0xd4>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014f8:	603b      	str	r3, [r7, #0]
 80014fa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014fc:	2301      	movs	r3, #1
 80014fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001500:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001504:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001506:	2302      	movs	r3, #2
 8001508:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800150a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800150e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001510:	2304      	movs	r3, #4
 8001512:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001514:	23a0      	movs	r3, #160	@ 0xa0
 8001516:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001518:	2302      	movs	r3, #2
 800151a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800151c:	2302      	movs	r3, #2
 800151e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001520:	2302      	movs	r3, #2
 8001522:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001524:	f107 031c 	add.w	r3, r7, #28
 8001528:	4618      	mov	r0, r3
 800152a:	f002 fdeb 	bl	8004104 <HAL_RCC_OscConfig>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001534:	f000 f95e 	bl	80017f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001538:	230f      	movs	r3, #15
 800153a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800153c:	2302      	movs	r3, #2
 800153e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001540:	2300      	movs	r3, #0
 8001542:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001544:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001548:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800154a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800154e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001550:	f107 0308 	add.w	r3, r7, #8
 8001554:	2105      	movs	r1, #5
 8001556:	4618      	mov	r0, r3
 8001558:	f002 fa8a 	bl	8003a70 <HAL_RCC_ClockConfig>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001562:	f000 f947 	bl	80017f4 <Error_Handler>
  }
}
 8001566:	bf00      	nop
 8001568:	3750      	adds	r7, #80	@ 0x50
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800
 8001574:	40007000 	.word	0x40007000

08001578 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800157e:	463b      	mov	r3, r7
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800158a:	4b19      	ldr	r3, [pc, #100]	@ (80015f0 <MX_ADC1_Init+0x78>)
 800158c:	4a19      	ldr	r2, [pc, #100]	@ (80015f4 <MX_ADC1_Init+0x7c>)
 800158e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001590:	4b17      	ldr	r3, [pc, #92]	@ (80015f0 <MX_ADC1_Init+0x78>)
 8001592:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001596:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001598:	4b15      	ldr	r3, [pc, #84]	@ (80015f0 <MX_ADC1_Init+0x78>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800159e:	4b14      	ldr	r3, [pc, #80]	@ (80015f0 <MX_ADC1_Init+0x78>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015a4:	4b12      	ldr	r3, [pc, #72]	@ (80015f0 <MX_ADC1_Init+0x78>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015aa:	4b11      	ldr	r3, [pc, #68]	@ (80015f0 <MX_ADC1_Init+0x78>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015b2:	4b0f      	ldr	r3, [pc, #60]	@ (80015f0 <MX_ADC1_Init+0x78>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015b8:	4b0d      	ldr	r3, [pc, #52]	@ (80015f0 <MX_ADC1_Init+0x78>)
 80015ba:	4a0f      	ldr	r2, [pc, #60]	@ (80015f8 <MX_ADC1_Init+0x80>)
 80015bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015be:	4b0c      	ldr	r3, [pc, #48]	@ (80015f0 <MX_ADC1_Init+0x78>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80015c4:	4b0a      	ldr	r3, [pc, #40]	@ (80015f0 <MX_ADC1_Init+0x78>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015ca:	4b09      	ldr	r3, [pc, #36]	@ (80015f0 <MX_ADC1_Init+0x78>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015d2:	4b07      	ldr	r3, [pc, #28]	@ (80015f0 <MX_ADC1_Init+0x78>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015d8:	4805      	ldr	r0, [pc, #20]	@ (80015f0 <MX_ADC1_Init+0x78>)
 80015da:	f000 fbcd 	bl	8001d78 <HAL_ADC_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80015e4:	f000 f906 	bl	80017f4 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015e8:	bf00      	nop
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	200000d4 	.word	0x200000d4
 80015f4:	40012000 	.word	0x40012000
 80015f8:	0f000001 	.word	0x0f000001

080015fc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001600:	4b17      	ldr	r3, [pc, #92]	@ (8001660 <MX_CAN1_Init+0x64>)
 8001602:	4a18      	ldr	r2, [pc, #96]	@ (8001664 <MX_CAN1_Init+0x68>)
 8001604:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001606:	4b16      	ldr	r3, [pc, #88]	@ (8001660 <MX_CAN1_Init+0x64>)
 8001608:	2210      	movs	r2, #16
 800160a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800160c:	4b14      	ldr	r3, [pc, #80]	@ (8001660 <MX_CAN1_Init+0x64>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001612:	4b13      	ldr	r3, [pc, #76]	@ (8001660 <MX_CAN1_Init+0x64>)
 8001614:	2200      	movs	r2, #0
 8001616:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001618:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <MX_CAN1_Init+0x64>)
 800161a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800161e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001620:	4b0f      	ldr	r3, [pc, #60]	@ (8001660 <MX_CAN1_Init+0x64>)
 8001622:	2200      	movs	r2, #0
 8001624:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001626:	4b0e      	ldr	r3, [pc, #56]	@ (8001660 <MX_CAN1_Init+0x64>)
 8001628:	2200      	movs	r2, #0
 800162a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800162c:	4b0c      	ldr	r3, [pc, #48]	@ (8001660 <MX_CAN1_Init+0x64>)
 800162e:	2200      	movs	r2, #0
 8001630:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001632:	4b0b      	ldr	r3, [pc, #44]	@ (8001660 <MX_CAN1_Init+0x64>)
 8001634:	2200      	movs	r2, #0
 8001636:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001638:	4b09      	ldr	r3, [pc, #36]	@ (8001660 <MX_CAN1_Init+0x64>)
 800163a:	2200      	movs	r2, #0
 800163c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800163e:	4b08      	ldr	r3, [pc, #32]	@ (8001660 <MX_CAN1_Init+0x64>)
 8001640:	2200      	movs	r2, #0
 8001642:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001644:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <MX_CAN1_Init+0x64>)
 8001646:	2200      	movs	r2, #0
 8001648:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800164a:	4805      	ldr	r0, [pc, #20]	@ (8001660 <MX_CAN1_Init+0x64>)
 800164c:	f000 ff70 	bl	8002530 <HAL_CAN_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001656:	f000 f8cd 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	2000011c 	.word	0x2000011c
 8001664:	40006400 	.word	0x40006400

08001668 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800166c:	4b12      	ldr	r3, [pc, #72]	@ (80016b8 <MX_I2C1_Init+0x50>)
 800166e:	4a13      	ldr	r2, [pc, #76]	@ (80016bc <MX_I2C1_Init+0x54>)
 8001670:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001672:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <MX_I2C1_Init+0x50>)
 8001674:	4a12      	ldr	r2, [pc, #72]	@ (80016c0 <MX_I2C1_Init+0x58>)
 8001676:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001678:	4b0f      	ldr	r3, [pc, #60]	@ (80016b8 <MX_I2C1_Init+0x50>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800167e:	4b0e      	ldr	r3, [pc, #56]	@ (80016b8 <MX_I2C1_Init+0x50>)
 8001680:	2200      	movs	r2, #0
 8001682:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001684:	4b0c      	ldr	r3, [pc, #48]	@ (80016b8 <MX_I2C1_Init+0x50>)
 8001686:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800168a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800168c:	4b0a      	ldr	r3, [pc, #40]	@ (80016b8 <MX_I2C1_Init+0x50>)
 800168e:	2200      	movs	r2, #0
 8001690:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001692:	4b09      	ldr	r3, [pc, #36]	@ (80016b8 <MX_I2C1_Init+0x50>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001698:	4b07      	ldr	r3, [pc, #28]	@ (80016b8 <MX_I2C1_Init+0x50>)
 800169a:	2200      	movs	r2, #0
 800169c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800169e:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <MX_I2C1_Init+0x50>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016a4:	4804      	ldr	r0, [pc, #16]	@ (80016b8 <MX_I2C1_Init+0x50>)
 80016a6:	f002 f89f 	bl	80037e8 <HAL_I2C_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016b0:	f000 f8a0 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000144 	.word	0x20000144
 80016bc:	40005400 	.word	0x40005400
 80016c0:	000186a0 	.word	0x000186a0

080016c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016c8:	4b11      	ldr	r3, [pc, #68]	@ (8001710 <MX_USART2_UART_Init+0x4c>)
 80016ca:	4a12      	ldr	r2, [pc, #72]	@ (8001714 <MX_USART2_UART_Init+0x50>)
 80016cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016ce:	4b10      	ldr	r3, [pc, #64]	@ (8001710 <MX_USART2_UART_Init+0x4c>)
 80016d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001710 <MX_USART2_UART_Init+0x4c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001710 <MX_USART2_UART_Init+0x4c>)
 80016de:	2200      	movs	r2, #0
 80016e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001710 <MX_USART2_UART_Init+0x4c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016e8:	4b09      	ldr	r3, [pc, #36]	@ (8001710 <MX_USART2_UART_Init+0x4c>)
 80016ea:	220c      	movs	r2, #12
 80016ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ee:	4b08      	ldr	r3, [pc, #32]	@ (8001710 <MX_USART2_UART_Init+0x4c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f4:	4b06      	ldr	r3, [pc, #24]	@ (8001710 <MX_USART2_UART_Init+0x4c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016fa:	4805      	ldr	r0, [pc, #20]	@ (8001710 <MX_USART2_UART_Init+0x4c>)
 80016fc:	f002 ffa0 	bl	8004640 <HAL_UART_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001706:	f000 f875 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000198 	.word	0x20000198
 8001714:	40004400 	.word	0x40004400

08001718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08a      	sub	sp, #40	@ 0x28
 800171c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
 800172c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	4b2d      	ldr	r3, [pc, #180]	@ (80017e8 <MX_GPIO_Init+0xd0>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	4a2c      	ldr	r2, [pc, #176]	@ (80017e8 <MX_GPIO_Init+0xd0>)
 8001738:	f043 0304 	orr.w	r3, r3, #4
 800173c:	6313      	str	r3, [r2, #48]	@ 0x30
 800173e:	4b2a      	ldr	r3, [pc, #168]	@ (80017e8 <MX_GPIO_Init+0xd0>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	f003 0304 	and.w	r3, r3, #4
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	4b26      	ldr	r3, [pc, #152]	@ (80017e8 <MX_GPIO_Init+0xd0>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	4a25      	ldr	r2, [pc, #148]	@ (80017e8 <MX_GPIO_Init+0xd0>)
 8001754:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001758:	6313      	str	r3, [r2, #48]	@ 0x30
 800175a:	4b23      	ldr	r3, [pc, #140]	@ (80017e8 <MX_GPIO_Init+0xd0>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	4b1f      	ldr	r3, [pc, #124]	@ (80017e8 <MX_GPIO_Init+0xd0>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	4a1e      	ldr	r2, [pc, #120]	@ (80017e8 <MX_GPIO_Init+0xd0>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6313      	str	r3, [r2, #48]	@ 0x30
 8001776:	4b1c      	ldr	r3, [pc, #112]	@ (80017e8 <MX_GPIO_Init+0xd0>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	4b18      	ldr	r3, [pc, #96]	@ (80017e8 <MX_GPIO_Init+0xd0>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	4a17      	ldr	r2, [pc, #92]	@ (80017e8 <MX_GPIO_Init+0xd0>)
 800178c:	f043 0302 	orr.w	r3, r3, #2
 8001790:	6313      	str	r3, [r2, #48]	@ 0x30
 8001792:	4b15      	ldr	r3, [pc, #84]	@ (80017e8 <MX_GPIO_Init+0xd0>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800179e:	2200      	movs	r2, #0
 80017a0:	2120      	movs	r1, #32
 80017a2:	4812      	ldr	r0, [pc, #72]	@ (80017ec <MX_GPIO_Init+0xd4>)
 80017a4:	f002 f806 	bl	80037b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017ae:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80017b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	4619      	mov	r1, r3
 80017be:	480c      	ldr	r0, [pc, #48]	@ (80017f0 <MX_GPIO_Init+0xd8>)
 80017c0:	f001 fe64 	bl	800348c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80017c4:	2320      	movs	r3, #32
 80017c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c8:	2301      	movs	r3, #1
 80017ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d0:	2300      	movs	r3, #0
 80017d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	4619      	mov	r1, r3
 80017da:	4804      	ldr	r0, [pc, #16]	@ (80017ec <MX_GPIO_Init+0xd4>)
 80017dc:	f001 fe56 	bl	800348c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017e0:	bf00      	nop
 80017e2:	3728      	adds	r7, #40	@ 0x28
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40020000 	.word	0x40020000
 80017f0:	40020800 	.word	0x40020800

080017f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f8:	b672      	cpsid	i
}
 80017fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017fc:	bf00      	nop
 80017fe:	e7fd      	b.n	80017fc <Error_Handler+0x8>

08001800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	4b10      	ldr	r3, [pc, #64]	@ (800184c <HAL_MspInit+0x4c>)
 800180c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800180e:	4a0f      	ldr	r2, [pc, #60]	@ (800184c <HAL_MspInit+0x4c>)
 8001810:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001814:	6453      	str	r3, [r2, #68]	@ 0x44
 8001816:	4b0d      	ldr	r3, [pc, #52]	@ (800184c <HAL_MspInit+0x4c>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800181a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	603b      	str	r3, [r7, #0]
 8001826:	4b09      	ldr	r3, [pc, #36]	@ (800184c <HAL_MspInit+0x4c>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182a:	4a08      	ldr	r2, [pc, #32]	@ (800184c <HAL_MspInit+0x4c>)
 800182c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001830:	6413      	str	r3, [r2, #64]	@ 0x40
 8001832:	4b06      	ldr	r3, [pc, #24]	@ (800184c <HAL_MspInit+0x4c>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800183a:	603b      	str	r3, [r7, #0]
 800183c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800183e:	2007      	movs	r0, #7
 8001840:	f001 fde2 	bl	8003408 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40023800 	.word	0x40023800

08001850 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08a      	sub	sp, #40	@ 0x28
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a24      	ldr	r2, [pc, #144]	@ (8001900 <HAL_ADC_MspInit+0xb0>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d141      	bne.n	80018f6 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	613b      	str	r3, [r7, #16]
 8001876:	4b23      	ldr	r3, [pc, #140]	@ (8001904 <HAL_ADC_MspInit+0xb4>)
 8001878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800187a:	4a22      	ldr	r2, [pc, #136]	@ (8001904 <HAL_ADC_MspInit+0xb4>)
 800187c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001880:	6453      	str	r3, [r2, #68]	@ 0x44
 8001882:	4b20      	ldr	r3, [pc, #128]	@ (8001904 <HAL_ADC_MspInit+0xb4>)
 8001884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	4b1c      	ldr	r3, [pc, #112]	@ (8001904 <HAL_ADC_MspInit+0xb4>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001896:	4a1b      	ldr	r2, [pc, #108]	@ (8001904 <HAL_ADC_MspInit+0xb4>)
 8001898:	f043 0304 	orr.w	r3, r3, #4
 800189c:	6313      	str	r3, [r2, #48]	@ 0x30
 800189e:	4b19      	ldr	r3, [pc, #100]	@ (8001904 <HAL_ADC_MspInit+0xb4>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	f003 0304 	and.w	r3, r3, #4
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	4b15      	ldr	r3, [pc, #84]	@ (8001904 <HAL_ADC_MspInit+0xb4>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	4a14      	ldr	r2, [pc, #80]	@ (8001904 <HAL_ADC_MspInit+0xb4>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ba:	4b12      	ldr	r3, [pc, #72]	@ (8001904 <HAL_ADC_MspInit+0xb4>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 80018c6:	230b      	movs	r3, #11
 80018c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ca:	2303      	movs	r3, #3
 80018cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	4619      	mov	r1, r3
 80018d8:	480b      	ldr	r0, [pc, #44]	@ (8001908 <HAL_ADC_MspInit+0xb8>)
 80018da:	f001 fdd7 	bl	800348c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80018de:	23c3      	movs	r3, #195	@ 0xc3
 80018e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018e2:	2303      	movs	r3, #3
 80018e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	4619      	mov	r1, r3
 80018f0:	4806      	ldr	r0, [pc, #24]	@ (800190c <HAL_ADC_MspInit+0xbc>)
 80018f2:	f001 fdcb 	bl	800348c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018f6:	bf00      	nop
 80018f8:	3728      	adds	r7, #40	@ 0x28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40012000 	.word	0x40012000
 8001904:	40023800 	.word	0x40023800
 8001908:	40020800 	.word	0x40020800
 800190c:	40020000 	.word	0x40020000

08001910 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	@ 0x28
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a21      	ldr	r2, [pc, #132]	@ (80019b4 <HAL_CAN_MspInit+0xa4>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d13c      	bne.n	80019ac <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	4b20      	ldr	r3, [pc, #128]	@ (80019b8 <HAL_CAN_MspInit+0xa8>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193a:	4a1f      	ldr	r2, [pc, #124]	@ (80019b8 <HAL_CAN_MspInit+0xa8>)
 800193c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001940:	6413      	str	r3, [r2, #64]	@ 0x40
 8001942:	4b1d      	ldr	r3, [pc, #116]	@ (80019b8 <HAL_CAN_MspInit+0xa8>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	4b19      	ldr	r3, [pc, #100]	@ (80019b8 <HAL_CAN_MspInit+0xa8>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001956:	4a18      	ldr	r2, [pc, #96]	@ (80019b8 <HAL_CAN_MspInit+0xa8>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6313      	str	r3, [r2, #48]	@ 0x30
 800195e:	4b16      	ldr	r3, [pc, #88]	@ (80019b8 <HAL_CAN_MspInit+0xa8>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800196a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800196e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001970:	2302      	movs	r3, #2
 8001972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001978:	2303      	movs	r3, #3
 800197a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800197c:	2309      	movs	r3, #9
 800197e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	4619      	mov	r1, r3
 8001986:	480d      	ldr	r0, [pc, #52]	@ (80019bc <HAL_CAN_MspInit+0xac>)
 8001988:	f001 fd80 	bl	800348c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800198c:	2200      	movs	r2, #0
 800198e:	2100      	movs	r1, #0
 8001990:	2014      	movs	r0, #20
 8001992:	f001 fd44 	bl	800341e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001996:	2014      	movs	r0, #20
 8001998:	f001 fd5d 	bl	8003456 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800199c:	2200      	movs	r2, #0
 800199e:	2100      	movs	r1, #0
 80019a0:	2015      	movs	r0, #21
 80019a2:	f001 fd3c 	bl	800341e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80019a6:	2015      	movs	r0, #21
 80019a8:	f001 fd55 	bl	8003456 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80019ac:	bf00      	nop
 80019ae:	3728      	adds	r7, #40	@ 0x28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40006400 	.word	0x40006400
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40020000 	.word	0x40020000

080019c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08a      	sub	sp, #40	@ 0x28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a19      	ldr	r2, [pc, #100]	@ (8001a44 <HAL_I2C_MspInit+0x84>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d12b      	bne.n	8001a3a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	4b18      	ldr	r3, [pc, #96]	@ (8001a48 <HAL_I2C_MspInit+0x88>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ea:	4a17      	ldr	r2, [pc, #92]	@ (8001a48 <HAL_I2C_MspInit+0x88>)
 80019ec:	f043 0302 	orr.w	r3, r3, #2
 80019f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f2:	4b15      	ldr	r3, [pc, #84]	@ (8001a48 <HAL_I2C_MspInit+0x88>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	613b      	str	r3, [r7, #16]
 80019fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019fe:	23c0      	movs	r3, #192	@ 0xc0
 8001a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a02:	2312      	movs	r3, #18
 8001a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a0e:	2304      	movs	r3, #4
 8001a10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a12:	f107 0314 	add.w	r3, r7, #20
 8001a16:	4619      	mov	r1, r3
 8001a18:	480c      	ldr	r0, [pc, #48]	@ (8001a4c <HAL_I2C_MspInit+0x8c>)
 8001a1a:	f001 fd37 	bl	800348c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	4b09      	ldr	r3, [pc, #36]	@ (8001a48 <HAL_I2C_MspInit+0x88>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a26:	4a08      	ldr	r2, [pc, #32]	@ (8001a48 <HAL_I2C_MspInit+0x88>)
 8001a28:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a2e:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <HAL_I2C_MspInit+0x88>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a3a:	bf00      	nop
 8001a3c:	3728      	adds	r7, #40	@ 0x28
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40005400 	.word	0x40005400
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40020400 	.word	0x40020400

08001a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	@ 0x28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a19      	ldr	r2, [pc, #100]	@ (8001ad4 <HAL_UART_MspInit+0x84>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d12b      	bne.n	8001aca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	4b18      	ldr	r3, [pc, #96]	@ (8001ad8 <HAL_UART_MspInit+0x88>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7a:	4a17      	ldr	r2, [pc, #92]	@ (8001ad8 <HAL_UART_MspInit+0x88>)
 8001a7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a82:	4b15      	ldr	r3, [pc, #84]	@ (8001ad8 <HAL_UART_MspInit+0x88>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	4b11      	ldr	r3, [pc, #68]	@ (8001ad8 <HAL_UART_MspInit+0x88>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	4a10      	ldr	r2, [pc, #64]	@ (8001ad8 <HAL_UART_MspInit+0x88>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad8 <HAL_UART_MspInit+0x88>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001aaa:	230c      	movs	r3, #12
 8001aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001aba:	2307      	movs	r3, #7
 8001abc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4805      	ldr	r0, [pc, #20]	@ (8001adc <HAL_UART_MspInit+0x8c>)
 8001ac6:	f001 fce1 	bl	800348c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001aca:	bf00      	nop
 8001acc:	3728      	adds	r7, #40	@ 0x28
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40004400 	.word	0x40004400
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40020000 	.word	0x40020000

08001ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ae4:	bf00      	nop
 8001ae6:	e7fd      	b.n	8001ae4 <NMI_Handler+0x4>

08001ae8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aec:	bf00      	nop
 8001aee:	e7fd      	b.n	8001aec <HardFault_Handler+0x4>

08001af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af4:	bf00      	nop
 8001af6:	e7fd      	b.n	8001af4 <MemManage_Handler+0x4>

08001af8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <BusFault_Handler+0x4>

08001b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b04:	bf00      	nop
 8001b06:	e7fd      	b.n	8001b04 <UsageFault_Handler+0x4>

08001b08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b36:	f000 f8db 	bl	8001cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001b44:	4802      	ldr	r0, [pc, #8]	@ (8001b50 <CAN1_RX0_IRQHandler+0x10>)
 8001b46:	f001 f960 	bl	8002e0a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	2000011c 	.word	0x2000011c

08001b54 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001b58:	4802      	ldr	r0, [pc, #8]	@ (8001b64 <CAN1_RX1_IRQHandler+0x10>)
 8001b5a:	f001 f956 	bl	8002e0a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	2000011c 	.word	0x2000011c

08001b68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b70:	4a14      	ldr	r2, [pc, #80]	@ (8001bc4 <_sbrk+0x5c>)
 8001b72:	4b15      	ldr	r3, [pc, #84]	@ (8001bc8 <_sbrk+0x60>)
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b7c:	4b13      	ldr	r3, [pc, #76]	@ (8001bcc <_sbrk+0x64>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d102      	bne.n	8001b8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b84:	4b11      	ldr	r3, [pc, #68]	@ (8001bcc <_sbrk+0x64>)
 8001b86:	4a12      	ldr	r2, [pc, #72]	@ (8001bd0 <_sbrk+0x68>)
 8001b88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b8a:	4b10      	ldr	r3, [pc, #64]	@ (8001bcc <_sbrk+0x64>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4413      	add	r3, r2
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d207      	bcs.n	8001ba8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b98:	f003 f986 	bl	8004ea8 <__errno>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	220c      	movs	r2, #12
 8001ba0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ba2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ba6:	e009      	b.n	8001bbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ba8:	4b08      	ldr	r3, [pc, #32]	@ (8001bcc <_sbrk+0x64>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bae:	4b07      	ldr	r3, [pc, #28]	@ (8001bcc <_sbrk+0x64>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	4a05      	ldr	r2, [pc, #20]	@ (8001bcc <_sbrk+0x64>)
 8001bb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bba:	68fb      	ldr	r3, [r7, #12]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20020000 	.word	0x20020000
 8001bc8:	00000400 	.word	0x00000400
 8001bcc:	200001e0 	.word	0x200001e0
 8001bd0:	20000330 	.word	0x20000330

08001bd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bd8:	4b06      	ldr	r3, [pc, #24]	@ (8001bf4 <SystemInit+0x20>)
 8001bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bde:	4a05      	ldr	r2, [pc, #20]	@ (8001bf4 <SystemInit+0x20>)
 8001be0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001be4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bf8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c30 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001bfc:	f7ff ffea 	bl	8001bd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c00:	480c      	ldr	r0, [pc, #48]	@ (8001c34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c02:	490d      	ldr	r1, [pc, #52]	@ (8001c38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c04:	4a0d      	ldr	r2, [pc, #52]	@ (8001c3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c08:	e002      	b.n	8001c10 <LoopCopyDataInit>

08001c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c0e:	3304      	adds	r3, #4

08001c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c14:	d3f9      	bcc.n	8001c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c16:	4a0a      	ldr	r2, [pc, #40]	@ (8001c40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c18:	4c0a      	ldr	r4, [pc, #40]	@ (8001c44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c1c:	e001      	b.n	8001c22 <LoopFillZerobss>

08001c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c20:	3204      	adds	r2, #4

08001c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c24:	d3fb      	bcc.n	8001c1e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001c26:	f003 f945 	bl	8004eb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c2a:	f7ff fc23 	bl	8001474 <main>
  bx  lr    
 8001c2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c38:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001c3c:	08005854 	.word	0x08005854
  ldr r2, =_sbss
 8001c40:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001c44:	20000330 	.word	0x20000330

08001c48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c48:	e7fe      	b.n	8001c48 <ADC_IRQHandler>
	...

08001c4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c50:	4b0e      	ldr	r3, [pc, #56]	@ (8001c8c <HAL_Init+0x40>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a0d      	ldr	r2, [pc, #52]	@ (8001c8c <HAL_Init+0x40>)
 8001c56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c8c <HAL_Init+0x40>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a0a      	ldr	r2, [pc, #40]	@ (8001c8c <HAL_Init+0x40>)
 8001c62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c68:	4b08      	ldr	r3, [pc, #32]	@ (8001c8c <HAL_Init+0x40>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a07      	ldr	r2, [pc, #28]	@ (8001c8c <HAL_Init+0x40>)
 8001c6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c74:	2003      	movs	r0, #3
 8001c76:	f001 fbc7 	bl	8003408 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	f000 f808 	bl	8001c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c80:	f7ff fdbe 	bl	8001800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40023c00 	.word	0x40023c00

08001c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c98:	4b12      	ldr	r3, [pc, #72]	@ (8001ce4 <HAL_InitTick+0x54>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b12      	ldr	r3, [pc, #72]	@ (8001ce8 <HAL_InitTick+0x58>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f001 fbdf 	bl	8003472 <HAL_SYSTICK_Config>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e00e      	b.n	8001cdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b0f      	cmp	r3, #15
 8001cc2:	d80a      	bhi.n	8001cda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ccc:	f001 fba7 	bl	800341e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cd0:	4a06      	ldr	r2, [pc, #24]	@ (8001cec <HAL_InitTick+0x5c>)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	e000      	b.n	8001cdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20000004 	.word	0x20000004
 8001ce8:	2000000c 	.word	0x2000000c
 8001cec:	20000008 	.word	0x20000008

08001cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <HAL_IncTick+0x20>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4b06      	ldr	r3, [pc, #24]	@ (8001d14 <HAL_IncTick+0x24>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4413      	add	r3, r2
 8001d00:	4a04      	ldr	r2, [pc, #16]	@ (8001d14 <HAL_IncTick+0x24>)
 8001d02:	6013      	str	r3, [r2, #0]
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	2000000c 	.word	0x2000000c
 8001d14:	200001e4 	.word	0x200001e4

08001d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d1c:	4b03      	ldr	r3, [pc, #12]	@ (8001d2c <HAL_GetTick+0x14>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	200001e4 	.word	0x200001e4

08001d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d38:	f7ff ffee 	bl	8001d18 <HAL_GetTick>
 8001d3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d48:	d005      	beq.n	8001d56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d74 <HAL_Delay+0x44>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4413      	add	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d56:	bf00      	nop
 8001d58:	f7ff ffde 	bl	8001d18 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d8f7      	bhi.n	8001d58 <HAL_Delay+0x28>
  {
  }
}
 8001d68:	bf00      	nop
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	2000000c 	.word	0x2000000c

08001d78 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d80:	2300      	movs	r3, #0
 8001d82:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e033      	b.n	8001df6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d109      	bne.n	8001daa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff fd5a 	bl	8001850 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dae:	f003 0310 	and.w	r3, r3, #16
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d118      	bne.n	8001de8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dba:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001dbe:	f023 0302 	bic.w	r3, r3, #2
 8001dc2:	f043 0202 	orr.w	r2, r3, #2
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 fab4 	bl	8002338 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dda:	f023 0303 	bic.w	r3, r3, #3
 8001dde:	f043 0201 	orr.w	r2, r3, #1
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	641a      	str	r2, [r3, #64]	@ 0x40
 8001de6:	e001      	b.n	8001dec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
	...

08001e00 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d101      	bne.n	8001e1a <HAL_ADC_Start+0x1a>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e0b2      	b.n	8001f80 <HAL_ADC_Start+0x180>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d018      	beq.n	8001e62 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0201 	orr.w	r2, r2, #1
 8001e3e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e40:	4b52      	ldr	r3, [pc, #328]	@ (8001f8c <HAL_ADC_Start+0x18c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a52      	ldr	r2, [pc, #328]	@ (8001f90 <HAL_ADC_Start+0x190>)
 8001e46:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4a:	0c9a      	lsrs	r2, r3, #18
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	4413      	add	r3, r2
 8001e52:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001e54:	e002      	b.n	8001e5c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f9      	bne.n	8001e56 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d17a      	bne.n	8001f66 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e74:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001e78:	f023 0301 	bic.w	r3, r3, #1
 8001e7c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d007      	beq.n	8001ea2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e96:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e9a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001eaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001eae:	d106      	bne.n	8001ebe <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb4:	f023 0206 	bic.w	r2, r3, #6
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	645a      	str	r2, [r3, #68]	@ 0x44
 8001ebc:	e002      	b.n	8001ec4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ecc:	4b31      	ldr	r3, [pc, #196]	@ (8001f94 <HAL_ADC_Start+0x194>)
 8001ece:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001ed8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 031f 	and.w	r3, r3, #31
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d12a      	bne.n	8001f3c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a2b      	ldr	r2, [pc, #172]	@ (8001f98 <HAL_ADC_Start+0x198>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d015      	beq.n	8001f1c <HAL_ADC_Start+0x11c>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a29      	ldr	r2, [pc, #164]	@ (8001f9c <HAL_ADC_Start+0x19c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d105      	bne.n	8001f06 <HAL_ADC_Start+0x106>
 8001efa:	4b26      	ldr	r3, [pc, #152]	@ (8001f94 <HAL_ADC_Start+0x194>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f003 031f 	and.w	r3, r3, #31
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00a      	beq.n	8001f1c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a25      	ldr	r2, [pc, #148]	@ (8001fa0 <HAL_ADC_Start+0x1a0>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d136      	bne.n	8001f7e <HAL_ADC_Start+0x17e>
 8001f10:	4b20      	ldr	r3, [pc, #128]	@ (8001f94 <HAL_ADC_Start+0x194>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 0310 	and.w	r3, r3, #16
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d130      	bne.n	8001f7e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d129      	bne.n	8001f7e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f38:	609a      	str	r2, [r3, #8]
 8001f3a:	e020      	b.n	8001f7e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a15      	ldr	r2, [pc, #84]	@ (8001f98 <HAL_ADC_Start+0x198>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d11b      	bne.n	8001f7e <HAL_ADC_Start+0x17e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d114      	bne.n	8001f7e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	e00b      	b.n	8001f7e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6a:	f043 0210 	orr.w	r2, r3, #16
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f76:	f043 0201 	orr.w	r2, r3, #1
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	20000004 	.word	0x20000004
 8001f90:	431bde83 	.word	0x431bde83
 8001f94:	40012300 	.word	0x40012300
 8001f98:	40012000 	.word	0x40012000
 8001f9c:	40012100 	.word	0x40012100
 8001fa0:	40012200 	.word	0x40012200

08001fa4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fc0:	d113      	bne.n	8001fea <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001fcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fd0:	d10b      	bne.n	8001fea <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd6:	f043 0220 	orr.w	r2, r3, #32
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e063      	b.n	80020b2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fea:	f7ff fe95 	bl	8001d18 <HAL_GetTick>
 8001fee:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ff0:	e021      	b.n	8002036 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ff8:	d01d      	beq.n	8002036 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d007      	beq.n	8002010 <HAL_ADC_PollForConversion+0x6c>
 8002000:	f7ff fe8a 	bl	8001d18 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	429a      	cmp	r2, r3
 800200e:	d212      	bcs.n	8002036 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b02      	cmp	r3, #2
 800201c:	d00b      	beq.n	8002036 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002022:	f043 0204 	orr.w	r2, r3, #4
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e03d      	b.n	80020b2 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b02      	cmp	r3, #2
 8002042:	d1d6      	bne.n	8001ff2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f06f 0212 	mvn.w	r2, #18
 800204c:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002052:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d123      	bne.n	80020b0 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800206c:	2b00      	cmp	r3, #0
 800206e:	d11f      	bne.n	80020b0 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002076:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800207a:	2b00      	cmp	r3, #0
 800207c:	d006      	beq.n	800208c <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002088:	2b00      	cmp	r3, #0
 800208a:	d111      	bne.n	80020b0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002090:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d105      	bne.n	80020b0 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a8:	f043 0201 	orr.w	r2, r3, #1
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d101      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x1c>
 80020ec:	2302      	movs	r3, #2
 80020ee:	e113      	b.n	8002318 <HAL_ADC_ConfigChannel+0x244>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b09      	cmp	r3, #9
 80020fe:	d925      	bls.n	800214c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68d9      	ldr	r1, [r3, #12]
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	b29b      	uxth	r3, r3
 800210c:	461a      	mov	r2, r3
 800210e:	4613      	mov	r3, r2
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	4413      	add	r3, r2
 8002114:	3b1e      	subs	r3, #30
 8002116:	2207      	movs	r2, #7
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43da      	mvns	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	400a      	ands	r2, r1
 8002124:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68d9      	ldr	r1, [r3, #12]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	b29b      	uxth	r3, r3
 8002136:	4618      	mov	r0, r3
 8002138:	4603      	mov	r3, r0
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	4403      	add	r3, r0
 800213e:	3b1e      	subs	r3, #30
 8002140:	409a      	lsls	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	430a      	orrs	r2, r1
 8002148:	60da      	str	r2, [r3, #12]
 800214a:	e022      	b.n	8002192 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6919      	ldr	r1, [r3, #16]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	b29b      	uxth	r3, r3
 8002158:	461a      	mov	r2, r3
 800215a:	4613      	mov	r3, r2
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	4413      	add	r3, r2
 8002160:	2207      	movs	r2, #7
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43da      	mvns	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	400a      	ands	r2, r1
 800216e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6919      	ldr	r1, [r3, #16]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	b29b      	uxth	r3, r3
 8002180:	4618      	mov	r0, r3
 8002182:	4603      	mov	r3, r0
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	4403      	add	r3, r0
 8002188:	409a      	lsls	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b06      	cmp	r3, #6
 8002198:	d824      	bhi.n	80021e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	4613      	mov	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	3b05      	subs	r3, #5
 80021ac:	221f      	movs	r2, #31
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43da      	mvns	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	400a      	ands	r2, r1
 80021ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	4618      	mov	r0, r3
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	3b05      	subs	r3, #5
 80021d6:	fa00 f203 	lsl.w	r2, r0, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80021e2:	e04c      	b.n	800227e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2b0c      	cmp	r3, #12
 80021ea:	d824      	bhi.n	8002236 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	3b23      	subs	r3, #35	@ 0x23
 80021fe:	221f      	movs	r2, #31
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43da      	mvns	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	400a      	ands	r2, r1
 800220c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	b29b      	uxth	r3, r3
 800221a:	4618      	mov	r0, r3
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	4613      	mov	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	3b23      	subs	r3, #35	@ 0x23
 8002228:	fa00 f203 	lsl.w	r2, r0, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	631a      	str	r2, [r3, #48]	@ 0x30
 8002234:	e023      	b.n	800227e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	4613      	mov	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	3b41      	subs	r3, #65	@ 0x41
 8002248:	221f      	movs	r2, #31
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43da      	mvns	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	400a      	ands	r2, r1
 8002256:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	b29b      	uxth	r3, r3
 8002264:	4618      	mov	r0, r3
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	3b41      	subs	r3, #65	@ 0x41
 8002272:	fa00 f203 	lsl.w	r2, r0, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	430a      	orrs	r2, r1
 800227c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800227e:	4b29      	ldr	r3, [pc, #164]	@ (8002324 <HAL_ADC_ConfigChannel+0x250>)
 8002280:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a28      	ldr	r2, [pc, #160]	@ (8002328 <HAL_ADC_ConfigChannel+0x254>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d10f      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x1d8>
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b12      	cmp	r3, #18
 8002292:	d10b      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002328 <HAL_ADC_ConfigChannel+0x254>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d12b      	bne.n	800230e <HAL_ADC_ConfigChannel+0x23a>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a1c      	ldr	r2, [pc, #112]	@ (800232c <HAL_ADC_ConfigChannel+0x258>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d003      	beq.n	80022c8 <HAL_ADC_ConfigChannel+0x1f4>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2b11      	cmp	r3, #17
 80022c6:	d122      	bne.n	800230e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a11      	ldr	r2, [pc, #68]	@ (800232c <HAL_ADC_ConfigChannel+0x258>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d111      	bne.n	800230e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022ea:	4b11      	ldr	r3, [pc, #68]	@ (8002330 <HAL_ADC_ConfigChannel+0x25c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a11      	ldr	r2, [pc, #68]	@ (8002334 <HAL_ADC_ConfigChannel+0x260>)
 80022f0:	fba2 2303 	umull	r2, r3, r2, r3
 80022f4:	0c9a      	lsrs	r2, r3, #18
 80022f6:	4613      	mov	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002300:	e002      	b.n	8002308 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	3b01      	subs	r3, #1
 8002306:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f9      	bne.n	8002302 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	40012300 	.word	0x40012300
 8002328:	40012000 	.word	0x40012000
 800232c:	10000012 	.word	0x10000012
 8002330:	20000004 	.word	0x20000004
 8002334:	431bde83 	.word	0x431bde83

08002338 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002340:	4b79      	ldr	r3, [pc, #484]	@ (8002528 <ADC_Init+0x1f0>)
 8002342:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	431a      	orrs	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800236c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6859      	ldr	r1, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	021a      	lsls	r2, r3, #8
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	430a      	orrs	r2, r1
 8002380:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002390:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6859      	ldr	r1, [r3, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6899      	ldr	r1, [r3, #8]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ca:	4a58      	ldr	r2, [pc, #352]	@ (800252c <ADC_Init+0x1f4>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d022      	beq.n	8002416 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80023de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6899      	ldr	r1, [r3, #8]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002400:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6899      	ldr	r1, [r3, #8]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	609a      	str	r2, [r3, #8]
 8002414:	e00f      	b.n	8002436 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002424:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002434:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 0202 	bic.w	r2, r2, #2
 8002444:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6899      	ldr	r1, [r3, #8]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	7e1b      	ldrb	r3, [r3, #24]
 8002450:	005a      	lsls	r2, r3, #1
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d01b      	beq.n	800249c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002472:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002482:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6859      	ldr	r1, [r3, #4]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248e:	3b01      	subs	r3, #1
 8002490:	035a      	lsls	r2, r3, #13
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	e007      	b.n	80024ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024aa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80024ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	051a      	lsls	r2, r3, #20
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80024e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6899      	ldr	r1, [r3, #8]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80024ee:	025a      	lsls	r2, r3, #9
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002506:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6899      	ldr	r1, [r3, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	029a      	lsls	r2, r3, #10
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	430a      	orrs	r2, r1
 800251a:	609a      	str	r2, [r3, #8]
}
 800251c:	bf00      	nop
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	40012300 	.word	0x40012300
 800252c:	0f000001 	.word	0x0f000001

08002530 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e0ed      	b.n	800271e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d102      	bne.n	8002554 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7ff f9de 	bl	8001910 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f042 0201 	orr.w	r2, r2, #1
 8002562:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002564:	f7ff fbd8 	bl	8001d18 <HAL_GetTick>
 8002568:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800256a:	e012      	b.n	8002592 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800256c:	f7ff fbd4 	bl	8001d18 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b0a      	cmp	r3, #10
 8002578:	d90b      	bls.n	8002592 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2205      	movs	r2, #5
 800258a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e0c5      	b.n	800271e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0e5      	beq.n	800256c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0202 	bic.w	r2, r2, #2
 80025ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025b0:	f7ff fbb2 	bl	8001d18 <HAL_GetTick>
 80025b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025b6:	e012      	b.n	80025de <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025b8:	f7ff fbae 	bl	8001d18 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b0a      	cmp	r3, #10
 80025c4:	d90b      	bls.n	80025de <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2205      	movs	r2, #5
 80025d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e09f      	b.n	800271e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1e5      	bne.n	80025b8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	7e1b      	ldrb	r3, [r3, #24]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d108      	bne.n	8002606 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	e007      	b.n	8002616 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002614:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	7e5b      	ldrb	r3, [r3, #25]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d108      	bne.n	8002630 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	e007      	b.n	8002640 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800263e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	7e9b      	ldrb	r3, [r3, #26]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d108      	bne.n	800265a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0220 	orr.w	r2, r2, #32
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	e007      	b.n	800266a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 0220 	bic.w	r2, r2, #32
 8002668:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	7edb      	ldrb	r3, [r3, #27]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d108      	bne.n	8002684 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 0210 	bic.w	r2, r2, #16
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	e007      	b.n	8002694 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0210 	orr.w	r2, r2, #16
 8002692:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	7f1b      	ldrb	r3, [r3, #28]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d108      	bne.n	80026ae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0208 	orr.w	r2, r2, #8
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	e007      	b.n	80026be <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 0208 	bic.w	r2, r2, #8
 80026bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	7f5b      	ldrb	r3, [r3, #29]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d108      	bne.n	80026d8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f042 0204 	orr.w	r2, r2, #4
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	e007      	b.n	80026e8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0204 	bic.w	r2, r2, #4
 80026e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	431a      	orrs	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	ea42 0103 	orr.w	r1, r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	1e5a      	subs	r2, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
	...

08002728 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002728:	b480      	push	{r7}
 800272a:	b087      	sub	sp, #28
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800273e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002740:	7cfb      	ldrb	r3, [r7, #19]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d003      	beq.n	800274e <HAL_CAN_ConfigFilter+0x26>
 8002746:	7cfb      	ldrb	r3, [r7, #19]
 8002748:	2b02      	cmp	r3, #2
 800274a:	f040 80be 	bne.w	80028ca <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800274e:	4b65      	ldr	r3, [pc, #404]	@ (80028e4 <HAL_CAN_ConfigFilter+0x1bc>)
 8002750:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002758:	f043 0201 	orr.w	r2, r3, #1
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002768:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277c:	021b      	lsls	r3, r3, #8
 800277e:	431a      	orrs	r2, r3
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	f003 031f 	and.w	r3, r3, #31
 800278e:	2201      	movs	r2, #1
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	43db      	mvns	r3, r3
 80027a0:	401a      	ands	r2, r3
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d123      	bne.n	80027f8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	43db      	mvns	r3, r3
 80027ba:	401a      	ands	r2, r3
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80027d2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	3248      	adds	r2, #72	@ 0x48
 80027d8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027ec:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027ee:	6979      	ldr	r1, [r7, #20]
 80027f0:	3348      	adds	r3, #72	@ 0x48
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	440b      	add	r3, r1
 80027f6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	69db      	ldr	r3, [r3, #28]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d122      	bne.n	8002846 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	431a      	orrs	r2, r3
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002820:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	3248      	adds	r2, #72	@ 0x48
 8002826:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800283a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800283c:	6979      	ldr	r1, [r7, #20]
 800283e:	3348      	adds	r3, #72	@ 0x48
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	440b      	add	r3, r1
 8002844:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d109      	bne.n	8002862 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	43db      	mvns	r3, r3
 8002858:	401a      	ands	r2, r3
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002860:	e007      	b.n	8002872 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	431a      	orrs	r2, r3
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d109      	bne.n	800288e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	43db      	mvns	r3, r3
 8002884:	401a      	ands	r2, r3
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800288c:	e007      	b.n	800289e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	431a      	orrs	r2, r3
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d107      	bne.n	80028b6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	431a      	orrs	r2, r3
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80028bc:	f023 0201 	bic.w	r2, r3, #1
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80028c6:	2300      	movs	r3, #0
 80028c8:	e006      	b.n	80028d8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ce:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
  }
}
 80028d8:	4618      	mov	r0, r3
 80028da:	371c      	adds	r7, #28
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	40006400 	.word	0x40006400

080028e8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d12e      	bne.n	800295a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2202      	movs	r2, #2
 8002900:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0201 	bic.w	r2, r2, #1
 8002912:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002914:	f7ff fa00 	bl	8001d18 <HAL_GetTick>
 8002918:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800291a:	e012      	b.n	8002942 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800291c:	f7ff f9fc 	bl	8001d18 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b0a      	cmp	r3, #10
 8002928:	d90b      	bls.n	8002942 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2205      	movs	r2, #5
 800293a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e012      	b.n	8002968 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1e5      	bne.n	800291c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002956:	2300      	movs	r3, #0
 8002958:	e006      	b.n	8002968 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
  }
}
 8002968:	4618      	mov	r0, r3
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002970:	b480      	push	{r7}
 8002972:	b089      	sub	sp, #36	@ 0x24
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
 800297c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002984:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800298e:	7ffb      	ldrb	r3, [r7, #31]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d003      	beq.n	800299c <HAL_CAN_AddTxMessage+0x2c>
 8002994:	7ffb      	ldrb	r3, [r7, #31]
 8002996:	2b02      	cmp	r3, #2
 8002998:	f040 80ad 	bne.w	8002af6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10a      	bne.n	80029bc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d105      	bne.n	80029bc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f000 8095 	beq.w	8002ae6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	0e1b      	lsrs	r3, r3, #24
 80029c0:	f003 0303 	and.w	r3, r3, #3
 80029c4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80029c6:	2201      	movs	r2, #1
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	409a      	lsls	r2, r3
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10d      	bne.n	80029f4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80029e2:	68f9      	ldr	r1, [r7, #12]
 80029e4:	6809      	ldr	r1, [r1, #0]
 80029e6:	431a      	orrs	r2, r3
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	3318      	adds	r3, #24
 80029ec:	011b      	lsls	r3, r3, #4
 80029ee:	440b      	add	r3, r1
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	e00f      	b.n	8002a14 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029fe:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a04:	68f9      	ldr	r1, [r7, #12]
 8002a06:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002a08:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	3318      	adds	r3, #24
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	440b      	add	r3, r1
 8002a12:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6819      	ldr	r1, [r3, #0]
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	691a      	ldr	r2, [r3, #16]
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	3318      	adds	r3, #24
 8002a20:	011b      	lsls	r3, r3, #4
 8002a22:	440b      	add	r3, r1
 8002a24:	3304      	adds	r3, #4
 8002a26:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	7d1b      	ldrb	r3, [r3, #20]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d111      	bne.n	8002a54 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	3318      	adds	r3, #24
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	6811      	ldr	r1, [r2, #0]
 8002a44:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	3318      	adds	r3, #24
 8002a4c:	011b      	lsls	r3, r3, #4
 8002a4e:	440b      	add	r3, r1
 8002a50:	3304      	adds	r3, #4
 8002a52:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3307      	adds	r3, #7
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	061a      	lsls	r2, r3, #24
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3306      	adds	r3, #6
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	041b      	lsls	r3, r3, #16
 8002a64:	431a      	orrs	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	3305      	adds	r3, #5
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	021b      	lsls	r3, r3, #8
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	3204      	adds	r2, #4
 8002a74:	7812      	ldrb	r2, [r2, #0]
 8002a76:	4610      	mov	r0, r2
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	6811      	ldr	r1, [r2, #0]
 8002a7c:	ea43 0200 	orr.w	r2, r3, r0
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	011b      	lsls	r3, r3, #4
 8002a84:	440b      	add	r3, r1
 8002a86:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002a8a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3303      	adds	r3, #3
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	061a      	lsls	r2, r3, #24
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3302      	adds	r3, #2
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	041b      	lsls	r3, r3, #16
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	021b      	lsls	r3, r3, #8
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	7812      	ldrb	r2, [r2, #0]
 8002aac:	4610      	mov	r0, r2
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	6811      	ldr	r1, [r2, #0]
 8002ab2:	ea43 0200 	orr.w	r2, r3, r0
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	011b      	lsls	r3, r3, #4
 8002aba:	440b      	add	r3, r1
 8002abc:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002ac0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	3318      	adds	r3, #24
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	4413      	add	r3, r2
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	6811      	ldr	r1, [r2, #0]
 8002ad4:	f043 0201 	orr.w	r2, r3, #1
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	3318      	adds	r3, #24
 8002adc:	011b      	lsls	r3, r3, #4
 8002ade:	440b      	add	r3, r1
 8002ae0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	e00e      	b.n	8002b04 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aea:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e006      	b.n	8002b04 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
  }
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3724      	adds	r7, #36	@ 0x24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b22:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002b24:	7afb      	ldrb	r3, [r7, #11]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d002      	beq.n	8002b30 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002b2a:	7afb      	ldrb	r3, [r7, #11]
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d11d      	bne.n	8002b6c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d002      	beq.n	8002b44 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	3301      	adds	r3, #1
 8002b42:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d002      	beq.n	8002b58 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	3301      	adds	r3, #1
 8002b56:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d002      	beq.n	8002b6c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b087      	sub	sp, #28
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	60f8      	str	r0, [r7, #12]
 8002b82:	60b9      	str	r1, [r7, #8]
 8002b84:	607a      	str	r2, [r7, #4]
 8002b86:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b8e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b90:	7dfb      	ldrb	r3, [r7, #23]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d003      	beq.n	8002b9e <HAL_CAN_GetRxMessage+0x24>
 8002b96:	7dfb      	ldrb	r3, [r7, #23]
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	f040 8103 	bne.w	8002da4 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10e      	bne.n	8002bc2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	f003 0303 	and.w	r3, r3, #3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d116      	bne.n	8002be0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e0f7      	b.n	8002db2 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	f003 0303 	and.w	r3, r3, #3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d107      	bne.n	8002be0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e0e8      	b.n	8002db2 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	331b      	adds	r3, #27
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	4413      	add	r3, r2
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0204 	and.w	r2, r3, #4
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10c      	bne.n	8002c18 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	331b      	adds	r3, #27
 8002c06:	011b      	lsls	r3, r3, #4
 8002c08:	4413      	add	r3, r2
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	0d5b      	lsrs	r3, r3, #21
 8002c0e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	e00b      	b.n	8002c30 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	331b      	adds	r3, #27
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	4413      	add	r3, r2
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	08db      	lsrs	r3, r3, #3
 8002c28:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	331b      	adds	r3, #27
 8002c38:	011b      	lsls	r3, r3, #4
 8002c3a:	4413      	add	r3, r2
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0202 	and.w	r2, r3, #2
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	331b      	adds	r3, #27
 8002c4e:	011b      	lsls	r3, r3, #4
 8002c50:	4413      	add	r3, r2
 8002c52:	3304      	adds	r3, #4
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2208      	movs	r2, #8
 8002c62:	611a      	str	r2, [r3, #16]
 8002c64:	e00b      	b.n	8002c7e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	331b      	adds	r3, #27
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	4413      	add	r3, r2
 8002c72:	3304      	adds	r3, #4
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 020f 	and.w	r2, r3, #15
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	331b      	adds	r3, #27
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	4413      	add	r3, r2
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	0a1b      	lsrs	r3, r3, #8
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	331b      	adds	r3, #27
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3304      	adds	r3, #4
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	0c1b      	lsrs	r3, r3, #16
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	4413      	add	r3, r2
 8002cce:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	0a1a      	lsrs	r2, r3, #8
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	011b      	lsls	r3, r3, #4
 8002ce6:	4413      	add	r3, r2
 8002ce8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	0c1a      	lsrs	r2, r3, #16
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	3302      	adds	r3, #2
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	011b      	lsls	r3, r3, #4
 8002d00:	4413      	add	r3, r2
 8002d02:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	0e1a      	lsrs	r2, r3, #24
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	3303      	adds	r3, #3
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	011b      	lsls	r3, r3, #4
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	3304      	adds	r3, #4
 8002d26:	b2d2      	uxtb	r2, r2
 8002d28:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	4413      	add	r3, r2
 8002d34:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	0a1a      	lsrs	r2, r3, #8
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	3305      	adds	r3, #5
 8002d40:	b2d2      	uxtb	r2, r2
 8002d42:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	011b      	lsls	r3, r3, #4
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	0c1a      	lsrs	r2, r3, #16
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	3306      	adds	r3, #6
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	011b      	lsls	r3, r3, #4
 8002d66:	4413      	add	r3, r2
 8002d68:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	0e1a      	lsrs	r2, r3, #24
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	3307      	adds	r3, #7
 8002d74:	b2d2      	uxtb	r2, r2
 8002d76:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d108      	bne.n	8002d90 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f042 0220 	orr.w	r2, r2, #32
 8002d8c:	60da      	str	r2, [r3, #12]
 8002d8e:	e007      	b.n	8002da0 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	691a      	ldr	r2, [r3, #16]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f042 0220 	orr.w	r2, r2, #32
 8002d9e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002da0:	2300      	movs	r3, #0
 8002da2:	e006      	b.n	8002db2 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
  }
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	371c      	adds	r7, #28
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b085      	sub	sp, #20
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
 8002dc6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dce:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002dd0:	7bfb      	ldrb	r3, [r7, #15]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d002      	beq.n	8002ddc <HAL_CAN_ActivateNotification+0x1e>
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d109      	bne.n	8002df0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6959      	ldr	r1, [r3, #20]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002dec:	2300      	movs	r3, #0
 8002dee:	e006      	b.n	8002dfe <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
  }
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b08a      	sub	sp, #40	@ 0x28
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002e12:	2300      	movs	r3, #0
 8002e14:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002e46:	6a3b      	ldr	r3, [r7, #32]
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d07c      	beq.n	8002f4a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d023      	beq.n	8002ea2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f983 	bl	8003178 <HAL_CAN_TxMailbox0CompleteCallback>
 8002e72:	e016      	b.n	8002ea2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	f003 0304 	and.w	r3, r3, #4
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d004      	beq.n	8002e88 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e80:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002e84:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e86:	e00c      	b.n	8002ea2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d004      	beq.n	8002e9c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e94:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e98:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e9a:	e002      	b.n	8002ea2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 f989 	bl	80031b4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d024      	beq.n	8002ef6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002eb4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d003      	beq.n	8002ec8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f963 	bl	800318c <HAL_CAN_TxMailbox1CompleteCallback>
 8002ec6:	e016      	b.n	8002ef6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d004      	beq.n	8002edc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002ed8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eda:	e00c      	b.n	8002ef6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d004      	beq.n	8002ef0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002eec:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eee:	e002      	b.n	8002ef6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f969 	bl	80031c8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d024      	beq.n	8002f4a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002f08:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d003      	beq.n	8002f1c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 f943 	bl	80031a0 <HAL_CAN_TxMailbox2CompleteCallback>
 8002f1a:	e016      	b.n	8002f4a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d004      	beq.n	8002f30 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f2e:	e00c      	b.n	8002f4a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d004      	beq.n	8002f44 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f40:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f42:	e002      	b.n	8002f4a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 f949 	bl	80031dc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	f003 0308 	and.w	r3, r3, #8
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00c      	beq.n	8002f6e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	f003 0310 	and.w	r3, r3, #16
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d007      	beq.n	8002f6e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f60:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f64:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2210      	movs	r2, #16
 8002f6c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00b      	beq.n	8002f90 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	f003 0308 	and.w	r3, r3, #8
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d006      	beq.n	8002f90 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2208      	movs	r2, #8
 8002f88:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f930 	bl	80031f0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002f90:	6a3b      	ldr	r3, [r7, #32]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d009      	beq.n	8002fae <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f003 0303 	and.w	r3, r3, #3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d002      	beq.n	8002fae <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7fd ffcb 	bl	8000f44 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00c      	beq.n	8002fd2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	f003 0310 	and.w	r3, r3, #16
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d007      	beq.n	8002fd2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002fc8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2210      	movs	r2, #16
 8002fd0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002fd2:	6a3b      	ldr	r3, [r7, #32]
 8002fd4:	f003 0320 	and.w	r3, r3, #32
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00b      	beq.n	8002ff4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	f003 0308 	and.w	r3, r3, #8
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d006      	beq.n	8002ff4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2208      	movs	r2, #8
 8002fec:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f912 	bl	8003218 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002ff4:	6a3b      	ldr	r3, [r7, #32]
 8002ff6:	f003 0310 	and.w	r3, r3, #16
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d009      	beq.n	8003012 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	f003 0303 	and.w	r3, r3, #3
 8003008:	2b00      	cmp	r3, #0
 800300a:	d002      	beq.n	8003012 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f8f9 	bl	8003204 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00b      	beq.n	8003034 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f003 0310 	and.w	r3, r3, #16
 8003022:	2b00      	cmp	r3, #0
 8003024:	d006      	beq.n	8003034 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2210      	movs	r2, #16
 800302c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f8fc 	bl	800322c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00b      	beq.n	8003056 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	f003 0308 	and.w	r3, r3, #8
 8003044:	2b00      	cmp	r3, #0
 8003046:	d006      	beq.n	8003056 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2208      	movs	r2, #8
 800304e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f8f5 	bl	8003240 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003056:	6a3b      	ldr	r3, [r7, #32]
 8003058:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d07b      	beq.n	8003158 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	f003 0304 	and.w	r3, r3, #4
 8003066:	2b00      	cmp	r3, #0
 8003068:	d072      	beq.n	8003150 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003070:	2b00      	cmp	r3, #0
 8003072:	d008      	beq.n	8003086 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800307e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003080:	f043 0301 	orr.w	r3, r3, #1
 8003084:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003086:	6a3b      	ldr	r3, [r7, #32]
 8003088:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800308c:	2b00      	cmp	r3, #0
 800308e:	d008      	beq.n	80030a2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800309a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309c:	f043 0302 	orr.w	r3, r3, #2
 80030a0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d008      	beq.n	80030be <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80030b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b8:	f043 0304 	orr.w	r3, r3, #4
 80030bc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d043      	beq.n	8003150 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d03e      	beq.n	8003150 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030d8:	2b60      	cmp	r3, #96	@ 0x60
 80030da:	d02b      	beq.n	8003134 <HAL_CAN_IRQHandler+0x32a>
 80030dc:	2b60      	cmp	r3, #96	@ 0x60
 80030de:	d82e      	bhi.n	800313e <HAL_CAN_IRQHandler+0x334>
 80030e0:	2b50      	cmp	r3, #80	@ 0x50
 80030e2:	d022      	beq.n	800312a <HAL_CAN_IRQHandler+0x320>
 80030e4:	2b50      	cmp	r3, #80	@ 0x50
 80030e6:	d82a      	bhi.n	800313e <HAL_CAN_IRQHandler+0x334>
 80030e8:	2b40      	cmp	r3, #64	@ 0x40
 80030ea:	d019      	beq.n	8003120 <HAL_CAN_IRQHandler+0x316>
 80030ec:	2b40      	cmp	r3, #64	@ 0x40
 80030ee:	d826      	bhi.n	800313e <HAL_CAN_IRQHandler+0x334>
 80030f0:	2b30      	cmp	r3, #48	@ 0x30
 80030f2:	d010      	beq.n	8003116 <HAL_CAN_IRQHandler+0x30c>
 80030f4:	2b30      	cmp	r3, #48	@ 0x30
 80030f6:	d822      	bhi.n	800313e <HAL_CAN_IRQHandler+0x334>
 80030f8:	2b10      	cmp	r3, #16
 80030fa:	d002      	beq.n	8003102 <HAL_CAN_IRQHandler+0x2f8>
 80030fc:	2b20      	cmp	r3, #32
 80030fe:	d005      	beq.n	800310c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003100:	e01d      	b.n	800313e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003104:	f043 0308 	orr.w	r3, r3, #8
 8003108:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800310a:	e019      	b.n	8003140 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800310c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310e:	f043 0310 	orr.w	r3, r3, #16
 8003112:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003114:	e014      	b.n	8003140 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003118:	f043 0320 	orr.w	r3, r3, #32
 800311c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800311e:	e00f      	b.n	8003140 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003122:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003126:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003128:	e00a      	b.n	8003140 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800312a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003130:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003132:	e005      	b.n	8003140 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003136:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800313a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800313c:	e000      	b.n	8003140 <HAL_CAN_IRQHandler+0x336>
            break;
 800313e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	699a      	ldr	r2, [r3, #24]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800314e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2204      	movs	r2, #4
 8003156:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315a:	2b00      	cmp	r3, #0
 800315c:	d008      	beq.n	8003170 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f872 	bl	8003254 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003170:	bf00      	nop
 8003172:	3728      	adds	r7, #40	@ 0x28
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003278:	4b0c      	ldr	r3, [pc, #48]	@ (80032ac <__NVIC_SetPriorityGrouping+0x44>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003284:	4013      	ands	r3, r2
 8003286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003290:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003294:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800329a:	4a04      	ldr	r2, [pc, #16]	@ (80032ac <__NVIC_SetPriorityGrouping+0x44>)
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	60d3      	str	r3, [r2, #12]
}
 80032a0:	bf00      	nop
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	e000ed00 	.word	0xe000ed00

080032b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032b4:	4b04      	ldr	r3, [pc, #16]	@ (80032c8 <__NVIC_GetPriorityGrouping+0x18>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	0a1b      	lsrs	r3, r3, #8
 80032ba:	f003 0307 	and.w	r3, r3, #7
}
 80032be:	4618      	mov	r0, r3
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr
 80032c8:	e000ed00 	.word	0xe000ed00

080032cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	db0b      	blt.n	80032f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032de:	79fb      	ldrb	r3, [r7, #7]
 80032e0:	f003 021f 	and.w	r2, r3, #31
 80032e4:	4907      	ldr	r1, [pc, #28]	@ (8003304 <__NVIC_EnableIRQ+0x38>)
 80032e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ea:	095b      	lsrs	r3, r3, #5
 80032ec:	2001      	movs	r0, #1
 80032ee:	fa00 f202 	lsl.w	r2, r0, r2
 80032f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	e000e100 	.word	0xe000e100

08003308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	4603      	mov	r3, r0
 8003310:	6039      	str	r1, [r7, #0]
 8003312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003318:	2b00      	cmp	r3, #0
 800331a:	db0a      	blt.n	8003332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	b2da      	uxtb	r2, r3
 8003320:	490c      	ldr	r1, [pc, #48]	@ (8003354 <__NVIC_SetPriority+0x4c>)
 8003322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003326:	0112      	lsls	r2, r2, #4
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	440b      	add	r3, r1
 800332c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003330:	e00a      	b.n	8003348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	b2da      	uxtb	r2, r3
 8003336:	4908      	ldr	r1, [pc, #32]	@ (8003358 <__NVIC_SetPriority+0x50>)
 8003338:	79fb      	ldrb	r3, [r7, #7]
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	3b04      	subs	r3, #4
 8003340:	0112      	lsls	r2, r2, #4
 8003342:	b2d2      	uxtb	r2, r2
 8003344:	440b      	add	r3, r1
 8003346:	761a      	strb	r2, [r3, #24]
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	e000e100 	.word	0xe000e100
 8003358:	e000ed00 	.word	0xe000ed00

0800335c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800335c:	b480      	push	{r7}
 800335e:	b089      	sub	sp, #36	@ 0x24
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	f1c3 0307 	rsb	r3, r3, #7
 8003376:	2b04      	cmp	r3, #4
 8003378:	bf28      	it	cs
 800337a:	2304      	movcs	r3, #4
 800337c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	3304      	adds	r3, #4
 8003382:	2b06      	cmp	r3, #6
 8003384:	d902      	bls.n	800338c <NVIC_EncodePriority+0x30>
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	3b03      	subs	r3, #3
 800338a:	e000      	b.n	800338e <NVIC_EncodePriority+0x32>
 800338c:	2300      	movs	r3, #0
 800338e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003390:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	43da      	mvns	r2, r3
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	401a      	ands	r2, r3
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	fa01 f303 	lsl.w	r3, r1, r3
 80033ae:	43d9      	mvns	r1, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033b4:	4313      	orrs	r3, r2
         );
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3724      	adds	r7, #36	@ 0x24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
	...

080033c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033d4:	d301      	bcc.n	80033da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033d6:	2301      	movs	r3, #1
 80033d8:	e00f      	b.n	80033fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033da:	4a0a      	ldr	r2, [pc, #40]	@ (8003404 <SysTick_Config+0x40>)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3b01      	subs	r3, #1
 80033e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033e2:	210f      	movs	r1, #15
 80033e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80033e8:	f7ff ff8e 	bl	8003308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033ec:	4b05      	ldr	r3, [pc, #20]	@ (8003404 <SysTick_Config+0x40>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033f2:	4b04      	ldr	r3, [pc, #16]	@ (8003404 <SysTick_Config+0x40>)
 80033f4:	2207      	movs	r2, #7
 80033f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	e000e010 	.word	0xe000e010

08003408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7ff ff29 	bl	8003268 <__NVIC_SetPriorityGrouping>
}
 8003416:	bf00      	nop
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800341e:	b580      	push	{r7, lr}
 8003420:	b086      	sub	sp, #24
 8003422:	af00      	add	r7, sp, #0
 8003424:	4603      	mov	r3, r0
 8003426:	60b9      	str	r1, [r7, #8]
 8003428:	607a      	str	r2, [r7, #4]
 800342a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800342c:	2300      	movs	r3, #0
 800342e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003430:	f7ff ff3e 	bl	80032b0 <__NVIC_GetPriorityGrouping>
 8003434:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	68b9      	ldr	r1, [r7, #8]
 800343a:	6978      	ldr	r0, [r7, #20]
 800343c:	f7ff ff8e 	bl	800335c <NVIC_EncodePriority>
 8003440:	4602      	mov	r2, r0
 8003442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003446:	4611      	mov	r1, r2
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff ff5d 	bl	8003308 <__NVIC_SetPriority>
}
 800344e:	bf00      	nop
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b082      	sub	sp, #8
 800345a:	af00      	add	r7, sp, #0
 800345c:	4603      	mov	r3, r0
 800345e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff ff31 	bl	80032cc <__NVIC_EnableIRQ>
}
 800346a:	bf00      	nop
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b082      	sub	sp, #8
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7ff ffa2 	bl	80033c4 <SysTick_Config>
 8003480:	4603      	mov	r3, r0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
	...

0800348c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800348c:	b480      	push	{r7}
 800348e:	b089      	sub	sp, #36	@ 0x24
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003496:	2300      	movs	r3, #0
 8003498:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800349a:	2300      	movs	r3, #0
 800349c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800349e:	2300      	movs	r3, #0
 80034a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034a2:	2300      	movs	r3, #0
 80034a4:	61fb      	str	r3, [r7, #28]
 80034a6:	e165      	b.n	8003774 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034a8:	2201      	movs	r2, #1
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	4013      	ands	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	f040 8154 	bne.w	800376e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f003 0303 	and.w	r3, r3, #3
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d005      	beq.n	80034de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d130      	bne.n	8003540 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	2203      	movs	r2, #3
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	43db      	mvns	r3, r3
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4013      	ands	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	4313      	orrs	r3, r2
 8003506:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003514:	2201      	movs	r2, #1
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	43db      	mvns	r3, r3
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4013      	ands	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	091b      	lsrs	r3, r3, #4
 800352a:	f003 0201 	and.w	r2, r3, #1
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4313      	orrs	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f003 0303 	and.w	r3, r3, #3
 8003548:	2b03      	cmp	r3, #3
 800354a:	d017      	beq.n	800357c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	2203      	movs	r2, #3
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	43db      	mvns	r3, r3
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	4013      	ands	r3, r2
 8003562:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	4313      	orrs	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f003 0303 	and.w	r3, r3, #3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d123      	bne.n	80035d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	08da      	lsrs	r2, r3, #3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3208      	adds	r2, #8
 8003590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003594:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	220f      	movs	r2, #15
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	43db      	mvns	r3, r3
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	4013      	ands	r3, r2
 80035aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	691a      	ldr	r2, [r3, #16]
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	4313      	orrs	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	08da      	lsrs	r2, r3, #3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	3208      	adds	r2, #8
 80035ca:	69b9      	ldr	r1, [r7, #24]
 80035cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	2203      	movs	r2, #3
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	43db      	mvns	r3, r3
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	4013      	ands	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f003 0203 	and.w	r2, r3, #3
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 80ae 	beq.w	800376e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003612:	2300      	movs	r3, #0
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	4b5d      	ldr	r3, [pc, #372]	@ (800378c <HAL_GPIO_Init+0x300>)
 8003618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361a:	4a5c      	ldr	r2, [pc, #368]	@ (800378c <HAL_GPIO_Init+0x300>)
 800361c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003620:	6453      	str	r3, [r2, #68]	@ 0x44
 8003622:	4b5a      	ldr	r3, [pc, #360]	@ (800378c <HAL_GPIO_Init+0x300>)
 8003624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003626:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800362e:	4a58      	ldr	r2, [pc, #352]	@ (8003790 <HAL_GPIO_Init+0x304>)
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	089b      	lsrs	r3, r3, #2
 8003634:	3302      	adds	r3, #2
 8003636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800363a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	220f      	movs	r2, #15
 8003646:	fa02 f303 	lsl.w	r3, r2, r3
 800364a:	43db      	mvns	r3, r3
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	4013      	ands	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a4f      	ldr	r2, [pc, #316]	@ (8003794 <HAL_GPIO_Init+0x308>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d025      	beq.n	80036a6 <HAL_GPIO_Init+0x21a>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a4e      	ldr	r2, [pc, #312]	@ (8003798 <HAL_GPIO_Init+0x30c>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d01f      	beq.n	80036a2 <HAL_GPIO_Init+0x216>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a4d      	ldr	r2, [pc, #308]	@ (800379c <HAL_GPIO_Init+0x310>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d019      	beq.n	800369e <HAL_GPIO_Init+0x212>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a4c      	ldr	r2, [pc, #304]	@ (80037a0 <HAL_GPIO_Init+0x314>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d013      	beq.n	800369a <HAL_GPIO_Init+0x20e>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a4b      	ldr	r2, [pc, #300]	@ (80037a4 <HAL_GPIO_Init+0x318>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d00d      	beq.n	8003696 <HAL_GPIO_Init+0x20a>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a4a      	ldr	r2, [pc, #296]	@ (80037a8 <HAL_GPIO_Init+0x31c>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d007      	beq.n	8003692 <HAL_GPIO_Init+0x206>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a49      	ldr	r2, [pc, #292]	@ (80037ac <HAL_GPIO_Init+0x320>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d101      	bne.n	800368e <HAL_GPIO_Init+0x202>
 800368a:	2306      	movs	r3, #6
 800368c:	e00c      	b.n	80036a8 <HAL_GPIO_Init+0x21c>
 800368e:	2307      	movs	r3, #7
 8003690:	e00a      	b.n	80036a8 <HAL_GPIO_Init+0x21c>
 8003692:	2305      	movs	r3, #5
 8003694:	e008      	b.n	80036a8 <HAL_GPIO_Init+0x21c>
 8003696:	2304      	movs	r3, #4
 8003698:	e006      	b.n	80036a8 <HAL_GPIO_Init+0x21c>
 800369a:	2303      	movs	r3, #3
 800369c:	e004      	b.n	80036a8 <HAL_GPIO_Init+0x21c>
 800369e:	2302      	movs	r3, #2
 80036a0:	e002      	b.n	80036a8 <HAL_GPIO_Init+0x21c>
 80036a2:	2301      	movs	r3, #1
 80036a4:	e000      	b.n	80036a8 <HAL_GPIO_Init+0x21c>
 80036a6:	2300      	movs	r3, #0
 80036a8:	69fa      	ldr	r2, [r7, #28]
 80036aa:	f002 0203 	and.w	r2, r2, #3
 80036ae:	0092      	lsls	r2, r2, #2
 80036b0:	4093      	lsls	r3, r2
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036b8:	4935      	ldr	r1, [pc, #212]	@ (8003790 <HAL_GPIO_Init+0x304>)
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	089b      	lsrs	r3, r3, #2
 80036be:	3302      	adds	r3, #2
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036c6:	4b3a      	ldr	r3, [pc, #232]	@ (80037b0 <HAL_GPIO_Init+0x324>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	43db      	mvns	r3, r3
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	4013      	ands	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036ea:	4a31      	ldr	r2, [pc, #196]	@ (80037b0 <HAL_GPIO_Init+0x324>)
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036f0:	4b2f      	ldr	r3, [pc, #188]	@ (80037b0 <HAL_GPIO_Init+0x324>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	43db      	mvns	r3, r3
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4013      	ands	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	4313      	orrs	r3, r2
 8003712:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003714:	4a26      	ldr	r2, [pc, #152]	@ (80037b0 <HAL_GPIO_Init+0x324>)
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800371a:	4b25      	ldr	r3, [pc, #148]	@ (80037b0 <HAL_GPIO_Init+0x324>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	43db      	mvns	r3, r3
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	4013      	ands	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	4313      	orrs	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800373e:	4a1c      	ldr	r2, [pc, #112]	@ (80037b0 <HAL_GPIO_Init+0x324>)
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003744:	4b1a      	ldr	r3, [pc, #104]	@ (80037b0 <HAL_GPIO_Init+0x324>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	43db      	mvns	r3, r3
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	4013      	ands	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d003      	beq.n	8003768 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	4313      	orrs	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003768:	4a11      	ldr	r2, [pc, #68]	@ (80037b0 <HAL_GPIO_Init+0x324>)
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	3301      	adds	r3, #1
 8003772:	61fb      	str	r3, [r7, #28]
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	2b0f      	cmp	r3, #15
 8003778:	f67f ae96 	bls.w	80034a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800377c:	bf00      	nop
 800377e:	bf00      	nop
 8003780:	3724      	adds	r7, #36	@ 0x24
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	40023800 	.word	0x40023800
 8003790:	40013800 	.word	0x40013800
 8003794:	40020000 	.word	0x40020000
 8003798:	40020400 	.word	0x40020400
 800379c:	40020800 	.word	0x40020800
 80037a0:	40020c00 	.word	0x40020c00
 80037a4:	40021000 	.word	0x40021000
 80037a8:	40021400 	.word	0x40021400
 80037ac:	40021800 	.word	0x40021800
 80037b0:	40013c00 	.word	0x40013c00

080037b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	460b      	mov	r3, r1
 80037be:	807b      	strh	r3, [r7, #2]
 80037c0:	4613      	mov	r3, r2
 80037c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037c4:	787b      	ldrb	r3, [r7, #1]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ca:	887a      	ldrh	r2, [r7, #2]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037d0:	e003      	b.n	80037da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037d2:	887b      	ldrh	r3, [r7, #2]
 80037d4:	041a      	lsls	r2, r3, #16
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	619a      	str	r2, [r3, #24]
}
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
	...

080037e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e12b      	b.n	8003a52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d106      	bne.n	8003814 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7fe f8d6 	bl	80019c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2224      	movs	r2, #36	@ 0x24
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0201 	bic.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800383a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800384a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800384c:	f000 fa02 	bl	8003c54 <HAL_RCC_GetPCLK1Freq>
 8003850:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	4a81      	ldr	r2, [pc, #516]	@ (8003a5c <HAL_I2C_Init+0x274>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d807      	bhi.n	800386c <HAL_I2C_Init+0x84>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4a80      	ldr	r2, [pc, #512]	@ (8003a60 <HAL_I2C_Init+0x278>)
 8003860:	4293      	cmp	r3, r2
 8003862:	bf94      	ite	ls
 8003864:	2301      	movls	r3, #1
 8003866:	2300      	movhi	r3, #0
 8003868:	b2db      	uxtb	r3, r3
 800386a:	e006      	b.n	800387a <HAL_I2C_Init+0x92>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4a7d      	ldr	r2, [pc, #500]	@ (8003a64 <HAL_I2C_Init+0x27c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	bf94      	ite	ls
 8003874:	2301      	movls	r3, #1
 8003876:	2300      	movhi	r3, #0
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e0e7      	b.n	8003a52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	4a78      	ldr	r2, [pc, #480]	@ (8003a68 <HAL_I2C_Init+0x280>)
 8003886:	fba2 2303 	umull	r2, r3, r2, r3
 800388a:	0c9b      	lsrs	r3, r3, #18
 800388c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	430a      	orrs	r2, r1
 80038a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	4a6a      	ldr	r2, [pc, #424]	@ (8003a5c <HAL_I2C_Init+0x274>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d802      	bhi.n	80038bc <HAL_I2C_Init+0xd4>
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	3301      	adds	r3, #1
 80038ba:	e009      	b.n	80038d0 <HAL_I2C_Init+0xe8>
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80038c2:	fb02 f303 	mul.w	r3, r2, r3
 80038c6:	4a69      	ldr	r2, [pc, #420]	@ (8003a6c <HAL_I2C_Init+0x284>)
 80038c8:	fba2 2303 	umull	r2, r3, r2, r3
 80038cc:	099b      	lsrs	r3, r3, #6
 80038ce:	3301      	adds	r3, #1
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6812      	ldr	r2, [r2, #0]
 80038d4:	430b      	orrs	r3, r1
 80038d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80038e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	495c      	ldr	r1, [pc, #368]	@ (8003a5c <HAL_I2C_Init+0x274>)
 80038ec:	428b      	cmp	r3, r1
 80038ee:	d819      	bhi.n	8003924 <HAL_I2C_Init+0x13c>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	1e59      	subs	r1, r3, #1
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80038fe:	1c59      	adds	r1, r3, #1
 8003900:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003904:	400b      	ands	r3, r1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00a      	beq.n	8003920 <HAL_I2C_Init+0x138>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	1e59      	subs	r1, r3, #1
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	fbb1 f3f3 	udiv	r3, r1, r3
 8003918:	3301      	adds	r3, #1
 800391a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800391e:	e051      	b.n	80039c4 <HAL_I2C_Init+0x1dc>
 8003920:	2304      	movs	r3, #4
 8003922:	e04f      	b.n	80039c4 <HAL_I2C_Init+0x1dc>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d111      	bne.n	8003950 <HAL_I2C_Init+0x168>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	1e58      	subs	r0, r3, #1
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6859      	ldr	r1, [r3, #4]
 8003934:	460b      	mov	r3, r1
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	440b      	add	r3, r1
 800393a:	fbb0 f3f3 	udiv	r3, r0, r3
 800393e:	3301      	adds	r3, #1
 8003940:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003944:	2b00      	cmp	r3, #0
 8003946:	bf0c      	ite	eq
 8003948:	2301      	moveq	r3, #1
 800394a:	2300      	movne	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	e012      	b.n	8003976 <HAL_I2C_Init+0x18e>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	1e58      	subs	r0, r3, #1
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6859      	ldr	r1, [r3, #4]
 8003958:	460b      	mov	r3, r1
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	0099      	lsls	r1, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	fbb0 f3f3 	udiv	r3, r0, r3
 8003966:	3301      	adds	r3, #1
 8003968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800396c:	2b00      	cmp	r3, #0
 800396e:	bf0c      	ite	eq
 8003970:	2301      	moveq	r3, #1
 8003972:	2300      	movne	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <HAL_I2C_Init+0x196>
 800397a:	2301      	movs	r3, #1
 800397c:	e022      	b.n	80039c4 <HAL_I2C_Init+0x1dc>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10e      	bne.n	80039a4 <HAL_I2C_Init+0x1bc>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	1e58      	subs	r0, r3, #1
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6859      	ldr	r1, [r3, #4]
 800398e:	460b      	mov	r3, r1
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	440b      	add	r3, r1
 8003994:	fbb0 f3f3 	udiv	r3, r0, r3
 8003998:	3301      	adds	r3, #1
 800399a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800399e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039a2:	e00f      	b.n	80039c4 <HAL_I2C_Init+0x1dc>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	1e58      	subs	r0, r3, #1
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6859      	ldr	r1, [r3, #4]
 80039ac:	460b      	mov	r3, r1
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	440b      	add	r3, r1
 80039b2:	0099      	lsls	r1, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ba:	3301      	adds	r3, #1
 80039bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80039c4:	6879      	ldr	r1, [r7, #4]
 80039c6:	6809      	ldr	r1, [r1, #0]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69da      	ldr	r2, [r3, #28]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80039f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6911      	ldr	r1, [r2, #16]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	68d2      	ldr	r2, [r2, #12]
 80039fe:	4311      	orrs	r1, r2
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	6812      	ldr	r2, [r2, #0]
 8003a04:	430b      	orrs	r3, r1
 8003a06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	695a      	ldr	r2, [r3, #20]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f042 0201 	orr.w	r2, r2, #1
 8003a32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	000186a0 	.word	0x000186a0
 8003a60:	001e847f 	.word	0x001e847f
 8003a64:	003d08ff 	.word	0x003d08ff
 8003a68:	431bde83 	.word	0x431bde83
 8003a6c:	10624dd3 	.word	0x10624dd3

08003a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e0cc      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a84:	4b68      	ldr	r3, [pc, #416]	@ (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 030f 	and.w	r3, r3, #15
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d90c      	bls.n	8003aac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a92:	4b65      	ldr	r3, [pc, #404]	@ (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	b2d2      	uxtb	r2, r2
 8003a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a9a:	4b63      	ldr	r3, [pc, #396]	@ (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 030f 	and.w	r3, r3, #15
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d001      	beq.n	8003aac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e0b8      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d020      	beq.n	8003afa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d005      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ac4:	4b59      	ldr	r3, [pc, #356]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	4a58      	ldr	r2, [pc, #352]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003aca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003ace:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0308 	and.w	r3, r3, #8
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d005      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003adc:	4b53      	ldr	r3, [pc, #332]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	4a52      	ldr	r2, [pc, #328]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ae2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ae6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae8:	4b50      	ldr	r3, [pc, #320]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	494d      	ldr	r1, [pc, #308]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d044      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d107      	bne.n	8003b1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0e:	4b47      	ldr	r3, [pc, #284]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d119      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e07f      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d003      	beq.n	8003b2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b2a:	2b03      	cmp	r3, #3
 8003b2c:	d107      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b2e:	4b3f      	ldr	r3, [pc, #252]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d109      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e06f      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b3e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e067      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b4e:	4b37      	ldr	r3, [pc, #220]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f023 0203 	bic.w	r2, r3, #3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	4934      	ldr	r1, [pc, #208]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b60:	f7fe f8da 	bl	8001d18 <HAL_GetTick>
 8003b64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b66:	e00a      	b.n	8003b7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b68:	f7fe f8d6 	bl	8001d18 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e04f      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b7e:	4b2b      	ldr	r3, [pc, #172]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 020c 	and.w	r2, r3, #12
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d1eb      	bne.n	8003b68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b90:	4b25      	ldr	r3, [pc, #148]	@ (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 030f 	and.w	r3, r3, #15
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d20c      	bcs.n	8003bb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b9e:	4b22      	ldr	r3, [pc, #136]	@ (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba6:	4b20      	ldr	r3, [pc, #128]	@ (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d001      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e032      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d008      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bc4:	4b19      	ldr	r3, [pc, #100]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	4916      	ldr	r1, [pc, #88]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0308 	and.w	r3, r3, #8
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d009      	beq.n	8003bf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003be2:	4b12      	ldr	r3, [pc, #72]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	490e      	ldr	r1, [pc, #56]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bf6:	f000 f855 	bl	8003ca4 <HAL_RCC_GetSysClockFreq>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	091b      	lsrs	r3, r3, #4
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	490a      	ldr	r1, [pc, #40]	@ (8003c30 <HAL_RCC_ClockConfig+0x1c0>)
 8003c08:	5ccb      	ldrb	r3, [r1, r3]
 8003c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c0e:	4a09      	ldr	r2, [pc, #36]	@ (8003c34 <HAL_RCC_ClockConfig+0x1c4>)
 8003c10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c12:	4b09      	ldr	r3, [pc, #36]	@ (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fe f83a 	bl	8001c90 <HAL_InitTick>

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	40023c00 	.word	0x40023c00
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	080057f8 	.word	0x080057f8
 8003c34:	20000004 	.word	0x20000004
 8003c38:	20000008 	.word	0x20000008

08003c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c40:	4b03      	ldr	r3, [pc, #12]	@ (8003c50 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c42:	681b      	ldr	r3, [r3, #0]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	20000004 	.word	0x20000004

08003c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c58:	f7ff fff0 	bl	8003c3c <HAL_RCC_GetHCLKFreq>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	4b05      	ldr	r3, [pc, #20]	@ (8003c74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	0a9b      	lsrs	r3, r3, #10
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	4903      	ldr	r1, [pc, #12]	@ (8003c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c6a:	5ccb      	ldrb	r3, [r1, r3]
 8003c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	40023800 	.word	0x40023800
 8003c78:	08005808 	.word	0x08005808

08003c7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c80:	f7ff ffdc 	bl	8003c3c <HAL_RCC_GetHCLKFreq>
 8003c84:	4602      	mov	r2, r0
 8003c86:	4b05      	ldr	r3, [pc, #20]	@ (8003c9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	0b5b      	lsrs	r3, r3, #13
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	4903      	ldr	r1, [pc, #12]	@ (8003ca0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c92:	5ccb      	ldrb	r3, [r1, r3]
 8003c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	08005808 	.word	0x08005808

08003ca4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ca8:	b0ae      	sub	sp, #184	@ 0xb8
 8003caa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cca:	4bcb      	ldr	r3, [pc, #812]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 030c 	and.w	r3, r3, #12
 8003cd2:	2b0c      	cmp	r3, #12
 8003cd4:	f200 8206 	bhi.w	80040e4 <HAL_RCC_GetSysClockFreq+0x440>
 8003cd8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ce0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cde:	bf00      	nop
 8003ce0:	08003d15 	.word	0x08003d15
 8003ce4:	080040e5 	.word	0x080040e5
 8003ce8:	080040e5 	.word	0x080040e5
 8003cec:	080040e5 	.word	0x080040e5
 8003cf0:	08003d1d 	.word	0x08003d1d
 8003cf4:	080040e5 	.word	0x080040e5
 8003cf8:	080040e5 	.word	0x080040e5
 8003cfc:	080040e5 	.word	0x080040e5
 8003d00:	08003d25 	.word	0x08003d25
 8003d04:	080040e5 	.word	0x080040e5
 8003d08:	080040e5 	.word	0x080040e5
 8003d0c:	080040e5 	.word	0x080040e5
 8003d10:	08003f15 	.word	0x08003f15
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d14:	4bb9      	ldr	r3, [pc, #740]	@ (8003ffc <HAL_RCC_GetSysClockFreq+0x358>)
 8003d16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8003d1a:	e1e7      	b.n	80040ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d1c:	4bb8      	ldr	r3, [pc, #736]	@ (8004000 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003d1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d22:	e1e3      	b.n	80040ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d24:	4bb4      	ldr	r3, [pc, #720]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d30:	4bb1      	ldr	r3, [pc, #708]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d071      	beq.n	8003e20 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d3c:	4bae      	ldr	r3, [pc, #696]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	099b      	lsrs	r3, r3, #6
 8003d42:	2200      	movs	r2, #0
 8003d44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d48:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003d4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d54:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d58:	2300      	movs	r3, #0
 8003d5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003d5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003d62:	4622      	mov	r2, r4
 8003d64:	462b      	mov	r3, r5
 8003d66:	f04f 0000 	mov.w	r0, #0
 8003d6a:	f04f 0100 	mov.w	r1, #0
 8003d6e:	0159      	lsls	r1, r3, #5
 8003d70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d74:	0150      	lsls	r0, r2, #5
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	4621      	mov	r1, r4
 8003d7c:	1a51      	subs	r1, r2, r1
 8003d7e:	6439      	str	r1, [r7, #64]	@ 0x40
 8003d80:	4629      	mov	r1, r5
 8003d82:	eb63 0301 	sbc.w	r3, r3, r1
 8003d86:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d88:	f04f 0200 	mov.w	r2, #0
 8003d8c:	f04f 0300 	mov.w	r3, #0
 8003d90:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003d94:	4649      	mov	r1, r9
 8003d96:	018b      	lsls	r3, r1, #6
 8003d98:	4641      	mov	r1, r8
 8003d9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d9e:	4641      	mov	r1, r8
 8003da0:	018a      	lsls	r2, r1, #6
 8003da2:	4641      	mov	r1, r8
 8003da4:	1a51      	subs	r1, r2, r1
 8003da6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003da8:	4649      	mov	r1, r9
 8003daa:	eb63 0301 	sbc.w	r3, r3, r1
 8003dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003db0:	f04f 0200 	mov.w	r2, #0
 8003db4:	f04f 0300 	mov.w	r3, #0
 8003db8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003dbc:	4649      	mov	r1, r9
 8003dbe:	00cb      	lsls	r3, r1, #3
 8003dc0:	4641      	mov	r1, r8
 8003dc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dc6:	4641      	mov	r1, r8
 8003dc8:	00ca      	lsls	r2, r1, #3
 8003dca:	4610      	mov	r0, r2
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4603      	mov	r3, r0
 8003dd0:	4622      	mov	r2, r4
 8003dd2:	189b      	adds	r3, r3, r2
 8003dd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dd6:	462b      	mov	r3, r5
 8003dd8:	460a      	mov	r2, r1
 8003dda:	eb42 0303 	adc.w	r3, r2, r3
 8003dde:	637b      	str	r3, [r7, #52]	@ 0x34
 8003de0:	f04f 0200 	mov.w	r2, #0
 8003de4:	f04f 0300 	mov.w	r3, #0
 8003de8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003dec:	4629      	mov	r1, r5
 8003dee:	024b      	lsls	r3, r1, #9
 8003df0:	4621      	mov	r1, r4
 8003df2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003df6:	4621      	mov	r1, r4
 8003df8:	024a      	lsls	r2, r1, #9
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e02:	2200      	movs	r2, #0
 8003e04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e08:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e0c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003e10:	f7fc fefc 	bl	8000c0c <__aeabi_uldivmod>
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	4613      	mov	r3, r2
 8003e1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e1e:	e067      	b.n	8003ef0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e20:	4b75      	ldr	r3, [pc, #468]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	099b      	lsrs	r3, r3, #6
 8003e26:	2200      	movs	r2, #0
 8003e28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e2c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003e30:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e38:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e3e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003e42:	4622      	mov	r2, r4
 8003e44:	462b      	mov	r3, r5
 8003e46:	f04f 0000 	mov.w	r0, #0
 8003e4a:	f04f 0100 	mov.w	r1, #0
 8003e4e:	0159      	lsls	r1, r3, #5
 8003e50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e54:	0150      	lsls	r0, r2, #5
 8003e56:	4602      	mov	r2, r0
 8003e58:	460b      	mov	r3, r1
 8003e5a:	4621      	mov	r1, r4
 8003e5c:	1a51      	subs	r1, r2, r1
 8003e5e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003e60:	4629      	mov	r1, r5
 8003e62:	eb63 0301 	sbc.w	r3, r3, r1
 8003e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e68:	f04f 0200 	mov.w	r2, #0
 8003e6c:	f04f 0300 	mov.w	r3, #0
 8003e70:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003e74:	4649      	mov	r1, r9
 8003e76:	018b      	lsls	r3, r1, #6
 8003e78:	4641      	mov	r1, r8
 8003e7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e7e:	4641      	mov	r1, r8
 8003e80:	018a      	lsls	r2, r1, #6
 8003e82:	4641      	mov	r1, r8
 8003e84:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e88:	4649      	mov	r1, r9
 8003e8a:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e8e:	f04f 0200 	mov.w	r2, #0
 8003e92:	f04f 0300 	mov.w	r3, #0
 8003e96:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e9a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ea2:	4692      	mov	sl, r2
 8003ea4:	469b      	mov	fp, r3
 8003ea6:	4623      	mov	r3, r4
 8003ea8:	eb1a 0303 	adds.w	r3, sl, r3
 8003eac:	623b      	str	r3, [r7, #32]
 8003eae:	462b      	mov	r3, r5
 8003eb0:	eb4b 0303 	adc.w	r3, fp, r3
 8003eb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eb6:	f04f 0200 	mov.w	r2, #0
 8003eba:	f04f 0300 	mov.w	r3, #0
 8003ebe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003ec2:	4629      	mov	r1, r5
 8003ec4:	028b      	lsls	r3, r1, #10
 8003ec6:	4621      	mov	r1, r4
 8003ec8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ecc:	4621      	mov	r1, r4
 8003ece:	028a      	lsls	r2, r1, #10
 8003ed0:	4610      	mov	r0, r2
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ed8:	2200      	movs	r2, #0
 8003eda:	673b      	str	r3, [r7, #112]	@ 0x70
 8003edc:	677a      	str	r2, [r7, #116]	@ 0x74
 8003ede:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003ee2:	f7fc fe93 	bl	8000c0c <__aeabi_uldivmod>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	460b      	mov	r3, r1
 8003eea:	4613      	mov	r3, r2
 8003eec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ef0:	4b41      	ldr	r3, [pc, #260]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	0c1b      	lsrs	r3, r3, #16
 8003ef6:	f003 0303 	and.w	r3, r3, #3
 8003efa:	3301      	adds	r3, #1
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8003f02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003f12:	e0eb      	b.n	80040ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f14:	4b38      	ldr	r3, [pc, #224]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f20:	4b35      	ldr	r3, [pc, #212]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d06b      	beq.n	8004004 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f2c:	4b32      	ldr	r3, [pc, #200]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	099b      	lsrs	r3, r3, #6
 8003f32:	2200      	movs	r2, #0
 8003f34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f36:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f3e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f40:	2300      	movs	r3, #0
 8003f42:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f44:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003f48:	4622      	mov	r2, r4
 8003f4a:	462b      	mov	r3, r5
 8003f4c:	f04f 0000 	mov.w	r0, #0
 8003f50:	f04f 0100 	mov.w	r1, #0
 8003f54:	0159      	lsls	r1, r3, #5
 8003f56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f5a:	0150      	lsls	r0, r2, #5
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	4621      	mov	r1, r4
 8003f62:	1a51      	subs	r1, r2, r1
 8003f64:	61b9      	str	r1, [r7, #24]
 8003f66:	4629      	mov	r1, r5
 8003f68:	eb63 0301 	sbc.w	r3, r3, r1
 8003f6c:	61fb      	str	r3, [r7, #28]
 8003f6e:	f04f 0200 	mov.w	r2, #0
 8003f72:	f04f 0300 	mov.w	r3, #0
 8003f76:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003f7a:	4659      	mov	r1, fp
 8003f7c:	018b      	lsls	r3, r1, #6
 8003f7e:	4651      	mov	r1, sl
 8003f80:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f84:	4651      	mov	r1, sl
 8003f86:	018a      	lsls	r2, r1, #6
 8003f88:	4651      	mov	r1, sl
 8003f8a:	ebb2 0801 	subs.w	r8, r2, r1
 8003f8e:	4659      	mov	r1, fp
 8003f90:	eb63 0901 	sbc.w	r9, r3, r1
 8003f94:	f04f 0200 	mov.w	r2, #0
 8003f98:	f04f 0300 	mov.w	r3, #0
 8003f9c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fa0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fa4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fa8:	4690      	mov	r8, r2
 8003faa:	4699      	mov	r9, r3
 8003fac:	4623      	mov	r3, r4
 8003fae:	eb18 0303 	adds.w	r3, r8, r3
 8003fb2:	613b      	str	r3, [r7, #16]
 8003fb4:	462b      	mov	r3, r5
 8003fb6:	eb49 0303 	adc.w	r3, r9, r3
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	f04f 0300 	mov.w	r3, #0
 8003fc4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003fc8:	4629      	mov	r1, r5
 8003fca:	024b      	lsls	r3, r1, #9
 8003fcc:	4621      	mov	r1, r4
 8003fce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fd2:	4621      	mov	r1, r4
 8003fd4:	024a      	lsls	r2, r1, #9
 8003fd6:	4610      	mov	r0, r2
 8003fd8:	4619      	mov	r1, r3
 8003fda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003fde:	2200      	movs	r2, #0
 8003fe0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003fe2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003fe4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003fe8:	f7fc fe10 	bl	8000c0c <__aeabi_uldivmod>
 8003fec:	4602      	mov	r2, r0
 8003fee:	460b      	mov	r3, r1
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ff6:	e065      	b.n	80040c4 <HAL_RCC_GetSysClockFreq+0x420>
 8003ff8:	40023800 	.word	0x40023800
 8003ffc:	00f42400 	.word	0x00f42400
 8004000:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004004:	4b3d      	ldr	r3, [pc, #244]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x458>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	099b      	lsrs	r3, r3, #6
 800400a:	2200      	movs	r2, #0
 800400c:	4618      	mov	r0, r3
 800400e:	4611      	mov	r1, r2
 8004010:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004014:	653b      	str	r3, [r7, #80]	@ 0x50
 8004016:	2300      	movs	r3, #0
 8004018:	657b      	str	r3, [r7, #84]	@ 0x54
 800401a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800401e:	4642      	mov	r2, r8
 8004020:	464b      	mov	r3, r9
 8004022:	f04f 0000 	mov.w	r0, #0
 8004026:	f04f 0100 	mov.w	r1, #0
 800402a:	0159      	lsls	r1, r3, #5
 800402c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004030:	0150      	lsls	r0, r2, #5
 8004032:	4602      	mov	r2, r0
 8004034:	460b      	mov	r3, r1
 8004036:	4641      	mov	r1, r8
 8004038:	1a51      	subs	r1, r2, r1
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	4649      	mov	r1, r9
 800403e:	eb63 0301 	sbc.w	r3, r3, r1
 8004042:	60fb      	str	r3, [r7, #12]
 8004044:	f04f 0200 	mov.w	r2, #0
 8004048:	f04f 0300 	mov.w	r3, #0
 800404c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004050:	4659      	mov	r1, fp
 8004052:	018b      	lsls	r3, r1, #6
 8004054:	4651      	mov	r1, sl
 8004056:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800405a:	4651      	mov	r1, sl
 800405c:	018a      	lsls	r2, r1, #6
 800405e:	4651      	mov	r1, sl
 8004060:	1a54      	subs	r4, r2, r1
 8004062:	4659      	mov	r1, fp
 8004064:	eb63 0501 	sbc.w	r5, r3, r1
 8004068:	f04f 0200 	mov.w	r2, #0
 800406c:	f04f 0300 	mov.w	r3, #0
 8004070:	00eb      	lsls	r3, r5, #3
 8004072:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004076:	00e2      	lsls	r2, r4, #3
 8004078:	4614      	mov	r4, r2
 800407a:	461d      	mov	r5, r3
 800407c:	4643      	mov	r3, r8
 800407e:	18e3      	adds	r3, r4, r3
 8004080:	603b      	str	r3, [r7, #0]
 8004082:	464b      	mov	r3, r9
 8004084:	eb45 0303 	adc.w	r3, r5, r3
 8004088:	607b      	str	r3, [r7, #4]
 800408a:	f04f 0200 	mov.w	r2, #0
 800408e:	f04f 0300 	mov.w	r3, #0
 8004092:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004096:	4629      	mov	r1, r5
 8004098:	028b      	lsls	r3, r1, #10
 800409a:	4621      	mov	r1, r4
 800409c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040a0:	4621      	mov	r1, r4
 80040a2:	028a      	lsls	r2, r1, #10
 80040a4:	4610      	mov	r0, r2
 80040a6:	4619      	mov	r1, r3
 80040a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040ac:	2200      	movs	r2, #0
 80040ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040b0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80040b2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80040b6:	f7fc fda9 	bl	8000c0c <__aeabi_uldivmod>
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	4613      	mov	r3, r2
 80040c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80040c4:	4b0d      	ldr	r3, [pc, #52]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x458>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	0f1b      	lsrs	r3, r3, #28
 80040ca:	f003 0307 	and.w	r3, r3, #7
 80040ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80040d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80040d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80040da:	fbb2 f3f3 	udiv	r3, r2, r3
 80040de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80040e2:	e003      	b.n	80040ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040e4:	4b06      	ldr	r3, [pc, #24]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x45c>)
 80040e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80040ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	37b8      	adds	r7, #184	@ 0xb8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040fa:	bf00      	nop
 80040fc:	40023800 	.word	0x40023800
 8004100:	00f42400 	.word	0x00f42400

08004104 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e28d      	b.n	8004632 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 8083 	beq.w	800422a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004124:	4b94      	ldr	r3, [pc, #592]	@ (8004378 <HAL_RCC_OscConfig+0x274>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f003 030c 	and.w	r3, r3, #12
 800412c:	2b04      	cmp	r3, #4
 800412e:	d019      	beq.n	8004164 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004130:	4b91      	ldr	r3, [pc, #580]	@ (8004378 <HAL_RCC_OscConfig+0x274>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004138:	2b08      	cmp	r3, #8
 800413a:	d106      	bne.n	800414a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800413c:	4b8e      	ldr	r3, [pc, #568]	@ (8004378 <HAL_RCC_OscConfig+0x274>)
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004144:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004148:	d00c      	beq.n	8004164 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800414a:	4b8b      	ldr	r3, [pc, #556]	@ (8004378 <HAL_RCC_OscConfig+0x274>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004152:	2b0c      	cmp	r3, #12
 8004154:	d112      	bne.n	800417c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004156:	4b88      	ldr	r3, [pc, #544]	@ (8004378 <HAL_RCC_OscConfig+0x274>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800415e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004162:	d10b      	bne.n	800417c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004164:	4b84      	ldr	r3, [pc, #528]	@ (8004378 <HAL_RCC_OscConfig+0x274>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d05b      	beq.n	8004228 <HAL_RCC_OscConfig+0x124>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d157      	bne.n	8004228 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e25a      	b.n	8004632 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004184:	d106      	bne.n	8004194 <HAL_RCC_OscConfig+0x90>
 8004186:	4b7c      	ldr	r3, [pc, #496]	@ (8004378 <HAL_RCC_OscConfig+0x274>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a7b      	ldr	r2, [pc, #492]	@ (8004378 <HAL_RCC_OscConfig+0x274>)
 800418c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004190:	6013      	str	r3, [r2, #0]
 8004192:	e01d      	b.n	80041d0 <HAL_RCC_OscConfig+0xcc>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800419c:	d10c      	bne.n	80041b8 <HAL_RCC_OscConfig+0xb4>
 800419e:	4b76      	ldr	r3, [pc, #472]	@ (8004378 <HAL_RCC_OscConfig+0x274>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a75      	ldr	r2, [pc, #468]	@ (8004378 <HAL_RCC_OscConfig+0x274>)
 80041a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041a8:	6013      	str	r3, [r2, #0]
 80041aa:	4b73      	ldr	r3, [pc, #460]	@ (8004378 <HAL_RCC_OscConfig+0x274>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a72      	ldr	r2, [pc, #456]	@ (8004378 <HAL_RCC_OscConfig+0x274>)
 80041b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041b4:	6013      	str	r3, [r2, #0]
 80041b6:	e00b      	b.n	80041d0 <HAL_RCC_OscConfig+0xcc>
 80041b8:	4b6f      	ldr	r3, [pc, #444]	@ (8004378 <HAL_RCC_OscConfig+0x274>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a6e      	ldr	r2, [pc, #440]	@ (8004378 <HAL_RCC_OscConfig+0x274>)
 80041be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041c2:	6013      	str	r3, [r2, #0]
 80041c4:	4b6c      	ldr	r3, [pc, #432]	@ (8004378 <HAL_RCC_OscConfig+0x274>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a6b      	ldr	r2, [pc, #428]	@ (8004378 <HAL_RCC_OscConfig+0x274>)
 80041ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d013      	beq.n	8004200 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d8:	f7fd fd9e 	bl	8001d18 <HAL_GetTick>
 80041dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041e0:	f7fd fd9a 	bl	8001d18 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b64      	cmp	r3, #100	@ 0x64
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e21f      	b.n	8004632 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041f2:	4b61      	ldr	r3, [pc, #388]	@ (8004378 <HAL_RCC_OscConfig+0x274>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d0f0      	beq.n	80041e0 <HAL_RCC_OscConfig+0xdc>
 80041fe:	e014      	b.n	800422a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004200:	f7fd fd8a 	bl	8001d18 <HAL_GetTick>
 8004204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004208:	f7fd fd86 	bl	8001d18 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b64      	cmp	r3, #100	@ 0x64
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e20b      	b.n	8004632 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800421a:	4b57      	ldr	r3, [pc, #348]	@ (8004378 <HAL_RCC_OscConfig+0x274>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1f0      	bne.n	8004208 <HAL_RCC_OscConfig+0x104>
 8004226:	e000      	b.n	800422a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004228:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d06f      	beq.n	8004316 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004236:	4b50      	ldr	r3, [pc, #320]	@ (8004378 <HAL_RCC_OscConfig+0x274>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 030c 	and.w	r3, r3, #12
 800423e:	2b00      	cmp	r3, #0
 8004240:	d017      	beq.n	8004272 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004242:	4b4d      	ldr	r3, [pc, #308]	@ (8004378 <HAL_RCC_OscConfig+0x274>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800424a:	2b08      	cmp	r3, #8
 800424c:	d105      	bne.n	800425a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800424e:	4b4a      	ldr	r3, [pc, #296]	@ (8004378 <HAL_RCC_OscConfig+0x274>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00b      	beq.n	8004272 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800425a:	4b47      	ldr	r3, [pc, #284]	@ (8004378 <HAL_RCC_OscConfig+0x274>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004262:	2b0c      	cmp	r3, #12
 8004264:	d11c      	bne.n	80042a0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004266:	4b44      	ldr	r3, [pc, #272]	@ (8004378 <HAL_RCC_OscConfig+0x274>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d116      	bne.n	80042a0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004272:	4b41      	ldr	r3, [pc, #260]	@ (8004378 <HAL_RCC_OscConfig+0x274>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d005      	beq.n	800428a <HAL_RCC_OscConfig+0x186>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d001      	beq.n	800428a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e1d3      	b.n	8004632 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800428a:	4b3b      	ldr	r3, [pc, #236]	@ (8004378 <HAL_RCC_OscConfig+0x274>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	4937      	ldr	r1, [pc, #220]	@ (8004378 <HAL_RCC_OscConfig+0x274>)
 800429a:	4313      	orrs	r3, r2
 800429c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800429e:	e03a      	b.n	8004316 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d020      	beq.n	80042ea <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042a8:	4b34      	ldr	r3, [pc, #208]	@ (800437c <HAL_RCC_OscConfig+0x278>)
 80042aa:	2201      	movs	r2, #1
 80042ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ae:	f7fd fd33 	bl	8001d18 <HAL_GetTick>
 80042b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042b4:	e008      	b.n	80042c8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042b6:	f7fd fd2f 	bl	8001d18 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e1b4      	b.n	8004632 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042c8:	4b2b      	ldr	r3, [pc, #172]	@ (8004378 <HAL_RCC_OscConfig+0x274>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0f0      	beq.n	80042b6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042d4:	4b28      	ldr	r3, [pc, #160]	@ (8004378 <HAL_RCC_OscConfig+0x274>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	00db      	lsls	r3, r3, #3
 80042e2:	4925      	ldr	r1, [pc, #148]	@ (8004378 <HAL_RCC_OscConfig+0x274>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	600b      	str	r3, [r1, #0]
 80042e8:	e015      	b.n	8004316 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ea:	4b24      	ldr	r3, [pc, #144]	@ (800437c <HAL_RCC_OscConfig+0x278>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f0:	f7fd fd12 	bl	8001d18 <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042f8:	f7fd fd0e 	bl	8001d18 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e193      	b.n	8004632 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800430a:	4b1b      	ldr	r3, [pc, #108]	@ (8004378 <HAL_RCC_OscConfig+0x274>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1f0      	bne.n	80042f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0308 	and.w	r3, r3, #8
 800431e:	2b00      	cmp	r3, #0
 8004320:	d036      	beq.n	8004390 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d016      	beq.n	8004358 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800432a:	4b15      	ldr	r3, [pc, #84]	@ (8004380 <HAL_RCC_OscConfig+0x27c>)
 800432c:	2201      	movs	r2, #1
 800432e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004330:	f7fd fcf2 	bl	8001d18 <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004338:	f7fd fcee 	bl	8001d18 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e173      	b.n	8004632 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800434a:	4b0b      	ldr	r3, [pc, #44]	@ (8004378 <HAL_RCC_OscConfig+0x274>)
 800434c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0f0      	beq.n	8004338 <HAL_RCC_OscConfig+0x234>
 8004356:	e01b      	b.n	8004390 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004358:	4b09      	ldr	r3, [pc, #36]	@ (8004380 <HAL_RCC_OscConfig+0x27c>)
 800435a:	2200      	movs	r2, #0
 800435c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800435e:	f7fd fcdb 	bl	8001d18 <HAL_GetTick>
 8004362:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004364:	e00e      	b.n	8004384 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004366:	f7fd fcd7 	bl	8001d18 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d907      	bls.n	8004384 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e15c      	b.n	8004632 <HAL_RCC_OscConfig+0x52e>
 8004378:	40023800 	.word	0x40023800
 800437c:	42470000 	.word	0x42470000
 8004380:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004384:	4b8a      	ldr	r3, [pc, #552]	@ (80045b0 <HAL_RCC_OscConfig+0x4ac>)
 8004386:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1ea      	bne.n	8004366 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 8097 	beq.w	80044cc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800439e:	2300      	movs	r3, #0
 80043a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043a2:	4b83      	ldr	r3, [pc, #524]	@ (80045b0 <HAL_RCC_OscConfig+0x4ac>)
 80043a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10f      	bne.n	80043ce <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ae:	2300      	movs	r3, #0
 80043b0:	60bb      	str	r3, [r7, #8]
 80043b2:	4b7f      	ldr	r3, [pc, #508]	@ (80045b0 <HAL_RCC_OscConfig+0x4ac>)
 80043b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b6:	4a7e      	ldr	r2, [pc, #504]	@ (80045b0 <HAL_RCC_OscConfig+0x4ac>)
 80043b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80043be:	4b7c      	ldr	r3, [pc, #496]	@ (80045b0 <HAL_RCC_OscConfig+0x4ac>)
 80043c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043c6:	60bb      	str	r3, [r7, #8]
 80043c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043ca:	2301      	movs	r3, #1
 80043cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ce:	4b79      	ldr	r3, [pc, #484]	@ (80045b4 <HAL_RCC_OscConfig+0x4b0>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d118      	bne.n	800440c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043da:	4b76      	ldr	r3, [pc, #472]	@ (80045b4 <HAL_RCC_OscConfig+0x4b0>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a75      	ldr	r2, [pc, #468]	@ (80045b4 <HAL_RCC_OscConfig+0x4b0>)
 80043e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043e6:	f7fd fc97 	bl	8001d18 <HAL_GetTick>
 80043ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ec:	e008      	b.n	8004400 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ee:	f7fd fc93 	bl	8001d18 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d901      	bls.n	8004400 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e118      	b.n	8004632 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004400:	4b6c      	ldr	r3, [pc, #432]	@ (80045b4 <HAL_RCC_OscConfig+0x4b0>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004408:	2b00      	cmp	r3, #0
 800440a:	d0f0      	beq.n	80043ee <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d106      	bne.n	8004422 <HAL_RCC_OscConfig+0x31e>
 8004414:	4b66      	ldr	r3, [pc, #408]	@ (80045b0 <HAL_RCC_OscConfig+0x4ac>)
 8004416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004418:	4a65      	ldr	r2, [pc, #404]	@ (80045b0 <HAL_RCC_OscConfig+0x4ac>)
 800441a:	f043 0301 	orr.w	r3, r3, #1
 800441e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004420:	e01c      	b.n	800445c <HAL_RCC_OscConfig+0x358>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	2b05      	cmp	r3, #5
 8004428:	d10c      	bne.n	8004444 <HAL_RCC_OscConfig+0x340>
 800442a:	4b61      	ldr	r3, [pc, #388]	@ (80045b0 <HAL_RCC_OscConfig+0x4ac>)
 800442c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800442e:	4a60      	ldr	r2, [pc, #384]	@ (80045b0 <HAL_RCC_OscConfig+0x4ac>)
 8004430:	f043 0304 	orr.w	r3, r3, #4
 8004434:	6713      	str	r3, [r2, #112]	@ 0x70
 8004436:	4b5e      	ldr	r3, [pc, #376]	@ (80045b0 <HAL_RCC_OscConfig+0x4ac>)
 8004438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800443a:	4a5d      	ldr	r2, [pc, #372]	@ (80045b0 <HAL_RCC_OscConfig+0x4ac>)
 800443c:	f043 0301 	orr.w	r3, r3, #1
 8004440:	6713      	str	r3, [r2, #112]	@ 0x70
 8004442:	e00b      	b.n	800445c <HAL_RCC_OscConfig+0x358>
 8004444:	4b5a      	ldr	r3, [pc, #360]	@ (80045b0 <HAL_RCC_OscConfig+0x4ac>)
 8004446:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004448:	4a59      	ldr	r2, [pc, #356]	@ (80045b0 <HAL_RCC_OscConfig+0x4ac>)
 800444a:	f023 0301 	bic.w	r3, r3, #1
 800444e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004450:	4b57      	ldr	r3, [pc, #348]	@ (80045b0 <HAL_RCC_OscConfig+0x4ac>)
 8004452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004454:	4a56      	ldr	r2, [pc, #344]	@ (80045b0 <HAL_RCC_OscConfig+0x4ac>)
 8004456:	f023 0304 	bic.w	r3, r3, #4
 800445a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d015      	beq.n	8004490 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004464:	f7fd fc58 	bl	8001d18 <HAL_GetTick>
 8004468:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800446a:	e00a      	b.n	8004482 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800446c:	f7fd fc54 	bl	8001d18 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	f241 3288 	movw	r2, #5000	@ 0x1388
 800447a:	4293      	cmp	r3, r2
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e0d7      	b.n	8004632 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004482:	4b4b      	ldr	r3, [pc, #300]	@ (80045b0 <HAL_RCC_OscConfig+0x4ac>)
 8004484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d0ee      	beq.n	800446c <HAL_RCC_OscConfig+0x368>
 800448e:	e014      	b.n	80044ba <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004490:	f7fd fc42 	bl	8001d18 <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004496:	e00a      	b.n	80044ae <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004498:	f7fd fc3e 	bl	8001d18 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e0c1      	b.n	8004632 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044ae:	4b40      	ldr	r3, [pc, #256]	@ (80045b0 <HAL_RCC_OscConfig+0x4ac>)
 80044b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1ee      	bne.n	8004498 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044ba:	7dfb      	ldrb	r3, [r7, #23]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d105      	bne.n	80044cc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044c0:	4b3b      	ldr	r3, [pc, #236]	@ (80045b0 <HAL_RCC_OscConfig+0x4ac>)
 80044c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c4:	4a3a      	ldr	r2, [pc, #232]	@ (80045b0 <HAL_RCC_OscConfig+0x4ac>)
 80044c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 80ad 	beq.w	8004630 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044d6:	4b36      	ldr	r3, [pc, #216]	@ (80045b0 <HAL_RCC_OscConfig+0x4ac>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f003 030c 	and.w	r3, r3, #12
 80044de:	2b08      	cmp	r3, #8
 80044e0:	d060      	beq.n	80045a4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d145      	bne.n	8004576 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ea:	4b33      	ldr	r3, [pc, #204]	@ (80045b8 <HAL_RCC_OscConfig+0x4b4>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f0:	f7fd fc12 	bl	8001d18 <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044f6:	e008      	b.n	800450a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044f8:	f7fd fc0e 	bl	8001d18 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e093      	b.n	8004632 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800450a:	4b29      	ldr	r3, [pc, #164]	@ (80045b0 <HAL_RCC_OscConfig+0x4ac>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1f0      	bne.n	80044f8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69da      	ldr	r2, [r3, #28]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004524:	019b      	lsls	r3, r3, #6
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800452c:	085b      	lsrs	r3, r3, #1
 800452e:	3b01      	subs	r3, #1
 8004530:	041b      	lsls	r3, r3, #16
 8004532:	431a      	orrs	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004538:	061b      	lsls	r3, r3, #24
 800453a:	431a      	orrs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004540:	071b      	lsls	r3, r3, #28
 8004542:	491b      	ldr	r1, [pc, #108]	@ (80045b0 <HAL_RCC_OscConfig+0x4ac>)
 8004544:	4313      	orrs	r3, r2
 8004546:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004548:	4b1b      	ldr	r3, [pc, #108]	@ (80045b8 <HAL_RCC_OscConfig+0x4b4>)
 800454a:	2201      	movs	r2, #1
 800454c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454e:	f7fd fbe3 	bl	8001d18 <HAL_GetTick>
 8004552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004554:	e008      	b.n	8004568 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004556:	f7fd fbdf 	bl	8001d18 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d901      	bls.n	8004568 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e064      	b.n	8004632 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004568:	4b11      	ldr	r3, [pc, #68]	@ (80045b0 <HAL_RCC_OscConfig+0x4ac>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0f0      	beq.n	8004556 <HAL_RCC_OscConfig+0x452>
 8004574:	e05c      	b.n	8004630 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004576:	4b10      	ldr	r3, [pc, #64]	@ (80045b8 <HAL_RCC_OscConfig+0x4b4>)
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457c:	f7fd fbcc 	bl	8001d18 <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004584:	f7fd fbc8 	bl	8001d18 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e04d      	b.n	8004632 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004596:	4b06      	ldr	r3, [pc, #24]	@ (80045b0 <HAL_RCC_OscConfig+0x4ac>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1f0      	bne.n	8004584 <HAL_RCC_OscConfig+0x480>
 80045a2:	e045      	b.n	8004630 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d107      	bne.n	80045bc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e040      	b.n	8004632 <HAL_RCC_OscConfig+0x52e>
 80045b0:	40023800 	.word	0x40023800
 80045b4:	40007000 	.word	0x40007000
 80045b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045bc:	4b1f      	ldr	r3, [pc, #124]	@ (800463c <HAL_RCC_OscConfig+0x538>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d030      	beq.n	800462c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d129      	bne.n	800462c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d122      	bne.n	800462c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80045ec:	4013      	ands	r3, r2
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80045f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d119      	bne.n	800462c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004602:	085b      	lsrs	r3, r3, #1
 8004604:	3b01      	subs	r3, #1
 8004606:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004608:	429a      	cmp	r2, r3
 800460a:	d10f      	bne.n	800462c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004616:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004618:	429a      	cmp	r2, r3
 800461a:	d107      	bne.n	800462c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004626:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004628:	429a      	cmp	r2, r3
 800462a:	d001      	beq.n	8004630 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e000      	b.n	8004632 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3718      	adds	r7, #24
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	40023800 	.word	0x40023800

08004640 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e042      	b.n	80046d8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d106      	bne.n	800466c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7fd f9f2 	bl	8001a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2224      	movs	r2, #36	@ 0x24
 8004670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68da      	ldr	r2, [r3, #12]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004682:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 f973 	bl	8004970 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	691a      	ldr	r2, [r3, #16]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004698:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	695a      	ldr	r2, [r3, #20]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80046a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68da      	ldr	r2, [r3, #12]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80046b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2220      	movs	r2, #32
 80046c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2220      	movs	r2, #32
 80046cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08a      	sub	sp, #40	@ 0x28
 80046e4:	af02      	add	r7, sp, #8
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	603b      	str	r3, [r7, #0]
 80046ec:	4613      	mov	r3, r2
 80046ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046f0:	2300      	movs	r3, #0
 80046f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b20      	cmp	r3, #32
 80046fe:	d175      	bne.n	80047ec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d002      	beq.n	800470c <HAL_UART_Transmit+0x2c>
 8004706:	88fb      	ldrh	r3, [r7, #6]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e06e      	b.n	80047ee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2221      	movs	r2, #33	@ 0x21
 800471a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800471e:	f7fd fafb 	bl	8001d18 <HAL_GetTick>
 8004722:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	88fa      	ldrh	r2, [r7, #6]
 8004728:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	88fa      	ldrh	r2, [r7, #6]
 800472e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004738:	d108      	bne.n	800474c <HAL_UART_Transmit+0x6c>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d104      	bne.n	800474c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004742:	2300      	movs	r3, #0
 8004744:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	61bb      	str	r3, [r7, #24]
 800474a:	e003      	b.n	8004754 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004750:	2300      	movs	r3, #0
 8004752:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004754:	e02e      	b.n	80047b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	2200      	movs	r2, #0
 800475e:	2180      	movs	r1, #128	@ 0x80
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 f848 	bl	80047f6 <UART_WaitOnFlagUntilTimeout>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d005      	beq.n	8004778 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2220      	movs	r2, #32
 8004770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e03a      	b.n	80047ee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10b      	bne.n	8004796 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	881b      	ldrh	r3, [r3, #0]
 8004782:	461a      	mov	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800478c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	3302      	adds	r3, #2
 8004792:	61bb      	str	r3, [r7, #24]
 8004794:	e007      	b.n	80047a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	781a      	ldrb	r2, [r3, #0]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	3301      	adds	r3, #1
 80047a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	3b01      	subs	r3, #1
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1cb      	bne.n	8004756 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	2200      	movs	r2, #0
 80047c6:	2140      	movs	r1, #64	@ 0x40
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f000 f814 	bl	80047f6 <UART_WaitOnFlagUntilTimeout>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d005      	beq.n	80047e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2220      	movs	r2, #32
 80047d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e006      	b.n	80047ee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2220      	movs	r2, #32
 80047e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80047e8:	2300      	movs	r3, #0
 80047ea:	e000      	b.n	80047ee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80047ec:	2302      	movs	r3, #2
  }
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3720      	adds	r7, #32
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b086      	sub	sp, #24
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	60f8      	str	r0, [r7, #12]
 80047fe:	60b9      	str	r1, [r7, #8]
 8004800:	603b      	str	r3, [r7, #0]
 8004802:	4613      	mov	r3, r2
 8004804:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004806:	e03b      	b.n	8004880 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004808:	6a3b      	ldr	r3, [r7, #32]
 800480a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800480e:	d037      	beq.n	8004880 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004810:	f7fd fa82 	bl	8001d18 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	6a3a      	ldr	r2, [r7, #32]
 800481c:	429a      	cmp	r2, r3
 800481e:	d302      	bcc.n	8004826 <UART_WaitOnFlagUntilTimeout+0x30>
 8004820:	6a3b      	ldr	r3, [r7, #32]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e03a      	b.n	80048a0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b00      	cmp	r3, #0
 8004836:	d023      	beq.n	8004880 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	2b80      	cmp	r3, #128	@ 0x80
 800483c:	d020      	beq.n	8004880 <UART_WaitOnFlagUntilTimeout+0x8a>
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	2b40      	cmp	r3, #64	@ 0x40
 8004842:	d01d      	beq.n	8004880 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0308 	and.w	r3, r3, #8
 800484e:	2b08      	cmp	r3, #8
 8004850:	d116      	bne.n	8004880 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004852:	2300      	movs	r3, #0
 8004854:	617b      	str	r3, [r7, #20]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	617b      	str	r3, [r7, #20]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	617b      	str	r3, [r7, #20]
 8004866:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f000 f81d 	bl	80048a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2208      	movs	r2, #8
 8004872:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e00f      	b.n	80048a0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	4013      	ands	r3, r2
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	429a      	cmp	r2, r3
 800488e:	bf0c      	ite	eq
 8004890:	2301      	moveq	r3, #1
 8004892:	2300      	movne	r3, #0
 8004894:	b2db      	uxtb	r3, r3
 8004896:	461a      	mov	r2, r3
 8004898:	79fb      	ldrb	r3, [r7, #7]
 800489a:	429a      	cmp	r2, r3
 800489c:	d0b4      	beq.n	8004808 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3718      	adds	r7, #24
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b095      	sub	sp, #84	@ 0x54
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	330c      	adds	r3, #12
 80048b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048ba:	e853 3f00 	ldrex	r3, [r3]
 80048be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80048c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	330c      	adds	r3, #12
 80048ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048d0:	643a      	str	r2, [r7, #64]	@ 0x40
 80048d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80048d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048d8:	e841 2300 	strex	r3, r2, [r1]
 80048dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1e5      	bne.n	80048b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	3314      	adds	r3, #20
 80048ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	e853 3f00 	ldrex	r3, [r3]
 80048f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	f023 0301 	bic.w	r3, r3, #1
 80048fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3314      	adds	r3, #20
 8004902:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004904:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004906:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004908:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800490a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800490c:	e841 2300 	strex	r3, r2, [r1]
 8004910:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1e5      	bne.n	80048e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800491c:	2b01      	cmp	r3, #1
 800491e:	d119      	bne.n	8004954 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	330c      	adds	r3, #12
 8004926:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	e853 3f00 	ldrex	r3, [r3]
 800492e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f023 0310 	bic.w	r3, r3, #16
 8004936:	647b      	str	r3, [r7, #68]	@ 0x44
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	330c      	adds	r3, #12
 800493e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004940:	61ba      	str	r2, [r7, #24]
 8004942:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004944:	6979      	ldr	r1, [r7, #20]
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	e841 2300 	strex	r3, r2, [r1]
 800494c:	613b      	str	r3, [r7, #16]
   return(result);
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1e5      	bne.n	8004920 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2220      	movs	r2, #32
 8004958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004962:	bf00      	nop
 8004964:	3754      	adds	r7, #84	@ 0x54
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
	...

08004970 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004974:	b0c0      	sub	sp, #256	@ 0x100
 8004976:	af00      	add	r7, sp, #0
 8004978:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800497c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800498c:	68d9      	ldr	r1, [r3, #12]
 800498e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	ea40 0301 	orr.w	r3, r0, r1
 8004998:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800499a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800499e:	689a      	ldr	r2, [r3, #8]
 80049a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	431a      	orrs	r2, r3
 80049a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	431a      	orrs	r2, r3
 80049b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80049c8:	f021 010c 	bic.w	r1, r1, #12
 80049cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80049d6:	430b      	orrs	r3, r1
 80049d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80049e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ea:	6999      	ldr	r1, [r3, #24]
 80049ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	ea40 0301 	orr.w	r3, r0, r1
 80049f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	4b8f      	ldr	r3, [pc, #572]	@ (8004c3c <UART_SetConfig+0x2cc>)
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d005      	beq.n	8004a10 <UART_SetConfig+0xa0>
 8004a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	4b8d      	ldr	r3, [pc, #564]	@ (8004c40 <UART_SetConfig+0x2d0>)
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d104      	bne.n	8004a1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a10:	f7ff f934 	bl	8003c7c <HAL_RCC_GetPCLK2Freq>
 8004a14:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004a18:	e003      	b.n	8004a22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a1a:	f7ff f91b 	bl	8003c54 <HAL_RCC_GetPCLK1Freq>
 8004a1e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a26:	69db      	ldr	r3, [r3, #28]
 8004a28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a2c:	f040 810c 	bne.w	8004c48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a34:	2200      	movs	r2, #0
 8004a36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a3a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004a3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004a42:	4622      	mov	r2, r4
 8004a44:	462b      	mov	r3, r5
 8004a46:	1891      	adds	r1, r2, r2
 8004a48:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004a4a:	415b      	adcs	r3, r3
 8004a4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004a52:	4621      	mov	r1, r4
 8004a54:	eb12 0801 	adds.w	r8, r2, r1
 8004a58:	4629      	mov	r1, r5
 8004a5a:	eb43 0901 	adc.w	r9, r3, r1
 8004a5e:	f04f 0200 	mov.w	r2, #0
 8004a62:	f04f 0300 	mov.w	r3, #0
 8004a66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a72:	4690      	mov	r8, r2
 8004a74:	4699      	mov	r9, r3
 8004a76:	4623      	mov	r3, r4
 8004a78:	eb18 0303 	adds.w	r3, r8, r3
 8004a7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004a80:	462b      	mov	r3, r5
 8004a82:	eb49 0303 	adc.w	r3, r9, r3
 8004a86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004a96:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004a9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	18db      	adds	r3, r3, r3
 8004aa2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	eb42 0303 	adc.w	r3, r2, r3
 8004aaa:	657b      	str	r3, [r7, #84]	@ 0x54
 8004aac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004ab0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ab4:	f7fc f8aa 	bl	8000c0c <__aeabi_uldivmod>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	460b      	mov	r3, r1
 8004abc:	4b61      	ldr	r3, [pc, #388]	@ (8004c44 <UART_SetConfig+0x2d4>)
 8004abe:	fba3 2302 	umull	r2, r3, r3, r2
 8004ac2:	095b      	lsrs	r3, r3, #5
 8004ac4:	011c      	lsls	r4, r3, #4
 8004ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004aca:	2200      	movs	r2, #0
 8004acc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ad0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004ad4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004ad8:	4642      	mov	r2, r8
 8004ada:	464b      	mov	r3, r9
 8004adc:	1891      	adds	r1, r2, r2
 8004ade:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004ae0:	415b      	adcs	r3, r3
 8004ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ae4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004ae8:	4641      	mov	r1, r8
 8004aea:	eb12 0a01 	adds.w	sl, r2, r1
 8004aee:	4649      	mov	r1, r9
 8004af0:	eb43 0b01 	adc.w	fp, r3, r1
 8004af4:	f04f 0200 	mov.w	r2, #0
 8004af8:	f04f 0300 	mov.w	r3, #0
 8004afc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b08:	4692      	mov	sl, r2
 8004b0a:	469b      	mov	fp, r3
 8004b0c:	4643      	mov	r3, r8
 8004b0e:	eb1a 0303 	adds.w	r3, sl, r3
 8004b12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b16:	464b      	mov	r3, r9
 8004b18:	eb4b 0303 	adc.w	r3, fp, r3
 8004b1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b2c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004b30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004b34:	460b      	mov	r3, r1
 8004b36:	18db      	adds	r3, r3, r3
 8004b38:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	eb42 0303 	adc.w	r3, r2, r3
 8004b40:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004b46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004b4a:	f7fc f85f 	bl	8000c0c <__aeabi_uldivmod>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	460b      	mov	r3, r1
 8004b52:	4611      	mov	r1, r2
 8004b54:	4b3b      	ldr	r3, [pc, #236]	@ (8004c44 <UART_SetConfig+0x2d4>)
 8004b56:	fba3 2301 	umull	r2, r3, r3, r1
 8004b5a:	095b      	lsrs	r3, r3, #5
 8004b5c:	2264      	movs	r2, #100	@ 0x64
 8004b5e:	fb02 f303 	mul.w	r3, r2, r3
 8004b62:	1acb      	subs	r3, r1, r3
 8004b64:	00db      	lsls	r3, r3, #3
 8004b66:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004b6a:	4b36      	ldr	r3, [pc, #216]	@ (8004c44 <UART_SetConfig+0x2d4>)
 8004b6c:	fba3 2302 	umull	r2, r3, r3, r2
 8004b70:	095b      	lsrs	r3, r3, #5
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004b78:	441c      	add	r4, r3
 8004b7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b84:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004b88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004b8c:	4642      	mov	r2, r8
 8004b8e:	464b      	mov	r3, r9
 8004b90:	1891      	adds	r1, r2, r2
 8004b92:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004b94:	415b      	adcs	r3, r3
 8004b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004b9c:	4641      	mov	r1, r8
 8004b9e:	1851      	adds	r1, r2, r1
 8004ba0:	6339      	str	r1, [r7, #48]	@ 0x30
 8004ba2:	4649      	mov	r1, r9
 8004ba4:	414b      	adcs	r3, r1
 8004ba6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	f04f 0300 	mov.w	r3, #0
 8004bb0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004bb4:	4659      	mov	r1, fp
 8004bb6:	00cb      	lsls	r3, r1, #3
 8004bb8:	4651      	mov	r1, sl
 8004bba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bbe:	4651      	mov	r1, sl
 8004bc0:	00ca      	lsls	r2, r1, #3
 8004bc2:	4610      	mov	r0, r2
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	4642      	mov	r2, r8
 8004bca:	189b      	adds	r3, r3, r2
 8004bcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004bd0:	464b      	mov	r3, r9
 8004bd2:	460a      	mov	r2, r1
 8004bd4:	eb42 0303 	adc.w	r3, r2, r3
 8004bd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004be8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004bec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	18db      	adds	r3, r3, r3
 8004bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	eb42 0303 	adc.w	r3, r2, r3
 8004bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004c06:	f7fc f801 	bl	8000c0c <__aeabi_uldivmod>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c44 <UART_SetConfig+0x2d4>)
 8004c10:	fba3 1302 	umull	r1, r3, r3, r2
 8004c14:	095b      	lsrs	r3, r3, #5
 8004c16:	2164      	movs	r1, #100	@ 0x64
 8004c18:	fb01 f303 	mul.w	r3, r1, r3
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	3332      	adds	r3, #50	@ 0x32
 8004c22:	4a08      	ldr	r2, [pc, #32]	@ (8004c44 <UART_SetConfig+0x2d4>)
 8004c24:	fba2 2303 	umull	r2, r3, r2, r3
 8004c28:	095b      	lsrs	r3, r3, #5
 8004c2a:	f003 0207 	and.w	r2, r3, #7
 8004c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4422      	add	r2, r4
 8004c36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c38:	e106      	b.n	8004e48 <UART_SetConfig+0x4d8>
 8004c3a:	bf00      	nop
 8004c3c:	40011000 	.word	0x40011000
 8004c40:	40011400 	.word	0x40011400
 8004c44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004c52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004c56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004c5a:	4642      	mov	r2, r8
 8004c5c:	464b      	mov	r3, r9
 8004c5e:	1891      	adds	r1, r2, r2
 8004c60:	6239      	str	r1, [r7, #32]
 8004c62:	415b      	adcs	r3, r3
 8004c64:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c6a:	4641      	mov	r1, r8
 8004c6c:	1854      	adds	r4, r2, r1
 8004c6e:	4649      	mov	r1, r9
 8004c70:	eb43 0501 	adc.w	r5, r3, r1
 8004c74:	f04f 0200 	mov.w	r2, #0
 8004c78:	f04f 0300 	mov.w	r3, #0
 8004c7c:	00eb      	lsls	r3, r5, #3
 8004c7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c82:	00e2      	lsls	r2, r4, #3
 8004c84:	4614      	mov	r4, r2
 8004c86:	461d      	mov	r5, r3
 8004c88:	4643      	mov	r3, r8
 8004c8a:	18e3      	adds	r3, r4, r3
 8004c8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c90:	464b      	mov	r3, r9
 8004c92:	eb45 0303 	adc.w	r3, r5, r3
 8004c96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ca6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004caa:	f04f 0200 	mov.w	r2, #0
 8004cae:	f04f 0300 	mov.w	r3, #0
 8004cb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004cb6:	4629      	mov	r1, r5
 8004cb8:	008b      	lsls	r3, r1, #2
 8004cba:	4621      	mov	r1, r4
 8004cbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cc0:	4621      	mov	r1, r4
 8004cc2:	008a      	lsls	r2, r1, #2
 8004cc4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004cc8:	f7fb ffa0 	bl	8000c0c <__aeabi_uldivmod>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	460b      	mov	r3, r1
 8004cd0:	4b60      	ldr	r3, [pc, #384]	@ (8004e54 <UART_SetConfig+0x4e4>)
 8004cd2:	fba3 2302 	umull	r2, r3, r3, r2
 8004cd6:	095b      	lsrs	r3, r3, #5
 8004cd8:	011c      	lsls	r4, r3, #4
 8004cda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ce4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ce8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004cec:	4642      	mov	r2, r8
 8004cee:	464b      	mov	r3, r9
 8004cf0:	1891      	adds	r1, r2, r2
 8004cf2:	61b9      	str	r1, [r7, #24]
 8004cf4:	415b      	adcs	r3, r3
 8004cf6:	61fb      	str	r3, [r7, #28]
 8004cf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cfc:	4641      	mov	r1, r8
 8004cfe:	1851      	adds	r1, r2, r1
 8004d00:	6139      	str	r1, [r7, #16]
 8004d02:	4649      	mov	r1, r9
 8004d04:	414b      	adcs	r3, r1
 8004d06:	617b      	str	r3, [r7, #20]
 8004d08:	f04f 0200 	mov.w	r2, #0
 8004d0c:	f04f 0300 	mov.w	r3, #0
 8004d10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d14:	4659      	mov	r1, fp
 8004d16:	00cb      	lsls	r3, r1, #3
 8004d18:	4651      	mov	r1, sl
 8004d1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d1e:	4651      	mov	r1, sl
 8004d20:	00ca      	lsls	r2, r1, #3
 8004d22:	4610      	mov	r0, r2
 8004d24:	4619      	mov	r1, r3
 8004d26:	4603      	mov	r3, r0
 8004d28:	4642      	mov	r2, r8
 8004d2a:	189b      	adds	r3, r3, r2
 8004d2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d30:	464b      	mov	r3, r9
 8004d32:	460a      	mov	r2, r1
 8004d34:	eb42 0303 	adc.w	r3, r2, r3
 8004d38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d46:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004d54:	4649      	mov	r1, r9
 8004d56:	008b      	lsls	r3, r1, #2
 8004d58:	4641      	mov	r1, r8
 8004d5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d5e:	4641      	mov	r1, r8
 8004d60:	008a      	lsls	r2, r1, #2
 8004d62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004d66:	f7fb ff51 	bl	8000c0c <__aeabi_uldivmod>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	4611      	mov	r1, r2
 8004d70:	4b38      	ldr	r3, [pc, #224]	@ (8004e54 <UART_SetConfig+0x4e4>)
 8004d72:	fba3 2301 	umull	r2, r3, r3, r1
 8004d76:	095b      	lsrs	r3, r3, #5
 8004d78:	2264      	movs	r2, #100	@ 0x64
 8004d7a:	fb02 f303 	mul.w	r3, r2, r3
 8004d7e:	1acb      	subs	r3, r1, r3
 8004d80:	011b      	lsls	r3, r3, #4
 8004d82:	3332      	adds	r3, #50	@ 0x32
 8004d84:	4a33      	ldr	r2, [pc, #204]	@ (8004e54 <UART_SetConfig+0x4e4>)
 8004d86:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8a:	095b      	lsrs	r3, r3, #5
 8004d8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d90:	441c      	add	r4, r3
 8004d92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d96:	2200      	movs	r2, #0
 8004d98:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d9a:	677a      	str	r2, [r7, #116]	@ 0x74
 8004d9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004da0:	4642      	mov	r2, r8
 8004da2:	464b      	mov	r3, r9
 8004da4:	1891      	adds	r1, r2, r2
 8004da6:	60b9      	str	r1, [r7, #8]
 8004da8:	415b      	adcs	r3, r3
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004db0:	4641      	mov	r1, r8
 8004db2:	1851      	adds	r1, r2, r1
 8004db4:	6039      	str	r1, [r7, #0]
 8004db6:	4649      	mov	r1, r9
 8004db8:	414b      	adcs	r3, r1
 8004dba:	607b      	str	r3, [r7, #4]
 8004dbc:	f04f 0200 	mov.w	r2, #0
 8004dc0:	f04f 0300 	mov.w	r3, #0
 8004dc4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004dc8:	4659      	mov	r1, fp
 8004dca:	00cb      	lsls	r3, r1, #3
 8004dcc:	4651      	mov	r1, sl
 8004dce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dd2:	4651      	mov	r1, sl
 8004dd4:	00ca      	lsls	r2, r1, #3
 8004dd6:	4610      	mov	r0, r2
 8004dd8:	4619      	mov	r1, r3
 8004dda:	4603      	mov	r3, r0
 8004ddc:	4642      	mov	r2, r8
 8004dde:	189b      	adds	r3, r3, r2
 8004de0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004de2:	464b      	mov	r3, r9
 8004de4:	460a      	mov	r2, r1
 8004de6:	eb42 0303 	adc.w	r3, r2, r3
 8004dea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	663b      	str	r3, [r7, #96]	@ 0x60
 8004df6:	667a      	str	r2, [r7, #100]	@ 0x64
 8004df8:	f04f 0200 	mov.w	r2, #0
 8004dfc:	f04f 0300 	mov.w	r3, #0
 8004e00:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004e04:	4649      	mov	r1, r9
 8004e06:	008b      	lsls	r3, r1, #2
 8004e08:	4641      	mov	r1, r8
 8004e0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e0e:	4641      	mov	r1, r8
 8004e10:	008a      	lsls	r2, r1, #2
 8004e12:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004e16:	f7fb fef9 	bl	8000c0c <__aeabi_uldivmod>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e54 <UART_SetConfig+0x4e4>)
 8004e20:	fba3 1302 	umull	r1, r3, r3, r2
 8004e24:	095b      	lsrs	r3, r3, #5
 8004e26:	2164      	movs	r1, #100	@ 0x64
 8004e28:	fb01 f303 	mul.w	r3, r1, r3
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	011b      	lsls	r3, r3, #4
 8004e30:	3332      	adds	r3, #50	@ 0x32
 8004e32:	4a08      	ldr	r2, [pc, #32]	@ (8004e54 <UART_SetConfig+0x4e4>)
 8004e34:	fba2 2303 	umull	r2, r3, r2, r3
 8004e38:	095b      	lsrs	r3, r3, #5
 8004e3a:	f003 020f 	and.w	r2, r3, #15
 8004e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4422      	add	r2, r4
 8004e46:	609a      	str	r2, [r3, #8]
}
 8004e48:	bf00      	nop
 8004e4a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e54:	51eb851f 	.word	0x51eb851f

08004e58 <siprintf>:
 8004e58:	b40e      	push	{r1, r2, r3}
 8004e5a:	b500      	push	{lr}
 8004e5c:	b09c      	sub	sp, #112	@ 0x70
 8004e5e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004e60:	9002      	str	r0, [sp, #8]
 8004e62:	9006      	str	r0, [sp, #24]
 8004e64:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004e68:	4809      	ldr	r0, [pc, #36]	@ (8004e90 <siprintf+0x38>)
 8004e6a:	9107      	str	r1, [sp, #28]
 8004e6c:	9104      	str	r1, [sp, #16]
 8004e6e:	4909      	ldr	r1, [pc, #36]	@ (8004e94 <siprintf+0x3c>)
 8004e70:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e74:	9105      	str	r1, [sp, #20]
 8004e76:	6800      	ldr	r0, [r0, #0]
 8004e78:	9301      	str	r3, [sp, #4]
 8004e7a:	a902      	add	r1, sp, #8
 8004e7c:	f000 f89c 	bl	8004fb8 <_svfiprintf_r>
 8004e80:	9b02      	ldr	r3, [sp, #8]
 8004e82:	2200      	movs	r2, #0
 8004e84:	701a      	strb	r2, [r3, #0]
 8004e86:	b01c      	add	sp, #112	@ 0x70
 8004e88:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e8c:	b003      	add	sp, #12
 8004e8e:	4770      	bx	lr
 8004e90:	20000010 	.word	0x20000010
 8004e94:	ffff0208 	.word	0xffff0208

08004e98 <memset>:
 8004e98:	4402      	add	r2, r0
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d100      	bne.n	8004ea2 <memset+0xa>
 8004ea0:	4770      	bx	lr
 8004ea2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ea6:	e7f9      	b.n	8004e9c <memset+0x4>

08004ea8 <__errno>:
 8004ea8:	4b01      	ldr	r3, [pc, #4]	@ (8004eb0 <__errno+0x8>)
 8004eaa:	6818      	ldr	r0, [r3, #0]
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	20000010 	.word	0x20000010

08004eb4 <__libc_init_array>:
 8004eb4:	b570      	push	{r4, r5, r6, lr}
 8004eb6:	4d0d      	ldr	r5, [pc, #52]	@ (8004eec <__libc_init_array+0x38>)
 8004eb8:	4c0d      	ldr	r4, [pc, #52]	@ (8004ef0 <__libc_init_array+0x3c>)
 8004eba:	1b64      	subs	r4, r4, r5
 8004ebc:	10a4      	asrs	r4, r4, #2
 8004ebe:	2600      	movs	r6, #0
 8004ec0:	42a6      	cmp	r6, r4
 8004ec2:	d109      	bne.n	8004ed8 <__libc_init_array+0x24>
 8004ec4:	4d0b      	ldr	r5, [pc, #44]	@ (8004ef4 <__libc_init_array+0x40>)
 8004ec6:	4c0c      	ldr	r4, [pc, #48]	@ (8004ef8 <__libc_init_array+0x44>)
 8004ec8:	f000 fc66 	bl	8005798 <_init>
 8004ecc:	1b64      	subs	r4, r4, r5
 8004ece:	10a4      	asrs	r4, r4, #2
 8004ed0:	2600      	movs	r6, #0
 8004ed2:	42a6      	cmp	r6, r4
 8004ed4:	d105      	bne.n	8004ee2 <__libc_init_array+0x2e>
 8004ed6:	bd70      	pop	{r4, r5, r6, pc}
 8004ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004edc:	4798      	blx	r3
 8004ede:	3601      	adds	r6, #1
 8004ee0:	e7ee      	b.n	8004ec0 <__libc_init_array+0xc>
 8004ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ee6:	4798      	blx	r3
 8004ee8:	3601      	adds	r6, #1
 8004eea:	e7f2      	b.n	8004ed2 <__libc_init_array+0x1e>
 8004eec:	0800584c 	.word	0x0800584c
 8004ef0:	0800584c 	.word	0x0800584c
 8004ef4:	0800584c 	.word	0x0800584c
 8004ef8:	08005850 	.word	0x08005850

08004efc <__retarget_lock_acquire_recursive>:
 8004efc:	4770      	bx	lr

08004efe <__retarget_lock_release_recursive>:
 8004efe:	4770      	bx	lr

08004f00 <__ssputs_r>:
 8004f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f04:	688e      	ldr	r6, [r1, #8]
 8004f06:	461f      	mov	r7, r3
 8004f08:	42be      	cmp	r6, r7
 8004f0a:	680b      	ldr	r3, [r1, #0]
 8004f0c:	4682      	mov	sl, r0
 8004f0e:	460c      	mov	r4, r1
 8004f10:	4690      	mov	r8, r2
 8004f12:	d82d      	bhi.n	8004f70 <__ssputs_r+0x70>
 8004f14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004f18:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004f1c:	d026      	beq.n	8004f6c <__ssputs_r+0x6c>
 8004f1e:	6965      	ldr	r5, [r4, #20]
 8004f20:	6909      	ldr	r1, [r1, #16]
 8004f22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f26:	eba3 0901 	sub.w	r9, r3, r1
 8004f2a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f2e:	1c7b      	adds	r3, r7, #1
 8004f30:	444b      	add	r3, r9
 8004f32:	106d      	asrs	r5, r5, #1
 8004f34:	429d      	cmp	r5, r3
 8004f36:	bf38      	it	cc
 8004f38:	461d      	movcc	r5, r3
 8004f3a:	0553      	lsls	r3, r2, #21
 8004f3c:	d527      	bpl.n	8004f8e <__ssputs_r+0x8e>
 8004f3e:	4629      	mov	r1, r5
 8004f40:	f000 f958 	bl	80051f4 <_malloc_r>
 8004f44:	4606      	mov	r6, r0
 8004f46:	b360      	cbz	r0, 8004fa2 <__ssputs_r+0xa2>
 8004f48:	6921      	ldr	r1, [r4, #16]
 8004f4a:	464a      	mov	r2, r9
 8004f4c:	f000 fbc4 	bl	80056d8 <memcpy>
 8004f50:	89a3      	ldrh	r3, [r4, #12]
 8004f52:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004f56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f5a:	81a3      	strh	r3, [r4, #12]
 8004f5c:	6126      	str	r6, [r4, #16]
 8004f5e:	6165      	str	r5, [r4, #20]
 8004f60:	444e      	add	r6, r9
 8004f62:	eba5 0509 	sub.w	r5, r5, r9
 8004f66:	6026      	str	r6, [r4, #0]
 8004f68:	60a5      	str	r5, [r4, #8]
 8004f6a:	463e      	mov	r6, r7
 8004f6c:	42be      	cmp	r6, r7
 8004f6e:	d900      	bls.n	8004f72 <__ssputs_r+0x72>
 8004f70:	463e      	mov	r6, r7
 8004f72:	6820      	ldr	r0, [r4, #0]
 8004f74:	4632      	mov	r2, r6
 8004f76:	4641      	mov	r1, r8
 8004f78:	f000 fb84 	bl	8005684 <memmove>
 8004f7c:	68a3      	ldr	r3, [r4, #8]
 8004f7e:	1b9b      	subs	r3, r3, r6
 8004f80:	60a3      	str	r3, [r4, #8]
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	4433      	add	r3, r6
 8004f86:	6023      	str	r3, [r4, #0]
 8004f88:	2000      	movs	r0, #0
 8004f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f8e:	462a      	mov	r2, r5
 8004f90:	f000 fb4a 	bl	8005628 <_realloc_r>
 8004f94:	4606      	mov	r6, r0
 8004f96:	2800      	cmp	r0, #0
 8004f98:	d1e0      	bne.n	8004f5c <__ssputs_r+0x5c>
 8004f9a:	6921      	ldr	r1, [r4, #16]
 8004f9c:	4650      	mov	r0, sl
 8004f9e:	f000 fba9 	bl	80056f4 <_free_r>
 8004fa2:	230c      	movs	r3, #12
 8004fa4:	f8ca 3000 	str.w	r3, [sl]
 8004fa8:	89a3      	ldrh	r3, [r4, #12]
 8004faa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fae:	81a3      	strh	r3, [r4, #12]
 8004fb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004fb4:	e7e9      	b.n	8004f8a <__ssputs_r+0x8a>
	...

08004fb8 <_svfiprintf_r>:
 8004fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fbc:	4698      	mov	r8, r3
 8004fbe:	898b      	ldrh	r3, [r1, #12]
 8004fc0:	061b      	lsls	r3, r3, #24
 8004fc2:	b09d      	sub	sp, #116	@ 0x74
 8004fc4:	4607      	mov	r7, r0
 8004fc6:	460d      	mov	r5, r1
 8004fc8:	4614      	mov	r4, r2
 8004fca:	d510      	bpl.n	8004fee <_svfiprintf_r+0x36>
 8004fcc:	690b      	ldr	r3, [r1, #16]
 8004fce:	b973      	cbnz	r3, 8004fee <_svfiprintf_r+0x36>
 8004fd0:	2140      	movs	r1, #64	@ 0x40
 8004fd2:	f000 f90f 	bl	80051f4 <_malloc_r>
 8004fd6:	6028      	str	r0, [r5, #0]
 8004fd8:	6128      	str	r0, [r5, #16]
 8004fda:	b930      	cbnz	r0, 8004fea <_svfiprintf_r+0x32>
 8004fdc:	230c      	movs	r3, #12
 8004fde:	603b      	str	r3, [r7, #0]
 8004fe0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004fe4:	b01d      	add	sp, #116	@ 0x74
 8004fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fea:	2340      	movs	r3, #64	@ 0x40
 8004fec:	616b      	str	r3, [r5, #20]
 8004fee:	2300      	movs	r3, #0
 8004ff0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ff2:	2320      	movs	r3, #32
 8004ff4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004ff8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ffc:	2330      	movs	r3, #48	@ 0x30
 8004ffe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800519c <_svfiprintf_r+0x1e4>
 8005002:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005006:	f04f 0901 	mov.w	r9, #1
 800500a:	4623      	mov	r3, r4
 800500c:	469a      	mov	sl, r3
 800500e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005012:	b10a      	cbz	r2, 8005018 <_svfiprintf_r+0x60>
 8005014:	2a25      	cmp	r2, #37	@ 0x25
 8005016:	d1f9      	bne.n	800500c <_svfiprintf_r+0x54>
 8005018:	ebba 0b04 	subs.w	fp, sl, r4
 800501c:	d00b      	beq.n	8005036 <_svfiprintf_r+0x7e>
 800501e:	465b      	mov	r3, fp
 8005020:	4622      	mov	r2, r4
 8005022:	4629      	mov	r1, r5
 8005024:	4638      	mov	r0, r7
 8005026:	f7ff ff6b 	bl	8004f00 <__ssputs_r>
 800502a:	3001      	adds	r0, #1
 800502c:	f000 80a7 	beq.w	800517e <_svfiprintf_r+0x1c6>
 8005030:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005032:	445a      	add	r2, fp
 8005034:	9209      	str	r2, [sp, #36]	@ 0x24
 8005036:	f89a 3000 	ldrb.w	r3, [sl]
 800503a:	2b00      	cmp	r3, #0
 800503c:	f000 809f 	beq.w	800517e <_svfiprintf_r+0x1c6>
 8005040:	2300      	movs	r3, #0
 8005042:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005046:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800504a:	f10a 0a01 	add.w	sl, sl, #1
 800504e:	9304      	str	r3, [sp, #16]
 8005050:	9307      	str	r3, [sp, #28]
 8005052:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005056:	931a      	str	r3, [sp, #104]	@ 0x68
 8005058:	4654      	mov	r4, sl
 800505a:	2205      	movs	r2, #5
 800505c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005060:	484e      	ldr	r0, [pc, #312]	@ (800519c <_svfiprintf_r+0x1e4>)
 8005062:	f7fb f8dd 	bl	8000220 <memchr>
 8005066:	9a04      	ldr	r2, [sp, #16]
 8005068:	b9d8      	cbnz	r0, 80050a2 <_svfiprintf_r+0xea>
 800506a:	06d0      	lsls	r0, r2, #27
 800506c:	bf44      	itt	mi
 800506e:	2320      	movmi	r3, #32
 8005070:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005074:	0711      	lsls	r1, r2, #28
 8005076:	bf44      	itt	mi
 8005078:	232b      	movmi	r3, #43	@ 0x2b
 800507a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800507e:	f89a 3000 	ldrb.w	r3, [sl]
 8005082:	2b2a      	cmp	r3, #42	@ 0x2a
 8005084:	d015      	beq.n	80050b2 <_svfiprintf_r+0xfa>
 8005086:	9a07      	ldr	r2, [sp, #28]
 8005088:	4654      	mov	r4, sl
 800508a:	2000      	movs	r0, #0
 800508c:	f04f 0c0a 	mov.w	ip, #10
 8005090:	4621      	mov	r1, r4
 8005092:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005096:	3b30      	subs	r3, #48	@ 0x30
 8005098:	2b09      	cmp	r3, #9
 800509a:	d94b      	bls.n	8005134 <_svfiprintf_r+0x17c>
 800509c:	b1b0      	cbz	r0, 80050cc <_svfiprintf_r+0x114>
 800509e:	9207      	str	r2, [sp, #28]
 80050a0:	e014      	b.n	80050cc <_svfiprintf_r+0x114>
 80050a2:	eba0 0308 	sub.w	r3, r0, r8
 80050a6:	fa09 f303 	lsl.w	r3, r9, r3
 80050aa:	4313      	orrs	r3, r2
 80050ac:	9304      	str	r3, [sp, #16]
 80050ae:	46a2      	mov	sl, r4
 80050b0:	e7d2      	b.n	8005058 <_svfiprintf_r+0xa0>
 80050b2:	9b03      	ldr	r3, [sp, #12]
 80050b4:	1d19      	adds	r1, r3, #4
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	9103      	str	r1, [sp, #12]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	bfbb      	ittet	lt
 80050be:	425b      	neglt	r3, r3
 80050c0:	f042 0202 	orrlt.w	r2, r2, #2
 80050c4:	9307      	strge	r3, [sp, #28]
 80050c6:	9307      	strlt	r3, [sp, #28]
 80050c8:	bfb8      	it	lt
 80050ca:	9204      	strlt	r2, [sp, #16]
 80050cc:	7823      	ldrb	r3, [r4, #0]
 80050ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80050d0:	d10a      	bne.n	80050e8 <_svfiprintf_r+0x130>
 80050d2:	7863      	ldrb	r3, [r4, #1]
 80050d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80050d6:	d132      	bne.n	800513e <_svfiprintf_r+0x186>
 80050d8:	9b03      	ldr	r3, [sp, #12]
 80050da:	1d1a      	adds	r2, r3, #4
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	9203      	str	r2, [sp, #12]
 80050e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80050e4:	3402      	adds	r4, #2
 80050e6:	9305      	str	r3, [sp, #20]
 80050e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80051ac <_svfiprintf_r+0x1f4>
 80050ec:	7821      	ldrb	r1, [r4, #0]
 80050ee:	2203      	movs	r2, #3
 80050f0:	4650      	mov	r0, sl
 80050f2:	f7fb f895 	bl	8000220 <memchr>
 80050f6:	b138      	cbz	r0, 8005108 <_svfiprintf_r+0x150>
 80050f8:	9b04      	ldr	r3, [sp, #16]
 80050fa:	eba0 000a 	sub.w	r0, r0, sl
 80050fe:	2240      	movs	r2, #64	@ 0x40
 8005100:	4082      	lsls	r2, r0
 8005102:	4313      	orrs	r3, r2
 8005104:	3401      	adds	r4, #1
 8005106:	9304      	str	r3, [sp, #16]
 8005108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800510c:	4824      	ldr	r0, [pc, #144]	@ (80051a0 <_svfiprintf_r+0x1e8>)
 800510e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005112:	2206      	movs	r2, #6
 8005114:	f7fb f884 	bl	8000220 <memchr>
 8005118:	2800      	cmp	r0, #0
 800511a:	d036      	beq.n	800518a <_svfiprintf_r+0x1d2>
 800511c:	4b21      	ldr	r3, [pc, #132]	@ (80051a4 <_svfiprintf_r+0x1ec>)
 800511e:	bb1b      	cbnz	r3, 8005168 <_svfiprintf_r+0x1b0>
 8005120:	9b03      	ldr	r3, [sp, #12]
 8005122:	3307      	adds	r3, #7
 8005124:	f023 0307 	bic.w	r3, r3, #7
 8005128:	3308      	adds	r3, #8
 800512a:	9303      	str	r3, [sp, #12]
 800512c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800512e:	4433      	add	r3, r6
 8005130:	9309      	str	r3, [sp, #36]	@ 0x24
 8005132:	e76a      	b.n	800500a <_svfiprintf_r+0x52>
 8005134:	fb0c 3202 	mla	r2, ip, r2, r3
 8005138:	460c      	mov	r4, r1
 800513a:	2001      	movs	r0, #1
 800513c:	e7a8      	b.n	8005090 <_svfiprintf_r+0xd8>
 800513e:	2300      	movs	r3, #0
 8005140:	3401      	adds	r4, #1
 8005142:	9305      	str	r3, [sp, #20]
 8005144:	4619      	mov	r1, r3
 8005146:	f04f 0c0a 	mov.w	ip, #10
 800514a:	4620      	mov	r0, r4
 800514c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005150:	3a30      	subs	r2, #48	@ 0x30
 8005152:	2a09      	cmp	r2, #9
 8005154:	d903      	bls.n	800515e <_svfiprintf_r+0x1a6>
 8005156:	2b00      	cmp	r3, #0
 8005158:	d0c6      	beq.n	80050e8 <_svfiprintf_r+0x130>
 800515a:	9105      	str	r1, [sp, #20]
 800515c:	e7c4      	b.n	80050e8 <_svfiprintf_r+0x130>
 800515e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005162:	4604      	mov	r4, r0
 8005164:	2301      	movs	r3, #1
 8005166:	e7f0      	b.n	800514a <_svfiprintf_r+0x192>
 8005168:	ab03      	add	r3, sp, #12
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	462a      	mov	r2, r5
 800516e:	4b0e      	ldr	r3, [pc, #56]	@ (80051a8 <_svfiprintf_r+0x1f0>)
 8005170:	a904      	add	r1, sp, #16
 8005172:	4638      	mov	r0, r7
 8005174:	f3af 8000 	nop.w
 8005178:	1c42      	adds	r2, r0, #1
 800517a:	4606      	mov	r6, r0
 800517c:	d1d6      	bne.n	800512c <_svfiprintf_r+0x174>
 800517e:	89ab      	ldrh	r3, [r5, #12]
 8005180:	065b      	lsls	r3, r3, #25
 8005182:	f53f af2d 	bmi.w	8004fe0 <_svfiprintf_r+0x28>
 8005186:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005188:	e72c      	b.n	8004fe4 <_svfiprintf_r+0x2c>
 800518a:	ab03      	add	r3, sp, #12
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	462a      	mov	r2, r5
 8005190:	4b05      	ldr	r3, [pc, #20]	@ (80051a8 <_svfiprintf_r+0x1f0>)
 8005192:	a904      	add	r1, sp, #16
 8005194:	4638      	mov	r0, r7
 8005196:	f000 f91b 	bl	80053d0 <_printf_i>
 800519a:	e7ed      	b.n	8005178 <_svfiprintf_r+0x1c0>
 800519c:	08005810 	.word	0x08005810
 80051a0:	0800581a 	.word	0x0800581a
 80051a4:	00000000 	.word	0x00000000
 80051a8:	08004f01 	.word	0x08004f01
 80051ac:	08005816 	.word	0x08005816

080051b0 <sbrk_aligned>:
 80051b0:	b570      	push	{r4, r5, r6, lr}
 80051b2:	4e0f      	ldr	r6, [pc, #60]	@ (80051f0 <sbrk_aligned+0x40>)
 80051b4:	460c      	mov	r4, r1
 80051b6:	6831      	ldr	r1, [r6, #0]
 80051b8:	4605      	mov	r5, r0
 80051ba:	b911      	cbnz	r1, 80051c2 <sbrk_aligned+0x12>
 80051bc:	f000 fa7c 	bl	80056b8 <_sbrk_r>
 80051c0:	6030      	str	r0, [r6, #0]
 80051c2:	4621      	mov	r1, r4
 80051c4:	4628      	mov	r0, r5
 80051c6:	f000 fa77 	bl	80056b8 <_sbrk_r>
 80051ca:	1c43      	adds	r3, r0, #1
 80051cc:	d103      	bne.n	80051d6 <sbrk_aligned+0x26>
 80051ce:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80051d2:	4620      	mov	r0, r4
 80051d4:	bd70      	pop	{r4, r5, r6, pc}
 80051d6:	1cc4      	adds	r4, r0, #3
 80051d8:	f024 0403 	bic.w	r4, r4, #3
 80051dc:	42a0      	cmp	r0, r4
 80051de:	d0f8      	beq.n	80051d2 <sbrk_aligned+0x22>
 80051e0:	1a21      	subs	r1, r4, r0
 80051e2:	4628      	mov	r0, r5
 80051e4:	f000 fa68 	bl	80056b8 <_sbrk_r>
 80051e8:	3001      	adds	r0, #1
 80051ea:	d1f2      	bne.n	80051d2 <sbrk_aligned+0x22>
 80051ec:	e7ef      	b.n	80051ce <sbrk_aligned+0x1e>
 80051ee:	bf00      	nop
 80051f0:	20000324 	.word	0x20000324

080051f4 <_malloc_r>:
 80051f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051f8:	1ccd      	adds	r5, r1, #3
 80051fa:	f025 0503 	bic.w	r5, r5, #3
 80051fe:	3508      	adds	r5, #8
 8005200:	2d0c      	cmp	r5, #12
 8005202:	bf38      	it	cc
 8005204:	250c      	movcc	r5, #12
 8005206:	2d00      	cmp	r5, #0
 8005208:	4606      	mov	r6, r0
 800520a:	db01      	blt.n	8005210 <_malloc_r+0x1c>
 800520c:	42a9      	cmp	r1, r5
 800520e:	d904      	bls.n	800521a <_malloc_r+0x26>
 8005210:	230c      	movs	r3, #12
 8005212:	6033      	str	r3, [r6, #0]
 8005214:	2000      	movs	r0, #0
 8005216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800521a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80052f0 <_malloc_r+0xfc>
 800521e:	f000 f9f7 	bl	8005610 <__malloc_lock>
 8005222:	f8d8 3000 	ldr.w	r3, [r8]
 8005226:	461c      	mov	r4, r3
 8005228:	bb44      	cbnz	r4, 800527c <_malloc_r+0x88>
 800522a:	4629      	mov	r1, r5
 800522c:	4630      	mov	r0, r6
 800522e:	f7ff ffbf 	bl	80051b0 <sbrk_aligned>
 8005232:	1c43      	adds	r3, r0, #1
 8005234:	4604      	mov	r4, r0
 8005236:	d158      	bne.n	80052ea <_malloc_r+0xf6>
 8005238:	f8d8 4000 	ldr.w	r4, [r8]
 800523c:	4627      	mov	r7, r4
 800523e:	2f00      	cmp	r7, #0
 8005240:	d143      	bne.n	80052ca <_malloc_r+0xd6>
 8005242:	2c00      	cmp	r4, #0
 8005244:	d04b      	beq.n	80052de <_malloc_r+0xea>
 8005246:	6823      	ldr	r3, [r4, #0]
 8005248:	4639      	mov	r1, r7
 800524a:	4630      	mov	r0, r6
 800524c:	eb04 0903 	add.w	r9, r4, r3
 8005250:	f000 fa32 	bl	80056b8 <_sbrk_r>
 8005254:	4581      	cmp	r9, r0
 8005256:	d142      	bne.n	80052de <_malloc_r+0xea>
 8005258:	6821      	ldr	r1, [r4, #0]
 800525a:	1a6d      	subs	r5, r5, r1
 800525c:	4629      	mov	r1, r5
 800525e:	4630      	mov	r0, r6
 8005260:	f7ff ffa6 	bl	80051b0 <sbrk_aligned>
 8005264:	3001      	adds	r0, #1
 8005266:	d03a      	beq.n	80052de <_malloc_r+0xea>
 8005268:	6823      	ldr	r3, [r4, #0]
 800526a:	442b      	add	r3, r5
 800526c:	6023      	str	r3, [r4, #0]
 800526e:	f8d8 3000 	ldr.w	r3, [r8]
 8005272:	685a      	ldr	r2, [r3, #4]
 8005274:	bb62      	cbnz	r2, 80052d0 <_malloc_r+0xdc>
 8005276:	f8c8 7000 	str.w	r7, [r8]
 800527a:	e00f      	b.n	800529c <_malloc_r+0xa8>
 800527c:	6822      	ldr	r2, [r4, #0]
 800527e:	1b52      	subs	r2, r2, r5
 8005280:	d420      	bmi.n	80052c4 <_malloc_r+0xd0>
 8005282:	2a0b      	cmp	r2, #11
 8005284:	d917      	bls.n	80052b6 <_malloc_r+0xc2>
 8005286:	1961      	adds	r1, r4, r5
 8005288:	42a3      	cmp	r3, r4
 800528a:	6025      	str	r5, [r4, #0]
 800528c:	bf18      	it	ne
 800528e:	6059      	strne	r1, [r3, #4]
 8005290:	6863      	ldr	r3, [r4, #4]
 8005292:	bf08      	it	eq
 8005294:	f8c8 1000 	streq.w	r1, [r8]
 8005298:	5162      	str	r2, [r4, r5]
 800529a:	604b      	str	r3, [r1, #4]
 800529c:	4630      	mov	r0, r6
 800529e:	f000 f9bd 	bl	800561c <__malloc_unlock>
 80052a2:	f104 000b 	add.w	r0, r4, #11
 80052a6:	1d23      	adds	r3, r4, #4
 80052a8:	f020 0007 	bic.w	r0, r0, #7
 80052ac:	1ac2      	subs	r2, r0, r3
 80052ae:	bf1c      	itt	ne
 80052b0:	1a1b      	subne	r3, r3, r0
 80052b2:	50a3      	strne	r3, [r4, r2]
 80052b4:	e7af      	b.n	8005216 <_malloc_r+0x22>
 80052b6:	6862      	ldr	r2, [r4, #4]
 80052b8:	42a3      	cmp	r3, r4
 80052ba:	bf0c      	ite	eq
 80052bc:	f8c8 2000 	streq.w	r2, [r8]
 80052c0:	605a      	strne	r2, [r3, #4]
 80052c2:	e7eb      	b.n	800529c <_malloc_r+0xa8>
 80052c4:	4623      	mov	r3, r4
 80052c6:	6864      	ldr	r4, [r4, #4]
 80052c8:	e7ae      	b.n	8005228 <_malloc_r+0x34>
 80052ca:	463c      	mov	r4, r7
 80052cc:	687f      	ldr	r7, [r7, #4]
 80052ce:	e7b6      	b.n	800523e <_malloc_r+0x4a>
 80052d0:	461a      	mov	r2, r3
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	42a3      	cmp	r3, r4
 80052d6:	d1fb      	bne.n	80052d0 <_malloc_r+0xdc>
 80052d8:	2300      	movs	r3, #0
 80052da:	6053      	str	r3, [r2, #4]
 80052dc:	e7de      	b.n	800529c <_malloc_r+0xa8>
 80052de:	230c      	movs	r3, #12
 80052e0:	6033      	str	r3, [r6, #0]
 80052e2:	4630      	mov	r0, r6
 80052e4:	f000 f99a 	bl	800561c <__malloc_unlock>
 80052e8:	e794      	b.n	8005214 <_malloc_r+0x20>
 80052ea:	6005      	str	r5, [r0, #0]
 80052ec:	e7d6      	b.n	800529c <_malloc_r+0xa8>
 80052ee:	bf00      	nop
 80052f0:	20000328 	.word	0x20000328

080052f4 <_printf_common>:
 80052f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052f8:	4616      	mov	r6, r2
 80052fa:	4698      	mov	r8, r3
 80052fc:	688a      	ldr	r2, [r1, #8]
 80052fe:	690b      	ldr	r3, [r1, #16]
 8005300:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005304:	4293      	cmp	r3, r2
 8005306:	bfb8      	it	lt
 8005308:	4613      	movlt	r3, r2
 800530a:	6033      	str	r3, [r6, #0]
 800530c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005310:	4607      	mov	r7, r0
 8005312:	460c      	mov	r4, r1
 8005314:	b10a      	cbz	r2, 800531a <_printf_common+0x26>
 8005316:	3301      	adds	r3, #1
 8005318:	6033      	str	r3, [r6, #0]
 800531a:	6823      	ldr	r3, [r4, #0]
 800531c:	0699      	lsls	r1, r3, #26
 800531e:	bf42      	ittt	mi
 8005320:	6833      	ldrmi	r3, [r6, #0]
 8005322:	3302      	addmi	r3, #2
 8005324:	6033      	strmi	r3, [r6, #0]
 8005326:	6825      	ldr	r5, [r4, #0]
 8005328:	f015 0506 	ands.w	r5, r5, #6
 800532c:	d106      	bne.n	800533c <_printf_common+0x48>
 800532e:	f104 0a19 	add.w	sl, r4, #25
 8005332:	68e3      	ldr	r3, [r4, #12]
 8005334:	6832      	ldr	r2, [r6, #0]
 8005336:	1a9b      	subs	r3, r3, r2
 8005338:	42ab      	cmp	r3, r5
 800533a:	dc26      	bgt.n	800538a <_printf_common+0x96>
 800533c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005340:	6822      	ldr	r2, [r4, #0]
 8005342:	3b00      	subs	r3, #0
 8005344:	bf18      	it	ne
 8005346:	2301      	movne	r3, #1
 8005348:	0692      	lsls	r2, r2, #26
 800534a:	d42b      	bmi.n	80053a4 <_printf_common+0xb0>
 800534c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005350:	4641      	mov	r1, r8
 8005352:	4638      	mov	r0, r7
 8005354:	47c8      	blx	r9
 8005356:	3001      	adds	r0, #1
 8005358:	d01e      	beq.n	8005398 <_printf_common+0xa4>
 800535a:	6823      	ldr	r3, [r4, #0]
 800535c:	6922      	ldr	r2, [r4, #16]
 800535e:	f003 0306 	and.w	r3, r3, #6
 8005362:	2b04      	cmp	r3, #4
 8005364:	bf02      	ittt	eq
 8005366:	68e5      	ldreq	r5, [r4, #12]
 8005368:	6833      	ldreq	r3, [r6, #0]
 800536a:	1aed      	subeq	r5, r5, r3
 800536c:	68a3      	ldr	r3, [r4, #8]
 800536e:	bf0c      	ite	eq
 8005370:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005374:	2500      	movne	r5, #0
 8005376:	4293      	cmp	r3, r2
 8005378:	bfc4      	itt	gt
 800537a:	1a9b      	subgt	r3, r3, r2
 800537c:	18ed      	addgt	r5, r5, r3
 800537e:	2600      	movs	r6, #0
 8005380:	341a      	adds	r4, #26
 8005382:	42b5      	cmp	r5, r6
 8005384:	d11a      	bne.n	80053bc <_printf_common+0xc8>
 8005386:	2000      	movs	r0, #0
 8005388:	e008      	b.n	800539c <_printf_common+0xa8>
 800538a:	2301      	movs	r3, #1
 800538c:	4652      	mov	r2, sl
 800538e:	4641      	mov	r1, r8
 8005390:	4638      	mov	r0, r7
 8005392:	47c8      	blx	r9
 8005394:	3001      	adds	r0, #1
 8005396:	d103      	bne.n	80053a0 <_printf_common+0xac>
 8005398:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800539c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053a0:	3501      	adds	r5, #1
 80053a2:	e7c6      	b.n	8005332 <_printf_common+0x3e>
 80053a4:	18e1      	adds	r1, r4, r3
 80053a6:	1c5a      	adds	r2, r3, #1
 80053a8:	2030      	movs	r0, #48	@ 0x30
 80053aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80053ae:	4422      	add	r2, r4
 80053b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80053b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80053b8:	3302      	adds	r3, #2
 80053ba:	e7c7      	b.n	800534c <_printf_common+0x58>
 80053bc:	2301      	movs	r3, #1
 80053be:	4622      	mov	r2, r4
 80053c0:	4641      	mov	r1, r8
 80053c2:	4638      	mov	r0, r7
 80053c4:	47c8      	blx	r9
 80053c6:	3001      	adds	r0, #1
 80053c8:	d0e6      	beq.n	8005398 <_printf_common+0xa4>
 80053ca:	3601      	adds	r6, #1
 80053cc:	e7d9      	b.n	8005382 <_printf_common+0x8e>
	...

080053d0 <_printf_i>:
 80053d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053d4:	7e0f      	ldrb	r7, [r1, #24]
 80053d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80053d8:	2f78      	cmp	r7, #120	@ 0x78
 80053da:	4691      	mov	r9, r2
 80053dc:	4680      	mov	r8, r0
 80053de:	460c      	mov	r4, r1
 80053e0:	469a      	mov	sl, r3
 80053e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80053e6:	d807      	bhi.n	80053f8 <_printf_i+0x28>
 80053e8:	2f62      	cmp	r7, #98	@ 0x62
 80053ea:	d80a      	bhi.n	8005402 <_printf_i+0x32>
 80053ec:	2f00      	cmp	r7, #0
 80053ee:	f000 80d2 	beq.w	8005596 <_printf_i+0x1c6>
 80053f2:	2f58      	cmp	r7, #88	@ 0x58
 80053f4:	f000 80b9 	beq.w	800556a <_printf_i+0x19a>
 80053f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005400:	e03a      	b.n	8005478 <_printf_i+0xa8>
 8005402:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005406:	2b15      	cmp	r3, #21
 8005408:	d8f6      	bhi.n	80053f8 <_printf_i+0x28>
 800540a:	a101      	add	r1, pc, #4	@ (adr r1, 8005410 <_printf_i+0x40>)
 800540c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005410:	08005469 	.word	0x08005469
 8005414:	0800547d 	.word	0x0800547d
 8005418:	080053f9 	.word	0x080053f9
 800541c:	080053f9 	.word	0x080053f9
 8005420:	080053f9 	.word	0x080053f9
 8005424:	080053f9 	.word	0x080053f9
 8005428:	0800547d 	.word	0x0800547d
 800542c:	080053f9 	.word	0x080053f9
 8005430:	080053f9 	.word	0x080053f9
 8005434:	080053f9 	.word	0x080053f9
 8005438:	080053f9 	.word	0x080053f9
 800543c:	0800557d 	.word	0x0800557d
 8005440:	080054a7 	.word	0x080054a7
 8005444:	08005537 	.word	0x08005537
 8005448:	080053f9 	.word	0x080053f9
 800544c:	080053f9 	.word	0x080053f9
 8005450:	0800559f 	.word	0x0800559f
 8005454:	080053f9 	.word	0x080053f9
 8005458:	080054a7 	.word	0x080054a7
 800545c:	080053f9 	.word	0x080053f9
 8005460:	080053f9 	.word	0x080053f9
 8005464:	0800553f 	.word	0x0800553f
 8005468:	6833      	ldr	r3, [r6, #0]
 800546a:	1d1a      	adds	r2, r3, #4
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	6032      	str	r2, [r6, #0]
 8005470:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005474:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005478:	2301      	movs	r3, #1
 800547a:	e09d      	b.n	80055b8 <_printf_i+0x1e8>
 800547c:	6833      	ldr	r3, [r6, #0]
 800547e:	6820      	ldr	r0, [r4, #0]
 8005480:	1d19      	adds	r1, r3, #4
 8005482:	6031      	str	r1, [r6, #0]
 8005484:	0606      	lsls	r6, r0, #24
 8005486:	d501      	bpl.n	800548c <_printf_i+0xbc>
 8005488:	681d      	ldr	r5, [r3, #0]
 800548a:	e003      	b.n	8005494 <_printf_i+0xc4>
 800548c:	0645      	lsls	r5, r0, #25
 800548e:	d5fb      	bpl.n	8005488 <_printf_i+0xb8>
 8005490:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005494:	2d00      	cmp	r5, #0
 8005496:	da03      	bge.n	80054a0 <_printf_i+0xd0>
 8005498:	232d      	movs	r3, #45	@ 0x2d
 800549a:	426d      	negs	r5, r5
 800549c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054a0:	4859      	ldr	r0, [pc, #356]	@ (8005608 <_printf_i+0x238>)
 80054a2:	230a      	movs	r3, #10
 80054a4:	e011      	b.n	80054ca <_printf_i+0xfa>
 80054a6:	6821      	ldr	r1, [r4, #0]
 80054a8:	6833      	ldr	r3, [r6, #0]
 80054aa:	0608      	lsls	r0, r1, #24
 80054ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80054b0:	d402      	bmi.n	80054b8 <_printf_i+0xe8>
 80054b2:	0649      	lsls	r1, r1, #25
 80054b4:	bf48      	it	mi
 80054b6:	b2ad      	uxthmi	r5, r5
 80054b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80054ba:	4853      	ldr	r0, [pc, #332]	@ (8005608 <_printf_i+0x238>)
 80054bc:	6033      	str	r3, [r6, #0]
 80054be:	bf14      	ite	ne
 80054c0:	230a      	movne	r3, #10
 80054c2:	2308      	moveq	r3, #8
 80054c4:	2100      	movs	r1, #0
 80054c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80054ca:	6866      	ldr	r6, [r4, #4]
 80054cc:	60a6      	str	r6, [r4, #8]
 80054ce:	2e00      	cmp	r6, #0
 80054d0:	bfa2      	ittt	ge
 80054d2:	6821      	ldrge	r1, [r4, #0]
 80054d4:	f021 0104 	bicge.w	r1, r1, #4
 80054d8:	6021      	strge	r1, [r4, #0]
 80054da:	b90d      	cbnz	r5, 80054e0 <_printf_i+0x110>
 80054dc:	2e00      	cmp	r6, #0
 80054de:	d04b      	beq.n	8005578 <_printf_i+0x1a8>
 80054e0:	4616      	mov	r6, r2
 80054e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80054e6:	fb03 5711 	mls	r7, r3, r1, r5
 80054ea:	5dc7      	ldrb	r7, [r0, r7]
 80054ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80054f0:	462f      	mov	r7, r5
 80054f2:	42bb      	cmp	r3, r7
 80054f4:	460d      	mov	r5, r1
 80054f6:	d9f4      	bls.n	80054e2 <_printf_i+0x112>
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d10b      	bne.n	8005514 <_printf_i+0x144>
 80054fc:	6823      	ldr	r3, [r4, #0]
 80054fe:	07df      	lsls	r7, r3, #31
 8005500:	d508      	bpl.n	8005514 <_printf_i+0x144>
 8005502:	6923      	ldr	r3, [r4, #16]
 8005504:	6861      	ldr	r1, [r4, #4]
 8005506:	4299      	cmp	r1, r3
 8005508:	bfde      	ittt	le
 800550a:	2330      	movle	r3, #48	@ 0x30
 800550c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005510:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005514:	1b92      	subs	r2, r2, r6
 8005516:	6122      	str	r2, [r4, #16]
 8005518:	f8cd a000 	str.w	sl, [sp]
 800551c:	464b      	mov	r3, r9
 800551e:	aa03      	add	r2, sp, #12
 8005520:	4621      	mov	r1, r4
 8005522:	4640      	mov	r0, r8
 8005524:	f7ff fee6 	bl	80052f4 <_printf_common>
 8005528:	3001      	adds	r0, #1
 800552a:	d14a      	bne.n	80055c2 <_printf_i+0x1f2>
 800552c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005530:	b004      	add	sp, #16
 8005532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005536:	6823      	ldr	r3, [r4, #0]
 8005538:	f043 0320 	orr.w	r3, r3, #32
 800553c:	6023      	str	r3, [r4, #0]
 800553e:	4833      	ldr	r0, [pc, #204]	@ (800560c <_printf_i+0x23c>)
 8005540:	2778      	movs	r7, #120	@ 0x78
 8005542:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005546:	6823      	ldr	r3, [r4, #0]
 8005548:	6831      	ldr	r1, [r6, #0]
 800554a:	061f      	lsls	r7, r3, #24
 800554c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005550:	d402      	bmi.n	8005558 <_printf_i+0x188>
 8005552:	065f      	lsls	r7, r3, #25
 8005554:	bf48      	it	mi
 8005556:	b2ad      	uxthmi	r5, r5
 8005558:	6031      	str	r1, [r6, #0]
 800555a:	07d9      	lsls	r1, r3, #31
 800555c:	bf44      	itt	mi
 800555e:	f043 0320 	orrmi.w	r3, r3, #32
 8005562:	6023      	strmi	r3, [r4, #0]
 8005564:	b11d      	cbz	r5, 800556e <_printf_i+0x19e>
 8005566:	2310      	movs	r3, #16
 8005568:	e7ac      	b.n	80054c4 <_printf_i+0xf4>
 800556a:	4827      	ldr	r0, [pc, #156]	@ (8005608 <_printf_i+0x238>)
 800556c:	e7e9      	b.n	8005542 <_printf_i+0x172>
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	f023 0320 	bic.w	r3, r3, #32
 8005574:	6023      	str	r3, [r4, #0]
 8005576:	e7f6      	b.n	8005566 <_printf_i+0x196>
 8005578:	4616      	mov	r6, r2
 800557a:	e7bd      	b.n	80054f8 <_printf_i+0x128>
 800557c:	6833      	ldr	r3, [r6, #0]
 800557e:	6825      	ldr	r5, [r4, #0]
 8005580:	6961      	ldr	r1, [r4, #20]
 8005582:	1d18      	adds	r0, r3, #4
 8005584:	6030      	str	r0, [r6, #0]
 8005586:	062e      	lsls	r6, r5, #24
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	d501      	bpl.n	8005590 <_printf_i+0x1c0>
 800558c:	6019      	str	r1, [r3, #0]
 800558e:	e002      	b.n	8005596 <_printf_i+0x1c6>
 8005590:	0668      	lsls	r0, r5, #25
 8005592:	d5fb      	bpl.n	800558c <_printf_i+0x1bc>
 8005594:	8019      	strh	r1, [r3, #0]
 8005596:	2300      	movs	r3, #0
 8005598:	6123      	str	r3, [r4, #16]
 800559a:	4616      	mov	r6, r2
 800559c:	e7bc      	b.n	8005518 <_printf_i+0x148>
 800559e:	6833      	ldr	r3, [r6, #0]
 80055a0:	1d1a      	adds	r2, r3, #4
 80055a2:	6032      	str	r2, [r6, #0]
 80055a4:	681e      	ldr	r6, [r3, #0]
 80055a6:	6862      	ldr	r2, [r4, #4]
 80055a8:	2100      	movs	r1, #0
 80055aa:	4630      	mov	r0, r6
 80055ac:	f7fa fe38 	bl	8000220 <memchr>
 80055b0:	b108      	cbz	r0, 80055b6 <_printf_i+0x1e6>
 80055b2:	1b80      	subs	r0, r0, r6
 80055b4:	6060      	str	r0, [r4, #4]
 80055b6:	6863      	ldr	r3, [r4, #4]
 80055b8:	6123      	str	r3, [r4, #16]
 80055ba:	2300      	movs	r3, #0
 80055bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055c0:	e7aa      	b.n	8005518 <_printf_i+0x148>
 80055c2:	6923      	ldr	r3, [r4, #16]
 80055c4:	4632      	mov	r2, r6
 80055c6:	4649      	mov	r1, r9
 80055c8:	4640      	mov	r0, r8
 80055ca:	47d0      	blx	sl
 80055cc:	3001      	adds	r0, #1
 80055ce:	d0ad      	beq.n	800552c <_printf_i+0x15c>
 80055d0:	6823      	ldr	r3, [r4, #0]
 80055d2:	079b      	lsls	r3, r3, #30
 80055d4:	d413      	bmi.n	80055fe <_printf_i+0x22e>
 80055d6:	68e0      	ldr	r0, [r4, #12]
 80055d8:	9b03      	ldr	r3, [sp, #12]
 80055da:	4298      	cmp	r0, r3
 80055dc:	bfb8      	it	lt
 80055de:	4618      	movlt	r0, r3
 80055e0:	e7a6      	b.n	8005530 <_printf_i+0x160>
 80055e2:	2301      	movs	r3, #1
 80055e4:	4632      	mov	r2, r6
 80055e6:	4649      	mov	r1, r9
 80055e8:	4640      	mov	r0, r8
 80055ea:	47d0      	blx	sl
 80055ec:	3001      	adds	r0, #1
 80055ee:	d09d      	beq.n	800552c <_printf_i+0x15c>
 80055f0:	3501      	adds	r5, #1
 80055f2:	68e3      	ldr	r3, [r4, #12]
 80055f4:	9903      	ldr	r1, [sp, #12]
 80055f6:	1a5b      	subs	r3, r3, r1
 80055f8:	42ab      	cmp	r3, r5
 80055fa:	dcf2      	bgt.n	80055e2 <_printf_i+0x212>
 80055fc:	e7eb      	b.n	80055d6 <_printf_i+0x206>
 80055fe:	2500      	movs	r5, #0
 8005600:	f104 0619 	add.w	r6, r4, #25
 8005604:	e7f5      	b.n	80055f2 <_printf_i+0x222>
 8005606:	bf00      	nop
 8005608:	08005821 	.word	0x08005821
 800560c:	08005832 	.word	0x08005832

08005610 <__malloc_lock>:
 8005610:	4801      	ldr	r0, [pc, #4]	@ (8005618 <__malloc_lock+0x8>)
 8005612:	f7ff bc73 	b.w	8004efc <__retarget_lock_acquire_recursive>
 8005616:	bf00      	nop
 8005618:	20000320 	.word	0x20000320

0800561c <__malloc_unlock>:
 800561c:	4801      	ldr	r0, [pc, #4]	@ (8005624 <__malloc_unlock+0x8>)
 800561e:	f7ff bc6e 	b.w	8004efe <__retarget_lock_release_recursive>
 8005622:	bf00      	nop
 8005624:	20000320 	.word	0x20000320

08005628 <_realloc_r>:
 8005628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800562c:	4680      	mov	r8, r0
 800562e:	4615      	mov	r5, r2
 8005630:	460c      	mov	r4, r1
 8005632:	b921      	cbnz	r1, 800563e <_realloc_r+0x16>
 8005634:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005638:	4611      	mov	r1, r2
 800563a:	f7ff bddb 	b.w	80051f4 <_malloc_r>
 800563e:	b92a      	cbnz	r2, 800564c <_realloc_r+0x24>
 8005640:	f000 f858 	bl	80056f4 <_free_r>
 8005644:	2400      	movs	r4, #0
 8005646:	4620      	mov	r0, r4
 8005648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800564c:	f000 f89c 	bl	8005788 <_malloc_usable_size_r>
 8005650:	4285      	cmp	r5, r0
 8005652:	4606      	mov	r6, r0
 8005654:	d802      	bhi.n	800565c <_realloc_r+0x34>
 8005656:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800565a:	d8f4      	bhi.n	8005646 <_realloc_r+0x1e>
 800565c:	4629      	mov	r1, r5
 800565e:	4640      	mov	r0, r8
 8005660:	f7ff fdc8 	bl	80051f4 <_malloc_r>
 8005664:	4607      	mov	r7, r0
 8005666:	2800      	cmp	r0, #0
 8005668:	d0ec      	beq.n	8005644 <_realloc_r+0x1c>
 800566a:	42b5      	cmp	r5, r6
 800566c:	462a      	mov	r2, r5
 800566e:	4621      	mov	r1, r4
 8005670:	bf28      	it	cs
 8005672:	4632      	movcs	r2, r6
 8005674:	f000 f830 	bl	80056d8 <memcpy>
 8005678:	4621      	mov	r1, r4
 800567a:	4640      	mov	r0, r8
 800567c:	f000 f83a 	bl	80056f4 <_free_r>
 8005680:	463c      	mov	r4, r7
 8005682:	e7e0      	b.n	8005646 <_realloc_r+0x1e>

08005684 <memmove>:
 8005684:	4288      	cmp	r0, r1
 8005686:	b510      	push	{r4, lr}
 8005688:	eb01 0402 	add.w	r4, r1, r2
 800568c:	d902      	bls.n	8005694 <memmove+0x10>
 800568e:	4284      	cmp	r4, r0
 8005690:	4623      	mov	r3, r4
 8005692:	d807      	bhi.n	80056a4 <memmove+0x20>
 8005694:	1e43      	subs	r3, r0, #1
 8005696:	42a1      	cmp	r1, r4
 8005698:	d008      	beq.n	80056ac <memmove+0x28>
 800569a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800569e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80056a2:	e7f8      	b.n	8005696 <memmove+0x12>
 80056a4:	4402      	add	r2, r0
 80056a6:	4601      	mov	r1, r0
 80056a8:	428a      	cmp	r2, r1
 80056aa:	d100      	bne.n	80056ae <memmove+0x2a>
 80056ac:	bd10      	pop	{r4, pc}
 80056ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80056b6:	e7f7      	b.n	80056a8 <memmove+0x24>

080056b8 <_sbrk_r>:
 80056b8:	b538      	push	{r3, r4, r5, lr}
 80056ba:	4d06      	ldr	r5, [pc, #24]	@ (80056d4 <_sbrk_r+0x1c>)
 80056bc:	2300      	movs	r3, #0
 80056be:	4604      	mov	r4, r0
 80056c0:	4608      	mov	r0, r1
 80056c2:	602b      	str	r3, [r5, #0]
 80056c4:	f7fc fa50 	bl	8001b68 <_sbrk>
 80056c8:	1c43      	adds	r3, r0, #1
 80056ca:	d102      	bne.n	80056d2 <_sbrk_r+0x1a>
 80056cc:	682b      	ldr	r3, [r5, #0]
 80056ce:	b103      	cbz	r3, 80056d2 <_sbrk_r+0x1a>
 80056d0:	6023      	str	r3, [r4, #0]
 80056d2:	bd38      	pop	{r3, r4, r5, pc}
 80056d4:	2000032c 	.word	0x2000032c

080056d8 <memcpy>:
 80056d8:	440a      	add	r2, r1
 80056da:	4291      	cmp	r1, r2
 80056dc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80056e0:	d100      	bne.n	80056e4 <memcpy+0xc>
 80056e2:	4770      	bx	lr
 80056e4:	b510      	push	{r4, lr}
 80056e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056ee:	4291      	cmp	r1, r2
 80056f0:	d1f9      	bne.n	80056e6 <memcpy+0xe>
 80056f2:	bd10      	pop	{r4, pc}

080056f4 <_free_r>:
 80056f4:	b538      	push	{r3, r4, r5, lr}
 80056f6:	4605      	mov	r5, r0
 80056f8:	2900      	cmp	r1, #0
 80056fa:	d041      	beq.n	8005780 <_free_r+0x8c>
 80056fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005700:	1f0c      	subs	r4, r1, #4
 8005702:	2b00      	cmp	r3, #0
 8005704:	bfb8      	it	lt
 8005706:	18e4      	addlt	r4, r4, r3
 8005708:	f7ff ff82 	bl	8005610 <__malloc_lock>
 800570c:	4a1d      	ldr	r2, [pc, #116]	@ (8005784 <_free_r+0x90>)
 800570e:	6813      	ldr	r3, [r2, #0]
 8005710:	b933      	cbnz	r3, 8005720 <_free_r+0x2c>
 8005712:	6063      	str	r3, [r4, #4]
 8005714:	6014      	str	r4, [r2, #0]
 8005716:	4628      	mov	r0, r5
 8005718:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800571c:	f7ff bf7e 	b.w	800561c <__malloc_unlock>
 8005720:	42a3      	cmp	r3, r4
 8005722:	d908      	bls.n	8005736 <_free_r+0x42>
 8005724:	6820      	ldr	r0, [r4, #0]
 8005726:	1821      	adds	r1, r4, r0
 8005728:	428b      	cmp	r3, r1
 800572a:	bf01      	itttt	eq
 800572c:	6819      	ldreq	r1, [r3, #0]
 800572e:	685b      	ldreq	r3, [r3, #4]
 8005730:	1809      	addeq	r1, r1, r0
 8005732:	6021      	streq	r1, [r4, #0]
 8005734:	e7ed      	b.n	8005712 <_free_r+0x1e>
 8005736:	461a      	mov	r2, r3
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	b10b      	cbz	r3, 8005740 <_free_r+0x4c>
 800573c:	42a3      	cmp	r3, r4
 800573e:	d9fa      	bls.n	8005736 <_free_r+0x42>
 8005740:	6811      	ldr	r1, [r2, #0]
 8005742:	1850      	adds	r0, r2, r1
 8005744:	42a0      	cmp	r0, r4
 8005746:	d10b      	bne.n	8005760 <_free_r+0x6c>
 8005748:	6820      	ldr	r0, [r4, #0]
 800574a:	4401      	add	r1, r0
 800574c:	1850      	adds	r0, r2, r1
 800574e:	4283      	cmp	r3, r0
 8005750:	6011      	str	r1, [r2, #0]
 8005752:	d1e0      	bne.n	8005716 <_free_r+0x22>
 8005754:	6818      	ldr	r0, [r3, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	6053      	str	r3, [r2, #4]
 800575a:	4408      	add	r0, r1
 800575c:	6010      	str	r0, [r2, #0]
 800575e:	e7da      	b.n	8005716 <_free_r+0x22>
 8005760:	d902      	bls.n	8005768 <_free_r+0x74>
 8005762:	230c      	movs	r3, #12
 8005764:	602b      	str	r3, [r5, #0]
 8005766:	e7d6      	b.n	8005716 <_free_r+0x22>
 8005768:	6820      	ldr	r0, [r4, #0]
 800576a:	1821      	adds	r1, r4, r0
 800576c:	428b      	cmp	r3, r1
 800576e:	bf04      	itt	eq
 8005770:	6819      	ldreq	r1, [r3, #0]
 8005772:	685b      	ldreq	r3, [r3, #4]
 8005774:	6063      	str	r3, [r4, #4]
 8005776:	bf04      	itt	eq
 8005778:	1809      	addeq	r1, r1, r0
 800577a:	6021      	streq	r1, [r4, #0]
 800577c:	6054      	str	r4, [r2, #4]
 800577e:	e7ca      	b.n	8005716 <_free_r+0x22>
 8005780:	bd38      	pop	{r3, r4, r5, pc}
 8005782:	bf00      	nop
 8005784:	20000328 	.word	0x20000328

08005788 <_malloc_usable_size_r>:
 8005788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800578c:	1f18      	subs	r0, r3, #4
 800578e:	2b00      	cmp	r3, #0
 8005790:	bfbc      	itt	lt
 8005792:	580b      	ldrlt	r3, [r1, r0]
 8005794:	18c0      	addlt	r0, r0, r3
 8005796:	4770      	bx	lr

08005798 <_init>:
 8005798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579a:	bf00      	nop
 800579c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800579e:	bc08      	pop	{r3}
 80057a0:	469e      	mov	lr, r3
 80057a2:	4770      	bx	lr

080057a4 <_fini>:
 80057a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057a6:	bf00      	nop
 80057a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057aa:	bc08      	pop	{r3}
 80057ac:	469e      	mov	lr, r3
 80057ae:	4770      	bx	lr
