
APPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009580  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  08009750  08009750  0000a750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c70  08009c70  0000b1e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009c70  08009c70  0000ac70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c78  08009c78  0000b1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c78  08009c78  0000ac78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009c7c  08009c7c  0000ac7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08009c80  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  200001e8  08009e68  0000b1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d0  08009e68  0000b4d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001379d  00000000  00000000  0000b218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034cd  00000000  00000000  0001e9b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  00021e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bf6  00000000  00000000  00022e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025c02  00000000  00000000  00023a06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000161cf  00000000  00000000  00049608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd9b8  00000000  00000000  0005f7d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013d18f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000531c  00000000  00000000  0013d1d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001424f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009738 	.word	0x08009738

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	08009738 	.word	0x08009738

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <FEB_CAN_Init>:
uint32_t FEB_CAN_Tx_Mailbox;
uint8_t setup = 0;

// **************************************** Functions ****************************************

void FEB_CAN_Init(void) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	FEB_CAN_Filter_Config();
 8000f7c:	f000 f814 	bl	8000fa8 <FEB_CAN_Filter_Config>
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8000f80:	4807      	ldr	r0, [pc, #28]	@ (8000fa0 <FEB_CAN_Init+0x28>)
 8000f82:	f002 fb2b 	bl	80035dc <HAL_CAN_Start>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d002      	beq.n	8000f92 <FEB_CAN_Init+0x1a>
		setup = 1;
 8000f8c:	4b05      	ldr	r3, [pc, #20]	@ (8000fa4 <FEB_CAN_Init+0x2c>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	701a      	strb	r2, [r3, #0]
        // Code Error - Shutdown
	}
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000f92:	2102      	movs	r1, #2
 8000f94:	4802      	ldr	r0, [pc, #8]	@ (8000fa0 <FEB_CAN_Init+0x28>)
 8000f96:	f002 fd8c 	bl	8003ab2 <HAL_CAN_ActivateNotification>
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200002b8 	.word	0x200002b8
 8000fa4:	2000024c 	.word	0x2000024c

08000fa8 <FEB_CAN_Filter_Config>:

void FEB_CAN_Filter_Config(void) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
	uint8_t filter_bank = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	71fb      	strb	r3, [r7, #7]
    filter_bank = FEB_CAN_ICS_Filter(&hcan1, CAN_RX_FIFO0, filter_bank);
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	480c      	ldr	r0, [pc, #48]	@ (8000fec <FEB_CAN_Filter_Config+0x44>)
 8000fba:	f000 f8b3 	bl	8001124 <FEB_CAN_ICS_Filter>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
    filter_bank = FEB_CAN_BMS_Filter_Config(&hcan1, CAN_RX_FIFO0,  filter_bank);
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4808      	ldr	r0, [pc, #32]	@ (8000fec <FEB_CAN_Filter_Config+0x44>)
 8000fca:	f000 f833 	bl	8001034 <FEB_CAN_BMS_Filter_Config>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
    filter_bank = FEB_CAN_RMS_Filter_Config(&hcan1, CAN_RX_FIFO0, filter_bank);
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4804      	ldr	r0, [pc, #16]	@ (8000fec <FEB_CAN_Filter_Config+0x44>)
 8000fda:	f000 fbc3 	bl	8001764 <FEB_CAN_RMS_Filter_Config>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]

	// Assign Filter
    // filter_bank = Function(&hcan1, CAN_RX_FIFO0, filter_bank);
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200002b8 	.word	0x200002b8

08000ff0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &FEB_CAN_Rx_Header, FEB_CAN_Rx_Data) == HAL_OK) {
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800102c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000ffa:	4a0d      	ldr	r2, [pc, #52]	@ (8001030 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f002 fc35 	bl	800386e <HAL_CAN_GetRxMessage>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d10b      	bne.n	8001022 <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
		FEB_CAN_ICS_Store_Msg(&FEB_CAN_Rx_Header, FEB_CAN_Rx_Data);
 800100a:	4908      	ldr	r1, [pc, #32]	@ (800102c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 800100c:	4808      	ldr	r0, [pc, #32]	@ (8001030 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 800100e:	f000 f8cb 	bl	80011a8 <FEB_CAN_ICS_Store_Msg>
		FEB_CAN_BMS_Store_Msg(&FEB_CAN_Rx_Header, FEB_CAN_Rx_Data);
 8001012:	4906      	ldr	r1, [pc, #24]	@ (800102c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8001014:	4806      	ldr	r0, [pc, #24]	@ (8001030 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8001016:	f000 f851 	bl	80010bc <FEB_CAN_BMS_Store_Msg>
		FEB_CAN_RMS_Store_Msg(&FEB_CAN_Rx_Header, FEB_CAN_Rx_Data);
 800101a:	4904      	ldr	r1, [pc, #16]	@ (800102c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 800101c:	4804      	ldr	r0, [pc, #16]	@ (8001030 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 800101e:	f000 fbe5 	bl	80017ec <FEB_CAN_RMS_Store_Msg>

	}
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000240 	.word	0x20000240
 8001030:	2000021c 	.word	0x2000021c

08001034 <FEB_CAN_BMS_Filter_Config>:



// ***** CAN FUNCTIONS ****

uint8_t FEB_CAN_BMS_Filter_Config(CAN_HandleTypeDef* hcan, uint8_t FIFO_assignment, uint8_t filter_bank) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b08e      	sub	sp, #56	@ 0x38
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	70fb      	strb	r3, [r7, #3]
 8001040:	4613      	mov	r3, r2
 8001042:	70bb      	strb	r3, [r7, #2]
	uint16_t ids[] = {FEB_CAN_ID_BMS_STATE,FEB_CAN_ID_BMS_TEMPERATURE};
 8001044:	2303      	movs	r3, #3
 8001046:	863b      	strh	r3, [r7, #48]	@ 0x30
 8001048:	2300      	movs	r3, #0
 800104a:	867b      	strh	r3, [r7, #50]	@ 0x32

	for (uint8_t i = 0; i < 1; i++) {
 800104c:	2300      	movs	r3, #0
 800104e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001052:	e029      	b.n	80010a8 <FEB_CAN_BMS_Filter_Config+0x74>
		CAN_FilterTypeDef filter_config;

	    // Standard CAN - 2.0A - 11 bit
	    filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8001054:	2301      	movs	r3, #1
 8001056:	62bb      	str	r3, [r7, #40]	@ 0x28
		filter_config.FilterBank = filter_bank;
 8001058:	78bb      	ldrb	r3, [r7, #2]
 800105a:	61fb      	str	r3, [r7, #28]
		filter_config.FilterFIFOAssignment = FIFO_assignment;
 800105c:	78fb      	ldrb	r3, [r7, #3]
 800105e:	61bb      	str	r3, [r7, #24]
		filter_config.FilterIdHigh = ids[i] << 5;
 8001060:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	3338      	adds	r3, #56	@ 0x38
 8001068:	443b      	add	r3, r7
 800106a:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 800106e:	015b      	lsls	r3, r3, #5
 8001070:	60bb      	str	r3, [r7, #8]
		filter_config.FilterIdLow = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
		filter_config.FilterMaskIdHigh = 0xFFE0;
 8001076:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800107a:	613b      	str	r3, [r7, #16]
		filter_config.FilterMaskIdLow = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
		filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8001080:	2300      	movs	r3, #0
 8001082:	623b      	str	r3, [r7, #32]
		filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8001084:	2301      	movs	r3, #1
 8001086:	627b      	str	r3, [r7, #36]	@ 0x24
		filter_config.SlaveStartFilterBank = 27;
 8001088:	231b      	movs	r3, #27
 800108a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    filter_bank++;
 800108c:	78bb      	ldrb	r3, [r7, #2]
 800108e:	3301      	adds	r3, #1
 8001090:	70bb      	strb	r3, [r7, #2]

		if (HAL_CAN_ConfigFilter(hcan, &filter_config) != HAL_OK) {
 8001092:	f107 0308 	add.w	r3, r7, #8
 8001096:	4619      	mov	r1, r3
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f002 f9bf 	bl	800341c <HAL_CAN_ConfigFilter>
	for (uint8_t i = 0; i < 1; i++) {
 800109e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80010a2:	3301      	adds	r3, #1
 80010a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80010a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d0d1      	beq.n	8001054 <FEB_CAN_BMS_Filter_Config+0x20>
			//Code Error - shutdown
		}
	}

	return filter_bank;
 80010b0:	78bb      	ldrb	r3, [r7, #2]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3738      	adds	r7, #56	@ 0x38
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <FEB_CAN_BMS_Store_Msg>:

void FEB_CAN_BMS_Store_Msg(CAN_RxHeaderTypeDef* pHeader, uint8_t *RxData) {
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
    switch (pHeader -> StdId){
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d002      	beq.n	80010d4 <FEB_CAN_BMS_Store_Msg+0x18>
 80010ce:	2b03      	cmp	r3, #3
 80010d0:	d00f      	beq.n	80010f2 <FEB_CAN_BMS_Store_Msg+0x36>

        case FEB_CAN_ID_BMS_STATE:
            BMS_MESSAGE.status = RxData[0];
            break;
    }
}
 80010d2:	e013      	b.n	80010fc <FEB_CAN_BMS_Store_Msg+0x40>
        	BMS_MESSAGE.temp = RxData[2] << 8 | RxData[3];
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	3302      	adds	r3, #2
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	021b      	lsls	r3, r3, #8
 80010dc:	b21a      	sxth	r2, r3
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	3303      	adds	r3, #3
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <FEB_CAN_BMS_Store_Msg+0x4c>)
 80010ee:	801a      	strh	r2, [r3, #0]
            break;
 80010f0:	e004      	b.n	80010fc <FEB_CAN_BMS_Store_Msg+0x40>
            BMS_MESSAGE.status = RxData[0];
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	781a      	ldrb	r2, [r3, #0]
 80010f6:	4b04      	ldr	r3, [pc, #16]	@ (8001108 <FEB_CAN_BMS_Store_Msg+0x4c>)
 80010f8:	709a      	strb	r2, [r3, #2]
            break;
 80010fa:	bf00      	nop
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	20000250 	.word	0x20000250

0800110c <FEB_CAN_BMS_getState>:

FEB_SM_ST_t FEB_CAN_BMS_getState(){
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
	return BMS_MESSAGE.status;
 8001110:	4b03      	ldr	r3, [pc, #12]	@ (8001120 <FEB_CAN_BMS_getState+0x14>)
 8001112:	789b      	ldrb	r3, [r3, #2]

}
 8001114:	4618      	mov	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	20000250 	.word	0x20000250

08001124 <FEB_CAN_ICS_Filter>:
// ******************************** Variables ********************************
bool READY_TO_DRIVE = 0;

// **************************************** Functions ****************************************

uint8_t FEB_CAN_ICS_Filter(CAN_HandleTypeDef* hcan, uint8_t FIFO_assignment, uint8_t filter_bank) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b08e      	sub	sp, #56	@ 0x38
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	70fb      	strb	r3, [r7, #3]
 8001130:	4613      	mov	r3, r2
 8001132:	70bb      	strb	r3, [r7, #2]
    // For multiple filters, create array of filter IDs and loop over IDs.

	uint16_t ids[] = {FEB_CAN_ID_ICS_BUTTON_STATE};
 8001134:	2307      	movs	r3, #7
 8001136:	86bb      	strh	r3, [r7, #52]	@ 0x34

	for (uint8_t i = 0; i < 1; i++) {
 8001138:	2300      	movs	r3, #0
 800113a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800113e:	e029      	b.n	8001194 <FEB_CAN_ICS_Filter+0x70>
		CAN_FilterTypeDef filter_config;

	    // Standard CAN - 2.0A - 11 bit
	    filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8001140:	2301      	movs	r3, #1
 8001142:	62fb      	str	r3, [r7, #44]	@ 0x2c
		filter_config.FilterBank = filter_bank;
 8001144:	78bb      	ldrb	r3, [r7, #2]
 8001146:	623b      	str	r3, [r7, #32]
		filter_config.FilterFIFOAssignment = FIFO_assignment;
 8001148:	78fb      	ldrb	r3, [r7, #3]
 800114a:	61fb      	str	r3, [r7, #28]
		filter_config.FilterIdHigh = ids[i] << 5;
 800114c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	3338      	adds	r3, #56	@ 0x38
 8001154:	443b      	add	r3, r7
 8001156:	f833 3c04 	ldrh.w	r3, [r3, #-4]
 800115a:	015b      	lsls	r3, r3, #5
 800115c:	60fb      	str	r3, [r7, #12]
		filter_config.FilterIdLow = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
		filter_config.FilterMaskIdHigh = 0xFFE0;
 8001162:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001166:	617b      	str	r3, [r7, #20]
		filter_config.FilterMaskIdLow = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	61bb      	str	r3, [r7, #24]
		filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 800116c:	2300      	movs	r3, #0
 800116e:	627b      	str	r3, [r7, #36]	@ 0x24
		filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8001170:	2301      	movs	r3, #1
 8001172:	62bb      	str	r3, [r7, #40]	@ 0x28
		filter_config.SlaveStartFilterBank = 27;
 8001174:	231b      	movs	r3, #27
 8001176:	633b      	str	r3, [r7, #48]	@ 0x30
	    filter_bank++;
 8001178:	78bb      	ldrb	r3, [r7, #2]
 800117a:	3301      	adds	r3, #1
 800117c:	70bb      	strb	r3, [r7, #2]

		if (HAL_CAN_ConfigFilter(hcan, &filter_config) != HAL_OK) {
 800117e:	f107 030c 	add.w	r3, r7, #12
 8001182:	4619      	mov	r1, r3
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f002 f949 	bl	800341c <HAL_CAN_ConfigFilter>
	for (uint8_t i = 0; i < 1; i++) {
 800118a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800118e:	3301      	adds	r3, #1
 8001190:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001194:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001198:	2b00      	cmp	r3, #0
 800119a:	d0d1      	beq.n	8001140 <FEB_CAN_ICS_Filter+0x1c>
			// Shutdown
		}
	}

	return filter_bank;
 800119c:	78bb      	ldrb	r3, [r7, #2]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3738      	adds	r7, #56	@ 0x38
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <FEB_CAN_ICS_Store_Msg>:

void FEB_CAN_ICS_Store_Msg(CAN_RxHeaderTypeDef *rx_header, uint8_t rx_data[]) {
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
	switch(rx_header->StdId) {
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2b07      	cmp	r3, #7
 80011b8:	d10c      	bne.n	80011d4 <FEB_CAN_ICS_Store_Msg+0x2c>
		case FEB_CAN_ID_ICS_BUTTON_STATE:
				READY_TO_DRIVE = ((rx_data[0] | 0b11111101) == 0b11111111);
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	f063 0302 	orn	r3, r3, #2
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2bff      	cmp	r3, #255	@ 0xff
 80011c6:	bf0c      	ite	eq
 80011c8:	2301      	moveq	r3, #1
 80011ca:	2300      	movne	r3, #0
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	4b04      	ldr	r3, [pc, #16]	@ (80011e0 <FEB_CAN_ICS_Store_Msg+0x38>)
 80011d0:	701a      	strb	r2, [r3, #0]
				break;
 80011d2:	bf00      	nop
	}
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	20000254 	.word	0x20000254

080011e4 <FEB_Ready_To_Drive>:

bool FEB_Ready_To_Drive() {
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
	return READY_TO_DRIVE;
 80011e8:	4b03      	ldr	r3, [pc, #12]	@ (80011f8 <FEB_Ready_To_Drive+0x14>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	20000254 	.word	0x20000254

080011fc <FEB_CAN_RMS_Setup>:

// ********************************** Functions **********************************

// ***** SET UP ****

void FEB_CAN_RMS_Setup(void){
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
	 RMSControl.enabled = 0;
 8001200:	4b05      	ldr	r3, [pc, #20]	@ (8001218 <FEB_CAN_RMS_Setup+0x1c>)
 8001202:	2200      	movs	r2, #0
 8001204:	709a      	strb	r2, [r3, #2]
	 RMSControl.torque= 0.0;
 8001206:	4b04      	ldr	r3, [pc, #16]	@ (8001218 <FEB_CAN_RMS_Setup+0x1c>)
 8001208:	2200      	movs	r2, #0
 800120a:	801a      	strh	r2, [r3, #0]
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20000258 	.word	0x20000258

0800121c <FEB_CAN_RMS_Process>:

void FEB_CAN_RMS_Process(void){
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
	if (!RMSControl.enabled){
 8001220:	4b05      	ldr	r3, [pc, #20]	@ (8001238 <FEB_CAN_RMS_Process+0x1c>)
 8001222:	789b      	ldrb	r3, [r3, #2]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d102      	bne.n	800122e <FEB_CAN_RMS_Process+0x12>
//		FEB_CAN_RMS_Init();
		RMSControl.enabled = 1;
 8001228:	4b03      	ldr	r3, [pc, #12]	@ (8001238 <FEB_CAN_RMS_Process+0x1c>)
 800122a:	2201      	movs	r2, #1
 800122c:	709a      	strb	r2, [r3, #2]
	}
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	20000258 	.word	0x20000258

0800123c <FEB_CAN_RMS_Disable>:

void FEB_CAN_RMS_Disable(void){
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
	RMSControl.enabled = 0;
 8001240:	4b03      	ldr	r3, [pc, #12]	@ (8001250 <FEB_CAN_RMS_Disable+0x14>)
 8001242:	2200      	movs	r2, #0
 8001244:	709a      	strb	r2, [r3, #2]
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	20000258 	.word	0x20000258
 8001254:	00000000 	.word	0x00000000

08001258 <FEB_getElecMaxRegenTorque>:

// ****** REGEN FUNCTIONS ****

// Returns maximum torque available within 20A limit of the cells
// V_acc * 20 * efficiency = torque / w
float FEB_getElecMaxRegenTorque(){
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
	float accumulator_voltage = min(INIT_VOLTAGE, (RMS_MESSAGE.HV_Bus_Voltage-50) / 10); // TODO: consider reading from IVT
 800125e:	4b2c      	ldr	r3, [pc, #176]	@ (8001310 <FEB_getElecMaxRegenTorque+0xb8>)
 8001260:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001264:	f241 22fb 	movw	r2, #4859	@ 0x12fb
 8001268:	4293      	cmp	r3, r2
 800126a:	dc0e      	bgt.n	800128a <FEB_getElecMaxRegenTorque+0x32>
 800126c:	4b28      	ldr	r3, [pc, #160]	@ (8001310 <FEB_getElecMaxRegenTorque+0xb8>)
 800126e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001272:	3b32      	subs	r3, #50	@ 0x32
 8001274:	4a27      	ldr	r2, [pc, #156]	@ (8001314 <FEB_getElecMaxRegenTorque+0xbc>)
 8001276:	fb82 1203 	smull	r1, r2, r2, r3
 800127a:	1092      	asrs	r2, r2, #2
 800127c:	17db      	asrs	r3, r3, #31
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	ee07 3a90 	vmov	s15, r3
 8001284:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001288:	e001      	b.n	800128e <FEB_getElecMaxRegenTorque+0x36>
 800128a:	eddf 7a23 	vldr	s15, [pc, #140]	@ 8001318 <FEB_getElecMaxRegenTorque+0xc0>
 800128e:	edc7 7a03 	vstr	s15, [r7, #12]
	float motor_speed_rads = RMS_MESSAGE.Motor_Speed * RPM_TO_RAD_S;
 8001292:	4b1f      	ldr	r3, [pc, #124]	@ (8001310 <FEB_getElecMaxRegenTorque+0xb8>)
 8001294:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f963 	bl	8000564 <__aeabi_i2d>
 800129e:	a31a      	add	r3, pc, #104	@ (adr r3, 8001308 <FEB_getElecMaxRegenTorque+0xb0>)
 80012a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a4:	f7ff f9c8 	bl	8000638 <__aeabi_dmul>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4610      	mov	r0, r2
 80012ae:	4619      	mov	r1, r3
 80012b0:	f7ff fc9a 	bl	8000be8 <__aeabi_d2f>
 80012b4:	4603      	mov	r3, r0
 80012b6:	60bb      	str	r3, [r7, #8]

	float maxTorque = min(MAX_TORQUE_REGEN, (accumulator_voltage * PEAK_CURRENT_REGEN) / motor_speed_rads);
 80012b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80012bc:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 80012c0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80012c4:	ed97 7a02 	vldr	s14, [r7, #8]
 80012c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012cc:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800131c <FEB_getElecMaxRegenTorque+0xc4>
 80012d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d8:	dd02      	ble.n	80012e0 <FEB_getElecMaxRegenTorque+0x88>
 80012da:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800131c <FEB_getElecMaxRegenTorque+0xc4>
 80012de:	e009      	b.n	80012f4 <FEB_getElecMaxRegenTorque+0x9c>
 80012e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012e4:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 80012e8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80012ec:	ed97 7a02 	vldr	s14, [r7, #8]
 80012f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012f4:	edc7 7a01 	vstr	s15, [r7, #4]
	return maxTorque;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	ee07 3a90 	vmov	s15, r3
}
 80012fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	0f3cb3e5 	.word	0x0f3cb3e5
 800130c:	3fbaceee 	.word	0x3fbaceee
 8001310:	2000025c 	.word	0x2000025c
 8001314:	66666667 	.word	0x66666667
 8001318:	43f00000 	.word	0x43f00000
 800131c:	44a28000 	.word	0x44a28000

08001320 <FEB_regen_filter_Speed>:

// Step function at from 0 to 1 at FADE_SPEED
float FEB_regen_filter_Speed(float unfiltered_regen_torque){
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	ed87 0a01 	vstr	s0, [r7, #4]
    float motor_speed_rpm = RMS_MESSAGE.Motor_Speed; 
 800132a:	4b0f      	ldr	r3, [pc, #60]	@ (8001368 <FEB_regen_filter_Speed+0x48>)
 800132c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001330:	ee07 3a90 	vmov	s15, r3
 8001334:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001338:	edc7 7a03 	vstr	s15, [r7, #12]

    if (motor_speed_rpm < FADE_SPEED_RPM)
 800133c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001340:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800136c <FEB_regen_filter_Speed+0x4c>
 8001344:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800134c:	d502      	bpl.n	8001354 <FEB_regen_filter_Speed+0x34>
    {
        return 0;
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	e000      	b.n	8001356 <FEB_regen_filter_Speed+0x36>
    }
    else
    {
        return unfiltered_regen_torque;
 8001354:	687b      	ldr	r3, [r7, #4]
    }
}
 8001356:	ee07 3a90 	vmov	s15, r3
 800135a:	eeb0 0a67 	vmov.f32	s0, s15
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	2000025c 	.word	0x2000025c
 800136c:	43480000 	.word	0x43480000

08001370 <FEB_regen_filter_SOC>:

// Saturated linear function between
// (START_REGEN_SOC, 0) and (MAX_REGEN_SOC, 1)
float FEB_regen_filter_SOC(float unfiltered_regen_torque){
 8001370:	b5b0      	push	{r4, r5, r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	ed87 0a01 	vstr	s0, [r7, #4]
	float state_of_charge = 1; // FEB_BMS_getSOC(); // TODO for Evan, uncomment and use SOC
 800137a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800137e:	613b      	str	r3, [r7, #16]

	// m = (y_1 - y_0) / (x_1 - x_0)
	float slope = (1 - 0) / (MAX_REGEN_SOC - START_REGEN_SOC);
 8001380:	4b21      	ldr	r3, [pc, #132]	@ (8001408 <FEB_regen_filter_SOC+0x98>)
 8001382:	60fb      	str	r3, [r7, #12]
	// y - y_0 = m (x - x_0)
	float k_SOC = slope * (state_of_charge - START_REGEN_SOC);
 8001384:	68f8      	ldr	r0, [r7, #12]
 8001386:	f7ff f8ff 	bl	8000588 <__aeabi_f2d>
 800138a:	4604      	mov	r4, r0
 800138c:	460d      	mov	r5, r1
 800138e:	6938      	ldr	r0, [r7, #16]
 8001390:	f7ff f8fa 	bl	8000588 <__aeabi_f2d>
 8001394:	a31a      	add	r3, pc, #104	@ (adr r3, 8001400 <FEB_regen_filter_SOC+0x90>)
 8001396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139a:	f7fe ff95 	bl	80002c8 <__aeabi_dsub>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4620      	mov	r0, r4
 80013a4:	4629      	mov	r1, r5
 80013a6:	f7ff f947 	bl	8000638 <__aeabi_dmul>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4610      	mov	r0, r2
 80013b0:	4619      	mov	r1, r3
 80013b2:	f7ff fc19 	bl	8000be8 <__aeabi_d2f>
 80013b6:	4603      	mov	r3, r0
 80013b8:	617b      	str	r3, [r7, #20]
    
	// Saturate between 0 and 1
	if (k_SOC > 1)
 80013ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80013be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80013c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ca:	dd02      	ble.n	80013d2 <FEB_regen_filter_SOC+0x62>
	{
		k_SOC = 1;
 80013cc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80013d0:	617b      	str	r3, [r7, #20]
	}
	if (k_SOC < 0)
 80013d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80013d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013de:	d502      	bpl.n	80013e6 <FEB_regen_filter_SOC+0x76>
	{
		return 0;
 80013e0:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800140c <FEB_regen_filter_SOC+0x9c>
 80013e4:	e005      	b.n	80013f2 <FEB_regen_filter_SOC+0x82>
	}
	return k_SOC * unfiltered_regen_torque; // be wary of typing (float vs int)
 80013e6:	ed97 7a05 	vldr	s14, [r7, #20]
 80013ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80013ee:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80013f2:	eeb0 0a67 	vmov.f32	s0, s15
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bdb0      	pop	{r4, r5, r7, pc}
 80013fc:	f3af 8000 	nop.w
 8001400:	66666666 	.word	0x66666666
 8001404:	3fee6666 	.word	0x3fee6666
 8001408:	c0d55555 	.word	0xc0d55555
 800140c:	00000000 	.word	0x00000000

08001410 <FEB_regen_filter_Temp>:

// Consider linear function similar to the above if driver doesn't like the exponential
// This will depend on how fast cells heat up
// Function with a vertical asymptote at 45 deg C
float FEB_regen_filter_Temp(float unfiltered_regen_torque){
 8001410:	b5b0      	push	{r4, r5, r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	ed87 0a01 	vstr	s0, [r7, #4]
	float hottest_cell_temp_C = 25; //(); // TODO
 800141a:	4b20      	ldr	r3, [pc, #128]	@ (800149c <FEB_regen_filter_Temp+0x8c>)
 800141c:	617b      	str	r3, [r7, #20]
	float e = 2.71828;
 800141e:	4b20      	ldr	r3, [pc, #128]	@ (80014a0 <FEB_regen_filter_Temp+0x90>)
 8001420:	613b      	str	r3, [r7, #16]
	float exponent = TEMP_FILTER_SHARPNESS * (hottest_cell_temp_C - MAX_CELL_TEMP);
 8001422:	edd7 7a05 	vldr	s15, [r7, #20]
 8001426:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80014a4 <FEB_regen_filter_Temp+0x94>
 800142a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800142e:	edc7 7a03 	vstr	s15, [r7, #12]
	float k_temp = 1 - pow(e, exponent);
 8001432:	6938      	ldr	r0, [r7, #16]
 8001434:	f7ff f8a8 	bl	8000588 <__aeabi_f2d>
 8001438:	4604      	mov	r4, r0
 800143a:	460d      	mov	r5, r1
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f7ff f8a3 	bl	8000588 <__aeabi_f2d>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	ec43 2b11 	vmov	d1, r2, r3
 800144a:	ec45 4b10 	vmov	d0, r4, r5
 800144e:	f007 fa15 	bl	800887c <pow>
 8001452:	ec53 2b10 	vmov	r2, r3, d0
 8001456:	f04f 0000 	mov.w	r0, #0
 800145a:	4913      	ldr	r1, [pc, #76]	@ (80014a8 <FEB_regen_filter_Temp+0x98>)
 800145c:	f7fe ff34 	bl	80002c8 <__aeabi_dsub>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4610      	mov	r0, r2
 8001466:	4619      	mov	r1, r3
 8001468:	f7ff fbbe 	bl	8000be8 <__aeabi_d2f>
 800146c:	4603      	mov	r3, r0
 800146e:	60bb      	str	r3, [r7, #8]
	if (k_temp < 0)
 8001470:	edd7 7a02 	vldr	s15, [r7, #8]
 8001474:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800147c:	d502      	bpl.n	8001484 <FEB_regen_filter_Temp+0x74>
	{
		return 0;
 800147e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80014ac <FEB_regen_filter_Temp+0x9c>
 8001482:	e005      	b.n	8001490 <FEB_regen_filter_Temp+0x80>
	}
	return k_temp * unfiltered_regen_torque;
 8001484:	ed97 7a02 	vldr	s14, [r7, #8]
 8001488:	edd7 7a01 	vldr	s15, [r7, #4]
 800148c:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001490:	eeb0 0a67 	vmov.f32	s0, s15
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bdb0      	pop	{r4, r5, r7, pc}
 800149a:	bf00      	nop
 800149c:	41c80000 	.word	0x41c80000
 80014a0:	402df84d 	.word	0x402df84d
 80014a4:	42340000 	.word	0x42340000
 80014a8:	3ff00000 	.word	0x3ff00000
 80014ac:	00000000 	.word	0x00000000

080014b0 <FEB_regen_filter>:

// Wrapper function for various filters
float FEB_regen_filter(float regen_torque_max){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	ed87 0a01 	vstr	s0, [r7, #4]
	float filtered_regen_torque = regen_torque_max;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	60fb      	str	r3, [r7, #12]
	filtered_regen_torque = FEB_regen_filter_Speed(filtered_regen_torque);
 80014be:	ed97 0a03 	vldr	s0, [r7, #12]
 80014c2:	f7ff ff2d 	bl	8001320 <FEB_regen_filter_Speed>
 80014c6:	ed87 0a03 	vstr	s0, [r7, #12]
	filtered_regen_torque = FEB_regen_filter_SOC(filtered_regen_torque);
 80014ca:	ed97 0a03 	vldr	s0, [r7, #12]
 80014ce:	f7ff ff4f 	bl	8001370 <FEB_regen_filter_SOC>
 80014d2:	ed87 0a03 	vstr	s0, [r7, #12]
	filtered_regen_torque = FEB_regen_filter_Temp(filtered_regen_torque);
 80014d6:	ed97 0a03 	vldr	s0, [r7, #12]
 80014da:	f7ff ff99 	bl	8001410 <FEB_regen_filter_Temp>
 80014de:	ed87 0a03 	vstr	s0, [r7, #12]
	return filtered_regen_torque * USER_REGEN_FILTER;
 80014e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80014e6:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 80014f8 <FEB_regen_filter+0x48>
 80014ea:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80014ee:	eeb0 0a67 	vmov.f32	s0, s15
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	00000000 	.word	0x00000000

080014fc <FEB_CAN_RMS_getFilteredTorque_Regen>:

// **** TORQUE FUNCTIONS****

// Returns MAGNITUDE of regen torque
float FEB_CAN_RMS_getFilteredTorque_Regen(void){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
	float present_regen_max = FEB_getElecMaxRegenTorque();
 8001502:	f7ff fea9 	bl	8001258 <FEB_getElecMaxRegenTorque>
 8001506:	ed87 0a01 	vstr	s0, [r7, #4]
	return FEB_regen_filter(present_regen_max);
 800150a:	ed97 0a01 	vldr	s0, [r7, #4]
 800150e:	f7ff ffcf 	bl	80014b0 <FEB_regen_filter>
 8001512:	eef0 7a40 	vmov.f32	s15, s0
}
 8001516:	eeb0 0a67 	vmov.f32	s0, s15
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <FEB_CAN_RMS_getMaxTorque>:


float FEB_CAN_RMS_getMaxTorque(void){
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
	float accumulator_voltage = min(INIT_VOLTAGE, (RMS_MESSAGE.HV_Bus_Voltage-50) / 10); // TODO: consider reading from IVT
 8001526:	4b32      	ldr	r3, [pc, #200]	@ (80015f0 <FEB_CAN_RMS_getMaxTorque+0xd0>)
 8001528:	f9b3 3000 	ldrsh.w	r3, [r3]
 800152c:	f241 22fb 	movw	r2, #4859	@ 0x12fb
 8001530:	4293      	cmp	r3, r2
 8001532:	dc0e      	bgt.n	8001552 <FEB_CAN_RMS_getMaxTorque+0x32>
 8001534:	4b2e      	ldr	r3, [pc, #184]	@ (80015f0 <FEB_CAN_RMS_getMaxTorque+0xd0>)
 8001536:	f9b3 3000 	ldrsh.w	r3, [r3]
 800153a:	3b32      	subs	r3, #50	@ 0x32
 800153c:	4a2d      	ldr	r2, [pc, #180]	@ (80015f4 <FEB_CAN_RMS_getMaxTorque+0xd4>)
 800153e:	fb82 1203 	smull	r1, r2, r2, r3
 8001542:	1092      	asrs	r2, r2, #2
 8001544:	17db      	asrs	r3, r3, #31
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	ee07 3a90 	vmov	s15, r3
 800154c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001550:	e001      	b.n	8001556 <FEB_CAN_RMS_getMaxTorque+0x36>
 8001552:	eddf 7a29 	vldr	s15, [pc, #164]	@ 80015f8 <FEB_CAN_RMS_getMaxTorque+0xd8>
 8001556:	edc7 7a03 	vstr	s15, [r7, #12]
	float motor_speed = RMS_MESSAGE.Motor_Speed * RPM_TO_RAD_S;
 800155a:	4b25      	ldr	r3, [pc, #148]	@ (80015f0 <FEB_CAN_RMS_getMaxTorque+0xd0>)
 800155c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001560:	4618      	mov	r0, r3
 8001562:	f7fe ffff 	bl	8000564 <__aeabi_i2d>
 8001566:	a320      	add	r3, pc, #128	@ (adr r3, 80015e8 <FEB_CAN_RMS_getMaxTorque+0xc8>)
 8001568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156c:	f7ff f864 	bl	8000638 <__aeabi_dmul>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4610      	mov	r0, r2
 8001576:	4619      	mov	r1, r3
 8001578:	f7ff fb36 	bl	8000be8 <__aeabi_d2f>
 800157c:	4603      	mov	r3, r0
 800157e:	60bb      	str	r3, [r7, #8]
 	// If speed is less than 15, we should command max torque
  	// This catches divide by 0 errors and also negative speeds (which may create very high negative torque values)
	if (motor_speed < 15) {
 8001580:	edd7 7a02 	vldr	s15, [r7, #8]
 8001584:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8001588:	eef4 7ac7 	vcmpe.f32	s15, s14
 800158c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001590:	d501      	bpl.n	8001596 <FEB_CAN_RMS_getMaxTorque+0x76>
		return MAX_TORQUE;
 8001592:	4b1a      	ldr	r3, [pc, #104]	@ (80015fc <FEB_CAN_RMS_getMaxTorque+0xdc>)
 8001594:	e020      	b.n	80015d8 <FEB_CAN_RMS_getMaxTorque+0xb8>
	}
	float maxTorque = min(MAX_TORQUE, (accumulator_voltage * PEAK_CURRENT) / motor_speed);
 8001596:	edd7 7a03 	vldr	s15, [r7, #12]
 800159a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001600 <FEB_CAN_RMS_getMaxTorque+0xe0>
 800159e:	ee67 6a87 	vmul.f32	s13, s15, s14
 80015a2:	ed97 7a02 	vldr	s14, [r7, #8]
 80015a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015aa:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001604 <FEB_CAN_RMS_getMaxTorque+0xe4>
 80015ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b6:	dd02      	ble.n	80015be <FEB_CAN_RMS_getMaxTorque+0x9e>
 80015b8:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8001604 <FEB_CAN_RMS_getMaxTorque+0xe4>
 80015bc:	e009      	b.n	80015d2 <FEB_CAN_RMS_getMaxTorque+0xb2>
 80015be:	edd7 7a03 	vldr	s15, [r7, #12]
 80015c2:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001600 <FEB_CAN_RMS_getMaxTorque+0xe0>
 80015c6:	ee67 6a87 	vmul.f32	s13, s15, s14
 80015ca:	ed97 7a02 	vldr	s14, [r7, #8]
 80015ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015d2:	edc7 7a01 	vstr	s15, [r7, #4]
	return maxTorque;
 80015d6:	687b      	ldr	r3, [r7, #4]
}
 80015d8:	ee07 3a90 	vmov	s15, r3
 80015dc:	eeb0 0a67 	vmov.f32	s0, s15
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	0f3cb3e5 	.word	0x0f3cb3e5
 80015ec:	3fbaceee 	.word	0x3fbaceee
 80015f0:	2000025c 	.word	0x2000025c
 80015f4:	66666667 	.word	0x66666667
 80015f8:	43f00000 	.word	0x43f00000
 80015fc:	43660000 	.word	0x43660000
 8001600:	425c0000 	.word	0x425c0000
 8001604:	43660000 	.word	0x43660000

08001608 <FEB_CAN_RMS_Torque>:

void FEB_CAN_RMS_Torque(void){
 8001608:	b580      	push	{r7, lr}
 800160a:	ed2d 8b02 	vpush	{d8}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
	FEB_SM_ST_t current_BMS_state = FEB_CAN_BMS_getState(); // TODO: FOR ALEX
 8001612:	f7ff fd7b 	bl	800110c <FEB_CAN_BMS_getState>
 8001616:	4603      	mov	r3, r0
 8001618:	73fb      	strb	r3, [r7, #15]
	float accPos = FEB_Normalized_Acc_Pedals();
 800161a:	f000 fa21 	bl	8001a60 <FEB_Normalized_Acc_Pedals>
 800161e:	ed87 0a02 	vstr	s0, [r7, #8]
	float brkPos = FEB_Normalized_getBrake();
 8001622:	f000 fb35 	bl	8001c90 <FEB_Normalized_getBrake>
 8001626:	ed87 0a01 	vstr	s0, [r7, #4]
	if (brkPos > BRAKE_POSITION_THRESH) // brake identified
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7fe ffac 	bl	8000588 <__aeabi_f2d>
 8001630:	a324      	add	r3, pc, #144	@ (adr r3, 80016c4 <FEB_CAN_RMS_Torque+0xbc>)
 8001632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001636:	f7ff fa8f 	bl	8000b58 <__aeabi_dcmpgt>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d01a      	beq.n	8001676 <FEB_CAN_RMS_Torque+0x6e>
	{
		if ((current_BMS_state == FEB_SM_ST_DRIVE_REGEN))
 8001640:	7bfb      	ldrb	r3, [r7, #15]
 8001642:	2b07      	cmp	r3, #7
 8001644:	d113      	bne.n	800166e <FEB_CAN_RMS_Torque+0x66>
		{
		    // Brake detected, regen allowed
			// Multiply by -1 to regen (opposite direction)
			RMSControl.torque = -1 * 10 * brkPos * FEB_CAN_RMS_getFilteredTorque_Regen();
 8001646:	edd7 7a01 	vldr	s15, [r7, #4]
 800164a:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 800164e:	ee27 8a87 	vmul.f32	s16, s15, s14
 8001652:	f7ff ff53 	bl	80014fc <FEB_CAN_RMS_getFilteredTorque_Regen>
 8001656:	eef0 7a40 	vmov.f32	s15, s0
 800165a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800165e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001662:	ee17 3a90 	vmov	r3, s15
 8001666:	b21a      	sxth	r2, r3
 8001668:	4b15      	ldr	r3, [pc, #84]	@ (80016c0 <FEB_CAN_RMS_Torque+0xb8>)
 800166a:	801a      	strh	r2, [r3, #0]
 800166c:	e020      	b.n	80016b0 <FEB_CAN_RMS_Torque+0xa8>
		}
		else
		{
			// Brake detected, but regen not allowed -> command 0 torque
			RMSControl.torque = 0;
 800166e:	4b14      	ldr	r3, [pc, #80]	@ (80016c0 <FEB_CAN_RMS_Torque+0xb8>)
 8001670:	2200      	movs	r2, #0
 8001672:	801a      	strh	r2, [r3, #0]
 8001674:	e01c      	b.n	80016b0 <FEB_CAN_RMS_Torque+0xa8>
		}
	}
	else
	{
	    if ((current_BMS_state == FEB_SM_ST_DRIVE) ||
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	2b06      	cmp	r3, #6
 800167a:	d002      	beq.n	8001682 <FEB_CAN_RMS_Torque+0x7a>
 800167c:	7bfb      	ldrb	r3, [r7, #15]
 800167e:	2b07      	cmp	r3, #7
 8001680:	d113      	bne.n	80016aa <FEB_CAN_RMS_Torque+0xa2>
	        (current_BMS_state == FEB_SM_ST_DRIVE_REGEN))
	    {
	        // No braking detected, send throttle command
    		RMSControl.torque = 10 * accPos * FEB_CAN_RMS_getMaxTorque();
 8001682:	edd7 7a02 	vldr	s15, [r7, #8]
 8001686:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800168a:	ee27 8a87 	vmul.f32	s16, s15, s14
 800168e:	f7ff ff47 	bl	8001520 <FEB_CAN_RMS_getMaxTorque>
 8001692:	eef0 7a40 	vmov.f32	s15, s0
 8001696:	ee68 7a27 	vmul.f32	s15, s16, s15
 800169a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800169e:	ee17 3a90 	vmov	r3, s15
 80016a2:	b21a      	sxth	r2, r3
 80016a4:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <FEB_CAN_RMS_Torque+0xb8>)
 80016a6:	801a      	strh	r2, [r3, #0]
 80016a8:	e002      	b.n	80016b0 <FEB_CAN_RMS_Torque+0xa8>
	    }
	    else
	    {
	        // No braking detected, but driving not allowed by BMS state
	        RMSControl.torque = 0;
 80016aa:	4b05      	ldr	r3, [pc, #20]	@ (80016c0 <FEB_CAN_RMS_Torque+0xb8>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	801a      	strh	r2, [r3, #0]
//	sprintf(buf, "Torque: %d\n", max_torque);
//	HAL_UART_Transmit(&huart2, buf, strlen(buf), 100);
//
//	RMSControl.torque= max_torque;

	FEB_CAN_RMS_Transmit_updateTorque();
 80016b0:	f000 f80c 	bl	80016cc <FEB_CAN_RMS_Transmit_updateTorque>
}
 80016b4:	bf00      	nop
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	ecbd 8b02 	vpop	{d8}
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000258 	.word	0x20000258
 80016c4:	33333333 	.word	0x33333333
 80016c8:	3fc33333 	.word	0x3fc33333

080016cc <FEB_CAN_RMS_Transmit_updateTorque>:

	// Select CAN msg to broadcast
	FEB_CAN_RMS_Transmit_paramBroadcast();
}

void FEB_CAN_RMS_Transmit_updateTorque(void) { //TODO: Create Custom Transmit function and update below call
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  //uint8_t message_data[8] = {RMSControl.torque & 0xFF, RMSControl.torque >> 8, 0, 0, 0, RMSControl.enabled, 0, 0};
	FEB_CAN_Tx_Header.DLC = 8;
 80016d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001750 <FEB_CAN_RMS_Transmit_updateTorque+0x84>)
 80016d2:	2208      	movs	r2, #8
 80016d4:	611a      	str	r2, [r3, #16]
	FEB_CAN_Tx_Header.StdId = 0x0C0; //ID for sending paramater messages for RMS
 80016d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001750 <FEB_CAN_RMS_Transmit_updateTorque+0x84>)
 80016d8:	22c0      	movs	r2, #192	@ 0xc0
 80016da:	601a      	str	r2, [r3, #0]
	FEB_CAN_Tx_Header.IDE = CAN_ID_STD;
 80016dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001750 <FEB_CAN_RMS_Transmit_updateTorque+0x84>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
	FEB_CAN_Tx_Header.RTR = CAN_RTR_DATA;
 80016e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001750 <FEB_CAN_RMS_Transmit_updateTorque+0x84>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	60da      	str	r2, [r3, #12]
	FEB_CAN_Tx_Header.TransmitGlobalTime = DISABLE;
 80016e8:	4b19      	ldr	r3, [pc, #100]	@ (8001750 <FEB_CAN_RMS_Transmit_updateTorque+0x84>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	751a      	strb	r2, [r3, #20]

	// Copy data to Tx buffer
	FEB_CAN_Tx_Data[0] = (uint8_t)RMSControl.torque & 0xFF;
 80016ee:	4b19      	ldr	r3, [pc, #100]	@ (8001754 <FEB_CAN_RMS_Transmit_updateTorque+0x88>)
 80016f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	4b18      	ldr	r3, [pc, #96]	@ (8001758 <FEB_CAN_RMS_Transmit_updateTorque+0x8c>)
 80016f8:	701a      	strb	r2, [r3, #0]
	FEB_CAN_Tx_Data[1] = (uint8_t)(RMSControl.torque >> 8) & 0xFF;
 80016fa:	4b16      	ldr	r3, [pc, #88]	@ (8001754 <FEB_CAN_RMS_Transmit_updateTorque+0x88>)
 80016fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001700:	121b      	asrs	r3, r3, #8
 8001702:	b21b      	sxth	r3, r3
 8001704:	b2da      	uxtb	r2, r3
 8001706:	4b14      	ldr	r3, [pc, #80]	@ (8001758 <FEB_CAN_RMS_Transmit_updateTorque+0x8c>)
 8001708:	705a      	strb	r2, [r3, #1]
	FEB_CAN_Tx_Data[2] = 0;
 800170a:	4b13      	ldr	r3, [pc, #76]	@ (8001758 <FEB_CAN_RMS_Transmit_updateTorque+0x8c>)
 800170c:	2200      	movs	r2, #0
 800170e:	709a      	strb	r2, [r3, #2]
	FEB_CAN_Tx_Data[3] = 0;
 8001710:	4b11      	ldr	r3, [pc, #68]	@ (8001758 <FEB_CAN_RMS_Transmit_updateTorque+0x8c>)
 8001712:	2200      	movs	r2, #0
 8001714:	70da      	strb	r2, [r3, #3]
	FEB_CAN_Tx_Data[4] = 1;
 8001716:	4b10      	ldr	r3, [pc, #64]	@ (8001758 <FEB_CAN_RMS_Transmit_updateTorque+0x8c>)
 8001718:	2201      	movs	r2, #1
 800171a:	711a      	strb	r2, [r3, #4]
	FEB_CAN_Tx_Data[5] = RMSControl.enabled;
 800171c:	4b0d      	ldr	r3, [pc, #52]	@ (8001754 <FEB_CAN_RMS_Transmit_updateTorque+0x88>)
 800171e:	789a      	ldrb	r2, [r3, #2]
 8001720:	4b0d      	ldr	r3, [pc, #52]	@ (8001758 <FEB_CAN_RMS_Transmit_updateTorque+0x8c>)
 8001722:	715a      	strb	r2, [r3, #5]
	FEB_CAN_Tx_Data[6] = 0;
 8001724:	4b0c      	ldr	r3, [pc, #48]	@ (8001758 <FEB_CAN_RMS_Transmit_updateTorque+0x8c>)
 8001726:	2200      	movs	r2, #0
 8001728:	719a      	strb	r2, [r3, #6]
	FEB_CAN_Tx_Data[7] = 0;
 800172a:	4b0b      	ldr	r3, [pc, #44]	@ (8001758 <FEB_CAN_RMS_Transmit_updateTorque+0x8c>)
 800172c:	2200      	movs	r2, #0
 800172e:	71da      	strb	r2, [r3, #7]

	// Delay until mailbox available
	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0) {}
 8001730:	bf00      	nop
 8001732:	480a      	ldr	r0, [pc, #40]	@ (800175c <FEB_CAN_RMS_Transmit_updateTorque+0x90>)
 8001734:	f002 f866 	bl	8003804 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0f9      	beq.n	8001732 <FEB_CAN_RMS_Transmit_updateTorque+0x66>

	// Add Tx data to mailbox
	if (HAL_CAN_AddTxMessage(&hcan1, &FEB_CAN_Tx_Header, FEB_CAN_Tx_Data, &FEB_CAN_Tx_Mailbox) != HAL_OK) {
 800173e:	4b08      	ldr	r3, [pc, #32]	@ (8001760 <FEB_CAN_RMS_Transmit_updateTorque+0x94>)
 8001740:	4a05      	ldr	r2, [pc, #20]	@ (8001758 <FEB_CAN_RMS_Transmit_updateTorque+0x8c>)
 8001742:	4903      	ldr	r1, [pc, #12]	@ (8001750 <FEB_CAN_RMS_Transmit_updateTorque+0x84>)
 8001744:	4805      	ldr	r0, [pc, #20]	@ (800175c <FEB_CAN_RMS_Transmit_updateTorque+0x90>)
 8001746:	f001 ff8d 	bl	8003664 <HAL_CAN_AddTxMessage>
		// Code Error - Shutdown
	}
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000204 	.word	0x20000204
 8001754:	20000258 	.word	0x20000258
 8001758:	20000238 	.word	0x20000238
 800175c:	200002b8 	.word	0x200002b8
 8001760:	20000248 	.word	0x20000248

08001764 <FEB_CAN_RMS_Filter_Config>:




uint8_t FEB_CAN_RMS_Filter_Config(CAN_HandleTypeDef* hcan, uint8_t FIFO_assignment, uint8_t filter_bank) {
 8001764:	b580      	push	{r7, lr}
 8001766:	b08e      	sub	sp, #56	@ 0x38
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	460b      	mov	r3, r1
 800176e:	70fb      	strb	r3, [r7, #3]
 8001770:	4613      	mov	r3, r2
 8001772:	70bb      	strb	r3, [r7, #2]
	uint16_t ids[] = {FEB_CAN_ID_RMS_VOLTAGE, FEB_CAN_ID_RMS_MOTOR};
 8001774:	4b1c      	ldr	r3, [pc, #112]	@ (80017e8 <FEB_CAN_RMS_Filter_Config+0x84>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	633b      	str	r3, [r7, #48]	@ 0x30

	for (uint8_t i = 0; i < 2; i++) {
 800177a:	2300      	movs	r3, #0
 800177c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001780:	e029      	b.n	80017d6 <FEB_CAN_RMS_Filter_Config+0x72>
		CAN_FilterTypeDef filter_config;

	    // Standard CAN - 2.0A - 11 bit
	    filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8001782:	2301      	movs	r3, #1
 8001784:	62bb      	str	r3, [r7, #40]	@ 0x28
		filter_config.FilterBank = filter_bank;
 8001786:	78bb      	ldrb	r3, [r7, #2]
 8001788:	61fb      	str	r3, [r7, #28]
		filter_config.FilterFIFOAssignment = FIFO_assignment;
 800178a:	78fb      	ldrb	r3, [r7, #3]
 800178c:	61bb      	str	r3, [r7, #24]
		filter_config.FilterIdHigh = ids[i] << 5;
 800178e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	3338      	adds	r3, #56	@ 0x38
 8001796:	443b      	add	r3, r7
 8001798:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 800179c:	015b      	lsls	r3, r3, #5
 800179e:	60bb      	str	r3, [r7, #8]
		filter_config.FilterIdLow = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
		filter_config.FilterMaskIdHigh = 0xFFE0;
 80017a4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80017a8:	613b      	str	r3, [r7, #16]
		filter_config.FilterMaskIdLow = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
		filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	623b      	str	r3, [r7, #32]
		filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 80017b2:	2301      	movs	r3, #1
 80017b4:	627b      	str	r3, [r7, #36]	@ 0x24
		filter_config.SlaveStartFilterBank = 27;
 80017b6:	231b      	movs	r3, #27
 80017b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    filter_bank++;
 80017ba:	78bb      	ldrb	r3, [r7, #2]
 80017bc:	3301      	adds	r3, #1
 80017be:	70bb      	strb	r3, [r7, #2]

		if (HAL_CAN_ConfigFilter(hcan, &filter_config) != HAL_OK) {
 80017c0:	f107 0308 	add.w	r3, r7, #8
 80017c4:	4619      	mov	r1, r3
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f001 fe28 	bl	800341c <HAL_CAN_ConfigFilter>
	for (uint8_t i = 0; i < 2; i++) {
 80017cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80017d0:	3301      	adds	r3, #1
 80017d2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80017d6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d9d1      	bls.n	8001782 <FEB_CAN_RMS_Filter_Config+0x1e>
			//Code Error - shutdown
		}
	}

	return filter_bank;
 80017de:	78bb      	ldrb	r3, [r7, #2]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3738      	adds	r7, #56	@ 0x38
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	08009750 	.word	0x08009750

080017ec <FEB_CAN_RMS_Store_Msg>:
		// Code Error - Shutdown
	}
}


void FEB_CAN_RMS_Store_Msg(CAN_RxHeaderTypeDef* pHeader, uint8_t *RxData) {
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
	switch (pHeader -> StdId){
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2ba5      	cmp	r3, #165	@ 0xa5
 80017fc:	d007      	beq.n	800180e <FEB_CAN_RMS_Store_Msg+0x22>
 80017fe:	2ba7      	cmp	r3, #167	@ 0xa7
 8001800:	d10c      	bne.n	800181c <FEB_CAN_RMS_Store_Msg+0x30>
		case FEB_CAN_ID_RMS_VOLTAGE:
			memcpy(&(RMS_MESSAGE.HV_Bus_Voltage), RxData, 2);
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	881b      	ldrh	r3, [r3, #0]
 8001806:	b29a      	uxth	r2, r3
 8001808:	4b07      	ldr	r3, [pc, #28]	@ (8001828 <FEB_CAN_RMS_Store_Msg+0x3c>)
 800180a:	801a      	strh	r2, [r3, #0]
			break;
 800180c:	e006      	b.n	800181c <FEB_CAN_RMS_Store_Msg+0x30>
		case FEB_CAN_ID_RMS_MOTOR:
			memcpy(&(RMS_MESSAGE.Motor_Speed), RxData+2, 2);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	3302      	adds	r3, #2
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	b29a      	uxth	r2, r3
 8001816:	4b04      	ldr	r3, [pc, #16]	@ (8001828 <FEB_CAN_RMS_Store_Msg+0x3c>)
 8001818:	805a      	strh	r2, [r3, #2]
			break;
 800181a:	bf00      	nop
	}
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	2000025c 	.word	0x2000025c

0800182c <FEB_Read_ADC1>:
bool currHigh = false;


// **************************************** Functions ****************************************

uint16_t FEB_Read_ADC1(uint32_t channel){
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig={0};
 8001834:	f107 0308 	add.w	r3, r7, #8
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
	sConfig.Channel = channel;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001846:	2301      	movs	r3, #1
 8001848:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800184a:	2307      	movs	r3, #7
 800184c:	613b      	str	r3, [r7, #16]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800184e:	f107 0308 	add.w	r3, r7, #8
 8001852:	4619      	mov	r1, r3
 8001854:	480b      	ldr	r0, [pc, #44]	@ (8001884 <FEB_Read_ADC1+0x58>)
 8001856:	f001 f9ed 	bl	8002c34 <HAL_ADC_ConfigChannel>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <FEB_Read_ADC1+0x38>
	{
	   Error_Handler();
 8001860:	f000 fce8 	bl	8002234 <Error_Handler>
	}

	HAL_ADC_Start(&hadc1);
 8001864:	4807      	ldr	r0, [pc, #28]	@ (8001884 <FEB_Read_ADC1+0x58>)
 8001866:	f001 f87b 	bl	8002960 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 800186a:	2164      	movs	r1, #100	@ 0x64
 800186c:	4805      	ldr	r0, [pc, #20]	@ (8001884 <FEB_Read_ADC1+0x58>)
 800186e:	f001 f949 	bl	8002b04 <HAL_ADC_PollForConversion>
	return (uint16_t)HAL_ADC_GetValue(&hadc1);
 8001872:	4804      	ldr	r0, [pc, #16]	@ (8001884 <FEB_Read_ADC1+0x58>)
 8001874:	f001 f9d1 	bl	8002c1a <HAL_ADC_GetValue>
 8001878:	4603      	mov	r3, r0
 800187a:	b29b      	uxth	r3, r3

}
 800187c:	4618      	mov	r0, r3
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000270 	.word	0x20000270

08001888 <FEB_HECS_update>:

void FEB_HECS_update(){
 8001888:	b580      	push	{r7, lr}
 800188a:	b0a2      	sub	sp, #136	@ 0x88
 800188c:	af00      	add	r7, sp, #0
	uint16_t current_value = FEB_Read_ADC1(HECS_SIGNAL);
 800188e:	200b      	movs	r0, #11
 8001890:	f7ff ffcc 	bl	800182c <FEB_Read_ADC1>
 8001894:	4603      	mov	r3, r0
 8001896:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	char buf[128];
	uint8_t buf_len;
	buf_len = sprintf(buf, "HECS Current:%d\n", current_value);
 800189a:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	4912      	ldr	r1, [pc, #72]	@ (80018ec <FEB_HECS_update+0x64>)
 80018a2:	4618      	mov	r0, r3
 80018a4:	f004 fdfa 	bl	800649c <siprintf>
 80018a8:	4603      	mov	r3, r0
 80018aa:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
	HAL_UART_Transmit(&huart2, buf, strlen(buf), HAL_MAX_DELAY);
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7fe fcfd 	bl	80002b0 <strlen>
 80018b6:	4603      	mov	r3, r0
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	1d39      	adds	r1, r7, #4
 80018bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018c0:	480b      	ldr	r0, [pc, #44]	@ (80018f0 <FEB_HECS_update+0x68>)
 80018c2:	f003 fdd7 	bl	8005474 <HAL_UART_Transmit>

	if (current_value >= HECS_CURRENT){ //checks if current is above value (to be determined)
 80018c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80018ca:	f5b3 6f3d 	cmp.w	r3, #3024	@ 0xbd0
 80018ce:	d903      	bls.n	80018d8 <FEB_HECS_update+0x50>
		currHigh = true;
 80018d0:	4b08      	ldr	r3, [pc, #32]	@ (80018f4 <FEB_HECS_update+0x6c>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	701a      	strb	r2, [r3, #0]
 80018d6:	e002      	b.n	80018de <FEB_HECS_update+0x56>
	}else{
		currHigh = false;
 80018d8:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <FEB_HECS_update+0x6c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
	}
	FEB_HECS_indicate();
 80018de:	f000 f80b 	bl	80018f8 <FEB_HECS_indicate>
}
 80018e2:	bf00      	nop
 80018e4:	3788      	adds	r7, #136	@ 0x88
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	08009754 	.word	0x08009754
 80018f0:	20000334 	.word	0x20000334
 80018f4:	20000260 	.word	0x20000260

080018f8 <FEB_HECS_indicate>:

void FEB_HECS_indicate(){ //sends GPIO output to HECS Indicator
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
	if (currHigh == true){
 80018fc:	4b08      	ldr	r3, [pc, #32]	@ (8001920 <FEB_HECS_indicate+0x28>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d005      	beq.n	8001910 <FEB_HECS_indicate+0x18>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // sets GPIO PA5 to high
 8001904:	2201      	movs	r2, #1
 8001906:	2120      	movs	r1, #32
 8001908:	4806      	ldr	r0, [pc, #24]	@ (8001924 <FEB_HECS_indicate+0x2c>)
 800190a:	f002 fdcd 	bl	80044a8 <HAL_GPIO_WritePin>

	}else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); //sets GPIPO PA5 to low
	}
//	HAL_Delay(1000);
}
 800190e:	e004      	b.n	800191a <FEB_HECS_indicate+0x22>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); //sets GPIPO PA5 to low
 8001910:	2200      	movs	r2, #0
 8001912:	2120      	movs	r1, #32
 8001914:	4803      	ldr	r0, [pc, #12]	@ (8001924 <FEB_HECS_indicate+0x2c>)
 8001916:	f002 fdc7 	bl	80044a8 <HAL_GPIO_WritePin>
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000260 	.word	0x20000260
 8001924:	40020000 	.word	0x40020000

08001928 <FEB_Main_Setup>:
char buf[128];
uint8_t buf_len; //stolen from Main_Setup (SN2)

// ********************************** Functions **********************************

void FEB_Main_Setup(void){
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
	HAL_ADCEx_InjectedStart(&hadc1); //@lovehate - where does this go
 800192c:	4804      	ldr	r0, [pc, #16]	@ (8001940 <FEB_Main_Setup+0x18>)
 800192e:	f001 fbaf 	bl	8003090 <HAL_ADCEx_InjectedStart>
//	FEB_Timer_Init();
//	FEB_TPS2482_Setup();
	FEB_CAN_Init(); //FEB_CAN_Init() // The transceiver must be connected otherwise you get sent into an infinite loop
 8001932:	f7ff fb21 	bl	8000f78 <FEB_CAN_Init>
	FEB_CAN_RMS_Setup();
 8001936:	f7ff fc61 	bl	80011fc <FEB_CAN_RMS_Setup>
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000270 	.word	0x20000270

08001944 <FEB_Main_While>:

void FEB_Main_While(void){
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
//	FEB_CAN_ICS_Transmit();
//
	FEB_SM_ST_t bms_state = FEB_CAN_BMS_getState();
 800194a:	f7ff fbdf 	bl	800110c <FEB_CAN_BMS_getState>
 800194e:	4603      	mov	r3, r0
 8001950:	71fb      	strb	r3, [r7, #7]


	if (FEB_Ready_To_Drive() && (bms_state == FEB_SM_ST_DRIVE || bms_state == FEB_SM_ST_DRIVE_REGEN)) {
 8001952:	f7ff fc47 	bl	80011e4 <FEB_Ready_To_Drive>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d00a      	beq.n	8001972 <FEB_Main_While+0x2e>
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	2b06      	cmp	r3, #6
 8001960:	d002      	beq.n	8001968 <FEB_Main_While+0x24>
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	2b07      	cmp	r3, #7
 8001966:	d104      	bne.n	8001972 <FEB_Main_While+0x2e>
		FEB_Normalized_updateAcc();
 8001968:	f000 f84e 	bl	8001a08 <FEB_Normalized_updateAcc>
		FEB_CAN_RMS_Process();
 800196c:	f7ff fc56 	bl	800121c <FEB_CAN_RMS_Process>
 8001970:	e003      	b.n	800197a <FEB_Main_While+0x36>
	} else {
		FEB_Normalized_setAcc0();
 8001972:	f000 f83b 	bl	80019ec <FEB_Normalized_setAcc0>
		FEB_CAN_RMS_Disable();
 8001976:	f7ff fc61 	bl	800123c <FEB_CAN_RMS_Disable>
	}
	FEB_HECS_update();
 800197a:	f7ff ff85 	bl	8001888 <FEB_HECS_update>
	FEB_Normalized_update_Brake();
 800197e:	f000 f995 	bl	8001cac <FEB_Normalized_update_Brake>

	FEB_CAN_RMS_Torque();
 8001982:	f7ff fe41 	bl	8001608 <FEB_CAN_RMS_Torque>
	FEB_Normalized_CAN_sendBrake();
 8001986:	f000 fa1d 	bl	8001dc4 <FEB_Normalized_CAN_sendBrake>

	HAL_Delay(10);
 800198a:	200a      	movs	r0, #10
 800198c:	f000 ff80 	bl	8002890 <HAL_Delay>
}
 8001990:	bf00      	nop
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <FEB_Read_ADC>:
float normalized_brake;
bool isImpl = false;

// **************************************** Functions ****************************************

uint16_t FEB_Read_ADC(uint32_t channel){
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig={0};
 80019a0:	f107 0308 	add.w	r3, r7, #8
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
	sConfig.Channel = channel;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80019b2:	2301      	movs	r3, #1
 80019b4:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80019b6:	2307      	movs	r3, #7
 80019b8:	613b      	str	r3, [r7, #16]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019ba:	f107 0308 	add.w	r3, r7, #8
 80019be:	4619      	mov	r1, r3
 80019c0:	4809      	ldr	r0, [pc, #36]	@ (80019e8 <FEB_Read_ADC+0x50>)
 80019c2:	f001 f937 	bl	8002c34 <HAL_ADC_ConfigChannel>
	{
//	   Error_Handler();
	}

	HAL_ADC_Start(&hadc1);
 80019c6:	4808      	ldr	r0, [pc, #32]	@ (80019e8 <FEB_Read_ADC+0x50>)
 80019c8:	f000 ffca 	bl	8002960 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 80019cc:	2164      	movs	r1, #100	@ 0x64
 80019ce:	4806      	ldr	r0, [pc, #24]	@ (80019e8 <FEB_Read_ADC+0x50>)
 80019d0:	f001 f898 	bl	8002b04 <HAL_ADC_PollForConversion>
	return (uint16_t)HAL_ADC_GetValue(&hadc1);
 80019d4:	4804      	ldr	r0, [pc, #16]	@ (80019e8 <FEB_Read_ADC+0x50>)
 80019d6:	f001 f920 	bl	8002c1a <HAL_ADC_GetValue>
 80019da:	4603      	mov	r3, r0
 80019dc:	b29b      	uxth	r3, r3

}
 80019de:	4618      	mov	r0, r3
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000270 	.word	0x20000270

080019ec <FEB_Normalized_setAcc0>:

float FEB_Normalized_getAcc(){
	return normalized_acc;
}

void FEB_Normalized_setAcc0(){
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
	normalized_acc = 0.0;
 80019f0:	4b04      	ldr	r3, [pc, #16]	@ (8001a04 <FEB_Normalized_setAcc0+0x18>)
 80019f2:	f04f 0200 	mov.w	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	20000264 	.word	0x20000264

08001a08 <FEB_Normalized_updateAcc>:
	char buf1[128];
	sprintf(buf1, "[SENSOR] Brake Position: %d.%d%%\n", brake_pedal_position_int1, brake_pedal_position_int2);
	HAL_UART_Transmit(&huart2,(uint8_t *)buf1, strlen(buf1), HAL_MAX_DELAY);
}

void FEB_Normalized_updateAcc(){
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b0a2      	sub	sp, #136	@ 0x88
 8001a0c:	af00      	add	r7, sp, #0
	normalized_acc = FEB_Normalized_Acc_Pedals();
 8001a0e:	f000 f827 	bl	8001a60 <FEB_Normalized_Acc_Pedals>
 8001a12:	eef0 7a40 	vmov.f32	s15, s0
 8001a16:	4b0f      	ldr	r3, [pc, #60]	@ (8001a54 <FEB_Normalized_updateAcc+0x4c>)
 8001a18:	edc3 7a00 	vstr	s15, [r3]

	char buf[128];
	uint8_t buf_len;
	buf_len = sprintf(buf, "normalized_acc: %f\n", normalized_acc);
 8001a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8001a54 <FEB_Normalized_updateAcc+0x4c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7fe fdb1 	bl	8000588 <__aeabi_f2d>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	1d38      	adds	r0, r7, #4
 8001a2c:	490a      	ldr	r1, [pc, #40]	@ (8001a58 <FEB_Normalized_updateAcc+0x50>)
 8001a2e:	f004 fd35 	bl	800649c <siprintf>
 8001a32:	4603      	mov	r3, r0
 8001a34:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
	HAL_UART_Transmit(&huart2,(uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 8001a38:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	1d39      	adds	r1, r7, #4
 8001a40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a44:	4805      	ldr	r0, [pc, #20]	@ (8001a5c <FEB_Normalized_updateAcc+0x54>)
 8001a46:	f003 fd15 	bl	8005474 <HAL_UART_Transmit>

}
 8001a4a:	bf00      	nop
 8001a4c:	3788      	adds	r7, #136	@ 0x88
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000264 	.word	0x20000264
 8001a58:	08009860 	.word	0x08009860
 8001a5c:	20000334 	.word	0x20000334

08001a60 <FEB_Normalized_Acc_Pedals>:

float FEB_Normalized_Acc_Pedals() {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b0a6      	sub	sp, #152	@ 0x98
 8001a64:	af00      	add	r7, sp, #0
	// raw ADC readings of the two acc pedal sensors
	uint16_t acc_pedal_1 = FEB_Read_ADC(ACC_PEDAL_1);
 8001a66:	2001      	movs	r0, #1
 8001a68:	f7ff ff96 	bl	8001998 <FEB_Read_ADC>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
	uint16_t acc_pedal_2 = FEB_Read_ADC(ACC_PEDAL_2);
 8001a72:	2000      	movs	r0, #0
 8001a74:	f7ff ff90 	bl	8001998 <FEB_Read_ADC>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
	char buf[128];
	uint8_t buf_len;
	buf_len = sprintf(buf, "acc1:%d acc2:%d\n", acc_pedal_1, acc_pedal_2);
 8001a7e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	@ 0x96
 8001a82:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8001a86:	1d38      	adds	r0, r7, #4
 8001a88:	497b      	ldr	r1, [pc, #492]	@ (8001c78 <FEB_Normalized_Acc_Pedals+0x218>)
 8001a8a:	f004 fd07 	bl	800649c <siprintf>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
//	HAL_UART_Transmit(&huart2,(uint8_t *)buf, buf_len, HAL_MAX_DELAY);


	// check implausibility for shorting. TODO: check if this fulfills the short circuiting rules.
	if (acc_pedal_1 < ACC_PEDAL_1_END - 20 || acc_pedal_1 > ACC_PEDAL_1_START + 20
 8001a94:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8001a98:	f240 5233 	movw	r2, #1331	@ 0x533
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d910      	bls.n	8001ac2 <FEB_Normalized_Acc_Pedals+0x62>
 8001aa0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8001aa4:	f240 6201 	movw	r2, #1537	@ 0x601
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d80a      	bhi.n	8001ac2 <FEB_Normalized_Acc_Pedals+0x62>
			|| acc_pedal_2 < ACC_PEDAL_2_START - 50 || acc_pedal_2 > ACC_PEDAL_2_END + 50) {
 8001aac:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8001ab0:	f240 3201 	movw	r2, #769	@ 0x301
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d904      	bls.n	8001ac2 <FEB_Normalized_Acc_Pedals+0x62>
 8001ab8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8001abc:	f5b3 6fe8 	cmp.w	r3, #1856	@ 0x740
 8001ac0:	d905      	bls.n	8001ace <FEB_Normalized_Acc_Pedals+0x6e>
		isImpl = true;
 8001ac2:	4b6e      	ldr	r3, [pc, #440]	@ (8001c7c <FEB_Normalized_Acc_Pedals+0x21c>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	701a      	strb	r2, [r3, #0]
		return 0.0;
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	e0b7      	b.n	8001c3e <FEB_Normalized_Acc_Pedals+0x1de>
	}

	//convert to % travel
	// sensor 1 has positive slope
	float ped1_normalized = (acc_pedal_1 - ACC_PEDAL_1_START)/ (ACC_PEDAL_1_END - ACC_PEDAL_1_START);
 8001ace:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe fd46 	bl	8000564 <__aeabi_i2d>
 8001ad8:	a35d      	add	r3, pc, #372	@ (adr r3, 8001c50 <FEB_Normalized_Acc_Pedals+0x1f0>)
 8001ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ade:	f7fe fbf3 	bl	80002c8 <__aeabi_dsub>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4619      	mov	r1, r3
 8001aea:	a35b      	add	r3, pc, #364	@ (adr r3, 8001c58 <FEB_Normalized_Acc_Pedals+0x1f8>)
 8001aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af0:	f7fe fecc 	bl	800088c <__aeabi_ddiv>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4610      	mov	r0, r2
 8001afa:	4619      	mov	r1, r3
 8001afc:	f7ff f874 	bl	8000be8 <__aeabi_d2f>
 8001b00:	4603      	mov	r3, r0
 8001b02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	// sensor 2 has negative slope
	float ped2_normalized = (acc_pedal_2 - ACC_PEDAL_2_START) / (ACC_PEDAL_2_END - ACC_PEDAL_2_START);
 8001b06:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fd2a 	bl	8000564 <__aeabi_i2d>
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	4b5a      	ldr	r3, [pc, #360]	@ (8001c80 <FEB_Normalized_Acc_Pedals+0x220>)
 8001b16:	f7fe fbd7 	bl	80002c8 <__aeabi_dsub>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4610      	mov	r0, r2
 8001b20:	4619      	mov	r1, r3
 8001b22:	f04f 0200 	mov.w	r2, #0
 8001b26:	4b57      	ldr	r3, [pc, #348]	@ (8001c84 <FEB_Normalized_Acc_Pedals+0x224>)
 8001b28:	f7fe feb0 	bl	800088c <__aeabi_ddiv>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4610      	mov	r0, r2
 8001b32:	4619      	mov	r1, r3
 8001b34:	f7ff f858 	bl	8000be8 <__aeabi_d2f>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	// sensor measurements mismatch by more than 10%
	if(abs(ped1_normalized - ped2_normalized) > 0.1 ){
 8001b3e:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8001b42:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8001b46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b4e:	ee17 3a90 	vmov	r3, s15
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	bfb8      	it	lt
 8001b56:	425b      	neglt	r3, r3
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	dd05      	ble.n	8001b68 <FEB_Normalized_Acc_Pedals+0x108>
		isImpl = true;
 8001b5c:	4b47      	ldr	r3, [pc, #284]	@ (8001c7c <FEB_Normalized_Acc_Pedals+0x21c>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	701a      	strb	r2, [r3, #0]
		return 0.0;
 8001b62:	f04f 0300 	mov.w	r3, #0
 8001b66:	e06a      	b.n	8001c3e <FEB_Normalized_Acc_Pedals+0x1de>
	}

	float final_normalized = 0.5*(ped1_normalized + ped2_normalized);
 8001b68:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8001b6c:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8001b70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b74:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001b78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b7c:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84


//	 Implausiblity check if both pedals are stepped
	if (normalized_brake > 0.2 && normalized_acc > 0.1) {
 8001b80:	4b41      	ldr	r3, [pc, #260]	@ (8001c88 <FEB_Normalized_Acc_Pedals+0x228>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7fe fcff 	bl	8000588 <__aeabi_f2d>
 8001b8a:	a335      	add	r3, pc, #212	@ (adr r3, 8001c60 <FEB_Normalized_Acc_Pedals+0x200>)
 8001b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b90:	f7fe ffe2 	bl	8000b58 <__aeabi_dcmpgt>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00f      	beq.n	8001bba <FEB_Normalized_Acc_Pedals+0x15a>
 8001b9a:	4b3c      	ldr	r3, [pc, #240]	@ (8001c8c <FEB_Normalized_Acc_Pedals+0x22c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fcf2 	bl	8000588 <__aeabi_f2d>
 8001ba4:	a330      	add	r3, pc, #192	@ (adr r3, 8001c68 <FEB_Normalized_Acc_Pedals+0x208>)
 8001ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001baa:	f7fe ffd5 	bl	8000b58 <__aeabi_dcmpgt>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d002      	beq.n	8001bba <FEB_Normalized_Acc_Pedals+0x15a>
		isImpl = true;
 8001bb4:	4b31      	ldr	r3, [pc, #196]	@ (8001c7c <FEB_Normalized_Acc_Pedals+0x21c>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	701a      	strb	r2, [r3, #0]
	}

	// recover from implausibility if acc pedal is not 5% less
	if (final_normalized < 0.05 && isImpl) {
 8001bba:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8001bbe:	f7fe fce3 	bl	8000588 <__aeabi_f2d>
 8001bc2:	a32b      	add	r3, pc, #172	@ (adr r3, 8001c70 <FEB_Normalized_Acc_Pedals+0x210>)
 8001bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc8:	f7fe ffa8 	bl	8000b1c <__aeabi_dcmplt>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d006      	beq.n	8001be0 <FEB_Normalized_Acc_Pedals+0x180>
 8001bd2:	4b2a      	ldr	r3, [pc, #168]	@ (8001c7c <FEB_Normalized_Acc_Pedals+0x21c>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d002      	beq.n	8001be0 <FEB_Normalized_Acc_Pedals+0x180>
		isImpl = false;
 8001bda:	4b28      	ldr	r3, [pc, #160]	@ (8001c7c <FEB_Normalized_Acc_Pedals+0x21c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	701a      	strb	r2, [r3, #0]
	}

	if (!isImpl) {
 8001be0:	4b26      	ldr	r3, [pc, #152]	@ (8001c7c <FEB_Normalized_Acc_Pedals+0x21c>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	f083 0301 	eor.w	r3, r3, #1
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d025      	beq.n	8001c3a <FEB_Normalized_Acc_Pedals+0x1da>
		final_normalized = final_normalized > 1 ? 1 : final_normalized;
 8001bee:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8001bf2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001bf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfe:	dd02      	ble.n	8001c06 <FEB_Normalized_Acc_Pedals+0x1a6>
 8001c00:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001c04:	e001      	b.n	8001c0a <FEB_Normalized_Acc_Pedals+0x1aa>
 8001c06:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		final_normalized = final_normalized < 0.05 ? 0 : final_normalized;
 8001c0e:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8001c12:	f7fe fcb9 	bl	8000588 <__aeabi_f2d>
 8001c16:	a316      	add	r3, pc, #88	@ (adr r3, 8001c70 <FEB_Normalized_Acc_Pedals+0x210>)
 8001c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1c:	f7fe ff7e 	bl	8000b1c <__aeabi_dcmplt>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d002      	beq.n	8001c2c <FEB_Normalized_Acc_Pedals+0x1cc>
 8001c26:	f04f 0300 	mov.w	r3, #0
 8001c2a:	e001      	b.n	8001c30 <FEB_Normalized_Acc_Pedals+0x1d0>
 8001c2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		return final_normalized;
 8001c34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c38:	e001      	b.n	8001c3e <FEB_Normalized_Acc_Pedals+0x1de>
	} else {
		return 0.0;
 8001c3a:	f04f 0300 	mov.w	r3, #0
	}
}
 8001c3e:	ee07 3a90 	vmov	s15, r3
 8001c42:	eeb0 0a67 	vmov.f32	s0, s15
 8001c46:	3798      	adds	r7, #152	@ 0x98
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	f3af 8000 	nop.w
 8001c50:	00000000 	.word	0x00000000
 8001c54:	4097b400 	.word	0x4097b400
 8001c58:	00000000 	.word	0x00000000
 8001c5c:	c064a000 	.word	0xc064a000
 8001c60:	9999999a 	.word	0x9999999a
 8001c64:	3fc99999 	.word	0x3fc99999
 8001c68:	9999999a 	.word	0x9999999a
 8001c6c:	3fb99999 	.word	0x3fb99999
 8001c70:	9999999a 	.word	0x9999999a
 8001c74:	3fa99999 	.word	0x3fa99999
 8001c78:	08009874 	.word	0x08009874
 8001c7c:	2000026c 	.word	0x2000026c
 8001c80:	4089a000 	.word	0x4089a000
 8001c84:	408ed000 	.word	0x408ed000
 8001c88:	20000268 	.word	0x20000268
 8001c8c:	20000264 	.word	0x20000264

08001c90 <FEB_Normalized_getBrake>:

float FEB_Normalized_getBrake() {
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
	return normalized_brake;
 8001c94:	4b04      	ldr	r3, [pc, #16]	@ (8001ca8 <FEB_Normalized_getBrake+0x18>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	ee07 3a90 	vmov	s15, r3
}
 8001c9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	20000268 	.word	0x20000268

08001cac <FEB_Normalized_update_Brake>:

void FEB_Normalized_update_Brake() {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
	normalized_brake = FEB_Normalized_Brake_Pedals();
 8001cb0:	f000 f80a 	bl	8001cc8 <FEB_Normalized_Brake_Pedals>
 8001cb4:	eef0 7a40 	vmov.f32	s15, s0
 8001cb8:	4b02      	ldr	r3, [pc, #8]	@ (8001cc4 <FEB_Normalized_update_Brake+0x18>)
 8001cba:	edc3 7a00 	vstr	s15, [r3]
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000268 	.word	0x20000268

08001cc8 <FEB_Normalized_Brake_Pedals>:

float FEB_Normalized_Brake_Pedals() {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b0a4      	sub	sp, #144	@ 0x90
 8001ccc:	af00      	add	r7, sp, #0
	//TODO: This might need to change based on which sensor ends up getting used.
	uint16_t brake_pres_2 =  FEB_Read_ADC(BRAKE_PRESS_2);   //HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8001cce:	2006      	movs	r0, #6
 8001cd0:	f7ff fe62 	bl	8001998 <FEB_Read_ADC>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e

//	HAL_UART_Transmit(&huart2,(uint8_t *)buf, buf_len, HAL_MAX_DELAY);

	float final_normalized = (brake_pres_2 - PRESSURE_START)/ (PRESSURE_END - PRESSURE_START);
 8001cda:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7fe fc40 	bl	8000564 <__aeabi_i2d>
 8001ce4:	a335      	add	r3, pc, #212	@ (adr r3, 8001dbc <FEB_Normalized_Brake_Pedals+0xf4>)
 8001ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cea:	f7fe faed 	bl	80002c8 <__aeabi_dsub>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	4b2d      	ldr	r3, [pc, #180]	@ (8001db0 <FEB_Normalized_Brake_Pedals+0xe8>)
 8001cfc:	f7fe fdc6 	bl	800088c <__aeabi_ddiv>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4610      	mov	r0, r2
 8001d06:	4619      	mov	r1, r3
 8001d08:	f7fe ff6e 	bl	8000be8 <__aeabi_d2f>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	final_normalized = final_normalized > 1 ? 1 : final_normalized;
 8001d12:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8001d16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001d1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d22:	dd02      	ble.n	8001d2a <FEB_Normalized_Brake_Pedals+0x62>
 8001d24:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001d28:	e001      	b.n	8001d2e <FEB_Normalized_Brake_Pedals+0x66>
 8001d2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	final_normalized = final_normalized < 0.05 ? 0 : final_normalized;
 8001d32:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8001d36:	f7fe fc27 	bl	8000588 <__aeabi_f2d>
 8001d3a:	a31b      	add	r3, pc, #108	@ (adr r3, 8001da8 <FEB_Normalized_Brake_Pedals+0xe0>)
 8001d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d40:	f7fe feec 	bl	8000b1c <__aeabi_dcmplt>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <FEB_Normalized_Brake_Pedals+0x88>
 8001d4a:	f04f 0300 	mov.w	r3, #0
 8001d4e:	e001      	b.n	8001d54 <FEB_Normalized_Brake_Pedals+0x8c>
 8001d50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88


	if (brake_pres_2 < PRESSURE_START-20) {
 8001d58:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8001d5c:	2ba8      	cmp	r3, #168	@ 0xa8
 8001d5e:	d802      	bhi.n	8001d66 <FEB_Normalized_Brake_Pedals+0x9e>
		return 0.0;
 8001d60:	f04f 0300 	mov.w	r3, #0
 8001d64:	e017      	b.n	8001d96 <FEB_Normalized_Brake_Pedals+0xce>
	}

	char buf[128];
	uint8_t buf_len;
	buf_len = sprintf(buf, "brake_Pos: %f\n", final_normalized);
 8001d66:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8001d6a:	f7fe fc0d 	bl	8000588 <__aeabi_f2d>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	1d38      	adds	r0, r7, #4
 8001d74:	490f      	ldr	r1, [pc, #60]	@ (8001db4 <FEB_Normalized_Brake_Pedals+0xec>)
 8001d76:	f004 fb91 	bl	800649c <siprintf>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

	HAL_UART_Transmit(&huart2,(uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 8001d80:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	1d39      	adds	r1, r7, #4
 8001d88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d8c:	480a      	ldr	r0, [pc, #40]	@ (8001db8 <FEB_Normalized_Brake_Pedals+0xf0>)
 8001d8e:	f003 fb71 	bl	8005474 <HAL_UART_Transmit>

	return final_normalized;
 8001d92:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 8001d96:	ee07 3a90 	vmov	s15, r3
 8001d9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d9e:	3790      	adds	r7, #144	@ 0x90
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	f3af 8000 	nop.w
 8001da8:	9999999a 	.word	0x9999999a
 8001dac:	3fa99999 	.word	0x3fa99999
 8001db0:	408a2000 	.word	0x408a2000
 8001db4:	08009888 	.word	0x08009888
 8001db8:	20000334 	.word	0x20000334
 8001dbc:	00000000 	.word	0x00000000
 8001dc0:	4067a000 	.word	0x4067a000

08001dc4 <FEB_Normalized_CAN_sendBrake>:

void FEB_Normalized_CAN_sendBrake() {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b0a4      	sub	sp, #144	@ 0x90
 8001dc8:	af00      	add	r7, sp, #0
	// Initialize transmission header
	FEB_CAN_Tx_Header.DLC = 2;
 8001dca:	4b27      	ldr	r3, [pc, #156]	@ (8001e68 <FEB_Normalized_CAN_sendBrake+0xa4>)
 8001dcc:	2202      	movs	r2, #2
 8001dce:	611a      	str	r2, [r3, #16]
	FEB_CAN_Tx_Header.StdId = FEB_CAN_ID_APPS_BRAKE_PEDAL;
 8001dd0:	4b25      	ldr	r3, [pc, #148]	@ (8001e68 <FEB_Normalized_CAN_sendBrake+0xa4>)
 8001dd2:	2209      	movs	r2, #9
 8001dd4:	601a      	str	r2, [r3, #0]
	FEB_CAN_Tx_Header.IDE = CAN_ID_STD;
 8001dd6:	4b24      	ldr	r3, [pc, #144]	@ (8001e68 <FEB_Normalized_CAN_sendBrake+0xa4>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	609a      	str	r2, [r3, #8]
	FEB_CAN_Tx_Header.RTR = CAN_RTR_DATA;
 8001ddc:	4b22      	ldr	r3, [pc, #136]	@ (8001e68 <FEB_Normalized_CAN_sendBrake+0xa4>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	60da      	str	r2, [r3, #12]
	FEB_CAN_Tx_Header.TransmitGlobalTime = DISABLE;
 8001de2:	4b21      	ldr	r3, [pc, #132]	@ (8001e68 <FEB_Normalized_CAN_sendBrake+0xa4>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	751a      	strb	r2, [r3, #20]

	// Copy data to Tx buffer. This might be incorrect. It's possible you have to do some bit shifting
//	memcpy(FEB_CAN_Tx_Data, &normalized_brake, sizeof(float));
	uint8_t converted_brake_val = (uint8_t)(normalized_brake * 100);
 8001de8:	4b20      	ldr	r3, [pc, #128]	@ (8001e6c <FEB_Normalized_CAN_sendBrake+0xa8>)
 8001dea:	edd3 7a00 	vldr	s15, [r3]
 8001dee:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001e70 <FEB_Normalized_CAN_sendBrake+0xac>
 8001df2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001df6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dfa:	edc7 7a01 	vstr	s15, [r7, #4]
 8001dfe:	793b      	ldrb	r3, [r7, #4]
 8001e00:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

	FEB_CAN_Tx_Data[0] = converted_brake_val;
 8001e04:	4a1b      	ldr	r2, [pc, #108]	@ (8001e74 <FEB_Normalized_CAN_sendBrake+0xb0>)
 8001e06:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001e0a:	7013      	strb	r3, [r2, #0]

	//Debug to see the position of the Brake position sensor


	// Delay until mailbox available
	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0) {}
 8001e0c:	bf00      	nop
 8001e0e:	481a      	ldr	r0, [pc, #104]	@ (8001e78 <FEB_Normalized_CAN_sendBrake+0xb4>)
 8001e10:	f001 fcf8 	bl	8003804 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0f9      	beq.n	8001e0e <FEB_Normalized_CAN_sendBrake+0x4a>
//
	// Add Tx data to mailbox
	if (HAL_CAN_AddTxMessage(&hcan1, &FEB_CAN_Tx_Header, FEB_CAN_Tx_Data, &FEB_CAN_Tx_Mailbox) != HAL_OK) {
 8001e1a:	4b18      	ldr	r3, [pc, #96]	@ (8001e7c <FEB_Normalized_CAN_sendBrake+0xb8>)
 8001e1c:	4a15      	ldr	r2, [pc, #84]	@ (8001e74 <FEB_Normalized_CAN_sendBrake+0xb0>)
 8001e1e:	4912      	ldr	r1, [pc, #72]	@ (8001e68 <FEB_Normalized_CAN_sendBrake+0xa4>)
 8001e20:	4815      	ldr	r0, [pc, #84]	@ (8001e78 <FEB_Normalized_CAN_sendBrake+0xb4>)
 8001e22:	f001 fc1f 	bl	8003664 <HAL_CAN_AddTxMessage>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d018      	beq.n	8001e5e <FEB_Normalized_CAN_sendBrake+0x9a>
		//error - shutdown
		char buf[128];
		uint8_t buf_len;
		buf_len = sprintf(buf, "CAN MESSAGE FAIL TO SEND: %f\n", normalized_brake);
 8001e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e6c <FEB_Normalized_CAN_sendBrake+0xa8>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe fba9 	bl	8000588 <__aeabi_f2d>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	f107 000c 	add.w	r0, r7, #12
 8001e3e:	4910      	ldr	r1, [pc, #64]	@ (8001e80 <FEB_Normalized_CAN_sendBrake+0xbc>)
 8001e40:	f004 fb2c 	bl	800649c <siprintf>
 8001e44:	4603      	mov	r3, r0
 8001e46:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
		HAL_UART_Transmit(&huart2,(uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 8001e4a:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	f107 010c 	add.w	r1, r7, #12
 8001e54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e58:	480a      	ldr	r0, [pc, #40]	@ (8001e84 <FEB_Normalized_CAN_sendBrake+0xc0>)
 8001e5a:	f003 fb0b 	bl	8005474 <HAL_UART_Transmit>
	}

}
 8001e5e:	bf00      	nop
 8001e60:	3790      	adds	r7, #144	@ 0x90
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000204 	.word	0x20000204
 8001e6c:	20000268 	.word	0x20000268
 8001e70:	42c80000 	.word	0x42c80000
 8001e74:	20000238 	.word	0x20000238
 8001e78:	200002b8 	.word	0x200002b8
 8001e7c:	20000248 	.word	0x20000248
 8001e80:	08009898 	.word	0x08009898
 8001e84:	20000334 	.word	0x20000334

08001e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e8c:	f000 fc8e 	bl	80027ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e90:	f000 f810 	bl	8001eb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e94:	f000 f960 	bl	8002158 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001e98:	f000 f934 	bl	8002104 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8001e9c:	f000 f8ce 	bl	800203c <MX_CAN1_Init>
  MX_I2C1_Init();
 8001ea0:	f000 f902 	bl	80020a8 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001ea4:	f000 f878 	bl	8001f98 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  FEB_Main_Setup();
 8001ea8:	f7ff fd3e 	bl	8001928 <FEB_Main_Setup>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  FEB_Main_While();
 8001eac:	f7ff fd4a 	bl	8001944 <FEB_Main_While>
 8001eb0:	e7fc      	b.n	8001eac <main+0x24>
	...

08001eb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b094      	sub	sp, #80	@ 0x50
 8001eb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eba:	f107 031c 	add.w	r3, r7, #28
 8001ebe:	2234      	movs	r2, #52	@ 0x34
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f004 fbcc 	bl	8006660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ec8:	f107 0308 	add.w	r3, r7, #8
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
 8001ed6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed8:	2300      	movs	r3, #0
 8001eda:	607b      	str	r3, [r7, #4]
 8001edc:	4b2c      	ldr	r3, [pc, #176]	@ (8001f90 <SystemClock_Config+0xdc>)
 8001ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee0:	4a2b      	ldr	r2, [pc, #172]	@ (8001f90 <SystemClock_Config+0xdc>)
 8001ee2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ee6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ee8:	4b29      	ldr	r3, [pc, #164]	@ (8001f90 <SystemClock_Config+0xdc>)
 8001eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef0:	607b      	str	r3, [r7, #4]
 8001ef2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	603b      	str	r3, [r7, #0]
 8001ef8:	4b26      	ldr	r3, [pc, #152]	@ (8001f94 <SystemClock_Config+0xe0>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a25      	ldr	r2, [pc, #148]	@ (8001f94 <SystemClock_Config+0xe0>)
 8001efe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f02:	6013      	str	r3, [r2, #0]
 8001f04:	4b23      	ldr	r3, [pc, #140]	@ (8001f94 <SystemClock_Config+0xe0>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f0c:	603b      	str	r3, [r7, #0]
 8001f0e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f10:	2301      	movs	r3, #1
 8001f12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f18:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f1e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001f22:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f24:	2304      	movs	r3, #4
 8001f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001f28:	23b4      	movs	r3, #180	@ 0xb4
 8001f2a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001f30:	2302      	movs	r3, #2
 8001f32:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f34:	2302      	movs	r3, #2
 8001f36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f38:	f107 031c 	add.w	r3, r7, #28
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f002 ffab 	bl	8004e98 <HAL_RCC_OscConfig>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001f48:	f000 f974 	bl	8002234 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001f4c:	f002 fc0a 	bl	8004764 <HAL_PWREx_EnableOverDrive>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001f56:	f000 f96d 	bl	8002234 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f5a:	230f      	movs	r3, #15
 8001f5c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f66:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f70:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f72:	f107 0308 	add.w	r3, r7, #8
 8001f76:	2105      	movs	r1, #5
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f002 fc43 	bl	8004804 <HAL_RCC_ClockConfig>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001f84:	f000 f956 	bl	8002234 <Error_Handler>
  }
}
 8001f88:	bf00      	nop
 8001f8a:	3750      	adds	r7, #80	@ 0x50
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40023800 	.word	0x40023800
 8001f94:	40007000 	.word	0x40007000

08001f98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f9e:	463b      	mov	r3, r7
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001faa:	4b21      	ldr	r3, [pc, #132]	@ (8002030 <MX_ADC1_Init+0x98>)
 8001fac:	4a21      	ldr	r2, [pc, #132]	@ (8002034 <MX_ADC1_Init+0x9c>)
 8001fae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8002030 <MX_ADC1_Init+0x98>)
 8001fb2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001fb6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8002030 <MX_ADC1_Init+0x98>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001fbe:	4b1c      	ldr	r3, [pc, #112]	@ (8002030 <MX_ADC1_Init+0x98>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001fc4:	4b1a      	ldr	r3, [pc, #104]	@ (8002030 <MX_ADC1_Init+0x98>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fca:	4b19      	ldr	r3, [pc, #100]	@ (8002030 <MX_ADC1_Init+0x98>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fd2:	4b17      	ldr	r3, [pc, #92]	@ (8002030 <MX_ADC1_Init+0x98>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fd8:	4b15      	ldr	r3, [pc, #84]	@ (8002030 <MX_ADC1_Init+0x98>)
 8001fda:	4a17      	ldr	r2, [pc, #92]	@ (8002038 <MX_ADC1_Init+0xa0>)
 8001fdc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fde:	4b14      	ldr	r3, [pc, #80]	@ (8002030 <MX_ADC1_Init+0x98>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001fe4:	4b12      	ldr	r3, [pc, #72]	@ (8002030 <MX_ADC1_Init+0x98>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001fea:	4b11      	ldr	r3, [pc, #68]	@ (8002030 <MX_ADC1_Init+0x98>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	@ (8002030 <MX_ADC1_Init+0x98>)
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ff8:	480d      	ldr	r0, [pc, #52]	@ (8002030 <MX_ADC1_Init+0x98>)
 8001ffa:	f000 fc6d 	bl	80028d8 <HAL_ADC_Init>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002004:	f000 f916 	bl	8002234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002008:	2300      	movs	r3, #0
 800200a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800200c:	2301      	movs	r3, #1
 800200e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002010:	2300      	movs	r3, #0
 8002012:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002014:	463b      	mov	r3, r7
 8002016:	4619      	mov	r1, r3
 8002018:	4805      	ldr	r0, [pc, #20]	@ (8002030 <MX_ADC1_Init+0x98>)
 800201a:	f000 fe0b 	bl	8002c34 <HAL_ADC_ConfigChannel>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002024:	f000 f906 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002028:	bf00      	nop
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20000270 	.word	0x20000270
 8002034:	40012000 	.word	0x40012000
 8002038:	0f000001 	.word	0x0f000001

0800203c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002040:	4b17      	ldr	r3, [pc, #92]	@ (80020a0 <MX_CAN1_Init+0x64>)
 8002042:	4a18      	ldr	r2, [pc, #96]	@ (80020a4 <MX_CAN1_Init+0x68>)
 8002044:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8002046:	4b16      	ldr	r3, [pc, #88]	@ (80020a0 <MX_CAN1_Init+0x64>)
 8002048:	2212      	movs	r2, #18
 800204a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800204c:	4b14      	ldr	r3, [pc, #80]	@ (80020a0 <MX_CAN1_Init+0x64>)
 800204e:	2200      	movs	r2, #0
 8002050:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002052:	4b13      	ldr	r3, [pc, #76]	@ (80020a0 <MX_CAN1_Init+0x64>)
 8002054:	2200      	movs	r2, #0
 8002056:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8002058:	4b11      	ldr	r3, [pc, #68]	@ (80020a0 <MX_CAN1_Init+0x64>)
 800205a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800205e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002060:	4b0f      	ldr	r3, [pc, #60]	@ (80020a0 <MX_CAN1_Init+0x64>)
 8002062:	2200      	movs	r2, #0
 8002064:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002066:	4b0e      	ldr	r3, [pc, #56]	@ (80020a0 <MX_CAN1_Init+0x64>)
 8002068:	2200      	movs	r2, #0
 800206a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800206c:	4b0c      	ldr	r3, [pc, #48]	@ (80020a0 <MX_CAN1_Init+0x64>)
 800206e:	2200      	movs	r2, #0
 8002070:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002072:	4b0b      	ldr	r3, [pc, #44]	@ (80020a0 <MX_CAN1_Init+0x64>)
 8002074:	2200      	movs	r2, #0
 8002076:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002078:	4b09      	ldr	r3, [pc, #36]	@ (80020a0 <MX_CAN1_Init+0x64>)
 800207a:	2200      	movs	r2, #0
 800207c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800207e:	4b08      	ldr	r3, [pc, #32]	@ (80020a0 <MX_CAN1_Init+0x64>)
 8002080:	2200      	movs	r2, #0
 8002082:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002084:	4b06      	ldr	r3, [pc, #24]	@ (80020a0 <MX_CAN1_Init+0x64>)
 8002086:	2200      	movs	r2, #0
 8002088:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800208a:	4805      	ldr	r0, [pc, #20]	@ (80020a0 <MX_CAN1_Init+0x64>)
 800208c:	f001 f8ca 	bl	8003224 <HAL_CAN_Init>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8002096:	f000 f8cd 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	200002b8 	.word	0x200002b8
 80020a4:	40006400 	.word	0x40006400

080020a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020ac:	4b12      	ldr	r3, [pc, #72]	@ (80020f8 <MX_I2C1_Init+0x50>)
 80020ae:	4a13      	ldr	r2, [pc, #76]	@ (80020fc <MX_I2C1_Init+0x54>)
 80020b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80020b2:	4b11      	ldr	r3, [pc, #68]	@ (80020f8 <MX_I2C1_Init+0x50>)
 80020b4:	4a12      	ldr	r2, [pc, #72]	@ (8002100 <MX_I2C1_Init+0x58>)
 80020b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020b8:	4b0f      	ldr	r3, [pc, #60]	@ (80020f8 <MX_I2C1_Init+0x50>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80020be:	4b0e      	ldr	r3, [pc, #56]	@ (80020f8 <MX_I2C1_Init+0x50>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020c4:	4b0c      	ldr	r3, [pc, #48]	@ (80020f8 <MX_I2C1_Init+0x50>)
 80020c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80020ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020cc:	4b0a      	ldr	r3, [pc, #40]	@ (80020f8 <MX_I2C1_Init+0x50>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80020d2:	4b09      	ldr	r3, [pc, #36]	@ (80020f8 <MX_I2C1_Init+0x50>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020d8:	4b07      	ldr	r3, [pc, #28]	@ (80020f8 <MX_I2C1_Init+0x50>)
 80020da:	2200      	movs	r2, #0
 80020dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020de:	4b06      	ldr	r3, [pc, #24]	@ (80020f8 <MX_I2C1_Init+0x50>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020e4:	4804      	ldr	r0, [pc, #16]	@ (80020f8 <MX_I2C1_Init+0x50>)
 80020e6:	f002 f9f9 	bl	80044dc <HAL_I2C_Init>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80020f0:	f000 f8a0 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020f4:	bf00      	nop
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	200002e0 	.word	0x200002e0
 80020fc:	40005400 	.word	0x40005400
 8002100:	000186a0 	.word	0x000186a0

08002104 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002108:	4b11      	ldr	r3, [pc, #68]	@ (8002150 <MX_USART2_UART_Init+0x4c>)
 800210a:	4a12      	ldr	r2, [pc, #72]	@ (8002154 <MX_USART2_UART_Init+0x50>)
 800210c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800210e:	4b10      	ldr	r3, [pc, #64]	@ (8002150 <MX_USART2_UART_Init+0x4c>)
 8002110:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002114:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002116:	4b0e      	ldr	r3, [pc, #56]	@ (8002150 <MX_USART2_UART_Init+0x4c>)
 8002118:	2200      	movs	r2, #0
 800211a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800211c:	4b0c      	ldr	r3, [pc, #48]	@ (8002150 <MX_USART2_UART_Init+0x4c>)
 800211e:	2200      	movs	r2, #0
 8002120:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002122:	4b0b      	ldr	r3, [pc, #44]	@ (8002150 <MX_USART2_UART_Init+0x4c>)
 8002124:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002128:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800212a:	4b09      	ldr	r3, [pc, #36]	@ (8002150 <MX_USART2_UART_Init+0x4c>)
 800212c:	220c      	movs	r2, #12
 800212e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002130:	4b07      	ldr	r3, [pc, #28]	@ (8002150 <MX_USART2_UART_Init+0x4c>)
 8002132:	2200      	movs	r2, #0
 8002134:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002136:	4b06      	ldr	r3, [pc, #24]	@ (8002150 <MX_USART2_UART_Init+0x4c>)
 8002138:	2200      	movs	r2, #0
 800213a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800213c:	4804      	ldr	r0, [pc, #16]	@ (8002150 <MX_USART2_UART_Init+0x4c>)
 800213e:	f003 f949 	bl	80053d4 <HAL_UART_Init>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8002148:	f000 f874 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800214c:	bf00      	nop
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20000334 	.word	0x20000334
 8002154:	40004400 	.word	0x40004400

08002158 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08a      	sub	sp, #40	@ 0x28
 800215c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215e:	f107 0314 	add.w	r3, r7, #20
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	605a      	str	r2, [r3, #4]
 8002168:	609a      	str	r2, [r3, #8]
 800216a:	60da      	str	r2, [r3, #12]
 800216c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	4b2d      	ldr	r3, [pc, #180]	@ (8002228 <MX_GPIO_Init+0xd0>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002176:	4a2c      	ldr	r2, [pc, #176]	@ (8002228 <MX_GPIO_Init+0xd0>)
 8002178:	f043 0304 	orr.w	r3, r3, #4
 800217c:	6313      	str	r3, [r2, #48]	@ 0x30
 800217e:	4b2a      	ldr	r3, [pc, #168]	@ (8002228 <MX_GPIO_Init+0xd0>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002182:	f003 0304 	and.w	r3, r3, #4
 8002186:	613b      	str	r3, [r7, #16]
 8002188:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	4b26      	ldr	r3, [pc, #152]	@ (8002228 <MX_GPIO_Init+0xd0>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002192:	4a25      	ldr	r2, [pc, #148]	@ (8002228 <MX_GPIO_Init+0xd0>)
 8002194:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002198:	6313      	str	r3, [r2, #48]	@ 0x30
 800219a:	4b23      	ldr	r3, [pc, #140]	@ (8002228 <MX_GPIO_Init+0xd0>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002228 <MX_GPIO_Init+0xd0>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ae:	4a1e      	ldr	r2, [pc, #120]	@ (8002228 <MX_GPIO_Init+0xd0>)
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002228 <MX_GPIO_Init+0xd0>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	60bb      	str	r3, [r7, #8]
 80021c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	607b      	str	r3, [r7, #4]
 80021c6:	4b18      	ldr	r3, [pc, #96]	@ (8002228 <MX_GPIO_Init+0xd0>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ca:	4a17      	ldr	r2, [pc, #92]	@ (8002228 <MX_GPIO_Init+0xd0>)
 80021cc:	f043 0302 	orr.w	r3, r3, #2
 80021d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021d2:	4b15      	ldr	r3, [pc, #84]	@ (8002228 <MX_GPIO_Init+0xd0>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	607b      	str	r3, [r7, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80021de:	2200      	movs	r2, #0
 80021e0:	2120      	movs	r1, #32
 80021e2:	4812      	ldr	r0, [pc, #72]	@ (800222c <MX_GPIO_Init+0xd4>)
 80021e4:	f002 f960 	bl	80044a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80021e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021ee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80021f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	4619      	mov	r1, r3
 80021fe:	480c      	ldr	r0, [pc, #48]	@ (8002230 <MX_GPIO_Init+0xd8>)
 8002200:	f001 ffbe 	bl	8004180 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002204:	2320      	movs	r3, #32
 8002206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002208:	2301      	movs	r3, #1
 800220a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002210:	2300      	movs	r3, #0
 8002212:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002214:	f107 0314 	add.w	r3, r7, #20
 8002218:	4619      	mov	r1, r3
 800221a:	4804      	ldr	r0, [pc, #16]	@ (800222c <MX_GPIO_Init+0xd4>)
 800221c:	f001 ffb0 	bl	8004180 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002220:	bf00      	nop
 8002222:	3728      	adds	r7, #40	@ 0x28
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40023800 	.word	0x40023800
 800222c:	40020000 	.word	0x40020000
 8002230:	40020800 	.word	0x40020800

08002234 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002238:	b672      	cpsid	i
}
 800223a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800223c:	bf00      	nop
 800223e:	e7fd      	b.n	800223c <Error_Handler+0x8>

08002240 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	607b      	str	r3, [r7, #4]
 800224a:	4b10      	ldr	r3, [pc, #64]	@ (800228c <HAL_MspInit+0x4c>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224e:	4a0f      	ldr	r2, [pc, #60]	@ (800228c <HAL_MspInit+0x4c>)
 8002250:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002254:	6453      	str	r3, [r2, #68]	@ 0x44
 8002256:	4b0d      	ldr	r3, [pc, #52]	@ (800228c <HAL_MspInit+0x4c>)
 8002258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800225e:	607b      	str	r3, [r7, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	603b      	str	r3, [r7, #0]
 8002266:	4b09      	ldr	r3, [pc, #36]	@ (800228c <HAL_MspInit+0x4c>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226a:	4a08      	ldr	r2, [pc, #32]	@ (800228c <HAL_MspInit+0x4c>)
 800226c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002270:	6413      	str	r3, [r2, #64]	@ 0x40
 8002272:	4b06      	ldr	r3, [pc, #24]	@ (800228c <HAL_MspInit+0x4c>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800227a:	603b      	str	r3, [r7, #0]
 800227c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800227e:	2007      	movs	r0, #7
 8002280:	f001 ff3c 	bl	80040fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002284:	bf00      	nop
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40023800 	.word	0x40023800

08002290 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08a      	sub	sp, #40	@ 0x28
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 0314 	add.w	r3, r7, #20
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a24      	ldr	r2, [pc, #144]	@ (8002340 <HAL_ADC_MspInit+0xb0>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d141      	bne.n	8002336 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	613b      	str	r3, [r7, #16]
 80022b6:	4b23      	ldr	r3, [pc, #140]	@ (8002344 <HAL_ADC_MspInit+0xb4>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ba:	4a22      	ldr	r2, [pc, #136]	@ (8002344 <HAL_ADC_MspInit+0xb4>)
 80022bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80022c2:	4b20      	ldr	r3, [pc, #128]	@ (8002344 <HAL_ADC_MspInit+0xb4>)
 80022c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ca:	613b      	str	r3, [r7, #16]
 80022cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002344 <HAL_ADC_MspInit+0xb4>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d6:	4a1b      	ldr	r2, [pc, #108]	@ (8002344 <HAL_ADC_MspInit+0xb4>)
 80022d8:	f043 0304 	orr.w	r3, r3, #4
 80022dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022de:	4b19      	ldr	r3, [pc, #100]	@ (8002344 <HAL_ADC_MspInit+0xb4>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e2:	f003 0304 	and.w	r3, r3, #4
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	4b15      	ldr	r3, [pc, #84]	@ (8002344 <HAL_ADC_MspInit+0xb4>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f2:	4a14      	ldr	r2, [pc, #80]	@ (8002344 <HAL_ADC_MspInit+0xb4>)
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022fa:	4b12      	ldr	r3, [pc, #72]	@ (8002344 <HAL_ADC_MspInit+0xb4>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	60bb      	str	r3, [r7, #8]
 8002304:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8002306:	230b      	movs	r3, #11
 8002308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800230a:	2303      	movs	r3, #3
 800230c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002312:	f107 0314 	add.w	r3, r7, #20
 8002316:	4619      	mov	r1, r3
 8002318:	480b      	ldr	r0, [pc, #44]	@ (8002348 <HAL_ADC_MspInit+0xb8>)
 800231a:	f001 ff31 	bl	8004180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800231e:	23c3      	movs	r3, #195	@ 0xc3
 8002320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002322:	2303      	movs	r3, #3
 8002324:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232a:	f107 0314 	add.w	r3, r7, #20
 800232e:	4619      	mov	r1, r3
 8002330:	4806      	ldr	r0, [pc, #24]	@ (800234c <HAL_ADC_MspInit+0xbc>)
 8002332:	f001 ff25 	bl	8004180 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002336:	bf00      	nop
 8002338:	3728      	adds	r7, #40	@ 0x28
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40012000 	.word	0x40012000
 8002344:	40023800 	.word	0x40023800
 8002348:	40020800 	.word	0x40020800
 800234c:	40020000 	.word	0x40020000

08002350 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b08a      	sub	sp, #40	@ 0x28
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002358:	f107 0314 	add.w	r3, r7, #20
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a21      	ldr	r2, [pc, #132]	@ (80023f4 <HAL_CAN_MspInit+0xa4>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d13c      	bne.n	80023ec <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	613b      	str	r3, [r7, #16]
 8002376:	4b20      	ldr	r3, [pc, #128]	@ (80023f8 <HAL_CAN_MspInit+0xa8>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237a:	4a1f      	ldr	r2, [pc, #124]	@ (80023f8 <HAL_CAN_MspInit+0xa8>)
 800237c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002380:	6413      	str	r3, [r2, #64]	@ 0x40
 8002382:	4b1d      	ldr	r3, [pc, #116]	@ (80023f8 <HAL_CAN_MspInit+0xa8>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800238a:	613b      	str	r3, [r7, #16]
 800238c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	4b19      	ldr	r3, [pc, #100]	@ (80023f8 <HAL_CAN_MspInit+0xa8>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002396:	4a18      	ldr	r2, [pc, #96]	@ (80023f8 <HAL_CAN_MspInit+0xa8>)
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	6313      	str	r3, [r2, #48]	@ 0x30
 800239e:	4b16      	ldr	r3, [pc, #88]	@ (80023f8 <HAL_CAN_MspInit+0xa8>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80023aa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80023ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b0:	2302      	movs	r3, #2
 80023b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b8:	2303      	movs	r3, #3
 80023ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80023bc:	2309      	movs	r3, #9
 80023be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c0:	f107 0314 	add.w	r3, r7, #20
 80023c4:	4619      	mov	r1, r3
 80023c6:	480d      	ldr	r0, [pc, #52]	@ (80023fc <HAL_CAN_MspInit+0xac>)
 80023c8:	f001 feda 	bl	8004180 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80023cc:	2200      	movs	r2, #0
 80023ce:	2100      	movs	r1, #0
 80023d0:	2014      	movs	r0, #20
 80023d2:	f001 fe9e 	bl	8004112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80023d6:	2014      	movs	r0, #20
 80023d8:	f001 feb7 	bl	800414a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80023dc:	2200      	movs	r2, #0
 80023de:	2100      	movs	r1, #0
 80023e0:	2015      	movs	r0, #21
 80023e2:	f001 fe96 	bl	8004112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80023e6:	2015      	movs	r0, #21
 80023e8:	f001 feaf 	bl	800414a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80023ec:	bf00      	nop
 80023ee:	3728      	adds	r7, #40	@ 0x28
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40006400 	.word	0x40006400
 80023f8:	40023800 	.word	0x40023800
 80023fc:	40020000 	.word	0x40020000

08002400 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08a      	sub	sp, #40	@ 0x28
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002408:	f107 0314 	add.w	r3, r7, #20
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	609a      	str	r2, [r3, #8]
 8002414:	60da      	str	r2, [r3, #12]
 8002416:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a19      	ldr	r2, [pc, #100]	@ (8002484 <HAL_I2C_MspInit+0x84>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d12b      	bne.n	800247a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]
 8002426:	4b18      	ldr	r3, [pc, #96]	@ (8002488 <HAL_I2C_MspInit+0x88>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242a:	4a17      	ldr	r2, [pc, #92]	@ (8002488 <HAL_I2C_MspInit+0x88>)
 800242c:	f043 0302 	orr.w	r3, r3, #2
 8002430:	6313      	str	r3, [r2, #48]	@ 0x30
 8002432:	4b15      	ldr	r3, [pc, #84]	@ (8002488 <HAL_I2C_MspInit+0x88>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800243e:	23c0      	movs	r3, #192	@ 0xc0
 8002440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002442:	2312      	movs	r3, #18
 8002444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002446:	2300      	movs	r3, #0
 8002448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800244a:	2303      	movs	r3, #3
 800244c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800244e:	2304      	movs	r3, #4
 8002450:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002452:	f107 0314 	add.w	r3, r7, #20
 8002456:	4619      	mov	r1, r3
 8002458:	480c      	ldr	r0, [pc, #48]	@ (800248c <HAL_I2C_MspInit+0x8c>)
 800245a:	f001 fe91 	bl	8004180 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	4b09      	ldr	r3, [pc, #36]	@ (8002488 <HAL_I2C_MspInit+0x88>)
 8002464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002466:	4a08      	ldr	r2, [pc, #32]	@ (8002488 <HAL_I2C_MspInit+0x88>)
 8002468:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800246c:	6413      	str	r3, [r2, #64]	@ 0x40
 800246e:	4b06      	ldr	r3, [pc, #24]	@ (8002488 <HAL_I2C_MspInit+0x88>)
 8002470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002472:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800247a:	bf00      	nop
 800247c:	3728      	adds	r7, #40	@ 0x28
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40005400 	.word	0x40005400
 8002488:	40023800 	.word	0x40023800
 800248c:	40020400 	.word	0x40020400

08002490 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b08a      	sub	sp, #40	@ 0x28
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002498:	f107 0314 	add.w	r3, r7, #20
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	60da      	str	r2, [r3, #12]
 80024a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a19      	ldr	r2, [pc, #100]	@ (8002514 <HAL_UART_MspInit+0x84>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d12b      	bne.n	800250a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	613b      	str	r3, [r7, #16]
 80024b6:	4b18      	ldr	r3, [pc, #96]	@ (8002518 <HAL_UART_MspInit+0x88>)
 80024b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ba:	4a17      	ldr	r2, [pc, #92]	@ (8002518 <HAL_UART_MspInit+0x88>)
 80024bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80024c2:	4b15      	ldr	r3, [pc, #84]	@ (8002518 <HAL_UART_MspInit+0x88>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ca:	613b      	str	r3, [r7, #16]
 80024cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	4b11      	ldr	r3, [pc, #68]	@ (8002518 <HAL_UART_MspInit+0x88>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d6:	4a10      	ldr	r2, [pc, #64]	@ (8002518 <HAL_UART_MspInit+0x88>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024de:	4b0e      	ldr	r3, [pc, #56]	@ (8002518 <HAL_UART_MspInit+0x88>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80024ea:	230c      	movs	r3, #12
 80024ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ee:	2302      	movs	r3, #2
 80024f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f6:	2303      	movs	r3, #3
 80024f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024fa:	2307      	movs	r3, #7
 80024fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024fe:	f107 0314 	add.w	r3, r7, #20
 8002502:	4619      	mov	r1, r3
 8002504:	4805      	ldr	r0, [pc, #20]	@ (800251c <HAL_UART_MspInit+0x8c>)
 8002506:	f001 fe3b 	bl	8004180 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800250a:	bf00      	nop
 800250c:	3728      	adds	r7, #40	@ 0x28
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40004400 	.word	0x40004400
 8002518:	40023800 	.word	0x40023800
 800251c:	40020000 	.word	0x40020000

08002520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002524:	bf00      	nop
 8002526:	e7fd      	b.n	8002524 <NMI_Handler+0x4>

08002528 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800252c:	bf00      	nop
 800252e:	e7fd      	b.n	800252c <HardFault_Handler+0x4>

08002530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002534:	bf00      	nop
 8002536:	e7fd      	b.n	8002534 <MemManage_Handler+0x4>

08002538 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800253c:	bf00      	nop
 800253e:	e7fd      	b.n	800253c <BusFault_Handler+0x4>

08002540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002544:	bf00      	nop
 8002546:	e7fd      	b.n	8002544 <UsageFault_Handler+0x4>

08002548 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800254c:	bf00      	nop
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002568:	bf00      	nop
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002576:	f000 f96b 	bl	8002850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002584:	4802      	ldr	r0, [pc, #8]	@ (8002590 <CAN1_RX0_IRQHandler+0x10>)
 8002586:	f001 faba 	bl	8003afe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800258a:	bf00      	nop
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	200002b8 	.word	0x200002b8

08002594 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002598:	4802      	ldr	r0, [pc, #8]	@ (80025a4 <CAN1_RX1_IRQHandler+0x10>)
 800259a:	f001 fab0 	bl	8003afe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	200002b8 	.word	0x200002b8

080025a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  return 1;
 80025ac:	2301      	movs	r3, #1
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <_kill>:

int _kill(int pid, int sig)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025c2:	f004 f859 	bl	8006678 <__errno>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2216      	movs	r2, #22
 80025ca:	601a      	str	r2, [r3, #0]
  return -1;
 80025cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <_exit>:

void _exit (int status)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025e0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f7ff ffe7 	bl	80025b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80025ea:	bf00      	nop
 80025ec:	e7fd      	b.n	80025ea <_exit+0x12>

080025ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b086      	sub	sp, #24
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	60f8      	str	r0, [r7, #12]
 80025f6:	60b9      	str	r1, [r7, #8]
 80025f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	e00a      	b.n	8002616 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002600:	f3af 8000 	nop.w
 8002604:	4601      	mov	r1, r0
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	1c5a      	adds	r2, r3, #1
 800260a:	60ba      	str	r2, [r7, #8]
 800260c:	b2ca      	uxtb	r2, r1
 800260e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	3301      	adds	r3, #1
 8002614:	617b      	str	r3, [r7, #20]
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	429a      	cmp	r2, r3
 800261c:	dbf0      	blt.n	8002600 <_read+0x12>
  }

  return len;
 800261e:	687b      	ldr	r3, [r7, #4]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]
 8002638:	e009      	b.n	800264e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	1c5a      	adds	r2, r3, #1
 800263e:	60ba      	str	r2, [r7, #8]
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	3301      	adds	r3, #1
 800264c:	617b      	str	r3, [r7, #20]
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	429a      	cmp	r2, r3
 8002654:	dbf1      	blt.n	800263a <_write+0x12>
  }
  return len;
 8002656:	687b      	ldr	r3, [r7, #4]
}
 8002658:	4618      	mov	r0, r3
 800265a:	3718      	adds	r7, #24
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <_close>:

int _close(int file)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002668:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800266c:	4618      	mov	r0, r3
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002688:	605a      	str	r2, [r3, #4]
  return 0;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <_isatty>:

int _isatty(int file)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026a0:	2301      	movs	r3, #1
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b085      	sub	sp, #20
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	60f8      	str	r0, [r7, #12]
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026d0:	4a14      	ldr	r2, [pc, #80]	@ (8002724 <_sbrk+0x5c>)
 80026d2:	4b15      	ldr	r3, [pc, #84]	@ (8002728 <_sbrk+0x60>)
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026dc:	4b13      	ldr	r3, [pc, #76]	@ (800272c <_sbrk+0x64>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d102      	bne.n	80026ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026e4:	4b11      	ldr	r3, [pc, #68]	@ (800272c <_sbrk+0x64>)
 80026e6:	4a12      	ldr	r2, [pc, #72]	@ (8002730 <_sbrk+0x68>)
 80026e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ea:	4b10      	ldr	r3, [pc, #64]	@ (800272c <_sbrk+0x64>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4413      	add	r3, r2
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d207      	bcs.n	8002708 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026f8:	f003 ffbe 	bl	8006678 <__errno>
 80026fc:	4603      	mov	r3, r0
 80026fe:	220c      	movs	r2, #12
 8002700:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002702:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002706:	e009      	b.n	800271c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002708:	4b08      	ldr	r3, [pc, #32]	@ (800272c <_sbrk+0x64>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800270e:	4b07      	ldr	r3, [pc, #28]	@ (800272c <_sbrk+0x64>)
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4413      	add	r3, r2
 8002716:	4a05      	ldr	r2, [pc, #20]	@ (800272c <_sbrk+0x64>)
 8002718:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800271a:	68fb      	ldr	r3, [r7, #12]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20020000 	.word	0x20020000
 8002728:	00000400 	.word	0x00000400
 800272c:	2000037c 	.word	0x2000037c
 8002730:	200004d0 	.word	0x200004d0

08002734 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002738:	4b06      	ldr	r3, [pc, #24]	@ (8002754 <SystemInit+0x20>)
 800273a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800273e:	4a05      	ldr	r2, [pc, #20]	@ (8002754 <SystemInit+0x20>)
 8002740:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002744:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002748:	bf00      	nop
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002758:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002790 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800275c:	f7ff ffea 	bl	8002734 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002760:	480c      	ldr	r0, [pc, #48]	@ (8002794 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002762:	490d      	ldr	r1, [pc, #52]	@ (8002798 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002764:	4a0d      	ldr	r2, [pc, #52]	@ (800279c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002768:	e002      	b.n	8002770 <LoopCopyDataInit>

0800276a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800276a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800276c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800276e:	3304      	adds	r3, #4

08002770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002774:	d3f9      	bcc.n	800276a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002776:	4a0a      	ldr	r2, [pc, #40]	@ (80027a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002778:	4c0a      	ldr	r4, [pc, #40]	@ (80027a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800277a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800277c:	e001      	b.n	8002782 <LoopFillZerobss>

0800277e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800277e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002780:	3204      	adds	r2, #4

08002782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002784:	d3fb      	bcc.n	800277e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002786:	f003 ff7d 	bl	8006684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800278a:	f7ff fb7d 	bl	8001e88 <main>
  bx  lr    
 800278e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002790:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002798:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800279c:	08009c80 	.word	0x08009c80
  ldr r2, =_sbss
 80027a0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80027a4:	200004d0 	.word	0x200004d0

080027a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027a8:	e7fe      	b.n	80027a8 <ADC_IRQHandler>
	...

080027ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027b0:	4b0e      	ldr	r3, [pc, #56]	@ (80027ec <HAL_Init+0x40>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a0d      	ldr	r2, [pc, #52]	@ (80027ec <HAL_Init+0x40>)
 80027b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027bc:	4b0b      	ldr	r3, [pc, #44]	@ (80027ec <HAL_Init+0x40>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a0a      	ldr	r2, [pc, #40]	@ (80027ec <HAL_Init+0x40>)
 80027c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027c8:	4b08      	ldr	r3, [pc, #32]	@ (80027ec <HAL_Init+0x40>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a07      	ldr	r2, [pc, #28]	@ (80027ec <HAL_Init+0x40>)
 80027ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027d4:	2003      	movs	r0, #3
 80027d6:	f001 fc91 	bl	80040fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027da:	2000      	movs	r0, #0
 80027dc:	f000 f808 	bl	80027f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027e0:	f7ff fd2e 	bl	8002240 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40023c00 	.word	0x40023c00

080027f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027f8:	4b12      	ldr	r3, [pc, #72]	@ (8002844 <HAL_InitTick+0x54>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4b12      	ldr	r3, [pc, #72]	@ (8002848 <HAL_InitTick+0x58>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	4619      	mov	r1, r3
 8002802:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002806:	fbb3 f3f1 	udiv	r3, r3, r1
 800280a:	fbb2 f3f3 	udiv	r3, r2, r3
 800280e:	4618      	mov	r0, r3
 8002810:	f001 fca9 	bl	8004166 <HAL_SYSTICK_Config>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e00e      	b.n	800283c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b0f      	cmp	r3, #15
 8002822:	d80a      	bhi.n	800283a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002824:	2200      	movs	r2, #0
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800282c:	f001 fc71 	bl	8004112 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002830:	4a06      	ldr	r2, [pc, #24]	@ (800284c <HAL_InitTick+0x5c>)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	e000      	b.n	800283c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
}
 800283c:	4618      	mov	r0, r3
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20000000 	.word	0x20000000
 8002848:	20000008 	.word	0x20000008
 800284c:	20000004 	.word	0x20000004

08002850 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002854:	4b06      	ldr	r3, [pc, #24]	@ (8002870 <HAL_IncTick+0x20>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	4b06      	ldr	r3, [pc, #24]	@ (8002874 <HAL_IncTick+0x24>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4413      	add	r3, r2
 8002860:	4a04      	ldr	r2, [pc, #16]	@ (8002874 <HAL_IncTick+0x24>)
 8002862:	6013      	str	r3, [r2, #0]
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	20000008 	.word	0x20000008
 8002874:	20000380 	.word	0x20000380

08002878 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return uwTick;
 800287c:	4b03      	ldr	r3, [pc, #12]	@ (800288c <HAL_GetTick+0x14>)
 800287e:	681b      	ldr	r3, [r3, #0]
}
 8002880:	4618      	mov	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	20000380 	.word	0x20000380

08002890 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002898:	f7ff ffee 	bl	8002878 <HAL_GetTick>
 800289c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028a8:	d005      	beq.n	80028b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028aa:	4b0a      	ldr	r3, [pc, #40]	@ (80028d4 <HAL_Delay+0x44>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	461a      	mov	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4413      	add	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028b6:	bf00      	nop
 80028b8:	f7ff ffde 	bl	8002878 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d8f7      	bhi.n	80028b8 <HAL_Delay+0x28>
  {
  }
}
 80028c8:	bf00      	nop
 80028ca:	bf00      	nop
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20000008 	.word	0x20000008

080028d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028e0:	2300      	movs	r3, #0
 80028e2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e033      	b.n	8002956 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d109      	bne.n	800290a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7ff fcca 	bl	8002290 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290e:	f003 0310 	and.w	r3, r3, #16
 8002912:	2b00      	cmp	r3, #0
 8002914:	d118      	bne.n	8002948 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800291e:	f023 0302 	bic.w	r3, r3, #2
 8002922:	f043 0202 	orr.w	r2, r3, #2
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 fab4 	bl	8002e98 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293a:	f023 0303 	bic.w	r3, r3, #3
 800293e:	f043 0201 	orr.w	r2, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	641a      	str	r2, [r3, #64]	@ 0x40
 8002946:	e001      	b.n	800294c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002954:	7bfb      	ldrb	r3, [r7, #15]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002968:	2300      	movs	r3, #0
 800296a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002972:	2b01      	cmp	r3, #1
 8002974:	d101      	bne.n	800297a <HAL_ADC_Start+0x1a>
 8002976:	2302      	movs	r3, #2
 8002978:	e0b2      	b.n	8002ae0 <HAL_ADC_Start+0x180>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b01      	cmp	r3, #1
 800298e:	d018      	beq.n	80029c2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0201 	orr.w	r2, r2, #1
 800299e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029a0:	4b52      	ldr	r3, [pc, #328]	@ (8002aec <HAL_ADC_Start+0x18c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a52      	ldr	r2, [pc, #328]	@ (8002af0 <HAL_ADC_Start+0x190>)
 80029a6:	fba2 2303 	umull	r2, r3, r2, r3
 80029aa:	0c9a      	lsrs	r2, r3, #18
 80029ac:	4613      	mov	r3, r2
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	4413      	add	r3, r2
 80029b2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80029b4:	e002      	b.n	80029bc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	3b01      	subs	r3, #1
 80029ba:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f9      	bne.n	80029b6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d17a      	bne.n	8002ac6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80029d8:	f023 0301 	bic.w	r3, r3, #1
 80029dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d007      	beq.n	8002a02 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80029fa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a0e:	d106      	bne.n	8002a1e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a14:	f023 0206 	bic.w	r2, r3, #6
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	645a      	str	r2, [r3, #68]	@ 0x44
 8002a1c:	e002      	b.n	8002a24 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a2c:	4b31      	ldr	r3, [pc, #196]	@ (8002af4 <HAL_ADC_Start+0x194>)
 8002a2e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002a38:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f003 031f 	and.w	r3, r3, #31
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d12a      	bne.n	8002a9c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a2b      	ldr	r2, [pc, #172]	@ (8002af8 <HAL_ADC_Start+0x198>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d015      	beq.n	8002a7c <HAL_ADC_Start+0x11c>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a29      	ldr	r2, [pc, #164]	@ (8002afc <HAL_ADC_Start+0x19c>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d105      	bne.n	8002a66 <HAL_ADC_Start+0x106>
 8002a5a:	4b26      	ldr	r3, [pc, #152]	@ (8002af4 <HAL_ADC_Start+0x194>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f003 031f 	and.w	r3, r3, #31
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00a      	beq.n	8002a7c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a25      	ldr	r2, [pc, #148]	@ (8002b00 <HAL_ADC_Start+0x1a0>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d136      	bne.n	8002ade <HAL_ADC_Start+0x17e>
 8002a70:	4b20      	ldr	r3, [pc, #128]	@ (8002af4 <HAL_ADC_Start+0x194>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f003 0310 	and.w	r3, r3, #16
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d130      	bne.n	8002ade <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d129      	bne.n	8002ade <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002a98:	609a      	str	r2, [r3, #8]
 8002a9a:	e020      	b.n	8002ade <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a15      	ldr	r2, [pc, #84]	@ (8002af8 <HAL_ADC_Start+0x198>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d11b      	bne.n	8002ade <HAL_ADC_Start+0x17e>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d114      	bne.n	8002ade <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002ac2:	609a      	str	r2, [r3, #8]
 8002ac4:	e00b      	b.n	8002ade <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aca:	f043 0210 	orr.w	r2, r3, #16
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad6:	f043 0201 	orr.w	r2, r3, #1
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	20000000 	.word	0x20000000
 8002af0:	431bde83 	.word	0x431bde83
 8002af4:	40012300 	.word	0x40012300
 8002af8:	40012000 	.word	0x40012000
 8002afc:	40012100 	.word	0x40012100
 8002b00:	40012200 	.word	0x40012200

08002b04 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b20:	d113      	bne.n	8002b4a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002b2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b30:	d10b      	bne.n	8002b4a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b36:	f043 0220 	orr.w	r2, r3, #32
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e063      	b.n	8002c12 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b4a:	f7ff fe95 	bl	8002878 <HAL_GetTick>
 8002b4e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b50:	e021      	b.n	8002b96 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b58:	d01d      	beq.n	8002b96 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d007      	beq.n	8002b70 <HAL_ADC_PollForConversion+0x6c>
 8002b60:	f7ff fe8a 	bl	8002878 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d212      	bcs.n	8002b96 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d00b      	beq.n	8002b96 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b82:	f043 0204 	orr.w	r2, r3, #4
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e03d      	b.n	8002c12 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d1d6      	bne.n	8002b52 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f06f 0212 	mvn.w	r2, #18
 8002bac:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d123      	bne.n	8002c10 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d11f      	bne.n	8002c10 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d006      	beq.n	8002bec <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d111      	bne.n	8002c10 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d105      	bne.n	8002c10 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c08:	f043 0201 	orr.w	r2, r3, #1
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x1c>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e113      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x244>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b09      	cmp	r3, #9
 8002c5e:	d925      	bls.n	8002cac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68d9      	ldr	r1, [r3, #12]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4613      	mov	r3, r2
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	4413      	add	r3, r2
 8002c74:	3b1e      	subs	r3, #30
 8002c76:	2207      	movs	r2, #7
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	43da      	mvns	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	400a      	ands	r2, r1
 8002c84:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68d9      	ldr	r1, [r3, #12]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	4618      	mov	r0, r3
 8002c98:	4603      	mov	r3, r0
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	4403      	add	r3, r0
 8002c9e:	3b1e      	subs	r3, #30
 8002ca0:	409a      	lsls	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	60da      	str	r2, [r3, #12]
 8002caa:	e022      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6919      	ldr	r1, [r3, #16]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	461a      	mov	r2, r3
 8002cba:	4613      	mov	r3, r2
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	4413      	add	r3, r2
 8002cc0:	2207      	movs	r2, #7
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	43da      	mvns	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	400a      	ands	r2, r1
 8002cce:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6919      	ldr	r1, [r3, #16]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	689a      	ldr	r2, [r3, #8]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	4403      	add	r3, r0
 8002ce8:	409a      	lsls	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b06      	cmp	r3, #6
 8002cf8:	d824      	bhi.n	8002d44 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	3b05      	subs	r3, #5
 8002d0c:	221f      	movs	r2, #31
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	43da      	mvns	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	400a      	ands	r2, r1
 8002d1a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	4618      	mov	r0, r3
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4413      	add	r3, r2
 8002d34:	3b05      	subs	r3, #5
 8002d36:	fa00 f203 	lsl.w	r2, r0, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d42:	e04c      	b.n	8002dde <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b0c      	cmp	r3, #12
 8002d4a:	d824      	bhi.n	8002d96 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	4613      	mov	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3b23      	subs	r3, #35	@ 0x23
 8002d5e:	221f      	movs	r2, #31
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	43da      	mvns	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	400a      	ands	r2, r1
 8002d6c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	4613      	mov	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	3b23      	subs	r3, #35	@ 0x23
 8002d88:	fa00 f203 	lsl.w	r2, r0, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d94:	e023      	b.n	8002dde <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	3b41      	subs	r3, #65	@ 0x41
 8002da8:	221f      	movs	r2, #31
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43da      	mvns	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	400a      	ands	r2, r1
 8002db6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	3b41      	subs	r3, #65	@ 0x41
 8002dd2:	fa00 f203 	lsl.w	r2, r0, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dde:	4b29      	ldr	r3, [pc, #164]	@ (8002e84 <HAL_ADC_ConfigChannel+0x250>)
 8002de0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a28      	ldr	r2, [pc, #160]	@ (8002e88 <HAL_ADC_ConfigChannel+0x254>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d10f      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x1d8>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b12      	cmp	r3, #18
 8002df2:	d10b      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a1d      	ldr	r2, [pc, #116]	@ (8002e88 <HAL_ADC_ConfigChannel+0x254>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d12b      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x23a>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a1c      	ldr	r2, [pc, #112]	@ (8002e8c <HAL_ADC_ConfigChannel+0x258>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d003      	beq.n	8002e28 <HAL_ADC_ConfigChannel+0x1f4>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2b11      	cmp	r3, #17
 8002e26:	d122      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a11      	ldr	r2, [pc, #68]	@ (8002e8c <HAL_ADC_ConfigChannel+0x258>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d111      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e4a:	4b11      	ldr	r3, [pc, #68]	@ (8002e90 <HAL_ADC_ConfigChannel+0x25c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a11      	ldr	r2, [pc, #68]	@ (8002e94 <HAL_ADC_ConfigChannel+0x260>)
 8002e50:	fba2 2303 	umull	r2, r3, r2, r3
 8002e54:	0c9a      	lsrs	r2, r3, #18
 8002e56:	4613      	mov	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002e60:	e002      	b.n	8002e68 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	3b01      	subs	r3, #1
 8002e66:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f9      	bne.n	8002e62 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3714      	adds	r7, #20
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	40012300 	.word	0x40012300
 8002e88:	40012000 	.word	0x40012000
 8002e8c:	10000012 	.word	0x10000012
 8002e90:	20000000 	.word	0x20000000
 8002e94:	431bde83 	.word	0x431bde83

08002e98 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ea0:	4b79      	ldr	r3, [pc, #484]	@ (8003088 <ADC_Init+0x1f0>)
 8002ea2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ecc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6859      	ldr	r1, [r3, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	021a      	lsls	r2, r3, #8
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002ef0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6859      	ldr	r1, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6899      	ldr	r1, [r3, #8]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68da      	ldr	r2, [r3, #12]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f2a:	4a58      	ldr	r2, [pc, #352]	@ (800308c <ADC_Init+0x1f4>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d022      	beq.n	8002f76 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6899      	ldr	r1, [r3, #8]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002f60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6899      	ldr	r1, [r3, #8]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	609a      	str	r2, [r3, #8]
 8002f74:	e00f      	b.n	8002f96 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002f94:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0202 	bic.w	r2, r2, #2
 8002fa4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6899      	ldr	r1, [r3, #8]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	7e1b      	ldrb	r3, [r3, #24]
 8002fb0:	005a      	lsls	r2, r3, #1
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d01b      	beq.n	8002ffc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fd2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002fe2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6859      	ldr	r1, [r3, #4]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	035a      	lsls	r2, r3, #13
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	605a      	str	r2, [r3, #4]
 8002ffa:	e007      	b.n	800300c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800300a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800301a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	3b01      	subs	r3, #1
 8003028:	051a      	lsls	r2, r3, #20
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003040:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6899      	ldr	r1, [r3, #8]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800304e:	025a      	lsls	r2, r3, #9
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003066:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6899      	ldr	r1, [r3, #8]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	029a      	lsls	r2, r3, #10
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	609a      	str	r2, [r3, #8]
}
 800307c:	bf00      	nop
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr
 8003088:	40012300 	.word	0x40012300
 800308c:	0f000001 	.word	0x0f000001

08003090 <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 8003090:	b480      	push	{r7}
 8003092:	b087      	sub	sp, #28
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800309c:	2300      	movs	r3, #0
 800309e:	617b      	str	r3, [r7, #20]
 80030a0:	2300      	movs	r3, #0
 80030a2:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;

  /* Process locked */
  __HAL_LOCK(hadc);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d101      	bne.n	80030b2 <HAL_ADCEx_InjectedStart+0x22>
 80030ae:	2302      	movs	r3, #2
 80030b0:	e0aa      	b.n	8003208 <HAL_ADCEx_InjectedStart+0x178>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */

  /* Check if ADC peripheral is disabled in order to enable it and wait during
     Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d018      	beq.n	80030fa <HAL_ADCEx_InjectedStart+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f042 0201 	orr.w	r2, r2, #1
 80030d6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80030d8:	4b4e      	ldr	r3, [pc, #312]	@ (8003214 <HAL_ADCEx_InjectedStart+0x184>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a4e      	ldr	r2, [pc, #312]	@ (8003218 <HAL_ADCEx_InjectedStart+0x188>)
 80030de:	fba2 2303 	umull	r2, r3, r2, r3
 80030e2:	0c9a      	lsrs	r2, r3, #18
 80030e4:	4613      	mov	r3, r2
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	4413      	add	r3, r2
 80030ea:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80030ec:	e002      	b.n	80030f4 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	3b01      	subs	r3, #1
 80030f2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f9      	bne.n	80030ee <HAL_ADCEx_InjectedStart+0x5e>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	2b01      	cmp	r3, #1
 8003106:	d172      	bne.n	80031ee <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003110:	f023 0301 	bic.w	r3, r3, #1
 8003114:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003124:	2b00      	cmp	r3, #0
 8003126:	d102      	bne.n	800312e <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f06f 0204 	mvn.w	r2, #4
 800313e:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003140:	4b36      	ldr	r3, [pc, #216]	@ (800321c <HAL_ADCEx_InjectedStart+0x18c>)
 8003142:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f003 031f 	and.w	r3, r3, #31
 800314c:	2b00      	cmp	r3, #0
 800314e:	d124      	bne.n	800319a <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800315a:	2b00      	cmp	r3, #0
 800315c:	bf0c      	ite	eq
 800315e:	2301      	moveq	r3, #1
 8003160:	2300      	movne	r3, #0
 8003162:	b2db      	uxtb	r3, r3
 8003164:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003170:	2b00      	cmp	r3, #0
 8003172:	bf0c      	ite	eq
 8003174:	2301      	moveq	r3, #1
 8003176:	2300      	movne	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	613b      	str	r3, [r7, #16]
      if (tmp1 && tmp2)
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d041      	beq.n	8003206 <HAL_ADCEx_InjectedStart+0x176>
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d03e      	beq.n	8003206 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689a      	ldr	r2, [r3, #8]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	e035      	b.n	8003206 <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	bf0c      	ite	eq
 80031a8:	2301      	moveq	r3, #1
 80031aa:	2300      	movne	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	bf0c      	ite	eq
 80031be:	2301      	moveq	r3, #1
 80031c0:	2300      	movne	r3, #0
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	613b      	str	r3, [r7, #16]
      if ((hadc->Instance == ADC1) && tmp1 && tmp2)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a15      	ldr	r2, [pc, #84]	@ (8003220 <HAL_ADCEx_InjectedStart+0x190>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d11a      	bne.n	8003206 <HAL_ADCEx_InjectedStart+0x176>
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d017      	beq.n	8003206 <HAL_ADCEx_InjectedStart+0x176>
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d014      	beq.n	8003206 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80031ea:	609a      	str	r2, [r3, #8]
 80031ec:	e00b      	b.n	8003206 <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f2:	f043 0210 	orr.w	r2, r3, #16
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fe:	f043 0201 	orr.w	r2, r3, #1
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	371c      	adds	r7, #28
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	20000000 	.word	0x20000000
 8003218:	431bde83 	.word	0x431bde83
 800321c:	40012300 	.word	0x40012300
 8003220:	40012000 	.word	0x40012000

08003224 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e0ed      	b.n	8003412 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 3020 	ldrb.w	r3, [r3, #32]
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d102      	bne.n	8003248 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7ff f884 	bl	8002350 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0201 	orr.w	r2, r2, #1
 8003256:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003258:	f7ff fb0e 	bl	8002878 <HAL_GetTick>
 800325c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800325e:	e012      	b.n	8003286 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003260:	f7ff fb0a 	bl	8002878 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b0a      	cmp	r3, #10
 800326c:	d90b      	bls.n	8003286 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003272:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2205      	movs	r2, #5
 800327e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e0c5      	b.n	8003412 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0e5      	beq.n	8003260 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0202 	bic.w	r2, r2, #2
 80032a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032a4:	f7ff fae8 	bl	8002878 <HAL_GetTick>
 80032a8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80032aa:	e012      	b.n	80032d2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80032ac:	f7ff fae4 	bl	8002878 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b0a      	cmp	r3, #10
 80032b8:	d90b      	bls.n	80032d2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032be:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2205      	movs	r2, #5
 80032ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e09f      	b.n	8003412 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1e5      	bne.n	80032ac <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	7e1b      	ldrb	r3, [r3, #24]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d108      	bne.n	80032fa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	e007      	b.n	800330a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003308:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	7e5b      	ldrb	r3, [r3, #25]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d108      	bne.n	8003324 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	e007      	b.n	8003334 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003332:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	7e9b      	ldrb	r3, [r3, #26]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d108      	bne.n	800334e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0220 	orr.w	r2, r2, #32
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	e007      	b.n	800335e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0220 	bic.w	r2, r2, #32
 800335c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	7edb      	ldrb	r3, [r3, #27]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d108      	bne.n	8003378 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 0210 	bic.w	r2, r2, #16
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	e007      	b.n	8003388 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0210 	orr.w	r2, r2, #16
 8003386:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	7f1b      	ldrb	r3, [r3, #28]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d108      	bne.n	80033a2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0208 	orr.w	r2, r2, #8
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	e007      	b.n	80033b2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 0208 	bic.w	r2, r2, #8
 80033b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	7f5b      	ldrb	r3, [r3, #29]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d108      	bne.n	80033cc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f042 0204 	orr.w	r2, r2, #4
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	e007      	b.n	80033dc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0204 	bic.w	r2, r2, #4
 80033da:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	431a      	orrs	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	431a      	orrs	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	ea42 0103 	orr.w	r1, r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	1e5a      	subs	r2, r3, #1
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
	...

0800341c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800341c:	b480      	push	{r7}
 800341e:	b087      	sub	sp, #28
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003432:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003434:	7cfb      	ldrb	r3, [r7, #19]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d003      	beq.n	8003442 <HAL_CAN_ConfigFilter+0x26>
 800343a:	7cfb      	ldrb	r3, [r7, #19]
 800343c:	2b02      	cmp	r3, #2
 800343e:	f040 80be 	bne.w	80035be <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003442:	4b65      	ldr	r3, [pc, #404]	@ (80035d8 <HAL_CAN_ConfigFilter+0x1bc>)
 8003444:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800344c:	f043 0201 	orr.w	r2, r3, #1
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800345c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003470:	021b      	lsls	r3, r3, #8
 8003472:	431a      	orrs	r2, r3
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	f003 031f 	and.w	r3, r3, #31
 8003482:	2201      	movs	r2, #1
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	43db      	mvns	r3, r3
 8003494:	401a      	ands	r2, r3
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d123      	bne.n	80034ec <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	43db      	mvns	r3, r3
 80034ae:	401a      	ands	r2, r3
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80034c6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	3248      	adds	r2, #72	@ 0x48
 80034cc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80034e0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80034e2:	6979      	ldr	r1, [r7, #20]
 80034e4:	3348      	adds	r3, #72	@ 0x48
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	440b      	add	r3, r1
 80034ea:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d122      	bne.n	800353a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	431a      	orrs	r2, r3
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003514:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	3248      	adds	r2, #72	@ 0x48
 800351a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800352e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003530:	6979      	ldr	r1, [r7, #20]
 8003532:	3348      	adds	r3, #72	@ 0x48
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	440b      	add	r3, r1
 8003538:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d109      	bne.n	8003556 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	43db      	mvns	r3, r3
 800354c:	401a      	ands	r2, r3
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8003554:	e007      	b.n	8003566 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	431a      	orrs	r2, r3
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d109      	bne.n	8003582 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	43db      	mvns	r3, r3
 8003578:	401a      	ands	r2, r3
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8003580:	e007      	b.n	8003592 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	431a      	orrs	r2, r3
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d107      	bne.n	80035aa <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	431a      	orrs	r2, r3
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80035b0:	f023 0201 	bic.w	r2, r3, #1
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80035ba:	2300      	movs	r3, #0
 80035bc:	e006      	b.n	80035cc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
  }
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	371c      	adds	r7, #28
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	40006400 	.word	0x40006400

080035dc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d12e      	bne.n	800364e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2202      	movs	r2, #2
 80035f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0201 	bic.w	r2, r2, #1
 8003606:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003608:	f7ff f936 	bl	8002878 <HAL_GetTick>
 800360c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800360e:	e012      	b.n	8003636 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003610:	f7ff f932 	bl	8002878 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b0a      	cmp	r3, #10
 800361c:	d90b      	bls.n	8003636 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003622:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2205      	movs	r2, #5
 800362e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e012      	b.n	800365c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1e5      	bne.n	8003610 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800364a:	2300      	movs	r3, #0
 800364c:	e006      	b.n	800365c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003652:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
  }
}
 800365c:	4618      	mov	r0, r3
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003664:	b480      	push	{r7}
 8003666:	b089      	sub	sp, #36	@ 0x24
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
 8003670:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003678:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003682:	7ffb      	ldrb	r3, [r7, #31]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d003      	beq.n	8003690 <HAL_CAN_AddTxMessage+0x2c>
 8003688:	7ffb      	ldrb	r3, [r7, #31]
 800368a:	2b02      	cmp	r3, #2
 800368c:	f040 80ad 	bne.w	80037ea <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10a      	bne.n	80036b0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d105      	bne.n	80036b0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f000 8095 	beq.w	80037da <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	0e1b      	lsrs	r3, r3, #24
 80036b4:	f003 0303 	and.w	r3, r3, #3
 80036b8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80036ba:	2201      	movs	r2, #1
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	409a      	lsls	r2, r3
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d10d      	bne.n	80036e8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80036d6:	68f9      	ldr	r1, [r7, #12]
 80036d8:	6809      	ldr	r1, [r1, #0]
 80036da:	431a      	orrs	r2, r3
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	3318      	adds	r3, #24
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	440b      	add	r3, r1
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	e00f      	b.n	8003708 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80036f2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80036f8:	68f9      	ldr	r1, [r7, #12]
 80036fa:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80036fc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	3318      	adds	r3, #24
 8003702:	011b      	lsls	r3, r3, #4
 8003704:	440b      	add	r3, r1
 8003706:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6819      	ldr	r1, [r3, #0]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	691a      	ldr	r2, [r3, #16]
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	3318      	adds	r3, #24
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	440b      	add	r3, r1
 8003718:	3304      	adds	r3, #4
 800371a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	7d1b      	ldrb	r3, [r3, #20]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d111      	bne.n	8003748 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	3318      	adds	r3, #24
 800372c:	011b      	lsls	r3, r3, #4
 800372e:	4413      	add	r3, r2
 8003730:	3304      	adds	r3, #4
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	6811      	ldr	r1, [r2, #0]
 8003738:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	3318      	adds	r3, #24
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	440b      	add	r3, r1
 8003744:	3304      	adds	r3, #4
 8003746:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3307      	adds	r3, #7
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	061a      	lsls	r2, r3, #24
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3306      	adds	r3, #6
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	041b      	lsls	r3, r3, #16
 8003758:	431a      	orrs	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	3305      	adds	r3, #5
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	021b      	lsls	r3, r3, #8
 8003762:	4313      	orrs	r3, r2
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	3204      	adds	r2, #4
 8003768:	7812      	ldrb	r2, [r2, #0]
 800376a:	4610      	mov	r0, r2
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	6811      	ldr	r1, [r2, #0]
 8003770:	ea43 0200 	orr.w	r2, r3, r0
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	011b      	lsls	r3, r3, #4
 8003778:	440b      	add	r3, r1
 800377a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800377e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3303      	adds	r3, #3
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	061a      	lsls	r2, r3, #24
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3302      	adds	r3, #2
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	041b      	lsls	r3, r3, #16
 8003790:	431a      	orrs	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	3301      	adds	r3, #1
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	021b      	lsls	r3, r3, #8
 800379a:	4313      	orrs	r3, r2
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	7812      	ldrb	r2, [r2, #0]
 80037a0:	4610      	mov	r0, r2
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	6811      	ldr	r1, [r2, #0]
 80037a6:	ea43 0200 	orr.w	r2, r3, r0
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	011b      	lsls	r3, r3, #4
 80037ae:	440b      	add	r3, r1
 80037b0:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80037b4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	3318      	adds	r3, #24
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	4413      	add	r3, r2
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	6811      	ldr	r1, [r2, #0]
 80037c8:	f043 0201 	orr.w	r2, r3, #1
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	3318      	adds	r3, #24
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	440b      	add	r3, r1
 80037d4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80037d6:	2300      	movs	r3, #0
 80037d8:	e00e      	b.n	80037f8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037de:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e006      	b.n	80037f8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ee:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
  }
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3724      	adds	r7, #36	@ 0x24
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800380c:	2300      	movs	r3, #0
 800380e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003816:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003818:	7afb      	ldrb	r3, [r7, #11]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d002      	beq.n	8003824 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800381e:	7afb      	ldrb	r3, [r7, #11]
 8003820:	2b02      	cmp	r3, #2
 8003822:	d11d      	bne.n	8003860 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	3301      	adds	r3, #1
 8003836:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d002      	beq.n	800384c <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	3301      	adds	r3, #1
 800384a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	3301      	adds	r3, #1
 800385e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003860:	68fb      	ldr	r3, [r7, #12]
}
 8003862:	4618      	mov	r0, r3
 8003864:	3714      	adds	r7, #20
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800386e:	b480      	push	{r7}
 8003870:	b087      	sub	sp, #28
 8003872:	af00      	add	r7, sp, #0
 8003874:	60f8      	str	r0, [r7, #12]
 8003876:	60b9      	str	r1, [r7, #8]
 8003878:	607a      	str	r2, [r7, #4]
 800387a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003882:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003884:	7dfb      	ldrb	r3, [r7, #23]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d003      	beq.n	8003892 <HAL_CAN_GetRxMessage+0x24>
 800388a:	7dfb      	ldrb	r3, [r7, #23]
 800388c:	2b02      	cmp	r3, #2
 800388e:	f040 8103 	bne.w	8003a98 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10e      	bne.n	80038b6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	f003 0303 	and.w	r3, r3, #3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d116      	bne.n	80038d4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038aa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e0f7      	b.n	8003aa6 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	f003 0303 	and.w	r3, r3, #3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d107      	bne.n	80038d4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e0e8      	b.n	8003aa6 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	331b      	adds	r3, #27
 80038dc:	011b      	lsls	r3, r3, #4
 80038de:	4413      	add	r3, r2
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0204 	and.w	r2, r3, #4
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10c      	bne.n	800390c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	331b      	adds	r3, #27
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	4413      	add	r3, r2
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	0d5b      	lsrs	r3, r3, #21
 8003902:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	e00b      	b.n	8003924 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	331b      	adds	r3, #27
 8003914:	011b      	lsls	r3, r3, #4
 8003916:	4413      	add	r3, r2
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	08db      	lsrs	r3, r3, #3
 800391c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	331b      	adds	r3, #27
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	4413      	add	r3, r2
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0202 	and.w	r2, r3, #2
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	331b      	adds	r3, #27
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	4413      	add	r3, r2
 8003946:	3304      	adds	r3, #4
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2208      	movs	r2, #8
 8003956:	611a      	str	r2, [r3, #16]
 8003958:	e00b      	b.n	8003972 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	331b      	adds	r3, #27
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	4413      	add	r3, r2
 8003966:	3304      	adds	r3, #4
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 020f 	and.w	r2, r3, #15
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	331b      	adds	r3, #27
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	4413      	add	r3, r2
 800397e:	3304      	adds	r3, #4
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	0a1b      	lsrs	r3, r3, #8
 8003984:	b2da      	uxtb	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	331b      	adds	r3, #27
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	4413      	add	r3, r2
 8003996:	3304      	adds	r3, #4
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	0c1b      	lsrs	r3, r3, #16
 800399c:	b29a      	uxth	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	011b      	lsls	r3, r3, #4
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	011b      	lsls	r3, r3, #4
 80039c0:	4413      	add	r3, r2
 80039c2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	0a1a      	lsrs	r2, r3, #8
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	3301      	adds	r3, #1
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	011b      	lsls	r3, r3, #4
 80039da:	4413      	add	r3, r2
 80039dc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	0c1a      	lsrs	r2, r3, #16
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	3302      	adds	r3, #2
 80039e8:	b2d2      	uxtb	r2, r2
 80039ea:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	0e1a      	lsrs	r2, r3, #24
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	3303      	adds	r3, #3
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	3304      	adds	r3, #4
 8003a1a:	b2d2      	uxtb	r2, r2
 8003a1c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	0a1a      	lsrs	r2, r3, #8
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	3305      	adds	r3, #5
 8003a34:	b2d2      	uxtb	r2, r2
 8003a36:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	011b      	lsls	r3, r3, #4
 8003a40:	4413      	add	r3, r2
 8003a42:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	0c1a      	lsrs	r2, r3, #16
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	3306      	adds	r3, #6
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	011b      	lsls	r3, r3, #4
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	0e1a      	lsrs	r2, r3, #24
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	3307      	adds	r3, #7
 8003a68:	b2d2      	uxtb	r2, r2
 8003a6a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d108      	bne.n	8003a84 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68da      	ldr	r2, [r3, #12]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f042 0220 	orr.w	r2, r2, #32
 8003a80:	60da      	str	r2, [r3, #12]
 8003a82:	e007      	b.n	8003a94 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	691a      	ldr	r2, [r3, #16]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0220 	orr.w	r2, r2, #32
 8003a92:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003a94:	2300      	movs	r3, #0
 8003a96:	e006      	b.n	8003aa6 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
  }
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	371c      	adds	r7, #28
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b085      	sub	sp, #20
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
 8003aba:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ac2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d002      	beq.n	8003ad0 <HAL_CAN_ActivateNotification+0x1e>
 8003aca:	7bfb      	ldrb	r3, [r7, #15]
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d109      	bne.n	8003ae4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6959      	ldr	r1, [r3, #20]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	430a      	orrs	r2, r1
 8003ade:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	e006      	b.n	8003af2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
  }
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b08a      	sub	sp, #40	@ 0x28
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003b06:	2300      	movs	r3, #0
 8003b08:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003b3a:	6a3b      	ldr	r3, [r7, #32]
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d07c      	beq.n	8003c3e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d023      	beq.n	8003b96 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2201      	movs	r2, #1
 8003b54:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d003      	beq.n	8003b68 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 f983 	bl	8003e6c <HAL_CAN_TxMailbox0CompleteCallback>
 8003b66:	e016      	b.n	8003b96 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	f003 0304 	and.w	r3, r3, #4
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d004      	beq.n	8003b7c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b74:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003b78:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b7a:	e00c      	b.n	8003b96 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d004      	beq.n	8003b90 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b88:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b8e:	e002      	b.n	8003b96 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f989 	bl	8003ea8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d024      	beq.n	8003bea <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ba8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d003      	beq.n	8003bbc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 f963 	bl	8003e80 <HAL_CAN_TxMailbox1CompleteCallback>
 8003bba:	e016      	b.n	8003bea <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d004      	beq.n	8003bd0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003bcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bce:	e00c      	b.n	8003bea <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d004      	beq.n	8003be4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003be0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003be2:	e002      	b.n	8003bea <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f969 	bl	8003ebc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d024      	beq.n	8003c3e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003bfc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f943 	bl	8003e94 <HAL_CAN_TxMailbox2CompleteCallback>
 8003c0e:	e016      	b.n	8003c3e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d004      	beq.n	8003c24 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c20:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c22:	e00c      	b.n	8003c3e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d004      	beq.n	8003c38 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c34:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c36:	e002      	b.n	8003c3e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 f949 	bl	8003ed0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003c3e:	6a3b      	ldr	r3, [r7, #32]
 8003c40:	f003 0308 	and.w	r3, r3, #8
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00c      	beq.n	8003c62 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f003 0310 	and.w	r3, r3, #16
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d007      	beq.n	8003c62 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c54:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c58:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2210      	movs	r2, #16
 8003c60:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00b      	beq.n	8003c84 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f003 0308 	and.w	r3, r3, #8
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d006      	beq.n	8003c84 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2208      	movs	r2, #8
 8003c7c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f930 	bl	8003ee4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003c84:	6a3b      	ldr	r3, [r7, #32]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d009      	beq.n	8003ca2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f003 0303 	and.w	r3, r3, #3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7fd f9a7 	bl	8000ff0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003ca2:	6a3b      	ldr	r3, [r7, #32]
 8003ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00c      	beq.n	8003cc6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f003 0310 	and.w	r3, r3, #16
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d007      	beq.n	8003cc6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003cbc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2210      	movs	r2, #16
 8003cc4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003cc6:	6a3b      	ldr	r3, [r7, #32]
 8003cc8:	f003 0320 	and.w	r3, r3, #32
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00b      	beq.n	8003ce8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	f003 0308 	and.w	r3, r3, #8
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d006      	beq.n	8003ce8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2208      	movs	r2, #8
 8003ce0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f912 	bl	8003f0c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003ce8:	6a3b      	ldr	r3, [r7, #32]
 8003cea:	f003 0310 	and.w	r3, r3, #16
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d009      	beq.n	8003d06 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	f003 0303 	and.w	r3, r3, #3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d002      	beq.n	8003d06 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 f8f9 	bl	8003ef8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00b      	beq.n	8003d28 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	f003 0310 	and.w	r3, r3, #16
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d006      	beq.n	8003d28 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2210      	movs	r2, #16
 8003d20:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f8fc 	bl	8003f20 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003d28:	6a3b      	ldr	r3, [r7, #32]
 8003d2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00b      	beq.n	8003d4a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	f003 0308 	and.w	r3, r3, #8
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d006      	beq.n	8003d4a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2208      	movs	r2, #8
 8003d42:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 f8f5 	bl	8003f34 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
 8003d4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d07b      	beq.n	8003e4c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	f003 0304 	and.w	r3, r3, #4
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d072      	beq.n	8003e44 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
 8003d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d008      	beq.n	8003d7a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d74:	f043 0301 	orr.w	r3, r3, #1
 8003d78:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d008      	beq.n	8003d96 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d90:	f043 0302 	orr.w	r3, r3, #2
 8003d94:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003d96:	6a3b      	ldr	r3, [r7, #32]
 8003d98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d008      	beq.n	8003db2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dac:	f043 0304 	orr.w	r3, r3, #4
 8003db0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003db2:	6a3b      	ldr	r3, [r7, #32]
 8003db4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d043      	beq.n	8003e44 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d03e      	beq.n	8003e44 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003dcc:	2b60      	cmp	r3, #96	@ 0x60
 8003dce:	d02b      	beq.n	8003e28 <HAL_CAN_IRQHandler+0x32a>
 8003dd0:	2b60      	cmp	r3, #96	@ 0x60
 8003dd2:	d82e      	bhi.n	8003e32 <HAL_CAN_IRQHandler+0x334>
 8003dd4:	2b50      	cmp	r3, #80	@ 0x50
 8003dd6:	d022      	beq.n	8003e1e <HAL_CAN_IRQHandler+0x320>
 8003dd8:	2b50      	cmp	r3, #80	@ 0x50
 8003dda:	d82a      	bhi.n	8003e32 <HAL_CAN_IRQHandler+0x334>
 8003ddc:	2b40      	cmp	r3, #64	@ 0x40
 8003dde:	d019      	beq.n	8003e14 <HAL_CAN_IRQHandler+0x316>
 8003de0:	2b40      	cmp	r3, #64	@ 0x40
 8003de2:	d826      	bhi.n	8003e32 <HAL_CAN_IRQHandler+0x334>
 8003de4:	2b30      	cmp	r3, #48	@ 0x30
 8003de6:	d010      	beq.n	8003e0a <HAL_CAN_IRQHandler+0x30c>
 8003de8:	2b30      	cmp	r3, #48	@ 0x30
 8003dea:	d822      	bhi.n	8003e32 <HAL_CAN_IRQHandler+0x334>
 8003dec:	2b10      	cmp	r3, #16
 8003dee:	d002      	beq.n	8003df6 <HAL_CAN_IRQHandler+0x2f8>
 8003df0:	2b20      	cmp	r3, #32
 8003df2:	d005      	beq.n	8003e00 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003df4:	e01d      	b.n	8003e32 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df8:	f043 0308 	orr.w	r3, r3, #8
 8003dfc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003dfe:	e019      	b.n	8003e34 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e02:	f043 0310 	orr.w	r3, r3, #16
 8003e06:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003e08:	e014      	b.n	8003e34 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0c:	f043 0320 	orr.w	r3, r3, #32
 8003e10:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003e12:	e00f      	b.n	8003e34 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e1a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003e1c:	e00a      	b.n	8003e34 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e24:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003e26:	e005      	b.n	8003e34 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e2e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003e30:	e000      	b.n	8003e34 <HAL_CAN_IRQHandler+0x336>
            break;
 8003e32:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	699a      	ldr	r2, [r3, #24]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003e42:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2204      	movs	r2, #4
 8003e4a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d008      	beq.n	8003e64 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f872 	bl	8003f48 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003e64:	bf00      	nop
 8003e66:	3728      	adds	r7, #40	@ 0x28
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003f78:	4013      	ands	r3, r2
 8003f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003f88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f8e:	4a04      	ldr	r2, [pc, #16]	@ (8003fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	60d3      	str	r3, [r2, #12]
}
 8003f94:	bf00      	nop
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	e000ed00 	.word	0xe000ed00

08003fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fa8:	4b04      	ldr	r3, [pc, #16]	@ (8003fbc <__NVIC_GetPriorityGrouping+0x18>)
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	0a1b      	lsrs	r3, r3, #8
 8003fae:	f003 0307 	and.w	r3, r3, #7
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	e000ed00 	.word	0xe000ed00

08003fc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	db0b      	blt.n	8003fea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fd2:	79fb      	ldrb	r3, [r7, #7]
 8003fd4:	f003 021f 	and.w	r2, r3, #31
 8003fd8:	4907      	ldr	r1, [pc, #28]	@ (8003ff8 <__NVIC_EnableIRQ+0x38>)
 8003fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fde:	095b      	lsrs	r3, r3, #5
 8003fe0:	2001      	movs	r0, #1
 8003fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8003fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	e000e100 	.word	0xe000e100

08003ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	4603      	mov	r3, r0
 8004004:	6039      	str	r1, [r7, #0]
 8004006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800400c:	2b00      	cmp	r3, #0
 800400e:	db0a      	blt.n	8004026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	b2da      	uxtb	r2, r3
 8004014:	490c      	ldr	r1, [pc, #48]	@ (8004048 <__NVIC_SetPriority+0x4c>)
 8004016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800401a:	0112      	lsls	r2, r2, #4
 800401c:	b2d2      	uxtb	r2, r2
 800401e:	440b      	add	r3, r1
 8004020:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004024:	e00a      	b.n	800403c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	b2da      	uxtb	r2, r3
 800402a:	4908      	ldr	r1, [pc, #32]	@ (800404c <__NVIC_SetPriority+0x50>)
 800402c:	79fb      	ldrb	r3, [r7, #7]
 800402e:	f003 030f 	and.w	r3, r3, #15
 8004032:	3b04      	subs	r3, #4
 8004034:	0112      	lsls	r2, r2, #4
 8004036:	b2d2      	uxtb	r2, r2
 8004038:	440b      	add	r3, r1
 800403a:	761a      	strb	r2, [r3, #24]
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	e000e100 	.word	0xe000e100
 800404c:	e000ed00 	.word	0xe000ed00

08004050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004050:	b480      	push	{r7}
 8004052:	b089      	sub	sp, #36	@ 0x24
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	f1c3 0307 	rsb	r3, r3, #7
 800406a:	2b04      	cmp	r3, #4
 800406c:	bf28      	it	cs
 800406e:	2304      	movcs	r3, #4
 8004070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	3304      	adds	r3, #4
 8004076:	2b06      	cmp	r3, #6
 8004078:	d902      	bls.n	8004080 <NVIC_EncodePriority+0x30>
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	3b03      	subs	r3, #3
 800407e:	e000      	b.n	8004082 <NVIC_EncodePriority+0x32>
 8004080:	2300      	movs	r3, #0
 8004082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004084:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	fa02 f303 	lsl.w	r3, r2, r3
 800408e:	43da      	mvns	r2, r3
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	401a      	ands	r2, r3
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004098:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	fa01 f303 	lsl.w	r3, r1, r3
 80040a2:	43d9      	mvns	r1, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040a8:	4313      	orrs	r3, r2
         );
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3724      	adds	r7, #36	@ 0x24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
	...

080040b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040c8:	d301      	bcc.n	80040ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040ca:	2301      	movs	r3, #1
 80040cc:	e00f      	b.n	80040ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040ce:	4a0a      	ldr	r2, [pc, #40]	@ (80040f8 <SysTick_Config+0x40>)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3b01      	subs	r3, #1
 80040d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040d6:	210f      	movs	r1, #15
 80040d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80040dc:	f7ff ff8e 	bl	8003ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040e0:	4b05      	ldr	r3, [pc, #20]	@ (80040f8 <SysTick_Config+0x40>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040e6:	4b04      	ldr	r3, [pc, #16]	@ (80040f8 <SysTick_Config+0x40>)
 80040e8:	2207      	movs	r2, #7
 80040ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	e000e010 	.word	0xe000e010

080040fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7ff ff29 	bl	8003f5c <__NVIC_SetPriorityGrouping>
}
 800410a:	bf00      	nop
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004112:	b580      	push	{r7, lr}
 8004114:	b086      	sub	sp, #24
 8004116:	af00      	add	r7, sp, #0
 8004118:	4603      	mov	r3, r0
 800411a:	60b9      	str	r1, [r7, #8]
 800411c:	607a      	str	r2, [r7, #4]
 800411e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004120:	2300      	movs	r3, #0
 8004122:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004124:	f7ff ff3e 	bl	8003fa4 <__NVIC_GetPriorityGrouping>
 8004128:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	68b9      	ldr	r1, [r7, #8]
 800412e:	6978      	ldr	r0, [r7, #20]
 8004130:	f7ff ff8e 	bl	8004050 <NVIC_EncodePriority>
 8004134:	4602      	mov	r2, r0
 8004136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800413a:	4611      	mov	r1, r2
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff ff5d 	bl	8003ffc <__NVIC_SetPriority>
}
 8004142:	bf00      	nop
 8004144:	3718      	adds	r7, #24
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b082      	sub	sp, #8
 800414e:	af00      	add	r7, sp, #0
 8004150:	4603      	mov	r3, r0
 8004152:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004158:	4618      	mov	r0, r3
 800415a:	f7ff ff31 	bl	8003fc0 <__NVIC_EnableIRQ>
}
 800415e:	bf00      	nop
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b082      	sub	sp, #8
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7ff ffa2 	bl	80040b8 <SysTick_Config>
 8004174:	4603      	mov	r3, r0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
	...

08004180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004180:	b480      	push	{r7}
 8004182:	b089      	sub	sp, #36	@ 0x24
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800418a:	2300      	movs	r3, #0
 800418c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800418e:	2300      	movs	r3, #0
 8004190:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004192:	2300      	movs	r3, #0
 8004194:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004196:	2300      	movs	r3, #0
 8004198:	61fb      	str	r3, [r7, #28]
 800419a:	e165      	b.n	8004468 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800419c:	2201      	movs	r2, #1
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	fa02 f303 	lsl.w	r3, r2, r3
 80041a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	4013      	ands	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	f040 8154 	bne.w	8004462 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f003 0303 	and.w	r3, r3, #3
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d005      	beq.n	80041d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d130      	bne.n	8004234 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	2203      	movs	r2, #3
 80041de:	fa02 f303 	lsl.w	r3, r2, r3
 80041e2:	43db      	mvns	r3, r3
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	4013      	ands	r3, r2
 80041e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004208:	2201      	movs	r2, #1
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	fa02 f303 	lsl.w	r3, r2, r3
 8004210:	43db      	mvns	r3, r3
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	4013      	ands	r3, r2
 8004216:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	091b      	lsrs	r3, r3, #4
 800421e:	f003 0201 	and.w	r2, r3, #1
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	4313      	orrs	r3, r2
 800422c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f003 0303 	and.w	r3, r3, #3
 800423c:	2b03      	cmp	r3, #3
 800423e:	d017      	beq.n	8004270 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	2203      	movs	r2, #3
 800424c:	fa02 f303 	lsl.w	r3, r2, r3
 8004250:	43db      	mvns	r3, r3
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	4013      	ands	r3, r2
 8004256:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	fa02 f303 	lsl.w	r3, r2, r3
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	4313      	orrs	r3, r2
 8004268:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f003 0303 	and.w	r3, r3, #3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d123      	bne.n	80042c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	08da      	lsrs	r2, r3, #3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3208      	adds	r2, #8
 8004284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004288:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	f003 0307 	and.w	r3, r3, #7
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	220f      	movs	r2, #15
 8004294:	fa02 f303 	lsl.w	r3, r2, r3
 8004298:	43db      	mvns	r3, r3
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	4013      	ands	r3, r2
 800429e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	691a      	ldr	r2, [r3, #16]
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	f003 0307 	and.w	r3, r3, #7
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	08da      	lsrs	r2, r3, #3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	3208      	adds	r2, #8
 80042be:	69b9      	ldr	r1, [r7, #24]
 80042c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	2203      	movs	r2, #3
 80042d0:	fa02 f303 	lsl.w	r3, r2, r3
 80042d4:	43db      	mvns	r3, r3
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	4013      	ands	r3, r2
 80042da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f003 0203 	and.w	r2, r3, #3
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 80ae 	beq.w	8004462 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004306:	2300      	movs	r3, #0
 8004308:	60fb      	str	r3, [r7, #12]
 800430a:	4b5d      	ldr	r3, [pc, #372]	@ (8004480 <HAL_GPIO_Init+0x300>)
 800430c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800430e:	4a5c      	ldr	r2, [pc, #368]	@ (8004480 <HAL_GPIO_Init+0x300>)
 8004310:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004314:	6453      	str	r3, [r2, #68]	@ 0x44
 8004316:	4b5a      	ldr	r3, [pc, #360]	@ (8004480 <HAL_GPIO_Init+0x300>)
 8004318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800431a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800431e:	60fb      	str	r3, [r7, #12]
 8004320:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004322:	4a58      	ldr	r2, [pc, #352]	@ (8004484 <HAL_GPIO_Init+0x304>)
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	089b      	lsrs	r3, r3, #2
 8004328:	3302      	adds	r3, #2
 800432a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800432e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	f003 0303 	and.w	r3, r3, #3
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	220f      	movs	r2, #15
 800433a:	fa02 f303 	lsl.w	r3, r2, r3
 800433e:	43db      	mvns	r3, r3
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	4013      	ands	r3, r2
 8004344:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a4f      	ldr	r2, [pc, #316]	@ (8004488 <HAL_GPIO_Init+0x308>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d025      	beq.n	800439a <HAL_GPIO_Init+0x21a>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a4e      	ldr	r2, [pc, #312]	@ (800448c <HAL_GPIO_Init+0x30c>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d01f      	beq.n	8004396 <HAL_GPIO_Init+0x216>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a4d      	ldr	r2, [pc, #308]	@ (8004490 <HAL_GPIO_Init+0x310>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d019      	beq.n	8004392 <HAL_GPIO_Init+0x212>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a4c      	ldr	r2, [pc, #304]	@ (8004494 <HAL_GPIO_Init+0x314>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d013      	beq.n	800438e <HAL_GPIO_Init+0x20e>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a4b      	ldr	r2, [pc, #300]	@ (8004498 <HAL_GPIO_Init+0x318>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d00d      	beq.n	800438a <HAL_GPIO_Init+0x20a>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a4a      	ldr	r2, [pc, #296]	@ (800449c <HAL_GPIO_Init+0x31c>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d007      	beq.n	8004386 <HAL_GPIO_Init+0x206>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a49      	ldr	r2, [pc, #292]	@ (80044a0 <HAL_GPIO_Init+0x320>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d101      	bne.n	8004382 <HAL_GPIO_Init+0x202>
 800437e:	2306      	movs	r3, #6
 8004380:	e00c      	b.n	800439c <HAL_GPIO_Init+0x21c>
 8004382:	2307      	movs	r3, #7
 8004384:	e00a      	b.n	800439c <HAL_GPIO_Init+0x21c>
 8004386:	2305      	movs	r3, #5
 8004388:	e008      	b.n	800439c <HAL_GPIO_Init+0x21c>
 800438a:	2304      	movs	r3, #4
 800438c:	e006      	b.n	800439c <HAL_GPIO_Init+0x21c>
 800438e:	2303      	movs	r3, #3
 8004390:	e004      	b.n	800439c <HAL_GPIO_Init+0x21c>
 8004392:	2302      	movs	r3, #2
 8004394:	e002      	b.n	800439c <HAL_GPIO_Init+0x21c>
 8004396:	2301      	movs	r3, #1
 8004398:	e000      	b.n	800439c <HAL_GPIO_Init+0x21c>
 800439a:	2300      	movs	r3, #0
 800439c:	69fa      	ldr	r2, [r7, #28]
 800439e:	f002 0203 	and.w	r2, r2, #3
 80043a2:	0092      	lsls	r2, r2, #2
 80043a4:	4093      	lsls	r3, r2
 80043a6:	69ba      	ldr	r2, [r7, #24]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043ac:	4935      	ldr	r1, [pc, #212]	@ (8004484 <HAL_GPIO_Init+0x304>)
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	089b      	lsrs	r3, r3, #2
 80043b2:	3302      	adds	r3, #2
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043ba:	4b3a      	ldr	r3, [pc, #232]	@ (80044a4 <HAL_GPIO_Init+0x324>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	43db      	mvns	r3, r3
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	4013      	ands	r3, r2
 80043c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	4313      	orrs	r3, r2
 80043dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043de:	4a31      	ldr	r2, [pc, #196]	@ (80044a4 <HAL_GPIO_Init+0x324>)
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043e4:	4b2f      	ldr	r3, [pc, #188]	@ (80044a4 <HAL_GPIO_Init+0x324>)
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	43db      	mvns	r3, r3
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	4013      	ands	r3, r2
 80043f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d003      	beq.n	8004408 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	4313      	orrs	r3, r2
 8004406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004408:	4a26      	ldr	r2, [pc, #152]	@ (80044a4 <HAL_GPIO_Init+0x324>)
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800440e:	4b25      	ldr	r3, [pc, #148]	@ (80044a4 <HAL_GPIO_Init+0x324>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	43db      	mvns	r3, r3
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	4013      	ands	r3, r2
 800441c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d003      	beq.n	8004432 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	4313      	orrs	r3, r2
 8004430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004432:	4a1c      	ldr	r2, [pc, #112]	@ (80044a4 <HAL_GPIO_Init+0x324>)
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004438:	4b1a      	ldr	r3, [pc, #104]	@ (80044a4 <HAL_GPIO_Init+0x324>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	43db      	mvns	r3, r3
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	4013      	ands	r3, r2
 8004446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d003      	beq.n	800445c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	4313      	orrs	r3, r2
 800445a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800445c:	4a11      	ldr	r2, [pc, #68]	@ (80044a4 <HAL_GPIO_Init+0x324>)
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	3301      	adds	r3, #1
 8004466:	61fb      	str	r3, [r7, #28]
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	2b0f      	cmp	r3, #15
 800446c:	f67f ae96 	bls.w	800419c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004470:	bf00      	nop
 8004472:	bf00      	nop
 8004474:	3724      	adds	r7, #36	@ 0x24
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	40023800 	.word	0x40023800
 8004484:	40013800 	.word	0x40013800
 8004488:	40020000 	.word	0x40020000
 800448c:	40020400 	.word	0x40020400
 8004490:	40020800 	.word	0x40020800
 8004494:	40020c00 	.word	0x40020c00
 8004498:	40021000 	.word	0x40021000
 800449c:	40021400 	.word	0x40021400
 80044a0:	40021800 	.word	0x40021800
 80044a4:	40013c00 	.word	0x40013c00

080044a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	460b      	mov	r3, r1
 80044b2:	807b      	strh	r3, [r7, #2]
 80044b4:	4613      	mov	r3, r2
 80044b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044b8:	787b      	ldrb	r3, [r7, #1]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044be:	887a      	ldrh	r2, [r7, #2]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044c4:	e003      	b.n	80044ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044c6:	887b      	ldrh	r3, [r7, #2]
 80044c8:	041a      	lsls	r2, r3, #16
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	619a      	str	r2, [r3, #24]
}
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
	...

080044dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e12b      	b.n	8004746 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d106      	bne.n	8004508 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7fd ff7c 	bl	8002400 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2224      	movs	r2, #36	@ 0x24
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 0201 	bic.w	r2, r2, #1
 800451e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800452e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800453e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004540:	f000 fa52 	bl	80049e8 <HAL_RCC_GetPCLK1Freq>
 8004544:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	4a81      	ldr	r2, [pc, #516]	@ (8004750 <HAL_I2C_Init+0x274>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d807      	bhi.n	8004560 <HAL_I2C_Init+0x84>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4a80      	ldr	r2, [pc, #512]	@ (8004754 <HAL_I2C_Init+0x278>)
 8004554:	4293      	cmp	r3, r2
 8004556:	bf94      	ite	ls
 8004558:	2301      	movls	r3, #1
 800455a:	2300      	movhi	r3, #0
 800455c:	b2db      	uxtb	r3, r3
 800455e:	e006      	b.n	800456e <HAL_I2C_Init+0x92>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4a7d      	ldr	r2, [pc, #500]	@ (8004758 <HAL_I2C_Init+0x27c>)
 8004564:	4293      	cmp	r3, r2
 8004566:	bf94      	ite	ls
 8004568:	2301      	movls	r3, #1
 800456a:	2300      	movhi	r3, #0
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e0e7      	b.n	8004746 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	4a78      	ldr	r2, [pc, #480]	@ (800475c <HAL_I2C_Init+0x280>)
 800457a:	fba2 2303 	umull	r2, r3, r2, r3
 800457e:	0c9b      	lsrs	r3, r3, #18
 8004580:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	430a      	orrs	r2, r1
 8004594:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	4a6a      	ldr	r2, [pc, #424]	@ (8004750 <HAL_I2C_Init+0x274>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d802      	bhi.n	80045b0 <HAL_I2C_Init+0xd4>
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	3301      	adds	r3, #1
 80045ae:	e009      	b.n	80045c4 <HAL_I2C_Init+0xe8>
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80045b6:	fb02 f303 	mul.w	r3, r2, r3
 80045ba:	4a69      	ldr	r2, [pc, #420]	@ (8004760 <HAL_I2C_Init+0x284>)
 80045bc:	fba2 2303 	umull	r2, r3, r2, r3
 80045c0:	099b      	lsrs	r3, r3, #6
 80045c2:	3301      	adds	r3, #1
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6812      	ldr	r2, [r2, #0]
 80045c8:	430b      	orrs	r3, r1
 80045ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80045d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	495c      	ldr	r1, [pc, #368]	@ (8004750 <HAL_I2C_Init+0x274>)
 80045e0:	428b      	cmp	r3, r1
 80045e2:	d819      	bhi.n	8004618 <HAL_I2C_Init+0x13c>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	1e59      	subs	r1, r3, #1
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80045f2:	1c59      	adds	r1, r3, #1
 80045f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80045f8:	400b      	ands	r3, r1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <HAL_I2C_Init+0x138>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	1e59      	subs	r1, r3, #1
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	fbb1 f3f3 	udiv	r3, r1, r3
 800460c:	3301      	adds	r3, #1
 800460e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004612:	e051      	b.n	80046b8 <HAL_I2C_Init+0x1dc>
 8004614:	2304      	movs	r3, #4
 8004616:	e04f      	b.n	80046b8 <HAL_I2C_Init+0x1dc>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d111      	bne.n	8004644 <HAL_I2C_Init+0x168>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	1e58      	subs	r0, r3, #1
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6859      	ldr	r1, [r3, #4]
 8004628:	460b      	mov	r3, r1
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	440b      	add	r3, r1
 800462e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004632:	3301      	adds	r3, #1
 8004634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004638:	2b00      	cmp	r3, #0
 800463a:	bf0c      	ite	eq
 800463c:	2301      	moveq	r3, #1
 800463e:	2300      	movne	r3, #0
 8004640:	b2db      	uxtb	r3, r3
 8004642:	e012      	b.n	800466a <HAL_I2C_Init+0x18e>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	1e58      	subs	r0, r3, #1
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6859      	ldr	r1, [r3, #4]
 800464c:	460b      	mov	r3, r1
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	440b      	add	r3, r1
 8004652:	0099      	lsls	r1, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	fbb0 f3f3 	udiv	r3, r0, r3
 800465a:	3301      	adds	r3, #1
 800465c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004660:	2b00      	cmp	r3, #0
 8004662:	bf0c      	ite	eq
 8004664:	2301      	moveq	r3, #1
 8004666:	2300      	movne	r3, #0
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <HAL_I2C_Init+0x196>
 800466e:	2301      	movs	r3, #1
 8004670:	e022      	b.n	80046b8 <HAL_I2C_Init+0x1dc>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10e      	bne.n	8004698 <HAL_I2C_Init+0x1bc>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	1e58      	subs	r0, r3, #1
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6859      	ldr	r1, [r3, #4]
 8004682:	460b      	mov	r3, r1
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	440b      	add	r3, r1
 8004688:	fbb0 f3f3 	udiv	r3, r0, r3
 800468c:	3301      	adds	r3, #1
 800468e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004692:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004696:	e00f      	b.n	80046b8 <HAL_I2C_Init+0x1dc>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	1e58      	subs	r0, r3, #1
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6859      	ldr	r1, [r3, #4]
 80046a0:	460b      	mov	r3, r1
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	0099      	lsls	r1, r3, #2
 80046a8:	440b      	add	r3, r1
 80046aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80046ae:	3301      	adds	r3, #1
 80046b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046b8:	6879      	ldr	r1, [r7, #4]
 80046ba:	6809      	ldr	r1, [r1, #0]
 80046bc:	4313      	orrs	r3, r2
 80046be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	69da      	ldr	r2, [r3, #28]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	431a      	orrs	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80046e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6911      	ldr	r1, [r2, #16]
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	68d2      	ldr	r2, [r2, #12]
 80046f2:	4311      	orrs	r1, r2
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6812      	ldr	r2, [r2, #0]
 80046f8:	430b      	orrs	r3, r1
 80046fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	695a      	ldr	r2, [r3, #20]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	430a      	orrs	r2, r1
 8004716:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f042 0201 	orr.w	r2, r2, #1
 8004726:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2220      	movs	r2, #32
 8004732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	000186a0 	.word	0x000186a0
 8004754:	001e847f 	.word	0x001e847f
 8004758:	003d08ff 	.word	0x003d08ff
 800475c:	431bde83 	.word	0x431bde83
 8004760:	10624dd3 	.word	0x10624dd3

08004764 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800476a:	2300      	movs	r3, #0
 800476c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800476e:	2300      	movs	r3, #0
 8004770:	603b      	str	r3, [r7, #0]
 8004772:	4b20      	ldr	r3, [pc, #128]	@ (80047f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004776:	4a1f      	ldr	r2, [pc, #124]	@ (80047f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004778:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800477c:	6413      	str	r3, [r2, #64]	@ 0x40
 800477e:	4b1d      	ldr	r3, [pc, #116]	@ (80047f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004786:	603b      	str	r3, [r7, #0]
 8004788:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800478a:	4b1b      	ldr	r3, [pc, #108]	@ (80047f8 <HAL_PWREx_EnableOverDrive+0x94>)
 800478c:	2201      	movs	r2, #1
 800478e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004790:	f7fe f872 	bl	8002878 <HAL_GetTick>
 8004794:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004796:	e009      	b.n	80047ac <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004798:	f7fe f86e 	bl	8002878 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80047a6:	d901      	bls.n	80047ac <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e01f      	b.n	80047ec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80047ac:	4b13      	ldr	r3, [pc, #76]	@ (80047fc <HAL_PWREx_EnableOverDrive+0x98>)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047b8:	d1ee      	bne.n	8004798 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80047ba:	4b11      	ldr	r3, [pc, #68]	@ (8004800 <HAL_PWREx_EnableOverDrive+0x9c>)
 80047bc:	2201      	movs	r2, #1
 80047be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047c0:	f7fe f85a 	bl	8002878 <HAL_GetTick>
 80047c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80047c6:	e009      	b.n	80047dc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80047c8:	f7fe f856 	bl	8002878 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80047d6:	d901      	bls.n	80047dc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e007      	b.n	80047ec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80047dc:	4b07      	ldr	r3, [pc, #28]	@ (80047fc <HAL_PWREx_EnableOverDrive+0x98>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047e8:	d1ee      	bne.n	80047c8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	40023800 	.word	0x40023800
 80047f8:	420e0040 	.word	0x420e0040
 80047fc:	40007000 	.word	0x40007000
 8004800:	420e0044 	.word	0x420e0044

08004804 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e0cc      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004818:	4b68      	ldr	r3, [pc, #416]	@ (80049bc <HAL_RCC_ClockConfig+0x1b8>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 030f 	and.w	r3, r3, #15
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	429a      	cmp	r2, r3
 8004824:	d90c      	bls.n	8004840 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004826:	4b65      	ldr	r3, [pc, #404]	@ (80049bc <HAL_RCC_ClockConfig+0x1b8>)
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	b2d2      	uxtb	r2, r2
 800482c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800482e:	4b63      	ldr	r3, [pc, #396]	@ (80049bc <HAL_RCC_ClockConfig+0x1b8>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 030f 	and.w	r3, r3, #15
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	429a      	cmp	r2, r3
 800483a:	d001      	beq.n	8004840 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e0b8      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d020      	beq.n	800488e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0304 	and.w	r3, r3, #4
 8004854:	2b00      	cmp	r3, #0
 8004856:	d005      	beq.n	8004864 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004858:	4b59      	ldr	r3, [pc, #356]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	4a58      	ldr	r2, [pc, #352]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 800485e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004862:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0308 	and.w	r3, r3, #8
 800486c:	2b00      	cmp	r3, #0
 800486e:	d005      	beq.n	800487c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004870:	4b53      	ldr	r3, [pc, #332]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	4a52      	ldr	r2, [pc, #328]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004876:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800487a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800487c:	4b50      	ldr	r3, [pc, #320]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	494d      	ldr	r1, [pc, #308]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 800488a:	4313      	orrs	r3, r2
 800488c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d044      	beq.n	8004924 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d107      	bne.n	80048b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048a2:	4b47      	ldr	r3, [pc, #284]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d119      	bne.n	80048e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e07f      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d003      	beq.n	80048c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048be:	2b03      	cmp	r3, #3
 80048c0:	d107      	bne.n	80048d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048c2:	4b3f      	ldr	r3, [pc, #252]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d109      	bne.n	80048e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e06f      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048d2:	4b3b      	ldr	r3, [pc, #236]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e067      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048e2:	4b37      	ldr	r3, [pc, #220]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f023 0203 	bic.w	r2, r3, #3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	4934      	ldr	r1, [pc, #208]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048f4:	f7fd ffc0 	bl	8002878 <HAL_GetTick>
 80048f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048fa:	e00a      	b.n	8004912 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048fc:	f7fd ffbc 	bl	8002878 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	f241 3288 	movw	r2, #5000	@ 0x1388
 800490a:	4293      	cmp	r3, r2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e04f      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004912:	4b2b      	ldr	r3, [pc, #172]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 020c 	and.w	r2, r3, #12
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	429a      	cmp	r2, r3
 8004922:	d1eb      	bne.n	80048fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004924:	4b25      	ldr	r3, [pc, #148]	@ (80049bc <HAL_RCC_ClockConfig+0x1b8>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 030f 	and.w	r3, r3, #15
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d20c      	bcs.n	800494c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004932:	4b22      	ldr	r3, [pc, #136]	@ (80049bc <HAL_RCC_ClockConfig+0x1b8>)
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	b2d2      	uxtb	r2, r2
 8004938:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800493a:	4b20      	ldr	r3, [pc, #128]	@ (80049bc <HAL_RCC_ClockConfig+0x1b8>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	429a      	cmp	r2, r3
 8004946:	d001      	beq.n	800494c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e032      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b00      	cmp	r3, #0
 8004956:	d008      	beq.n	800496a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004958:	4b19      	ldr	r3, [pc, #100]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	4916      	ldr	r1, [pc, #88]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004966:	4313      	orrs	r3, r2
 8004968:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0308 	and.w	r3, r3, #8
 8004972:	2b00      	cmp	r3, #0
 8004974:	d009      	beq.n	800498a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004976:	4b12      	ldr	r3, [pc, #72]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	490e      	ldr	r1, [pc, #56]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004986:	4313      	orrs	r3, r2
 8004988:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800498a:	f000 f855 	bl	8004a38 <HAL_RCC_GetSysClockFreq>
 800498e:	4602      	mov	r2, r0
 8004990:	4b0b      	ldr	r3, [pc, #44]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	091b      	lsrs	r3, r3, #4
 8004996:	f003 030f 	and.w	r3, r3, #15
 800499a:	490a      	ldr	r1, [pc, #40]	@ (80049c4 <HAL_RCC_ClockConfig+0x1c0>)
 800499c:	5ccb      	ldrb	r3, [r1, r3]
 800499e:	fa22 f303 	lsr.w	r3, r2, r3
 80049a2:	4a09      	ldr	r2, [pc, #36]	@ (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 80049a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049a6:	4b09      	ldr	r3, [pc, #36]	@ (80049cc <HAL_RCC_ClockConfig+0x1c8>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fd ff20 	bl	80027f0 <HAL_InitTick>

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	40023c00 	.word	0x40023c00
 80049c0:	40023800 	.word	0x40023800
 80049c4:	080098b8 	.word	0x080098b8
 80049c8:	20000000 	.word	0x20000000
 80049cc:	20000004 	.word	0x20000004

080049d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049d0:	b480      	push	{r7}
 80049d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049d4:	4b03      	ldr	r3, [pc, #12]	@ (80049e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80049d6:	681b      	ldr	r3, [r3, #0]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	20000000 	.word	0x20000000

080049e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049ec:	f7ff fff0 	bl	80049d0 <HAL_RCC_GetHCLKFreq>
 80049f0:	4602      	mov	r2, r0
 80049f2:	4b05      	ldr	r3, [pc, #20]	@ (8004a08 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	0a9b      	lsrs	r3, r3, #10
 80049f8:	f003 0307 	and.w	r3, r3, #7
 80049fc:	4903      	ldr	r1, [pc, #12]	@ (8004a0c <HAL_RCC_GetPCLK1Freq+0x24>)
 80049fe:	5ccb      	ldrb	r3, [r1, r3]
 8004a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	40023800 	.word	0x40023800
 8004a0c:	080098c8 	.word	0x080098c8

08004a10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a14:	f7ff ffdc 	bl	80049d0 <HAL_RCC_GetHCLKFreq>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	4b05      	ldr	r3, [pc, #20]	@ (8004a30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	0b5b      	lsrs	r3, r3, #13
 8004a20:	f003 0307 	and.w	r3, r3, #7
 8004a24:	4903      	ldr	r1, [pc, #12]	@ (8004a34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a26:	5ccb      	ldrb	r3, [r1, r3]
 8004a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	40023800 	.word	0x40023800
 8004a34:	080098c8 	.word	0x080098c8

08004a38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a3c:	b0ae      	sub	sp, #184	@ 0xb8
 8004a3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004a46:	2300      	movs	r3, #0
 8004a48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004a52:	2300      	movs	r3, #0
 8004a54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a5e:	4bcb      	ldr	r3, [pc, #812]	@ (8004d8c <HAL_RCC_GetSysClockFreq+0x354>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 030c 	and.w	r3, r3, #12
 8004a66:	2b0c      	cmp	r3, #12
 8004a68:	f200 8206 	bhi.w	8004e78 <HAL_RCC_GetSysClockFreq+0x440>
 8004a6c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a74 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a72:	bf00      	nop
 8004a74:	08004aa9 	.word	0x08004aa9
 8004a78:	08004e79 	.word	0x08004e79
 8004a7c:	08004e79 	.word	0x08004e79
 8004a80:	08004e79 	.word	0x08004e79
 8004a84:	08004ab1 	.word	0x08004ab1
 8004a88:	08004e79 	.word	0x08004e79
 8004a8c:	08004e79 	.word	0x08004e79
 8004a90:	08004e79 	.word	0x08004e79
 8004a94:	08004ab9 	.word	0x08004ab9
 8004a98:	08004e79 	.word	0x08004e79
 8004a9c:	08004e79 	.word	0x08004e79
 8004aa0:	08004e79 	.word	0x08004e79
 8004aa4:	08004ca9 	.word	0x08004ca9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004aa8:	4bb9      	ldr	r3, [pc, #740]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x358>)
 8004aaa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8004aae:	e1e7      	b.n	8004e80 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ab0:	4bb8      	ldr	r3, [pc, #736]	@ (8004d94 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004ab2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004ab6:	e1e3      	b.n	8004e80 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ab8:	4bb4      	ldr	r3, [pc, #720]	@ (8004d8c <HAL_RCC_GetSysClockFreq+0x354>)
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ac0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ac4:	4bb1      	ldr	r3, [pc, #708]	@ (8004d8c <HAL_RCC_GetSysClockFreq+0x354>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d071      	beq.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ad0:	4bae      	ldr	r3, [pc, #696]	@ (8004d8c <HAL_RCC_GetSysClockFreq+0x354>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	099b      	lsrs	r3, r3, #6
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004adc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004ae0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004aec:	2300      	movs	r3, #0
 8004aee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004af2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004af6:	4622      	mov	r2, r4
 8004af8:	462b      	mov	r3, r5
 8004afa:	f04f 0000 	mov.w	r0, #0
 8004afe:	f04f 0100 	mov.w	r1, #0
 8004b02:	0159      	lsls	r1, r3, #5
 8004b04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b08:	0150      	lsls	r0, r2, #5
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	4621      	mov	r1, r4
 8004b10:	1a51      	subs	r1, r2, r1
 8004b12:	6439      	str	r1, [r7, #64]	@ 0x40
 8004b14:	4629      	mov	r1, r5
 8004b16:	eb63 0301 	sbc.w	r3, r3, r1
 8004b1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b1c:	f04f 0200 	mov.w	r2, #0
 8004b20:	f04f 0300 	mov.w	r3, #0
 8004b24:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004b28:	4649      	mov	r1, r9
 8004b2a:	018b      	lsls	r3, r1, #6
 8004b2c:	4641      	mov	r1, r8
 8004b2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b32:	4641      	mov	r1, r8
 8004b34:	018a      	lsls	r2, r1, #6
 8004b36:	4641      	mov	r1, r8
 8004b38:	1a51      	subs	r1, r2, r1
 8004b3a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004b3c:	4649      	mov	r1, r9
 8004b3e:	eb63 0301 	sbc.w	r3, r3, r1
 8004b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004b50:	4649      	mov	r1, r9
 8004b52:	00cb      	lsls	r3, r1, #3
 8004b54:	4641      	mov	r1, r8
 8004b56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b5a:	4641      	mov	r1, r8
 8004b5c:	00ca      	lsls	r2, r1, #3
 8004b5e:	4610      	mov	r0, r2
 8004b60:	4619      	mov	r1, r3
 8004b62:	4603      	mov	r3, r0
 8004b64:	4622      	mov	r2, r4
 8004b66:	189b      	adds	r3, r3, r2
 8004b68:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b6a:	462b      	mov	r3, r5
 8004b6c:	460a      	mov	r2, r1
 8004b6e:	eb42 0303 	adc.w	r3, r2, r3
 8004b72:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b74:	f04f 0200 	mov.w	r2, #0
 8004b78:	f04f 0300 	mov.w	r3, #0
 8004b7c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004b80:	4629      	mov	r1, r5
 8004b82:	024b      	lsls	r3, r1, #9
 8004b84:	4621      	mov	r1, r4
 8004b86:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b8a:	4621      	mov	r1, r4
 8004b8c:	024a      	lsls	r2, r1, #9
 8004b8e:	4610      	mov	r0, r2
 8004b90:	4619      	mov	r1, r3
 8004b92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b96:	2200      	movs	r2, #0
 8004b98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b9c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ba0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004ba4:	f7fc f870 	bl	8000c88 <__aeabi_uldivmod>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	460b      	mov	r3, r1
 8004bac:	4613      	mov	r3, r2
 8004bae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004bb2:	e067      	b.n	8004c84 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bb4:	4b75      	ldr	r3, [pc, #468]	@ (8004d8c <HAL_RCC_GetSysClockFreq+0x354>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	099b      	lsrs	r3, r3, #6
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004bc0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004bc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004bc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bcc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004bce:	2300      	movs	r3, #0
 8004bd0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004bd2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004bd6:	4622      	mov	r2, r4
 8004bd8:	462b      	mov	r3, r5
 8004bda:	f04f 0000 	mov.w	r0, #0
 8004bde:	f04f 0100 	mov.w	r1, #0
 8004be2:	0159      	lsls	r1, r3, #5
 8004be4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004be8:	0150      	lsls	r0, r2, #5
 8004bea:	4602      	mov	r2, r0
 8004bec:	460b      	mov	r3, r1
 8004bee:	4621      	mov	r1, r4
 8004bf0:	1a51      	subs	r1, r2, r1
 8004bf2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004bf4:	4629      	mov	r1, r5
 8004bf6:	eb63 0301 	sbc.w	r3, r3, r1
 8004bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bfc:	f04f 0200 	mov.w	r2, #0
 8004c00:	f04f 0300 	mov.w	r3, #0
 8004c04:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004c08:	4649      	mov	r1, r9
 8004c0a:	018b      	lsls	r3, r1, #6
 8004c0c:	4641      	mov	r1, r8
 8004c0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c12:	4641      	mov	r1, r8
 8004c14:	018a      	lsls	r2, r1, #6
 8004c16:	4641      	mov	r1, r8
 8004c18:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c1c:	4649      	mov	r1, r9
 8004c1e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c22:	f04f 0200 	mov.w	r2, #0
 8004c26:	f04f 0300 	mov.w	r3, #0
 8004c2a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c2e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c36:	4692      	mov	sl, r2
 8004c38:	469b      	mov	fp, r3
 8004c3a:	4623      	mov	r3, r4
 8004c3c:	eb1a 0303 	adds.w	r3, sl, r3
 8004c40:	623b      	str	r3, [r7, #32]
 8004c42:	462b      	mov	r3, r5
 8004c44:	eb4b 0303 	adc.w	r3, fp, r3
 8004c48:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c4a:	f04f 0200 	mov.w	r2, #0
 8004c4e:	f04f 0300 	mov.w	r3, #0
 8004c52:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004c56:	4629      	mov	r1, r5
 8004c58:	028b      	lsls	r3, r1, #10
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c60:	4621      	mov	r1, r4
 8004c62:	028a      	lsls	r2, r1, #10
 8004c64:	4610      	mov	r0, r2
 8004c66:	4619      	mov	r1, r3
 8004c68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c70:	677a      	str	r2, [r7, #116]	@ 0x74
 8004c72:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004c76:	f7fc f807 	bl	8000c88 <__aeabi_uldivmod>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	4613      	mov	r3, r2
 8004c80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c84:	4b41      	ldr	r3, [pc, #260]	@ (8004d8c <HAL_RCC_GetSysClockFreq+0x354>)
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	0c1b      	lsrs	r3, r3, #16
 8004c8a:	f003 0303 	and.w	r3, r3, #3
 8004c8e:	3301      	adds	r3, #1
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8004c96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004ca6:	e0eb      	b.n	8004e80 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ca8:	4b38      	ldr	r3, [pc, #224]	@ (8004d8c <HAL_RCC_GetSysClockFreq+0x354>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cb4:	4b35      	ldr	r3, [pc, #212]	@ (8004d8c <HAL_RCC_GetSysClockFreq+0x354>)
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d06b      	beq.n	8004d98 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cc0:	4b32      	ldr	r3, [pc, #200]	@ (8004d8c <HAL_RCC_GetSysClockFreq+0x354>)
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	099b      	lsrs	r3, r3, #6
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004ccc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cd2:	663b      	str	r3, [r7, #96]	@ 0x60
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	667b      	str	r3, [r7, #100]	@ 0x64
 8004cd8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004cdc:	4622      	mov	r2, r4
 8004cde:	462b      	mov	r3, r5
 8004ce0:	f04f 0000 	mov.w	r0, #0
 8004ce4:	f04f 0100 	mov.w	r1, #0
 8004ce8:	0159      	lsls	r1, r3, #5
 8004cea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cee:	0150      	lsls	r0, r2, #5
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	4621      	mov	r1, r4
 8004cf6:	1a51      	subs	r1, r2, r1
 8004cf8:	61b9      	str	r1, [r7, #24]
 8004cfa:	4629      	mov	r1, r5
 8004cfc:	eb63 0301 	sbc.w	r3, r3, r1
 8004d00:	61fb      	str	r3, [r7, #28]
 8004d02:	f04f 0200 	mov.w	r2, #0
 8004d06:	f04f 0300 	mov.w	r3, #0
 8004d0a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004d0e:	4659      	mov	r1, fp
 8004d10:	018b      	lsls	r3, r1, #6
 8004d12:	4651      	mov	r1, sl
 8004d14:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d18:	4651      	mov	r1, sl
 8004d1a:	018a      	lsls	r2, r1, #6
 8004d1c:	4651      	mov	r1, sl
 8004d1e:	ebb2 0801 	subs.w	r8, r2, r1
 8004d22:	4659      	mov	r1, fp
 8004d24:	eb63 0901 	sbc.w	r9, r3, r1
 8004d28:	f04f 0200 	mov.w	r2, #0
 8004d2c:	f04f 0300 	mov.w	r3, #0
 8004d30:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d34:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d38:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d3c:	4690      	mov	r8, r2
 8004d3e:	4699      	mov	r9, r3
 8004d40:	4623      	mov	r3, r4
 8004d42:	eb18 0303 	adds.w	r3, r8, r3
 8004d46:	613b      	str	r3, [r7, #16]
 8004d48:	462b      	mov	r3, r5
 8004d4a:	eb49 0303 	adc.w	r3, r9, r3
 8004d4e:	617b      	str	r3, [r7, #20]
 8004d50:	f04f 0200 	mov.w	r2, #0
 8004d54:	f04f 0300 	mov.w	r3, #0
 8004d58:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004d5c:	4629      	mov	r1, r5
 8004d5e:	024b      	lsls	r3, r1, #9
 8004d60:	4621      	mov	r1, r4
 8004d62:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d66:	4621      	mov	r1, r4
 8004d68:	024a      	lsls	r2, r1, #9
 8004d6a:	4610      	mov	r0, r2
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d72:	2200      	movs	r2, #0
 8004d74:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d76:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004d78:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004d7c:	f7fb ff84 	bl	8000c88 <__aeabi_uldivmod>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	4613      	mov	r3, r2
 8004d86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d8a:	e065      	b.n	8004e58 <HAL_RCC_GetSysClockFreq+0x420>
 8004d8c:	40023800 	.word	0x40023800
 8004d90:	00f42400 	.word	0x00f42400
 8004d94:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d98:	4b3d      	ldr	r3, [pc, #244]	@ (8004e90 <HAL_RCC_GetSysClockFreq+0x458>)
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	099b      	lsrs	r3, r3, #6
 8004d9e:	2200      	movs	r2, #0
 8004da0:	4618      	mov	r0, r3
 8004da2:	4611      	mov	r1, r2
 8004da4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004da8:	653b      	str	r3, [r7, #80]	@ 0x50
 8004daa:	2300      	movs	r3, #0
 8004dac:	657b      	str	r3, [r7, #84]	@ 0x54
 8004dae:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004db2:	4642      	mov	r2, r8
 8004db4:	464b      	mov	r3, r9
 8004db6:	f04f 0000 	mov.w	r0, #0
 8004dba:	f04f 0100 	mov.w	r1, #0
 8004dbe:	0159      	lsls	r1, r3, #5
 8004dc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dc4:	0150      	lsls	r0, r2, #5
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	460b      	mov	r3, r1
 8004dca:	4641      	mov	r1, r8
 8004dcc:	1a51      	subs	r1, r2, r1
 8004dce:	60b9      	str	r1, [r7, #8]
 8004dd0:	4649      	mov	r1, r9
 8004dd2:	eb63 0301 	sbc.w	r3, r3, r1
 8004dd6:	60fb      	str	r3, [r7, #12]
 8004dd8:	f04f 0200 	mov.w	r2, #0
 8004ddc:	f04f 0300 	mov.w	r3, #0
 8004de0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004de4:	4659      	mov	r1, fp
 8004de6:	018b      	lsls	r3, r1, #6
 8004de8:	4651      	mov	r1, sl
 8004dea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004dee:	4651      	mov	r1, sl
 8004df0:	018a      	lsls	r2, r1, #6
 8004df2:	4651      	mov	r1, sl
 8004df4:	1a54      	subs	r4, r2, r1
 8004df6:	4659      	mov	r1, fp
 8004df8:	eb63 0501 	sbc.w	r5, r3, r1
 8004dfc:	f04f 0200 	mov.w	r2, #0
 8004e00:	f04f 0300 	mov.w	r3, #0
 8004e04:	00eb      	lsls	r3, r5, #3
 8004e06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e0a:	00e2      	lsls	r2, r4, #3
 8004e0c:	4614      	mov	r4, r2
 8004e0e:	461d      	mov	r5, r3
 8004e10:	4643      	mov	r3, r8
 8004e12:	18e3      	adds	r3, r4, r3
 8004e14:	603b      	str	r3, [r7, #0]
 8004e16:	464b      	mov	r3, r9
 8004e18:	eb45 0303 	adc.w	r3, r5, r3
 8004e1c:	607b      	str	r3, [r7, #4]
 8004e1e:	f04f 0200 	mov.w	r2, #0
 8004e22:	f04f 0300 	mov.w	r3, #0
 8004e26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e2a:	4629      	mov	r1, r5
 8004e2c:	028b      	lsls	r3, r1, #10
 8004e2e:	4621      	mov	r1, r4
 8004e30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e34:	4621      	mov	r1, r4
 8004e36:	028a      	lsls	r2, r1, #10
 8004e38:	4610      	mov	r0, r2
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e40:	2200      	movs	r2, #0
 8004e42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e44:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004e46:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004e4a:	f7fb ff1d 	bl	8000c88 <__aeabi_uldivmod>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	460b      	mov	r3, r1
 8004e52:	4613      	mov	r3, r2
 8004e54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004e58:	4b0d      	ldr	r3, [pc, #52]	@ (8004e90 <HAL_RCC_GetSysClockFreq+0x458>)
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	0f1b      	lsrs	r3, r3, #28
 8004e5e:	f003 0307 	and.w	r3, r3, #7
 8004e62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8004e66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004e6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e76:	e003      	b.n	8004e80 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e78:	4b06      	ldr	r3, [pc, #24]	@ (8004e94 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004e7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e7e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	37b8      	adds	r7, #184	@ 0xb8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e8e:	bf00      	nop
 8004e90:	40023800 	.word	0x40023800
 8004e94:	00f42400 	.word	0x00f42400

08004e98 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e28d      	b.n	80053c6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f000 8083 	beq.w	8004fbe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004eb8:	4b94      	ldr	r3, [pc, #592]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f003 030c 	and.w	r3, r3, #12
 8004ec0:	2b04      	cmp	r3, #4
 8004ec2:	d019      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ec4:	4b91      	ldr	r3, [pc, #580]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	d106      	bne.n	8004ede <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ed0:	4b8e      	ldr	r3, [pc, #568]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ed8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004edc:	d00c      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ede:	4b8b      	ldr	r3, [pc, #556]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ee6:	2b0c      	cmp	r3, #12
 8004ee8:	d112      	bne.n	8004f10 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eea:	4b88      	ldr	r3, [pc, #544]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ef2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ef6:	d10b      	bne.n	8004f10 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ef8:	4b84      	ldr	r3, [pc, #528]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d05b      	beq.n	8004fbc <HAL_RCC_OscConfig+0x124>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d157      	bne.n	8004fbc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e25a      	b.n	80053c6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f18:	d106      	bne.n	8004f28 <HAL_RCC_OscConfig+0x90>
 8004f1a:	4b7c      	ldr	r3, [pc, #496]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a7b      	ldr	r2, [pc, #492]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f24:	6013      	str	r3, [r2, #0]
 8004f26:	e01d      	b.n	8004f64 <HAL_RCC_OscConfig+0xcc>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f30:	d10c      	bne.n	8004f4c <HAL_RCC_OscConfig+0xb4>
 8004f32:	4b76      	ldr	r3, [pc, #472]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a75      	ldr	r2, [pc, #468]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004f38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f3c:	6013      	str	r3, [r2, #0]
 8004f3e:	4b73      	ldr	r3, [pc, #460]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a72      	ldr	r2, [pc, #456]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004f44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f48:	6013      	str	r3, [r2, #0]
 8004f4a:	e00b      	b.n	8004f64 <HAL_RCC_OscConfig+0xcc>
 8004f4c:	4b6f      	ldr	r3, [pc, #444]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a6e      	ldr	r2, [pc, #440]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004f52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f56:	6013      	str	r3, [r2, #0]
 8004f58:	4b6c      	ldr	r3, [pc, #432]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a6b      	ldr	r2, [pc, #428]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004f5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d013      	beq.n	8004f94 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f6c:	f7fd fc84 	bl	8002878 <HAL_GetTick>
 8004f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f72:	e008      	b.n	8004f86 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f74:	f7fd fc80 	bl	8002878 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b64      	cmp	r3, #100	@ 0x64
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e21f      	b.n	80053c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f86:	4b61      	ldr	r3, [pc, #388]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d0f0      	beq.n	8004f74 <HAL_RCC_OscConfig+0xdc>
 8004f92:	e014      	b.n	8004fbe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f94:	f7fd fc70 	bl	8002878 <HAL_GetTick>
 8004f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f9a:	e008      	b.n	8004fae <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f9c:	f7fd fc6c 	bl	8002878 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b64      	cmp	r3, #100	@ 0x64
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e20b      	b.n	80053c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fae:	4b57      	ldr	r3, [pc, #348]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1f0      	bne.n	8004f9c <HAL_RCC_OscConfig+0x104>
 8004fba:	e000      	b.n	8004fbe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d06f      	beq.n	80050aa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004fca:	4b50      	ldr	r3, [pc, #320]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 030c 	and.w	r3, r3, #12
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d017      	beq.n	8005006 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004fd6:	4b4d      	ldr	r3, [pc, #308]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004fde:	2b08      	cmp	r3, #8
 8004fe0:	d105      	bne.n	8004fee <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004fe2:	4b4a      	ldr	r3, [pc, #296]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00b      	beq.n	8005006 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fee:	4b47      	ldr	r3, [pc, #284]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004ff6:	2b0c      	cmp	r3, #12
 8004ff8:	d11c      	bne.n	8005034 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ffa:	4b44      	ldr	r3, [pc, #272]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d116      	bne.n	8005034 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005006:	4b41      	ldr	r3, [pc, #260]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d005      	beq.n	800501e <HAL_RCC_OscConfig+0x186>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d001      	beq.n	800501e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e1d3      	b.n	80053c6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800501e:	4b3b      	ldr	r3, [pc, #236]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	00db      	lsls	r3, r3, #3
 800502c:	4937      	ldr	r1, [pc, #220]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 800502e:	4313      	orrs	r3, r2
 8005030:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005032:	e03a      	b.n	80050aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d020      	beq.n	800507e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800503c:	4b34      	ldr	r3, [pc, #208]	@ (8005110 <HAL_RCC_OscConfig+0x278>)
 800503e:	2201      	movs	r2, #1
 8005040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005042:	f7fd fc19 	bl	8002878 <HAL_GetTick>
 8005046:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005048:	e008      	b.n	800505c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800504a:	f7fd fc15 	bl	8002878 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b02      	cmp	r3, #2
 8005056:	d901      	bls.n	800505c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e1b4      	b.n	80053c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800505c:	4b2b      	ldr	r3, [pc, #172]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d0f0      	beq.n	800504a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005068:	4b28      	ldr	r3, [pc, #160]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	00db      	lsls	r3, r3, #3
 8005076:	4925      	ldr	r1, [pc, #148]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8005078:	4313      	orrs	r3, r2
 800507a:	600b      	str	r3, [r1, #0]
 800507c:	e015      	b.n	80050aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800507e:	4b24      	ldr	r3, [pc, #144]	@ (8005110 <HAL_RCC_OscConfig+0x278>)
 8005080:	2200      	movs	r2, #0
 8005082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005084:	f7fd fbf8 	bl	8002878 <HAL_GetTick>
 8005088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800508a:	e008      	b.n	800509e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800508c:	f7fd fbf4 	bl	8002878 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e193      	b.n	80053c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800509e:	4b1b      	ldr	r3, [pc, #108]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1f0      	bne.n	800508c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0308 	and.w	r3, r3, #8
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d036      	beq.n	8005124 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d016      	beq.n	80050ec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050be:	4b15      	ldr	r3, [pc, #84]	@ (8005114 <HAL_RCC_OscConfig+0x27c>)
 80050c0:	2201      	movs	r2, #1
 80050c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c4:	f7fd fbd8 	bl	8002878 <HAL_GetTick>
 80050c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ca:	e008      	b.n	80050de <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050cc:	f7fd fbd4 	bl	8002878 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d901      	bls.n	80050de <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e173      	b.n	80053c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050de:	4b0b      	ldr	r3, [pc, #44]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 80050e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d0f0      	beq.n	80050cc <HAL_RCC_OscConfig+0x234>
 80050ea:	e01b      	b.n	8005124 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050ec:	4b09      	ldr	r3, [pc, #36]	@ (8005114 <HAL_RCC_OscConfig+0x27c>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050f2:	f7fd fbc1 	bl	8002878 <HAL_GetTick>
 80050f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050f8:	e00e      	b.n	8005118 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050fa:	f7fd fbbd 	bl	8002878 <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	2b02      	cmp	r3, #2
 8005106:	d907      	bls.n	8005118 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e15c      	b.n	80053c6 <HAL_RCC_OscConfig+0x52e>
 800510c:	40023800 	.word	0x40023800
 8005110:	42470000 	.word	0x42470000
 8005114:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005118:	4b8a      	ldr	r3, [pc, #552]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 800511a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1ea      	bne.n	80050fa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0304 	and.w	r3, r3, #4
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 8097 	beq.w	8005260 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005132:	2300      	movs	r3, #0
 8005134:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005136:	4b83      	ldr	r3, [pc, #524]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 8005138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10f      	bne.n	8005162 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005142:	2300      	movs	r3, #0
 8005144:	60bb      	str	r3, [r7, #8]
 8005146:	4b7f      	ldr	r3, [pc, #508]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 8005148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800514a:	4a7e      	ldr	r2, [pc, #504]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 800514c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005150:	6413      	str	r3, [r2, #64]	@ 0x40
 8005152:	4b7c      	ldr	r3, [pc, #496]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 8005154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800515a:	60bb      	str	r3, [r7, #8]
 800515c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800515e:	2301      	movs	r3, #1
 8005160:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005162:	4b79      	ldr	r3, [pc, #484]	@ (8005348 <HAL_RCC_OscConfig+0x4b0>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800516a:	2b00      	cmp	r3, #0
 800516c:	d118      	bne.n	80051a0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800516e:	4b76      	ldr	r3, [pc, #472]	@ (8005348 <HAL_RCC_OscConfig+0x4b0>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a75      	ldr	r2, [pc, #468]	@ (8005348 <HAL_RCC_OscConfig+0x4b0>)
 8005174:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005178:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800517a:	f7fd fb7d 	bl	8002878 <HAL_GetTick>
 800517e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005180:	e008      	b.n	8005194 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005182:	f7fd fb79 	bl	8002878 <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	2b02      	cmp	r3, #2
 800518e:	d901      	bls.n	8005194 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e118      	b.n	80053c6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005194:	4b6c      	ldr	r3, [pc, #432]	@ (8005348 <HAL_RCC_OscConfig+0x4b0>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800519c:	2b00      	cmp	r3, #0
 800519e:	d0f0      	beq.n	8005182 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d106      	bne.n	80051b6 <HAL_RCC_OscConfig+0x31e>
 80051a8:	4b66      	ldr	r3, [pc, #408]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 80051aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ac:	4a65      	ldr	r2, [pc, #404]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 80051ae:	f043 0301 	orr.w	r3, r3, #1
 80051b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80051b4:	e01c      	b.n	80051f0 <HAL_RCC_OscConfig+0x358>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	2b05      	cmp	r3, #5
 80051bc:	d10c      	bne.n	80051d8 <HAL_RCC_OscConfig+0x340>
 80051be:	4b61      	ldr	r3, [pc, #388]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 80051c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051c2:	4a60      	ldr	r2, [pc, #384]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 80051c4:	f043 0304 	orr.w	r3, r3, #4
 80051c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80051ca:	4b5e      	ldr	r3, [pc, #376]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 80051cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ce:	4a5d      	ldr	r2, [pc, #372]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 80051d0:	f043 0301 	orr.w	r3, r3, #1
 80051d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80051d6:	e00b      	b.n	80051f0 <HAL_RCC_OscConfig+0x358>
 80051d8:	4b5a      	ldr	r3, [pc, #360]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 80051da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051dc:	4a59      	ldr	r2, [pc, #356]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 80051de:	f023 0301 	bic.w	r3, r3, #1
 80051e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80051e4:	4b57      	ldr	r3, [pc, #348]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 80051e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051e8:	4a56      	ldr	r2, [pc, #344]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 80051ea:	f023 0304 	bic.w	r3, r3, #4
 80051ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d015      	beq.n	8005224 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051f8:	f7fd fb3e 	bl	8002878 <HAL_GetTick>
 80051fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051fe:	e00a      	b.n	8005216 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005200:	f7fd fb3a 	bl	8002878 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800520e:	4293      	cmp	r3, r2
 8005210:	d901      	bls.n	8005216 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e0d7      	b.n	80053c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005216:	4b4b      	ldr	r3, [pc, #300]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 8005218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800521a:	f003 0302 	and.w	r3, r3, #2
 800521e:	2b00      	cmp	r3, #0
 8005220:	d0ee      	beq.n	8005200 <HAL_RCC_OscConfig+0x368>
 8005222:	e014      	b.n	800524e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005224:	f7fd fb28 	bl	8002878 <HAL_GetTick>
 8005228:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800522a:	e00a      	b.n	8005242 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800522c:	f7fd fb24 	bl	8002878 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	f241 3288 	movw	r2, #5000	@ 0x1388
 800523a:	4293      	cmp	r3, r2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e0c1      	b.n	80053c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005242:	4b40      	ldr	r3, [pc, #256]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 8005244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1ee      	bne.n	800522c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800524e:	7dfb      	ldrb	r3, [r7, #23]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d105      	bne.n	8005260 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005254:	4b3b      	ldr	r3, [pc, #236]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 8005256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005258:	4a3a      	ldr	r2, [pc, #232]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 800525a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800525e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 80ad 	beq.w	80053c4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800526a:	4b36      	ldr	r3, [pc, #216]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f003 030c 	and.w	r3, r3, #12
 8005272:	2b08      	cmp	r3, #8
 8005274:	d060      	beq.n	8005338 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	2b02      	cmp	r3, #2
 800527c:	d145      	bne.n	800530a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800527e:	4b33      	ldr	r3, [pc, #204]	@ (800534c <HAL_RCC_OscConfig+0x4b4>)
 8005280:	2200      	movs	r2, #0
 8005282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005284:	f7fd faf8 	bl	8002878 <HAL_GetTick>
 8005288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800528a:	e008      	b.n	800529e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800528c:	f7fd faf4 	bl	8002878 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e093      	b.n	80053c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800529e:	4b29      	ldr	r3, [pc, #164]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1f0      	bne.n	800528c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	69da      	ldr	r2, [r3, #28]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	431a      	orrs	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b8:	019b      	lsls	r3, r3, #6
 80052ba:	431a      	orrs	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c0:	085b      	lsrs	r3, r3, #1
 80052c2:	3b01      	subs	r3, #1
 80052c4:	041b      	lsls	r3, r3, #16
 80052c6:	431a      	orrs	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052cc:	061b      	lsls	r3, r3, #24
 80052ce:	431a      	orrs	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052d4:	071b      	lsls	r3, r3, #28
 80052d6:	491b      	ldr	r1, [pc, #108]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052dc:	4b1b      	ldr	r3, [pc, #108]	@ (800534c <HAL_RCC_OscConfig+0x4b4>)
 80052de:	2201      	movs	r2, #1
 80052e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e2:	f7fd fac9 	bl	8002878 <HAL_GetTick>
 80052e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052e8:	e008      	b.n	80052fc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052ea:	f7fd fac5 	bl	8002878 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d901      	bls.n	80052fc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e064      	b.n	80053c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052fc:	4b11      	ldr	r3, [pc, #68]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d0f0      	beq.n	80052ea <HAL_RCC_OscConfig+0x452>
 8005308:	e05c      	b.n	80053c4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800530a:	4b10      	ldr	r3, [pc, #64]	@ (800534c <HAL_RCC_OscConfig+0x4b4>)
 800530c:	2200      	movs	r2, #0
 800530e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005310:	f7fd fab2 	bl	8002878 <HAL_GetTick>
 8005314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005316:	e008      	b.n	800532a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005318:	f7fd faae 	bl	8002878 <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b02      	cmp	r3, #2
 8005324:	d901      	bls.n	800532a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e04d      	b.n	80053c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800532a:	4b06      	ldr	r3, [pc, #24]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1f0      	bne.n	8005318 <HAL_RCC_OscConfig+0x480>
 8005336:	e045      	b.n	80053c4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d107      	bne.n	8005350 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e040      	b.n	80053c6 <HAL_RCC_OscConfig+0x52e>
 8005344:	40023800 	.word	0x40023800
 8005348:	40007000 	.word	0x40007000
 800534c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005350:	4b1f      	ldr	r3, [pc, #124]	@ (80053d0 <HAL_RCC_OscConfig+0x538>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d030      	beq.n	80053c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005368:	429a      	cmp	r2, r3
 800536a:	d129      	bne.n	80053c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005376:	429a      	cmp	r2, r3
 8005378:	d122      	bne.n	80053c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005380:	4013      	ands	r3, r2
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005386:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005388:	4293      	cmp	r3, r2
 800538a:	d119      	bne.n	80053c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005396:	085b      	lsrs	r3, r3, #1
 8005398:	3b01      	subs	r3, #1
 800539a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800539c:	429a      	cmp	r2, r3
 800539e:	d10f      	bne.n	80053c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d107      	bne.n	80053c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053bc:	429a      	cmp	r2, r3
 80053be:	d001      	beq.n	80053c4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e000      	b.n	80053c6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3718      	adds	r7, #24
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	40023800 	.word	0x40023800

080053d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e042      	b.n	800546c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d106      	bne.n	8005400 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f7fd f848 	bl	8002490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2224      	movs	r2, #36	@ 0x24
 8005404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68da      	ldr	r2, [r3, #12]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005416:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 f973 	bl	8005704 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	691a      	ldr	r2, [r3, #16]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800542c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	695a      	ldr	r2, [r3, #20]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800543c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68da      	ldr	r2, [r3, #12]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800544c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2220      	movs	r2, #32
 8005458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2220      	movs	r2, #32
 8005460:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b08a      	sub	sp, #40	@ 0x28
 8005478:	af02      	add	r7, sp, #8
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	603b      	str	r3, [r7, #0]
 8005480:	4613      	mov	r3, r2
 8005482:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005484:	2300      	movs	r3, #0
 8005486:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2b20      	cmp	r3, #32
 8005492:	d175      	bne.n	8005580 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d002      	beq.n	80054a0 <HAL_UART_Transmit+0x2c>
 800549a:	88fb      	ldrh	r3, [r7, #6]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d101      	bne.n	80054a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e06e      	b.n	8005582 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2221      	movs	r2, #33	@ 0x21
 80054ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054b2:	f7fd f9e1 	bl	8002878 <HAL_GetTick>
 80054b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	88fa      	ldrh	r2, [r7, #6]
 80054bc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	88fa      	ldrh	r2, [r7, #6]
 80054c2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054cc:	d108      	bne.n	80054e0 <HAL_UART_Transmit+0x6c>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d104      	bne.n	80054e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80054d6:	2300      	movs	r3, #0
 80054d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	61bb      	str	r3, [r7, #24]
 80054de:	e003      	b.n	80054e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054e4:	2300      	movs	r3, #0
 80054e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80054e8:	e02e      	b.n	8005548 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	2200      	movs	r2, #0
 80054f2:	2180      	movs	r1, #128	@ 0x80
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f000 f848 	bl	800558a <UART_WaitOnFlagUntilTimeout>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d005      	beq.n	800550c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2220      	movs	r2, #32
 8005504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e03a      	b.n	8005582 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10b      	bne.n	800552a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	881b      	ldrh	r3, [r3, #0]
 8005516:	461a      	mov	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005520:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	3302      	adds	r3, #2
 8005526:	61bb      	str	r3, [r7, #24]
 8005528:	e007      	b.n	800553a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	781a      	ldrb	r2, [r3, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	3301      	adds	r3, #1
 8005538:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800553e:	b29b      	uxth	r3, r3
 8005540:	3b01      	subs	r3, #1
 8005542:	b29a      	uxth	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800554c:	b29b      	uxth	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1cb      	bne.n	80054ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	2200      	movs	r2, #0
 800555a:	2140      	movs	r1, #64	@ 0x40
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 f814 	bl	800558a <UART_WaitOnFlagUntilTimeout>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d005      	beq.n	8005574 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2220      	movs	r2, #32
 800556c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e006      	b.n	8005582 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2220      	movs	r2, #32
 8005578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800557c:	2300      	movs	r3, #0
 800557e:	e000      	b.n	8005582 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005580:	2302      	movs	r3, #2
  }
}
 8005582:	4618      	mov	r0, r3
 8005584:	3720      	adds	r7, #32
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b086      	sub	sp, #24
 800558e:	af00      	add	r7, sp, #0
 8005590:	60f8      	str	r0, [r7, #12]
 8005592:	60b9      	str	r1, [r7, #8]
 8005594:	603b      	str	r3, [r7, #0]
 8005596:	4613      	mov	r3, r2
 8005598:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800559a:	e03b      	b.n	8005614 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800559c:	6a3b      	ldr	r3, [r7, #32]
 800559e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055a2:	d037      	beq.n	8005614 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055a4:	f7fd f968 	bl	8002878 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	6a3a      	ldr	r2, [r7, #32]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d302      	bcc.n	80055ba <UART_WaitOnFlagUntilTimeout+0x30>
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d101      	bne.n	80055be <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e03a      	b.n	8005634 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	f003 0304 	and.w	r3, r3, #4
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d023      	beq.n	8005614 <UART_WaitOnFlagUntilTimeout+0x8a>
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	2b80      	cmp	r3, #128	@ 0x80
 80055d0:	d020      	beq.n	8005614 <UART_WaitOnFlagUntilTimeout+0x8a>
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	2b40      	cmp	r3, #64	@ 0x40
 80055d6:	d01d      	beq.n	8005614 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0308 	and.w	r3, r3, #8
 80055e2:	2b08      	cmp	r3, #8
 80055e4:	d116      	bne.n	8005614 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80055e6:	2300      	movs	r3, #0
 80055e8:	617b      	str	r3, [r7, #20]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	617b      	str	r3, [r7, #20]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	617b      	str	r3, [r7, #20]
 80055fa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055fc:	68f8      	ldr	r0, [r7, #12]
 80055fe:	f000 f81d 	bl	800563c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2208      	movs	r2, #8
 8005606:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e00f      	b.n	8005634 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	4013      	ands	r3, r2
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	429a      	cmp	r2, r3
 8005622:	bf0c      	ite	eq
 8005624:	2301      	moveq	r3, #1
 8005626:	2300      	movne	r3, #0
 8005628:	b2db      	uxtb	r3, r3
 800562a:	461a      	mov	r2, r3
 800562c:	79fb      	ldrb	r3, [r7, #7]
 800562e:	429a      	cmp	r2, r3
 8005630:	d0b4      	beq.n	800559c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3718      	adds	r7, #24
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800563c:	b480      	push	{r7}
 800563e:	b095      	sub	sp, #84	@ 0x54
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	330c      	adds	r3, #12
 800564a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800564e:	e853 3f00 	ldrex	r3, [r3]
 8005652:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005656:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800565a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	330c      	adds	r3, #12
 8005662:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005664:	643a      	str	r2, [r7, #64]	@ 0x40
 8005666:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005668:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800566a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800566c:	e841 2300 	strex	r3, r2, [r1]
 8005670:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1e5      	bne.n	8005644 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	3314      	adds	r3, #20
 800567e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005680:	6a3b      	ldr	r3, [r7, #32]
 8005682:	e853 3f00 	ldrex	r3, [r3]
 8005686:	61fb      	str	r3, [r7, #28]
   return(result);
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	f023 0301 	bic.w	r3, r3, #1
 800568e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	3314      	adds	r3, #20
 8005696:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005698:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800569a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800569e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056a0:	e841 2300 	strex	r3, r2, [r1]
 80056a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80056a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1e5      	bne.n	8005678 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d119      	bne.n	80056e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	330c      	adds	r3, #12
 80056ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	e853 3f00 	ldrex	r3, [r3]
 80056c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	f023 0310 	bic.w	r3, r3, #16
 80056ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	330c      	adds	r3, #12
 80056d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056d4:	61ba      	str	r2, [r7, #24]
 80056d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d8:	6979      	ldr	r1, [r7, #20]
 80056da:	69ba      	ldr	r2, [r7, #24]
 80056dc:	e841 2300 	strex	r3, r2, [r1]
 80056e0:	613b      	str	r3, [r7, #16]
   return(result);
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1e5      	bne.n	80056b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2220      	movs	r2, #32
 80056ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80056f6:	bf00      	nop
 80056f8:	3754      	adds	r7, #84	@ 0x54
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
	...

08005704 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005704:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005708:	b0c0      	sub	sp, #256	@ 0x100
 800570a:	af00      	add	r7, sp, #0
 800570c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800571c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005720:	68d9      	ldr	r1, [r3, #12]
 8005722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	ea40 0301 	orr.w	r3, r0, r1
 800572c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800572e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005732:	689a      	ldr	r2, [r3, #8]
 8005734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	431a      	orrs	r2, r3
 800573c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	431a      	orrs	r2, r3
 8005744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005748:	69db      	ldr	r3, [r3, #28]
 800574a:	4313      	orrs	r3, r2
 800574c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800575c:	f021 010c 	bic.w	r1, r1, #12
 8005760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800576a:	430b      	orrs	r3, r1
 800576c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800576e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800577a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800577e:	6999      	ldr	r1, [r3, #24]
 8005780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	ea40 0301 	orr.w	r3, r0, r1
 800578a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800578c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	4b8f      	ldr	r3, [pc, #572]	@ (80059d0 <UART_SetConfig+0x2cc>)
 8005794:	429a      	cmp	r2, r3
 8005796:	d005      	beq.n	80057a4 <UART_SetConfig+0xa0>
 8005798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	4b8d      	ldr	r3, [pc, #564]	@ (80059d4 <UART_SetConfig+0x2d0>)
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d104      	bne.n	80057ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057a4:	f7ff f934 	bl	8004a10 <HAL_RCC_GetPCLK2Freq>
 80057a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80057ac:	e003      	b.n	80057b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057ae:	f7ff f91b 	bl	80049e8 <HAL_RCC_GetPCLK1Freq>
 80057b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ba:	69db      	ldr	r3, [r3, #28]
 80057bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057c0:	f040 810c 	bne.w	80059dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057c8:	2200      	movs	r2, #0
 80057ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80057ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80057d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80057d6:	4622      	mov	r2, r4
 80057d8:	462b      	mov	r3, r5
 80057da:	1891      	adds	r1, r2, r2
 80057dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80057de:	415b      	adcs	r3, r3
 80057e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80057e6:	4621      	mov	r1, r4
 80057e8:	eb12 0801 	adds.w	r8, r2, r1
 80057ec:	4629      	mov	r1, r5
 80057ee:	eb43 0901 	adc.w	r9, r3, r1
 80057f2:	f04f 0200 	mov.w	r2, #0
 80057f6:	f04f 0300 	mov.w	r3, #0
 80057fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005802:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005806:	4690      	mov	r8, r2
 8005808:	4699      	mov	r9, r3
 800580a:	4623      	mov	r3, r4
 800580c:	eb18 0303 	adds.w	r3, r8, r3
 8005810:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005814:	462b      	mov	r3, r5
 8005816:	eb49 0303 	adc.w	r3, r9, r3
 800581a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800581e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800582a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800582e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005832:	460b      	mov	r3, r1
 8005834:	18db      	adds	r3, r3, r3
 8005836:	653b      	str	r3, [r7, #80]	@ 0x50
 8005838:	4613      	mov	r3, r2
 800583a:	eb42 0303 	adc.w	r3, r2, r3
 800583e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005840:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005844:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005848:	f7fb fa1e 	bl	8000c88 <__aeabi_uldivmod>
 800584c:	4602      	mov	r2, r0
 800584e:	460b      	mov	r3, r1
 8005850:	4b61      	ldr	r3, [pc, #388]	@ (80059d8 <UART_SetConfig+0x2d4>)
 8005852:	fba3 2302 	umull	r2, r3, r3, r2
 8005856:	095b      	lsrs	r3, r3, #5
 8005858:	011c      	lsls	r4, r3, #4
 800585a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800585e:	2200      	movs	r2, #0
 8005860:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005864:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005868:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800586c:	4642      	mov	r2, r8
 800586e:	464b      	mov	r3, r9
 8005870:	1891      	adds	r1, r2, r2
 8005872:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005874:	415b      	adcs	r3, r3
 8005876:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005878:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800587c:	4641      	mov	r1, r8
 800587e:	eb12 0a01 	adds.w	sl, r2, r1
 8005882:	4649      	mov	r1, r9
 8005884:	eb43 0b01 	adc.w	fp, r3, r1
 8005888:	f04f 0200 	mov.w	r2, #0
 800588c:	f04f 0300 	mov.w	r3, #0
 8005890:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005894:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005898:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800589c:	4692      	mov	sl, r2
 800589e:	469b      	mov	fp, r3
 80058a0:	4643      	mov	r3, r8
 80058a2:	eb1a 0303 	adds.w	r3, sl, r3
 80058a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80058aa:	464b      	mov	r3, r9
 80058ac:	eb4b 0303 	adc.w	r3, fp, r3
 80058b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80058b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80058c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80058c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80058c8:	460b      	mov	r3, r1
 80058ca:	18db      	adds	r3, r3, r3
 80058cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80058ce:	4613      	mov	r3, r2
 80058d0:	eb42 0303 	adc.w	r3, r2, r3
 80058d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80058d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80058da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80058de:	f7fb f9d3 	bl	8000c88 <__aeabi_uldivmod>
 80058e2:	4602      	mov	r2, r0
 80058e4:	460b      	mov	r3, r1
 80058e6:	4611      	mov	r1, r2
 80058e8:	4b3b      	ldr	r3, [pc, #236]	@ (80059d8 <UART_SetConfig+0x2d4>)
 80058ea:	fba3 2301 	umull	r2, r3, r3, r1
 80058ee:	095b      	lsrs	r3, r3, #5
 80058f0:	2264      	movs	r2, #100	@ 0x64
 80058f2:	fb02 f303 	mul.w	r3, r2, r3
 80058f6:	1acb      	subs	r3, r1, r3
 80058f8:	00db      	lsls	r3, r3, #3
 80058fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80058fe:	4b36      	ldr	r3, [pc, #216]	@ (80059d8 <UART_SetConfig+0x2d4>)
 8005900:	fba3 2302 	umull	r2, r3, r3, r2
 8005904:	095b      	lsrs	r3, r3, #5
 8005906:	005b      	lsls	r3, r3, #1
 8005908:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800590c:	441c      	add	r4, r3
 800590e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005912:	2200      	movs	r2, #0
 8005914:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005918:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800591c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005920:	4642      	mov	r2, r8
 8005922:	464b      	mov	r3, r9
 8005924:	1891      	adds	r1, r2, r2
 8005926:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005928:	415b      	adcs	r3, r3
 800592a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800592c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005930:	4641      	mov	r1, r8
 8005932:	1851      	adds	r1, r2, r1
 8005934:	6339      	str	r1, [r7, #48]	@ 0x30
 8005936:	4649      	mov	r1, r9
 8005938:	414b      	adcs	r3, r1
 800593a:	637b      	str	r3, [r7, #52]	@ 0x34
 800593c:	f04f 0200 	mov.w	r2, #0
 8005940:	f04f 0300 	mov.w	r3, #0
 8005944:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005948:	4659      	mov	r1, fp
 800594a:	00cb      	lsls	r3, r1, #3
 800594c:	4651      	mov	r1, sl
 800594e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005952:	4651      	mov	r1, sl
 8005954:	00ca      	lsls	r2, r1, #3
 8005956:	4610      	mov	r0, r2
 8005958:	4619      	mov	r1, r3
 800595a:	4603      	mov	r3, r0
 800595c:	4642      	mov	r2, r8
 800595e:	189b      	adds	r3, r3, r2
 8005960:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005964:	464b      	mov	r3, r9
 8005966:	460a      	mov	r2, r1
 8005968:	eb42 0303 	adc.w	r3, r2, r3
 800596c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800597c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005980:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005984:	460b      	mov	r3, r1
 8005986:	18db      	adds	r3, r3, r3
 8005988:	62bb      	str	r3, [r7, #40]	@ 0x28
 800598a:	4613      	mov	r3, r2
 800598c:	eb42 0303 	adc.w	r3, r2, r3
 8005990:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005992:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005996:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800599a:	f7fb f975 	bl	8000c88 <__aeabi_uldivmod>
 800599e:	4602      	mov	r2, r0
 80059a0:	460b      	mov	r3, r1
 80059a2:	4b0d      	ldr	r3, [pc, #52]	@ (80059d8 <UART_SetConfig+0x2d4>)
 80059a4:	fba3 1302 	umull	r1, r3, r3, r2
 80059a8:	095b      	lsrs	r3, r3, #5
 80059aa:	2164      	movs	r1, #100	@ 0x64
 80059ac:	fb01 f303 	mul.w	r3, r1, r3
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	00db      	lsls	r3, r3, #3
 80059b4:	3332      	adds	r3, #50	@ 0x32
 80059b6:	4a08      	ldr	r2, [pc, #32]	@ (80059d8 <UART_SetConfig+0x2d4>)
 80059b8:	fba2 2303 	umull	r2, r3, r2, r3
 80059bc:	095b      	lsrs	r3, r3, #5
 80059be:	f003 0207 	and.w	r2, r3, #7
 80059c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4422      	add	r2, r4
 80059ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059cc:	e106      	b.n	8005bdc <UART_SetConfig+0x4d8>
 80059ce:	bf00      	nop
 80059d0:	40011000 	.word	0x40011000
 80059d4:	40011400 	.word	0x40011400
 80059d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059e0:	2200      	movs	r2, #0
 80059e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80059e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80059ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80059ee:	4642      	mov	r2, r8
 80059f0:	464b      	mov	r3, r9
 80059f2:	1891      	adds	r1, r2, r2
 80059f4:	6239      	str	r1, [r7, #32]
 80059f6:	415b      	adcs	r3, r3
 80059f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80059fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059fe:	4641      	mov	r1, r8
 8005a00:	1854      	adds	r4, r2, r1
 8005a02:	4649      	mov	r1, r9
 8005a04:	eb43 0501 	adc.w	r5, r3, r1
 8005a08:	f04f 0200 	mov.w	r2, #0
 8005a0c:	f04f 0300 	mov.w	r3, #0
 8005a10:	00eb      	lsls	r3, r5, #3
 8005a12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a16:	00e2      	lsls	r2, r4, #3
 8005a18:	4614      	mov	r4, r2
 8005a1a:	461d      	mov	r5, r3
 8005a1c:	4643      	mov	r3, r8
 8005a1e:	18e3      	adds	r3, r4, r3
 8005a20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a24:	464b      	mov	r3, r9
 8005a26:	eb45 0303 	adc.w	r3, r5, r3
 8005a2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a3e:	f04f 0200 	mov.w	r2, #0
 8005a42:	f04f 0300 	mov.w	r3, #0
 8005a46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005a4a:	4629      	mov	r1, r5
 8005a4c:	008b      	lsls	r3, r1, #2
 8005a4e:	4621      	mov	r1, r4
 8005a50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a54:	4621      	mov	r1, r4
 8005a56:	008a      	lsls	r2, r1, #2
 8005a58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005a5c:	f7fb f914 	bl	8000c88 <__aeabi_uldivmod>
 8005a60:	4602      	mov	r2, r0
 8005a62:	460b      	mov	r3, r1
 8005a64:	4b60      	ldr	r3, [pc, #384]	@ (8005be8 <UART_SetConfig+0x4e4>)
 8005a66:	fba3 2302 	umull	r2, r3, r3, r2
 8005a6a:	095b      	lsrs	r3, r3, #5
 8005a6c:	011c      	lsls	r4, r3, #4
 8005a6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a72:	2200      	movs	r2, #0
 8005a74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005a7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005a80:	4642      	mov	r2, r8
 8005a82:	464b      	mov	r3, r9
 8005a84:	1891      	adds	r1, r2, r2
 8005a86:	61b9      	str	r1, [r7, #24]
 8005a88:	415b      	adcs	r3, r3
 8005a8a:	61fb      	str	r3, [r7, #28]
 8005a8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a90:	4641      	mov	r1, r8
 8005a92:	1851      	adds	r1, r2, r1
 8005a94:	6139      	str	r1, [r7, #16]
 8005a96:	4649      	mov	r1, r9
 8005a98:	414b      	adcs	r3, r1
 8005a9a:	617b      	str	r3, [r7, #20]
 8005a9c:	f04f 0200 	mov.w	r2, #0
 8005aa0:	f04f 0300 	mov.w	r3, #0
 8005aa4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005aa8:	4659      	mov	r1, fp
 8005aaa:	00cb      	lsls	r3, r1, #3
 8005aac:	4651      	mov	r1, sl
 8005aae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ab2:	4651      	mov	r1, sl
 8005ab4:	00ca      	lsls	r2, r1, #3
 8005ab6:	4610      	mov	r0, r2
 8005ab8:	4619      	mov	r1, r3
 8005aba:	4603      	mov	r3, r0
 8005abc:	4642      	mov	r2, r8
 8005abe:	189b      	adds	r3, r3, r2
 8005ac0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ac4:	464b      	mov	r3, r9
 8005ac6:	460a      	mov	r2, r1
 8005ac8:	eb42 0303 	adc.w	r3, r2, r3
 8005acc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ada:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005adc:	f04f 0200 	mov.w	r2, #0
 8005ae0:	f04f 0300 	mov.w	r3, #0
 8005ae4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005ae8:	4649      	mov	r1, r9
 8005aea:	008b      	lsls	r3, r1, #2
 8005aec:	4641      	mov	r1, r8
 8005aee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005af2:	4641      	mov	r1, r8
 8005af4:	008a      	lsls	r2, r1, #2
 8005af6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005afa:	f7fb f8c5 	bl	8000c88 <__aeabi_uldivmod>
 8005afe:	4602      	mov	r2, r0
 8005b00:	460b      	mov	r3, r1
 8005b02:	4611      	mov	r1, r2
 8005b04:	4b38      	ldr	r3, [pc, #224]	@ (8005be8 <UART_SetConfig+0x4e4>)
 8005b06:	fba3 2301 	umull	r2, r3, r3, r1
 8005b0a:	095b      	lsrs	r3, r3, #5
 8005b0c:	2264      	movs	r2, #100	@ 0x64
 8005b0e:	fb02 f303 	mul.w	r3, r2, r3
 8005b12:	1acb      	subs	r3, r1, r3
 8005b14:	011b      	lsls	r3, r3, #4
 8005b16:	3332      	adds	r3, #50	@ 0x32
 8005b18:	4a33      	ldr	r2, [pc, #204]	@ (8005be8 <UART_SetConfig+0x4e4>)
 8005b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b1e:	095b      	lsrs	r3, r3, #5
 8005b20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b24:	441c      	add	r4, r3
 8005b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b2e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005b30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005b34:	4642      	mov	r2, r8
 8005b36:	464b      	mov	r3, r9
 8005b38:	1891      	adds	r1, r2, r2
 8005b3a:	60b9      	str	r1, [r7, #8]
 8005b3c:	415b      	adcs	r3, r3
 8005b3e:	60fb      	str	r3, [r7, #12]
 8005b40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b44:	4641      	mov	r1, r8
 8005b46:	1851      	adds	r1, r2, r1
 8005b48:	6039      	str	r1, [r7, #0]
 8005b4a:	4649      	mov	r1, r9
 8005b4c:	414b      	adcs	r3, r1
 8005b4e:	607b      	str	r3, [r7, #4]
 8005b50:	f04f 0200 	mov.w	r2, #0
 8005b54:	f04f 0300 	mov.w	r3, #0
 8005b58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b5c:	4659      	mov	r1, fp
 8005b5e:	00cb      	lsls	r3, r1, #3
 8005b60:	4651      	mov	r1, sl
 8005b62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b66:	4651      	mov	r1, sl
 8005b68:	00ca      	lsls	r2, r1, #3
 8005b6a:	4610      	mov	r0, r2
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	4603      	mov	r3, r0
 8005b70:	4642      	mov	r2, r8
 8005b72:	189b      	adds	r3, r3, r2
 8005b74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b76:	464b      	mov	r3, r9
 8005b78:	460a      	mov	r2, r1
 8005b7a:	eb42 0303 	adc.w	r3, r2, r3
 8005b7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b8a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005b8c:	f04f 0200 	mov.w	r2, #0
 8005b90:	f04f 0300 	mov.w	r3, #0
 8005b94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005b98:	4649      	mov	r1, r9
 8005b9a:	008b      	lsls	r3, r1, #2
 8005b9c:	4641      	mov	r1, r8
 8005b9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ba2:	4641      	mov	r1, r8
 8005ba4:	008a      	lsls	r2, r1, #2
 8005ba6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005baa:	f7fb f86d 	bl	8000c88 <__aeabi_uldivmod>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8005be8 <UART_SetConfig+0x4e4>)
 8005bb4:	fba3 1302 	umull	r1, r3, r3, r2
 8005bb8:	095b      	lsrs	r3, r3, #5
 8005bba:	2164      	movs	r1, #100	@ 0x64
 8005bbc:	fb01 f303 	mul.w	r3, r1, r3
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	011b      	lsls	r3, r3, #4
 8005bc4:	3332      	adds	r3, #50	@ 0x32
 8005bc6:	4a08      	ldr	r2, [pc, #32]	@ (8005be8 <UART_SetConfig+0x4e4>)
 8005bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bcc:	095b      	lsrs	r3, r3, #5
 8005bce:	f003 020f 	and.w	r2, r3, #15
 8005bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4422      	add	r2, r4
 8005bda:	609a      	str	r2, [r3, #8]
}
 8005bdc:	bf00      	nop
 8005bde:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005be2:	46bd      	mov	sp, r7
 8005be4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005be8:	51eb851f 	.word	0x51eb851f

08005bec <__cvt>:
 8005bec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bf0:	ec57 6b10 	vmov	r6, r7, d0
 8005bf4:	2f00      	cmp	r7, #0
 8005bf6:	460c      	mov	r4, r1
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	463b      	mov	r3, r7
 8005bfc:	bfbb      	ittet	lt
 8005bfe:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005c02:	461f      	movlt	r7, r3
 8005c04:	2300      	movge	r3, #0
 8005c06:	232d      	movlt	r3, #45	@ 0x2d
 8005c08:	700b      	strb	r3, [r1, #0]
 8005c0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c0c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005c10:	4691      	mov	r9, r2
 8005c12:	f023 0820 	bic.w	r8, r3, #32
 8005c16:	bfbc      	itt	lt
 8005c18:	4632      	movlt	r2, r6
 8005c1a:	4616      	movlt	r6, r2
 8005c1c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005c20:	d005      	beq.n	8005c2e <__cvt+0x42>
 8005c22:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005c26:	d100      	bne.n	8005c2a <__cvt+0x3e>
 8005c28:	3401      	adds	r4, #1
 8005c2a:	2102      	movs	r1, #2
 8005c2c:	e000      	b.n	8005c30 <__cvt+0x44>
 8005c2e:	2103      	movs	r1, #3
 8005c30:	ab03      	add	r3, sp, #12
 8005c32:	9301      	str	r3, [sp, #4]
 8005c34:	ab02      	add	r3, sp, #8
 8005c36:	9300      	str	r3, [sp, #0]
 8005c38:	ec47 6b10 	vmov	d0, r6, r7
 8005c3c:	4653      	mov	r3, sl
 8005c3e:	4622      	mov	r2, r4
 8005c40:	f000 fdd2 	bl	80067e8 <_dtoa_r>
 8005c44:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005c48:	4605      	mov	r5, r0
 8005c4a:	d119      	bne.n	8005c80 <__cvt+0x94>
 8005c4c:	f019 0f01 	tst.w	r9, #1
 8005c50:	d00e      	beq.n	8005c70 <__cvt+0x84>
 8005c52:	eb00 0904 	add.w	r9, r0, r4
 8005c56:	2200      	movs	r2, #0
 8005c58:	2300      	movs	r3, #0
 8005c5a:	4630      	mov	r0, r6
 8005c5c:	4639      	mov	r1, r7
 8005c5e:	f7fa ff53 	bl	8000b08 <__aeabi_dcmpeq>
 8005c62:	b108      	cbz	r0, 8005c68 <__cvt+0x7c>
 8005c64:	f8cd 900c 	str.w	r9, [sp, #12]
 8005c68:	2230      	movs	r2, #48	@ 0x30
 8005c6a:	9b03      	ldr	r3, [sp, #12]
 8005c6c:	454b      	cmp	r3, r9
 8005c6e:	d31e      	bcc.n	8005cae <__cvt+0xc2>
 8005c70:	9b03      	ldr	r3, [sp, #12]
 8005c72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005c74:	1b5b      	subs	r3, r3, r5
 8005c76:	4628      	mov	r0, r5
 8005c78:	6013      	str	r3, [r2, #0]
 8005c7a:	b004      	add	sp, #16
 8005c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c80:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005c84:	eb00 0904 	add.w	r9, r0, r4
 8005c88:	d1e5      	bne.n	8005c56 <__cvt+0x6a>
 8005c8a:	7803      	ldrb	r3, [r0, #0]
 8005c8c:	2b30      	cmp	r3, #48	@ 0x30
 8005c8e:	d10a      	bne.n	8005ca6 <__cvt+0xba>
 8005c90:	2200      	movs	r2, #0
 8005c92:	2300      	movs	r3, #0
 8005c94:	4630      	mov	r0, r6
 8005c96:	4639      	mov	r1, r7
 8005c98:	f7fa ff36 	bl	8000b08 <__aeabi_dcmpeq>
 8005c9c:	b918      	cbnz	r0, 8005ca6 <__cvt+0xba>
 8005c9e:	f1c4 0401 	rsb	r4, r4, #1
 8005ca2:	f8ca 4000 	str.w	r4, [sl]
 8005ca6:	f8da 3000 	ldr.w	r3, [sl]
 8005caa:	4499      	add	r9, r3
 8005cac:	e7d3      	b.n	8005c56 <__cvt+0x6a>
 8005cae:	1c59      	adds	r1, r3, #1
 8005cb0:	9103      	str	r1, [sp, #12]
 8005cb2:	701a      	strb	r2, [r3, #0]
 8005cb4:	e7d9      	b.n	8005c6a <__cvt+0x7e>

08005cb6 <__exponent>:
 8005cb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cb8:	2900      	cmp	r1, #0
 8005cba:	bfba      	itte	lt
 8005cbc:	4249      	neglt	r1, r1
 8005cbe:	232d      	movlt	r3, #45	@ 0x2d
 8005cc0:	232b      	movge	r3, #43	@ 0x2b
 8005cc2:	2909      	cmp	r1, #9
 8005cc4:	7002      	strb	r2, [r0, #0]
 8005cc6:	7043      	strb	r3, [r0, #1]
 8005cc8:	dd29      	ble.n	8005d1e <__exponent+0x68>
 8005cca:	f10d 0307 	add.w	r3, sp, #7
 8005cce:	461d      	mov	r5, r3
 8005cd0:	270a      	movs	r7, #10
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	fbb1 f6f7 	udiv	r6, r1, r7
 8005cd8:	fb07 1416 	mls	r4, r7, r6, r1
 8005cdc:	3430      	adds	r4, #48	@ 0x30
 8005cde:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005ce2:	460c      	mov	r4, r1
 8005ce4:	2c63      	cmp	r4, #99	@ 0x63
 8005ce6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005cea:	4631      	mov	r1, r6
 8005cec:	dcf1      	bgt.n	8005cd2 <__exponent+0x1c>
 8005cee:	3130      	adds	r1, #48	@ 0x30
 8005cf0:	1e94      	subs	r4, r2, #2
 8005cf2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005cf6:	1c41      	adds	r1, r0, #1
 8005cf8:	4623      	mov	r3, r4
 8005cfa:	42ab      	cmp	r3, r5
 8005cfc:	d30a      	bcc.n	8005d14 <__exponent+0x5e>
 8005cfe:	f10d 0309 	add.w	r3, sp, #9
 8005d02:	1a9b      	subs	r3, r3, r2
 8005d04:	42ac      	cmp	r4, r5
 8005d06:	bf88      	it	hi
 8005d08:	2300      	movhi	r3, #0
 8005d0a:	3302      	adds	r3, #2
 8005d0c:	4403      	add	r3, r0
 8005d0e:	1a18      	subs	r0, r3, r0
 8005d10:	b003      	add	sp, #12
 8005d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d14:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005d18:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005d1c:	e7ed      	b.n	8005cfa <__exponent+0x44>
 8005d1e:	2330      	movs	r3, #48	@ 0x30
 8005d20:	3130      	adds	r1, #48	@ 0x30
 8005d22:	7083      	strb	r3, [r0, #2]
 8005d24:	70c1      	strb	r1, [r0, #3]
 8005d26:	1d03      	adds	r3, r0, #4
 8005d28:	e7f1      	b.n	8005d0e <__exponent+0x58>
	...

08005d2c <_printf_float>:
 8005d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d30:	b08d      	sub	sp, #52	@ 0x34
 8005d32:	460c      	mov	r4, r1
 8005d34:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005d38:	4616      	mov	r6, r2
 8005d3a:	461f      	mov	r7, r3
 8005d3c:	4605      	mov	r5, r0
 8005d3e:	f000 fc97 	bl	8006670 <_localeconv_r>
 8005d42:	6803      	ldr	r3, [r0, #0]
 8005d44:	9304      	str	r3, [sp, #16]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fa fab2 	bl	80002b0 <strlen>
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d50:	f8d8 3000 	ldr.w	r3, [r8]
 8005d54:	9005      	str	r0, [sp, #20]
 8005d56:	3307      	adds	r3, #7
 8005d58:	f023 0307 	bic.w	r3, r3, #7
 8005d5c:	f103 0208 	add.w	r2, r3, #8
 8005d60:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005d64:	f8d4 b000 	ldr.w	fp, [r4]
 8005d68:	f8c8 2000 	str.w	r2, [r8]
 8005d6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d70:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005d74:	9307      	str	r3, [sp, #28]
 8005d76:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d7a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005d7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d82:	4b9c      	ldr	r3, [pc, #624]	@ (8005ff4 <_printf_float+0x2c8>)
 8005d84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005d88:	f7fa fef0 	bl	8000b6c <__aeabi_dcmpun>
 8005d8c:	bb70      	cbnz	r0, 8005dec <_printf_float+0xc0>
 8005d8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d92:	4b98      	ldr	r3, [pc, #608]	@ (8005ff4 <_printf_float+0x2c8>)
 8005d94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005d98:	f7fa feca 	bl	8000b30 <__aeabi_dcmple>
 8005d9c:	bb30      	cbnz	r0, 8005dec <_printf_float+0xc0>
 8005d9e:	2200      	movs	r2, #0
 8005da0:	2300      	movs	r3, #0
 8005da2:	4640      	mov	r0, r8
 8005da4:	4649      	mov	r1, r9
 8005da6:	f7fa feb9 	bl	8000b1c <__aeabi_dcmplt>
 8005daa:	b110      	cbz	r0, 8005db2 <_printf_float+0x86>
 8005dac:	232d      	movs	r3, #45	@ 0x2d
 8005dae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005db2:	4a91      	ldr	r2, [pc, #580]	@ (8005ff8 <_printf_float+0x2cc>)
 8005db4:	4b91      	ldr	r3, [pc, #580]	@ (8005ffc <_printf_float+0x2d0>)
 8005db6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005dba:	bf94      	ite	ls
 8005dbc:	4690      	movls	r8, r2
 8005dbe:	4698      	movhi	r8, r3
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	6123      	str	r3, [r4, #16]
 8005dc4:	f02b 0304 	bic.w	r3, fp, #4
 8005dc8:	6023      	str	r3, [r4, #0]
 8005dca:	f04f 0900 	mov.w	r9, #0
 8005dce:	9700      	str	r7, [sp, #0]
 8005dd0:	4633      	mov	r3, r6
 8005dd2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005dd4:	4621      	mov	r1, r4
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	f000 f9d2 	bl	8006180 <_printf_common>
 8005ddc:	3001      	adds	r0, #1
 8005dde:	f040 808d 	bne.w	8005efc <_printf_float+0x1d0>
 8005de2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005de6:	b00d      	add	sp, #52	@ 0x34
 8005de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dec:	4642      	mov	r2, r8
 8005dee:	464b      	mov	r3, r9
 8005df0:	4640      	mov	r0, r8
 8005df2:	4649      	mov	r1, r9
 8005df4:	f7fa feba 	bl	8000b6c <__aeabi_dcmpun>
 8005df8:	b140      	cbz	r0, 8005e0c <_printf_float+0xe0>
 8005dfa:	464b      	mov	r3, r9
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	bfbc      	itt	lt
 8005e00:	232d      	movlt	r3, #45	@ 0x2d
 8005e02:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005e06:	4a7e      	ldr	r2, [pc, #504]	@ (8006000 <_printf_float+0x2d4>)
 8005e08:	4b7e      	ldr	r3, [pc, #504]	@ (8006004 <_printf_float+0x2d8>)
 8005e0a:	e7d4      	b.n	8005db6 <_printf_float+0x8a>
 8005e0c:	6863      	ldr	r3, [r4, #4]
 8005e0e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005e12:	9206      	str	r2, [sp, #24]
 8005e14:	1c5a      	adds	r2, r3, #1
 8005e16:	d13b      	bne.n	8005e90 <_printf_float+0x164>
 8005e18:	2306      	movs	r3, #6
 8005e1a:	6063      	str	r3, [r4, #4]
 8005e1c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005e20:	2300      	movs	r3, #0
 8005e22:	6022      	str	r2, [r4, #0]
 8005e24:	9303      	str	r3, [sp, #12]
 8005e26:	ab0a      	add	r3, sp, #40	@ 0x28
 8005e28:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005e2c:	ab09      	add	r3, sp, #36	@ 0x24
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	6861      	ldr	r1, [r4, #4]
 8005e32:	ec49 8b10 	vmov	d0, r8, r9
 8005e36:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	f7ff fed6 	bl	8005bec <__cvt>
 8005e40:	9b06      	ldr	r3, [sp, #24]
 8005e42:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005e44:	2b47      	cmp	r3, #71	@ 0x47
 8005e46:	4680      	mov	r8, r0
 8005e48:	d129      	bne.n	8005e9e <_printf_float+0x172>
 8005e4a:	1cc8      	adds	r0, r1, #3
 8005e4c:	db02      	blt.n	8005e54 <_printf_float+0x128>
 8005e4e:	6863      	ldr	r3, [r4, #4]
 8005e50:	4299      	cmp	r1, r3
 8005e52:	dd41      	ble.n	8005ed8 <_printf_float+0x1ac>
 8005e54:	f1aa 0a02 	sub.w	sl, sl, #2
 8005e58:	fa5f fa8a 	uxtb.w	sl, sl
 8005e5c:	3901      	subs	r1, #1
 8005e5e:	4652      	mov	r2, sl
 8005e60:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005e64:	9109      	str	r1, [sp, #36]	@ 0x24
 8005e66:	f7ff ff26 	bl	8005cb6 <__exponent>
 8005e6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005e6c:	1813      	adds	r3, r2, r0
 8005e6e:	2a01      	cmp	r2, #1
 8005e70:	4681      	mov	r9, r0
 8005e72:	6123      	str	r3, [r4, #16]
 8005e74:	dc02      	bgt.n	8005e7c <_printf_float+0x150>
 8005e76:	6822      	ldr	r2, [r4, #0]
 8005e78:	07d2      	lsls	r2, r2, #31
 8005e7a:	d501      	bpl.n	8005e80 <_printf_float+0x154>
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	6123      	str	r3, [r4, #16]
 8005e80:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d0a2      	beq.n	8005dce <_printf_float+0xa2>
 8005e88:	232d      	movs	r3, #45	@ 0x2d
 8005e8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e8e:	e79e      	b.n	8005dce <_printf_float+0xa2>
 8005e90:	9a06      	ldr	r2, [sp, #24]
 8005e92:	2a47      	cmp	r2, #71	@ 0x47
 8005e94:	d1c2      	bne.n	8005e1c <_printf_float+0xf0>
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1c0      	bne.n	8005e1c <_printf_float+0xf0>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e7bd      	b.n	8005e1a <_printf_float+0xee>
 8005e9e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005ea2:	d9db      	bls.n	8005e5c <_printf_float+0x130>
 8005ea4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005ea8:	d118      	bne.n	8005edc <_printf_float+0x1b0>
 8005eaa:	2900      	cmp	r1, #0
 8005eac:	6863      	ldr	r3, [r4, #4]
 8005eae:	dd0b      	ble.n	8005ec8 <_printf_float+0x19c>
 8005eb0:	6121      	str	r1, [r4, #16]
 8005eb2:	b913      	cbnz	r3, 8005eba <_printf_float+0x18e>
 8005eb4:	6822      	ldr	r2, [r4, #0]
 8005eb6:	07d0      	lsls	r0, r2, #31
 8005eb8:	d502      	bpl.n	8005ec0 <_printf_float+0x194>
 8005eba:	3301      	adds	r3, #1
 8005ebc:	440b      	add	r3, r1
 8005ebe:	6123      	str	r3, [r4, #16]
 8005ec0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005ec2:	f04f 0900 	mov.w	r9, #0
 8005ec6:	e7db      	b.n	8005e80 <_printf_float+0x154>
 8005ec8:	b913      	cbnz	r3, 8005ed0 <_printf_float+0x1a4>
 8005eca:	6822      	ldr	r2, [r4, #0]
 8005ecc:	07d2      	lsls	r2, r2, #31
 8005ece:	d501      	bpl.n	8005ed4 <_printf_float+0x1a8>
 8005ed0:	3302      	adds	r3, #2
 8005ed2:	e7f4      	b.n	8005ebe <_printf_float+0x192>
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e7f2      	b.n	8005ebe <_printf_float+0x192>
 8005ed8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005edc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ede:	4299      	cmp	r1, r3
 8005ee0:	db05      	blt.n	8005eee <_printf_float+0x1c2>
 8005ee2:	6823      	ldr	r3, [r4, #0]
 8005ee4:	6121      	str	r1, [r4, #16]
 8005ee6:	07d8      	lsls	r0, r3, #31
 8005ee8:	d5ea      	bpl.n	8005ec0 <_printf_float+0x194>
 8005eea:	1c4b      	adds	r3, r1, #1
 8005eec:	e7e7      	b.n	8005ebe <_printf_float+0x192>
 8005eee:	2900      	cmp	r1, #0
 8005ef0:	bfd4      	ite	le
 8005ef2:	f1c1 0202 	rsble	r2, r1, #2
 8005ef6:	2201      	movgt	r2, #1
 8005ef8:	4413      	add	r3, r2
 8005efa:	e7e0      	b.n	8005ebe <_printf_float+0x192>
 8005efc:	6823      	ldr	r3, [r4, #0]
 8005efe:	055a      	lsls	r2, r3, #21
 8005f00:	d407      	bmi.n	8005f12 <_printf_float+0x1e6>
 8005f02:	6923      	ldr	r3, [r4, #16]
 8005f04:	4642      	mov	r2, r8
 8005f06:	4631      	mov	r1, r6
 8005f08:	4628      	mov	r0, r5
 8005f0a:	47b8      	blx	r7
 8005f0c:	3001      	adds	r0, #1
 8005f0e:	d12b      	bne.n	8005f68 <_printf_float+0x23c>
 8005f10:	e767      	b.n	8005de2 <_printf_float+0xb6>
 8005f12:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005f16:	f240 80dd 	bls.w	80060d4 <_printf_float+0x3a8>
 8005f1a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005f1e:	2200      	movs	r2, #0
 8005f20:	2300      	movs	r3, #0
 8005f22:	f7fa fdf1 	bl	8000b08 <__aeabi_dcmpeq>
 8005f26:	2800      	cmp	r0, #0
 8005f28:	d033      	beq.n	8005f92 <_printf_float+0x266>
 8005f2a:	4a37      	ldr	r2, [pc, #220]	@ (8006008 <_printf_float+0x2dc>)
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	4631      	mov	r1, r6
 8005f30:	4628      	mov	r0, r5
 8005f32:	47b8      	blx	r7
 8005f34:	3001      	adds	r0, #1
 8005f36:	f43f af54 	beq.w	8005de2 <_printf_float+0xb6>
 8005f3a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005f3e:	4543      	cmp	r3, r8
 8005f40:	db02      	blt.n	8005f48 <_printf_float+0x21c>
 8005f42:	6823      	ldr	r3, [r4, #0]
 8005f44:	07d8      	lsls	r0, r3, #31
 8005f46:	d50f      	bpl.n	8005f68 <_printf_float+0x23c>
 8005f48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f4c:	4631      	mov	r1, r6
 8005f4e:	4628      	mov	r0, r5
 8005f50:	47b8      	blx	r7
 8005f52:	3001      	adds	r0, #1
 8005f54:	f43f af45 	beq.w	8005de2 <_printf_float+0xb6>
 8005f58:	f04f 0900 	mov.w	r9, #0
 8005f5c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005f60:	f104 0a1a 	add.w	sl, r4, #26
 8005f64:	45c8      	cmp	r8, r9
 8005f66:	dc09      	bgt.n	8005f7c <_printf_float+0x250>
 8005f68:	6823      	ldr	r3, [r4, #0]
 8005f6a:	079b      	lsls	r3, r3, #30
 8005f6c:	f100 8103 	bmi.w	8006176 <_printf_float+0x44a>
 8005f70:	68e0      	ldr	r0, [r4, #12]
 8005f72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f74:	4298      	cmp	r0, r3
 8005f76:	bfb8      	it	lt
 8005f78:	4618      	movlt	r0, r3
 8005f7a:	e734      	b.n	8005de6 <_printf_float+0xba>
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	4652      	mov	r2, sl
 8005f80:	4631      	mov	r1, r6
 8005f82:	4628      	mov	r0, r5
 8005f84:	47b8      	blx	r7
 8005f86:	3001      	adds	r0, #1
 8005f88:	f43f af2b 	beq.w	8005de2 <_printf_float+0xb6>
 8005f8c:	f109 0901 	add.w	r9, r9, #1
 8005f90:	e7e8      	b.n	8005f64 <_printf_float+0x238>
 8005f92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	dc39      	bgt.n	800600c <_printf_float+0x2e0>
 8005f98:	4a1b      	ldr	r2, [pc, #108]	@ (8006008 <_printf_float+0x2dc>)
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	4631      	mov	r1, r6
 8005f9e:	4628      	mov	r0, r5
 8005fa0:	47b8      	blx	r7
 8005fa2:	3001      	adds	r0, #1
 8005fa4:	f43f af1d 	beq.w	8005de2 <_printf_float+0xb6>
 8005fa8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005fac:	ea59 0303 	orrs.w	r3, r9, r3
 8005fb0:	d102      	bne.n	8005fb8 <_printf_float+0x28c>
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	07d9      	lsls	r1, r3, #31
 8005fb6:	d5d7      	bpl.n	8005f68 <_printf_float+0x23c>
 8005fb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fbc:	4631      	mov	r1, r6
 8005fbe:	4628      	mov	r0, r5
 8005fc0:	47b8      	blx	r7
 8005fc2:	3001      	adds	r0, #1
 8005fc4:	f43f af0d 	beq.w	8005de2 <_printf_float+0xb6>
 8005fc8:	f04f 0a00 	mov.w	sl, #0
 8005fcc:	f104 0b1a 	add.w	fp, r4, #26
 8005fd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fd2:	425b      	negs	r3, r3
 8005fd4:	4553      	cmp	r3, sl
 8005fd6:	dc01      	bgt.n	8005fdc <_printf_float+0x2b0>
 8005fd8:	464b      	mov	r3, r9
 8005fda:	e793      	b.n	8005f04 <_printf_float+0x1d8>
 8005fdc:	2301      	movs	r3, #1
 8005fde:	465a      	mov	r2, fp
 8005fe0:	4631      	mov	r1, r6
 8005fe2:	4628      	mov	r0, r5
 8005fe4:	47b8      	blx	r7
 8005fe6:	3001      	adds	r0, #1
 8005fe8:	f43f aefb 	beq.w	8005de2 <_printf_float+0xb6>
 8005fec:	f10a 0a01 	add.w	sl, sl, #1
 8005ff0:	e7ee      	b.n	8005fd0 <_printf_float+0x2a4>
 8005ff2:	bf00      	nop
 8005ff4:	7fefffff 	.word	0x7fefffff
 8005ff8:	080098d0 	.word	0x080098d0
 8005ffc:	080098d4 	.word	0x080098d4
 8006000:	080098d8 	.word	0x080098d8
 8006004:	080098dc 	.word	0x080098dc
 8006008:	080098e0 	.word	0x080098e0
 800600c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800600e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006012:	4553      	cmp	r3, sl
 8006014:	bfa8      	it	ge
 8006016:	4653      	movge	r3, sl
 8006018:	2b00      	cmp	r3, #0
 800601a:	4699      	mov	r9, r3
 800601c:	dc36      	bgt.n	800608c <_printf_float+0x360>
 800601e:	f04f 0b00 	mov.w	fp, #0
 8006022:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006026:	f104 021a 	add.w	r2, r4, #26
 800602a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800602c:	9306      	str	r3, [sp, #24]
 800602e:	eba3 0309 	sub.w	r3, r3, r9
 8006032:	455b      	cmp	r3, fp
 8006034:	dc31      	bgt.n	800609a <_printf_float+0x36e>
 8006036:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006038:	459a      	cmp	sl, r3
 800603a:	dc3a      	bgt.n	80060b2 <_printf_float+0x386>
 800603c:	6823      	ldr	r3, [r4, #0]
 800603e:	07da      	lsls	r2, r3, #31
 8006040:	d437      	bmi.n	80060b2 <_printf_float+0x386>
 8006042:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006044:	ebaa 0903 	sub.w	r9, sl, r3
 8006048:	9b06      	ldr	r3, [sp, #24]
 800604a:	ebaa 0303 	sub.w	r3, sl, r3
 800604e:	4599      	cmp	r9, r3
 8006050:	bfa8      	it	ge
 8006052:	4699      	movge	r9, r3
 8006054:	f1b9 0f00 	cmp.w	r9, #0
 8006058:	dc33      	bgt.n	80060c2 <_printf_float+0x396>
 800605a:	f04f 0800 	mov.w	r8, #0
 800605e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006062:	f104 0b1a 	add.w	fp, r4, #26
 8006066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006068:	ebaa 0303 	sub.w	r3, sl, r3
 800606c:	eba3 0309 	sub.w	r3, r3, r9
 8006070:	4543      	cmp	r3, r8
 8006072:	f77f af79 	ble.w	8005f68 <_printf_float+0x23c>
 8006076:	2301      	movs	r3, #1
 8006078:	465a      	mov	r2, fp
 800607a:	4631      	mov	r1, r6
 800607c:	4628      	mov	r0, r5
 800607e:	47b8      	blx	r7
 8006080:	3001      	adds	r0, #1
 8006082:	f43f aeae 	beq.w	8005de2 <_printf_float+0xb6>
 8006086:	f108 0801 	add.w	r8, r8, #1
 800608a:	e7ec      	b.n	8006066 <_printf_float+0x33a>
 800608c:	4642      	mov	r2, r8
 800608e:	4631      	mov	r1, r6
 8006090:	4628      	mov	r0, r5
 8006092:	47b8      	blx	r7
 8006094:	3001      	adds	r0, #1
 8006096:	d1c2      	bne.n	800601e <_printf_float+0x2f2>
 8006098:	e6a3      	b.n	8005de2 <_printf_float+0xb6>
 800609a:	2301      	movs	r3, #1
 800609c:	4631      	mov	r1, r6
 800609e:	4628      	mov	r0, r5
 80060a0:	9206      	str	r2, [sp, #24]
 80060a2:	47b8      	blx	r7
 80060a4:	3001      	adds	r0, #1
 80060a6:	f43f ae9c 	beq.w	8005de2 <_printf_float+0xb6>
 80060aa:	9a06      	ldr	r2, [sp, #24]
 80060ac:	f10b 0b01 	add.w	fp, fp, #1
 80060b0:	e7bb      	b.n	800602a <_printf_float+0x2fe>
 80060b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060b6:	4631      	mov	r1, r6
 80060b8:	4628      	mov	r0, r5
 80060ba:	47b8      	blx	r7
 80060bc:	3001      	adds	r0, #1
 80060be:	d1c0      	bne.n	8006042 <_printf_float+0x316>
 80060c0:	e68f      	b.n	8005de2 <_printf_float+0xb6>
 80060c2:	9a06      	ldr	r2, [sp, #24]
 80060c4:	464b      	mov	r3, r9
 80060c6:	4442      	add	r2, r8
 80060c8:	4631      	mov	r1, r6
 80060ca:	4628      	mov	r0, r5
 80060cc:	47b8      	blx	r7
 80060ce:	3001      	adds	r0, #1
 80060d0:	d1c3      	bne.n	800605a <_printf_float+0x32e>
 80060d2:	e686      	b.n	8005de2 <_printf_float+0xb6>
 80060d4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80060d8:	f1ba 0f01 	cmp.w	sl, #1
 80060dc:	dc01      	bgt.n	80060e2 <_printf_float+0x3b6>
 80060de:	07db      	lsls	r3, r3, #31
 80060e0:	d536      	bpl.n	8006150 <_printf_float+0x424>
 80060e2:	2301      	movs	r3, #1
 80060e4:	4642      	mov	r2, r8
 80060e6:	4631      	mov	r1, r6
 80060e8:	4628      	mov	r0, r5
 80060ea:	47b8      	blx	r7
 80060ec:	3001      	adds	r0, #1
 80060ee:	f43f ae78 	beq.w	8005de2 <_printf_float+0xb6>
 80060f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060f6:	4631      	mov	r1, r6
 80060f8:	4628      	mov	r0, r5
 80060fa:	47b8      	blx	r7
 80060fc:	3001      	adds	r0, #1
 80060fe:	f43f ae70 	beq.w	8005de2 <_printf_float+0xb6>
 8006102:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006106:	2200      	movs	r2, #0
 8006108:	2300      	movs	r3, #0
 800610a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800610e:	f7fa fcfb 	bl	8000b08 <__aeabi_dcmpeq>
 8006112:	b9c0      	cbnz	r0, 8006146 <_printf_float+0x41a>
 8006114:	4653      	mov	r3, sl
 8006116:	f108 0201 	add.w	r2, r8, #1
 800611a:	4631      	mov	r1, r6
 800611c:	4628      	mov	r0, r5
 800611e:	47b8      	blx	r7
 8006120:	3001      	adds	r0, #1
 8006122:	d10c      	bne.n	800613e <_printf_float+0x412>
 8006124:	e65d      	b.n	8005de2 <_printf_float+0xb6>
 8006126:	2301      	movs	r3, #1
 8006128:	465a      	mov	r2, fp
 800612a:	4631      	mov	r1, r6
 800612c:	4628      	mov	r0, r5
 800612e:	47b8      	blx	r7
 8006130:	3001      	adds	r0, #1
 8006132:	f43f ae56 	beq.w	8005de2 <_printf_float+0xb6>
 8006136:	f108 0801 	add.w	r8, r8, #1
 800613a:	45d0      	cmp	r8, sl
 800613c:	dbf3      	blt.n	8006126 <_printf_float+0x3fa>
 800613e:	464b      	mov	r3, r9
 8006140:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006144:	e6df      	b.n	8005f06 <_printf_float+0x1da>
 8006146:	f04f 0800 	mov.w	r8, #0
 800614a:	f104 0b1a 	add.w	fp, r4, #26
 800614e:	e7f4      	b.n	800613a <_printf_float+0x40e>
 8006150:	2301      	movs	r3, #1
 8006152:	4642      	mov	r2, r8
 8006154:	e7e1      	b.n	800611a <_printf_float+0x3ee>
 8006156:	2301      	movs	r3, #1
 8006158:	464a      	mov	r2, r9
 800615a:	4631      	mov	r1, r6
 800615c:	4628      	mov	r0, r5
 800615e:	47b8      	blx	r7
 8006160:	3001      	adds	r0, #1
 8006162:	f43f ae3e 	beq.w	8005de2 <_printf_float+0xb6>
 8006166:	f108 0801 	add.w	r8, r8, #1
 800616a:	68e3      	ldr	r3, [r4, #12]
 800616c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800616e:	1a5b      	subs	r3, r3, r1
 8006170:	4543      	cmp	r3, r8
 8006172:	dcf0      	bgt.n	8006156 <_printf_float+0x42a>
 8006174:	e6fc      	b.n	8005f70 <_printf_float+0x244>
 8006176:	f04f 0800 	mov.w	r8, #0
 800617a:	f104 0919 	add.w	r9, r4, #25
 800617e:	e7f4      	b.n	800616a <_printf_float+0x43e>

08006180 <_printf_common>:
 8006180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006184:	4616      	mov	r6, r2
 8006186:	4698      	mov	r8, r3
 8006188:	688a      	ldr	r2, [r1, #8]
 800618a:	690b      	ldr	r3, [r1, #16]
 800618c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006190:	4293      	cmp	r3, r2
 8006192:	bfb8      	it	lt
 8006194:	4613      	movlt	r3, r2
 8006196:	6033      	str	r3, [r6, #0]
 8006198:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800619c:	4607      	mov	r7, r0
 800619e:	460c      	mov	r4, r1
 80061a0:	b10a      	cbz	r2, 80061a6 <_printf_common+0x26>
 80061a2:	3301      	adds	r3, #1
 80061a4:	6033      	str	r3, [r6, #0]
 80061a6:	6823      	ldr	r3, [r4, #0]
 80061a8:	0699      	lsls	r1, r3, #26
 80061aa:	bf42      	ittt	mi
 80061ac:	6833      	ldrmi	r3, [r6, #0]
 80061ae:	3302      	addmi	r3, #2
 80061b0:	6033      	strmi	r3, [r6, #0]
 80061b2:	6825      	ldr	r5, [r4, #0]
 80061b4:	f015 0506 	ands.w	r5, r5, #6
 80061b8:	d106      	bne.n	80061c8 <_printf_common+0x48>
 80061ba:	f104 0a19 	add.w	sl, r4, #25
 80061be:	68e3      	ldr	r3, [r4, #12]
 80061c0:	6832      	ldr	r2, [r6, #0]
 80061c2:	1a9b      	subs	r3, r3, r2
 80061c4:	42ab      	cmp	r3, r5
 80061c6:	dc26      	bgt.n	8006216 <_printf_common+0x96>
 80061c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80061cc:	6822      	ldr	r2, [r4, #0]
 80061ce:	3b00      	subs	r3, #0
 80061d0:	bf18      	it	ne
 80061d2:	2301      	movne	r3, #1
 80061d4:	0692      	lsls	r2, r2, #26
 80061d6:	d42b      	bmi.n	8006230 <_printf_common+0xb0>
 80061d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80061dc:	4641      	mov	r1, r8
 80061de:	4638      	mov	r0, r7
 80061e0:	47c8      	blx	r9
 80061e2:	3001      	adds	r0, #1
 80061e4:	d01e      	beq.n	8006224 <_printf_common+0xa4>
 80061e6:	6823      	ldr	r3, [r4, #0]
 80061e8:	6922      	ldr	r2, [r4, #16]
 80061ea:	f003 0306 	and.w	r3, r3, #6
 80061ee:	2b04      	cmp	r3, #4
 80061f0:	bf02      	ittt	eq
 80061f2:	68e5      	ldreq	r5, [r4, #12]
 80061f4:	6833      	ldreq	r3, [r6, #0]
 80061f6:	1aed      	subeq	r5, r5, r3
 80061f8:	68a3      	ldr	r3, [r4, #8]
 80061fa:	bf0c      	ite	eq
 80061fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006200:	2500      	movne	r5, #0
 8006202:	4293      	cmp	r3, r2
 8006204:	bfc4      	itt	gt
 8006206:	1a9b      	subgt	r3, r3, r2
 8006208:	18ed      	addgt	r5, r5, r3
 800620a:	2600      	movs	r6, #0
 800620c:	341a      	adds	r4, #26
 800620e:	42b5      	cmp	r5, r6
 8006210:	d11a      	bne.n	8006248 <_printf_common+0xc8>
 8006212:	2000      	movs	r0, #0
 8006214:	e008      	b.n	8006228 <_printf_common+0xa8>
 8006216:	2301      	movs	r3, #1
 8006218:	4652      	mov	r2, sl
 800621a:	4641      	mov	r1, r8
 800621c:	4638      	mov	r0, r7
 800621e:	47c8      	blx	r9
 8006220:	3001      	adds	r0, #1
 8006222:	d103      	bne.n	800622c <_printf_common+0xac>
 8006224:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800622c:	3501      	adds	r5, #1
 800622e:	e7c6      	b.n	80061be <_printf_common+0x3e>
 8006230:	18e1      	adds	r1, r4, r3
 8006232:	1c5a      	adds	r2, r3, #1
 8006234:	2030      	movs	r0, #48	@ 0x30
 8006236:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800623a:	4422      	add	r2, r4
 800623c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006240:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006244:	3302      	adds	r3, #2
 8006246:	e7c7      	b.n	80061d8 <_printf_common+0x58>
 8006248:	2301      	movs	r3, #1
 800624a:	4622      	mov	r2, r4
 800624c:	4641      	mov	r1, r8
 800624e:	4638      	mov	r0, r7
 8006250:	47c8      	blx	r9
 8006252:	3001      	adds	r0, #1
 8006254:	d0e6      	beq.n	8006224 <_printf_common+0xa4>
 8006256:	3601      	adds	r6, #1
 8006258:	e7d9      	b.n	800620e <_printf_common+0x8e>
	...

0800625c <_printf_i>:
 800625c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006260:	7e0f      	ldrb	r7, [r1, #24]
 8006262:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006264:	2f78      	cmp	r7, #120	@ 0x78
 8006266:	4691      	mov	r9, r2
 8006268:	4680      	mov	r8, r0
 800626a:	460c      	mov	r4, r1
 800626c:	469a      	mov	sl, r3
 800626e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006272:	d807      	bhi.n	8006284 <_printf_i+0x28>
 8006274:	2f62      	cmp	r7, #98	@ 0x62
 8006276:	d80a      	bhi.n	800628e <_printf_i+0x32>
 8006278:	2f00      	cmp	r7, #0
 800627a:	f000 80d2 	beq.w	8006422 <_printf_i+0x1c6>
 800627e:	2f58      	cmp	r7, #88	@ 0x58
 8006280:	f000 80b9 	beq.w	80063f6 <_printf_i+0x19a>
 8006284:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006288:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800628c:	e03a      	b.n	8006304 <_printf_i+0xa8>
 800628e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006292:	2b15      	cmp	r3, #21
 8006294:	d8f6      	bhi.n	8006284 <_printf_i+0x28>
 8006296:	a101      	add	r1, pc, #4	@ (adr r1, 800629c <_printf_i+0x40>)
 8006298:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800629c:	080062f5 	.word	0x080062f5
 80062a0:	08006309 	.word	0x08006309
 80062a4:	08006285 	.word	0x08006285
 80062a8:	08006285 	.word	0x08006285
 80062ac:	08006285 	.word	0x08006285
 80062b0:	08006285 	.word	0x08006285
 80062b4:	08006309 	.word	0x08006309
 80062b8:	08006285 	.word	0x08006285
 80062bc:	08006285 	.word	0x08006285
 80062c0:	08006285 	.word	0x08006285
 80062c4:	08006285 	.word	0x08006285
 80062c8:	08006409 	.word	0x08006409
 80062cc:	08006333 	.word	0x08006333
 80062d0:	080063c3 	.word	0x080063c3
 80062d4:	08006285 	.word	0x08006285
 80062d8:	08006285 	.word	0x08006285
 80062dc:	0800642b 	.word	0x0800642b
 80062e0:	08006285 	.word	0x08006285
 80062e4:	08006333 	.word	0x08006333
 80062e8:	08006285 	.word	0x08006285
 80062ec:	08006285 	.word	0x08006285
 80062f0:	080063cb 	.word	0x080063cb
 80062f4:	6833      	ldr	r3, [r6, #0]
 80062f6:	1d1a      	adds	r2, r3, #4
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6032      	str	r2, [r6, #0]
 80062fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006300:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006304:	2301      	movs	r3, #1
 8006306:	e09d      	b.n	8006444 <_printf_i+0x1e8>
 8006308:	6833      	ldr	r3, [r6, #0]
 800630a:	6820      	ldr	r0, [r4, #0]
 800630c:	1d19      	adds	r1, r3, #4
 800630e:	6031      	str	r1, [r6, #0]
 8006310:	0606      	lsls	r6, r0, #24
 8006312:	d501      	bpl.n	8006318 <_printf_i+0xbc>
 8006314:	681d      	ldr	r5, [r3, #0]
 8006316:	e003      	b.n	8006320 <_printf_i+0xc4>
 8006318:	0645      	lsls	r5, r0, #25
 800631a:	d5fb      	bpl.n	8006314 <_printf_i+0xb8>
 800631c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006320:	2d00      	cmp	r5, #0
 8006322:	da03      	bge.n	800632c <_printf_i+0xd0>
 8006324:	232d      	movs	r3, #45	@ 0x2d
 8006326:	426d      	negs	r5, r5
 8006328:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800632c:	4859      	ldr	r0, [pc, #356]	@ (8006494 <_printf_i+0x238>)
 800632e:	230a      	movs	r3, #10
 8006330:	e011      	b.n	8006356 <_printf_i+0xfa>
 8006332:	6821      	ldr	r1, [r4, #0]
 8006334:	6833      	ldr	r3, [r6, #0]
 8006336:	0608      	lsls	r0, r1, #24
 8006338:	f853 5b04 	ldr.w	r5, [r3], #4
 800633c:	d402      	bmi.n	8006344 <_printf_i+0xe8>
 800633e:	0649      	lsls	r1, r1, #25
 8006340:	bf48      	it	mi
 8006342:	b2ad      	uxthmi	r5, r5
 8006344:	2f6f      	cmp	r7, #111	@ 0x6f
 8006346:	4853      	ldr	r0, [pc, #332]	@ (8006494 <_printf_i+0x238>)
 8006348:	6033      	str	r3, [r6, #0]
 800634a:	bf14      	ite	ne
 800634c:	230a      	movne	r3, #10
 800634e:	2308      	moveq	r3, #8
 8006350:	2100      	movs	r1, #0
 8006352:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006356:	6866      	ldr	r6, [r4, #4]
 8006358:	60a6      	str	r6, [r4, #8]
 800635a:	2e00      	cmp	r6, #0
 800635c:	bfa2      	ittt	ge
 800635e:	6821      	ldrge	r1, [r4, #0]
 8006360:	f021 0104 	bicge.w	r1, r1, #4
 8006364:	6021      	strge	r1, [r4, #0]
 8006366:	b90d      	cbnz	r5, 800636c <_printf_i+0x110>
 8006368:	2e00      	cmp	r6, #0
 800636a:	d04b      	beq.n	8006404 <_printf_i+0x1a8>
 800636c:	4616      	mov	r6, r2
 800636e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006372:	fb03 5711 	mls	r7, r3, r1, r5
 8006376:	5dc7      	ldrb	r7, [r0, r7]
 8006378:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800637c:	462f      	mov	r7, r5
 800637e:	42bb      	cmp	r3, r7
 8006380:	460d      	mov	r5, r1
 8006382:	d9f4      	bls.n	800636e <_printf_i+0x112>
 8006384:	2b08      	cmp	r3, #8
 8006386:	d10b      	bne.n	80063a0 <_printf_i+0x144>
 8006388:	6823      	ldr	r3, [r4, #0]
 800638a:	07df      	lsls	r7, r3, #31
 800638c:	d508      	bpl.n	80063a0 <_printf_i+0x144>
 800638e:	6923      	ldr	r3, [r4, #16]
 8006390:	6861      	ldr	r1, [r4, #4]
 8006392:	4299      	cmp	r1, r3
 8006394:	bfde      	ittt	le
 8006396:	2330      	movle	r3, #48	@ 0x30
 8006398:	f806 3c01 	strble.w	r3, [r6, #-1]
 800639c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80063a0:	1b92      	subs	r2, r2, r6
 80063a2:	6122      	str	r2, [r4, #16]
 80063a4:	f8cd a000 	str.w	sl, [sp]
 80063a8:	464b      	mov	r3, r9
 80063aa:	aa03      	add	r2, sp, #12
 80063ac:	4621      	mov	r1, r4
 80063ae:	4640      	mov	r0, r8
 80063b0:	f7ff fee6 	bl	8006180 <_printf_common>
 80063b4:	3001      	adds	r0, #1
 80063b6:	d14a      	bne.n	800644e <_printf_i+0x1f2>
 80063b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80063bc:	b004      	add	sp, #16
 80063be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063c2:	6823      	ldr	r3, [r4, #0]
 80063c4:	f043 0320 	orr.w	r3, r3, #32
 80063c8:	6023      	str	r3, [r4, #0]
 80063ca:	4833      	ldr	r0, [pc, #204]	@ (8006498 <_printf_i+0x23c>)
 80063cc:	2778      	movs	r7, #120	@ 0x78
 80063ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80063d2:	6823      	ldr	r3, [r4, #0]
 80063d4:	6831      	ldr	r1, [r6, #0]
 80063d6:	061f      	lsls	r7, r3, #24
 80063d8:	f851 5b04 	ldr.w	r5, [r1], #4
 80063dc:	d402      	bmi.n	80063e4 <_printf_i+0x188>
 80063de:	065f      	lsls	r7, r3, #25
 80063e0:	bf48      	it	mi
 80063e2:	b2ad      	uxthmi	r5, r5
 80063e4:	6031      	str	r1, [r6, #0]
 80063e6:	07d9      	lsls	r1, r3, #31
 80063e8:	bf44      	itt	mi
 80063ea:	f043 0320 	orrmi.w	r3, r3, #32
 80063ee:	6023      	strmi	r3, [r4, #0]
 80063f0:	b11d      	cbz	r5, 80063fa <_printf_i+0x19e>
 80063f2:	2310      	movs	r3, #16
 80063f4:	e7ac      	b.n	8006350 <_printf_i+0xf4>
 80063f6:	4827      	ldr	r0, [pc, #156]	@ (8006494 <_printf_i+0x238>)
 80063f8:	e7e9      	b.n	80063ce <_printf_i+0x172>
 80063fa:	6823      	ldr	r3, [r4, #0]
 80063fc:	f023 0320 	bic.w	r3, r3, #32
 8006400:	6023      	str	r3, [r4, #0]
 8006402:	e7f6      	b.n	80063f2 <_printf_i+0x196>
 8006404:	4616      	mov	r6, r2
 8006406:	e7bd      	b.n	8006384 <_printf_i+0x128>
 8006408:	6833      	ldr	r3, [r6, #0]
 800640a:	6825      	ldr	r5, [r4, #0]
 800640c:	6961      	ldr	r1, [r4, #20]
 800640e:	1d18      	adds	r0, r3, #4
 8006410:	6030      	str	r0, [r6, #0]
 8006412:	062e      	lsls	r6, r5, #24
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	d501      	bpl.n	800641c <_printf_i+0x1c0>
 8006418:	6019      	str	r1, [r3, #0]
 800641a:	e002      	b.n	8006422 <_printf_i+0x1c6>
 800641c:	0668      	lsls	r0, r5, #25
 800641e:	d5fb      	bpl.n	8006418 <_printf_i+0x1bc>
 8006420:	8019      	strh	r1, [r3, #0]
 8006422:	2300      	movs	r3, #0
 8006424:	6123      	str	r3, [r4, #16]
 8006426:	4616      	mov	r6, r2
 8006428:	e7bc      	b.n	80063a4 <_printf_i+0x148>
 800642a:	6833      	ldr	r3, [r6, #0]
 800642c:	1d1a      	adds	r2, r3, #4
 800642e:	6032      	str	r2, [r6, #0]
 8006430:	681e      	ldr	r6, [r3, #0]
 8006432:	6862      	ldr	r2, [r4, #4]
 8006434:	2100      	movs	r1, #0
 8006436:	4630      	mov	r0, r6
 8006438:	f7f9 feea 	bl	8000210 <memchr>
 800643c:	b108      	cbz	r0, 8006442 <_printf_i+0x1e6>
 800643e:	1b80      	subs	r0, r0, r6
 8006440:	6060      	str	r0, [r4, #4]
 8006442:	6863      	ldr	r3, [r4, #4]
 8006444:	6123      	str	r3, [r4, #16]
 8006446:	2300      	movs	r3, #0
 8006448:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800644c:	e7aa      	b.n	80063a4 <_printf_i+0x148>
 800644e:	6923      	ldr	r3, [r4, #16]
 8006450:	4632      	mov	r2, r6
 8006452:	4649      	mov	r1, r9
 8006454:	4640      	mov	r0, r8
 8006456:	47d0      	blx	sl
 8006458:	3001      	adds	r0, #1
 800645a:	d0ad      	beq.n	80063b8 <_printf_i+0x15c>
 800645c:	6823      	ldr	r3, [r4, #0]
 800645e:	079b      	lsls	r3, r3, #30
 8006460:	d413      	bmi.n	800648a <_printf_i+0x22e>
 8006462:	68e0      	ldr	r0, [r4, #12]
 8006464:	9b03      	ldr	r3, [sp, #12]
 8006466:	4298      	cmp	r0, r3
 8006468:	bfb8      	it	lt
 800646a:	4618      	movlt	r0, r3
 800646c:	e7a6      	b.n	80063bc <_printf_i+0x160>
 800646e:	2301      	movs	r3, #1
 8006470:	4632      	mov	r2, r6
 8006472:	4649      	mov	r1, r9
 8006474:	4640      	mov	r0, r8
 8006476:	47d0      	blx	sl
 8006478:	3001      	adds	r0, #1
 800647a:	d09d      	beq.n	80063b8 <_printf_i+0x15c>
 800647c:	3501      	adds	r5, #1
 800647e:	68e3      	ldr	r3, [r4, #12]
 8006480:	9903      	ldr	r1, [sp, #12]
 8006482:	1a5b      	subs	r3, r3, r1
 8006484:	42ab      	cmp	r3, r5
 8006486:	dcf2      	bgt.n	800646e <_printf_i+0x212>
 8006488:	e7eb      	b.n	8006462 <_printf_i+0x206>
 800648a:	2500      	movs	r5, #0
 800648c:	f104 0619 	add.w	r6, r4, #25
 8006490:	e7f5      	b.n	800647e <_printf_i+0x222>
 8006492:	bf00      	nop
 8006494:	080098e2 	.word	0x080098e2
 8006498:	080098f3 	.word	0x080098f3

0800649c <siprintf>:
 800649c:	b40e      	push	{r1, r2, r3}
 800649e:	b500      	push	{lr}
 80064a0:	b09c      	sub	sp, #112	@ 0x70
 80064a2:	ab1d      	add	r3, sp, #116	@ 0x74
 80064a4:	9002      	str	r0, [sp, #8]
 80064a6:	9006      	str	r0, [sp, #24]
 80064a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80064ac:	4809      	ldr	r0, [pc, #36]	@ (80064d4 <siprintf+0x38>)
 80064ae:	9107      	str	r1, [sp, #28]
 80064b0:	9104      	str	r1, [sp, #16]
 80064b2:	4909      	ldr	r1, [pc, #36]	@ (80064d8 <siprintf+0x3c>)
 80064b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80064b8:	9105      	str	r1, [sp, #20]
 80064ba:	6800      	ldr	r0, [r0, #0]
 80064bc:	9301      	str	r3, [sp, #4]
 80064be:	a902      	add	r1, sp, #8
 80064c0:	f000 ffb2 	bl	8007428 <_svfiprintf_r>
 80064c4:	9b02      	ldr	r3, [sp, #8]
 80064c6:	2200      	movs	r2, #0
 80064c8:	701a      	strb	r2, [r3, #0]
 80064ca:	b01c      	add	sp, #112	@ 0x70
 80064cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80064d0:	b003      	add	sp, #12
 80064d2:	4770      	bx	lr
 80064d4:	20000018 	.word	0x20000018
 80064d8:	ffff0208 	.word	0xffff0208

080064dc <std>:
 80064dc:	2300      	movs	r3, #0
 80064de:	b510      	push	{r4, lr}
 80064e0:	4604      	mov	r4, r0
 80064e2:	e9c0 3300 	strd	r3, r3, [r0]
 80064e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064ea:	6083      	str	r3, [r0, #8]
 80064ec:	8181      	strh	r1, [r0, #12]
 80064ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80064f0:	81c2      	strh	r2, [r0, #14]
 80064f2:	6183      	str	r3, [r0, #24]
 80064f4:	4619      	mov	r1, r3
 80064f6:	2208      	movs	r2, #8
 80064f8:	305c      	adds	r0, #92	@ 0x5c
 80064fa:	f000 f8b1 	bl	8006660 <memset>
 80064fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006534 <std+0x58>)
 8006500:	6263      	str	r3, [r4, #36]	@ 0x24
 8006502:	4b0d      	ldr	r3, [pc, #52]	@ (8006538 <std+0x5c>)
 8006504:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006506:	4b0d      	ldr	r3, [pc, #52]	@ (800653c <std+0x60>)
 8006508:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800650a:	4b0d      	ldr	r3, [pc, #52]	@ (8006540 <std+0x64>)
 800650c:	6323      	str	r3, [r4, #48]	@ 0x30
 800650e:	4b0d      	ldr	r3, [pc, #52]	@ (8006544 <std+0x68>)
 8006510:	6224      	str	r4, [r4, #32]
 8006512:	429c      	cmp	r4, r3
 8006514:	d006      	beq.n	8006524 <std+0x48>
 8006516:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800651a:	4294      	cmp	r4, r2
 800651c:	d002      	beq.n	8006524 <std+0x48>
 800651e:	33d0      	adds	r3, #208	@ 0xd0
 8006520:	429c      	cmp	r4, r3
 8006522:	d105      	bne.n	8006530 <std+0x54>
 8006524:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800652c:	f000 b8ce 	b.w	80066cc <__retarget_lock_init_recursive>
 8006530:	bd10      	pop	{r4, pc}
 8006532:	bf00      	nop
 8006534:	08007fe9 	.word	0x08007fe9
 8006538:	0800800b 	.word	0x0800800b
 800653c:	08008043 	.word	0x08008043
 8006540:	08008067 	.word	0x08008067
 8006544:	20000384 	.word	0x20000384

08006548 <stdio_exit_handler>:
 8006548:	4a02      	ldr	r2, [pc, #8]	@ (8006554 <stdio_exit_handler+0xc>)
 800654a:	4903      	ldr	r1, [pc, #12]	@ (8006558 <stdio_exit_handler+0x10>)
 800654c:	4803      	ldr	r0, [pc, #12]	@ (800655c <stdio_exit_handler+0x14>)
 800654e:	f000 b869 	b.w	8006624 <_fwalk_sglue>
 8006552:	bf00      	nop
 8006554:	2000000c 	.word	0x2000000c
 8006558:	0800787d 	.word	0x0800787d
 800655c:	2000001c 	.word	0x2000001c

08006560 <cleanup_stdio>:
 8006560:	6841      	ldr	r1, [r0, #4]
 8006562:	4b0c      	ldr	r3, [pc, #48]	@ (8006594 <cleanup_stdio+0x34>)
 8006564:	4299      	cmp	r1, r3
 8006566:	b510      	push	{r4, lr}
 8006568:	4604      	mov	r4, r0
 800656a:	d001      	beq.n	8006570 <cleanup_stdio+0x10>
 800656c:	f001 f986 	bl	800787c <_fflush_r>
 8006570:	68a1      	ldr	r1, [r4, #8]
 8006572:	4b09      	ldr	r3, [pc, #36]	@ (8006598 <cleanup_stdio+0x38>)
 8006574:	4299      	cmp	r1, r3
 8006576:	d002      	beq.n	800657e <cleanup_stdio+0x1e>
 8006578:	4620      	mov	r0, r4
 800657a:	f001 f97f 	bl	800787c <_fflush_r>
 800657e:	68e1      	ldr	r1, [r4, #12]
 8006580:	4b06      	ldr	r3, [pc, #24]	@ (800659c <cleanup_stdio+0x3c>)
 8006582:	4299      	cmp	r1, r3
 8006584:	d004      	beq.n	8006590 <cleanup_stdio+0x30>
 8006586:	4620      	mov	r0, r4
 8006588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800658c:	f001 b976 	b.w	800787c <_fflush_r>
 8006590:	bd10      	pop	{r4, pc}
 8006592:	bf00      	nop
 8006594:	20000384 	.word	0x20000384
 8006598:	200003ec 	.word	0x200003ec
 800659c:	20000454 	.word	0x20000454

080065a0 <global_stdio_init.part.0>:
 80065a0:	b510      	push	{r4, lr}
 80065a2:	4b0b      	ldr	r3, [pc, #44]	@ (80065d0 <global_stdio_init.part.0+0x30>)
 80065a4:	4c0b      	ldr	r4, [pc, #44]	@ (80065d4 <global_stdio_init.part.0+0x34>)
 80065a6:	4a0c      	ldr	r2, [pc, #48]	@ (80065d8 <global_stdio_init.part.0+0x38>)
 80065a8:	601a      	str	r2, [r3, #0]
 80065aa:	4620      	mov	r0, r4
 80065ac:	2200      	movs	r2, #0
 80065ae:	2104      	movs	r1, #4
 80065b0:	f7ff ff94 	bl	80064dc <std>
 80065b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80065b8:	2201      	movs	r2, #1
 80065ba:	2109      	movs	r1, #9
 80065bc:	f7ff ff8e 	bl	80064dc <std>
 80065c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80065c4:	2202      	movs	r2, #2
 80065c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065ca:	2112      	movs	r1, #18
 80065cc:	f7ff bf86 	b.w	80064dc <std>
 80065d0:	200004bc 	.word	0x200004bc
 80065d4:	20000384 	.word	0x20000384
 80065d8:	08006549 	.word	0x08006549

080065dc <__sfp_lock_acquire>:
 80065dc:	4801      	ldr	r0, [pc, #4]	@ (80065e4 <__sfp_lock_acquire+0x8>)
 80065de:	f000 b876 	b.w	80066ce <__retarget_lock_acquire_recursive>
 80065e2:	bf00      	nop
 80065e4:	200004c1 	.word	0x200004c1

080065e8 <__sfp_lock_release>:
 80065e8:	4801      	ldr	r0, [pc, #4]	@ (80065f0 <__sfp_lock_release+0x8>)
 80065ea:	f000 b871 	b.w	80066d0 <__retarget_lock_release_recursive>
 80065ee:	bf00      	nop
 80065f0:	200004c1 	.word	0x200004c1

080065f4 <__sinit>:
 80065f4:	b510      	push	{r4, lr}
 80065f6:	4604      	mov	r4, r0
 80065f8:	f7ff fff0 	bl	80065dc <__sfp_lock_acquire>
 80065fc:	6a23      	ldr	r3, [r4, #32]
 80065fe:	b11b      	cbz	r3, 8006608 <__sinit+0x14>
 8006600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006604:	f7ff bff0 	b.w	80065e8 <__sfp_lock_release>
 8006608:	4b04      	ldr	r3, [pc, #16]	@ (800661c <__sinit+0x28>)
 800660a:	6223      	str	r3, [r4, #32]
 800660c:	4b04      	ldr	r3, [pc, #16]	@ (8006620 <__sinit+0x2c>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1f5      	bne.n	8006600 <__sinit+0xc>
 8006614:	f7ff ffc4 	bl	80065a0 <global_stdio_init.part.0>
 8006618:	e7f2      	b.n	8006600 <__sinit+0xc>
 800661a:	bf00      	nop
 800661c:	08006561 	.word	0x08006561
 8006620:	200004bc 	.word	0x200004bc

08006624 <_fwalk_sglue>:
 8006624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006628:	4607      	mov	r7, r0
 800662a:	4688      	mov	r8, r1
 800662c:	4614      	mov	r4, r2
 800662e:	2600      	movs	r6, #0
 8006630:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006634:	f1b9 0901 	subs.w	r9, r9, #1
 8006638:	d505      	bpl.n	8006646 <_fwalk_sglue+0x22>
 800663a:	6824      	ldr	r4, [r4, #0]
 800663c:	2c00      	cmp	r4, #0
 800663e:	d1f7      	bne.n	8006630 <_fwalk_sglue+0xc>
 8006640:	4630      	mov	r0, r6
 8006642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006646:	89ab      	ldrh	r3, [r5, #12]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d907      	bls.n	800665c <_fwalk_sglue+0x38>
 800664c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006650:	3301      	adds	r3, #1
 8006652:	d003      	beq.n	800665c <_fwalk_sglue+0x38>
 8006654:	4629      	mov	r1, r5
 8006656:	4638      	mov	r0, r7
 8006658:	47c0      	blx	r8
 800665a:	4306      	orrs	r6, r0
 800665c:	3568      	adds	r5, #104	@ 0x68
 800665e:	e7e9      	b.n	8006634 <_fwalk_sglue+0x10>

08006660 <memset>:
 8006660:	4402      	add	r2, r0
 8006662:	4603      	mov	r3, r0
 8006664:	4293      	cmp	r3, r2
 8006666:	d100      	bne.n	800666a <memset+0xa>
 8006668:	4770      	bx	lr
 800666a:	f803 1b01 	strb.w	r1, [r3], #1
 800666e:	e7f9      	b.n	8006664 <memset+0x4>

08006670 <_localeconv_r>:
 8006670:	4800      	ldr	r0, [pc, #0]	@ (8006674 <_localeconv_r+0x4>)
 8006672:	4770      	bx	lr
 8006674:	20000158 	.word	0x20000158

08006678 <__errno>:
 8006678:	4b01      	ldr	r3, [pc, #4]	@ (8006680 <__errno+0x8>)
 800667a:	6818      	ldr	r0, [r3, #0]
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	20000018 	.word	0x20000018

08006684 <__libc_init_array>:
 8006684:	b570      	push	{r4, r5, r6, lr}
 8006686:	4d0d      	ldr	r5, [pc, #52]	@ (80066bc <__libc_init_array+0x38>)
 8006688:	4c0d      	ldr	r4, [pc, #52]	@ (80066c0 <__libc_init_array+0x3c>)
 800668a:	1b64      	subs	r4, r4, r5
 800668c:	10a4      	asrs	r4, r4, #2
 800668e:	2600      	movs	r6, #0
 8006690:	42a6      	cmp	r6, r4
 8006692:	d109      	bne.n	80066a8 <__libc_init_array+0x24>
 8006694:	4d0b      	ldr	r5, [pc, #44]	@ (80066c4 <__libc_init_array+0x40>)
 8006696:	4c0c      	ldr	r4, [pc, #48]	@ (80066c8 <__libc_init_array+0x44>)
 8006698:	f003 f84e 	bl	8009738 <_init>
 800669c:	1b64      	subs	r4, r4, r5
 800669e:	10a4      	asrs	r4, r4, #2
 80066a0:	2600      	movs	r6, #0
 80066a2:	42a6      	cmp	r6, r4
 80066a4:	d105      	bne.n	80066b2 <__libc_init_array+0x2e>
 80066a6:	bd70      	pop	{r4, r5, r6, pc}
 80066a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ac:	4798      	blx	r3
 80066ae:	3601      	adds	r6, #1
 80066b0:	e7ee      	b.n	8006690 <__libc_init_array+0xc>
 80066b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80066b6:	4798      	blx	r3
 80066b8:	3601      	adds	r6, #1
 80066ba:	e7f2      	b.n	80066a2 <__libc_init_array+0x1e>
 80066bc:	08009c78 	.word	0x08009c78
 80066c0:	08009c78 	.word	0x08009c78
 80066c4:	08009c78 	.word	0x08009c78
 80066c8:	08009c7c 	.word	0x08009c7c

080066cc <__retarget_lock_init_recursive>:
 80066cc:	4770      	bx	lr

080066ce <__retarget_lock_acquire_recursive>:
 80066ce:	4770      	bx	lr

080066d0 <__retarget_lock_release_recursive>:
 80066d0:	4770      	bx	lr

080066d2 <quorem>:
 80066d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066d6:	6903      	ldr	r3, [r0, #16]
 80066d8:	690c      	ldr	r4, [r1, #16]
 80066da:	42a3      	cmp	r3, r4
 80066dc:	4607      	mov	r7, r0
 80066de:	db7e      	blt.n	80067de <quorem+0x10c>
 80066e0:	3c01      	subs	r4, #1
 80066e2:	f101 0814 	add.w	r8, r1, #20
 80066e6:	00a3      	lsls	r3, r4, #2
 80066e8:	f100 0514 	add.w	r5, r0, #20
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80066f2:	9301      	str	r3, [sp, #4]
 80066f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80066f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066fc:	3301      	adds	r3, #1
 80066fe:	429a      	cmp	r2, r3
 8006700:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006704:	fbb2 f6f3 	udiv	r6, r2, r3
 8006708:	d32e      	bcc.n	8006768 <quorem+0x96>
 800670a:	f04f 0a00 	mov.w	sl, #0
 800670e:	46c4      	mov	ip, r8
 8006710:	46ae      	mov	lr, r5
 8006712:	46d3      	mov	fp, sl
 8006714:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006718:	b298      	uxth	r0, r3
 800671a:	fb06 a000 	mla	r0, r6, r0, sl
 800671e:	0c02      	lsrs	r2, r0, #16
 8006720:	0c1b      	lsrs	r3, r3, #16
 8006722:	fb06 2303 	mla	r3, r6, r3, r2
 8006726:	f8de 2000 	ldr.w	r2, [lr]
 800672a:	b280      	uxth	r0, r0
 800672c:	b292      	uxth	r2, r2
 800672e:	1a12      	subs	r2, r2, r0
 8006730:	445a      	add	r2, fp
 8006732:	f8de 0000 	ldr.w	r0, [lr]
 8006736:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800673a:	b29b      	uxth	r3, r3
 800673c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006740:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006744:	b292      	uxth	r2, r2
 8006746:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800674a:	45e1      	cmp	r9, ip
 800674c:	f84e 2b04 	str.w	r2, [lr], #4
 8006750:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006754:	d2de      	bcs.n	8006714 <quorem+0x42>
 8006756:	9b00      	ldr	r3, [sp, #0]
 8006758:	58eb      	ldr	r3, [r5, r3]
 800675a:	b92b      	cbnz	r3, 8006768 <quorem+0x96>
 800675c:	9b01      	ldr	r3, [sp, #4]
 800675e:	3b04      	subs	r3, #4
 8006760:	429d      	cmp	r5, r3
 8006762:	461a      	mov	r2, r3
 8006764:	d32f      	bcc.n	80067c6 <quorem+0xf4>
 8006766:	613c      	str	r4, [r7, #16]
 8006768:	4638      	mov	r0, r7
 800676a:	f001 fb35 	bl	8007dd8 <__mcmp>
 800676e:	2800      	cmp	r0, #0
 8006770:	db25      	blt.n	80067be <quorem+0xec>
 8006772:	4629      	mov	r1, r5
 8006774:	2000      	movs	r0, #0
 8006776:	f858 2b04 	ldr.w	r2, [r8], #4
 800677a:	f8d1 c000 	ldr.w	ip, [r1]
 800677e:	fa1f fe82 	uxth.w	lr, r2
 8006782:	fa1f f38c 	uxth.w	r3, ip
 8006786:	eba3 030e 	sub.w	r3, r3, lr
 800678a:	4403      	add	r3, r0
 800678c:	0c12      	lsrs	r2, r2, #16
 800678e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006792:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006796:	b29b      	uxth	r3, r3
 8006798:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800679c:	45c1      	cmp	r9, r8
 800679e:	f841 3b04 	str.w	r3, [r1], #4
 80067a2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80067a6:	d2e6      	bcs.n	8006776 <quorem+0xa4>
 80067a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80067b0:	b922      	cbnz	r2, 80067bc <quorem+0xea>
 80067b2:	3b04      	subs	r3, #4
 80067b4:	429d      	cmp	r5, r3
 80067b6:	461a      	mov	r2, r3
 80067b8:	d30b      	bcc.n	80067d2 <quorem+0x100>
 80067ba:	613c      	str	r4, [r7, #16]
 80067bc:	3601      	adds	r6, #1
 80067be:	4630      	mov	r0, r6
 80067c0:	b003      	add	sp, #12
 80067c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067c6:	6812      	ldr	r2, [r2, #0]
 80067c8:	3b04      	subs	r3, #4
 80067ca:	2a00      	cmp	r2, #0
 80067cc:	d1cb      	bne.n	8006766 <quorem+0x94>
 80067ce:	3c01      	subs	r4, #1
 80067d0:	e7c6      	b.n	8006760 <quorem+0x8e>
 80067d2:	6812      	ldr	r2, [r2, #0]
 80067d4:	3b04      	subs	r3, #4
 80067d6:	2a00      	cmp	r2, #0
 80067d8:	d1ef      	bne.n	80067ba <quorem+0xe8>
 80067da:	3c01      	subs	r4, #1
 80067dc:	e7ea      	b.n	80067b4 <quorem+0xe2>
 80067de:	2000      	movs	r0, #0
 80067e0:	e7ee      	b.n	80067c0 <quorem+0xee>
 80067e2:	0000      	movs	r0, r0
 80067e4:	0000      	movs	r0, r0
	...

080067e8 <_dtoa_r>:
 80067e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ec:	69c7      	ldr	r7, [r0, #28]
 80067ee:	b099      	sub	sp, #100	@ 0x64
 80067f0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80067f4:	ec55 4b10 	vmov	r4, r5, d0
 80067f8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80067fa:	9109      	str	r1, [sp, #36]	@ 0x24
 80067fc:	4683      	mov	fp, r0
 80067fe:	920e      	str	r2, [sp, #56]	@ 0x38
 8006800:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006802:	b97f      	cbnz	r7, 8006824 <_dtoa_r+0x3c>
 8006804:	2010      	movs	r0, #16
 8006806:	f000 ff0b 	bl	8007620 <malloc>
 800680a:	4602      	mov	r2, r0
 800680c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006810:	b920      	cbnz	r0, 800681c <_dtoa_r+0x34>
 8006812:	4ba7      	ldr	r3, [pc, #668]	@ (8006ab0 <_dtoa_r+0x2c8>)
 8006814:	21ef      	movs	r1, #239	@ 0xef
 8006816:	48a7      	ldr	r0, [pc, #668]	@ (8006ab4 <_dtoa_r+0x2cc>)
 8006818:	f001 fcd6 	bl	80081c8 <__assert_func>
 800681c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006820:	6007      	str	r7, [r0, #0]
 8006822:	60c7      	str	r7, [r0, #12]
 8006824:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006828:	6819      	ldr	r1, [r3, #0]
 800682a:	b159      	cbz	r1, 8006844 <_dtoa_r+0x5c>
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	604a      	str	r2, [r1, #4]
 8006830:	2301      	movs	r3, #1
 8006832:	4093      	lsls	r3, r2
 8006834:	608b      	str	r3, [r1, #8]
 8006836:	4658      	mov	r0, fp
 8006838:	f001 f894 	bl	8007964 <_Bfree>
 800683c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006840:	2200      	movs	r2, #0
 8006842:	601a      	str	r2, [r3, #0]
 8006844:	1e2b      	subs	r3, r5, #0
 8006846:	bfb9      	ittee	lt
 8006848:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800684c:	9303      	strlt	r3, [sp, #12]
 800684e:	2300      	movge	r3, #0
 8006850:	6033      	strge	r3, [r6, #0]
 8006852:	9f03      	ldr	r7, [sp, #12]
 8006854:	4b98      	ldr	r3, [pc, #608]	@ (8006ab8 <_dtoa_r+0x2d0>)
 8006856:	bfbc      	itt	lt
 8006858:	2201      	movlt	r2, #1
 800685a:	6032      	strlt	r2, [r6, #0]
 800685c:	43bb      	bics	r3, r7
 800685e:	d112      	bne.n	8006886 <_dtoa_r+0x9e>
 8006860:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006862:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006866:	6013      	str	r3, [r2, #0]
 8006868:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800686c:	4323      	orrs	r3, r4
 800686e:	f000 854d 	beq.w	800730c <_dtoa_r+0xb24>
 8006872:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006874:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006acc <_dtoa_r+0x2e4>
 8006878:	2b00      	cmp	r3, #0
 800687a:	f000 854f 	beq.w	800731c <_dtoa_r+0xb34>
 800687e:	f10a 0303 	add.w	r3, sl, #3
 8006882:	f000 bd49 	b.w	8007318 <_dtoa_r+0xb30>
 8006886:	ed9d 7b02 	vldr	d7, [sp, #8]
 800688a:	2200      	movs	r2, #0
 800688c:	ec51 0b17 	vmov	r0, r1, d7
 8006890:	2300      	movs	r3, #0
 8006892:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006896:	f7fa f937 	bl	8000b08 <__aeabi_dcmpeq>
 800689a:	4680      	mov	r8, r0
 800689c:	b158      	cbz	r0, 80068b6 <_dtoa_r+0xce>
 800689e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80068a0:	2301      	movs	r3, #1
 80068a2:	6013      	str	r3, [r2, #0]
 80068a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80068a6:	b113      	cbz	r3, 80068ae <_dtoa_r+0xc6>
 80068a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80068aa:	4b84      	ldr	r3, [pc, #528]	@ (8006abc <_dtoa_r+0x2d4>)
 80068ac:	6013      	str	r3, [r2, #0]
 80068ae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006ad0 <_dtoa_r+0x2e8>
 80068b2:	f000 bd33 	b.w	800731c <_dtoa_r+0xb34>
 80068b6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80068ba:	aa16      	add	r2, sp, #88	@ 0x58
 80068bc:	a917      	add	r1, sp, #92	@ 0x5c
 80068be:	4658      	mov	r0, fp
 80068c0:	f001 fb3a 	bl	8007f38 <__d2b>
 80068c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80068c8:	4681      	mov	r9, r0
 80068ca:	2e00      	cmp	r6, #0
 80068cc:	d077      	beq.n	80069be <_dtoa_r+0x1d6>
 80068ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80068d0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80068d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80068dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80068e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80068e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80068e8:	4619      	mov	r1, r3
 80068ea:	2200      	movs	r2, #0
 80068ec:	4b74      	ldr	r3, [pc, #464]	@ (8006ac0 <_dtoa_r+0x2d8>)
 80068ee:	f7f9 fceb 	bl	80002c8 <__aeabi_dsub>
 80068f2:	a369      	add	r3, pc, #420	@ (adr r3, 8006a98 <_dtoa_r+0x2b0>)
 80068f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f8:	f7f9 fe9e 	bl	8000638 <__aeabi_dmul>
 80068fc:	a368      	add	r3, pc, #416	@ (adr r3, 8006aa0 <_dtoa_r+0x2b8>)
 80068fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006902:	f7f9 fce3 	bl	80002cc <__adddf3>
 8006906:	4604      	mov	r4, r0
 8006908:	4630      	mov	r0, r6
 800690a:	460d      	mov	r5, r1
 800690c:	f7f9 fe2a 	bl	8000564 <__aeabi_i2d>
 8006910:	a365      	add	r3, pc, #404	@ (adr r3, 8006aa8 <_dtoa_r+0x2c0>)
 8006912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006916:	f7f9 fe8f 	bl	8000638 <__aeabi_dmul>
 800691a:	4602      	mov	r2, r0
 800691c:	460b      	mov	r3, r1
 800691e:	4620      	mov	r0, r4
 8006920:	4629      	mov	r1, r5
 8006922:	f7f9 fcd3 	bl	80002cc <__adddf3>
 8006926:	4604      	mov	r4, r0
 8006928:	460d      	mov	r5, r1
 800692a:	f7fa f935 	bl	8000b98 <__aeabi_d2iz>
 800692e:	2200      	movs	r2, #0
 8006930:	4607      	mov	r7, r0
 8006932:	2300      	movs	r3, #0
 8006934:	4620      	mov	r0, r4
 8006936:	4629      	mov	r1, r5
 8006938:	f7fa f8f0 	bl	8000b1c <__aeabi_dcmplt>
 800693c:	b140      	cbz	r0, 8006950 <_dtoa_r+0x168>
 800693e:	4638      	mov	r0, r7
 8006940:	f7f9 fe10 	bl	8000564 <__aeabi_i2d>
 8006944:	4622      	mov	r2, r4
 8006946:	462b      	mov	r3, r5
 8006948:	f7fa f8de 	bl	8000b08 <__aeabi_dcmpeq>
 800694c:	b900      	cbnz	r0, 8006950 <_dtoa_r+0x168>
 800694e:	3f01      	subs	r7, #1
 8006950:	2f16      	cmp	r7, #22
 8006952:	d851      	bhi.n	80069f8 <_dtoa_r+0x210>
 8006954:	4b5b      	ldr	r3, [pc, #364]	@ (8006ac4 <_dtoa_r+0x2dc>)
 8006956:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800695a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006962:	f7fa f8db 	bl	8000b1c <__aeabi_dcmplt>
 8006966:	2800      	cmp	r0, #0
 8006968:	d048      	beq.n	80069fc <_dtoa_r+0x214>
 800696a:	3f01      	subs	r7, #1
 800696c:	2300      	movs	r3, #0
 800696e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006970:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006972:	1b9b      	subs	r3, r3, r6
 8006974:	1e5a      	subs	r2, r3, #1
 8006976:	bf44      	itt	mi
 8006978:	f1c3 0801 	rsbmi	r8, r3, #1
 800697c:	2300      	movmi	r3, #0
 800697e:	9208      	str	r2, [sp, #32]
 8006980:	bf54      	ite	pl
 8006982:	f04f 0800 	movpl.w	r8, #0
 8006986:	9308      	strmi	r3, [sp, #32]
 8006988:	2f00      	cmp	r7, #0
 800698a:	db39      	blt.n	8006a00 <_dtoa_r+0x218>
 800698c:	9b08      	ldr	r3, [sp, #32]
 800698e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006990:	443b      	add	r3, r7
 8006992:	9308      	str	r3, [sp, #32]
 8006994:	2300      	movs	r3, #0
 8006996:	930a      	str	r3, [sp, #40]	@ 0x28
 8006998:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800699a:	2b09      	cmp	r3, #9
 800699c:	d864      	bhi.n	8006a68 <_dtoa_r+0x280>
 800699e:	2b05      	cmp	r3, #5
 80069a0:	bfc4      	itt	gt
 80069a2:	3b04      	subgt	r3, #4
 80069a4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80069a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069a8:	f1a3 0302 	sub.w	r3, r3, #2
 80069ac:	bfcc      	ite	gt
 80069ae:	2400      	movgt	r4, #0
 80069b0:	2401      	movle	r4, #1
 80069b2:	2b03      	cmp	r3, #3
 80069b4:	d863      	bhi.n	8006a7e <_dtoa_r+0x296>
 80069b6:	e8df f003 	tbb	[pc, r3]
 80069ba:	372a      	.short	0x372a
 80069bc:	5535      	.short	0x5535
 80069be:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80069c2:	441e      	add	r6, r3
 80069c4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80069c8:	2b20      	cmp	r3, #32
 80069ca:	bfc1      	itttt	gt
 80069cc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80069d0:	409f      	lslgt	r7, r3
 80069d2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80069d6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80069da:	bfd6      	itet	le
 80069dc:	f1c3 0320 	rsble	r3, r3, #32
 80069e0:	ea47 0003 	orrgt.w	r0, r7, r3
 80069e4:	fa04 f003 	lslle.w	r0, r4, r3
 80069e8:	f7f9 fdac 	bl	8000544 <__aeabi_ui2d>
 80069ec:	2201      	movs	r2, #1
 80069ee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80069f2:	3e01      	subs	r6, #1
 80069f4:	9214      	str	r2, [sp, #80]	@ 0x50
 80069f6:	e777      	b.n	80068e8 <_dtoa_r+0x100>
 80069f8:	2301      	movs	r3, #1
 80069fa:	e7b8      	b.n	800696e <_dtoa_r+0x186>
 80069fc:	9012      	str	r0, [sp, #72]	@ 0x48
 80069fe:	e7b7      	b.n	8006970 <_dtoa_r+0x188>
 8006a00:	427b      	negs	r3, r7
 8006a02:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a04:	2300      	movs	r3, #0
 8006a06:	eba8 0807 	sub.w	r8, r8, r7
 8006a0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006a0c:	e7c4      	b.n	8006998 <_dtoa_r+0x1b0>
 8006a0e:	2300      	movs	r3, #0
 8006a10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	dc35      	bgt.n	8006a84 <_dtoa_r+0x29c>
 8006a18:	2301      	movs	r3, #1
 8006a1a:	9300      	str	r3, [sp, #0]
 8006a1c:	9307      	str	r3, [sp, #28]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	920e      	str	r2, [sp, #56]	@ 0x38
 8006a22:	e00b      	b.n	8006a3c <_dtoa_r+0x254>
 8006a24:	2301      	movs	r3, #1
 8006a26:	e7f3      	b.n	8006a10 <_dtoa_r+0x228>
 8006a28:	2300      	movs	r3, #0
 8006a2a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a2e:	18fb      	adds	r3, r7, r3
 8006a30:	9300      	str	r3, [sp, #0]
 8006a32:	3301      	adds	r3, #1
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	9307      	str	r3, [sp, #28]
 8006a38:	bfb8      	it	lt
 8006a3a:	2301      	movlt	r3, #1
 8006a3c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006a40:	2100      	movs	r1, #0
 8006a42:	2204      	movs	r2, #4
 8006a44:	f102 0514 	add.w	r5, r2, #20
 8006a48:	429d      	cmp	r5, r3
 8006a4a:	d91f      	bls.n	8006a8c <_dtoa_r+0x2a4>
 8006a4c:	6041      	str	r1, [r0, #4]
 8006a4e:	4658      	mov	r0, fp
 8006a50:	f000 ff48 	bl	80078e4 <_Balloc>
 8006a54:	4682      	mov	sl, r0
 8006a56:	2800      	cmp	r0, #0
 8006a58:	d13c      	bne.n	8006ad4 <_dtoa_r+0x2ec>
 8006a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8006ac8 <_dtoa_r+0x2e0>)
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006a62:	e6d8      	b.n	8006816 <_dtoa_r+0x2e>
 8006a64:	2301      	movs	r3, #1
 8006a66:	e7e0      	b.n	8006a2a <_dtoa_r+0x242>
 8006a68:	2401      	movs	r4, #1
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a6e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006a70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	9307      	str	r3, [sp, #28]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	2312      	movs	r3, #18
 8006a7c:	e7d0      	b.n	8006a20 <_dtoa_r+0x238>
 8006a7e:	2301      	movs	r3, #1
 8006a80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a82:	e7f5      	b.n	8006a70 <_dtoa_r+0x288>
 8006a84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a86:	9300      	str	r3, [sp, #0]
 8006a88:	9307      	str	r3, [sp, #28]
 8006a8a:	e7d7      	b.n	8006a3c <_dtoa_r+0x254>
 8006a8c:	3101      	adds	r1, #1
 8006a8e:	0052      	lsls	r2, r2, #1
 8006a90:	e7d8      	b.n	8006a44 <_dtoa_r+0x25c>
 8006a92:	bf00      	nop
 8006a94:	f3af 8000 	nop.w
 8006a98:	636f4361 	.word	0x636f4361
 8006a9c:	3fd287a7 	.word	0x3fd287a7
 8006aa0:	8b60c8b3 	.word	0x8b60c8b3
 8006aa4:	3fc68a28 	.word	0x3fc68a28
 8006aa8:	509f79fb 	.word	0x509f79fb
 8006aac:	3fd34413 	.word	0x3fd34413
 8006ab0:	08009911 	.word	0x08009911
 8006ab4:	08009928 	.word	0x08009928
 8006ab8:	7ff00000 	.word	0x7ff00000
 8006abc:	080098e1 	.word	0x080098e1
 8006ac0:	3ff80000 	.word	0x3ff80000
 8006ac4:	08009a30 	.word	0x08009a30
 8006ac8:	08009980 	.word	0x08009980
 8006acc:	0800990d 	.word	0x0800990d
 8006ad0:	080098e0 	.word	0x080098e0
 8006ad4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ad8:	6018      	str	r0, [r3, #0]
 8006ada:	9b07      	ldr	r3, [sp, #28]
 8006adc:	2b0e      	cmp	r3, #14
 8006ade:	f200 80a4 	bhi.w	8006c2a <_dtoa_r+0x442>
 8006ae2:	2c00      	cmp	r4, #0
 8006ae4:	f000 80a1 	beq.w	8006c2a <_dtoa_r+0x442>
 8006ae8:	2f00      	cmp	r7, #0
 8006aea:	dd33      	ble.n	8006b54 <_dtoa_r+0x36c>
 8006aec:	4bad      	ldr	r3, [pc, #692]	@ (8006da4 <_dtoa_r+0x5bc>)
 8006aee:	f007 020f 	and.w	r2, r7, #15
 8006af2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006af6:	ed93 7b00 	vldr	d7, [r3]
 8006afa:	05f8      	lsls	r0, r7, #23
 8006afc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006b00:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006b04:	d516      	bpl.n	8006b34 <_dtoa_r+0x34c>
 8006b06:	4ba8      	ldr	r3, [pc, #672]	@ (8006da8 <_dtoa_r+0x5c0>)
 8006b08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006b10:	f7f9 febc 	bl	800088c <__aeabi_ddiv>
 8006b14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b18:	f004 040f 	and.w	r4, r4, #15
 8006b1c:	2603      	movs	r6, #3
 8006b1e:	4da2      	ldr	r5, [pc, #648]	@ (8006da8 <_dtoa_r+0x5c0>)
 8006b20:	b954      	cbnz	r4, 8006b38 <_dtoa_r+0x350>
 8006b22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b2a:	f7f9 feaf 	bl	800088c <__aeabi_ddiv>
 8006b2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b32:	e028      	b.n	8006b86 <_dtoa_r+0x39e>
 8006b34:	2602      	movs	r6, #2
 8006b36:	e7f2      	b.n	8006b1e <_dtoa_r+0x336>
 8006b38:	07e1      	lsls	r1, r4, #31
 8006b3a:	d508      	bpl.n	8006b4e <_dtoa_r+0x366>
 8006b3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006b44:	f7f9 fd78 	bl	8000638 <__aeabi_dmul>
 8006b48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b4c:	3601      	adds	r6, #1
 8006b4e:	1064      	asrs	r4, r4, #1
 8006b50:	3508      	adds	r5, #8
 8006b52:	e7e5      	b.n	8006b20 <_dtoa_r+0x338>
 8006b54:	f000 80d2 	beq.w	8006cfc <_dtoa_r+0x514>
 8006b58:	427c      	negs	r4, r7
 8006b5a:	4b92      	ldr	r3, [pc, #584]	@ (8006da4 <_dtoa_r+0x5bc>)
 8006b5c:	4d92      	ldr	r5, [pc, #584]	@ (8006da8 <_dtoa_r+0x5c0>)
 8006b5e:	f004 020f 	and.w	r2, r4, #15
 8006b62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b6e:	f7f9 fd63 	bl	8000638 <__aeabi_dmul>
 8006b72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b76:	1124      	asrs	r4, r4, #4
 8006b78:	2300      	movs	r3, #0
 8006b7a:	2602      	movs	r6, #2
 8006b7c:	2c00      	cmp	r4, #0
 8006b7e:	f040 80b2 	bne.w	8006ce6 <_dtoa_r+0x4fe>
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1d3      	bne.n	8006b2e <_dtoa_r+0x346>
 8006b86:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006b88:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f000 80b7 	beq.w	8006d00 <_dtoa_r+0x518>
 8006b92:	4b86      	ldr	r3, [pc, #536]	@ (8006dac <_dtoa_r+0x5c4>)
 8006b94:	2200      	movs	r2, #0
 8006b96:	4620      	mov	r0, r4
 8006b98:	4629      	mov	r1, r5
 8006b9a:	f7f9 ffbf 	bl	8000b1c <__aeabi_dcmplt>
 8006b9e:	2800      	cmp	r0, #0
 8006ba0:	f000 80ae 	beq.w	8006d00 <_dtoa_r+0x518>
 8006ba4:	9b07      	ldr	r3, [sp, #28]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	f000 80aa 	beq.w	8006d00 <_dtoa_r+0x518>
 8006bac:	9b00      	ldr	r3, [sp, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	dd37      	ble.n	8006c22 <_dtoa_r+0x43a>
 8006bb2:	1e7b      	subs	r3, r7, #1
 8006bb4:	9304      	str	r3, [sp, #16]
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	4b7d      	ldr	r3, [pc, #500]	@ (8006db0 <_dtoa_r+0x5c8>)
 8006bba:	2200      	movs	r2, #0
 8006bbc:	4629      	mov	r1, r5
 8006bbe:	f7f9 fd3b 	bl	8000638 <__aeabi_dmul>
 8006bc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bc6:	9c00      	ldr	r4, [sp, #0]
 8006bc8:	3601      	adds	r6, #1
 8006bca:	4630      	mov	r0, r6
 8006bcc:	f7f9 fcca 	bl	8000564 <__aeabi_i2d>
 8006bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006bd4:	f7f9 fd30 	bl	8000638 <__aeabi_dmul>
 8006bd8:	4b76      	ldr	r3, [pc, #472]	@ (8006db4 <_dtoa_r+0x5cc>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f7f9 fb76 	bl	80002cc <__adddf3>
 8006be0:	4605      	mov	r5, r0
 8006be2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006be6:	2c00      	cmp	r4, #0
 8006be8:	f040 808d 	bne.w	8006d06 <_dtoa_r+0x51e>
 8006bec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bf0:	4b71      	ldr	r3, [pc, #452]	@ (8006db8 <_dtoa_r+0x5d0>)
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f7f9 fb68 	bl	80002c8 <__aeabi_dsub>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c00:	462a      	mov	r2, r5
 8006c02:	4633      	mov	r3, r6
 8006c04:	f7f9 ffa8 	bl	8000b58 <__aeabi_dcmpgt>
 8006c08:	2800      	cmp	r0, #0
 8006c0a:	f040 828b 	bne.w	8007124 <_dtoa_r+0x93c>
 8006c0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c12:	462a      	mov	r2, r5
 8006c14:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006c18:	f7f9 ff80 	bl	8000b1c <__aeabi_dcmplt>
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	f040 8128 	bne.w	8006e72 <_dtoa_r+0x68a>
 8006c22:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006c26:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006c2a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f2c0 815a 	blt.w	8006ee6 <_dtoa_r+0x6fe>
 8006c32:	2f0e      	cmp	r7, #14
 8006c34:	f300 8157 	bgt.w	8006ee6 <_dtoa_r+0x6fe>
 8006c38:	4b5a      	ldr	r3, [pc, #360]	@ (8006da4 <_dtoa_r+0x5bc>)
 8006c3a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006c3e:	ed93 7b00 	vldr	d7, [r3]
 8006c42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	ed8d 7b00 	vstr	d7, [sp]
 8006c4a:	da03      	bge.n	8006c54 <_dtoa_r+0x46c>
 8006c4c:	9b07      	ldr	r3, [sp, #28]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f340 8101 	ble.w	8006e56 <_dtoa_r+0x66e>
 8006c54:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006c58:	4656      	mov	r6, sl
 8006c5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c5e:	4620      	mov	r0, r4
 8006c60:	4629      	mov	r1, r5
 8006c62:	f7f9 fe13 	bl	800088c <__aeabi_ddiv>
 8006c66:	f7f9 ff97 	bl	8000b98 <__aeabi_d2iz>
 8006c6a:	4680      	mov	r8, r0
 8006c6c:	f7f9 fc7a 	bl	8000564 <__aeabi_i2d>
 8006c70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c74:	f7f9 fce0 	bl	8000638 <__aeabi_dmul>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	4629      	mov	r1, r5
 8006c80:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006c84:	f7f9 fb20 	bl	80002c8 <__aeabi_dsub>
 8006c88:	f806 4b01 	strb.w	r4, [r6], #1
 8006c8c:	9d07      	ldr	r5, [sp, #28]
 8006c8e:	eba6 040a 	sub.w	r4, r6, sl
 8006c92:	42a5      	cmp	r5, r4
 8006c94:	4602      	mov	r2, r0
 8006c96:	460b      	mov	r3, r1
 8006c98:	f040 8117 	bne.w	8006eca <_dtoa_r+0x6e2>
 8006c9c:	f7f9 fb16 	bl	80002cc <__adddf3>
 8006ca0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ca4:	4604      	mov	r4, r0
 8006ca6:	460d      	mov	r5, r1
 8006ca8:	f7f9 ff56 	bl	8000b58 <__aeabi_dcmpgt>
 8006cac:	2800      	cmp	r0, #0
 8006cae:	f040 80f9 	bne.w	8006ea4 <_dtoa_r+0x6bc>
 8006cb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	4629      	mov	r1, r5
 8006cba:	f7f9 ff25 	bl	8000b08 <__aeabi_dcmpeq>
 8006cbe:	b118      	cbz	r0, 8006cc8 <_dtoa_r+0x4e0>
 8006cc0:	f018 0f01 	tst.w	r8, #1
 8006cc4:	f040 80ee 	bne.w	8006ea4 <_dtoa_r+0x6bc>
 8006cc8:	4649      	mov	r1, r9
 8006cca:	4658      	mov	r0, fp
 8006ccc:	f000 fe4a 	bl	8007964 <_Bfree>
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	7033      	strb	r3, [r6, #0]
 8006cd4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006cd6:	3701      	adds	r7, #1
 8006cd8:	601f      	str	r7, [r3, #0]
 8006cda:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f000 831d 	beq.w	800731c <_dtoa_r+0xb34>
 8006ce2:	601e      	str	r6, [r3, #0]
 8006ce4:	e31a      	b.n	800731c <_dtoa_r+0xb34>
 8006ce6:	07e2      	lsls	r2, r4, #31
 8006ce8:	d505      	bpl.n	8006cf6 <_dtoa_r+0x50e>
 8006cea:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006cee:	f7f9 fca3 	bl	8000638 <__aeabi_dmul>
 8006cf2:	3601      	adds	r6, #1
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	1064      	asrs	r4, r4, #1
 8006cf8:	3508      	adds	r5, #8
 8006cfa:	e73f      	b.n	8006b7c <_dtoa_r+0x394>
 8006cfc:	2602      	movs	r6, #2
 8006cfe:	e742      	b.n	8006b86 <_dtoa_r+0x39e>
 8006d00:	9c07      	ldr	r4, [sp, #28]
 8006d02:	9704      	str	r7, [sp, #16]
 8006d04:	e761      	b.n	8006bca <_dtoa_r+0x3e2>
 8006d06:	4b27      	ldr	r3, [pc, #156]	@ (8006da4 <_dtoa_r+0x5bc>)
 8006d08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006d0a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006d0e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006d12:	4454      	add	r4, sl
 8006d14:	2900      	cmp	r1, #0
 8006d16:	d053      	beq.n	8006dc0 <_dtoa_r+0x5d8>
 8006d18:	4928      	ldr	r1, [pc, #160]	@ (8006dbc <_dtoa_r+0x5d4>)
 8006d1a:	2000      	movs	r0, #0
 8006d1c:	f7f9 fdb6 	bl	800088c <__aeabi_ddiv>
 8006d20:	4633      	mov	r3, r6
 8006d22:	462a      	mov	r2, r5
 8006d24:	f7f9 fad0 	bl	80002c8 <__aeabi_dsub>
 8006d28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d2c:	4656      	mov	r6, sl
 8006d2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d32:	f7f9 ff31 	bl	8000b98 <__aeabi_d2iz>
 8006d36:	4605      	mov	r5, r0
 8006d38:	f7f9 fc14 	bl	8000564 <__aeabi_i2d>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	460b      	mov	r3, r1
 8006d40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d44:	f7f9 fac0 	bl	80002c8 <__aeabi_dsub>
 8006d48:	3530      	adds	r5, #48	@ 0x30
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d52:	f806 5b01 	strb.w	r5, [r6], #1
 8006d56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006d5a:	f7f9 fedf 	bl	8000b1c <__aeabi_dcmplt>
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	d171      	bne.n	8006e46 <_dtoa_r+0x65e>
 8006d62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d66:	4911      	ldr	r1, [pc, #68]	@ (8006dac <_dtoa_r+0x5c4>)
 8006d68:	2000      	movs	r0, #0
 8006d6a:	f7f9 faad 	bl	80002c8 <__aeabi_dsub>
 8006d6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006d72:	f7f9 fed3 	bl	8000b1c <__aeabi_dcmplt>
 8006d76:	2800      	cmp	r0, #0
 8006d78:	f040 8095 	bne.w	8006ea6 <_dtoa_r+0x6be>
 8006d7c:	42a6      	cmp	r6, r4
 8006d7e:	f43f af50 	beq.w	8006c22 <_dtoa_r+0x43a>
 8006d82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006d86:	4b0a      	ldr	r3, [pc, #40]	@ (8006db0 <_dtoa_r+0x5c8>)
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f7f9 fc55 	bl	8000638 <__aeabi_dmul>
 8006d8e:	4b08      	ldr	r3, [pc, #32]	@ (8006db0 <_dtoa_r+0x5c8>)
 8006d90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d94:	2200      	movs	r2, #0
 8006d96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d9a:	f7f9 fc4d 	bl	8000638 <__aeabi_dmul>
 8006d9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006da2:	e7c4      	b.n	8006d2e <_dtoa_r+0x546>
 8006da4:	08009a30 	.word	0x08009a30
 8006da8:	08009a08 	.word	0x08009a08
 8006dac:	3ff00000 	.word	0x3ff00000
 8006db0:	40240000 	.word	0x40240000
 8006db4:	401c0000 	.word	0x401c0000
 8006db8:	40140000 	.word	0x40140000
 8006dbc:	3fe00000 	.word	0x3fe00000
 8006dc0:	4631      	mov	r1, r6
 8006dc2:	4628      	mov	r0, r5
 8006dc4:	f7f9 fc38 	bl	8000638 <__aeabi_dmul>
 8006dc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006dcc:	9415      	str	r4, [sp, #84]	@ 0x54
 8006dce:	4656      	mov	r6, sl
 8006dd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006dd4:	f7f9 fee0 	bl	8000b98 <__aeabi_d2iz>
 8006dd8:	4605      	mov	r5, r0
 8006dda:	f7f9 fbc3 	bl	8000564 <__aeabi_i2d>
 8006dde:	4602      	mov	r2, r0
 8006de0:	460b      	mov	r3, r1
 8006de2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006de6:	f7f9 fa6f 	bl	80002c8 <__aeabi_dsub>
 8006dea:	3530      	adds	r5, #48	@ 0x30
 8006dec:	f806 5b01 	strb.w	r5, [r6], #1
 8006df0:	4602      	mov	r2, r0
 8006df2:	460b      	mov	r3, r1
 8006df4:	42a6      	cmp	r6, r4
 8006df6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006dfa:	f04f 0200 	mov.w	r2, #0
 8006dfe:	d124      	bne.n	8006e4a <_dtoa_r+0x662>
 8006e00:	4bac      	ldr	r3, [pc, #688]	@ (80070b4 <_dtoa_r+0x8cc>)
 8006e02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006e06:	f7f9 fa61 	bl	80002cc <__adddf3>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e12:	f7f9 fea1 	bl	8000b58 <__aeabi_dcmpgt>
 8006e16:	2800      	cmp	r0, #0
 8006e18:	d145      	bne.n	8006ea6 <_dtoa_r+0x6be>
 8006e1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006e1e:	49a5      	ldr	r1, [pc, #660]	@ (80070b4 <_dtoa_r+0x8cc>)
 8006e20:	2000      	movs	r0, #0
 8006e22:	f7f9 fa51 	bl	80002c8 <__aeabi_dsub>
 8006e26:	4602      	mov	r2, r0
 8006e28:	460b      	mov	r3, r1
 8006e2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e2e:	f7f9 fe75 	bl	8000b1c <__aeabi_dcmplt>
 8006e32:	2800      	cmp	r0, #0
 8006e34:	f43f aef5 	beq.w	8006c22 <_dtoa_r+0x43a>
 8006e38:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006e3a:	1e73      	subs	r3, r6, #1
 8006e3c:	9315      	str	r3, [sp, #84]	@ 0x54
 8006e3e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006e42:	2b30      	cmp	r3, #48	@ 0x30
 8006e44:	d0f8      	beq.n	8006e38 <_dtoa_r+0x650>
 8006e46:	9f04      	ldr	r7, [sp, #16]
 8006e48:	e73e      	b.n	8006cc8 <_dtoa_r+0x4e0>
 8006e4a:	4b9b      	ldr	r3, [pc, #620]	@ (80070b8 <_dtoa_r+0x8d0>)
 8006e4c:	f7f9 fbf4 	bl	8000638 <__aeabi_dmul>
 8006e50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e54:	e7bc      	b.n	8006dd0 <_dtoa_r+0x5e8>
 8006e56:	d10c      	bne.n	8006e72 <_dtoa_r+0x68a>
 8006e58:	4b98      	ldr	r3, [pc, #608]	@ (80070bc <_dtoa_r+0x8d4>)
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e60:	f7f9 fbea 	bl	8000638 <__aeabi_dmul>
 8006e64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e68:	f7f9 fe6c 	bl	8000b44 <__aeabi_dcmpge>
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	f000 8157 	beq.w	8007120 <_dtoa_r+0x938>
 8006e72:	2400      	movs	r4, #0
 8006e74:	4625      	mov	r5, r4
 8006e76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e78:	43db      	mvns	r3, r3
 8006e7a:	9304      	str	r3, [sp, #16]
 8006e7c:	4656      	mov	r6, sl
 8006e7e:	2700      	movs	r7, #0
 8006e80:	4621      	mov	r1, r4
 8006e82:	4658      	mov	r0, fp
 8006e84:	f000 fd6e 	bl	8007964 <_Bfree>
 8006e88:	2d00      	cmp	r5, #0
 8006e8a:	d0dc      	beq.n	8006e46 <_dtoa_r+0x65e>
 8006e8c:	b12f      	cbz	r7, 8006e9a <_dtoa_r+0x6b2>
 8006e8e:	42af      	cmp	r7, r5
 8006e90:	d003      	beq.n	8006e9a <_dtoa_r+0x6b2>
 8006e92:	4639      	mov	r1, r7
 8006e94:	4658      	mov	r0, fp
 8006e96:	f000 fd65 	bl	8007964 <_Bfree>
 8006e9a:	4629      	mov	r1, r5
 8006e9c:	4658      	mov	r0, fp
 8006e9e:	f000 fd61 	bl	8007964 <_Bfree>
 8006ea2:	e7d0      	b.n	8006e46 <_dtoa_r+0x65e>
 8006ea4:	9704      	str	r7, [sp, #16]
 8006ea6:	4633      	mov	r3, r6
 8006ea8:	461e      	mov	r6, r3
 8006eaa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006eae:	2a39      	cmp	r2, #57	@ 0x39
 8006eb0:	d107      	bne.n	8006ec2 <_dtoa_r+0x6da>
 8006eb2:	459a      	cmp	sl, r3
 8006eb4:	d1f8      	bne.n	8006ea8 <_dtoa_r+0x6c0>
 8006eb6:	9a04      	ldr	r2, [sp, #16]
 8006eb8:	3201      	adds	r2, #1
 8006eba:	9204      	str	r2, [sp, #16]
 8006ebc:	2230      	movs	r2, #48	@ 0x30
 8006ebe:	f88a 2000 	strb.w	r2, [sl]
 8006ec2:	781a      	ldrb	r2, [r3, #0]
 8006ec4:	3201      	adds	r2, #1
 8006ec6:	701a      	strb	r2, [r3, #0]
 8006ec8:	e7bd      	b.n	8006e46 <_dtoa_r+0x65e>
 8006eca:	4b7b      	ldr	r3, [pc, #492]	@ (80070b8 <_dtoa_r+0x8d0>)
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f7f9 fbb3 	bl	8000638 <__aeabi_dmul>
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	4604      	mov	r4, r0
 8006ed8:	460d      	mov	r5, r1
 8006eda:	f7f9 fe15 	bl	8000b08 <__aeabi_dcmpeq>
 8006ede:	2800      	cmp	r0, #0
 8006ee0:	f43f aebb 	beq.w	8006c5a <_dtoa_r+0x472>
 8006ee4:	e6f0      	b.n	8006cc8 <_dtoa_r+0x4e0>
 8006ee6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006ee8:	2a00      	cmp	r2, #0
 8006eea:	f000 80db 	beq.w	80070a4 <_dtoa_r+0x8bc>
 8006eee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ef0:	2a01      	cmp	r2, #1
 8006ef2:	f300 80bf 	bgt.w	8007074 <_dtoa_r+0x88c>
 8006ef6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006ef8:	2a00      	cmp	r2, #0
 8006efa:	f000 80b7 	beq.w	800706c <_dtoa_r+0x884>
 8006efe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006f02:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006f04:	4646      	mov	r6, r8
 8006f06:	9a08      	ldr	r2, [sp, #32]
 8006f08:	2101      	movs	r1, #1
 8006f0a:	441a      	add	r2, r3
 8006f0c:	4658      	mov	r0, fp
 8006f0e:	4498      	add	r8, r3
 8006f10:	9208      	str	r2, [sp, #32]
 8006f12:	f000 fddb 	bl	8007acc <__i2b>
 8006f16:	4605      	mov	r5, r0
 8006f18:	b15e      	cbz	r6, 8006f32 <_dtoa_r+0x74a>
 8006f1a:	9b08      	ldr	r3, [sp, #32]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	dd08      	ble.n	8006f32 <_dtoa_r+0x74a>
 8006f20:	42b3      	cmp	r3, r6
 8006f22:	9a08      	ldr	r2, [sp, #32]
 8006f24:	bfa8      	it	ge
 8006f26:	4633      	movge	r3, r6
 8006f28:	eba8 0803 	sub.w	r8, r8, r3
 8006f2c:	1af6      	subs	r6, r6, r3
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	9308      	str	r3, [sp, #32]
 8006f32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f34:	b1f3      	cbz	r3, 8006f74 <_dtoa_r+0x78c>
 8006f36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f000 80b7 	beq.w	80070ac <_dtoa_r+0x8c4>
 8006f3e:	b18c      	cbz	r4, 8006f64 <_dtoa_r+0x77c>
 8006f40:	4629      	mov	r1, r5
 8006f42:	4622      	mov	r2, r4
 8006f44:	4658      	mov	r0, fp
 8006f46:	f000 fe81 	bl	8007c4c <__pow5mult>
 8006f4a:	464a      	mov	r2, r9
 8006f4c:	4601      	mov	r1, r0
 8006f4e:	4605      	mov	r5, r0
 8006f50:	4658      	mov	r0, fp
 8006f52:	f000 fdd1 	bl	8007af8 <__multiply>
 8006f56:	4649      	mov	r1, r9
 8006f58:	9004      	str	r0, [sp, #16]
 8006f5a:	4658      	mov	r0, fp
 8006f5c:	f000 fd02 	bl	8007964 <_Bfree>
 8006f60:	9b04      	ldr	r3, [sp, #16]
 8006f62:	4699      	mov	r9, r3
 8006f64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f66:	1b1a      	subs	r2, r3, r4
 8006f68:	d004      	beq.n	8006f74 <_dtoa_r+0x78c>
 8006f6a:	4649      	mov	r1, r9
 8006f6c:	4658      	mov	r0, fp
 8006f6e:	f000 fe6d 	bl	8007c4c <__pow5mult>
 8006f72:	4681      	mov	r9, r0
 8006f74:	2101      	movs	r1, #1
 8006f76:	4658      	mov	r0, fp
 8006f78:	f000 fda8 	bl	8007acc <__i2b>
 8006f7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f7e:	4604      	mov	r4, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f000 81cf 	beq.w	8007324 <_dtoa_r+0xb3c>
 8006f86:	461a      	mov	r2, r3
 8006f88:	4601      	mov	r1, r0
 8006f8a:	4658      	mov	r0, fp
 8006f8c:	f000 fe5e 	bl	8007c4c <__pow5mult>
 8006f90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	4604      	mov	r4, r0
 8006f96:	f300 8095 	bgt.w	80070c4 <_dtoa_r+0x8dc>
 8006f9a:	9b02      	ldr	r3, [sp, #8]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	f040 8087 	bne.w	80070b0 <_dtoa_r+0x8c8>
 8006fa2:	9b03      	ldr	r3, [sp, #12]
 8006fa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f040 8089 	bne.w	80070c0 <_dtoa_r+0x8d8>
 8006fae:	9b03      	ldr	r3, [sp, #12]
 8006fb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006fb4:	0d1b      	lsrs	r3, r3, #20
 8006fb6:	051b      	lsls	r3, r3, #20
 8006fb8:	b12b      	cbz	r3, 8006fc6 <_dtoa_r+0x7de>
 8006fba:	9b08      	ldr	r3, [sp, #32]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	9308      	str	r3, [sp, #32]
 8006fc0:	f108 0801 	add.w	r8, r8, #1
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f000 81b0 	beq.w	8007330 <_dtoa_r+0xb48>
 8006fd0:	6923      	ldr	r3, [r4, #16]
 8006fd2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006fd6:	6918      	ldr	r0, [r3, #16]
 8006fd8:	f000 fd2c 	bl	8007a34 <__hi0bits>
 8006fdc:	f1c0 0020 	rsb	r0, r0, #32
 8006fe0:	9b08      	ldr	r3, [sp, #32]
 8006fe2:	4418      	add	r0, r3
 8006fe4:	f010 001f 	ands.w	r0, r0, #31
 8006fe8:	d077      	beq.n	80070da <_dtoa_r+0x8f2>
 8006fea:	f1c0 0320 	rsb	r3, r0, #32
 8006fee:	2b04      	cmp	r3, #4
 8006ff0:	dd6b      	ble.n	80070ca <_dtoa_r+0x8e2>
 8006ff2:	9b08      	ldr	r3, [sp, #32]
 8006ff4:	f1c0 001c 	rsb	r0, r0, #28
 8006ff8:	4403      	add	r3, r0
 8006ffa:	4480      	add	r8, r0
 8006ffc:	4406      	add	r6, r0
 8006ffe:	9308      	str	r3, [sp, #32]
 8007000:	f1b8 0f00 	cmp.w	r8, #0
 8007004:	dd05      	ble.n	8007012 <_dtoa_r+0x82a>
 8007006:	4649      	mov	r1, r9
 8007008:	4642      	mov	r2, r8
 800700a:	4658      	mov	r0, fp
 800700c:	f000 fe78 	bl	8007d00 <__lshift>
 8007010:	4681      	mov	r9, r0
 8007012:	9b08      	ldr	r3, [sp, #32]
 8007014:	2b00      	cmp	r3, #0
 8007016:	dd05      	ble.n	8007024 <_dtoa_r+0x83c>
 8007018:	4621      	mov	r1, r4
 800701a:	461a      	mov	r2, r3
 800701c:	4658      	mov	r0, fp
 800701e:	f000 fe6f 	bl	8007d00 <__lshift>
 8007022:	4604      	mov	r4, r0
 8007024:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007026:	2b00      	cmp	r3, #0
 8007028:	d059      	beq.n	80070de <_dtoa_r+0x8f6>
 800702a:	4621      	mov	r1, r4
 800702c:	4648      	mov	r0, r9
 800702e:	f000 fed3 	bl	8007dd8 <__mcmp>
 8007032:	2800      	cmp	r0, #0
 8007034:	da53      	bge.n	80070de <_dtoa_r+0x8f6>
 8007036:	1e7b      	subs	r3, r7, #1
 8007038:	9304      	str	r3, [sp, #16]
 800703a:	4649      	mov	r1, r9
 800703c:	2300      	movs	r3, #0
 800703e:	220a      	movs	r2, #10
 8007040:	4658      	mov	r0, fp
 8007042:	f000 fcb1 	bl	80079a8 <__multadd>
 8007046:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007048:	4681      	mov	r9, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	f000 8172 	beq.w	8007334 <_dtoa_r+0xb4c>
 8007050:	2300      	movs	r3, #0
 8007052:	4629      	mov	r1, r5
 8007054:	220a      	movs	r2, #10
 8007056:	4658      	mov	r0, fp
 8007058:	f000 fca6 	bl	80079a8 <__multadd>
 800705c:	9b00      	ldr	r3, [sp, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	4605      	mov	r5, r0
 8007062:	dc67      	bgt.n	8007134 <_dtoa_r+0x94c>
 8007064:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007066:	2b02      	cmp	r3, #2
 8007068:	dc41      	bgt.n	80070ee <_dtoa_r+0x906>
 800706a:	e063      	b.n	8007134 <_dtoa_r+0x94c>
 800706c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800706e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007072:	e746      	b.n	8006f02 <_dtoa_r+0x71a>
 8007074:	9b07      	ldr	r3, [sp, #28]
 8007076:	1e5c      	subs	r4, r3, #1
 8007078:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800707a:	42a3      	cmp	r3, r4
 800707c:	bfbf      	itttt	lt
 800707e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007080:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007082:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007084:	1ae3      	sublt	r3, r4, r3
 8007086:	bfb4      	ite	lt
 8007088:	18d2      	addlt	r2, r2, r3
 800708a:	1b1c      	subge	r4, r3, r4
 800708c:	9b07      	ldr	r3, [sp, #28]
 800708e:	bfbc      	itt	lt
 8007090:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007092:	2400      	movlt	r4, #0
 8007094:	2b00      	cmp	r3, #0
 8007096:	bfb5      	itete	lt
 8007098:	eba8 0603 	sublt.w	r6, r8, r3
 800709c:	9b07      	ldrge	r3, [sp, #28]
 800709e:	2300      	movlt	r3, #0
 80070a0:	4646      	movge	r6, r8
 80070a2:	e730      	b.n	8006f06 <_dtoa_r+0x71e>
 80070a4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80070a6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80070a8:	4646      	mov	r6, r8
 80070aa:	e735      	b.n	8006f18 <_dtoa_r+0x730>
 80070ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80070ae:	e75c      	b.n	8006f6a <_dtoa_r+0x782>
 80070b0:	2300      	movs	r3, #0
 80070b2:	e788      	b.n	8006fc6 <_dtoa_r+0x7de>
 80070b4:	3fe00000 	.word	0x3fe00000
 80070b8:	40240000 	.word	0x40240000
 80070bc:	40140000 	.word	0x40140000
 80070c0:	9b02      	ldr	r3, [sp, #8]
 80070c2:	e780      	b.n	8006fc6 <_dtoa_r+0x7de>
 80070c4:	2300      	movs	r3, #0
 80070c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80070c8:	e782      	b.n	8006fd0 <_dtoa_r+0x7e8>
 80070ca:	d099      	beq.n	8007000 <_dtoa_r+0x818>
 80070cc:	9a08      	ldr	r2, [sp, #32]
 80070ce:	331c      	adds	r3, #28
 80070d0:	441a      	add	r2, r3
 80070d2:	4498      	add	r8, r3
 80070d4:	441e      	add	r6, r3
 80070d6:	9208      	str	r2, [sp, #32]
 80070d8:	e792      	b.n	8007000 <_dtoa_r+0x818>
 80070da:	4603      	mov	r3, r0
 80070dc:	e7f6      	b.n	80070cc <_dtoa_r+0x8e4>
 80070de:	9b07      	ldr	r3, [sp, #28]
 80070e0:	9704      	str	r7, [sp, #16]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	dc20      	bgt.n	8007128 <_dtoa_r+0x940>
 80070e6:	9300      	str	r3, [sp, #0]
 80070e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	dd1e      	ble.n	800712c <_dtoa_r+0x944>
 80070ee:	9b00      	ldr	r3, [sp, #0]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f47f aec0 	bne.w	8006e76 <_dtoa_r+0x68e>
 80070f6:	4621      	mov	r1, r4
 80070f8:	2205      	movs	r2, #5
 80070fa:	4658      	mov	r0, fp
 80070fc:	f000 fc54 	bl	80079a8 <__multadd>
 8007100:	4601      	mov	r1, r0
 8007102:	4604      	mov	r4, r0
 8007104:	4648      	mov	r0, r9
 8007106:	f000 fe67 	bl	8007dd8 <__mcmp>
 800710a:	2800      	cmp	r0, #0
 800710c:	f77f aeb3 	ble.w	8006e76 <_dtoa_r+0x68e>
 8007110:	4656      	mov	r6, sl
 8007112:	2331      	movs	r3, #49	@ 0x31
 8007114:	f806 3b01 	strb.w	r3, [r6], #1
 8007118:	9b04      	ldr	r3, [sp, #16]
 800711a:	3301      	adds	r3, #1
 800711c:	9304      	str	r3, [sp, #16]
 800711e:	e6ae      	b.n	8006e7e <_dtoa_r+0x696>
 8007120:	9c07      	ldr	r4, [sp, #28]
 8007122:	9704      	str	r7, [sp, #16]
 8007124:	4625      	mov	r5, r4
 8007126:	e7f3      	b.n	8007110 <_dtoa_r+0x928>
 8007128:	9b07      	ldr	r3, [sp, #28]
 800712a:	9300      	str	r3, [sp, #0]
 800712c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800712e:	2b00      	cmp	r3, #0
 8007130:	f000 8104 	beq.w	800733c <_dtoa_r+0xb54>
 8007134:	2e00      	cmp	r6, #0
 8007136:	dd05      	ble.n	8007144 <_dtoa_r+0x95c>
 8007138:	4629      	mov	r1, r5
 800713a:	4632      	mov	r2, r6
 800713c:	4658      	mov	r0, fp
 800713e:	f000 fddf 	bl	8007d00 <__lshift>
 8007142:	4605      	mov	r5, r0
 8007144:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007146:	2b00      	cmp	r3, #0
 8007148:	d05a      	beq.n	8007200 <_dtoa_r+0xa18>
 800714a:	6869      	ldr	r1, [r5, #4]
 800714c:	4658      	mov	r0, fp
 800714e:	f000 fbc9 	bl	80078e4 <_Balloc>
 8007152:	4606      	mov	r6, r0
 8007154:	b928      	cbnz	r0, 8007162 <_dtoa_r+0x97a>
 8007156:	4b84      	ldr	r3, [pc, #528]	@ (8007368 <_dtoa_r+0xb80>)
 8007158:	4602      	mov	r2, r0
 800715a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800715e:	f7ff bb5a 	b.w	8006816 <_dtoa_r+0x2e>
 8007162:	692a      	ldr	r2, [r5, #16]
 8007164:	3202      	adds	r2, #2
 8007166:	0092      	lsls	r2, r2, #2
 8007168:	f105 010c 	add.w	r1, r5, #12
 800716c:	300c      	adds	r0, #12
 800716e:	f001 f81d 	bl	80081ac <memcpy>
 8007172:	2201      	movs	r2, #1
 8007174:	4631      	mov	r1, r6
 8007176:	4658      	mov	r0, fp
 8007178:	f000 fdc2 	bl	8007d00 <__lshift>
 800717c:	f10a 0301 	add.w	r3, sl, #1
 8007180:	9307      	str	r3, [sp, #28]
 8007182:	9b00      	ldr	r3, [sp, #0]
 8007184:	4453      	add	r3, sl
 8007186:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007188:	9b02      	ldr	r3, [sp, #8]
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	462f      	mov	r7, r5
 8007190:	930a      	str	r3, [sp, #40]	@ 0x28
 8007192:	4605      	mov	r5, r0
 8007194:	9b07      	ldr	r3, [sp, #28]
 8007196:	4621      	mov	r1, r4
 8007198:	3b01      	subs	r3, #1
 800719a:	4648      	mov	r0, r9
 800719c:	9300      	str	r3, [sp, #0]
 800719e:	f7ff fa98 	bl	80066d2 <quorem>
 80071a2:	4639      	mov	r1, r7
 80071a4:	9002      	str	r0, [sp, #8]
 80071a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80071aa:	4648      	mov	r0, r9
 80071ac:	f000 fe14 	bl	8007dd8 <__mcmp>
 80071b0:	462a      	mov	r2, r5
 80071b2:	9008      	str	r0, [sp, #32]
 80071b4:	4621      	mov	r1, r4
 80071b6:	4658      	mov	r0, fp
 80071b8:	f000 fe2a 	bl	8007e10 <__mdiff>
 80071bc:	68c2      	ldr	r2, [r0, #12]
 80071be:	4606      	mov	r6, r0
 80071c0:	bb02      	cbnz	r2, 8007204 <_dtoa_r+0xa1c>
 80071c2:	4601      	mov	r1, r0
 80071c4:	4648      	mov	r0, r9
 80071c6:	f000 fe07 	bl	8007dd8 <__mcmp>
 80071ca:	4602      	mov	r2, r0
 80071cc:	4631      	mov	r1, r6
 80071ce:	4658      	mov	r0, fp
 80071d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80071d2:	f000 fbc7 	bl	8007964 <_Bfree>
 80071d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80071da:	9e07      	ldr	r6, [sp, #28]
 80071dc:	ea43 0102 	orr.w	r1, r3, r2
 80071e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071e2:	4319      	orrs	r1, r3
 80071e4:	d110      	bne.n	8007208 <_dtoa_r+0xa20>
 80071e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80071ea:	d029      	beq.n	8007240 <_dtoa_r+0xa58>
 80071ec:	9b08      	ldr	r3, [sp, #32]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	dd02      	ble.n	80071f8 <_dtoa_r+0xa10>
 80071f2:	9b02      	ldr	r3, [sp, #8]
 80071f4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80071f8:	9b00      	ldr	r3, [sp, #0]
 80071fa:	f883 8000 	strb.w	r8, [r3]
 80071fe:	e63f      	b.n	8006e80 <_dtoa_r+0x698>
 8007200:	4628      	mov	r0, r5
 8007202:	e7bb      	b.n	800717c <_dtoa_r+0x994>
 8007204:	2201      	movs	r2, #1
 8007206:	e7e1      	b.n	80071cc <_dtoa_r+0x9e4>
 8007208:	9b08      	ldr	r3, [sp, #32]
 800720a:	2b00      	cmp	r3, #0
 800720c:	db04      	blt.n	8007218 <_dtoa_r+0xa30>
 800720e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007210:	430b      	orrs	r3, r1
 8007212:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007214:	430b      	orrs	r3, r1
 8007216:	d120      	bne.n	800725a <_dtoa_r+0xa72>
 8007218:	2a00      	cmp	r2, #0
 800721a:	dded      	ble.n	80071f8 <_dtoa_r+0xa10>
 800721c:	4649      	mov	r1, r9
 800721e:	2201      	movs	r2, #1
 8007220:	4658      	mov	r0, fp
 8007222:	f000 fd6d 	bl	8007d00 <__lshift>
 8007226:	4621      	mov	r1, r4
 8007228:	4681      	mov	r9, r0
 800722a:	f000 fdd5 	bl	8007dd8 <__mcmp>
 800722e:	2800      	cmp	r0, #0
 8007230:	dc03      	bgt.n	800723a <_dtoa_r+0xa52>
 8007232:	d1e1      	bne.n	80071f8 <_dtoa_r+0xa10>
 8007234:	f018 0f01 	tst.w	r8, #1
 8007238:	d0de      	beq.n	80071f8 <_dtoa_r+0xa10>
 800723a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800723e:	d1d8      	bne.n	80071f2 <_dtoa_r+0xa0a>
 8007240:	9a00      	ldr	r2, [sp, #0]
 8007242:	2339      	movs	r3, #57	@ 0x39
 8007244:	7013      	strb	r3, [r2, #0]
 8007246:	4633      	mov	r3, r6
 8007248:	461e      	mov	r6, r3
 800724a:	3b01      	subs	r3, #1
 800724c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007250:	2a39      	cmp	r2, #57	@ 0x39
 8007252:	d052      	beq.n	80072fa <_dtoa_r+0xb12>
 8007254:	3201      	adds	r2, #1
 8007256:	701a      	strb	r2, [r3, #0]
 8007258:	e612      	b.n	8006e80 <_dtoa_r+0x698>
 800725a:	2a00      	cmp	r2, #0
 800725c:	dd07      	ble.n	800726e <_dtoa_r+0xa86>
 800725e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007262:	d0ed      	beq.n	8007240 <_dtoa_r+0xa58>
 8007264:	9a00      	ldr	r2, [sp, #0]
 8007266:	f108 0301 	add.w	r3, r8, #1
 800726a:	7013      	strb	r3, [r2, #0]
 800726c:	e608      	b.n	8006e80 <_dtoa_r+0x698>
 800726e:	9b07      	ldr	r3, [sp, #28]
 8007270:	9a07      	ldr	r2, [sp, #28]
 8007272:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007276:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007278:	4293      	cmp	r3, r2
 800727a:	d028      	beq.n	80072ce <_dtoa_r+0xae6>
 800727c:	4649      	mov	r1, r9
 800727e:	2300      	movs	r3, #0
 8007280:	220a      	movs	r2, #10
 8007282:	4658      	mov	r0, fp
 8007284:	f000 fb90 	bl	80079a8 <__multadd>
 8007288:	42af      	cmp	r7, r5
 800728a:	4681      	mov	r9, r0
 800728c:	f04f 0300 	mov.w	r3, #0
 8007290:	f04f 020a 	mov.w	r2, #10
 8007294:	4639      	mov	r1, r7
 8007296:	4658      	mov	r0, fp
 8007298:	d107      	bne.n	80072aa <_dtoa_r+0xac2>
 800729a:	f000 fb85 	bl	80079a8 <__multadd>
 800729e:	4607      	mov	r7, r0
 80072a0:	4605      	mov	r5, r0
 80072a2:	9b07      	ldr	r3, [sp, #28]
 80072a4:	3301      	adds	r3, #1
 80072a6:	9307      	str	r3, [sp, #28]
 80072a8:	e774      	b.n	8007194 <_dtoa_r+0x9ac>
 80072aa:	f000 fb7d 	bl	80079a8 <__multadd>
 80072ae:	4629      	mov	r1, r5
 80072b0:	4607      	mov	r7, r0
 80072b2:	2300      	movs	r3, #0
 80072b4:	220a      	movs	r2, #10
 80072b6:	4658      	mov	r0, fp
 80072b8:	f000 fb76 	bl	80079a8 <__multadd>
 80072bc:	4605      	mov	r5, r0
 80072be:	e7f0      	b.n	80072a2 <_dtoa_r+0xaba>
 80072c0:	9b00      	ldr	r3, [sp, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	bfcc      	ite	gt
 80072c6:	461e      	movgt	r6, r3
 80072c8:	2601      	movle	r6, #1
 80072ca:	4456      	add	r6, sl
 80072cc:	2700      	movs	r7, #0
 80072ce:	4649      	mov	r1, r9
 80072d0:	2201      	movs	r2, #1
 80072d2:	4658      	mov	r0, fp
 80072d4:	f000 fd14 	bl	8007d00 <__lshift>
 80072d8:	4621      	mov	r1, r4
 80072da:	4681      	mov	r9, r0
 80072dc:	f000 fd7c 	bl	8007dd8 <__mcmp>
 80072e0:	2800      	cmp	r0, #0
 80072e2:	dcb0      	bgt.n	8007246 <_dtoa_r+0xa5e>
 80072e4:	d102      	bne.n	80072ec <_dtoa_r+0xb04>
 80072e6:	f018 0f01 	tst.w	r8, #1
 80072ea:	d1ac      	bne.n	8007246 <_dtoa_r+0xa5e>
 80072ec:	4633      	mov	r3, r6
 80072ee:	461e      	mov	r6, r3
 80072f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072f4:	2a30      	cmp	r2, #48	@ 0x30
 80072f6:	d0fa      	beq.n	80072ee <_dtoa_r+0xb06>
 80072f8:	e5c2      	b.n	8006e80 <_dtoa_r+0x698>
 80072fa:	459a      	cmp	sl, r3
 80072fc:	d1a4      	bne.n	8007248 <_dtoa_r+0xa60>
 80072fe:	9b04      	ldr	r3, [sp, #16]
 8007300:	3301      	adds	r3, #1
 8007302:	9304      	str	r3, [sp, #16]
 8007304:	2331      	movs	r3, #49	@ 0x31
 8007306:	f88a 3000 	strb.w	r3, [sl]
 800730a:	e5b9      	b.n	8006e80 <_dtoa_r+0x698>
 800730c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800730e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800736c <_dtoa_r+0xb84>
 8007312:	b11b      	cbz	r3, 800731c <_dtoa_r+0xb34>
 8007314:	f10a 0308 	add.w	r3, sl, #8
 8007318:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800731a:	6013      	str	r3, [r2, #0]
 800731c:	4650      	mov	r0, sl
 800731e:	b019      	add	sp, #100	@ 0x64
 8007320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007324:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007326:	2b01      	cmp	r3, #1
 8007328:	f77f ae37 	ble.w	8006f9a <_dtoa_r+0x7b2>
 800732c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800732e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007330:	2001      	movs	r0, #1
 8007332:	e655      	b.n	8006fe0 <_dtoa_r+0x7f8>
 8007334:	9b00      	ldr	r3, [sp, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	f77f aed6 	ble.w	80070e8 <_dtoa_r+0x900>
 800733c:	4656      	mov	r6, sl
 800733e:	4621      	mov	r1, r4
 8007340:	4648      	mov	r0, r9
 8007342:	f7ff f9c6 	bl	80066d2 <quorem>
 8007346:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800734a:	f806 8b01 	strb.w	r8, [r6], #1
 800734e:	9b00      	ldr	r3, [sp, #0]
 8007350:	eba6 020a 	sub.w	r2, r6, sl
 8007354:	4293      	cmp	r3, r2
 8007356:	ddb3      	ble.n	80072c0 <_dtoa_r+0xad8>
 8007358:	4649      	mov	r1, r9
 800735a:	2300      	movs	r3, #0
 800735c:	220a      	movs	r2, #10
 800735e:	4658      	mov	r0, fp
 8007360:	f000 fb22 	bl	80079a8 <__multadd>
 8007364:	4681      	mov	r9, r0
 8007366:	e7ea      	b.n	800733e <_dtoa_r+0xb56>
 8007368:	08009980 	.word	0x08009980
 800736c:	08009904 	.word	0x08009904

08007370 <__ssputs_r>:
 8007370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007374:	688e      	ldr	r6, [r1, #8]
 8007376:	461f      	mov	r7, r3
 8007378:	42be      	cmp	r6, r7
 800737a:	680b      	ldr	r3, [r1, #0]
 800737c:	4682      	mov	sl, r0
 800737e:	460c      	mov	r4, r1
 8007380:	4690      	mov	r8, r2
 8007382:	d82d      	bhi.n	80073e0 <__ssputs_r+0x70>
 8007384:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007388:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800738c:	d026      	beq.n	80073dc <__ssputs_r+0x6c>
 800738e:	6965      	ldr	r5, [r4, #20]
 8007390:	6909      	ldr	r1, [r1, #16]
 8007392:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007396:	eba3 0901 	sub.w	r9, r3, r1
 800739a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800739e:	1c7b      	adds	r3, r7, #1
 80073a0:	444b      	add	r3, r9
 80073a2:	106d      	asrs	r5, r5, #1
 80073a4:	429d      	cmp	r5, r3
 80073a6:	bf38      	it	cc
 80073a8:	461d      	movcc	r5, r3
 80073aa:	0553      	lsls	r3, r2, #21
 80073ac:	d527      	bpl.n	80073fe <__ssputs_r+0x8e>
 80073ae:	4629      	mov	r1, r5
 80073b0:	f000 f960 	bl	8007674 <_malloc_r>
 80073b4:	4606      	mov	r6, r0
 80073b6:	b360      	cbz	r0, 8007412 <__ssputs_r+0xa2>
 80073b8:	6921      	ldr	r1, [r4, #16]
 80073ba:	464a      	mov	r2, r9
 80073bc:	f000 fef6 	bl	80081ac <memcpy>
 80073c0:	89a3      	ldrh	r3, [r4, #12]
 80073c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80073c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073ca:	81a3      	strh	r3, [r4, #12]
 80073cc:	6126      	str	r6, [r4, #16]
 80073ce:	6165      	str	r5, [r4, #20]
 80073d0:	444e      	add	r6, r9
 80073d2:	eba5 0509 	sub.w	r5, r5, r9
 80073d6:	6026      	str	r6, [r4, #0]
 80073d8:	60a5      	str	r5, [r4, #8]
 80073da:	463e      	mov	r6, r7
 80073dc:	42be      	cmp	r6, r7
 80073de:	d900      	bls.n	80073e2 <__ssputs_r+0x72>
 80073e0:	463e      	mov	r6, r7
 80073e2:	6820      	ldr	r0, [r4, #0]
 80073e4:	4632      	mov	r2, r6
 80073e6:	4641      	mov	r1, r8
 80073e8:	f000 fe6f 	bl	80080ca <memmove>
 80073ec:	68a3      	ldr	r3, [r4, #8]
 80073ee:	1b9b      	subs	r3, r3, r6
 80073f0:	60a3      	str	r3, [r4, #8]
 80073f2:	6823      	ldr	r3, [r4, #0]
 80073f4:	4433      	add	r3, r6
 80073f6:	6023      	str	r3, [r4, #0]
 80073f8:	2000      	movs	r0, #0
 80073fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073fe:	462a      	mov	r2, r5
 8007400:	f000 fe35 	bl	800806e <_realloc_r>
 8007404:	4606      	mov	r6, r0
 8007406:	2800      	cmp	r0, #0
 8007408:	d1e0      	bne.n	80073cc <__ssputs_r+0x5c>
 800740a:	6921      	ldr	r1, [r4, #16]
 800740c:	4650      	mov	r0, sl
 800740e:	f000 ff0d 	bl	800822c <_free_r>
 8007412:	230c      	movs	r3, #12
 8007414:	f8ca 3000 	str.w	r3, [sl]
 8007418:	89a3      	ldrh	r3, [r4, #12]
 800741a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800741e:	81a3      	strh	r3, [r4, #12]
 8007420:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007424:	e7e9      	b.n	80073fa <__ssputs_r+0x8a>
	...

08007428 <_svfiprintf_r>:
 8007428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800742c:	4698      	mov	r8, r3
 800742e:	898b      	ldrh	r3, [r1, #12]
 8007430:	061b      	lsls	r3, r3, #24
 8007432:	b09d      	sub	sp, #116	@ 0x74
 8007434:	4607      	mov	r7, r0
 8007436:	460d      	mov	r5, r1
 8007438:	4614      	mov	r4, r2
 800743a:	d510      	bpl.n	800745e <_svfiprintf_r+0x36>
 800743c:	690b      	ldr	r3, [r1, #16]
 800743e:	b973      	cbnz	r3, 800745e <_svfiprintf_r+0x36>
 8007440:	2140      	movs	r1, #64	@ 0x40
 8007442:	f000 f917 	bl	8007674 <_malloc_r>
 8007446:	6028      	str	r0, [r5, #0]
 8007448:	6128      	str	r0, [r5, #16]
 800744a:	b930      	cbnz	r0, 800745a <_svfiprintf_r+0x32>
 800744c:	230c      	movs	r3, #12
 800744e:	603b      	str	r3, [r7, #0]
 8007450:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007454:	b01d      	add	sp, #116	@ 0x74
 8007456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800745a:	2340      	movs	r3, #64	@ 0x40
 800745c:	616b      	str	r3, [r5, #20]
 800745e:	2300      	movs	r3, #0
 8007460:	9309      	str	r3, [sp, #36]	@ 0x24
 8007462:	2320      	movs	r3, #32
 8007464:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007468:	f8cd 800c 	str.w	r8, [sp, #12]
 800746c:	2330      	movs	r3, #48	@ 0x30
 800746e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800760c <_svfiprintf_r+0x1e4>
 8007472:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007476:	f04f 0901 	mov.w	r9, #1
 800747a:	4623      	mov	r3, r4
 800747c:	469a      	mov	sl, r3
 800747e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007482:	b10a      	cbz	r2, 8007488 <_svfiprintf_r+0x60>
 8007484:	2a25      	cmp	r2, #37	@ 0x25
 8007486:	d1f9      	bne.n	800747c <_svfiprintf_r+0x54>
 8007488:	ebba 0b04 	subs.w	fp, sl, r4
 800748c:	d00b      	beq.n	80074a6 <_svfiprintf_r+0x7e>
 800748e:	465b      	mov	r3, fp
 8007490:	4622      	mov	r2, r4
 8007492:	4629      	mov	r1, r5
 8007494:	4638      	mov	r0, r7
 8007496:	f7ff ff6b 	bl	8007370 <__ssputs_r>
 800749a:	3001      	adds	r0, #1
 800749c:	f000 80a7 	beq.w	80075ee <_svfiprintf_r+0x1c6>
 80074a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074a2:	445a      	add	r2, fp
 80074a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80074a6:	f89a 3000 	ldrb.w	r3, [sl]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f000 809f 	beq.w	80075ee <_svfiprintf_r+0x1c6>
 80074b0:	2300      	movs	r3, #0
 80074b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80074b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074ba:	f10a 0a01 	add.w	sl, sl, #1
 80074be:	9304      	str	r3, [sp, #16]
 80074c0:	9307      	str	r3, [sp, #28]
 80074c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80074c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80074c8:	4654      	mov	r4, sl
 80074ca:	2205      	movs	r2, #5
 80074cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074d0:	484e      	ldr	r0, [pc, #312]	@ (800760c <_svfiprintf_r+0x1e4>)
 80074d2:	f7f8 fe9d 	bl	8000210 <memchr>
 80074d6:	9a04      	ldr	r2, [sp, #16]
 80074d8:	b9d8      	cbnz	r0, 8007512 <_svfiprintf_r+0xea>
 80074da:	06d0      	lsls	r0, r2, #27
 80074dc:	bf44      	itt	mi
 80074de:	2320      	movmi	r3, #32
 80074e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074e4:	0711      	lsls	r1, r2, #28
 80074e6:	bf44      	itt	mi
 80074e8:	232b      	movmi	r3, #43	@ 0x2b
 80074ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074ee:	f89a 3000 	ldrb.w	r3, [sl]
 80074f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80074f4:	d015      	beq.n	8007522 <_svfiprintf_r+0xfa>
 80074f6:	9a07      	ldr	r2, [sp, #28]
 80074f8:	4654      	mov	r4, sl
 80074fa:	2000      	movs	r0, #0
 80074fc:	f04f 0c0a 	mov.w	ip, #10
 8007500:	4621      	mov	r1, r4
 8007502:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007506:	3b30      	subs	r3, #48	@ 0x30
 8007508:	2b09      	cmp	r3, #9
 800750a:	d94b      	bls.n	80075a4 <_svfiprintf_r+0x17c>
 800750c:	b1b0      	cbz	r0, 800753c <_svfiprintf_r+0x114>
 800750e:	9207      	str	r2, [sp, #28]
 8007510:	e014      	b.n	800753c <_svfiprintf_r+0x114>
 8007512:	eba0 0308 	sub.w	r3, r0, r8
 8007516:	fa09 f303 	lsl.w	r3, r9, r3
 800751a:	4313      	orrs	r3, r2
 800751c:	9304      	str	r3, [sp, #16]
 800751e:	46a2      	mov	sl, r4
 8007520:	e7d2      	b.n	80074c8 <_svfiprintf_r+0xa0>
 8007522:	9b03      	ldr	r3, [sp, #12]
 8007524:	1d19      	adds	r1, r3, #4
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	9103      	str	r1, [sp, #12]
 800752a:	2b00      	cmp	r3, #0
 800752c:	bfbb      	ittet	lt
 800752e:	425b      	neglt	r3, r3
 8007530:	f042 0202 	orrlt.w	r2, r2, #2
 8007534:	9307      	strge	r3, [sp, #28]
 8007536:	9307      	strlt	r3, [sp, #28]
 8007538:	bfb8      	it	lt
 800753a:	9204      	strlt	r2, [sp, #16]
 800753c:	7823      	ldrb	r3, [r4, #0]
 800753e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007540:	d10a      	bne.n	8007558 <_svfiprintf_r+0x130>
 8007542:	7863      	ldrb	r3, [r4, #1]
 8007544:	2b2a      	cmp	r3, #42	@ 0x2a
 8007546:	d132      	bne.n	80075ae <_svfiprintf_r+0x186>
 8007548:	9b03      	ldr	r3, [sp, #12]
 800754a:	1d1a      	adds	r2, r3, #4
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	9203      	str	r2, [sp, #12]
 8007550:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007554:	3402      	adds	r4, #2
 8007556:	9305      	str	r3, [sp, #20]
 8007558:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800761c <_svfiprintf_r+0x1f4>
 800755c:	7821      	ldrb	r1, [r4, #0]
 800755e:	2203      	movs	r2, #3
 8007560:	4650      	mov	r0, sl
 8007562:	f7f8 fe55 	bl	8000210 <memchr>
 8007566:	b138      	cbz	r0, 8007578 <_svfiprintf_r+0x150>
 8007568:	9b04      	ldr	r3, [sp, #16]
 800756a:	eba0 000a 	sub.w	r0, r0, sl
 800756e:	2240      	movs	r2, #64	@ 0x40
 8007570:	4082      	lsls	r2, r0
 8007572:	4313      	orrs	r3, r2
 8007574:	3401      	adds	r4, #1
 8007576:	9304      	str	r3, [sp, #16]
 8007578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800757c:	4824      	ldr	r0, [pc, #144]	@ (8007610 <_svfiprintf_r+0x1e8>)
 800757e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007582:	2206      	movs	r2, #6
 8007584:	f7f8 fe44 	bl	8000210 <memchr>
 8007588:	2800      	cmp	r0, #0
 800758a:	d036      	beq.n	80075fa <_svfiprintf_r+0x1d2>
 800758c:	4b21      	ldr	r3, [pc, #132]	@ (8007614 <_svfiprintf_r+0x1ec>)
 800758e:	bb1b      	cbnz	r3, 80075d8 <_svfiprintf_r+0x1b0>
 8007590:	9b03      	ldr	r3, [sp, #12]
 8007592:	3307      	adds	r3, #7
 8007594:	f023 0307 	bic.w	r3, r3, #7
 8007598:	3308      	adds	r3, #8
 800759a:	9303      	str	r3, [sp, #12]
 800759c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800759e:	4433      	add	r3, r6
 80075a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80075a2:	e76a      	b.n	800747a <_svfiprintf_r+0x52>
 80075a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80075a8:	460c      	mov	r4, r1
 80075aa:	2001      	movs	r0, #1
 80075ac:	e7a8      	b.n	8007500 <_svfiprintf_r+0xd8>
 80075ae:	2300      	movs	r3, #0
 80075b0:	3401      	adds	r4, #1
 80075b2:	9305      	str	r3, [sp, #20]
 80075b4:	4619      	mov	r1, r3
 80075b6:	f04f 0c0a 	mov.w	ip, #10
 80075ba:	4620      	mov	r0, r4
 80075bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075c0:	3a30      	subs	r2, #48	@ 0x30
 80075c2:	2a09      	cmp	r2, #9
 80075c4:	d903      	bls.n	80075ce <_svfiprintf_r+0x1a6>
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d0c6      	beq.n	8007558 <_svfiprintf_r+0x130>
 80075ca:	9105      	str	r1, [sp, #20]
 80075cc:	e7c4      	b.n	8007558 <_svfiprintf_r+0x130>
 80075ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80075d2:	4604      	mov	r4, r0
 80075d4:	2301      	movs	r3, #1
 80075d6:	e7f0      	b.n	80075ba <_svfiprintf_r+0x192>
 80075d8:	ab03      	add	r3, sp, #12
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	462a      	mov	r2, r5
 80075de:	4b0e      	ldr	r3, [pc, #56]	@ (8007618 <_svfiprintf_r+0x1f0>)
 80075e0:	a904      	add	r1, sp, #16
 80075e2:	4638      	mov	r0, r7
 80075e4:	f7fe fba2 	bl	8005d2c <_printf_float>
 80075e8:	1c42      	adds	r2, r0, #1
 80075ea:	4606      	mov	r6, r0
 80075ec:	d1d6      	bne.n	800759c <_svfiprintf_r+0x174>
 80075ee:	89ab      	ldrh	r3, [r5, #12]
 80075f0:	065b      	lsls	r3, r3, #25
 80075f2:	f53f af2d 	bmi.w	8007450 <_svfiprintf_r+0x28>
 80075f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075f8:	e72c      	b.n	8007454 <_svfiprintf_r+0x2c>
 80075fa:	ab03      	add	r3, sp, #12
 80075fc:	9300      	str	r3, [sp, #0]
 80075fe:	462a      	mov	r2, r5
 8007600:	4b05      	ldr	r3, [pc, #20]	@ (8007618 <_svfiprintf_r+0x1f0>)
 8007602:	a904      	add	r1, sp, #16
 8007604:	4638      	mov	r0, r7
 8007606:	f7fe fe29 	bl	800625c <_printf_i>
 800760a:	e7ed      	b.n	80075e8 <_svfiprintf_r+0x1c0>
 800760c:	08009991 	.word	0x08009991
 8007610:	0800999b 	.word	0x0800999b
 8007614:	08005d2d 	.word	0x08005d2d
 8007618:	08007371 	.word	0x08007371
 800761c:	08009997 	.word	0x08009997

08007620 <malloc>:
 8007620:	4b02      	ldr	r3, [pc, #8]	@ (800762c <malloc+0xc>)
 8007622:	4601      	mov	r1, r0
 8007624:	6818      	ldr	r0, [r3, #0]
 8007626:	f000 b825 	b.w	8007674 <_malloc_r>
 800762a:	bf00      	nop
 800762c:	20000018 	.word	0x20000018

08007630 <sbrk_aligned>:
 8007630:	b570      	push	{r4, r5, r6, lr}
 8007632:	4e0f      	ldr	r6, [pc, #60]	@ (8007670 <sbrk_aligned+0x40>)
 8007634:	460c      	mov	r4, r1
 8007636:	6831      	ldr	r1, [r6, #0]
 8007638:	4605      	mov	r5, r0
 800763a:	b911      	cbnz	r1, 8007642 <sbrk_aligned+0x12>
 800763c:	f000 fd94 	bl	8008168 <_sbrk_r>
 8007640:	6030      	str	r0, [r6, #0]
 8007642:	4621      	mov	r1, r4
 8007644:	4628      	mov	r0, r5
 8007646:	f000 fd8f 	bl	8008168 <_sbrk_r>
 800764a:	1c43      	adds	r3, r0, #1
 800764c:	d103      	bne.n	8007656 <sbrk_aligned+0x26>
 800764e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007652:	4620      	mov	r0, r4
 8007654:	bd70      	pop	{r4, r5, r6, pc}
 8007656:	1cc4      	adds	r4, r0, #3
 8007658:	f024 0403 	bic.w	r4, r4, #3
 800765c:	42a0      	cmp	r0, r4
 800765e:	d0f8      	beq.n	8007652 <sbrk_aligned+0x22>
 8007660:	1a21      	subs	r1, r4, r0
 8007662:	4628      	mov	r0, r5
 8007664:	f000 fd80 	bl	8008168 <_sbrk_r>
 8007668:	3001      	adds	r0, #1
 800766a:	d1f2      	bne.n	8007652 <sbrk_aligned+0x22>
 800766c:	e7ef      	b.n	800764e <sbrk_aligned+0x1e>
 800766e:	bf00      	nop
 8007670:	200004c4 	.word	0x200004c4

08007674 <_malloc_r>:
 8007674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007678:	1ccd      	adds	r5, r1, #3
 800767a:	f025 0503 	bic.w	r5, r5, #3
 800767e:	3508      	adds	r5, #8
 8007680:	2d0c      	cmp	r5, #12
 8007682:	bf38      	it	cc
 8007684:	250c      	movcc	r5, #12
 8007686:	2d00      	cmp	r5, #0
 8007688:	4606      	mov	r6, r0
 800768a:	db01      	blt.n	8007690 <_malloc_r+0x1c>
 800768c:	42a9      	cmp	r1, r5
 800768e:	d904      	bls.n	800769a <_malloc_r+0x26>
 8007690:	230c      	movs	r3, #12
 8007692:	6033      	str	r3, [r6, #0]
 8007694:	2000      	movs	r0, #0
 8007696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800769a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007770 <_malloc_r+0xfc>
 800769e:	f000 f915 	bl	80078cc <__malloc_lock>
 80076a2:	f8d8 3000 	ldr.w	r3, [r8]
 80076a6:	461c      	mov	r4, r3
 80076a8:	bb44      	cbnz	r4, 80076fc <_malloc_r+0x88>
 80076aa:	4629      	mov	r1, r5
 80076ac:	4630      	mov	r0, r6
 80076ae:	f7ff ffbf 	bl	8007630 <sbrk_aligned>
 80076b2:	1c43      	adds	r3, r0, #1
 80076b4:	4604      	mov	r4, r0
 80076b6:	d158      	bne.n	800776a <_malloc_r+0xf6>
 80076b8:	f8d8 4000 	ldr.w	r4, [r8]
 80076bc:	4627      	mov	r7, r4
 80076be:	2f00      	cmp	r7, #0
 80076c0:	d143      	bne.n	800774a <_malloc_r+0xd6>
 80076c2:	2c00      	cmp	r4, #0
 80076c4:	d04b      	beq.n	800775e <_malloc_r+0xea>
 80076c6:	6823      	ldr	r3, [r4, #0]
 80076c8:	4639      	mov	r1, r7
 80076ca:	4630      	mov	r0, r6
 80076cc:	eb04 0903 	add.w	r9, r4, r3
 80076d0:	f000 fd4a 	bl	8008168 <_sbrk_r>
 80076d4:	4581      	cmp	r9, r0
 80076d6:	d142      	bne.n	800775e <_malloc_r+0xea>
 80076d8:	6821      	ldr	r1, [r4, #0]
 80076da:	1a6d      	subs	r5, r5, r1
 80076dc:	4629      	mov	r1, r5
 80076de:	4630      	mov	r0, r6
 80076e0:	f7ff ffa6 	bl	8007630 <sbrk_aligned>
 80076e4:	3001      	adds	r0, #1
 80076e6:	d03a      	beq.n	800775e <_malloc_r+0xea>
 80076e8:	6823      	ldr	r3, [r4, #0]
 80076ea:	442b      	add	r3, r5
 80076ec:	6023      	str	r3, [r4, #0]
 80076ee:	f8d8 3000 	ldr.w	r3, [r8]
 80076f2:	685a      	ldr	r2, [r3, #4]
 80076f4:	bb62      	cbnz	r2, 8007750 <_malloc_r+0xdc>
 80076f6:	f8c8 7000 	str.w	r7, [r8]
 80076fa:	e00f      	b.n	800771c <_malloc_r+0xa8>
 80076fc:	6822      	ldr	r2, [r4, #0]
 80076fe:	1b52      	subs	r2, r2, r5
 8007700:	d420      	bmi.n	8007744 <_malloc_r+0xd0>
 8007702:	2a0b      	cmp	r2, #11
 8007704:	d917      	bls.n	8007736 <_malloc_r+0xc2>
 8007706:	1961      	adds	r1, r4, r5
 8007708:	42a3      	cmp	r3, r4
 800770a:	6025      	str	r5, [r4, #0]
 800770c:	bf18      	it	ne
 800770e:	6059      	strne	r1, [r3, #4]
 8007710:	6863      	ldr	r3, [r4, #4]
 8007712:	bf08      	it	eq
 8007714:	f8c8 1000 	streq.w	r1, [r8]
 8007718:	5162      	str	r2, [r4, r5]
 800771a:	604b      	str	r3, [r1, #4]
 800771c:	4630      	mov	r0, r6
 800771e:	f000 f8db 	bl	80078d8 <__malloc_unlock>
 8007722:	f104 000b 	add.w	r0, r4, #11
 8007726:	1d23      	adds	r3, r4, #4
 8007728:	f020 0007 	bic.w	r0, r0, #7
 800772c:	1ac2      	subs	r2, r0, r3
 800772e:	bf1c      	itt	ne
 8007730:	1a1b      	subne	r3, r3, r0
 8007732:	50a3      	strne	r3, [r4, r2]
 8007734:	e7af      	b.n	8007696 <_malloc_r+0x22>
 8007736:	6862      	ldr	r2, [r4, #4]
 8007738:	42a3      	cmp	r3, r4
 800773a:	bf0c      	ite	eq
 800773c:	f8c8 2000 	streq.w	r2, [r8]
 8007740:	605a      	strne	r2, [r3, #4]
 8007742:	e7eb      	b.n	800771c <_malloc_r+0xa8>
 8007744:	4623      	mov	r3, r4
 8007746:	6864      	ldr	r4, [r4, #4]
 8007748:	e7ae      	b.n	80076a8 <_malloc_r+0x34>
 800774a:	463c      	mov	r4, r7
 800774c:	687f      	ldr	r7, [r7, #4]
 800774e:	e7b6      	b.n	80076be <_malloc_r+0x4a>
 8007750:	461a      	mov	r2, r3
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	42a3      	cmp	r3, r4
 8007756:	d1fb      	bne.n	8007750 <_malloc_r+0xdc>
 8007758:	2300      	movs	r3, #0
 800775a:	6053      	str	r3, [r2, #4]
 800775c:	e7de      	b.n	800771c <_malloc_r+0xa8>
 800775e:	230c      	movs	r3, #12
 8007760:	6033      	str	r3, [r6, #0]
 8007762:	4630      	mov	r0, r6
 8007764:	f000 f8b8 	bl	80078d8 <__malloc_unlock>
 8007768:	e794      	b.n	8007694 <_malloc_r+0x20>
 800776a:	6005      	str	r5, [r0, #0]
 800776c:	e7d6      	b.n	800771c <_malloc_r+0xa8>
 800776e:	bf00      	nop
 8007770:	200004c8 	.word	0x200004c8

08007774 <__sflush_r>:
 8007774:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800777c:	0716      	lsls	r6, r2, #28
 800777e:	4605      	mov	r5, r0
 8007780:	460c      	mov	r4, r1
 8007782:	d454      	bmi.n	800782e <__sflush_r+0xba>
 8007784:	684b      	ldr	r3, [r1, #4]
 8007786:	2b00      	cmp	r3, #0
 8007788:	dc02      	bgt.n	8007790 <__sflush_r+0x1c>
 800778a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800778c:	2b00      	cmp	r3, #0
 800778e:	dd48      	ble.n	8007822 <__sflush_r+0xae>
 8007790:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007792:	2e00      	cmp	r6, #0
 8007794:	d045      	beq.n	8007822 <__sflush_r+0xae>
 8007796:	2300      	movs	r3, #0
 8007798:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800779c:	682f      	ldr	r7, [r5, #0]
 800779e:	6a21      	ldr	r1, [r4, #32]
 80077a0:	602b      	str	r3, [r5, #0]
 80077a2:	d030      	beq.n	8007806 <__sflush_r+0x92>
 80077a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80077a6:	89a3      	ldrh	r3, [r4, #12]
 80077a8:	0759      	lsls	r1, r3, #29
 80077aa:	d505      	bpl.n	80077b8 <__sflush_r+0x44>
 80077ac:	6863      	ldr	r3, [r4, #4]
 80077ae:	1ad2      	subs	r2, r2, r3
 80077b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80077b2:	b10b      	cbz	r3, 80077b8 <__sflush_r+0x44>
 80077b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80077b6:	1ad2      	subs	r2, r2, r3
 80077b8:	2300      	movs	r3, #0
 80077ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80077bc:	6a21      	ldr	r1, [r4, #32]
 80077be:	4628      	mov	r0, r5
 80077c0:	47b0      	blx	r6
 80077c2:	1c43      	adds	r3, r0, #1
 80077c4:	89a3      	ldrh	r3, [r4, #12]
 80077c6:	d106      	bne.n	80077d6 <__sflush_r+0x62>
 80077c8:	6829      	ldr	r1, [r5, #0]
 80077ca:	291d      	cmp	r1, #29
 80077cc:	d82b      	bhi.n	8007826 <__sflush_r+0xb2>
 80077ce:	4a2a      	ldr	r2, [pc, #168]	@ (8007878 <__sflush_r+0x104>)
 80077d0:	410a      	asrs	r2, r1
 80077d2:	07d6      	lsls	r6, r2, #31
 80077d4:	d427      	bmi.n	8007826 <__sflush_r+0xb2>
 80077d6:	2200      	movs	r2, #0
 80077d8:	6062      	str	r2, [r4, #4]
 80077da:	04d9      	lsls	r1, r3, #19
 80077dc:	6922      	ldr	r2, [r4, #16]
 80077de:	6022      	str	r2, [r4, #0]
 80077e0:	d504      	bpl.n	80077ec <__sflush_r+0x78>
 80077e2:	1c42      	adds	r2, r0, #1
 80077e4:	d101      	bne.n	80077ea <__sflush_r+0x76>
 80077e6:	682b      	ldr	r3, [r5, #0]
 80077e8:	b903      	cbnz	r3, 80077ec <__sflush_r+0x78>
 80077ea:	6560      	str	r0, [r4, #84]	@ 0x54
 80077ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077ee:	602f      	str	r7, [r5, #0]
 80077f0:	b1b9      	cbz	r1, 8007822 <__sflush_r+0xae>
 80077f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80077f6:	4299      	cmp	r1, r3
 80077f8:	d002      	beq.n	8007800 <__sflush_r+0x8c>
 80077fa:	4628      	mov	r0, r5
 80077fc:	f000 fd16 	bl	800822c <_free_r>
 8007800:	2300      	movs	r3, #0
 8007802:	6363      	str	r3, [r4, #52]	@ 0x34
 8007804:	e00d      	b.n	8007822 <__sflush_r+0xae>
 8007806:	2301      	movs	r3, #1
 8007808:	4628      	mov	r0, r5
 800780a:	47b0      	blx	r6
 800780c:	4602      	mov	r2, r0
 800780e:	1c50      	adds	r0, r2, #1
 8007810:	d1c9      	bne.n	80077a6 <__sflush_r+0x32>
 8007812:	682b      	ldr	r3, [r5, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d0c6      	beq.n	80077a6 <__sflush_r+0x32>
 8007818:	2b1d      	cmp	r3, #29
 800781a:	d001      	beq.n	8007820 <__sflush_r+0xac>
 800781c:	2b16      	cmp	r3, #22
 800781e:	d11e      	bne.n	800785e <__sflush_r+0xea>
 8007820:	602f      	str	r7, [r5, #0]
 8007822:	2000      	movs	r0, #0
 8007824:	e022      	b.n	800786c <__sflush_r+0xf8>
 8007826:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800782a:	b21b      	sxth	r3, r3
 800782c:	e01b      	b.n	8007866 <__sflush_r+0xf2>
 800782e:	690f      	ldr	r7, [r1, #16]
 8007830:	2f00      	cmp	r7, #0
 8007832:	d0f6      	beq.n	8007822 <__sflush_r+0xae>
 8007834:	0793      	lsls	r3, r2, #30
 8007836:	680e      	ldr	r6, [r1, #0]
 8007838:	bf08      	it	eq
 800783a:	694b      	ldreq	r3, [r1, #20]
 800783c:	600f      	str	r7, [r1, #0]
 800783e:	bf18      	it	ne
 8007840:	2300      	movne	r3, #0
 8007842:	eba6 0807 	sub.w	r8, r6, r7
 8007846:	608b      	str	r3, [r1, #8]
 8007848:	f1b8 0f00 	cmp.w	r8, #0
 800784c:	dde9      	ble.n	8007822 <__sflush_r+0xae>
 800784e:	6a21      	ldr	r1, [r4, #32]
 8007850:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007852:	4643      	mov	r3, r8
 8007854:	463a      	mov	r2, r7
 8007856:	4628      	mov	r0, r5
 8007858:	47b0      	blx	r6
 800785a:	2800      	cmp	r0, #0
 800785c:	dc08      	bgt.n	8007870 <__sflush_r+0xfc>
 800785e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007862:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007866:	81a3      	strh	r3, [r4, #12]
 8007868:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800786c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007870:	4407      	add	r7, r0
 8007872:	eba8 0800 	sub.w	r8, r8, r0
 8007876:	e7e7      	b.n	8007848 <__sflush_r+0xd4>
 8007878:	dfbffffe 	.word	0xdfbffffe

0800787c <_fflush_r>:
 800787c:	b538      	push	{r3, r4, r5, lr}
 800787e:	690b      	ldr	r3, [r1, #16]
 8007880:	4605      	mov	r5, r0
 8007882:	460c      	mov	r4, r1
 8007884:	b913      	cbnz	r3, 800788c <_fflush_r+0x10>
 8007886:	2500      	movs	r5, #0
 8007888:	4628      	mov	r0, r5
 800788a:	bd38      	pop	{r3, r4, r5, pc}
 800788c:	b118      	cbz	r0, 8007896 <_fflush_r+0x1a>
 800788e:	6a03      	ldr	r3, [r0, #32]
 8007890:	b90b      	cbnz	r3, 8007896 <_fflush_r+0x1a>
 8007892:	f7fe feaf 	bl	80065f4 <__sinit>
 8007896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d0f3      	beq.n	8007886 <_fflush_r+0xa>
 800789e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80078a0:	07d0      	lsls	r0, r2, #31
 80078a2:	d404      	bmi.n	80078ae <_fflush_r+0x32>
 80078a4:	0599      	lsls	r1, r3, #22
 80078a6:	d402      	bmi.n	80078ae <_fflush_r+0x32>
 80078a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078aa:	f7fe ff10 	bl	80066ce <__retarget_lock_acquire_recursive>
 80078ae:	4628      	mov	r0, r5
 80078b0:	4621      	mov	r1, r4
 80078b2:	f7ff ff5f 	bl	8007774 <__sflush_r>
 80078b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078b8:	07da      	lsls	r2, r3, #31
 80078ba:	4605      	mov	r5, r0
 80078bc:	d4e4      	bmi.n	8007888 <_fflush_r+0xc>
 80078be:	89a3      	ldrh	r3, [r4, #12]
 80078c0:	059b      	lsls	r3, r3, #22
 80078c2:	d4e1      	bmi.n	8007888 <_fflush_r+0xc>
 80078c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078c6:	f7fe ff03 	bl	80066d0 <__retarget_lock_release_recursive>
 80078ca:	e7dd      	b.n	8007888 <_fflush_r+0xc>

080078cc <__malloc_lock>:
 80078cc:	4801      	ldr	r0, [pc, #4]	@ (80078d4 <__malloc_lock+0x8>)
 80078ce:	f7fe befe 	b.w	80066ce <__retarget_lock_acquire_recursive>
 80078d2:	bf00      	nop
 80078d4:	200004c0 	.word	0x200004c0

080078d8 <__malloc_unlock>:
 80078d8:	4801      	ldr	r0, [pc, #4]	@ (80078e0 <__malloc_unlock+0x8>)
 80078da:	f7fe bef9 	b.w	80066d0 <__retarget_lock_release_recursive>
 80078de:	bf00      	nop
 80078e0:	200004c0 	.word	0x200004c0

080078e4 <_Balloc>:
 80078e4:	b570      	push	{r4, r5, r6, lr}
 80078e6:	69c6      	ldr	r6, [r0, #28]
 80078e8:	4604      	mov	r4, r0
 80078ea:	460d      	mov	r5, r1
 80078ec:	b976      	cbnz	r6, 800790c <_Balloc+0x28>
 80078ee:	2010      	movs	r0, #16
 80078f0:	f7ff fe96 	bl	8007620 <malloc>
 80078f4:	4602      	mov	r2, r0
 80078f6:	61e0      	str	r0, [r4, #28]
 80078f8:	b920      	cbnz	r0, 8007904 <_Balloc+0x20>
 80078fa:	4b18      	ldr	r3, [pc, #96]	@ (800795c <_Balloc+0x78>)
 80078fc:	4818      	ldr	r0, [pc, #96]	@ (8007960 <_Balloc+0x7c>)
 80078fe:	216b      	movs	r1, #107	@ 0x6b
 8007900:	f000 fc62 	bl	80081c8 <__assert_func>
 8007904:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007908:	6006      	str	r6, [r0, #0]
 800790a:	60c6      	str	r6, [r0, #12]
 800790c:	69e6      	ldr	r6, [r4, #28]
 800790e:	68f3      	ldr	r3, [r6, #12]
 8007910:	b183      	cbz	r3, 8007934 <_Balloc+0x50>
 8007912:	69e3      	ldr	r3, [r4, #28]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800791a:	b9b8      	cbnz	r0, 800794c <_Balloc+0x68>
 800791c:	2101      	movs	r1, #1
 800791e:	fa01 f605 	lsl.w	r6, r1, r5
 8007922:	1d72      	adds	r2, r6, #5
 8007924:	0092      	lsls	r2, r2, #2
 8007926:	4620      	mov	r0, r4
 8007928:	f000 fc6c 	bl	8008204 <_calloc_r>
 800792c:	b160      	cbz	r0, 8007948 <_Balloc+0x64>
 800792e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007932:	e00e      	b.n	8007952 <_Balloc+0x6e>
 8007934:	2221      	movs	r2, #33	@ 0x21
 8007936:	2104      	movs	r1, #4
 8007938:	4620      	mov	r0, r4
 800793a:	f000 fc63 	bl	8008204 <_calloc_r>
 800793e:	69e3      	ldr	r3, [r4, #28]
 8007940:	60f0      	str	r0, [r6, #12]
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d1e4      	bne.n	8007912 <_Balloc+0x2e>
 8007948:	2000      	movs	r0, #0
 800794a:	bd70      	pop	{r4, r5, r6, pc}
 800794c:	6802      	ldr	r2, [r0, #0]
 800794e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007952:	2300      	movs	r3, #0
 8007954:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007958:	e7f7      	b.n	800794a <_Balloc+0x66>
 800795a:	bf00      	nop
 800795c:	08009911 	.word	0x08009911
 8007960:	080099a2 	.word	0x080099a2

08007964 <_Bfree>:
 8007964:	b570      	push	{r4, r5, r6, lr}
 8007966:	69c6      	ldr	r6, [r0, #28]
 8007968:	4605      	mov	r5, r0
 800796a:	460c      	mov	r4, r1
 800796c:	b976      	cbnz	r6, 800798c <_Bfree+0x28>
 800796e:	2010      	movs	r0, #16
 8007970:	f7ff fe56 	bl	8007620 <malloc>
 8007974:	4602      	mov	r2, r0
 8007976:	61e8      	str	r0, [r5, #28]
 8007978:	b920      	cbnz	r0, 8007984 <_Bfree+0x20>
 800797a:	4b09      	ldr	r3, [pc, #36]	@ (80079a0 <_Bfree+0x3c>)
 800797c:	4809      	ldr	r0, [pc, #36]	@ (80079a4 <_Bfree+0x40>)
 800797e:	218f      	movs	r1, #143	@ 0x8f
 8007980:	f000 fc22 	bl	80081c8 <__assert_func>
 8007984:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007988:	6006      	str	r6, [r0, #0]
 800798a:	60c6      	str	r6, [r0, #12]
 800798c:	b13c      	cbz	r4, 800799e <_Bfree+0x3a>
 800798e:	69eb      	ldr	r3, [r5, #28]
 8007990:	6862      	ldr	r2, [r4, #4]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007998:	6021      	str	r1, [r4, #0]
 800799a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800799e:	bd70      	pop	{r4, r5, r6, pc}
 80079a0:	08009911 	.word	0x08009911
 80079a4:	080099a2 	.word	0x080099a2

080079a8 <__multadd>:
 80079a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ac:	690d      	ldr	r5, [r1, #16]
 80079ae:	4607      	mov	r7, r0
 80079b0:	460c      	mov	r4, r1
 80079b2:	461e      	mov	r6, r3
 80079b4:	f101 0c14 	add.w	ip, r1, #20
 80079b8:	2000      	movs	r0, #0
 80079ba:	f8dc 3000 	ldr.w	r3, [ip]
 80079be:	b299      	uxth	r1, r3
 80079c0:	fb02 6101 	mla	r1, r2, r1, r6
 80079c4:	0c1e      	lsrs	r6, r3, #16
 80079c6:	0c0b      	lsrs	r3, r1, #16
 80079c8:	fb02 3306 	mla	r3, r2, r6, r3
 80079cc:	b289      	uxth	r1, r1
 80079ce:	3001      	adds	r0, #1
 80079d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80079d4:	4285      	cmp	r5, r0
 80079d6:	f84c 1b04 	str.w	r1, [ip], #4
 80079da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80079de:	dcec      	bgt.n	80079ba <__multadd+0x12>
 80079e0:	b30e      	cbz	r6, 8007a26 <__multadd+0x7e>
 80079e2:	68a3      	ldr	r3, [r4, #8]
 80079e4:	42ab      	cmp	r3, r5
 80079e6:	dc19      	bgt.n	8007a1c <__multadd+0x74>
 80079e8:	6861      	ldr	r1, [r4, #4]
 80079ea:	4638      	mov	r0, r7
 80079ec:	3101      	adds	r1, #1
 80079ee:	f7ff ff79 	bl	80078e4 <_Balloc>
 80079f2:	4680      	mov	r8, r0
 80079f4:	b928      	cbnz	r0, 8007a02 <__multadd+0x5a>
 80079f6:	4602      	mov	r2, r0
 80079f8:	4b0c      	ldr	r3, [pc, #48]	@ (8007a2c <__multadd+0x84>)
 80079fa:	480d      	ldr	r0, [pc, #52]	@ (8007a30 <__multadd+0x88>)
 80079fc:	21ba      	movs	r1, #186	@ 0xba
 80079fe:	f000 fbe3 	bl	80081c8 <__assert_func>
 8007a02:	6922      	ldr	r2, [r4, #16]
 8007a04:	3202      	adds	r2, #2
 8007a06:	f104 010c 	add.w	r1, r4, #12
 8007a0a:	0092      	lsls	r2, r2, #2
 8007a0c:	300c      	adds	r0, #12
 8007a0e:	f000 fbcd 	bl	80081ac <memcpy>
 8007a12:	4621      	mov	r1, r4
 8007a14:	4638      	mov	r0, r7
 8007a16:	f7ff ffa5 	bl	8007964 <_Bfree>
 8007a1a:	4644      	mov	r4, r8
 8007a1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a20:	3501      	adds	r5, #1
 8007a22:	615e      	str	r6, [r3, #20]
 8007a24:	6125      	str	r5, [r4, #16]
 8007a26:	4620      	mov	r0, r4
 8007a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a2c:	08009980 	.word	0x08009980
 8007a30:	080099a2 	.word	0x080099a2

08007a34 <__hi0bits>:
 8007a34:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007a38:	4603      	mov	r3, r0
 8007a3a:	bf36      	itet	cc
 8007a3c:	0403      	lslcc	r3, r0, #16
 8007a3e:	2000      	movcs	r0, #0
 8007a40:	2010      	movcc	r0, #16
 8007a42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a46:	bf3c      	itt	cc
 8007a48:	021b      	lslcc	r3, r3, #8
 8007a4a:	3008      	addcc	r0, #8
 8007a4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a50:	bf3c      	itt	cc
 8007a52:	011b      	lslcc	r3, r3, #4
 8007a54:	3004      	addcc	r0, #4
 8007a56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a5a:	bf3c      	itt	cc
 8007a5c:	009b      	lslcc	r3, r3, #2
 8007a5e:	3002      	addcc	r0, #2
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	db05      	blt.n	8007a70 <__hi0bits+0x3c>
 8007a64:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007a68:	f100 0001 	add.w	r0, r0, #1
 8007a6c:	bf08      	it	eq
 8007a6e:	2020      	moveq	r0, #32
 8007a70:	4770      	bx	lr

08007a72 <__lo0bits>:
 8007a72:	6803      	ldr	r3, [r0, #0]
 8007a74:	4602      	mov	r2, r0
 8007a76:	f013 0007 	ands.w	r0, r3, #7
 8007a7a:	d00b      	beq.n	8007a94 <__lo0bits+0x22>
 8007a7c:	07d9      	lsls	r1, r3, #31
 8007a7e:	d421      	bmi.n	8007ac4 <__lo0bits+0x52>
 8007a80:	0798      	lsls	r0, r3, #30
 8007a82:	bf49      	itett	mi
 8007a84:	085b      	lsrmi	r3, r3, #1
 8007a86:	089b      	lsrpl	r3, r3, #2
 8007a88:	2001      	movmi	r0, #1
 8007a8a:	6013      	strmi	r3, [r2, #0]
 8007a8c:	bf5c      	itt	pl
 8007a8e:	6013      	strpl	r3, [r2, #0]
 8007a90:	2002      	movpl	r0, #2
 8007a92:	4770      	bx	lr
 8007a94:	b299      	uxth	r1, r3
 8007a96:	b909      	cbnz	r1, 8007a9c <__lo0bits+0x2a>
 8007a98:	0c1b      	lsrs	r3, r3, #16
 8007a9a:	2010      	movs	r0, #16
 8007a9c:	b2d9      	uxtb	r1, r3
 8007a9e:	b909      	cbnz	r1, 8007aa4 <__lo0bits+0x32>
 8007aa0:	3008      	adds	r0, #8
 8007aa2:	0a1b      	lsrs	r3, r3, #8
 8007aa4:	0719      	lsls	r1, r3, #28
 8007aa6:	bf04      	itt	eq
 8007aa8:	091b      	lsreq	r3, r3, #4
 8007aaa:	3004      	addeq	r0, #4
 8007aac:	0799      	lsls	r1, r3, #30
 8007aae:	bf04      	itt	eq
 8007ab0:	089b      	lsreq	r3, r3, #2
 8007ab2:	3002      	addeq	r0, #2
 8007ab4:	07d9      	lsls	r1, r3, #31
 8007ab6:	d403      	bmi.n	8007ac0 <__lo0bits+0x4e>
 8007ab8:	085b      	lsrs	r3, r3, #1
 8007aba:	f100 0001 	add.w	r0, r0, #1
 8007abe:	d003      	beq.n	8007ac8 <__lo0bits+0x56>
 8007ac0:	6013      	str	r3, [r2, #0]
 8007ac2:	4770      	bx	lr
 8007ac4:	2000      	movs	r0, #0
 8007ac6:	4770      	bx	lr
 8007ac8:	2020      	movs	r0, #32
 8007aca:	4770      	bx	lr

08007acc <__i2b>:
 8007acc:	b510      	push	{r4, lr}
 8007ace:	460c      	mov	r4, r1
 8007ad0:	2101      	movs	r1, #1
 8007ad2:	f7ff ff07 	bl	80078e4 <_Balloc>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	b928      	cbnz	r0, 8007ae6 <__i2b+0x1a>
 8007ada:	4b05      	ldr	r3, [pc, #20]	@ (8007af0 <__i2b+0x24>)
 8007adc:	4805      	ldr	r0, [pc, #20]	@ (8007af4 <__i2b+0x28>)
 8007ade:	f240 1145 	movw	r1, #325	@ 0x145
 8007ae2:	f000 fb71 	bl	80081c8 <__assert_func>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	6144      	str	r4, [r0, #20]
 8007aea:	6103      	str	r3, [r0, #16]
 8007aec:	bd10      	pop	{r4, pc}
 8007aee:	bf00      	nop
 8007af0:	08009980 	.word	0x08009980
 8007af4:	080099a2 	.word	0x080099a2

08007af8 <__multiply>:
 8007af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007afc:	4614      	mov	r4, r2
 8007afe:	690a      	ldr	r2, [r1, #16]
 8007b00:	6923      	ldr	r3, [r4, #16]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	bfa8      	it	ge
 8007b06:	4623      	movge	r3, r4
 8007b08:	460f      	mov	r7, r1
 8007b0a:	bfa4      	itt	ge
 8007b0c:	460c      	movge	r4, r1
 8007b0e:	461f      	movge	r7, r3
 8007b10:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007b14:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007b18:	68a3      	ldr	r3, [r4, #8]
 8007b1a:	6861      	ldr	r1, [r4, #4]
 8007b1c:	eb0a 0609 	add.w	r6, sl, r9
 8007b20:	42b3      	cmp	r3, r6
 8007b22:	b085      	sub	sp, #20
 8007b24:	bfb8      	it	lt
 8007b26:	3101      	addlt	r1, #1
 8007b28:	f7ff fedc 	bl	80078e4 <_Balloc>
 8007b2c:	b930      	cbnz	r0, 8007b3c <__multiply+0x44>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	4b44      	ldr	r3, [pc, #272]	@ (8007c44 <__multiply+0x14c>)
 8007b32:	4845      	ldr	r0, [pc, #276]	@ (8007c48 <__multiply+0x150>)
 8007b34:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007b38:	f000 fb46 	bl	80081c8 <__assert_func>
 8007b3c:	f100 0514 	add.w	r5, r0, #20
 8007b40:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007b44:	462b      	mov	r3, r5
 8007b46:	2200      	movs	r2, #0
 8007b48:	4543      	cmp	r3, r8
 8007b4a:	d321      	bcc.n	8007b90 <__multiply+0x98>
 8007b4c:	f107 0114 	add.w	r1, r7, #20
 8007b50:	f104 0214 	add.w	r2, r4, #20
 8007b54:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007b58:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007b5c:	9302      	str	r3, [sp, #8]
 8007b5e:	1b13      	subs	r3, r2, r4
 8007b60:	3b15      	subs	r3, #21
 8007b62:	f023 0303 	bic.w	r3, r3, #3
 8007b66:	3304      	adds	r3, #4
 8007b68:	f104 0715 	add.w	r7, r4, #21
 8007b6c:	42ba      	cmp	r2, r7
 8007b6e:	bf38      	it	cc
 8007b70:	2304      	movcc	r3, #4
 8007b72:	9301      	str	r3, [sp, #4]
 8007b74:	9b02      	ldr	r3, [sp, #8]
 8007b76:	9103      	str	r1, [sp, #12]
 8007b78:	428b      	cmp	r3, r1
 8007b7a:	d80c      	bhi.n	8007b96 <__multiply+0x9e>
 8007b7c:	2e00      	cmp	r6, #0
 8007b7e:	dd03      	ble.n	8007b88 <__multiply+0x90>
 8007b80:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d05b      	beq.n	8007c40 <__multiply+0x148>
 8007b88:	6106      	str	r6, [r0, #16]
 8007b8a:	b005      	add	sp, #20
 8007b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b90:	f843 2b04 	str.w	r2, [r3], #4
 8007b94:	e7d8      	b.n	8007b48 <__multiply+0x50>
 8007b96:	f8b1 a000 	ldrh.w	sl, [r1]
 8007b9a:	f1ba 0f00 	cmp.w	sl, #0
 8007b9e:	d024      	beq.n	8007bea <__multiply+0xf2>
 8007ba0:	f104 0e14 	add.w	lr, r4, #20
 8007ba4:	46a9      	mov	r9, r5
 8007ba6:	f04f 0c00 	mov.w	ip, #0
 8007baa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007bae:	f8d9 3000 	ldr.w	r3, [r9]
 8007bb2:	fa1f fb87 	uxth.w	fp, r7
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	fb0a 330b 	mla	r3, sl, fp, r3
 8007bbc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007bc0:	f8d9 7000 	ldr.w	r7, [r9]
 8007bc4:	4463      	add	r3, ip
 8007bc6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007bca:	fb0a c70b 	mla	r7, sl, fp, ip
 8007bce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007bd8:	4572      	cmp	r2, lr
 8007bda:	f849 3b04 	str.w	r3, [r9], #4
 8007bde:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007be2:	d8e2      	bhi.n	8007baa <__multiply+0xb2>
 8007be4:	9b01      	ldr	r3, [sp, #4]
 8007be6:	f845 c003 	str.w	ip, [r5, r3]
 8007bea:	9b03      	ldr	r3, [sp, #12]
 8007bec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007bf0:	3104      	adds	r1, #4
 8007bf2:	f1b9 0f00 	cmp.w	r9, #0
 8007bf6:	d021      	beq.n	8007c3c <__multiply+0x144>
 8007bf8:	682b      	ldr	r3, [r5, #0]
 8007bfa:	f104 0c14 	add.w	ip, r4, #20
 8007bfe:	46ae      	mov	lr, r5
 8007c00:	f04f 0a00 	mov.w	sl, #0
 8007c04:	f8bc b000 	ldrh.w	fp, [ip]
 8007c08:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007c0c:	fb09 770b 	mla	r7, r9, fp, r7
 8007c10:	4457      	add	r7, sl
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007c18:	f84e 3b04 	str.w	r3, [lr], #4
 8007c1c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007c20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c24:	f8be 3000 	ldrh.w	r3, [lr]
 8007c28:	fb09 330a 	mla	r3, r9, sl, r3
 8007c2c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007c30:	4562      	cmp	r2, ip
 8007c32:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c36:	d8e5      	bhi.n	8007c04 <__multiply+0x10c>
 8007c38:	9f01      	ldr	r7, [sp, #4]
 8007c3a:	51eb      	str	r3, [r5, r7]
 8007c3c:	3504      	adds	r5, #4
 8007c3e:	e799      	b.n	8007b74 <__multiply+0x7c>
 8007c40:	3e01      	subs	r6, #1
 8007c42:	e79b      	b.n	8007b7c <__multiply+0x84>
 8007c44:	08009980 	.word	0x08009980
 8007c48:	080099a2 	.word	0x080099a2

08007c4c <__pow5mult>:
 8007c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c50:	4615      	mov	r5, r2
 8007c52:	f012 0203 	ands.w	r2, r2, #3
 8007c56:	4607      	mov	r7, r0
 8007c58:	460e      	mov	r6, r1
 8007c5a:	d007      	beq.n	8007c6c <__pow5mult+0x20>
 8007c5c:	4c25      	ldr	r4, [pc, #148]	@ (8007cf4 <__pow5mult+0xa8>)
 8007c5e:	3a01      	subs	r2, #1
 8007c60:	2300      	movs	r3, #0
 8007c62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c66:	f7ff fe9f 	bl	80079a8 <__multadd>
 8007c6a:	4606      	mov	r6, r0
 8007c6c:	10ad      	asrs	r5, r5, #2
 8007c6e:	d03d      	beq.n	8007cec <__pow5mult+0xa0>
 8007c70:	69fc      	ldr	r4, [r7, #28]
 8007c72:	b97c      	cbnz	r4, 8007c94 <__pow5mult+0x48>
 8007c74:	2010      	movs	r0, #16
 8007c76:	f7ff fcd3 	bl	8007620 <malloc>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	61f8      	str	r0, [r7, #28]
 8007c7e:	b928      	cbnz	r0, 8007c8c <__pow5mult+0x40>
 8007c80:	4b1d      	ldr	r3, [pc, #116]	@ (8007cf8 <__pow5mult+0xac>)
 8007c82:	481e      	ldr	r0, [pc, #120]	@ (8007cfc <__pow5mult+0xb0>)
 8007c84:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007c88:	f000 fa9e 	bl	80081c8 <__assert_func>
 8007c8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c90:	6004      	str	r4, [r0, #0]
 8007c92:	60c4      	str	r4, [r0, #12]
 8007c94:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007c98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c9c:	b94c      	cbnz	r4, 8007cb2 <__pow5mult+0x66>
 8007c9e:	f240 2171 	movw	r1, #625	@ 0x271
 8007ca2:	4638      	mov	r0, r7
 8007ca4:	f7ff ff12 	bl	8007acc <__i2b>
 8007ca8:	2300      	movs	r3, #0
 8007caa:	f8c8 0008 	str.w	r0, [r8, #8]
 8007cae:	4604      	mov	r4, r0
 8007cb0:	6003      	str	r3, [r0, #0]
 8007cb2:	f04f 0900 	mov.w	r9, #0
 8007cb6:	07eb      	lsls	r3, r5, #31
 8007cb8:	d50a      	bpl.n	8007cd0 <__pow5mult+0x84>
 8007cba:	4631      	mov	r1, r6
 8007cbc:	4622      	mov	r2, r4
 8007cbe:	4638      	mov	r0, r7
 8007cc0:	f7ff ff1a 	bl	8007af8 <__multiply>
 8007cc4:	4631      	mov	r1, r6
 8007cc6:	4680      	mov	r8, r0
 8007cc8:	4638      	mov	r0, r7
 8007cca:	f7ff fe4b 	bl	8007964 <_Bfree>
 8007cce:	4646      	mov	r6, r8
 8007cd0:	106d      	asrs	r5, r5, #1
 8007cd2:	d00b      	beq.n	8007cec <__pow5mult+0xa0>
 8007cd4:	6820      	ldr	r0, [r4, #0]
 8007cd6:	b938      	cbnz	r0, 8007ce8 <__pow5mult+0x9c>
 8007cd8:	4622      	mov	r2, r4
 8007cda:	4621      	mov	r1, r4
 8007cdc:	4638      	mov	r0, r7
 8007cde:	f7ff ff0b 	bl	8007af8 <__multiply>
 8007ce2:	6020      	str	r0, [r4, #0]
 8007ce4:	f8c0 9000 	str.w	r9, [r0]
 8007ce8:	4604      	mov	r4, r0
 8007cea:	e7e4      	b.n	8007cb6 <__pow5mult+0x6a>
 8007cec:	4630      	mov	r0, r6
 8007cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cf2:	bf00      	nop
 8007cf4:	080099fc 	.word	0x080099fc
 8007cf8:	08009911 	.word	0x08009911
 8007cfc:	080099a2 	.word	0x080099a2

08007d00 <__lshift>:
 8007d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d04:	460c      	mov	r4, r1
 8007d06:	6849      	ldr	r1, [r1, #4]
 8007d08:	6923      	ldr	r3, [r4, #16]
 8007d0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007d0e:	68a3      	ldr	r3, [r4, #8]
 8007d10:	4607      	mov	r7, r0
 8007d12:	4691      	mov	r9, r2
 8007d14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d18:	f108 0601 	add.w	r6, r8, #1
 8007d1c:	42b3      	cmp	r3, r6
 8007d1e:	db0b      	blt.n	8007d38 <__lshift+0x38>
 8007d20:	4638      	mov	r0, r7
 8007d22:	f7ff fddf 	bl	80078e4 <_Balloc>
 8007d26:	4605      	mov	r5, r0
 8007d28:	b948      	cbnz	r0, 8007d3e <__lshift+0x3e>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	4b28      	ldr	r3, [pc, #160]	@ (8007dd0 <__lshift+0xd0>)
 8007d2e:	4829      	ldr	r0, [pc, #164]	@ (8007dd4 <__lshift+0xd4>)
 8007d30:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007d34:	f000 fa48 	bl	80081c8 <__assert_func>
 8007d38:	3101      	adds	r1, #1
 8007d3a:	005b      	lsls	r3, r3, #1
 8007d3c:	e7ee      	b.n	8007d1c <__lshift+0x1c>
 8007d3e:	2300      	movs	r3, #0
 8007d40:	f100 0114 	add.w	r1, r0, #20
 8007d44:	f100 0210 	add.w	r2, r0, #16
 8007d48:	4618      	mov	r0, r3
 8007d4a:	4553      	cmp	r3, sl
 8007d4c:	db33      	blt.n	8007db6 <__lshift+0xb6>
 8007d4e:	6920      	ldr	r0, [r4, #16]
 8007d50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d54:	f104 0314 	add.w	r3, r4, #20
 8007d58:	f019 091f 	ands.w	r9, r9, #31
 8007d5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007d64:	d02b      	beq.n	8007dbe <__lshift+0xbe>
 8007d66:	f1c9 0e20 	rsb	lr, r9, #32
 8007d6a:	468a      	mov	sl, r1
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	6818      	ldr	r0, [r3, #0]
 8007d70:	fa00 f009 	lsl.w	r0, r0, r9
 8007d74:	4310      	orrs	r0, r2
 8007d76:	f84a 0b04 	str.w	r0, [sl], #4
 8007d7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d7e:	459c      	cmp	ip, r3
 8007d80:	fa22 f20e 	lsr.w	r2, r2, lr
 8007d84:	d8f3      	bhi.n	8007d6e <__lshift+0x6e>
 8007d86:	ebac 0304 	sub.w	r3, ip, r4
 8007d8a:	3b15      	subs	r3, #21
 8007d8c:	f023 0303 	bic.w	r3, r3, #3
 8007d90:	3304      	adds	r3, #4
 8007d92:	f104 0015 	add.w	r0, r4, #21
 8007d96:	4584      	cmp	ip, r0
 8007d98:	bf38      	it	cc
 8007d9a:	2304      	movcc	r3, #4
 8007d9c:	50ca      	str	r2, [r1, r3]
 8007d9e:	b10a      	cbz	r2, 8007da4 <__lshift+0xa4>
 8007da0:	f108 0602 	add.w	r6, r8, #2
 8007da4:	3e01      	subs	r6, #1
 8007da6:	4638      	mov	r0, r7
 8007da8:	612e      	str	r6, [r5, #16]
 8007daa:	4621      	mov	r1, r4
 8007dac:	f7ff fdda 	bl	8007964 <_Bfree>
 8007db0:	4628      	mov	r0, r5
 8007db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007db6:	f842 0f04 	str.w	r0, [r2, #4]!
 8007dba:	3301      	adds	r3, #1
 8007dbc:	e7c5      	b.n	8007d4a <__lshift+0x4a>
 8007dbe:	3904      	subs	r1, #4
 8007dc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dc4:	f841 2f04 	str.w	r2, [r1, #4]!
 8007dc8:	459c      	cmp	ip, r3
 8007dca:	d8f9      	bhi.n	8007dc0 <__lshift+0xc0>
 8007dcc:	e7ea      	b.n	8007da4 <__lshift+0xa4>
 8007dce:	bf00      	nop
 8007dd0:	08009980 	.word	0x08009980
 8007dd4:	080099a2 	.word	0x080099a2

08007dd8 <__mcmp>:
 8007dd8:	690a      	ldr	r2, [r1, #16]
 8007dda:	4603      	mov	r3, r0
 8007ddc:	6900      	ldr	r0, [r0, #16]
 8007dde:	1a80      	subs	r0, r0, r2
 8007de0:	b530      	push	{r4, r5, lr}
 8007de2:	d10e      	bne.n	8007e02 <__mcmp+0x2a>
 8007de4:	3314      	adds	r3, #20
 8007de6:	3114      	adds	r1, #20
 8007de8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007dec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007df0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007df4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007df8:	4295      	cmp	r5, r2
 8007dfa:	d003      	beq.n	8007e04 <__mcmp+0x2c>
 8007dfc:	d205      	bcs.n	8007e0a <__mcmp+0x32>
 8007dfe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e02:	bd30      	pop	{r4, r5, pc}
 8007e04:	42a3      	cmp	r3, r4
 8007e06:	d3f3      	bcc.n	8007df0 <__mcmp+0x18>
 8007e08:	e7fb      	b.n	8007e02 <__mcmp+0x2a>
 8007e0a:	2001      	movs	r0, #1
 8007e0c:	e7f9      	b.n	8007e02 <__mcmp+0x2a>
	...

08007e10 <__mdiff>:
 8007e10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e14:	4689      	mov	r9, r1
 8007e16:	4606      	mov	r6, r0
 8007e18:	4611      	mov	r1, r2
 8007e1a:	4648      	mov	r0, r9
 8007e1c:	4614      	mov	r4, r2
 8007e1e:	f7ff ffdb 	bl	8007dd8 <__mcmp>
 8007e22:	1e05      	subs	r5, r0, #0
 8007e24:	d112      	bne.n	8007e4c <__mdiff+0x3c>
 8007e26:	4629      	mov	r1, r5
 8007e28:	4630      	mov	r0, r6
 8007e2a:	f7ff fd5b 	bl	80078e4 <_Balloc>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	b928      	cbnz	r0, 8007e3e <__mdiff+0x2e>
 8007e32:	4b3f      	ldr	r3, [pc, #252]	@ (8007f30 <__mdiff+0x120>)
 8007e34:	f240 2137 	movw	r1, #567	@ 0x237
 8007e38:	483e      	ldr	r0, [pc, #248]	@ (8007f34 <__mdiff+0x124>)
 8007e3a:	f000 f9c5 	bl	80081c8 <__assert_func>
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007e44:	4610      	mov	r0, r2
 8007e46:	b003      	add	sp, #12
 8007e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e4c:	bfbc      	itt	lt
 8007e4e:	464b      	movlt	r3, r9
 8007e50:	46a1      	movlt	r9, r4
 8007e52:	4630      	mov	r0, r6
 8007e54:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007e58:	bfba      	itte	lt
 8007e5a:	461c      	movlt	r4, r3
 8007e5c:	2501      	movlt	r5, #1
 8007e5e:	2500      	movge	r5, #0
 8007e60:	f7ff fd40 	bl	80078e4 <_Balloc>
 8007e64:	4602      	mov	r2, r0
 8007e66:	b918      	cbnz	r0, 8007e70 <__mdiff+0x60>
 8007e68:	4b31      	ldr	r3, [pc, #196]	@ (8007f30 <__mdiff+0x120>)
 8007e6a:	f240 2145 	movw	r1, #581	@ 0x245
 8007e6e:	e7e3      	b.n	8007e38 <__mdiff+0x28>
 8007e70:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007e74:	6926      	ldr	r6, [r4, #16]
 8007e76:	60c5      	str	r5, [r0, #12]
 8007e78:	f109 0310 	add.w	r3, r9, #16
 8007e7c:	f109 0514 	add.w	r5, r9, #20
 8007e80:	f104 0e14 	add.w	lr, r4, #20
 8007e84:	f100 0b14 	add.w	fp, r0, #20
 8007e88:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007e8c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007e90:	9301      	str	r3, [sp, #4]
 8007e92:	46d9      	mov	r9, fp
 8007e94:	f04f 0c00 	mov.w	ip, #0
 8007e98:	9b01      	ldr	r3, [sp, #4]
 8007e9a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007e9e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007ea2:	9301      	str	r3, [sp, #4]
 8007ea4:	fa1f f38a 	uxth.w	r3, sl
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	b283      	uxth	r3, r0
 8007eac:	1acb      	subs	r3, r1, r3
 8007eae:	0c00      	lsrs	r0, r0, #16
 8007eb0:	4463      	add	r3, ip
 8007eb2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007eb6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007ec0:	4576      	cmp	r6, lr
 8007ec2:	f849 3b04 	str.w	r3, [r9], #4
 8007ec6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007eca:	d8e5      	bhi.n	8007e98 <__mdiff+0x88>
 8007ecc:	1b33      	subs	r3, r6, r4
 8007ece:	3b15      	subs	r3, #21
 8007ed0:	f023 0303 	bic.w	r3, r3, #3
 8007ed4:	3415      	adds	r4, #21
 8007ed6:	3304      	adds	r3, #4
 8007ed8:	42a6      	cmp	r6, r4
 8007eda:	bf38      	it	cc
 8007edc:	2304      	movcc	r3, #4
 8007ede:	441d      	add	r5, r3
 8007ee0:	445b      	add	r3, fp
 8007ee2:	461e      	mov	r6, r3
 8007ee4:	462c      	mov	r4, r5
 8007ee6:	4544      	cmp	r4, r8
 8007ee8:	d30e      	bcc.n	8007f08 <__mdiff+0xf8>
 8007eea:	f108 0103 	add.w	r1, r8, #3
 8007eee:	1b49      	subs	r1, r1, r5
 8007ef0:	f021 0103 	bic.w	r1, r1, #3
 8007ef4:	3d03      	subs	r5, #3
 8007ef6:	45a8      	cmp	r8, r5
 8007ef8:	bf38      	it	cc
 8007efa:	2100      	movcc	r1, #0
 8007efc:	440b      	add	r3, r1
 8007efe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007f02:	b191      	cbz	r1, 8007f2a <__mdiff+0x11a>
 8007f04:	6117      	str	r7, [r2, #16]
 8007f06:	e79d      	b.n	8007e44 <__mdiff+0x34>
 8007f08:	f854 1b04 	ldr.w	r1, [r4], #4
 8007f0c:	46e6      	mov	lr, ip
 8007f0e:	0c08      	lsrs	r0, r1, #16
 8007f10:	fa1c fc81 	uxtah	ip, ip, r1
 8007f14:	4471      	add	r1, lr
 8007f16:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007f1a:	b289      	uxth	r1, r1
 8007f1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007f20:	f846 1b04 	str.w	r1, [r6], #4
 8007f24:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007f28:	e7dd      	b.n	8007ee6 <__mdiff+0xd6>
 8007f2a:	3f01      	subs	r7, #1
 8007f2c:	e7e7      	b.n	8007efe <__mdiff+0xee>
 8007f2e:	bf00      	nop
 8007f30:	08009980 	.word	0x08009980
 8007f34:	080099a2 	.word	0x080099a2

08007f38 <__d2b>:
 8007f38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007f3c:	460f      	mov	r7, r1
 8007f3e:	2101      	movs	r1, #1
 8007f40:	ec59 8b10 	vmov	r8, r9, d0
 8007f44:	4616      	mov	r6, r2
 8007f46:	f7ff fccd 	bl	80078e4 <_Balloc>
 8007f4a:	4604      	mov	r4, r0
 8007f4c:	b930      	cbnz	r0, 8007f5c <__d2b+0x24>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	4b23      	ldr	r3, [pc, #140]	@ (8007fe0 <__d2b+0xa8>)
 8007f52:	4824      	ldr	r0, [pc, #144]	@ (8007fe4 <__d2b+0xac>)
 8007f54:	f240 310f 	movw	r1, #783	@ 0x30f
 8007f58:	f000 f936 	bl	80081c8 <__assert_func>
 8007f5c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007f60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f64:	b10d      	cbz	r5, 8007f6a <__d2b+0x32>
 8007f66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f6a:	9301      	str	r3, [sp, #4]
 8007f6c:	f1b8 0300 	subs.w	r3, r8, #0
 8007f70:	d023      	beq.n	8007fba <__d2b+0x82>
 8007f72:	4668      	mov	r0, sp
 8007f74:	9300      	str	r3, [sp, #0]
 8007f76:	f7ff fd7c 	bl	8007a72 <__lo0bits>
 8007f7a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007f7e:	b1d0      	cbz	r0, 8007fb6 <__d2b+0x7e>
 8007f80:	f1c0 0320 	rsb	r3, r0, #32
 8007f84:	fa02 f303 	lsl.w	r3, r2, r3
 8007f88:	430b      	orrs	r3, r1
 8007f8a:	40c2      	lsrs	r2, r0
 8007f8c:	6163      	str	r3, [r4, #20]
 8007f8e:	9201      	str	r2, [sp, #4]
 8007f90:	9b01      	ldr	r3, [sp, #4]
 8007f92:	61a3      	str	r3, [r4, #24]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	bf0c      	ite	eq
 8007f98:	2201      	moveq	r2, #1
 8007f9a:	2202      	movne	r2, #2
 8007f9c:	6122      	str	r2, [r4, #16]
 8007f9e:	b1a5      	cbz	r5, 8007fca <__d2b+0x92>
 8007fa0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007fa4:	4405      	add	r5, r0
 8007fa6:	603d      	str	r5, [r7, #0]
 8007fa8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007fac:	6030      	str	r0, [r6, #0]
 8007fae:	4620      	mov	r0, r4
 8007fb0:	b003      	add	sp, #12
 8007fb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fb6:	6161      	str	r1, [r4, #20]
 8007fb8:	e7ea      	b.n	8007f90 <__d2b+0x58>
 8007fba:	a801      	add	r0, sp, #4
 8007fbc:	f7ff fd59 	bl	8007a72 <__lo0bits>
 8007fc0:	9b01      	ldr	r3, [sp, #4]
 8007fc2:	6163      	str	r3, [r4, #20]
 8007fc4:	3020      	adds	r0, #32
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	e7e8      	b.n	8007f9c <__d2b+0x64>
 8007fca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007fce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007fd2:	6038      	str	r0, [r7, #0]
 8007fd4:	6918      	ldr	r0, [r3, #16]
 8007fd6:	f7ff fd2d 	bl	8007a34 <__hi0bits>
 8007fda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007fde:	e7e5      	b.n	8007fac <__d2b+0x74>
 8007fe0:	08009980 	.word	0x08009980
 8007fe4:	080099a2 	.word	0x080099a2

08007fe8 <__sread>:
 8007fe8:	b510      	push	{r4, lr}
 8007fea:	460c      	mov	r4, r1
 8007fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ff0:	f000 f8a8 	bl	8008144 <_read_r>
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	bfab      	itete	ge
 8007ff8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007ffa:	89a3      	ldrhlt	r3, [r4, #12]
 8007ffc:	181b      	addge	r3, r3, r0
 8007ffe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008002:	bfac      	ite	ge
 8008004:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008006:	81a3      	strhlt	r3, [r4, #12]
 8008008:	bd10      	pop	{r4, pc}

0800800a <__swrite>:
 800800a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800800e:	461f      	mov	r7, r3
 8008010:	898b      	ldrh	r3, [r1, #12]
 8008012:	05db      	lsls	r3, r3, #23
 8008014:	4605      	mov	r5, r0
 8008016:	460c      	mov	r4, r1
 8008018:	4616      	mov	r6, r2
 800801a:	d505      	bpl.n	8008028 <__swrite+0x1e>
 800801c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008020:	2302      	movs	r3, #2
 8008022:	2200      	movs	r2, #0
 8008024:	f000 f87c 	bl	8008120 <_lseek_r>
 8008028:	89a3      	ldrh	r3, [r4, #12]
 800802a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800802e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008032:	81a3      	strh	r3, [r4, #12]
 8008034:	4632      	mov	r2, r6
 8008036:	463b      	mov	r3, r7
 8008038:	4628      	mov	r0, r5
 800803a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800803e:	f000 b8a3 	b.w	8008188 <_write_r>

08008042 <__sseek>:
 8008042:	b510      	push	{r4, lr}
 8008044:	460c      	mov	r4, r1
 8008046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800804a:	f000 f869 	bl	8008120 <_lseek_r>
 800804e:	1c43      	adds	r3, r0, #1
 8008050:	89a3      	ldrh	r3, [r4, #12]
 8008052:	bf15      	itete	ne
 8008054:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008056:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800805a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800805e:	81a3      	strheq	r3, [r4, #12]
 8008060:	bf18      	it	ne
 8008062:	81a3      	strhne	r3, [r4, #12]
 8008064:	bd10      	pop	{r4, pc}

08008066 <__sclose>:
 8008066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800806a:	f000 b849 	b.w	8008100 <_close_r>

0800806e <_realloc_r>:
 800806e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008072:	4680      	mov	r8, r0
 8008074:	4615      	mov	r5, r2
 8008076:	460c      	mov	r4, r1
 8008078:	b921      	cbnz	r1, 8008084 <_realloc_r+0x16>
 800807a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800807e:	4611      	mov	r1, r2
 8008080:	f7ff baf8 	b.w	8007674 <_malloc_r>
 8008084:	b92a      	cbnz	r2, 8008092 <_realloc_r+0x24>
 8008086:	f000 f8d1 	bl	800822c <_free_r>
 800808a:	2400      	movs	r4, #0
 800808c:	4620      	mov	r0, r4
 800808e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008092:	f000 f927 	bl	80082e4 <_malloc_usable_size_r>
 8008096:	4285      	cmp	r5, r0
 8008098:	4606      	mov	r6, r0
 800809a:	d802      	bhi.n	80080a2 <_realloc_r+0x34>
 800809c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80080a0:	d8f4      	bhi.n	800808c <_realloc_r+0x1e>
 80080a2:	4629      	mov	r1, r5
 80080a4:	4640      	mov	r0, r8
 80080a6:	f7ff fae5 	bl	8007674 <_malloc_r>
 80080aa:	4607      	mov	r7, r0
 80080ac:	2800      	cmp	r0, #0
 80080ae:	d0ec      	beq.n	800808a <_realloc_r+0x1c>
 80080b0:	42b5      	cmp	r5, r6
 80080b2:	462a      	mov	r2, r5
 80080b4:	4621      	mov	r1, r4
 80080b6:	bf28      	it	cs
 80080b8:	4632      	movcs	r2, r6
 80080ba:	f000 f877 	bl	80081ac <memcpy>
 80080be:	4621      	mov	r1, r4
 80080c0:	4640      	mov	r0, r8
 80080c2:	f000 f8b3 	bl	800822c <_free_r>
 80080c6:	463c      	mov	r4, r7
 80080c8:	e7e0      	b.n	800808c <_realloc_r+0x1e>

080080ca <memmove>:
 80080ca:	4288      	cmp	r0, r1
 80080cc:	b510      	push	{r4, lr}
 80080ce:	eb01 0402 	add.w	r4, r1, r2
 80080d2:	d902      	bls.n	80080da <memmove+0x10>
 80080d4:	4284      	cmp	r4, r0
 80080d6:	4623      	mov	r3, r4
 80080d8:	d807      	bhi.n	80080ea <memmove+0x20>
 80080da:	1e43      	subs	r3, r0, #1
 80080dc:	42a1      	cmp	r1, r4
 80080de:	d008      	beq.n	80080f2 <memmove+0x28>
 80080e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080e4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80080e8:	e7f8      	b.n	80080dc <memmove+0x12>
 80080ea:	4402      	add	r2, r0
 80080ec:	4601      	mov	r1, r0
 80080ee:	428a      	cmp	r2, r1
 80080f0:	d100      	bne.n	80080f4 <memmove+0x2a>
 80080f2:	bd10      	pop	{r4, pc}
 80080f4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80080f8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80080fc:	e7f7      	b.n	80080ee <memmove+0x24>
	...

08008100 <_close_r>:
 8008100:	b538      	push	{r3, r4, r5, lr}
 8008102:	4d06      	ldr	r5, [pc, #24]	@ (800811c <_close_r+0x1c>)
 8008104:	2300      	movs	r3, #0
 8008106:	4604      	mov	r4, r0
 8008108:	4608      	mov	r0, r1
 800810a:	602b      	str	r3, [r5, #0]
 800810c:	f7fa faa8 	bl	8002660 <_close>
 8008110:	1c43      	adds	r3, r0, #1
 8008112:	d102      	bne.n	800811a <_close_r+0x1a>
 8008114:	682b      	ldr	r3, [r5, #0]
 8008116:	b103      	cbz	r3, 800811a <_close_r+0x1a>
 8008118:	6023      	str	r3, [r4, #0]
 800811a:	bd38      	pop	{r3, r4, r5, pc}
 800811c:	200004cc 	.word	0x200004cc

08008120 <_lseek_r>:
 8008120:	b538      	push	{r3, r4, r5, lr}
 8008122:	4d07      	ldr	r5, [pc, #28]	@ (8008140 <_lseek_r+0x20>)
 8008124:	4604      	mov	r4, r0
 8008126:	4608      	mov	r0, r1
 8008128:	4611      	mov	r1, r2
 800812a:	2200      	movs	r2, #0
 800812c:	602a      	str	r2, [r5, #0]
 800812e:	461a      	mov	r2, r3
 8008130:	f7fa fabd 	bl	80026ae <_lseek>
 8008134:	1c43      	adds	r3, r0, #1
 8008136:	d102      	bne.n	800813e <_lseek_r+0x1e>
 8008138:	682b      	ldr	r3, [r5, #0]
 800813a:	b103      	cbz	r3, 800813e <_lseek_r+0x1e>
 800813c:	6023      	str	r3, [r4, #0]
 800813e:	bd38      	pop	{r3, r4, r5, pc}
 8008140:	200004cc 	.word	0x200004cc

08008144 <_read_r>:
 8008144:	b538      	push	{r3, r4, r5, lr}
 8008146:	4d07      	ldr	r5, [pc, #28]	@ (8008164 <_read_r+0x20>)
 8008148:	4604      	mov	r4, r0
 800814a:	4608      	mov	r0, r1
 800814c:	4611      	mov	r1, r2
 800814e:	2200      	movs	r2, #0
 8008150:	602a      	str	r2, [r5, #0]
 8008152:	461a      	mov	r2, r3
 8008154:	f7fa fa4b 	bl	80025ee <_read>
 8008158:	1c43      	adds	r3, r0, #1
 800815a:	d102      	bne.n	8008162 <_read_r+0x1e>
 800815c:	682b      	ldr	r3, [r5, #0]
 800815e:	b103      	cbz	r3, 8008162 <_read_r+0x1e>
 8008160:	6023      	str	r3, [r4, #0]
 8008162:	bd38      	pop	{r3, r4, r5, pc}
 8008164:	200004cc 	.word	0x200004cc

08008168 <_sbrk_r>:
 8008168:	b538      	push	{r3, r4, r5, lr}
 800816a:	4d06      	ldr	r5, [pc, #24]	@ (8008184 <_sbrk_r+0x1c>)
 800816c:	2300      	movs	r3, #0
 800816e:	4604      	mov	r4, r0
 8008170:	4608      	mov	r0, r1
 8008172:	602b      	str	r3, [r5, #0]
 8008174:	f7fa faa8 	bl	80026c8 <_sbrk>
 8008178:	1c43      	adds	r3, r0, #1
 800817a:	d102      	bne.n	8008182 <_sbrk_r+0x1a>
 800817c:	682b      	ldr	r3, [r5, #0]
 800817e:	b103      	cbz	r3, 8008182 <_sbrk_r+0x1a>
 8008180:	6023      	str	r3, [r4, #0]
 8008182:	bd38      	pop	{r3, r4, r5, pc}
 8008184:	200004cc 	.word	0x200004cc

08008188 <_write_r>:
 8008188:	b538      	push	{r3, r4, r5, lr}
 800818a:	4d07      	ldr	r5, [pc, #28]	@ (80081a8 <_write_r+0x20>)
 800818c:	4604      	mov	r4, r0
 800818e:	4608      	mov	r0, r1
 8008190:	4611      	mov	r1, r2
 8008192:	2200      	movs	r2, #0
 8008194:	602a      	str	r2, [r5, #0]
 8008196:	461a      	mov	r2, r3
 8008198:	f7fa fa46 	bl	8002628 <_write>
 800819c:	1c43      	adds	r3, r0, #1
 800819e:	d102      	bne.n	80081a6 <_write_r+0x1e>
 80081a0:	682b      	ldr	r3, [r5, #0]
 80081a2:	b103      	cbz	r3, 80081a6 <_write_r+0x1e>
 80081a4:	6023      	str	r3, [r4, #0]
 80081a6:	bd38      	pop	{r3, r4, r5, pc}
 80081a8:	200004cc 	.word	0x200004cc

080081ac <memcpy>:
 80081ac:	440a      	add	r2, r1
 80081ae:	4291      	cmp	r1, r2
 80081b0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80081b4:	d100      	bne.n	80081b8 <memcpy+0xc>
 80081b6:	4770      	bx	lr
 80081b8:	b510      	push	{r4, lr}
 80081ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081c2:	4291      	cmp	r1, r2
 80081c4:	d1f9      	bne.n	80081ba <memcpy+0xe>
 80081c6:	bd10      	pop	{r4, pc}

080081c8 <__assert_func>:
 80081c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80081ca:	4614      	mov	r4, r2
 80081cc:	461a      	mov	r2, r3
 80081ce:	4b09      	ldr	r3, [pc, #36]	@ (80081f4 <__assert_func+0x2c>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4605      	mov	r5, r0
 80081d4:	68d8      	ldr	r0, [r3, #12]
 80081d6:	b954      	cbnz	r4, 80081ee <__assert_func+0x26>
 80081d8:	4b07      	ldr	r3, [pc, #28]	@ (80081f8 <__assert_func+0x30>)
 80081da:	461c      	mov	r4, r3
 80081dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80081e0:	9100      	str	r1, [sp, #0]
 80081e2:	462b      	mov	r3, r5
 80081e4:	4905      	ldr	r1, [pc, #20]	@ (80081fc <__assert_func+0x34>)
 80081e6:	f000 f885 	bl	80082f4 <fiprintf>
 80081ea:	f000 f8a2 	bl	8008332 <abort>
 80081ee:	4b04      	ldr	r3, [pc, #16]	@ (8008200 <__assert_func+0x38>)
 80081f0:	e7f4      	b.n	80081dc <__assert_func+0x14>
 80081f2:	bf00      	nop
 80081f4:	20000018 	.word	0x20000018
 80081f8:	08009c3e 	.word	0x08009c3e
 80081fc:	08009c10 	.word	0x08009c10
 8008200:	08009c03 	.word	0x08009c03

08008204 <_calloc_r>:
 8008204:	b570      	push	{r4, r5, r6, lr}
 8008206:	fba1 5402 	umull	r5, r4, r1, r2
 800820a:	b93c      	cbnz	r4, 800821c <_calloc_r+0x18>
 800820c:	4629      	mov	r1, r5
 800820e:	f7ff fa31 	bl	8007674 <_malloc_r>
 8008212:	4606      	mov	r6, r0
 8008214:	b928      	cbnz	r0, 8008222 <_calloc_r+0x1e>
 8008216:	2600      	movs	r6, #0
 8008218:	4630      	mov	r0, r6
 800821a:	bd70      	pop	{r4, r5, r6, pc}
 800821c:	220c      	movs	r2, #12
 800821e:	6002      	str	r2, [r0, #0]
 8008220:	e7f9      	b.n	8008216 <_calloc_r+0x12>
 8008222:	462a      	mov	r2, r5
 8008224:	4621      	mov	r1, r4
 8008226:	f7fe fa1b 	bl	8006660 <memset>
 800822a:	e7f5      	b.n	8008218 <_calloc_r+0x14>

0800822c <_free_r>:
 800822c:	b538      	push	{r3, r4, r5, lr}
 800822e:	4605      	mov	r5, r0
 8008230:	2900      	cmp	r1, #0
 8008232:	d041      	beq.n	80082b8 <_free_r+0x8c>
 8008234:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008238:	1f0c      	subs	r4, r1, #4
 800823a:	2b00      	cmp	r3, #0
 800823c:	bfb8      	it	lt
 800823e:	18e4      	addlt	r4, r4, r3
 8008240:	f7ff fb44 	bl	80078cc <__malloc_lock>
 8008244:	4a1d      	ldr	r2, [pc, #116]	@ (80082bc <_free_r+0x90>)
 8008246:	6813      	ldr	r3, [r2, #0]
 8008248:	b933      	cbnz	r3, 8008258 <_free_r+0x2c>
 800824a:	6063      	str	r3, [r4, #4]
 800824c:	6014      	str	r4, [r2, #0]
 800824e:	4628      	mov	r0, r5
 8008250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008254:	f7ff bb40 	b.w	80078d8 <__malloc_unlock>
 8008258:	42a3      	cmp	r3, r4
 800825a:	d908      	bls.n	800826e <_free_r+0x42>
 800825c:	6820      	ldr	r0, [r4, #0]
 800825e:	1821      	adds	r1, r4, r0
 8008260:	428b      	cmp	r3, r1
 8008262:	bf01      	itttt	eq
 8008264:	6819      	ldreq	r1, [r3, #0]
 8008266:	685b      	ldreq	r3, [r3, #4]
 8008268:	1809      	addeq	r1, r1, r0
 800826a:	6021      	streq	r1, [r4, #0]
 800826c:	e7ed      	b.n	800824a <_free_r+0x1e>
 800826e:	461a      	mov	r2, r3
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	b10b      	cbz	r3, 8008278 <_free_r+0x4c>
 8008274:	42a3      	cmp	r3, r4
 8008276:	d9fa      	bls.n	800826e <_free_r+0x42>
 8008278:	6811      	ldr	r1, [r2, #0]
 800827a:	1850      	adds	r0, r2, r1
 800827c:	42a0      	cmp	r0, r4
 800827e:	d10b      	bne.n	8008298 <_free_r+0x6c>
 8008280:	6820      	ldr	r0, [r4, #0]
 8008282:	4401      	add	r1, r0
 8008284:	1850      	adds	r0, r2, r1
 8008286:	4283      	cmp	r3, r0
 8008288:	6011      	str	r1, [r2, #0]
 800828a:	d1e0      	bne.n	800824e <_free_r+0x22>
 800828c:	6818      	ldr	r0, [r3, #0]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	6053      	str	r3, [r2, #4]
 8008292:	4408      	add	r0, r1
 8008294:	6010      	str	r0, [r2, #0]
 8008296:	e7da      	b.n	800824e <_free_r+0x22>
 8008298:	d902      	bls.n	80082a0 <_free_r+0x74>
 800829a:	230c      	movs	r3, #12
 800829c:	602b      	str	r3, [r5, #0]
 800829e:	e7d6      	b.n	800824e <_free_r+0x22>
 80082a0:	6820      	ldr	r0, [r4, #0]
 80082a2:	1821      	adds	r1, r4, r0
 80082a4:	428b      	cmp	r3, r1
 80082a6:	bf04      	itt	eq
 80082a8:	6819      	ldreq	r1, [r3, #0]
 80082aa:	685b      	ldreq	r3, [r3, #4]
 80082ac:	6063      	str	r3, [r4, #4]
 80082ae:	bf04      	itt	eq
 80082b0:	1809      	addeq	r1, r1, r0
 80082b2:	6021      	streq	r1, [r4, #0]
 80082b4:	6054      	str	r4, [r2, #4]
 80082b6:	e7ca      	b.n	800824e <_free_r+0x22>
 80082b8:	bd38      	pop	{r3, r4, r5, pc}
 80082ba:	bf00      	nop
 80082bc:	200004c8 	.word	0x200004c8

080082c0 <__ascii_mbtowc>:
 80082c0:	b082      	sub	sp, #8
 80082c2:	b901      	cbnz	r1, 80082c6 <__ascii_mbtowc+0x6>
 80082c4:	a901      	add	r1, sp, #4
 80082c6:	b142      	cbz	r2, 80082da <__ascii_mbtowc+0x1a>
 80082c8:	b14b      	cbz	r3, 80082de <__ascii_mbtowc+0x1e>
 80082ca:	7813      	ldrb	r3, [r2, #0]
 80082cc:	600b      	str	r3, [r1, #0]
 80082ce:	7812      	ldrb	r2, [r2, #0]
 80082d0:	1e10      	subs	r0, r2, #0
 80082d2:	bf18      	it	ne
 80082d4:	2001      	movne	r0, #1
 80082d6:	b002      	add	sp, #8
 80082d8:	4770      	bx	lr
 80082da:	4610      	mov	r0, r2
 80082dc:	e7fb      	b.n	80082d6 <__ascii_mbtowc+0x16>
 80082de:	f06f 0001 	mvn.w	r0, #1
 80082e2:	e7f8      	b.n	80082d6 <__ascii_mbtowc+0x16>

080082e4 <_malloc_usable_size_r>:
 80082e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082e8:	1f18      	subs	r0, r3, #4
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	bfbc      	itt	lt
 80082ee:	580b      	ldrlt	r3, [r1, r0]
 80082f0:	18c0      	addlt	r0, r0, r3
 80082f2:	4770      	bx	lr

080082f4 <fiprintf>:
 80082f4:	b40e      	push	{r1, r2, r3}
 80082f6:	b503      	push	{r0, r1, lr}
 80082f8:	4601      	mov	r1, r0
 80082fa:	ab03      	add	r3, sp, #12
 80082fc:	4805      	ldr	r0, [pc, #20]	@ (8008314 <fiprintf+0x20>)
 80082fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008302:	6800      	ldr	r0, [r0, #0]
 8008304:	9301      	str	r3, [sp, #4]
 8008306:	f000 f845 	bl	8008394 <_vfiprintf_r>
 800830a:	b002      	add	sp, #8
 800830c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008310:	b003      	add	sp, #12
 8008312:	4770      	bx	lr
 8008314:	20000018 	.word	0x20000018

08008318 <__ascii_wctomb>:
 8008318:	4603      	mov	r3, r0
 800831a:	4608      	mov	r0, r1
 800831c:	b141      	cbz	r1, 8008330 <__ascii_wctomb+0x18>
 800831e:	2aff      	cmp	r2, #255	@ 0xff
 8008320:	d904      	bls.n	800832c <__ascii_wctomb+0x14>
 8008322:	228a      	movs	r2, #138	@ 0x8a
 8008324:	601a      	str	r2, [r3, #0]
 8008326:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800832a:	4770      	bx	lr
 800832c:	700a      	strb	r2, [r1, #0]
 800832e:	2001      	movs	r0, #1
 8008330:	4770      	bx	lr

08008332 <abort>:
 8008332:	b508      	push	{r3, lr}
 8008334:	2006      	movs	r0, #6
 8008336:	f000 fa85 	bl	8008844 <raise>
 800833a:	2001      	movs	r0, #1
 800833c:	f7fa f94c 	bl	80025d8 <_exit>

08008340 <__sfputc_r>:
 8008340:	6893      	ldr	r3, [r2, #8]
 8008342:	3b01      	subs	r3, #1
 8008344:	2b00      	cmp	r3, #0
 8008346:	b410      	push	{r4}
 8008348:	6093      	str	r3, [r2, #8]
 800834a:	da08      	bge.n	800835e <__sfputc_r+0x1e>
 800834c:	6994      	ldr	r4, [r2, #24]
 800834e:	42a3      	cmp	r3, r4
 8008350:	db01      	blt.n	8008356 <__sfputc_r+0x16>
 8008352:	290a      	cmp	r1, #10
 8008354:	d103      	bne.n	800835e <__sfputc_r+0x1e>
 8008356:	f85d 4b04 	ldr.w	r4, [sp], #4
 800835a:	f000 b933 	b.w	80085c4 <__swbuf_r>
 800835e:	6813      	ldr	r3, [r2, #0]
 8008360:	1c58      	adds	r0, r3, #1
 8008362:	6010      	str	r0, [r2, #0]
 8008364:	7019      	strb	r1, [r3, #0]
 8008366:	4608      	mov	r0, r1
 8008368:	f85d 4b04 	ldr.w	r4, [sp], #4
 800836c:	4770      	bx	lr

0800836e <__sfputs_r>:
 800836e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008370:	4606      	mov	r6, r0
 8008372:	460f      	mov	r7, r1
 8008374:	4614      	mov	r4, r2
 8008376:	18d5      	adds	r5, r2, r3
 8008378:	42ac      	cmp	r4, r5
 800837a:	d101      	bne.n	8008380 <__sfputs_r+0x12>
 800837c:	2000      	movs	r0, #0
 800837e:	e007      	b.n	8008390 <__sfputs_r+0x22>
 8008380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008384:	463a      	mov	r2, r7
 8008386:	4630      	mov	r0, r6
 8008388:	f7ff ffda 	bl	8008340 <__sfputc_r>
 800838c:	1c43      	adds	r3, r0, #1
 800838e:	d1f3      	bne.n	8008378 <__sfputs_r+0xa>
 8008390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008394 <_vfiprintf_r>:
 8008394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008398:	460d      	mov	r5, r1
 800839a:	b09d      	sub	sp, #116	@ 0x74
 800839c:	4614      	mov	r4, r2
 800839e:	4698      	mov	r8, r3
 80083a0:	4606      	mov	r6, r0
 80083a2:	b118      	cbz	r0, 80083ac <_vfiprintf_r+0x18>
 80083a4:	6a03      	ldr	r3, [r0, #32]
 80083a6:	b90b      	cbnz	r3, 80083ac <_vfiprintf_r+0x18>
 80083a8:	f7fe f924 	bl	80065f4 <__sinit>
 80083ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083ae:	07d9      	lsls	r1, r3, #31
 80083b0:	d405      	bmi.n	80083be <_vfiprintf_r+0x2a>
 80083b2:	89ab      	ldrh	r3, [r5, #12]
 80083b4:	059a      	lsls	r2, r3, #22
 80083b6:	d402      	bmi.n	80083be <_vfiprintf_r+0x2a>
 80083b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083ba:	f7fe f988 	bl	80066ce <__retarget_lock_acquire_recursive>
 80083be:	89ab      	ldrh	r3, [r5, #12]
 80083c0:	071b      	lsls	r3, r3, #28
 80083c2:	d501      	bpl.n	80083c8 <_vfiprintf_r+0x34>
 80083c4:	692b      	ldr	r3, [r5, #16]
 80083c6:	b99b      	cbnz	r3, 80083f0 <_vfiprintf_r+0x5c>
 80083c8:	4629      	mov	r1, r5
 80083ca:	4630      	mov	r0, r6
 80083cc:	f000 f938 	bl	8008640 <__swsetup_r>
 80083d0:	b170      	cbz	r0, 80083f0 <_vfiprintf_r+0x5c>
 80083d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083d4:	07dc      	lsls	r4, r3, #31
 80083d6:	d504      	bpl.n	80083e2 <_vfiprintf_r+0x4e>
 80083d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80083dc:	b01d      	add	sp, #116	@ 0x74
 80083de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e2:	89ab      	ldrh	r3, [r5, #12]
 80083e4:	0598      	lsls	r0, r3, #22
 80083e6:	d4f7      	bmi.n	80083d8 <_vfiprintf_r+0x44>
 80083e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083ea:	f7fe f971 	bl	80066d0 <__retarget_lock_release_recursive>
 80083ee:	e7f3      	b.n	80083d8 <_vfiprintf_r+0x44>
 80083f0:	2300      	movs	r3, #0
 80083f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80083f4:	2320      	movs	r3, #32
 80083f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80083fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80083fe:	2330      	movs	r3, #48	@ 0x30
 8008400:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80085b0 <_vfiprintf_r+0x21c>
 8008404:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008408:	f04f 0901 	mov.w	r9, #1
 800840c:	4623      	mov	r3, r4
 800840e:	469a      	mov	sl, r3
 8008410:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008414:	b10a      	cbz	r2, 800841a <_vfiprintf_r+0x86>
 8008416:	2a25      	cmp	r2, #37	@ 0x25
 8008418:	d1f9      	bne.n	800840e <_vfiprintf_r+0x7a>
 800841a:	ebba 0b04 	subs.w	fp, sl, r4
 800841e:	d00b      	beq.n	8008438 <_vfiprintf_r+0xa4>
 8008420:	465b      	mov	r3, fp
 8008422:	4622      	mov	r2, r4
 8008424:	4629      	mov	r1, r5
 8008426:	4630      	mov	r0, r6
 8008428:	f7ff ffa1 	bl	800836e <__sfputs_r>
 800842c:	3001      	adds	r0, #1
 800842e:	f000 80a7 	beq.w	8008580 <_vfiprintf_r+0x1ec>
 8008432:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008434:	445a      	add	r2, fp
 8008436:	9209      	str	r2, [sp, #36]	@ 0x24
 8008438:	f89a 3000 	ldrb.w	r3, [sl]
 800843c:	2b00      	cmp	r3, #0
 800843e:	f000 809f 	beq.w	8008580 <_vfiprintf_r+0x1ec>
 8008442:	2300      	movs	r3, #0
 8008444:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008448:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800844c:	f10a 0a01 	add.w	sl, sl, #1
 8008450:	9304      	str	r3, [sp, #16]
 8008452:	9307      	str	r3, [sp, #28]
 8008454:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008458:	931a      	str	r3, [sp, #104]	@ 0x68
 800845a:	4654      	mov	r4, sl
 800845c:	2205      	movs	r2, #5
 800845e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008462:	4853      	ldr	r0, [pc, #332]	@ (80085b0 <_vfiprintf_r+0x21c>)
 8008464:	f7f7 fed4 	bl	8000210 <memchr>
 8008468:	9a04      	ldr	r2, [sp, #16]
 800846a:	b9d8      	cbnz	r0, 80084a4 <_vfiprintf_r+0x110>
 800846c:	06d1      	lsls	r1, r2, #27
 800846e:	bf44      	itt	mi
 8008470:	2320      	movmi	r3, #32
 8008472:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008476:	0713      	lsls	r3, r2, #28
 8008478:	bf44      	itt	mi
 800847a:	232b      	movmi	r3, #43	@ 0x2b
 800847c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008480:	f89a 3000 	ldrb.w	r3, [sl]
 8008484:	2b2a      	cmp	r3, #42	@ 0x2a
 8008486:	d015      	beq.n	80084b4 <_vfiprintf_r+0x120>
 8008488:	9a07      	ldr	r2, [sp, #28]
 800848a:	4654      	mov	r4, sl
 800848c:	2000      	movs	r0, #0
 800848e:	f04f 0c0a 	mov.w	ip, #10
 8008492:	4621      	mov	r1, r4
 8008494:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008498:	3b30      	subs	r3, #48	@ 0x30
 800849a:	2b09      	cmp	r3, #9
 800849c:	d94b      	bls.n	8008536 <_vfiprintf_r+0x1a2>
 800849e:	b1b0      	cbz	r0, 80084ce <_vfiprintf_r+0x13a>
 80084a0:	9207      	str	r2, [sp, #28]
 80084a2:	e014      	b.n	80084ce <_vfiprintf_r+0x13a>
 80084a4:	eba0 0308 	sub.w	r3, r0, r8
 80084a8:	fa09 f303 	lsl.w	r3, r9, r3
 80084ac:	4313      	orrs	r3, r2
 80084ae:	9304      	str	r3, [sp, #16]
 80084b0:	46a2      	mov	sl, r4
 80084b2:	e7d2      	b.n	800845a <_vfiprintf_r+0xc6>
 80084b4:	9b03      	ldr	r3, [sp, #12]
 80084b6:	1d19      	adds	r1, r3, #4
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	9103      	str	r1, [sp, #12]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	bfbb      	ittet	lt
 80084c0:	425b      	neglt	r3, r3
 80084c2:	f042 0202 	orrlt.w	r2, r2, #2
 80084c6:	9307      	strge	r3, [sp, #28]
 80084c8:	9307      	strlt	r3, [sp, #28]
 80084ca:	bfb8      	it	lt
 80084cc:	9204      	strlt	r2, [sp, #16]
 80084ce:	7823      	ldrb	r3, [r4, #0]
 80084d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80084d2:	d10a      	bne.n	80084ea <_vfiprintf_r+0x156>
 80084d4:	7863      	ldrb	r3, [r4, #1]
 80084d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80084d8:	d132      	bne.n	8008540 <_vfiprintf_r+0x1ac>
 80084da:	9b03      	ldr	r3, [sp, #12]
 80084dc:	1d1a      	adds	r2, r3, #4
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	9203      	str	r2, [sp, #12]
 80084e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80084e6:	3402      	adds	r4, #2
 80084e8:	9305      	str	r3, [sp, #20]
 80084ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80085c0 <_vfiprintf_r+0x22c>
 80084ee:	7821      	ldrb	r1, [r4, #0]
 80084f0:	2203      	movs	r2, #3
 80084f2:	4650      	mov	r0, sl
 80084f4:	f7f7 fe8c 	bl	8000210 <memchr>
 80084f8:	b138      	cbz	r0, 800850a <_vfiprintf_r+0x176>
 80084fa:	9b04      	ldr	r3, [sp, #16]
 80084fc:	eba0 000a 	sub.w	r0, r0, sl
 8008500:	2240      	movs	r2, #64	@ 0x40
 8008502:	4082      	lsls	r2, r0
 8008504:	4313      	orrs	r3, r2
 8008506:	3401      	adds	r4, #1
 8008508:	9304      	str	r3, [sp, #16]
 800850a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800850e:	4829      	ldr	r0, [pc, #164]	@ (80085b4 <_vfiprintf_r+0x220>)
 8008510:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008514:	2206      	movs	r2, #6
 8008516:	f7f7 fe7b 	bl	8000210 <memchr>
 800851a:	2800      	cmp	r0, #0
 800851c:	d03f      	beq.n	800859e <_vfiprintf_r+0x20a>
 800851e:	4b26      	ldr	r3, [pc, #152]	@ (80085b8 <_vfiprintf_r+0x224>)
 8008520:	bb1b      	cbnz	r3, 800856a <_vfiprintf_r+0x1d6>
 8008522:	9b03      	ldr	r3, [sp, #12]
 8008524:	3307      	adds	r3, #7
 8008526:	f023 0307 	bic.w	r3, r3, #7
 800852a:	3308      	adds	r3, #8
 800852c:	9303      	str	r3, [sp, #12]
 800852e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008530:	443b      	add	r3, r7
 8008532:	9309      	str	r3, [sp, #36]	@ 0x24
 8008534:	e76a      	b.n	800840c <_vfiprintf_r+0x78>
 8008536:	fb0c 3202 	mla	r2, ip, r2, r3
 800853a:	460c      	mov	r4, r1
 800853c:	2001      	movs	r0, #1
 800853e:	e7a8      	b.n	8008492 <_vfiprintf_r+0xfe>
 8008540:	2300      	movs	r3, #0
 8008542:	3401      	adds	r4, #1
 8008544:	9305      	str	r3, [sp, #20]
 8008546:	4619      	mov	r1, r3
 8008548:	f04f 0c0a 	mov.w	ip, #10
 800854c:	4620      	mov	r0, r4
 800854e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008552:	3a30      	subs	r2, #48	@ 0x30
 8008554:	2a09      	cmp	r2, #9
 8008556:	d903      	bls.n	8008560 <_vfiprintf_r+0x1cc>
 8008558:	2b00      	cmp	r3, #0
 800855a:	d0c6      	beq.n	80084ea <_vfiprintf_r+0x156>
 800855c:	9105      	str	r1, [sp, #20]
 800855e:	e7c4      	b.n	80084ea <_vfiprintf_r+0x156>
 8008560:	fb0c 2101 	mla	r1, ip, r1, r2
 8008564:	4604      	mov	r4, r0
 8008566:	2301      	movs	r3, #1
 8008568:	e7f0      	b.n	800854c <_vfiprintf_r+0x1b8>
 800856a:	ab03      	add	r3, sp, #12
 800856c:	9300      	str	r3, [sp, #0]
 800856e:	462a      	mov	r2, r5
 8008570:	4b12      	ldr	r3, [pc, #72]	@ (80085bc <_vfiprintf_r+0x228>)
 8008572:	a904      	add	r1, sp, #16
 8008574:	4630      	mov	r0, r6
 8008576:	f7fd fbd9 	bl	8005d2c <_printf_float>
 800857a:	4607      	mov	r7, r0
 800857c:	1c78      	adds	r0, r7, #1
 800857e:	d1d6      	bne.n	800852e <_vfiprintf_r+0x19a>
 8008580:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008582:	07d9      	lsls	r1, r3, #31
 8008584:	d405      	bmi.n	8008592 <_vfiprintf_r+0x1fe>
 8008586:	89ab      	ldrh	r3, [r5, #12]
 8008588:	059a      	lsls	r2, r3, #22
 800858a:	d402      	bmi.n	8008592 <_vfiprintf_r+0x1fe>
 800858c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800858e:	f7fe f89f 	bl	80066d0 <__retarget_lock_release_recursive>
 8008592:	89ab      	ldrh	r3, [r5, #12]
 8008594:	065b      	lsls	r3, r3, #25
 8008596:	f53f af1f 	bmi.w	80083d8 <_vfiprintf_r+0x44>
 800859a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800859c:	e71e      	b.n	80083dc <_vfiprintf_r+0x48>
 800859e:	ab03      	add	r3, sp, #12
 80085a0:	9300      	str	r3, [sp, #0]
 80085a2:	462a      	mov	r2, r5
 80085a4:	4b05      	ldr	r3, [pc, #20]	@ (80085bc <_vfiprintf_r+0x228>)
 80085a6:	a904      	add	r1, sp, #16
 80085a8:	4630      	mov	r0, r6
 80085aa:	f7fd fe57 	bl	800625c <_printf_i>
 80085ae:	e7e4      	b.n	800857a <_vfiprintf_r+0x1e6>
 80085b0:	08009991 	.word	0x08009991
 80085b4:	0800999b 	.word	0x0800999b
 80085b8:	08005d2d 	.word	0x08005d2d
 80085bc:	0800836f 	.word	0x0800836f
 80085c0:	08009997 	.word	0x08009997

080085c4 <__swbuf_r>:
 80085c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085c6:	460e      	mov	r6, r1
 80085c8:	4614      	mov	r4, r2
 80085ca:	4605      	mov	r5, r0
 80085cc:	b118      	cbz	r0, 80085d6 <__swbuf_r+0x12>
 80085ce:	6a03      	ldr	r3, [r0, #32]
 80085d0:	b90b      	cbnz	r3, 80085d6 <__swbuf_r+0x12>
 80085d2:	f7fe f80f 	bl	80065f4 <__sinit>
 80085d6:	69a3      	ldr	r3, [r4, #24]
 80085d8:	60a3      	str	r3, [r4, #8]
 80085da:	89a3      	ldrh	r3, [r4, #12]
 80085dc:	071a      	lsls	r2, r3, #28
 80085de:	d501      	bpl.n	80085e4 <__swbuf_r+0x20>
 80085e0:	6923      	ldr	r3, [r4, #16]
 80085e2:	b943      	cbnz	r3, 80085f6 <__swbuf_r+0x32>
 80085e4:	4621      	mov	r1, r4
 80085e6:	4628      	mov	r0, r5
 80085e8:	f000 f82a 	bl	8008640 <__swsetup_r>
 80085ec:	b118      	cbz	r0, 80085f6 <__swbuf_r+0x32>
 80085ee:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80085f2:	4638      	mov	r0, r7
 80085f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085f6:	6823      	ldr	r3, [r4, #0]
 80085f8:	6922      	ldr	r2, [r4, #16]
 80085fa:	1a98      	subs	r0, r3, r2
 80085fc:	6963      	ldr	r3, [r4, #20]
 80085fe:	b2f6      	uxtb	r6, r6
 8008600:	4283      	cmp	r3, r0
 8008602:	4637      	mov	r7, r6
 8008604:	dc05      	bgt.n	8008612 <__swbuf_r+0x4e>
 8008606:	4621      	mov	r1, r4
 8008608:	4628      	mov	r0, r5
 800860a:	f7ff f937 	bl	800787c <_fflush_r>
 800860e:	2800      	cmp	r0, #0
 8008610:	d1ed      	bne.n	80085ee <__swbuf_r+0x2a>
 8008612:	68a3      	ldr	r3, [r4, #8]
 8008614:	3b01      	subs	r3, #1
 8008616:	60a3      	str	r3, [r4, #8]
 8008618:	6823      	ldr	r3, [r4, #0]
 800861a:	1c5a      	adds	r2, r3, #1
 800861c:	6022      	str	r2, [r4, #0]
 800861e:	701e      	strb	r6, [r3, #0]
 8008620:	6962      	ldr	r2, [r4, #20]
 8008622:	1c43      	adds	r3, r0, #1
 8008624:	429a      	cmp	r2, r3
 8008626:	d004      	beq.n	8008632 <__swbuf_r+0x6e>
 8008628:	89a3      	ldrh	r3, [r4, #12]
 800862a:	07db      	lsls	r3, r3, #31
 800862c:	d5e1      	bpl.n	80085f2 <__swbuf_r+0x2e>
 800862e:	2e0a      	cmp	r6, #10
 8008630:	d1df      	bne.n	80085f2 <__swbuf_r+0x2e>
 8008632:	4621      	mov	r1, r4
 8008634:	4628      	mov	r0, r5
 8008636:	f7ff f921 	bl	800787c <_fflush_r>
 800863a:	2800      	cmp	r0, #0
 800863c:	d0d9      	beq.n	80085f2 <__swbuf_r+0x2e>
 800863e:	e7d6      	b.n	80085ee <__swbuf_r+0x2a>

08008640 <__swsetup_r>:
 8008640:	b538      	push	{r3, r4, r5, lr}
 8008642:	4b29      	ldr	r3, [pc, #164]	@ (80086e8 <__swsetup_r+0xa8>)
 8008644:	4605      	mov	r5, r0
 8008646:	6818      	ldr	r0, [r3, #0]
 8008648:	460c      	mov	r4, r1
 800864a:	b118      	cbz	r0, 8008654 <__swsetup_r+0x14>
 800864c:	6a03      	ldr	r3, [r0, #32]
 800864e:	b90b      	cbnz	r3, 8008654 <__swsetup_r+0x14>
 8008650:	f7fd ffd0 	bl	80065f4 <__sinit>
 8008654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008658:	0719      	lsls	r1, r3, #28
 800865a:	d422      	bmi.n	80086a2 <__swsetup_r+0x62>
 800865c:	06da      	lsls	r2, r3, #27
 800865e:	d407      	bmi.n	8008670 <__swsetup_r+0x30>
 8008660:	2209      	movs	r2, #9
 8008662:	602a      	str	r2, [r5, #0]
 8008664:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008668:	81a3      	strh	r3, [r4, #12]
 800866a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800866e:	e033      	b.n	80086d8 <__swsetup_r+0x98>
 8008670:	0758      	lsls	r0, r3, #29
 8008672:	d512      	bpl.n	800869a <__swsetup_r+0x5a>
 8008674:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008676:	b141      	cbz	r1, 800868a <__swsetup_r+0x4a>
 8008678:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800867c:	4299      	cmp	r1, r3
 800867e:	d002      	beq.n	8008686 <__swsetup_r+0x46>
 8008680:	4628      	mov	r0, r5
 8008682:	f7ff fdd3 	bl	800822c <_free_r>
 8008686:	2300      	movs	r3, #0
 8008688:	6363      	str	r3, [r4, #52]	@ 0x34
 800868a:	89a3      	ldrh	r3, [r4, #12]
 800868c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008690:	81a3      	strh	r3, [r4, #12]
 8008692:	2300      	movs	r3, #0
 8008694:	6063      	str	r3, [r4, #4]
 8008696:	6923      	ldr	r3, [r4, #16]
 8008698:	6023      	str	r3, [r4, #0]
 800869a:	89a3      	ldrh	r3, [r4, #12]
 800869c:	f043 0308 	orr.w	r3, r3, #8
 80086a0:	81a3      	strh	r3, [r4, #12]
 80086a2:	6923      	ldr	r3, [r4, #16]
 80086a4:	b94b      	cbnz	r3, 80086ba <__swsetup_r+0x7a>
 80086a6:	89a3      	ldrh	r3, [r4, #12]
 80086a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80086ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086b0:	d003      	beq.n	80086ba <__swsetup_r+0x7a>
 80086b2:	4621      	mov	r1, r4
 80086b4:	4628      	mov	r0, r5
 80086b6:	f000 f83f 	bl	8008738 <__smakebuf_r>
 80086ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086be:	f013 0201 	ands.w	r2, r3, #1
 80086c2:	d00a      	beq.n	80086da <__swsetup_r+0x9a>
 80086c4:	2200      	movs	r2, #0
 80086c6:	60a2      	str	r2, [r4, #8]
 80086c8:	6962      	ldr	r2, [r4, #20]
 80086ca:	4252      	negs	r2, r2
 80086cc:	61a2      	str	r2, [r4, #24]
 80086ce:	6922      	ldr	r2, [r4, #16]
 80086d0:	b942      	cbnz	r2, 80086e4 <__swsetup_r+0xa4>
 80086d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80086d6:	d1c5      	bne.n	8008664 <__swsetup_r+0x24>
 80086d8:	bd38      	pop	{r3, r4, r5, pc}
 80086da:	0799      	lsls	r1, r3, #30
 80086dc:	bf58      	it	pl
 80086de:	6962      	ldrpl	r2, [r4, #20]
 80086e0:	60a2      	str	r2, [r4, #8]
 80086e2:	e7f4      	b.n	80086ce <__swsetup_r+0x8e>
 80086e4:	2000      	movs	r0, #0
 80086e6:	e7f7      	b.n	80086d8 <__swsetup_r+0x98>
 80086e8:	20000018 	.word	0x20000018

080086ec <__swhatbuf_r>:
 80086ec:	b570      	push	{r4, r5, r6, lr}
 80086ee:	460c      	mov	r4, r1
 80086f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086f4:	2900      	cmp	r1, #0
 80086f6:	b096      	sub	sp, #88	@ 0x58
 80086f8:	4615      	mov	r5, r2
 80086fa:	461e      	mov	r6, r3
 80086fc:	da0d      	bge.n	800871a <__swhatbuf_r+0x2e>
 80086fe:	89a3      	ldrh	r3, [r4, #12]
 8008700:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008704:	f04f 0100 	mov.w	r1, #0
 8008708:	bf14      	ite	ne
 800870a:	2340      	movne	r3, #64	@ 0x40
 800870c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008710:	2000      	movs	r0, #0
 8008712:	6031      	str	r1, [r6, #0]
 8008714:	602b      	str	r3, [r5, #0]
 8008716:	b016      	add	sp, #88	@ 0x58
 8008718:	bd70      	pop	{r4, r5, r6, pc}
 800871a:	466a      	mov	r2, sp
 800871c:	f000 f848 	bl	80087b0 <_fstat_r>
 8008720:	2800      	cmp	r0, #0
 8008722:	dbec      	blt.n	80086fe <__swhatbuf_r+0x12>
 8008724:	9901      	ldr	r1, [sp, #4]
 8008726:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800872a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800872e:	4259      	negs	r1, r3
 8008730:	4159      	adcs	r1, r3
 8008732:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008736:	e7eb      	b.n	8008710 <__swhatbuf_r+0x24>

08008738 <__smakebuf_r>:
 8008738:	898b      	ldrh	r3, [r1, #12]
 800873a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800873c:	079d      	lsls	r5, r3, #30
 800873e:	4606      	mov	r6, r0
 8008740:	460c      	mov	r4, r1
 8008742:	d507      	bpl.n	8008754 <__smakebuf_r+0x1c>
 8008744:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008748:	6023      	str	r3, [r4, #0]
 800874a:	6123      	str	r3, [r4, #16]
 800874c:	2301      	movs	r3, #1
 800874e:	6163      	str	r3, [r4, #20]
 8008750:	b003      	add	sp, #12
 8008752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008754:	ab01      	add	r3, sp, #4
 8008756:	466a      	mov	r2, sp
 8008758:	f7ff ffc8 	bl	80086ec <__swhatbuf_r>
 800875c:	9f00      	ldr	r7, [sp, #0]
 800875e:	4605      	mov	r5, r0
 8008760:	4639      	mov	r1, r7
 8008762:	4630      	mov	r0, r6
 8008764:	f7fe ff86 	bl	8007674 <_malloc_r>
 8008768:	b948      	cbnz	r0, 800877e <__smakebuf_r+0x46>
 800876a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800876e:	059a      	lsls	r2, r3, #22
 8008770:	d4ee      	bmi.n	8008750 <__smakebuf_r+0x18>
 8008772:	f023 0303 	bic.w	r3, r3, #3
 8008776:	f043 0302 	orr.w	r3, r3, #2
 800877a:	81a3      	strh	r3, [r4, #12]
 800877c:	e7e2      	b.n	8008744 <__smakebuf_r+0xc>
 800877e:	89a3      	ldrh	r3, [r4, #12]
 8008780:	6020      	str	r0, [r4, #0]
 8008782:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008786:	81a3      	strh	r3, [r4, #12]
 8008788:	9b01      	ldr	r3, [sp, #4]
 800878a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800878e:	b15b      	cbz	r3, 80087a8 <__smakebuf_r+0x70>
 8008790:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008794:	4630      	mov	r0, r6
 8008796:	f000 f81d 	bl	80087d4 <_isatty_r>
 800879a:	b128      	cbz	r0, 80087a8 <__smakebuf_r+0x70>
 800879c:	89a3      	ldrh	r3, [r4, #12]
 800879e:	f023 0303 	bic.w	r3, r3, #3
 80087a2:	f043 0301 	orr.w	r3, r3, #1
 80087a6:	81a3      	strh	r3, [r4, #12]
 80087a8:	89a3      	ldrh	r3, [r4, #12]
 80087aa:	431d      	orrs	r5, r3
 80087ac:	81a5      	strh	r5, [r4, #12]
 80087ae:	e7cf      	b.n	8008750 <__smakebuf_r+0x18>

080087b0 <_fstat_r>:
 80087b0:	b538      	push	{r3, r4, r5, lr}
 80087b2:	4d07      	ldr	r5, [pc, #28]	@ (80087d0 <_fstat_r+0x20>)
 80087b4:	2300      	movs	r3, #0
 80087b6:	4604      	mov	r4, r0
 80087b8:	4608      	mov	r0, r1
 80087ba:	4611      	mov	r1, r2
 80087bc:	602b      	str	r3, [r5, #0]
 80087be:	f7f9 ff5b 	bl	8002678 <_fstat>
 80087c2:	1c43      	adds	r3, r0, #1
 80087c4:	d102      	bne.n	80087cc <_fstat_r+0x1c>
 80087c6:	682b      	ldr	r3, [r5, #0]
 80087c8:	b103      	cbz	r3, 80087cc <_fstat_r+0x1c>
 80087ca:	6023      	str	r3, [r4, #0]
 80087cc:	bd38      	pop	{r3, r4, r5, pc}
 80087ce:	bf00      	nop
 80087d0:	200004cc 	.word	0x200004cc

080087d4 <_isatty_r>:
 80087d4:	b538      	push	{r3, r4, r5, lr}
 80087d6:	4d06      	ldr	r5, [pc, #24]	@ (80087f0 <_isatty_r+0x1c>)
 80087d8:	2300      	movs	r3, #0
 80087da:	4604      	mov	r4, r0
 80087dc:	4608      	mov	r0, r1
 80087de:	602b      	str	r3, [r5, #0]
 80087e0:	f7f9 ff5a 	bl	8002698 <_isatty>
 80087e4:	1c43      	adds	r3, r0, #1
 80087e6:	d102      	bne.n	80087ee <_isatty_r+0x1a>
 80087e8:	682b      	ldr	r3, [r5, #0]
 80087ea:	b103      	cbz	r3, 80087ee <_isatty_r+0x1a>
 80087ec:	6023      	str	r3, [r4, #0]
 80087ee:	bd38      	pop	{r3, r4, r5, pc}
 80087f0:	200004cc 	.word	0x200004cc

080087f4 <_raise_r>:
 80087f4:	291f      	cmp	r1, #31
 80087f6:	b538      	push	{r3, r4, r5, lr}
 80087f8:	4605      	mov	r5, r0
 80087fa:	460c      	mov	r4, r1
 80087fc:	d904      	bls.n	8008808 <_raise_r+0x14>
 80087fe:	2316      	movs	r3, #22
 8008800:	6003      	str	r3, [r0, #0]
 8008802:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008806:	bd38      	pop	{r3, r4, r5, pc}
 8008808:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800880a:	b112      	cbz	r2, 8008812 <_raise_r+0x1e>
 800880c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008810:	b94b      	cbnz	r3, 8008826 <_raise_r+0x32>
 8008812:	4628      	mov	r0, r5
 8008814:	f000 f830 	bl	8008878 <_getpid_r>
 8008818:	4622      	mov	r2, r4
 800881a:	4601      	mov	r1, r0
 800881c:	4628      	mov	r0, r5
 800881e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008822:	f000 b817 	b.w	8008854 <_kill_r>
 8008826:	2b01      	cmp	r3, #1
 8008828:	d00a      	beq.n	8008840 <_raise_r+0x4c>
 800882a:	1c59      	adds	r1, r3, #1
 800882c:	d103      	bne.n	8008836 <_raise_r+0x42>
 800882e:	2316      	movs	r3, #22
 8008830:	6003      	str	r3, [r0, #0]
 8008832:	2001      	movs	r0, #1
 8008834:	e7e7      	b.n	8008806 <_raise_r+0x12>
 8008836:	2100      	movs	r1, #0
 8008838:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800883c:	4620      	mov	r0, r4
 800883e:	4798      	blx	r3
 8008840:	2000      	movs	r0, #0
 8008842:	e7e0      	b.n	8008806 <_raise_r+0x12>

08008844 <raise>:
 8008844:	4b02      	ldr	r3, [pc, #8]	@ (8008850 <raise+0xc>)
 8008846:	4601      	mov	r1, r0
 8008848:	6818      	ldr	r0, [r3, #0]
 800884a:	f7ff bfd3 	b.w	80087f4 <_raise_r>
 800884e:	bf00      	nop
 8008850:	20000018 	.word	0x20000018

08008854 <_kill_r>:
 8008854:	b538      	push	{r3, r4, r5, lr}
 8008856:	4d07      	ldr	r5, [pc, #28]	@ (8008874 <_kill_r+0x20>)
 8008858:	2300      	movs	r3, #0
 800885a:	4604      	mov	r4, r0
 800885c:	4608      	mov	r0, r1
 800885e:	4611      	mov	r1, r2
 8008860:	602b      	str	r3, [r5, #0]
 8008862:	f7f9 fea9 	bl	80025b8 <_kill>
 8008866:	1c43      	adds	r3, r0, #1
 8008868:	d102      	bne.n	8008870 <_kill_r+0x1c>
 800886a:	682b      	ldr	r3, [r5, #0]
 800886c:	b103      	cbz	r3, 8008870 <_kill_r+0x1c>
 800886e:	6023      	str	r3, [r4, #0]
 8008870:	bd38      	pop	{r3, r4, r5, pc}
 8008872:	bf00      	nop
 8008874:	200004cc 	.word	0x200004cc

08008878 <_getpid_r>:
 8008878:	f7f9 be96 	b.w	80025a8 <_getpid>

0800887c <pow>:
 800887c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800887e:	ed2d 8b02 	vpush	{d8}
 8008882:	eeb0 8a40 	vmov.f32	s16, s0
 8008886:	eef0 8a60 	vmov.f32	s17, s1
 800888a:	ec55 4b11 	vmov	r4, r5, d1
 800888e:	f000 f873 	bl	8008978 <__ieee754_pow>
 8008892:	4622      	mov	r2, r4
 8008894:	462b      	mov	r3, r5
 8008896:	4620      	mov	r0, r4
 8008898:	4629      	mov	r1, r5
 800889a:	ec57 6b10 	vmov	r6, r7, d0
 800889e:	f7f8 f965 	bl	8000b6c <__aeabi_dcmpun>
 80088a2:	2800      	cmp	r0, #0
 80088a4:	d13b      	bne.n	800891e <pow+0xa2>
 80088a6:	ec51 0b18 	vmov	r0, r1, d8
 80088aa:	2200      	movs	r2, #0
 80088ac:	2300      	movs	r3, #0
 80088ae:	f7f8 f92b 	bl	8000b08 <__aeabi_dcmpeq>
 80088b2:	b1b8      	cbz	r0, 80088e4 <pow+0x68>
 80088b4:	2200      	movs	r2, #0
 80088b6:	2300      	movs	r3, #0
 80088b8:	4620      	mov	r0, r4
 80088ba:	4629      	mov	r1, r5
 80088bc:	f7f8 f924 	bl	8000b08 <__aeabi_dcmpeq>
 80088c0:	2800      	cmp	r0, #0
 80088c2:	d146      	bne.n	8008952 <pow+0xd6>
 80088c4:	ec45 4b10 	vmov	d0, r4, r5
 80088c8:	f000 f848 	bl	800895c <finite>
 80088cc:	b338      	cbz	r0, 800891e <pow+0xa2>
 80088ce:	2200      	movs	r2, #0
 80088d0:	2300      	movs	r3, #0
 80088d2:	4620      	mov	r0, r4
 80088d4:	4629      	mov	r1, r5
 80088d6:	f7f8 f921 	bl	8000b1c <__aeabi_dcmplt>
 80088da:	b300      	cbz	r0, 800891e <pow+0xa2>
 80088dc:	f7fd fecc 	bl	8006678 <__errno>
 80088e0:	2322      	movs	r3, #34	@ 0x22
 80088e2:	e01b      	b.n	800891c <pow+0xa0>
 80088e4:	ec47 6b10 	vmov	d0, r6, r7
 80088e8:	f000 f838 	bl	800895c <finite>
 80088ec:	b9e0      	cbnz	r0, 8008928 <pow+0xac>
 80088ee:	eeb0 0a48 	vmov.f32	s0, s16
 80088f2:	eef0 0a68 	vmov.f32	s1, s17
 80088f6:	f000 f831 	bl	800895c <finite>
 80088fa:	b1a8      	cbz	r0, 8008928 <pow+0xac>
 80088fc:	ec45 4b10 	vmov	d0, r4, r5
 8008900:	f000 f82c 	bl	800895c <finite>
 8008904:	b180      	cbz	r0, 8008928 <pow+0xac>
 8008906:	4632      	mov	r2, r6
 8008908:	463b      	mov	r3, r7
 800890a:	4630      	mov	r0, r6
 800890c:	4639      	mov	r1, r7
 800890e:	f7f8 f92d 	bl	8000b6c <__aeabi_dcmpun>
 8008912:	2800      	cmp	r0, #0
 8008914:	d0e2      	beq.n	80088dc <pow+0x60>
 8008916:	f7fd feaf 	bl	8006678 <__errno>
 800891a:	2321      	movs	r3, #33	@ 0x21
 800891c:	6003      	str	r3, [r0, #0]
 800891e:	ecbd 8b02 	vpop	{d8}
 8008922:	ec47 6b10 	vmov	d0, r6, r7
 8008926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008928:	2200      	movs	r2, #0
 800892a:	2300      	movs	r3, #0
 800892c:	4630      	mov	r0, r6
 800892e:	4639      	mov	r1, r7
 8008930:	f7f8 f8ea 	bl	8000b08 <__aeabi_dcmpeq>
 8008934:	2800      	cmp	r0, #0
 8008936:	d0f2      	beq.n	800891e <pow+0xa2>
 8008938:	eeb0 0a48 	vmov.f32	s0, s16
 800893c:	eef0 0a68 	vmov.f32	s1, s17
 8008940:	f000 f80c 	bl	800895c <finite>
 8008944:	2800      	cmp	r0, #0
 8008946:	d0ea      	beq.n	800891e <pow+0xa2>
 8008948:	ec45 4b10 	vmov	d0, r4, r5
 800894c:	f000 f806 	bl	800895c <finite>
 8008950:	e7c3      	b.n	80088da <pow+0x5e>
 8008952:	4f01      	ldr	r7, [pc, #4]	@ (8008958 <pow+0xdc>)
 8008954:	2600      	movs	r6, #0
 8008956:	e7e2      	b.n	800891e <pow+0xa2>
 8008958:	3ff00000 	.word	0x3ff00000

0800895c <finite>:
 800895c:	b082      	sub	sp, #8
 800895e:	ed8d 0b00 	vstr	d0, [sp]
 8008962:	9801      	ldr	r0, [sp, #4]
 8008964:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8008968:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800896c:	0fc0      	lsrs	r0, r0, #31
 800896e:	b002      	add	sp, #8
 8008970:	4770      	bx	lr
 8008972:	0000      	movs	r0, r0
 8008974:	0000      	movs	r0, r0
	...

08008978 <__ieee754_pow>:
 8008978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800897c:	b091      	sub	sp, #68	@ 0x44
 800897e:	ed8d 1b00 	vstr	d1, [sp]
 8008982:	e9dd 1900 	ldrd	r1, r9, [sp]
 8008986:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800898a:	ea5a 0001 	orrs.w	r0, sl, r1
 800898e:	ec57 6b10 	vmov	r6, r7, d0
 8008992:	d113      	bne.n	80089bc <__ieee754_pow+0x44>
 8008994:	19b3      	adds	r3, r6, r6
 8008996:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800899a:	4152      	adcs	r2, r2
 800899c:	4298      	cmp	r0, r3
 800899e:	4b98      	ldr	r3, [pc, #608]	@ (8008c00 <__ieee754_pow+0x288>)
 80089a0:	4193      	sbcs	r3, r2
 80089a2:	f080 84ea 	bcs.w	800937a <__ieee754_pow+0xa02>
 80089a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089aa:	4630      	mov	r0, r6
 80089ac:	4639      	mov	r1, r7
 80089ae:	f7f7 fc8d 	bl	80002cc <__adddf3>
 80089b2:	ec41 0b10 	vmov	d0, r0, r1
 80089b6:	b011      	add	sp, #68	@ 0x44
 80089b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089bc:	4a91      	ldr	r2, [pc, #580]	@ (8008c04 <__ieee754_pow+0x28c>)
 80089be:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80089c2:	4590      	cmp	r8, r2
 80089c4:	463d      	mov	r5, r7
 80089c6:	4633      	mov	r3, r6
 80089c8:	d806      	bhi.n	80089d8 <__ieee754_pow+0x60>
 80089ca:	d101      	bne.n	80089d0 <__ieee754_pow+0x58>
 80089cc:	2e00      	cmp	r6, #0
 80089ce:	d1ea      	bne.n	80089a6 <__ieee754_pow+0x2e>
 80089d0:	4592      	cmp	sl, r2
 80089d2:	d801      	bhi.n	80089d8 <__ieee754_pow+0x60>
 80089d4:	d10e      	bne.n	80089f4 <__ieee754_pow+0x7c>
 80089d6:	b169      	cbz	r1, 80089f4 <__ieee754_pow+0x7c>
 80089d8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80089dc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80089e0:	431d      	orrs	r5, r3
 80089e2:	d1e0      	bne.n	80089a6 <__ieee754_pow+0x2e>
 80089e4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80089e8:	18db      	adds	r3, r3, r3
 80089ea:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80089ee:	4152      	adcs	r2, r2
 80089f0:	429d      	cmp	r5, r3
 80089f2:	e7d4      	b.n	800899e <__ieee754_pow+0x26>
 80089f4:	2d00      	cmp	r5, #0
 80089f6:	46c3      	mov	fp, r8
 80089f8:	da3a      	bge.n	8008a70 <__ieee754_pow+0xf8>
 80089fa:	4a83      	ldr	r2, [pc, #524]	@ (8008c08 <__ieee754_pow+0x290>)
 80089fc:	4592      	cmp	sl, r2
 80089fe:	d84d      	bhi.n	8008a9c <__ieee754_pow+0x124>
 8008a00:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8008a04:	4592      	cmp	sl, r2
 8008a06:	f240 84c7 	bls.w	8009398 <__ieee754_pow+0xa20>
 8008a0a:	ea4f 522a 	mov.w	r2, sl, asr #20
 8008a0e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8008a12:	2a14      	cmp	r2, #20
 8008a14:	dd0f      	ble.n	8008a36 <__ieee754_pow+0xbe>
 8008a16:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8008a1a:	fa21 f402 	lsr.w	r4, r1, r2
 8008a1e:	fa04 f202 	lsl.w	r2, r4, r2
 8008a22:	428a      	cmp	r2, r1
 8008a24:	f040 84b8 	bne.w	8009398 <__ieee754_pow+0xa20>
 8008a28:	f004 0401 	and.w	r4, r4, #1
 8008a2c:	f1c4 0402 	rsb	r4, r4, #2
 8008a30:	2900      	cmp	r1, #0
 8008a32:	d158      	bne.n	8008ae6 <__ieee754_pow+0x16e>
 8008a34:	e00e      	b.n	8008a54 <__ieee754_pow+0xdc>
 8008a36:	2900      	cmp	r1, #0
 8008a38:	d154      	bne.n	8008ae4 <__ieee754_pow+0x16c>
 8008a3a:	f1c2 0214 	rsb	r2, r2, #20
 8008a3e:	fa4a f402 	asr.w	r4, sl, r2
 8008a42:	fa04 f202 	lsl.w	r2, r4, r2
 8008a46:	4552      	cmp	r2, sl
 8008a48:	f040 84a3 	bne.w	8009392 <__ieee754_pow+0xa1a>
 8008a4c:	f004 0401 	and.w	r4, r4, #1
 8008a50:	f1c4 0402 	rsb	r4, r4, #2
 8008a54:	4a6d      	ldr	r2, [pc, #436]	@ (8008c0c <__ieee754_pow+0x294>)
 8008a56:	4592      	cmp	sl, r2
 8008a58:	d12e      	bne.n	8008ab8 <__ieee754_pow+0x140>
 8008a5a:	f1b9 0f00 	cmp.w	r9, #0
 8008a5e:	f280 8494 	bge.w	800938a <__ieee754_pow+0xa12>
 8008a62:	496a      	ldr	r1, [pc, #424]	@ (8008c0c <__ieee754_pow+0x294>)
 8008a64:	4632      	mov	r2, r6
 8008a66:	463b      	mov	r3, r7
 8008a68:	2000      	movs	r0, #0
 8008a6a:	f7f7 ff0f 	bl	800088c <__aeabi_ddiv>
 8008a6e:	e7a0      	b.n	80089b2 <__ieee754_pow+0x3a>
 8008a70:	2400      	movs	r4, #0
 8008a72:	bbc1      	cbnz	r1, 8008ae6 <__ieee754_pow+0x16e>
 8008a74:	4a63      	ldr	r2, [pc, #396]	@ (8008c04 <__ieee754_pow+0x28c>)
 8008a76:	4592      	cmp	sl, r2
 8008a78:	d1ec      	bne.n	8008a54 <__ieee754_pow+0xdc>
 8008a7a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8008a7e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8008a82:	431a      	orrs	r2, r3
 8008a84:	f000 8479 	beq.w	800937a <__ieee754_pow+0xa02>
 8008a88:	4b61      	ldr	r3, [pc, #388]	@ (8008c10 <__ieee754_pow+0x298>)
 8008a8a:	4598      	cmp	r8, r3
 8008a8c:	d908      	bls.n	8008aa0 <__ieee754_pow+0x128>
 8008a8e:	f1b9 0f00 	cmp.w	r9, #0
 8008a92:	f2c0 8476 	blt.w	8009382 <__ieee754_pow+0xa0a>
 8008a96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a9a:	e78a      	b.n	80089b2 <__ieee754_pow+0x3a>
 8008a9c:	2402      	movs	r4, #2
 8008a9e:	e7e8      	b.n	8008a72 <__ieee754_pow+0xfa>
 8008aa0:	f1b9 0f00 	cmp.w	r9, #0
 8008aa4:	f04f 0000 	mov.w	r0, #0
 8008aa8:	f04f 0100 	mov.w	r1, #0
 8008aac:	da81      	bge.n	80089b2 <__ieee754_pow+0x3a>
 8008aae:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008ab2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8008ab6:	e77c      	b.n	80089b2 <__ieee754_pow+0x3a>
 8008ab8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8008abc:	d106      	bne.n	8008acc <__ieee754_pow+0x154>
 8008abe:	4632      	mov	r2, r6
 8008ac0:	463b      	mov	r3, r7
 8008ac2:	4630      	mov	r0, r6
 8008ac4:	4639      	mov	r1, r7
 8008ac6:	f7f7 fdb7 	bl	8000638 <__aeabi_dmul>
 8008aca:	e772      	b.n	80089b2 <__ieee754_pow+0x3a>
 8008acc:	4a51      	ldr	r2, [pc, #324]	@ (8008c14 <__ieee754_pow+0x29c>)
 8008ace:	4591      	cmp	r9, r2
 8008ad0:	d109      	bne.n	8008ae6 <__ieee754_pow+0x16e>
 8008ad2:	2d00      	cmp	r5, #0
 8008ad4:	db07      	blt.n	8008ae6 <__ieee754_pow+0x16e>
 8008ad6:	ec47 6b10 	vmov	d0, r6, r7
 8008ada:	b011      	add	sp, #68	@ 0x44
 8008adc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae0:	f000 bd50 	b.w	8009584 <__ieee754_sqrt>
 8008ae4:	2400      	movs	r4, #0
 8008ae6:	ec47 6b10 	vmov	d0, r6, r7
 8008aea:	9302      	str	r3, [sp, #8]
 8008aec:	f000 fcc4 	bl	8009478 <fabs>
 8008af0:	9b02      	ldr	r3, [sp, #8]
 8008af2:	ec51 0b10 	vmov	r0, r1, d0
 8008af6:	bb53      	cbnz	r3, 8008b4e <__ieee754_pow+0x1d6>
 8008af8:	4b44      	ldr	r3, [pc, #272]	@ (8008c0c <__ieee754_pow+0x294>)
 8008afa:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d002      	beq.n	8008b08 <__ieee754_pow+0x190>
 8008b02:	f1b8 0f00 	cmp.w	r8, #0
 8008b06:	d122      	bne.n	8008b4e <__ieee754_pow+0x1d6>
 8008b08:	f1b9 0f00 	cmp.w	r9, #0
 8008b0c:	da05      	bge.n	8008b1a <__ieee754_pow+0x1a2>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	460b      	mov	r3, r1
 8008b12:	2000      	movs	r0, #0
 8008b14:	493d      	ldr	r1, [pc, #244]	@ (8008c0c <__ieee754_pow+0x294>)
 8008b16:	f7f7 feb9 	bl	800088c <__aeabi_ddiv>
 8008b1a:	2d00      	cmp	r5, #0
 8008b1c:	f6bf af49 	bge.w	80089b2 <__ieee754_pow+0x3a>
 8008b20:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8008b24:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8008b28:	ea58 0804 	orrs.w	r8, r8, r4
 8008b2c:	d108      	bne.n	8008b40 <__ieee754_pow+0x1c8>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	460b      	mov	r3, r1
 8008b32:	4610      	mov	r0, r2
 8008b34:	4619      	mov	r1, r3
 8008b36:	f7f7 fbc7 	bl	80002c8 <__aeabi_dsub>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	e794      	b.n	8008a6a <__ieee754_pow+0xf2>
 8008b40:	2c01      	cmp	r4, #1
 8008b42:	f47f af36 	bne.w	80089b2 <__ieee754_pow+0x3a>
 8008b46:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	e731      	b.n	80089b2 <__ieee754_pow+0x3a>
 8008b4e:	0feb      	lsrs	r3, r5, #31
 8008b50:	3b01      	subs	r3, #1
 8008b52:	ea53 0204 	orrs.w	r2, r3, r4
 8008b56:	d102      	bne.n	8008b5e <__ieee754_pow+0x1e6>
 8008b58:	4632      	mov	r2, r6
 8008b5a:	463b      	mov	r3, r7
 8008b5c:	e7e9      	b.n	8008b32 <__ieee754_pow+0x1ba>
 8008b5e:	3c01      	subs	r4, #1
 8008b60:	431c      	orrs	r4, r3
 8008b62:	d016      	beq.n	8008b92 <__ieee754_pow+0x21a>
 8008b64:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8008bf0 <__ieee754_pow+0x278>
 8008b68:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8008b6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008b70:	f240 8112 	bls.w	8008d98 <__ieee754_pow+0x420>
 8008b74:	4b28      	ldr	r3, [pc, #160]	@ (8008c18 <__ieee754_pow+0x2a0>)
 8008b76:	459a      	cmp	sl, r3
 8008b78:	4b25      	ldr	r3, [pc, #148]	@ (8008c10 <__ieee754_pow+0x298>)
 8008b7a:	d916      	bls.n	8008baa <__ieee754_pow+0x232>
 8008b7c:	4598      	cmp	r8, r3
 8008b7e:	d80b      	bhi.n	8008b98 <__ieee754_pow+0x220>
 8008b80:	f1b9 0f00 	cmp.w	r9, #0
 8008b84:	da0b      	bge.n	8008b9e <__ieee754_pow+0x226>
 8008b86:	2000      	movs	r0, #0
 8008b88:	b011      	add	sp, #68	@ 0x44
 8008b8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b8e:	f000 bc6b 	b.w	8009468 <__math_oflow>
 8008b92:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8008bf8 <__ieee754_pow+0x280>
 8008b96:	e7e7      	b.n	8008b68 <__ieee754_pow+0x1f0>
 8008b98:	f1b9 0f00 	cmp.w	r9, #0
 8008b9c:	dcf3      	bgt.n	8008b86 <__ieee754_pow+0x20e>
 8008b9e:	2000      	movs	r0, #0
 8008ba0:	b011      	add	sp, #68	@ 0x44
 8008ba2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba6:	f000 bc57 	b.w	8009458 <__math_uflow>
 8008baa:	4598      	cmp	r8, r3
 8008bac:	d20c      	bcs.n	8008bc8 <__ieee754_pow+0x250>
 8008bae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	f7f7 ffb1 	bl	8000b1c <__aeabi_dcmplt>
 8008bba:	3800      	subs	r0, #0
 8008bbc:	bf18      	it	ne
 8008bbe:	2001      	movne	r0, #1
 8008bc0:	f1b9 0f00 	cmp.w	r9, #0
 8008bc4:	daec      	bge.n	8008ba0 <__ieee754_pow+0x228>
 8008bc6:	e7df      	b.n	8008b88 <__ieee754_pow+0x210>
 8008bc8:	4b10      	ldr	r3, [pc, #64]	@ (8008c0c <__ieee754_pow+0x294>)
 8008bca:	4598      	cmp	r8, r3
 8008bcc:	f04f 0200 	mov.w	r2, #0
 8008bd0:	d924      	bls.n	8008c1c <__ieee754_pow+0x2a4>
 8008bd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	f7f7 ffa0 	bl	8000b1c <__aeabi_dcmplt>
 8008bdc:	3800      	subs	r0, #0
 8008bde:	bf18      	it	ne
 8008be0:	2001      	movne	r0, #1
 8008be2:	f1b9 0f00 	cmp.w	r9, #0
 8008be6:	dccf      	bgt.n	8008b88 <__ieee754_pow+0x210>
 8008be8:	e7da      	b.n	8008ba0 <__ieee754_pow+0x228>
 8008bea:	bf00      	nop
 8008bec:	f3af 8000 	nop.w
 8008bf0:	00000000 	.word	0x00000000
 8008bf4:	3ff00000 	.word	0x3ff00000
 8008bf8:	00000000 	.word	0x00000000
 8008bfc:	bff00000 	.word	0xbff00000
 8008c00:	fff00000 	.word	0xfff00000
 8008c04:	7ff00000 	.word	0x7ff00000
 8008c08:	433fffff 	.word	0x433fffff
 8008c0c:	3ff00000 	.word	0x3ff00000
 8008c10:	3fefffff 	.word	0x3fefffff
 8008c14:	3fe00000 	.word	0x3fe00000
 8008c18:	43f00000 	.word	0x43f00000
 8008c1c:	4b5a      	ldr	r3, [pc, #360]	@ (8008d88 <__ieee754_pow+0x410>)
 8008c1e:	f7f7 fb53 	bl	80002c8 <__aeabi_dsub>
 8008c22:	a351      	add	r3, pc, #324	@ (adr r3, 8008d68 <__ieee754_pow+0x3f0>)
 8008c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c28:	4604      	mov	r4, r0
 8008c2a:	460d      	mov	r5, r1
 8008c2c:	f7f7 fd04 	bl	8000638 <__aeabi_dmul>
 8008c30:	a34f      	add	r3, pc, #316	@ (adr r3, 8008d70 <__ieee754_pow+0x3f8>)
 8008c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c36:	4606      	mov	r6, r0
 8008c38:	460f      	mov	r7, r1
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	4629      	mov	r1, r5
 8008c3e:	f7f7 fcfb 	bl	8000638 <__aeabi_dmul>
 8008c42:	4b52      	ldr	r3, [pc, #328]	@ (8008d8c <__ieee754_pow+0x414>)
 8008c44:	4682      	mov	sl, r0
 8008c46:	468b      	mov	fp, r1
 8008c48:	2200      	movs	r2, #0
 8008c4a:	4620      	mov	r0, r4
 8008c4c:	4629      	mov	r1, r5
 8008c4e:	f7f7 fcf3 	bl	8000638 <__aeabi_dmul>
 8008c52:	4602      	mov	r2, r0
 8008c54:	460b      	mov	r3, r1
 8008c56:	a148      	add	r1, pc, #288	@ (adr r1, 8008d78 <__ieee754_pow+0x400>)
 8008c58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c5c:	f7f7 fb34 	bl	80002c8 <__aeabi_dsub>
 8008c60:	4622      	mov	r2, r4
 8008c62:	462b      	mov	r3, r5
 8008c64:	f7f7 fce8 	bl	8000638 <__aeabi_dmul>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	2000      	movs	r0, #0
 8008c6e:	4948      	ldr	r1, [pc, #288]	@ (8008d90 <__ieee754_pow+0x418>)
 8008c70:	f7f7 fb2a 	bl	80002c8 <__aeabi_dsub>
 8008c74:	4622      	mov	r2, r4
 8008c76:	4680      	mov	r8, r0
 8008c78:	4689      	mov	r9, r1
 8008c7a:	462b      	mov	r3, r5
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	4629      	mov	r1, r5
 8008c80:	f7f7 fcda 	bl	8000638 <__aeabi_dmul>
 8008c84:	4602      	mov	r2, r0
 8008c86:	460b      	mov	r3, r1
 8008c88:	4640      	mov	r0, r8
 8008c8a:	4649      	mov	r1, r9
 8008c8c:	f7f7 fcd4 	bl	8000638 <__aeabi_dmul>
 8008c90:	a33b      	add	r3, pc, #236	@ (adr r3, 8008d80 <__ieee754_pow+0x408>)
 8008c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c96:	f7f7 fccf 	bl	8000638 <__aeabi_dmul>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	4650      	mov	r0, sl
 8008ca0:	4659      	mov	r1, fp
 8008ca2:	f7f7 fb11 	bl	80002c8 <__aeabi_dsub>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	460b      	mov	r3, r1
 8008caa:	4680      	mov	r8, r0
 8008cac:	4689      	mov	r9, r1
 8008cae:	4630      	mov	r0, r6
 8008cb0:	4639      	mov	r1, r7
 8008cb2:	f7f7 fb0b 	bl	80002cc <__adddf3>
 8008cb6:	2400      	movs	r4, #0
 8008cb8:	4632      	mov	r2, r6
 8008cba:	463b      	mov	r3, r7
 8008cbc:	4620      	mov	r0, r4
 8008cbe:	460d      	mov	r5, r1
 8008cc0:	f7f7 fb02 	bl	80002c8 <__aeabi_dsub>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	4640      	mov	r0, r8
 8008cca:	4649      	mov	r1, r9
 8008ccc:	f7f7 fafc 	bl	80002c8 <__aeabi_dsub>
 8008cd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cd4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008cd8:	2300      	movs	r3, #0
 8008cda:	9304      	str	r3, [sp, #16]
 8008cdc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008ce0:	4606      	mov	r6, r0
 8008ce2:	460f      	mov	r7, r1
 8008ce4:	4652      	mov	r2, sl
 8008ce6:	465b      	mov	r3, fp
 8008ce8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008cec:	f7f7 faec 	bl	80002c8 <__aeabi_dsub>
 8008cf0:	4622      	mov	r2, r4
 8008cf2:	462b      	mov	r3, r5
 8008cf4:	f7f7 fca0 	bl	8000638 <__aeabi_dmul>
 8008cf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cfc:	4680      	mov	r8, r0
 8008cfe:	4689      	mov	r9, r1
 8008d00:	4630      	mov	r0, r6
 8008d02:	4639      	mov	r1, r7
 8008d04:	f7f7 fc98 	bl	8000638 <__aeabi_dmul>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	460b      	mov	r3, r1
 8008d0c:	4640      	mov	r0, r8
 8008d0e:	4649      	mov	r1, r9
 8008d10:	f7f7 fadc 	bl	80002cc <__adddf3>
 8008d14:	4652      	mov	r2, sl
 8008d16:	465b      	mov	r3, fp
 8008d18:	4606      	mov	r6, r0
 8008d1a:	460f      	mov	r7, r1
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	4629      	mov	r1, r5
 8008d20:	f7f7 fc8a 	bl	8000638 <__aeabi_dmul>
 8008d24:	460b      	mov	r3, r1
 8008d26:	4602      	mov	r2, r0
 8008d28:	4680      	mov	r8, r0
 8008d2a:	4689      	mov	r9, r1
 8008d2c:	4630      	mov	r0, r6
 8008d2e:	4639      	mov	r1, r7
 8008d30:	f7f7 facc 	bl	80002cc <__adddf3>
 8008d34:	4b17      	ldr	r3, [pc, #92]	@ (8008d94 <__ieee754_pow+0x41c>)
 8008d36:	4299      	cmp	r1, r3
 8008d38:	4604      	mov	r4, r0
 8008d3a:	460d      	mov	r5, r1
 8008d3c:	468a      	mov	sl, r1
 8008d3e:	468b      	mov	fp, r1
 8008d40:	f340 82ef 	ble.w	8009322 <__ieee754_pow+0x9aa>
 8008d44:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8008d48:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8008d4c:	4303      	orrs	r3, r0
 8008d4e:	f000 81e8 	beq.w	8009122 <__ieee754_pow+0x7aa>
 8008d52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d56:	2200      	movs	r2, #0
 8008d58:	2300      	movs	r3, #0
 8008d5a:	f7f7 fedf 	bl	8000b1c <__aeabi_dcmplt>
 8008d5e:	3800      	subs	r0, #0
 8008d60:	bf18      	it	ne
 8008d62:	2001      	movne	r0, #1
 8008d64:	e710      	b.n	8008b88 <__ieee754_pow+0x210>
 8008d66:	bf00      	nop
 8008d68:	60000000 	.word	0x60000000
 8008d6c:	3ff71547 	.word	0x3ff71547
 8008d70:	f85ddf44 	.word	0xf85ddf44
 8008d74:	3e54ae0b 	.word	0x3e54ae0b
 8008d78:	55555555 	.word	0x55555555
 8008d7c:	3fd55555 	.word	0x3fd55555
 8008d80:	652b82fe 	.word	0x652b82fe
 8008d84:	3ff71547 	.word	0x3ff71547
 8008d88:	3ff00000 	.word	0x3ff00000
 8008d8c:	3fd00000 	.word	0x3fd00000
 8008d90:	3fe00000 	.word	0x3fe00000
 8008d94:	408fffff 	.word	0x408fffff
 8008d98:	4bd5      	ldr	r3, [pc, #852]	@ (80090f0 <__ieee754_pow+0x778>)
 8008d9a:	402b      	ands	r3, r5
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	b92b      	cbnz	r3, 8008dac <__ieee754_pow+0x434>
 8008da0:	4bd4      	ldr	r3, [pc, #848]	@ (80090f4 <__ieee754_pow+0x77c>)
 8008da2:	f7f7 fc49 	bl	8000638 <__aeabi_dmul>
 8008da6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8008daa:	468b      	mov	fp, r1
 8008dac:	ea4f 532b 	mov.w	r3, fp, asr #20
 8008db0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8008db4:	4413      	add	r3, r2
 8008db6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008db8:	4bcf      	ldr	r3, [pc, #828]	@ (80090f8 <__ieee754_pow+0x780>)
 8008dba:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8008dbe:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8008dc2:	459b      	cmp	fp, r3
 8008dc4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008dc8:	dd08      	ble.n	8008ddc <__ieee754_pow+0x464>
 8008dca:	4bcc      	ldr	r3, [pc, #816]	@ (80090fc <__ieee754_pow+0x784>)
 8008dcc:	459b      	cmp	fp, r3
 8008dce:	f340 81a5 	ble.w	800911c <__ieee754_pow+0x7a4>
 8008dd2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008dd8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8008ddc:	f04f 0a00 	mov.w	sl, #0
 8008de0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8008de4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008de6:	4bc6      	ldr	r3, [pc, #792]	@ (8009100 <__ieee754_pow+0x788>)
 8008de8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008dec:	ed93 7b00 	vldr	d7, [r3]
 8008df0:	4629      	mov	r1, r5
 8008df2:	ec53 2b17 	vmov	r2, r3, d7
 8008df6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008dfa:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008dfe:	f7f7 fa63 	bl	80002c8 <__aeabi_dsub>
 8008e02:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008e06:	4606      	mov	r6, r0
 8008e08:	460f      	mov	r7, r1
 8008e0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e0e:	f7f7 fa5d 	bl	80002cc <__adddf3>
 8008e12:	4602      	mov	r2, r0
 8008e14:	460b      	mov	r3, r1
 8008e16:	2000      	movs	r0, #0
 8008e18:	49ba      	ldr	r1, [pc, #744]	@ (8009104 <__ieee754_pow+0x78c>)
 8008e1a:	f7f7 fd37 	bl	800088c <__aeabi_ddiv>
 8008e1e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8008e22:	4602      	mov	r2, r0
 8008e24:	460b      	mov	r3, r1
 8008e26:	4630      	mov	r0, r6
 8008e28:	4639      	mov	r1, r7
 8008e2a:	f7f7 fc05 	bl	8000638 <__aeabi_dmul>
 8008e2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e32:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8008e36:	106d      	asrs	r5, r5, #1
 8008e38:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8008e3c:	f04f 0b00 	mov.w	fp, #0
 8008e40:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8008e44:	4661      	mov	r1, ip
 8008e46:	2200      	movs	r2, #0
 8008e48:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8008e4c:	4658      	mov	r0, fp
 8008e4e:	46e1      	mov	r9, ip
 8008e50:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8008e54:	4614      	mov	r4, r2
 8008e56:	461d      	mov	r5, r3
 8008e58:	f7f7 fbee 	bl	8000638 <__aeabi_dmul>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	460b      	mov	r3, r1
 8008e60:	4630      	mov	r0, r6
 8008e62:	4639      	mov	r1, r7
 8008e64:	f7f7 fa30 	bl	80002c8 <__aeabi_dsub>
 8008e68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e6c:	4606      	mov	r6, r0
 8008e6e:	460f      	mov	r7, r1
 8008e70:	4620      	mov	r0, r4
 8008e72:	4629      	mov	r1, r5
 8008e74:	f7f7 fa28 	bl	80002c8 <__aeabi_dsub>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008e80:	f7f7 fa22 	bl	80002c8 <__aeabi_dsub>
 8008e84:	465a      	mov	r2, fp
 8008e86:	464b      	mov	r3, r9
 8008e88:	f7f7 fbd6 	bl	8000638 <__aeabi_dmul>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	460b      	mov	r3, r1
 8008e90:	4630      	mov	r0, r6
 8008e92:	4639      	mov	r1, r7
 8008e94:	f7f7 fa18 	bl	80002c8 <__aeabi_dsub>
 8008e98:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008e9c:	f7f7 fbcc 	bl	8000638 <__aeabi_dmul>
 8008ea0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ea4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008ea8:	4610      	mov	r0, r2
 8008eaa:	4619      	mov	r1, r3
 8008eac:	f7f7 fbc4 	bl	8000638 <__aeabi_dmul>
 8008eb0:	a37d      	add	r3, pc, #500	@ (adr r3, 80090a8 <__ieee754_pow+0x730>)
 8008eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb6:	4604      	mov	r4, r0
 8008eb8:	460d      	mov	r5, r1
 8008eba:	f7f7 fbbd 	bl	8000638 <__aeabi_dmul>
 8008ebe:	a37c      	add	r3, pc, #496	@ (adr r3, 80090b0 <__ieee754_pow+0x738>)
 8008ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec4:	f7f7 fa02 	bl	80002cc <__adddf3>
 8008ec8:	4622      	mov	r2, r4
 8008eca:	462b      	mov	r3, r5
 8008ecc:	f7f7 fbb4 	bl	8000638 <__aeabi_dmul>
 8008ed0:	a379      	add	r3, pc, #484	@ (adr r3, 80090b8 <__ieee754_pow+0x740>)
 8008ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed6:	f7f7 f9f9 	bl	80002cc <__adddf3>
 8008eda:	4622      	mov	r2, r4
 8008edc:	462b      	mov	r3, r5
 8008ede:	f7f7 fbab 	bl	8000638 <__aeabi_dmul>
 8008ee2:	a377      	add	r3, pc, #476	@ (adr r3, 80090c0 <__ieee754_pow+0x748>)
 8008ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee8:	f7f7 f9f0 	bl	80002cc <__adddf3>
 8008eec:	4622      	mov	r2, r4
 8008eee:	462b      	mov	r3, r5
 8008ef0:	f7f7 fba2 	bl	8000638 <__aeabi_dmul>
 8008ef4:	a374      	add	r3, pc, #464	@ (adr r3, 80090c8 <__ieee754_pow+0x750>)
 8008ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efa:	f7f7 f9e7 	bl	80002cc <__adddf3>
 8008efe:	4622      	mov	r2, r4
 8008f00:	462b      	mov	r3, r5
 8008f02:	f7f7 fb99 	bl	8000638 <__aeabi_dmul>
 8008f06:	a372      	add	r3, pc, #456	@ (adr r3, 80090d0 <__ieee754_pow+0x758>)
 8008f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0c:	f7f7 f9de 	bl	80002cc <__adddf3>
 8008f10:	4622      	mov	r2, r4
 8008f12:	4606      	mov	r6, r0
 8008f14:	460f      	mov	r7, r1
 8008f16:	462b      	mov	r3, r5
 8008f18:	4620      	mov	r0, r4
 8008f1a:	4629      	mov	r1, r5
 8008f1c:	f7f7 fb8c 	bl	8000638 <__aeabi_dmul>
 8008f20:	4602      	mov	r2, r0
 8008f22:	460b      	mov	r3, r1
 8008f24:	4630      	mov	r0, r6
 8008f26:	4639      	mov	r1, r7
 8008f28:	f7f7 fb86 	bl	8000638 <__aeabi_dmul>
 8008f2c:	465a      	mov	r2, fp
 8008f2e:	4604      	mov	r4, r0
 8008f30:	460d      	mov	r5, r1
 8008f32:	464b      	mov	r3, r9
 8008f34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f38:	f7f7 f9c8 	bl	80002cc <__adddf3>
 8008f3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f40:	f7f7 fb7a 	bl	8000638 <__aeabi_dmul>
 8008f44:	4622      	mov	r2, r4
 8008f46:	462b      	mov	r3, r5
 8008f48:	f7f7 f9c0 	bl	80002cc <__adddf3>
 8008f4c:	465a      	mov	r2, fp
 8008f4e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008f52:	464b      	mov	r3, r9
 8008f54:	4658      	mov	r0, fp
 8008f56:	4649      	mov	r1, r9
 8008f58:	f7f7 fb6e 	bl	8000638 <__aeabi_dmul>
 8008f5c:	4b6a      	ldr	r3, [pc, #424]	@ (8009108 <__ieee754_pow+0x790>)
 8008f5e:	2200      	movs	r2, #0
 8008f60:	4606      	mov	r6, r0
 8008f62:	460f      	mov	r7, r1
 8008f64:	f7f7 f9b2 	bl	80002cc <__adddf3>
 8008f68:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008f6c:	f7f7 f9ae 	bl	80002cc <__adddf3>
 8008f70:	46d8      	mov	r8, fp
 8008f72:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8008f76:	460d      	mov	r5, r1
 8008f78:	465a      	mov	r2, fp
 8008f7a:	460b      	mov	r3, r1
 8008f7c:	4640      	mov	r0, r8
 8008f7e:	4649      	mov	r1, r9
 8008f80:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8008f84:	f7f7 fb58 	bl	8000638 <__aeabi_dmul>
 8008f88:	465c      	mov	r4, fp
 8008f8a:	4680      	mov	r8, r0
 8008f8c:	4689      	mov	r9, r1
 8008f8e:	4b5e      	ldr	r3, [pc, #376]	@ (8009108 <__ieee754_pow+0x790>)
 8008f90:	2200      	movs	r2, #0
 8008f92:	4620      	mov	r0, r4
 8008f94:	4629      	mov	r1, r5
 8008f96:	f7f7 f997 	bl	80002c8 <__aeabi_dsub>
 8008f9a:	4632      	mov	r2, r6
 8008f9c:	463b      	mov	r3, r7
 8008f9e:	f7f7 f993 	bl	80002c8 <__aeabi_dsub>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008faa:	f7f7 f98d 	bl	80002c8 <__aeabi_dsub>
 8008fae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fb2:	f7f7 fb41 	bl	8000638 <__aeabi_dmul>
 8008fb6:	4622      	mov	r2, r4
 8008fb8:	4606      	mov	r6, r0
 8008fba:	460f      	mov	r7, r1
 8008fbc:	462b      	mov	r3, r5
 8008fbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008fc2:	f7f7 fb39 	bl	8000638 <__aeabi_dmul>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	460b      	mov	r3, r1
 8008fca:	4630      	mov	r0, r6
 8008fcc:	4639      	mov	r1, r7
 8008fce:	f7f7 f97d 	bl	80002cc <__adddf3>
 8008fd2:	4606      	mov	r6, r0
 8008fd4:	460f      	mov	r7, r1
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	460b      	mov	r3, r1
 8008fda:	4640      	mov	r0, r8
 8008fdc:	4649      	mov	r1, r9
 8008fde:	f7f7 f975 	bl	80002cc <__adddf3>
 8008fe2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8008fe6:	a33c      	add	r3, pc, #240	@ (adr r3, 80090d8 <__ieee754_pow+0x760>)
 8008fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fec:	4658      	mov	r0, fp
 8008fee:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8008ff2:	460d      	mov	r5, r1
 8008ff4:	f7f7 fb20 	bl	8000638 <__aeabi_dmul>
 8008ff8:	465c      	mov	r4, fp
 8008ffa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ffe:	4642      	mov	r2, r8
 8009000:	464b      	mov	r3, r9
 8009002:	4620      	mov	r0, r4
 8009004:	4629      	mov	r1, r5
 8009006:	f7f7 f95f 	bl	80002c8 <__aeabi_dsub>
 800900a:	4602      	mov	r2, r0
 800900c:	460b      	mov	r3, r1
 800900e:	4630      	mov	r0, r6
 8009010:	4639      	mov	r1, r7
 8009012:	f7f7 f959 	bl	80002c8 <__aeabi_dsub>
 8009016:	a332      	add	r3, pc, #200	@ (adr r3, 80090e0 <__ieee754_pow+0x768>)
 8009018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901c:	f7f7 fb0c 	bl	8000638 <__aeabi_dmul>
 8009020:	a331      	add	r3, pc, #196	@ (adr r3, 80090e8 <__ieee754_pow+0x770>)
 8009022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009026:	4606      	mov	r6, r0
 8009028:	460f      	mov	r7, r1
 800902a:	4620      	mov	r0, r4
 800902c:	4629      	mov	r1, r5
 800902e:	f7f7 fb03 	bl	8000638 <__aeabi_dmul>
 8009032:	4602      	mov	r2, r0
 8009034:	460b      	mov	r3, r1
 8009036:	4630      	mov	r0, r6
 8009038:	4639      	mov	r1, r7
 800903a:	f7f7 f947 	bl	80002cc <__adddf3>
 800903e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009040:	4b32      	ldr	r3, [pc, #200]	@ (800910c <__ieee754_pow+0x794>)
 8009042:	4413      	add	r3, r2
 8009044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009048:	f7f7 f940 	bl	80002cc <__adddf3>
 800904c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009050:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009052:	f7f7 fa87 	bl	8000564 <__aeabi_i2d>
 8009056:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009058:	4b2d      	ldr	r3, [pc, #180]	@ (8009110 <__ieee754_pow+0x798>)
 800905a:	4413      	add	r3, r2
 800905c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009060:	4606      	mov	r6, r0
 8009062:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009066:	460f      	mov	r7, r1
 8009068:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800906c:	f7f7 f92e 	bl	80002cc <__adddf3>
 8009070:	4642      	mov	r2, r8
 8009072:	464b      	mov	r3, r9
 8009074:	f7f7 f92a 	bl	80002cc <__adddf3>
 8009078:	4632      	mov	r2, r6
 800907a:	463b      	mov	r3, r7
 800907c:	f7f7 f926 	bl	80002cc <__adddf3>
 8009080:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8009084:	4632      	mov	r2, r6
 8009086:	463b      	mov	r3, r7
 8009088:	4658      	mov	r0, fp
 800908a:	460d      	mov	r5, r1
 800908c:	f7f7 f91c 	bl	80002c8 <__aeabi_dsub>
 8009090:	4642      	mov	r2, r8
 8009092:	464b      	mov	r3, r9
 8009094:	f7f7 f918 	bl	80002c8 <__aeabi_dsub>
 8009098:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800909c:	f7f7 f914 	bl	80002c8 <__aeabi_dsub>
 80090a0:	465c      	mov	r4, fp
 80090a2:	4602      	mov	r2, r0
 80090a4:	e036      	b.n	8009114 <__ieee754_pow+0x79c>
 80090a6:	bf00      	nop
 80090a8:	4a454eef 	.word	0x4a454eef
 80090ac:	3fca7e28 	.word	0x3fca7e28
 80090b0:	93c9db65 	.word	0x93c9db65
 80090b4:	3fcd864a 	.word	0x3fcd864a
 80090b8:	a91d4101 	.word	0xa91d4101
 80090bc:	3fd17460 	.word	0x3fd17460
 80090c0:	518f264d 	.word	0x518f264d
 80090c4:	3fd55555 	.word	0x3fd55555
 80090c8:	db6fabff 	.word	0xdb6fabff
 80090cc:	3fdb6db6 	.word	0x3fdb6db6
 80090d0:	33333303 	.word	0x33333303
 80090d4:	3fe33333 	.word	0x3fe33333
 80090d8:	e0000000 	.word	0xe0000000
 80090dc:	3feec709 	.word	0x3feec709
 80090e0:	dc3a03fd 	.word	0xdc3a03fd
 80090e4:	3feec709 	.word	0x3feec709
 80090e8:	145b01f5 	.word	0x145b01f5
 80090ec:	be3e2fe0 	.word	0xbe3e2fe0
 80090f0:	7ff00000 	.word	0x7ff00000
 80090f4:	43400000 	.word	0x43400000
 80090f8:	0003988e 	.word	0x0003988e
 80090fc:	000bb679 	.word	0x000bb679
 8009100:	08009c60 	.word	0x08009c60
 8009104:	3ff00000 	.word	0x3ff00000
 8009108:	40080000 	.word	0x40080000
 800910c:	08009c40 	.word	0x08009c40
 8009110:	08009c50 	.word	0x08009c50
 8009114:	460b      	mov	r3, r1
 8009116:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800911a:	e5d7      	b.n	8008ccc <__ieee754_pow+0x354>
 800911c:	f04f 0a01 	mov.w	sl, #1
 8009120:	e65e      	b.n	8008de0 <__ieee754_pow+0x468>
 8009122:	a3b4      	add	r3, pc, #720	@ (adr r3, 80093f4 <__ieee754_pow+0xa7c>)
 8009124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009128:	4630      	mov	r0, r6
 800912a:	4639      	mov	r1, r7
 800912c:	f7f7 f8ce 	bl	80002cc <__adddf3>
 8009130:	4642      	mov	r2, r8
 8009132:	e9cd 0100 	strd	r0, r1, [sp]
 8009136:	464b      	mov	r3, r9
 8009138:	4620      	mov	r0, r4
 800913a:	4629      	mov	r1, r5
 800913c:	f7f7 f8c4 	bl	80002c8 <__aeabi_dsub>
 8009140:	4602      	mov	r2, r0
 8009142:	460b      	mov	r3, r1
 8009144:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009148:	f7f7 fd06 	bl	8000b58 <__aeabi_dcmpgt>
 800914c:	2800      	cmp	r0, #0
 800914e:	f47f ae00 	bne.w	8008d52 <__ieee754_pow+0x3da>
 8009152:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8009156:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800915a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800915e:	fa43 fa0a 	asr.w	sl, r3, sl
 8009162:	44da      	add	sl, fp
 8009164:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009168:	489d      	ldr	r0, [pc, #628]	@ (80093e0 <__ieee754_pow+0xa68>)
 800916a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800916e:	4108      	asrs	r0, r1
 8009170:	ea00 030a 	and.w	r3, r0, sl
 8009174:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8009178:	f1c1 0114 	rsb	r1, r1, #20
 800917c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8009180:	fa4a fa01 	asr.w	sl, sl, r1
 8009184:	f1bb 0f00 	cmp.w	fp, #0
 8009188:	4640      	mov	r0, r8
 800918a:	4649      	mov	r1, r9
 800918c:	f04f 0200 	mov.w	r2, #0
 8009190:	bfb8      	it	lt
 8009192:	f1ca 0a00 	rsblt	sl, sl, #0
 8009196:	f7f7 f897 	bl	80002c8 <__aeabi_dsub>
 800919a:	4680      	mov	r8, r0
 800919c:	4689      	mov	r9, r1
 800919e:	4632      	mov	r2, r6
 80091a0:	463b      	mov	r3, r7
 80091a2:	4640      	mov	r0, r8
 80091a4:	4649      	mov	r1, r9
 80091a6:	f7f7 f891 	bl	80002cc <__adddf3>
 80091aa:	2400      	movs	r4, #0
 80091ac:	a37c      	add	r3, pc, #496	@ (adr r3, 80093a0 <__ieee754_pow+0xa28>)
 80091ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b2:	4620      	mov	r0, r4
 80091b4:	460d      	mov	r5, r1
 80091b6:	f7f7 fa3f 	bl	8000638 <__aeabi_dmul>
 80091ba:	4642      	mov	r2, r8
 80091bc:	e9cd 0100 	strd	r0, r1, [sp]
 80091c0:	464b      	mov	r3, r9
 80091c2:	4620      	mov	r0, r4
 80091c4:	4629      	mov	r1, r5
 80091c6:	f7f7 f87f 	bl	80002c8 <__aeabi_dsub>
 80091ca:	4602      	mov	r2, r0
 80091cc:	460b      	mov	r3, r1
 80091ce:	4630      	mov	r0, r6
 80091d0:	4639      	mov	r1, r7
 80091d2:	f7f7 f879 	bl	80002c8 <__aeabi_dsub>
 80091d6:	a374      	add	r3, pc, #464	@ (adr r3, 80093a8 <__ieee754_pow+0xa30>)
 80091d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091dc:	f7f7 fa2c 	bl	8000638 <__aeabi_dmul>
 80091e0:	a373      	add	r3, pc, #460	@ (adr r3, 80093b0 <__ieee754_pow+0xa38>)
 80091e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e6:	4680      	mov	r8, r0
 80091e8:	4689      	mov	r9, r1
 80091ea:	4620      	mov	r0, r4
 80091ec:	4629      	mov	r1, r5
 80091ee:	f7f7 fa23 	bl	8000638 <__aeabi_dmul>
 80091f2:	4602      	mov	r2, r0
 80091f4:	460b      	mov	r3, r1
 80091f6:	4640      	mov	r0, r8
 80091f8:	4649      	mov	r1, r9
 80091fa:	f7f7 f867 	bl	80002cc <__adddf3>
 80091fe:	4604      	mov	r4, r0
 8009200:	460d      	mov	r5, r1
 8009202:	4602      	mov	r2, r0
 8009204:	460b      	mov	r3, r1
 8009206:	e9dd 0100 	ldrd	r0, r1, [sp]
 800920a:	f7f7 f85f 	bl	80002cc <__adddf3>
 800920e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009212:	4680      	mov	r8, r0
 8009214:	4689      	mov	r9, r1
 8009216:	f7f7 f857 	bl	80002c8 <__aeabi_dsub>
 800921a:	4602      	mov	r2, r0
 800921c:	460b      	mov	r3, r1
 800921e:	4620      	mov	r0, r4
 8009220:	4629      	mov	r1, r5
 8009222:	f7f7 f851 	bl	80002c8 <__aeabi_dsub>
 8009226:	4642      	mov	r2, r8
 8009228:	4606      	mov	r6, r0
 800922a:	460f      	mov	r7, r1
 800922c:	464b      	mov	r3, r9
 800922e:	4640      	mov	r0, r8
 8009230:	4649      	mov	r1, r9
 8009232:	f7f7 fa01 	bl	8000638 <__aeabi_dmul>
 8009236:	a360      	add	r3, pc, #384	@ (adr r3, 80093b8 <__ieee754_pow+0xa40>)
 8009238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923c:	4604      	mov	r4, r0
 800923e:	460d      	mov	r5, r1
 8009240:	f7f7 f9fa 	bl	8000638 <__aeabi_dmul>
 8009244:	a35e      	add	r3, pc, #376	@ (adr r3, 80093c0 <__ieee754_pow+0xa48>)
 8009246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924a:	f7f7 f83d 	bl	80002c8 <__aeabi_dsub>
 800924e:	4622      	mov	r2, r4
 8009250:	462b      	mov	r3, r5
 8009252:	f7f7 f9f1 	bl	8000638 <__aeabi_dmul>
 8009256:	a35c      	add	r3, pc, #368	@ (adr r3, 80093c8 <__ieee754_pow+0xa50>)
 8009258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925c:	f7f7 f836 	bl	80002cc <__adddf3>
 8009260:	4622      	mov	r2, r4
 8009262:	462b      	mov	r3, r5
 8009264:	f7f7 f9e8 	bl	8000638 <__aeabi_dmul>
 8009268:	a359      	add	r3, pc, #356	@ (adr r3, 80093d0 <__ieee754_pow+0xa58>)
 800926a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926e:	f7f7 f82b 	bl	80002c8 <__aeabi_dsub>
 8009272:	4622      	mov	r2, r4
 8009274:	462b      	mov	r3, r5
 8009276:	f7f7 f9df 	bl	8000638 <__aeabi_dmul>
 800927a:	a357      	add	r3, pc, #348	@ (adr r3, 80093d8 <__ieee754_pow+0xa60>)
 800927c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009280:	f7f7 f824 	bl	80002cc <__adddf3>
 8009284:	4622      	mov	r2, r4
 8009286:	462b      	mov	r3, r5
 8009288:	f7f7 f9d6 	bl	8000638 <__aeabi_dmul>
 800928c:	4602      	mov	r2, r0
 800928e:	460b      	mov	r3, r1
 8009290:	4640      	mov	r0, r8
 8009292:	4649      	mov	r1, r9
 8009294:	f7f7 f818 	bl	80002c8 <__aeabi_dsub>
 8009298:	4604      	mov	r4, r0
 800929a:	460d      	mov	r5, r1
 800929c:	4602      	mov	r2, r0
 800929e:	460b      	mov	r3, r1
 80092a0:	4640      	mov	r0, r8
 80092a2:	4649      	mov	r1, r9
 80092a4:	f7f7 f9c8 	bl	8000638 <__aeabi_dmul>
 80092a8:	2200      	movs	r2, #0
 80092aa:	e9cd 0100 	strd	r0, r1, [sp]
 80092ae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80092b2:	4620      	mov	r0, r4
 80092b4:	4629      	mov	r1, r5
 80092b6:	f7f7 f807 	bl	80002c8 <__aeabi_dsub>
 80092ba:	4602      	mov	r2, r0
 80092bc:	460b      	mov	r3, r1
 80092be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092c2:	f7f7 fae3 	bl	800088c <__aeabi_ddiv>
 80092c6:	4632      	mov	r2, r6
 80092c8:	4604      	mov	r4, r0
 80092ca:	460d      	mov	r5, r1
 80092cc:	463b      	mov	r3, r7
 80092ce:	4640      	mov	r0, r8
 80092d0:	4649      	mov	r1, r9
 80092d2:	f7f7 f9b1 	bl	8000638 <__aeabi_dmul>
 80092d6:	4632      	mov	r2, r6
 80092d8:	463b      	mov	r3, r7
 80092da:	f7f6 fff7 	bl	80002cc <__adddf3>
 80092de:	4602      	mov	r2, r0
 80092e0:	460b      	mov	r3, r1
 80092e2:	4620      	mov	r0, r4
 80092e4:	4629      	mov	r1, r5
 80092e6:	f7f6 ffef 	bl	80002c8 <__aeabi_dsub>
 80092ea:	4642      	mov	r2, r8
 80092ec:	464b      	mov	r3, r9
 80092ee:	f7f6 ffeb 	bl	80002c8 <__aeabi_dsub>
 80092f2:	460b      	mov	r3, r1
 80092f4:	4602      	mov	r2, r0
 80092f6:	493b      	ldr	r1, [pc, #236]	@ (80093e4 <__ieee754_pow+0xa6c>)
 80092f8:	2000      	movs	r0, #0
 80092fa:	f7f6 ffe5 	bl	80002c8 <__aeabi_dsub>
 80092fe:	ec41 0b10 	vmov	d0, r0, r1
 8009302:	ee10 3a90 	vmov	r3, s1
 8009306:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800930a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800930e:	da30      	bge.n	8009372 <__ieee754_pow+0x9fa>
 8009310:	4650      	mov	r0, sl
 8009312:	f000 f8b9 	bl	8009488 <scalbn>
 8009316:	ec51 0b10 	vmov	r0, r1, d0
 800931a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800931e:	f7ff bbd2 	b.w	8008ac6 <__ieee754_pow+0x14e>
 8009322:	4c31      	ldr	r4, [pc, #196]	@ (80093e8 <__ieee754_pow+0xa70>)
 8009324:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009328:	42a3      	cmp	r3, r4
 800932a:	d91a      	bls.n	8009362 <__ieee754_pow+0x9ea>
 800932c:	4b2f      	ldr	r3, [pc, #188]	@ (80093ec <__ieee754_pow+0xa74>)
 800932e:	440b      	add	r3, r1
 8009330:	4303      	orrs	r3, r0
 8009332:	d009      	beq.n	8009348 <__ieee754_pow+0x9d0>
 8009334:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009338:	2200      	movs	r2, #0
 800933a:	2300      	movs	r3, #0
 800933c:	f7f7 fbee 	bl	8000b1c <__aeabi_dcmplt>
 8009340:	3800      	subs	r0, #0
 8009342:	bf18      	it	ne
 8009344:	2001      	movne	r0, #1
 8009346:	e42b      	b.n	8008ba0 <__ieee754_pow+0x228>
 8009348:	4642      	mov	r2, r8
 800934a:	464b      	mov	r3, r9
 800934c:	f7f6 ffbc 	bl	80002c8 <__aeabi_dsub>
 8009350:	4632      	mov	r2, r6
 8009352:	463b      	mov	r3, r7
 8009354:	f7f7 fbf6 	bl	8000b44 <__aeabi_dcmpge>
 8009358:	2800      	cmp	r0, #0
 800935a:	d1eb      	bne.n	8009334 <__ieee754_pow+0x9bc>
 800935c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80093fc <__ieee754_pow+0xa84>
 8009360:	e6f7      	b.n	8009152 <__ieee754_pow+0x7da>
 8009362:	469a      	mov	sl, r3
 8009364:	4b22      	ldr	r3, [pc, #136]	@ (80093f0 <__ieee754_pow+0xa78>)
 8009366:	459a      	cmp	sl, r3
 8009368:	f63f aef3 	bhi.w	8009152 <__ieee754_pow+0x7da>
 800936c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8009370:	e715      	b.n	800919e <__ieee754_pow+0x826>
 8009372:	ec51 0b10 	vmov	r0, r1, d0
 8009376:	4619      	mov	r1, r3
 8009378:	e7cf      	b.n	800931a <__ieee754_pow+0x9a2>
 800937a:	491a      	ldr	r1, [pc, #104]	@ (80093e4 <__ieee754_pow+0xa6c>)
 800937c:	2000      	movs	r0, #0
 800937e:	f7ff bb18 	b.w	80089b2 <__ieee754_pow+0x3a>
 8009382:	2000      	movs	r0, #0
 8009384:	2100      	movs	r1, #0
 8009386:	f7ff bb14 	b.w	80089b2 <__ieee754_pow+0x3a>
 800938a:	4630      	mov	r0, r6
 800938c:	4639      	mov	r1, r7
 800938e:	f7ff bb10 	b.w	80089b2 <__ieee754_pow+0x3a>
 8009392:	460c      	mov	r4, r1
 8009394:	f7ff bb5e 	b.w	8008a54 <__ieee754_pow+0xdc>
 8009398:	2400      	movs	r4, #0
 800939a:	f7ff bb49 	b.w	8008a30 <__ieee754_pow+0xb8>
 800939e:	bf00      	nop
 80093a0:	00000000 	.word	0x00000000
 80093a4:	3fe62e43 	.word	0x3fe62e43
 80093a8:	fefa39ef 	.word	0xfefa39ef
 80093ac:	3fe62e42 	.word	0x3fe62e42
 80093b0:	0ca86c39 	.word	0x0ca86c39
 80093b4:	be205c61 	.word	0xbe205c61
 80093b8:	72bea4d0 	.word	0x72bea4d0
 80093bc:	3e663769 	.word	0x3e663769
 80093c0:	c5d26bf1 	.word	0xc5d26bf1
 80093c4:	3ebbbd41 	.word	0x3ebbbd41
 80093c8:	af25de2c 	.word	0xaf25de2c
 80093cc:	3f11566a 	.word	0x3f11566a
 80093d0:	16bebd93 	.word	0x16bebd93
 80093d4:	3f66c16c 	.word	0x3f66c16c
 80093d8:	5555553e 	.word	0x5555553e
 80093dc:	3fc55555 	.word	0x3fc55555
 80093e0:	fff00000 	.word	0xfff00000
 80093e4:	3ff00000 	.word	0x3ff00000
 80093e8:	4090cbff 	.word	0x4090cbff
 80093ec:	3f6f3400 	.word	0x3f6f3400
 80093f0:	3fe00000 	.word	0x3fe00000
 80093f4:	652b82fe 	.word	0x652b82fe
 80093f8:	3c971547 	.word	0x3c971547
 80093fc:	4090cc00 	.word	0x4090cc00

08009400 <with_errno>:
 8009400:	b510      	push	{r4, lr}
 8009402:	ed2d 8b02 	vpush	{d8}
 8009406:	eeb0 8a40 	vmov.f32	s16, s0
 800940a:	eef0 8a60 	vmov.f32	s17, s1
 800940e:	4604      	mov	r4, r0
 8009410:	f7fd f932 	bl	8006678 <__errno>
 8009414:	eeb0 0a48 	vmov.f32	s0, s16
 8009418:	eef0 0a68 	vmov.f32	s1, s17
 800941c:	ecbd 8b02 	vpop	{d8}
 8009420:	6004      	str	r4, [r0, #0]
 8009422:	bd10      	pop	{r4, pc}

08009424 <xflow>:
 8009424:	4603      	mov	r3, r0
 8009426:	b507      	push	{r0, r1, r2, lr}
 8009428:	ec51 0b10 	vmov	r0, r1, d0
 800942c:	b183      	cbz	r3, 8009450 <xflow+0x2c>
 800942e:	4602      	mov	r2, r0
 8009430:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009434:	e9cd 2300 	strd	r2, r3, [sp]
 8009438:	e9dd 2300 	ldrd	r2, r3, [sp]
 800943c:	f7f7 f8fc 	bl	8000638 <__aeabi_dmul>
 8009440:	ec41 0b10 	vmov	d0, r0, r1
 8009444:	2022      	movs	r0, #34	@ 0x22
 8009446:	b003      	add	sp, #12
 8009448:	f85d eb04 	ldr.w	lr, [sp], #4
 800944c:	f7ff bfd8 	b.w	8009400 <with_errno>
 8009450:	4602      	mov	r2, r0
 8009452:	460b      	mov	r3, r1
 8009454:	e7ee      	b.n	8009434 <xflow+0x10>
	...

08009458 <__math_uflow>:
 8009458:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009460 <__math_uflow+0x8>
 800945c:	f7ff bfe2 	b.w	8009424 <xflow>
 8009460:	00000000 	.word	0x00000000
 8009464:	10000000 	.word	0x10000000

08009468 <__math_oflow>:
 8009468:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009470 <__math_oflow+0x8>
 800946c:	f7ff bfda 	b.w	8009424 <xflow>
 8009470:	00000000 	.word	0x00000000
 8009474:	70000000 	.word	0x70000000

08009478 <fabs>:
 8009478:	ec51 0b10 	vmov	r0, r1, d0
 800947c:	4602      	mov	r2, r0
 800947e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009482:	ec43 2b10 	vmov	d0, r2, r3
 8009486:	4770      	bx	lr

08009488 <scalbn>:
 8009488:	b570      	push	{r4, r5, r6, lr}
 800948a:	ec55 4b10 	vmov	r4, r5, d0
 800948e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8009492:	4606      	mov	r6, r0
 8009494:	462b      	mov	r3, r5
 8009496:	b991      	cbnz	r1, 80094be <scalbn+0x36>
 8009498:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800949c:	4323      	orrs	r3, r4
 800949e:	d03d      	beq.n	800951c <scalbn+0x94>
 80094a0:	4b35      	ldr	r3, [pc, #212]	@ (8009578 <scalbn+0xf0>)
 80094a2:	4620      	mov	r0, r4
 80094a4:	4629      	mov	r1, r5
 80094a6:	2200      	movs	r2, #0
 80094a8:	f7f7 f8c6 	bl	8000638 <__aeabi_dmul>
 80094ac:	4b33      	ldr	r3, [pc, #204]	@ (800957c <scalbn+0xf4>)
 80094ae:	429e      	cmp	r6, r3
 80094b0:	4604      	mov	r4, r0
 80094b2:	460d      	mov	r5, r1
 80094b4:	da0f      	bge.n	80094d6 <scalbn+0x4e>
 80094b6:	a328      	add	r3, pc, #160	@ (adr r3, 8009558 <scalbn+0xd0>)
 80094b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094bc:	e01e      	b.n	80094fc <scalbn+0x74>
 80094be:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80094c2:	4291      	cmp	r1, r2
 80094c4:	d10b      	bne.n	80094de <scalbn+0x56>
 80094c6:	4622      	mov	r2, r4
 80094c8:	4620      	mov	r0, r4
 80094ca:	4629      	mov	r1, r5
 80094cc:	f7f6 fefe 	bl	80002cc <__adddf3>
 80094d0:	4604      	mov	r4, r0
 80094d2:	460d      	mov	r5, r1
 80094d4:	e022      	b.n	800951c <scalbn+0x94>
 80094d6:	460b      	mov	r3, r1
 80094d8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80094dc:	3936      	subs	r1, #54	@ 0x36
 80094de:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80094e2:	4296      	cmp	r6, r2
 80094e4:	dd0d      	ble.n	8009502 <scalbn+0x7a>
 80094e6:	2d00      	cmp	r5, #0
 80094e8:	a11d      	add	r1, pc, #116	@ (adr r1, 8009560 <scalbn+0xd8>)
 80094ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094ee:	da02      	bge.n	80094f6 <scalbn+0x6e>
 80094f0:	a11d      	add	r1, pc, #116	@ (adr r1, 8009568 <scalbn+0xe0>)
 80094f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094f6:	a31a      	add	r3, pc, #104	@ (adr r3, 8009560 <scalbn+0xd8>)
 80094f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fc:	f7f7 f89c 	bl	8000638 <__aeabi_dmul>
 8009500:	e7e6      	b.n	80094d0 <scalbn+0x48>
 8009502:	1872      	adds	r2, r6, r1
 8009504:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8009508:	428a      	cmp	r2, r1
 800950a:	dcec      	bgt.n	80094e6 <scalbn+0x5e>
 800950c:	2a00      	cmp	r2, #0
 800950e:	dd08      	ble.n	8009522 <scalbn+0x9a>
 8009510:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009514:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009518:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800951c:	ec45 4b10 	vmov	d0, r4, r5
 8009520:	bd70      	pop	{r4, r5, r6, pc}
 8009522:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8009526:	da08      	bge.n	800953a <scalbn+0xb2>
 8009528:	2d00      	cmp	r5, #0
 800952a:	a10b      	add	r1, pc, #44	@ (adr r1, 8009558 <scalbn+0xd0>)
 800952c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009530:	dac1      	bge.n	80094b6 <scalbn+0x2e>
 8009532:	a10f      	add	r1, pc, #60	@ (adr r1, 8009570 <scalbn+0xe8>)
 8009534:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009538:	e7bd      	b.n	80094b6 <scalbn+0x2e>
 800953a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800953e:	3236      	adds	r2, #54	@ 0x36
 8009540:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009544:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009548:	4620      	mov	r0, r4
 800954a:	4b0d      	ldr	r3, [pc, #52]	@ (8009580 <scalbn+0xf8>)
 800954c:	4629      	mov	r1, r5
 800954e:	2200      	movs	r2, #0
 8009550:	e7d4      	b.n	80094fc <scalbn+0x74>
 8009552:	bf00      	nop
 8009554:	f3af 8000 	nop.w
 8009558:	c2f8f359 	.word	0xc2f8f359
 800955c:	01a56e1f 	.word	0x01a56e1f
 8009560:	8800759c 	.word	0x8800759c
 8009564:	7e37e43c 	.word	0x7e37e43c
 8009568:	8800759c 	.word	0x8800759c
 800956c:	fe37e43c 	.word	0xfe37e43c
 8009570:	c2f8f359 	.word	0xc2f8f359
 8009574:	81a56e1f 	.word	0x81a56e1f
 8009578:	43500000 	.word	0x43500000
 800957c:	ffff3cb0 	.word	0xffff3cb0
 8009580:	3c900000 	.word	0x3c900000

08009584 <__ieee754_sqrt>:
 8009584:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009588:	4a68      	ldr	r2, [pc, #416]	@ (800972c <__ieee754_sqrt+0x1a8>)
 800958a:	ec55 4b10 	vmov	r4, r5, d0
 800958e:	43aa      	bics	r2, r5
 8009590:	462b      	mov	r3, r5
 8009592:	4621      	mov	r1, r4
 8009594:	d110      	bne.n	80095b8 <__ieee754_sqrt+0x34>
 8009596:	4622      	mov	r2, r4
 8009598:	4620      	mov	r0, r4
 800959a:	4629      	mov	r1, r5
 800959c:	f7f7 f84c 	bl	8000638 <__aeabi_dmul>
 80095a0:	4602      	mov	r2, r0
 80095a2:	460b      	mov	r3, r1
 80095a4:	4620      	mov	r0, r4
 80095a6:	4629      	mov	r1, r5
 80095a8:	f7f6 fe90 	bl	80002cc <__adddf3>
 80095ac:	4604      	mov	r4, r0
 80095ae:	460d      	mov	r5, r1
 80095b0:	ec45 4b10 	vmov	d0, r4, r5
 80095b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095b8:	2d00      	cmp	r5, #0
 80095ba:	dc0e      	bgt.n	80095da <__ieee754_sqrt+0x56>
 80095bc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80095c0:	4322      	orrs	r2, r4
 80095c2:	d0f5      	beq.n	80095b0 <__ieee754_sqrt+0x2c>
 80095c4:	b19d      	cbz	r5, 80095ee <__ieee754_sqrt+0x6a>
 80095c6:	4622      	mov	r2, r4
 80095c8:	4620      	mov	r0, r4
 80095ca:	4629      	mov	r1, r5
 80095cc:	f7f6 fe7c 	bl	80002c8 <__aeabi_dsub>
 80095d0:	4602      	mov	r2, r0
 80095d2:	460b      	mov	r3, r1
 80095d4:	f7f7 f95a 	bl	800088c <__aeabi_ddiv>
 80095d8:	e7e8      	b.n	80095ac <__ieee754_sqrt+0x28>
 80095da:	152a      	asrs	r2, r5, #20
 80095dc:	d115      	bne.n	800960a <__ieee754_sqrt+0x86>
 80095de:	2000      	movs	r0, #0
 80095e0:	e009      	b.n	80095f6 <__ieee754_sqrt+0x72>
 80095e2:	0acb      	lsrs	r3, r1, #11
 80095e4:	3a15      	subs	r2, #21
 80095e6:	0549      	lsls	r1, r1, #21
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d0fa      	beq.n	80095e2 <__ieee754_sqrt+0x5e>
 80095ec:	e7f7      	b.n	80095de <__ieee754_sqrt+0x5a>
 80095ee:	462a      	mov	r2, r5
 80095f0:	e7fa      	b.n	80095e8 <__ieee754_sqrt+0x64>
 80095f2:	005b      	lsls	r3, r3, #1
 80095f4:	3001      	adds	r0, #1
 80095f6:	02dc      	lsls	r4, r3, #11
 80095f8:	d5fb      	bpl.n	80095f2 <__ieee754_sqrt+0x6e>
 80095fa:	1e44      	subs	r4, r0, #1
 80095fc:	1b12      	subs	r2, r2, r4
 80095fe:	f1c0 0420 	rsb	r4, r0, #32
 8009602:	fa21 f404 	lsr.w	r4, r1, r4
 8009606:	4323      	orrs	r3, r4
 8009608:	4081      	lsls	r1, r0
 800960a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800960e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8009612:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009616:	07d2      	lsls	r2, r2, #31
 8009618:	bf5c      	itt	pl
 800961a:	005b      	lslpl	r3, r3, #1
 800961c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8009620:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009624:	bf58      	it	pl
 8009626:	0049      	lslpl	r1, r1, #1
 8009628:	2600      	movs	r6, #0
 800962a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800962e:	106d      	asrs	r5, r5, #1
 8009630:	0049      	lsls	r1, r1, #1
 8009632:	2016      	movs	r0, #22
 8009634:	4632      	mov	r2, r6
 8009636:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800963a:	1917      	adds	r7, r2, r4
 800963c:	429f      	cmp	r7, r3
 800963e:	bfde      	ittt	le
 8009640:	193a      	addle	r2, r7, r4
 8009642:	1bdb      	suble	r3, r3, r7
 8009644:	1936      	addle	r6, r6, r4
 8009646:	0fcf      	lsrs	r7, r1, #31
 8009648:	3801      	subs	r0, #1
 800964a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800964e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009652:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009656:	d1f0      	bne.n	800963a <__ieee754_sqrt+0xb6>
 8009658:	4604      	mov	r4, r0
 800965a:	2720      	movs	r7, #32
 800965c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8009660:	429a      	cmp	r2, r3
 8009662:	eb00 0e0c 	add.w	lr, r0, ip
 8009666:	db02      	blt.n	800966e <__ieee754_sqrt+0xea>
 8009668:	d113      	bne.n	8009692 <__ieee754_sqrt+0x10e>
 800966a:	458e      	cmp	lr, r1
 800966c:	d811      	bhi.n	8009692 <__ieee754_sqrt+0x10e>
 800966e:	f1be 0f00 	cmp.w	lr, #0
 8009672:	eb0e 000c 	add.w	r0, lr, ip
 8009676:	da42      	bge.n	80096fe <__ieee754_sqrt+0x17a>
 8009678:	2800      	cmp	r0, #0
 800967a:	db40      	blt.n	80096fe <__ieee754_sqrt+0x17a>
 800967c:	f102 0801 	add.w	r8, r2, #1
 8009680:	1a9b      	subs	r3, r3, r2
 8009682:	458e      	cmp	lr, r1
 8009684:	bf88      	it	hi
 8009686:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800968a:	eba1 010e 	sub.w	r1, r1, lr
 800968e:	4464      	add	r4, ip
 8009690:	4642      	mov	r2, r8
 8009692:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8009696:	3f01      	subs	r7, #1
 8009698:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800969c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80096a0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80096a4:	d1dc      	bne.n	8009660 <__ieee754_sqrt+0xdc>
 80096a6:	4319      	orrs	r1, r3
 80096a8:	d01b      	beq.n	80096e2 <__ieee754_sqrt+0x15e>
 80096aa:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8009730 <__ieee754_sqrt+0x1ac>
 80096ae:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8009734 <__ieee754_sqrt+0x1b0>
 80096b2:	e9da 0100 	ldrd	r0, r1, [sl]
 80096b6:	e9db 2300 	ldrd	r2, r3, [fp]
 80096ba:	f7f6 fe05 	bl	80002c8 <__aeabi_dsub>
 80096be:	e9da 8900 	ldrd	r8, r9, [sl]
 80096c2:	4602      	mov	r2, r0
 80096c4:	460b      	mov	r3, r1
 80096c6:	4640      	mov	r0, r8
 80096c8:	4649      	mov	r1, r9
 80096ca:	f7f7 fa31 	bl	8000b30 <__aeabi_dcmple>
 80096ce:	b140      	cbz	r0, 80096e2 <__ieee754_sqrt+0x15e>
 80096d0:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 80096d4:	e9da 0100 	ldrd	r0, r1, [sl]
 80096d8:	e9db 2300 	ldrd	r2, r3, [fp]
 80096dc:	d111      	bne.n	8009702 <__ieee754_sqrt+0x17e>
 80096de:	3601      	adds	r6, #1
 80096e0:	463c      	mov	r4, r7
 80096e2:	1072      	asrs	r2, r6, #1
 80096e4:	0863      	lsrs	r3, r4, #1
 80096e6:	07f1      	lsls	r1, r6, #31
 80096e8:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80096ec:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80096f0:	bf48      	it	mi
 80096f2:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80096f6:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80096fa:	4618      	mov	r0, r3
 80096fc:	e756      	b.n	80095ac <__ieee754_sqrt+0x28>
 80096fe:	4690      	mov	r8, r2
 8009700:	e7be      	b.n	8009680 <__ieee754_sqrt+0xfc>
 8009702:	f7f6 fde3 	bl	80002cc <__adddf3>
 8009706:	e9da 8900 	ldrd	r8, r9, [sl]
 800970a:	4602      	mov	r2, r0
 800970c:	460b      	mov	r3, r1
 800970e:	4640      	mov	r0, r8
 8009710:	4649      	mov	r1, r9
 8009712:	f7f7 fa03 	bl	8000b1c <__aeabi_dcmplt>
 8009716:	b120      	cbz	r0, 8009722 <__ieee754_sqrt+0x19e>
 8009718:	1ca0      	adds	r0, r4, #2
 800971a:	bf08      	it	eq
 800971c:	3601      	addeq	r6, #1
 800971e:	3402      	adds	r4, #2
 8009720:	e7df      	b.n	80096e2 <__ieee754_sqrt+0x15e>
 8009722:	1c63      	adds	r3, r4, #1
 8009724:	f023 0401 	bic.w	r4, r3, #1
 8009728:	e7db      	b.n	80096e2 <__ieee754_sqrt+0x15e>
 800972a:	bf00      	nop
 800972c:	7ff00000 	.word	0x7ff00000
 8009730:	200001e0 	.word	0x200001e0
 8009734:	200001d8 	.word	0x200001d8

08009738 <_init>:
 8009738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800973a:	bf00      	nop
 800973c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800973e:	bc08      	pop	{r3}
 8009740:	469e      	mov	lr, r3
 8009742:	4770      	bx	lr

08009744 <_fini>:
 8009744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009746:	bf00      	nop
 8009748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800974a:	bc08      	pop	{r3}
 800974c:	469e      	mov	lr, r3
 800974e:	4770      	bx	lr
