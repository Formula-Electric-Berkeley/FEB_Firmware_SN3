
APPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036bc  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003880  08003880  00004880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003898  08003898  00005010  2**0
                  CONTENTS
  4 .ARM          00000008  08003898  08003898  00004898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038a0  080038a0  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038a0  080038a0  000048a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080038a4  080038a4  000048a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080038a8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000010  080038b8  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  080038b8  00005184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e79b  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022ca  00000000  00000000  000137db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  00015aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000994  00000000  00000000  000166f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022d89  00000000  00000000  0001708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010bfe  00000000  00000000  00039e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da3a7  00000000  00000000  0004aa13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00124dba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032fc  00000000  00000000  00124e00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001280fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003868 	.word	0x08003868

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08003868 	.word	0x08003868

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <FEB_CAN_Init>:

uint32_t FEB_CAN_Tx_Mailbox;

// **************************************** Functions ****************************************

void FEB_CAN_Init(void) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	FEB_CAN_Filter_Config();
 80004f8:	f000 f80c 	bl	8000514 <FEB_CAN_Filter_Config>
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80004fc:	4804      	ldr	r0, [pc, #16]	@ (8000510 <FEB_CAN_Init+0x1c>)
 80004fe:	f001 f817 	bl	8001530 <HAL_CAN_Start>
        // Code Error - Shutdown
	}
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000502:	2102      	movs	r1, #2
 8000504:	4802      	ldr	r0, [pc, #8]	@ (8000510 <FEB_CAN_Init+0x1c>)
 8000506:	f001 fa7e 	bl	8001a06 <HAL_CAN_ActivateNotification>
}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	200000bc 	.word	0x200000bc

08000514 <FEB_CAN_Filter_Config>:

void FEB_CAN_Filter_Config(void) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
	uint8_t filter_bank = 0;
 800051a:	2300      	movs	r3, #0
 800051c:	71fb      	strb	r3, [r7, #7]
    filter_bank = FEB_CAN_ICS_Filter(&hcan1, CAN_RX_FIFO0, filter_bank);
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	461a      	mov	r2, r3
 8000522:	2100      	movs	r1, #0
 8000524:	4804      	ldr	r0, [pc, #16]	@ (8000538 <FEB_CAN_Filter_Config+0x24>)
 8000526:	f000 f823 	bl	8000570 <FEB_CAN_ICS_Filter>
 800052a:	4603      	mov	r3, r0
 800052c:	71fb      	strb	r3, [r7, #7]

	// Assign Filter
    // filter_bank = Function(&hcan1, CAN_RX_FIFO0, filter_bank);
}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	200000bc 	.word	0x200000bc

0800053c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &FEB_CAN_Rx_Header, FEB_CAN_Rx_Data) == HAL_OK) {
 8000544:	4b08      	ldr	r3, [pc, #32]	@ (8000568 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000546:	4a09      	ldr	r2, [pc, #36]	@ (800056c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000548:	2100      	movs	r1, #0
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f001 f939 	bl	80017c2 <HAL_CAN_GetRxMessage>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d103      	bne.n	800055e <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
		FEB_CAN_ICS_Rx_Handler(&FEB_CAN_Rx_Header, FEB_CAN_Rx_Data);
 8000556:	4904      	ldr	r1, [pc, #16]	@ (8000568 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000558:	4804      	ldr	r0, [pc, #16]	@ (800056c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800055a:	f000 f833 	bl	80005c4 <FEB_CAN_ICS_Rx_Handler>
		// Store Message
        // Function(&FEB_CAN_Rx_Header, FEB_CAN_Rx_Data);
	}
}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	20000068 	.word	0x20000068
 800056c:	20000044 	.word	0x20000044

08000570 <FEB_CAN_ICS_Filter>:

uint8_t speed = 10;

// **************************************** Functions ****************************************

uint8_t FEB_CAN_ICS_Filter(CAN_HandleTypeDef* hcan, uint8_t FIFO_assignment, uint8_t filter_bank) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b08c      	sub	sp, #48	@ 0x30
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	460b      	mov	r3, r1
 800057a:	70fb      	strb	r3, [r7, #3]
 800057c:	4613      	mov	r3, r2
 800057e:	70bb      	strb	r3, [r7, #2]
    // For multiple filters, create array of filter IDs and loop over IDs.

	CAN_FilterTypeDef filter_config;

    // Standard CAN - 2.0A - 11 bit
    filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8000580:	2301      	movs	r3, #1
 8000582:	62bb      	str	r3, [r7, #40]	@ 0x28
	filter_config.FilterBank = filter_bank;
 8000584:	78bb      	ldrb	r3, [r7, #2]
 8000586:	61fb      	str	r3, [r7, #28]
	filter_config.FilterFIFOAssignment = FIFO_assignment;
 8000588:	78fb      	ldrb	r3, [r7, #3]
 800058a:	61bb      	str	r3, [r7, #24]
	filter_config.FilterIdHigh = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
	filter_config.FilterIdLow = 0;
 8000590:	2300      	movs	r3, #0
 8000592:	60fb      	str	r3, [r7, #12]
	filter_config.FilterMaskIdHigh = 0;
 8000594:	2300      	movs	r3, #0
 8000596:	613b      	str	r3, [r7, #16]
	filter_config.FilterMaskIdLow = 0;
 8000598:	2300      	movs	r3, #0
 800059a:	617b      	str	r3, [r7, #20]
	filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 800059c:	2300      	movs	r3, #0
 800059e:	623b      	str	r3, [r7, #32]
	filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 80005a0:	2301      	movs	r3, #1
 80005a2:	627b      	str	r3, [r7, #36]	@ 0x24
	filter_config.SlaveStartFilterBank = 27;
 80005a4:	231b      	movs	r3, #27
 80005a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    filter_bank++;
 80005a8:	78bb      	ldrb	r3, [r7, #2]
 80005aa:	3301      	adds	r3, #1
 80005ac:	70bb      	strb	r3, [r7, #2]

	if (HAL_CAN_ConfigFilter(hcan, &filter_config) != HAL_OK) {
 80005ae:	f107 0308 	add.w	r3, r7, #8
 80005b2:	4619      	mov	r1, r3
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f000 fedb 	bl	8001370 <HAL_CAN_ConfigFilter>
        // Code Error - Shutdown
	}

	return filter_bank;
 80005ba:	78bb      	ldrb	r3, [r7, #2]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3730      	adds	r7, #48	@ 0x30
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <FEB_CAN_ICS_Rx_Handler>:

void FEB_CAN_ICS_Rx_Handler(CAN_RxHeaderTypeDef *FEB_CAN_Rx_Header, uint8_t FEB_CAN_Rx_Data[]) {
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
	speed = FEB_CAN_Rx_Data[0];
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	781a      	ldrb	r2, [r3, #0]
 80005d2:	4b04      	ldr	r3, [pc, #16]	@ (80005e4 <FEB_CAN_ICS_Rx_Handler+0x20>)
 80005d4:	701a      	strb	r2, [r3, #0]
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000000 	.word	0x20000000

080005e8 <FEB_CAN_ICS_Transmit>:

void FEB_CAN_ICS_Transmit(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	FEB_CAN_Tx_Header.DLC = 2;
 80005ec:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <FEB_CAN_ICS_Transmit+0x4c>)
 80005ee:	2202      	movs	r2, #2
 80005f0:	611a      	str	r2, [r3, #16]
	FEB_CAN_Tx_Header.StdId = 0x10;
 80005f2:	4b10      	ldr	r3, [pc, #64]	@ (8000634 <FEB_CAN_ICS_Transmit+0x4c>)
 80005f4:	2210      	movs	r2, #16
 80005f6:	601a      	str	r2, [r3, #0]
	FEB_CAN_Tx_Header.IDE = CAN_ID_STD;
 80005f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000634 <FEB_CAN_ICS_Transmit+0x4c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
	FEB_CAN_Tx_Header.RTR = CAN_RTR_DATA;
 80005fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000634 <FEB_CAN_ICS_Transmit+0x4c>)
 8000600:	2200      	movs	r2, #0
 8000602:	60da      	str	r2, [r3, #12]
	FEB_CAN_Tx_Header.TransmitGlobalTime = DISABLE;
 8000604:	4b0b      	ldr	r3, [pc, #44]	@ (8000634 <FEB_CAN_ICS_Transmit+0x4c>)
 8000606:	2200      	movs	r2, #0
 8000608:	751a      	strb	r2, [r3, #20]

	// Copy data to Tx buffer
	FEB_CAN_Tx_Data[0] = (uint8_t) 1;
 800060a:	4b0b      	ldr	r3, [pc, #44]	@ (8000638 <FEB_CAN_ICS_Transmit+0x50>)
 800060c:	2201      	movs	r2, #1
 800060e:	701a      	strb	r2, [r3, #0]
	FEB_CAN_Tx_Data[1] = (uint8_t) 2;
 8000610:	4b09      	ldr	r3, [pc, #36]	@ (8000638 <FEB_CAN_ICS_Transmit+0x50>)
 8000612:	2202      	movs	r2, #2
 8000614:	705a      	strb	r2, [r3, #1]

	// Delay until mailbox available
	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0) {}
 8000616:	bf00      	nop
 8000618:	4808      	ldr	r0, [pc, #32]	@ (800063c <FEB_CAN_ICS_Transmit+0x54>)
 800061a:	f001 f89d 	bl	8001758 <HAL_CAN_GetTxMailboxesFreeLevel>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d0f9      	beq.n	8000618 <FEB_CAN_ICS_Transmit+0x30>

	// Add Tx data to mailbox
	if (HAL_CAN_AddTxMessage(&hcan1, &FEB_CAN_Tx_Header, FEB_CAN_Tx_Data, &FEB_CAN_Tx_Mailbox) != HAL_OK) {
 8000624:	4b06      	ldr	r3, [pc, #24]	@ (8000640 <FEB_CAN_ICS_Transmit+0x58>)
 8000626:	4a04      	ldr	r2, [pc, #16]	@ (8000638 <FEB_CAN_ICS_Transmit+0x50>)
 8000628:	4902      	ldr	r1, [pc, #8]	@ (8000634 <FEB_CAN_ICS_Transmit+0x4c>)
 800062a:	4804      	ldr	r0, [pc, #16]	@ (800063c <FEB_CAN_ICS_Transmit+0x54>)
 800062c:	f000 ffc4 	bl	80015b8 <HAL_CAN_AddTxMessage>
		//
	}
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	2000002c 	.word	0x2000002c
 8000638:	20000060 	.word	0x20000060
 800063c:	200000bc 	.word	0x200000bc
 8000640:	20000070 	.word	0x20000070

08000644 <FEB_Main_Setup>:
char buf[128];
uint8_t buf_len; //stolen from Main_Setup (SN2)

// ********************************** Functions **********************************

void FEB_Main_Setup(void){
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
//	HAL_ADCEx_InjectedStart(&hadc1); //@lovehate - where does this go
//	FEB_Timer_Init();
//	FEB_TPS2482_Setup();
	FEB_CAN_Init(); //FEB_CAN_Init() // The transceiver must be connected otherwise you get sent into an infinite loop
 8000648:	f7ff ff54 	bl	80004f4 <FEB_CAN_Init>
//	FEB_CAN_RMS_Setup();

}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}

08000650 <FEB_Main_While>:

void FEB_Main_While(void){
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	FEB_CAN_ICS_Transmit();
 8000654:	f7ff ffc8 	bl	80005e8 <FEB_CAN_ICS_Transmit>
//	FEB_CAN_RMS_Torque();
//	FEB_Normalized_CAN_sendBrake();
//	FEB_TPS2482_sendReadings(); //TODO: create transmit function for TPS2482
//	FEB_CAN_RMS_torqueTransmit(); //UART for debugging
//	FEB_CAN_BSPD_Transmit();
	HAL_Delay(100);
 8000658:	2064      	movs	r0, #100	@ 0x64
 800065a:	f000 fc29 	bl	8000eb0 <HAL_Delay>
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}

08000662 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000666:	f000 fbb1 	bl	8000dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066a:	f000 f80f 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066e:	f000 f949 	bl	8000904 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000672:	f000 f91d 	bl	80008b0 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8000676:	f000 f8b7 	bl	80007e8 <MX_CAN1_Init>
  MX_I2C1_Init();
 800067a:	f000 f8eb 	bl	8000854 <MX_I2C1_Init>
  MX_ADC1_Init();
 800067e:	f000 f871 	bl	8000764 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  FEB_Main_Setup();
 8000682:	f7ff ffdf 	bl	8000644 <FEB_Main_Setup>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  FEB_Main_While();
 8000686:	f7ff ffe3 	bl	8000650 <FEB_Main_While>
 800068a:	e7fc      	b.n	8000686 <main+0x24>

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b094      	sub	sp, #80	@ 0x50
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 031c 	add.w	r3, r7, #28
 8000696:	2234      	movs	r2, #52	@ 0x34
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f003 f8b8 	bl	8003810 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	f107 0308 	add.w	r3, r7, #8
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b0:	2300      	movs	r3, #0
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	4b29      	ldr	r3, [pc, #164]	@ (800075c <SystemClock_Config+0xd0>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b8:	4a28      	ldr	r2, [pc, #160]	@ (800075c <SystemClock_Config+0xd0>)
 80006ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006be:	6413      	str	r3, [r2, #64]	@ 0x40
 80006c0:	4b26      	ldr	r3, [pc, #152]	@ (800075c <SystemClock_Config+0xd0>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006cc:	2300      	movs	r3, #0
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	4b23      	ldr	r3, [pc, #140]	@ (8000760 <SystemClock_Config+0xd4>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a22      	ldr	r2, [pc, #136]	@ (8000760 <SystemClock_Config+0xd4>)
 80006d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006da:	6013      	str	r3, [r2, #0]
 80006dc:	4b20      	ldr	r3, [pc, #128]	@ (8000760 <SystemClock_Config+0xd4>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006e4:	603b      	str	r3, [r7, #0]
 80006e6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e8:	2301      	movs	r3, #1
 80006ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006f0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f2:	2302      	movs	r3, #2
 80006f4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006fc:	2304      	movs	r3, #4
 80006fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000700:	23a0      	movs	r3, #160	@ 0xa0
 8000702:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000704:	2302      	movs	r3, #2
 8000706:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000708:	2302      	movs	r3, #2
 800070a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800070c:	2302      	movs	r3, #2
 800070e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000710:	f107 031c 	add.w	r3, r7, #28
 8000714:	4618      	mov	r0, r3
 8000716:	f002 fb19 	bl	8002d4c <HAL_RCC_OscConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000720:	f000 f95e 	bl	80009e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000724:	230f      	movs	r3, #15
 8000726:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000728:	2302      	movs	r3, #2
 800072a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000730:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000734:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000736:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800073a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800073c:	f107 0308 	add.w	r3, r7, #8
 8000740:	2105      	movs	r1, #5
 8000742:	4618      	mov	r0, r3
 8000744:	f001 ffb8 	bl	80026b8 <HAL_RCC_ClockConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800074e:	f000 f947 	bl	80009e0 <Error_Handler>
  }
}
 8000752:	bf00      	nop
 8000754:	3750      	adds	r7, #80	@ 0x50
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800
 8000760:	40007000 	.word	0x40007000

08000764 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800076a:	463b      	mov	r3, r7
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000776:	4b19      	ldr	r3, [pc, #100]	@ (80007dc <MX_ADC1_Init+0x78>)
 8000778:	4a19      	ldr	r2, [pc, #100]	@ (80007e0 <MX_ADC1_Init+0x7c>)
 800077a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800077c:	4b17      	ldr	r3, [pc, #92]	@ (80007dc <MX_ADC1_Init+0x78>)
 800077e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000782:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000784:	4b15      	ldr	r3, [pc, #84]	@ (80007dc <MX_ADC1_Init+0x78>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800078a:	4b14      	ldr	r3, [pc, #80]	@ (80007dc <MX_ADC1_Init+0x78>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000790:	4b12      	ldr	r3, [pc, #72]	@ (80007dc <MX_ADC1_Init+0x78>)
 8000792:	2200      	movs	r2, #0
 8000794:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000796:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <MX_ADC1_Init+0x78>)
 8000798:	2200      	movs	r2, #0
 800079a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800079e:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <MX_ADC1_Init+0x78>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007a4:	4b0d      	ldr	r3, [pc, #52]	@ (80007dc <MX_ADC1_Init+0x78>)
 80007a6:	4a0f      	ldr	r2, [pc, #60]	@ (80007e4 <MX_ADC1_Init+0x80>)
 80007a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007aa:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <MX_ADC1_Init+0x78>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	@ (80007dc <MX_ADC1_Init+0x78>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007b6:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <MX_ADC1_Init+0x78>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007be:	4b07      	ldr	r3, [pc, #28]	@ (80007dc <MX_ADC1_Init+0x78>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007c4:	4805      	ldr	r0, [pc, #20]	@ (80007dc <MX_ADC1_Init+0x78>)
 80007c6:	f000 fb97 	bl	8000ef8 <HAL_ADC_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007d0:	f000 f906 	bl	80009e0 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000074 	.word	0x20000074
 80007e0:	40012000 	.word	0x40012000
 80007e4:	0f000001 	.word	0x0f000001

080007e8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007ec:	4b17      	ldr	r3, [pc, #92]	@ (800084c <MX_CAN1_Init+0x64>)
 80007ee:	4a18      	ldr	r2, [pc, #96]	@ (8000850 <MX_CAN1_Init+0x68>)
 80007f0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80007f2:	4b16      	ldr	r3, [pc, #88]	@ (800084c <MX_CAN1_Init+0x64>)
 80007f4:	2210      	movs	r2, #16
 80007f6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007f8:	4b14      	ldr	r3, [pc, #80]	@ (800084c <MX_CAN1_Init+0x64>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007fe:	4b13      	ldr	r3, [pc, #76]	@ (800084c <MX_CAN1_Init+0x64>)
 8000800:	2200      	movs	r2, #0
 8000802:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000804:	4b11      	ldr	r3, [pc, #68]	@ (800084c <MX_CAN1_Init+0x64>)
 8000806:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800080a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800080c:	4b0f      	ldr	r3, [pc, #60]	@ (800084c <MX_CAN1_Init+0x64>)
 800080e:	2200      	movs	r2, #0
 8000810:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000812:	4b0e      	ldr	r3, [pc, #56]	@ (800084c <MX_CAN1_Init+0x64>)
 8000814:	2200      	movs	r2, #0
 8000816:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000818:	4b0c      	ldr	r3, [pc, #48]	@ (800084c <MX_CAN1_Init+0x64>)
 800081a:	2200      	movs	r2, #0
 800081c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800081e:	4b0b      	ldr	r3, [pc, #44]	@ (800084c <MX_CAN1_Init+0x64>)
 8000820:	2200      	movs	r2, #0
 8000822:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000824:	4b09      	ldr	r3, [pc, #36]	@ (800084c <MX_CAN1_Init+0x64>)
 8000826:	2200      	movs	r2, #0
 8000828:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800082a:	4b08      	ldr	r3, [pc, #32]	@ (800084c <MX_CAN1_Init+0x64>)
 800082c:	2200      	movs	r2, #0
 800082e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000830:	4b06      	ldr	r3, [pc, #24]	@ (800084c <MX_CAN1_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000836:	4805      	ldr	r0, [pc, #20]	@ (800084c <MX_CAN1_Init+0x64>)
 8000838:	f000 fc9e 	bl	8001178 <HAL_CAN_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000842:	f000 f8cd 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200000bc 	.word	0x200000bc
 8000850:	40006400 	.word	0x40006400

08000854 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000858:	4b12      	ldr	r3, [pc, #72]	@ (80008a4 <MX_I2C1_Init+0x50>)
 800085a:	4a13      	ldr	r2, [pc, #76]	@ (80008a8 <MX_I2C1_Init+0x54>)
 800085c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800085e:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <MX_I2C1_Init+0x50>)
 8000860:	4a12      	ldr	r2, [pc, #72]	@ (80008ac <MX_I2C1_Init+0x58>)
 8000862:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000864:	4b0f      	ldr	r3, [pc, #60]	@ (80008a4 <MX_I2C1_Init+0x50>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800086a:	4b0e      	ldr	r3, [pc, #56]	@ (80008a4 <MX_I2C1_Init+0x50>)
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000870:	4b0c      	ldr	r3, [pc, #48]	@ (80008a4 <MX_I2C1_Init+0x50>)
 8000872:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000876:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000878:	4b0a      	ldr	r3, [pc, #40]	@ (80008a4 <MX_I2C1_Init+0x50>)
 800087a:	2200      	movs	r2, #0
 800087c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800087e:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <MX_I2C1_Init+0x50>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000884:	4b07      	ldr	r3, [pc, #28]	@ (80008a4 <MX_I2C1_Init+0x50>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800088a:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <MX_I2C1_Init+0x50>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000890:	4804      	ldr	r0, [pc, #16]	@ (80008a4 <MX_I2C1_Init+0x50>)
 8000892:	f001 fdcd 	bl	8002430 <HAL_I2C_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800089c:	f000 f8a0 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200000e4 	.word	0x200000e4
 80008a8:	40005400 	.word	0x40005400
 80008ac:	000186a0 	.word	0x000186a0

080008b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008b4:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <MX_USART2_UART_Init+0x4c>)
 80008b6:	4a12      	ldr	r2, [pc, #72]	@ (8000900 <MX_USART2_UART_Init+0x50>)
 80008b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ba:	4b10      	ldr	r3, [pc, #64]	@ (80008fc <MX_USART2_UART_Init+0x4c>)
 80008bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <MX_USART2_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <MX_USART2_UART_Init+0x4c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <MX_USART2_UART_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d4:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <MX_USART2_UART_Init+0x4c>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008da:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <MX_USART2_UART_Init+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <MX_USART2_UART_Init+0x4c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	@ (80008fc <MX_USART2_UART_Init+0x4c>)
 80008e8:	f002 fcce 	bl	8003288 <HAL_UART_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008f2:	f000 f875 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000138 	.word	0x20000138
 8000900:	40004400 	.word	0x40004400

08000904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	@ 0x28
 8000908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	4b2d      	ldr	r3, [pc, #180]	@ (80009d4 <MX_GPIO_Init+0xd0>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a2c      	ldr	r2, [pc, #176]	@ (80009d4 <MX_GPIO_Init+0xd0>)
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b2a      	ldr	r3, [pc, #168]	@ (80009d4 <MX_GPIO_Init+0xd0>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f003 0304 	and.w	r3, r3, #4
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	4b26      	ldr	r3, [pc, #152]	@ (80009d4 <MX_GPIO_Init+0xd0>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a25      	ldr	r2, [pc, #148]	@ (80009d4 <MX_GPIO_Init+0xd0>)
 8000940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
 8000946:	4b23      	ldr	r3, [pc, #140]	@ (80009d4 <MX_GPIO_Init+0xd0>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	4b1f      	ldr	r3, [pc, #124]	@ (80009d4 <MX_GPIO_Init+0xd0>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a1e      	ldr	r2, [pc, #120]	@ (80009d4 <MX_GPIO_Init+0xd0>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b1c      	ldr	r3, [pc, #112]	@ (80009d4 <MX_GPIO_Init+0xd0>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	4b18      	ldr	r3, [pc, #96]	@ (80009d4 <MX_GPIO_Init+0xd0>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	4a17      	ldr	r2, [pc, #92]	@ (80009d4 <MX_GPIO_Init+0xd0>)
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	6313      	str	r3, [r2, #48]	@ 0x30
 800097e:	4b15      	ldr	r3, [pc, #84]	@ (80009d4 <MX_GPIO_Init+0xd0>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	2120      	movs	r1, #32
 800098e:	4812      	ldr	r0, [pc, #72]	@ (80009d8 <MX_GPIO_Init+0xd4>)
 8000990:	f001 fd34 	bl	80023fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000994:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800099a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800099e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4619      	mov	r1, r3
 80009aa:	480c      	ldr	r0, [pc, #48]	@ (80009dc <MX_GPIO_Init+0xd8>)
 80009ac:	f001 fb92 	bl	80020d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009b0:	2320      	movs	r3, #32
 80009b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4619      	mov	r1, r3
 80009c6:	4804      	ldr	r0, [pc, #16]	@ (80009d8 <MX_GPIO_Init+0xd4>)
 80009c8:	f001 fb84 	bl	80020d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009cc:	bf00      	nop
 80009ce:	3728      	adds	r7, #40	@ 0x28
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020000 	.word	0x40020000
 80009dc:	40020800 	.word	0x40020800

080009e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e4:	b672      	cpsid	i
}
 80009e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <Error_Handler+0x8>

080009ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	4b10      	ldr	r3, [pc, #64]	@ (8000a38 <HAL_MspInit+0x4c>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000a38 <HAL_MspInit+0x4c>)
 80009fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a02:	4b0d      	ldr	r3, [pc, #52]	@ (8000a38 <HAL_MspInit+0x4c>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	4b09      	ldr	r3, [pc, #36]	@ (8000a38 <HAL_MspInit+0x4c>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a16:	4a08      	ldr	r2, [pc, #32]	@ (8000a38 <HAL_MspInit+0x4c>)
 8000a18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1e:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <HAL_MspInit+0x4c>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a2a:	2007      	movs	r0, #7
 8000a2c:	f001 fb10 	bl	8002050 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40023800 	.word	0x40023800

08000a3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08a      	sub	sp, #40	@ 0x28
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a24      	ldr	r2, [pc, #144]	@ (8000aec <HAL_ADC_MspInit+0xb0>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d141      	bne.n	8000ae2 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	4b23      	ldr	r3, [pc, #140]	@ (8000af0 <HAL_ADC_MspInit+0xb4>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a66:	4a22      	ldr	r2, [pc, #136]	@ (8000af0 <HAL_ADC_MspInit+0xb4>)
 8000a68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a6e:	4b20      	ldr	r3, [pc, #128]	@ (8000af0 <HAL_ADC_MspInit+0xb4>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000af0 <HAL_ADC_MspInit+0xb4>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	4a1b      	ldr	r2, [pc, #108]	@ (8000af0 <HAL_ADC_MspInit+0xb4>)
 8000a84:	f043 0304 	orr.w	r3, r3, #4
 8000a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8a:	4b19      	ldr	r3, [pc, #100]	@ (8000af0 <HAL_ADC_MspInit+0xb4>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	f003 0304 	and.w	r3, r3, #4
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	4b15      	ldr	r3, [pc, #84]	@ (8000af0 <HAL_ADC_MspInit+0xb4>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	4a14      	ldr	r2, [pc, #80]	@ (8000af0 <HAL_ADC_MspInit+0xb4>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa6:	4b12      	ldr	r3, [pc, #72]	@ (8000af0 <HAL_ADC_MspInit+0xb4>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8000ab2:	230b      	movs	r3, #11
 8000ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	480b      	ldr	r0, [pc, #44]	@ (8000af4 <HAL_ADC_MspInit+0xb8>)
 8000ac6:	f001 fb05 	bl	80020d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000aca:	23c3      	movs	r3, #195	@ 0xc3
 8000acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	4806      	ldr	r0, [pc, #24]	@ (8000af8 <HAL_ADC_MspInit+0xbc>)
 8000ade:	f001 faf9 	bl	80020d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ae2:	bf00      	nop
 8000ae4:	3728      	adds	r7, #40	@ 0x28
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40012000 	.word	0x40012000
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020800 	.word	0x40020800
 8000af8:	40020000 	.word	0x40020000

08000afc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	@ 0x28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a21      	ldr	r2, [pc, #132]	@ (8000ba0 <HAL_CAN_MspInit+0xa4>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d13c      	bne.n	8000b98 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	4b20      	ldr	r3, [pc, #128]	@ (8000ba4 <HAL_CAN_MspInit+0xa8>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b26:	4a1f      	ldr	r2, [pc, #124]	@ (8000ba4 <HAL_CAN_MspInit+0xa8>)
 8000b28:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba4 <HAL_CAN_MspInit+0xa8>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ba4 <HAL_CAN_MspInit+0xa8>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	4a18      	ldr	r2, [pc, #96]	@ (8000ba4 <HAL_CAN_MspInit+0xa8>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <HAL_CAN_MspInit+0xa8>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b56:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b64:	2303      	movs	r3, #3
 8000b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b68:	2309      	movs	r3, #9
 8000b6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4619      	mov	r1, r3
 8000b72:	480d      	ldr	r0, [pc, #52]	@ (8000ba8 <HAL_CAN_MspInit+0xac>)
 8000b74:	f001 faae 	bl	80020d4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2014      	movs	r0, #20
 8000b7e:	f001 fa72 	bl	8002066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000b82:	2014      	movs	r0, #20
 8000b84:	f001 fa8b 	bl	800209e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2015      	movs	r0, #21
 8000b8e:	f001 fa6a 	bl	8002066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000b92:	2015      	movs	r0, #21
 8000b94:	f001 fa83 	bl	800209e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000b98:	bf00      	nop
 8000b9a:	3728      	adds	r7, #40	@ 0x28
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40006400 	.word	0x40006400
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020000 	.word	0x40020000

08000bac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	@ 0x28
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a19      	ldr	r2, [pc, #100]	@ (8000c30 <HAL_I2C_MspInit+0x84>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d12b      	bne.n	8000c26 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	4b18      	ldr	r3, [pc, #96]	@ (8000c34 <HAL_I2C_MspInit+0x88>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	4a17      	ldr	r2, [pc, #92]	@ (8000c34 <HAL_I2C_MspInit+0x88>)
 8000bd8:	f043 0302 	orr.w	r3, r3, #2
 8000bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bde:	4b15      	ldr	r3, [pc, #84]	@ (8000c34 <HAL_I2C_MspInit+0x88>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bea:	23c0      	movs	r3, #192	@ 0xc0
 8000bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bee:	2312      	movs	r3, #18
 8000bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	480c      	ldr	r0, [pc, #48]	@ (8000c38 <HAL_I2C_MspInit+0x8c>)
 8000c06:	f001 fa65 	bl	80020d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	4b09      	ldr	r3, [pc, #36]	@ (8000c34 <HAL_I2C_MspInit+0x88>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c12:	4a08      	ldr	r2, [pc, #32]	@ (8000c34 <HAL_I2C_MspInit+0x88>)
 8000c14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c1a:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <HAL_I2C_MspInit+0x88>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c26:	bf00      	nop
 8000c28:	3728      	adds	r7, #40	@ 0x28
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40005400 	.word	0x40005400
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020400 	.word	0x40020400

08000c3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	@ 0x28
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a19      	ldr	r2, [pc, #100]	@ (8000cc0 <HAL_UART_MspInit+0x84>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d12b      	bne.n	8000cb6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	4b18      	ldr	r3, [pc, #96]	@ (8000cc4 <HAL_UART_MspInit+0x88>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c66:	4a17      	ldr	r2, [pc, #92]	@ (8000cc4 <HAL_UART_MspInit+0x88>)
 8000c68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c6e:	4b15      	ldr	r3, [pc, #84]	@ (8000cc4 <HAL_UART_MspInit+0x88>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	4b11      	ldr	r3, [pc, #68]	@ (8000cc4 <HAL_UART_MspInit+0x88>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	4a10      	ldr	r2, [pc, #64]	@ (8000cc4 <HAL_UART_MspInit+0x88>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc4 <HAL_UART_MspInit+0x88>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c96:	230c      	movs	r3, #12
 8000c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ca6:	2307      	movs	r3, #7
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4805      	ldr	r0, [pc, #20]	@ (8000cc8 <HAL_UART_MspInit+0x8c>)
 8000cb2:	f001 fa0f 	bl	80020d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cb6:	bf00      	nop
 8000cb8:	3728      	adds	r7, #40	@ 0x28
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40004400 	.word	0x40004400
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40020000 	.word	0x40020000

08000ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <NMI_Handler+0x4>

08000cd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <HardFault_Handler+0x4>

08000cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <MemManage_Handler+0x4>

08000ce4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <BusFault_Handler+0x4>

08000cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <UsageFault_Handler+0x4>

08000cf4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d22:	f000 f8a5 	bl	8000e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d30:	4802      	ldr	r0, [pc, #8]	@ (8000d3c <CAN1_RX0_IRQHandler+0x10>)
 8000d32:	f000 fe8e 	bl	8001a52 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	200000bc 	.word	0x200000bc

08000d40 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d44:	4802      	ldr	r0, [pc, #8]	@ (8000d50 <CAN1_RX1_IRQHandler+0x10>)
 8000d46:	f000 fe84 	bl	8001a52 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	200000bc 	.word	0x200000bc

08000d54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d58:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <SystemInit+0x20>)
 8000d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d5e:	4a05      	ldr	r2, [pc, #20]	@ (8000d74 <SystemInit+0x20>)
 8000d60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000db0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d7c:	f7ff ffea 	bl	8000d54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d80:	480c      	ldr	r0, [pc, #48]	@ (8000db4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d82:	490d      	ldr	r1, [pc, #52]	@ (8000db8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d84:	4a0d      	ldr	r2, [pc, #52]	@ (8000dbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d88:	e002      	b.n	8000d90 <LoopCopyDataInit>

08000d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8e:	3304      	adds	r3, #4

08000d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d94:	d3f9      	bcc.n	8000d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d96:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d98:	4c0a      	ldr	r4, [pc, #40]	@ (8000dc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d9c:	e001      	b.n	8000da2 <LoopFillZerobss>

08000d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da0:	3204      	adds	r2, #4

08000da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da4:	d3fb      	bcc.n	8000d9e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000da6:	f002 fd3b 	bl	8003820 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000daa:	f7ff fc5a 	bl	8000662 <main>
  bx  lr    
 8000dae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000db0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000dbc:	080038a8 	.word	0x080038a8
  ldr r2, =_sbss
 8000dc0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000dc4:	20000184 	.word	0x20000184

08000dc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc8:	e7fe      	b.n	8000dc8 <ADC_IRQHandler>
	...

08000dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e0c <HAL_Init+0x40>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000e0c <HAL_Init+0x40>)
 8000dd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8000e0c <HAL_Init+0x40>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0a      	ldr	r2, [pc, #40]	@ (8000e0c <HAL_Init+0x40>)
 8000de2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000de6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de8:	4b08      	ldr	r3, [pc, #32]	@ (8000e0c <HAL_Init+0x40>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a07      	ldr	r2, [pc, #28]	@ (8000e0c <HAL_Init+0x40>)
 8000dee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000df2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df4:	2003      	movs	r0, #3
 8000df6:	f001 f92b 	bl	8002050 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f000 f808 	bl	8000e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e00:	f7ff fdf4 	bl	80009ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40023c00 	.word	0x40023c00

08000e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e18:	4b12      	ldr	r3, [pc, #72]	@ (8000e64 <HAL_InitTick+0x54>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4b12      	ldr	r3, [pc, #72]	@ (8000e68 <HAL_InitTick+0x58>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	4619      	mov	r1, r3
 8000e22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f001 f943 	bl	80020ba <HAL_SYSTICK_Config>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e00e      	b.n	8000e5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2b0f      	cmp	r3, #15
 8000e42:	d80a      	bhi.n	8000e5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e44:	2200      	movs	r2, #0
 8000e46:	6879      	ldr	r1, [r7, #4]
 8000e48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e4c:	f001 f90b 	bl	8002066 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e50:	4a06      	ldr	r2, [pc, #24]	@ (8000e6c <HAL_InitTick+0x5c>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e56:	2300      	movs	r3, #0
 8000e58:	e000      	b.n	8000e5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000004 	.word	0x20000004
 8000e68:	2000000c 	.word	0x2000000c
 8000e6c:	20000008 	.word	0x20000008

08000e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e74:	4b06      	ldr	r3, [pc, #24]	@ (8000e90 <HAL_IncTick+0x20>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <HAL_IncTick+0x24>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4413      	add	r3, r2
 8000e80:	4a04      	ldr	r2, [pc, #16]	@ (8000e94 <HAL_IncTick+0x24>)
 8000e82:	6013      	str	r3, [r2, #0]
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	2000000c 	.word	0x2000000c
 8000e94:	20000180 	.word	0x20000180

08000e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e9c:	4b03      	ldr	r3, [pc, #12]	@ (8000eac <HAL_GetTick+0x14>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000180 	.word	0x20000180

08000eb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb8:	f7ff ffee 	bl	8000e98 <HAL_GetTick>
 8000ebc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000ec8:	d005      	beq.n	8000ed6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eca:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef4 <HAL_Delay+0x44>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ed6:	bf00      	nop
 8000ed8:	f7ff ffde 	bl	8000e98 <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d8f7      	bhi.n	8000ed8 <HAL_Delay+0x28>
  {
  }
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	2000000c 	.word	0x2000000c

08000ef8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f00:	2300      	movs	r3, #0
 8000f02:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d101      	bne.n	8000f0e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e033      	b.n	8000f76 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d109      	bne.n	8000f2a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff fd90 	bl	8000a3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2e:	f003 0310 	and.w	r3, r3, #16
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d118      	bne.n	8000f68 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000f3e:	f023 0302 	bic.w	r3, r3, #2
 8000f42:	f043 0202 	orr.w	r2, r3, #2
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f000 f818 	bl	8000f80 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2200      	movs	r2, #0
 8000f54:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5a:	f023 0303 	bic.w	r3, r3, #3
 8000f5e:	f043 0201 	orr.w	r2, r3, #1
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f66:	e001      	b.n	8000f6c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f88:	4b79      	ldr	r3, [pc, #484]	@ (8001170 <ADC_Init+0x1f0>)
 8000f8a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	685a      	ldr	r2, [r3, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000fb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	6859      	ldr	r1, [r3, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	691b      	ldr	r3, [r3, #16]
 8000fc0:	021a      	lsls	r2, r3, #8
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8000fd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	6859      	ldr	r1, [r3, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	689a      	ldr	r2, [r3, #8]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	689a      	ldr	r2, [r3, #8]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000ffa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	6899      	ldr	r1, [r3, #8]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	68da      	ldr	r2, [r3, #12]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	430a      	orrs	r2, r1
 800100c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001012:	4a58      	ldr	r2, [pc, #352]	@ (8001174 <ADC_Init+0x1f4>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d022      	beq.n	800105e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	689a      	ldr	r2, [r3, #8]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001026:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	6899      	ldr	r1, [r3, #8]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	430a      	orrs	r2, r1
 8001038:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001048:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	6899      	ldr	r1, [r3, #8]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	430a      	orrs	r2, r1
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	e00f      	b.n	800107e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800106c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	689a      	ldr	r2, [r3, #8]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800107c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	689a      	ldr	r2, [r3, #8]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f022 0202 	bic.w	r2, r2, #2
 800108c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	6899      	ldr	r1, [r3, #8]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	7e1b      	ldrb	r3, [r3, #24]
 8001098:	005a      	lsls	r2, r3, #1
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	430a      	orrs	r2, r1
 80010a0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d01b      	beq.n	80010e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	685a      	ldr	r2, [r3, #4]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80010ba:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	685a      	ldr	r2, [r3, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80010ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6859      	ldr	r1, [r3, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010d6:	3b01      	subs	r3, #1
 80010d8:	035a      	lsls	r2, r3, #13
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	430a      	orrs	r2, r1
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	e007      	b.n	80010f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	685a      	ldr	r2, [r3, #4]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80010f2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001102:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	3b01      	subs	r3, #1
 8001110:	051a      	lsls	r2, r3, #20
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	430a      	orrs	r2, r1
 8001118:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001128:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	6899      	ldr	r1, [r3, #8]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001136:	025a      	lsls	r2, r3, #9
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	430a      	orrs	r2, r1
 800113e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	689a      	ldr	r2, [r3, #8]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800114e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	6899      	ldr	r1, [r3, #8]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	029a      	lsls	r2, r3, #10
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	430a      	orrs	r2, r1
 8001162:	609a      	str	r2, [r3, #8]
}
 8001164:	bf00      	nop
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	40012300 	.word	0x40012300
 8001174:	0f000001 	.word	0x0f000001

08001178 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e0ed      	b.n	8001366 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2b00      	cmp	r3, #0
 8001194:	d102      	bne.n	800119c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff fcb0 	bl	8000afc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f042 0201 	orr.w	r2, r2, #1
 80011aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011ac:	f7ff fe74 	bl	8000e98 <HAL_GetTick>
 80011b0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011b2:	e012      	b.n	80011da <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011b4:	f7ff fe70 	bl	8000e98 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b0a      	cmp	r3, #10
 80011c0:	d90b      	bls.n	80011da <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011c6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2205      	movs	r2, #5
 80011d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e0c5      	b.n	8001366 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d0e5      	beq.n	80011b4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f022 0202 	bic.w	r2, r2, #2
 80011f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011f8:	f7ff fe4e 	bl	8000e98 <HAL_GetTick>
 80011fc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011fe:	e012      	b.n	8001226 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001200:	f7ff fe4a 	bl	8000e98 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b0a      	cmp	r3, #10
 800120c:	d90b      	bls.n	8001226 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001212:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2205      	movs	r2, #5
 800121e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e09f      	b.n	8001366 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d1e5      	bne.n	8001200 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	7e1b      	ldrb	r3, [r3, #24]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d108      	bne.n	800124e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	e007      	b.n	800125e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800125c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	7e5b      	ldrb	r3, [r3, #25]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d108      	bne.n	8001278 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	e007      	b.n	8001288 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001286:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	7e9b      	ldrb	r3, [r3, #26]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d108      	bne.n	80012a2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f042 0220 	orr.w	r2, r2, #32
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	e007      	b.n	80012b2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f022 0220 	bic.w	r2, r2, #32
 80012b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	7edb      	ldrb	r3, [r3, #27]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d108      	bne.n	80012cc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f022 0210 	bic.w	r2, r2, #16
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	e007      	b.n	80012dc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f042 0210 	orr.w	r2, r2, #16
 80012da:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	7f1b      	ldrb	r3, [r3, #28]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d108      	bne.n	80012f6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f042 0208 	orr.w	r2, r2, #8
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	e007      	b.n	8001306 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0208 	bic.w	r2, r2, #8
 8001304:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	7f5b      	ldrb	r3, [r3, #29]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d108      	bne.n	8001320 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f042 0204 	orr.w	r2, r2, #4
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	e007      	b.n	8001330 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f022 0204 	bic.w	r2, r2, #4
 800132e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	431a      	orrs	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	431a      	orrs	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	695b      	ldr	r3, [r3, #20]
 8001344:	ea42 0103 	orr.w	r1, r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	1e5a      	subs	r2, r3, #1
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	430a      	orrs	r2, r1
 8001354:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2201      	movs	r2, #1
 8001360:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001370:	b480      	push	{r7}
 8001372:	b087      	sub	sp, #28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001386:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001388:	7cfb      	ldrb	r3, [r7, #19]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d003      	beq.n	8001396 <HAL_CAN_ConfigFilter+0x26>
 800138e:	7cfb      	ldrb	r3, [r7, #19]
 8001390:	2b02      	cmp	r3, #2
 8001392:	f040 80be 	bne.w	8001512 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001396:	4b65      	ldr	r3, [pc, #404]	@ (800152c <HAL_CAN_ConfigFilter+0x1bc>)
 8001398:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80013a0:	f043 0201 	orr.w	r2, r3, #1
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80013b0:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c4:	021b      	lsls	r3, r3, #8
 80013c6:	431a      	orrs	r2, r3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	f003 031f 	and.w	r3, r3, #31
 80013d6:	2201      	movs	r2, #1
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	43db      	mvns	r3, r3
 80013e8:	401a      	ands	r2, r3
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	69db      	ldr	r3, [r3, #28]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d123      	bne.n	8001440 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	43db      	mvns	r3, r3
 8001402:	401a      	ands	r2, r3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001416:	683a      	ldr	r2, [r7, #0]
 8001418:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800141a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	3248      	adds	r2, #72	@ 0x48
 8001420:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001434:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001436:	6979      	ldr	r1, [r7, #20]
 8001438:	3348      	adds	r3, #72	@ 0x48
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	440b      	add	r3, r1
 800143e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	69db      	ldr	r3, [r3, #28]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d122      	bne.n	800148e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	431a      	orrs	r2, r3
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001468:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	3248      	adds	r2, #72	@ 0x48
 800146e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001482:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001484:	6979      	ldr	r1, [r7, #20]
 8001486:	3348      	adds	r3, #72	@ 0x48
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	440b      	add	r3, r1
 800148c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d109      	bne.n	80014aa <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	43db      	mvns	r3, r3
 80014a0:	401a      	ands	r2, r3
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80014a8:	e007      	b.n	80014ba <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	431a      	orrs	r2, r3
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d109      	bne.n	80014d6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	43db      	mvns	r3, r3
 80014cc:	401a      	ands	r2, r3
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80014d4:	e007      	b.n	80014e6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	431a      	orrs	r2, r3
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	6a1b      	ldr	r3, [r3, #32]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d107      	bne.n	80014fe <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	431a      	orrs	r2, r3
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001504:	f023 0201 	bic.w	r2, r3, #1
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	e006      	b.n	8001520 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001516:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
  }
}
 8001520:	4618      	mov	r0, r3
 8001522:	371c      	adds	r7, #28
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	40006400 	.word	0x40006400

08001530 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2b01      	cmp	r3, #1
 8001542:	d12e      	bne.n	80015a2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2202      	movs	r2, #2
 8001548:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 0201 	bic.w	r2, r2, #1
 800155a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800155c:	f7ff fc9c 	bl	8000e98 <HAL_GetTick>
 8001560:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001562:	e012      	b.n	800158a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001564:	f7ff fc98 	bl	8000e98 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b0a      	cmp	r3, #10
 8001570:	d90b      	bls.n	800158a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001576:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2205      	movs	r2, #5
 8001582:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e012      	b.n	80015b0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1e5      	bne.n	8001564 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800159e:	2300      	movs	r3, #0
 80015a0:	e006      	b.n	80015b0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
  }
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b089      	sub	sp, #36	@ 0x24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
 80015c4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015cc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80015d6:	7ffb      	ldrb	r3, [r7, #31]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d003      	beq.n	80015e4 <HAL_CAN_AddTxMessage+0x2c>
 80015dc:	7ffb      	ldrb	r3, [r7, #31]
 80015de:	2b02      	cmp	r3, #2
 80015e0:	f040 80ad 	bne.w	800173e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d10a      	bne.n	8001604 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d105      	bne.n	8001604 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 8095 	beq.w	800172e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	0e1b      	lsrs	r3, r3, #24
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800160e:	2201      	movs	r2, #1
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	409a      	lsls	r2, r3
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d10d      	bne.n	800163c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800162a:	68f9      	ldr	r1, [r7, #12]
 800162c:	6809      	ldr	r1, [r1, #0]
 800162e:	431a      	orrs	r2, r3
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	3318      	adds	r3, #24
 8001634:	011b      	lsls	r3, r3, #4
 8001636:	440b      	add	r3, r1
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	e00f      	b.n	800165c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001646:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800164c:	68f9      	ldr	r1, [r7, #12]
 800164e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001650:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	3318      	adds	r3, #24
 8001656:	011b      	lsls	r3, r3, #4
 8001658:	440b      	add	r3, r1
 800165a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6819      	ldr	r1, [r3, #0]
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	691a      	ldr	r2, [r3, #16]
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	3318      	adds	r3, #24
 8001668:	011b      	lsls	r3, r3, #4
 800166a:	440b      	add	r3, r1
 800166c:	3304      	adds	r3, #4
 800166e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	7d1b      	ldrb	r3, [r3, #20]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d111      	bne.n	800169c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	3318      	adds	r3, #24
 8001680:	011b      	lsls	r3, r3, #4
 8001682:	4413      	add	r3, r2
 8001684:	3304      	adds	r3, #4
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	68fa      	ldr	r2, [r7, #12]
 800168a:	6811      	ldr	r1, [r2, #0]
 800168c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	3318      	adds	r3, #24
 8001694:	011b      	lsls	r3, r3, #4
 8001696:	440b      	add	r3, r1
 8001698:	3304      	adds	r3, #4
 800169a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3307      	adds	r3, #7
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	061a      	lsls	r2, r3, #24
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3306      	adds	r3, #6
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	041b      	lsls	r3, r3, #16
 80016ac:	431a      	orrs	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	3305      	adds	r3, #5
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	021b      	lsls	r3, r3, #8
 80016b6:	4313      	orrs	r3, r2
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	3204      	adds	r2, #4
 80016bc:	7812      	ldrb	r2, [r2, #0]
 80016be:	4610      	mov	r0, r2
 80016c0:	68fa      	ldr	r2, [r7, #12]
 80016c2:	6811      	ldr	r1, [r2, #0]
 80016c4:	ea43 0200 	orr.w	r2, r3, r0
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	011b      	lsls	r3, r3, #4
 80016cc:	440b      	add	r3, r1
 80016ce:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80016d2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3303      	adds	r3, #3
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	061a      	lsls	r2, r3, #24
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3302      	adds	r3, #2
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	041b      	lsls	r3, r3, #16
 80016e4:	431a      	orrs	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3301      	adds	r3, #1
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	021b      	lsls	r3, r3, #8
 80016ee:	4313      	orrs	r3, r2
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	7812      	ldrb	r2, [r2, #0]
 80016f4:	4610      	mov	r0, r2
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	6811      	ldr	r1, [r2, #0]
 80016fa:	ea43 0200 	orr.w	r2, r3, r0
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	011b      	lsls	r3, r3, #4
 8001702:	440b      	add	r3, r1
 8001704:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001708:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	3318      	adds	r3, #24
 8001712:	011b      	lsls	r3, r3, #4
 8001714:	4413      	add	r3, r2
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	6811      	ldr	r1, [r2, #0]
 800171c:	f043 0201 	orr.w	r2, r3, #1
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	3318      	adds	r3, #24
 8001724:	011b      	lsls	r3, r3, #4
 8001726:	440b      	add	r3, r1
 8001728:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800172a:	2300      	movs	r3, #0
 800172c:	e00e      	b.n	800174c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001732:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e006      	b.n	800174c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001742:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
  }
}
 800174c:	4618      	mov	r0, r3
 800174e:	3724      	adds	r7, #36	@ 0x24
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001760:	2300      	movs	r3, #0
 8001762:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f893 3020 	ldrb.w	r3, [r3, #32]
 800176a:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800176c:	7afb      	ldrb	r3, [r7, #11]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d002      	beq.n	8001778 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001772:	7afb      	ldrb	r3, [r7, #11]
 8001774:	2b02      	cmp	r3, #2
 8001776:	d11d      	bne.n	80017b4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d002      	beq.n	800178c <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	3301      	adds	r3, #1
 800178a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d002      	beq.n	80017a0 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	3301      	adds	r3, #1
 800179e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d002      	beq.n	80017b4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	3301      	adds	r3, #1
 80017b2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80017b4:	68fb      	ldr	r3, [r7, #12]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80017c2:	b480      	push	{r7}
 80017c4:	b087      	sub	sp, #28
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	60f8      	str	r0, [r7, #12]
 80017ca:	60b9      	str	r1, [r7, #8]
 80017cc:	607a      	str	r2, [r7, #4]
 80017ce:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017d6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80017d8:	7dfb      	ldrb	r3, [r7, #23]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d003      	beq.n	80017e6 <HAL_CAN_GetRxMessage+0x24>
 80017de:	7dfb      	ldrb	r3, [r7, #23]
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	f040 8103 	bne.w	80019ec <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d10e      	bne.n	800180a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	f003 0303 	and.w	r3, r3, #3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d116      	bne.n	8001828 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e0f7      	b.n	80019fa <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	2b00      	cmp	r3, #0
 8001816:	d107      	bne.n	8001828 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e0e8      	b.n	80019fa <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	331b      	adds	r3, #27
 8001830:	011b      	lsls	r3, r3, #4
 8001832:	4413      	add	r3, r2
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0204 	and.w	r2, r3, #4
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d10c      	bne.n	8001860 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	331b      	adds	r3, #27
 800184e:	011b      	lsls	r3, r3, #4
 8001850:	4413      	add	r3, r2
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	0d5b      	lsrs	r3, r3, #21
 8001856:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	e00b      	b.n	8001878 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	331b      	adds	r3, #27
 8001868:	011b      	lsls	r3, r3, #4
 800186a:	4413      	add	r3, r2
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	08db      	lsrs	r3, r3, #3
 8001870:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	331b      	adds	r3, #27
 8001880:	011b      	lsls	r3, r3, #4
 8001882:	4413      	add	r3, r2
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0202 	and.w	r2, r3, #2
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	331b      	adds	r3, #27
 8001896:	011b      	lsls	r3, r3, #4
 8001898:	4413      	add	r3, r2
 800189a:	3304      	adds	r3, #4
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2208      	movs	r2, #8
 80018aa:	611a      	str	r2, [r3, #16]
 80018ac:	e00b      	b.n	80018c6 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	331b      	adds	r3, #27
 80018b6:	011b      	lsls	r3, r3, #4
 80018b8:	4413      	add	r3, r2
 80018ba:	3304      	adds	r3, #4
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 020f 	and.w	r2, r3, #15
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	331b      	adds	r3, #27
 80018ce:	011b      	lsls	r3, r3, #4
 80018d0:	4413      	add	r3, r2
 80018d2:	3304      	adds	r3, #4
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	0a1b      	lsrs	r3, r3, #8
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	331b      	adds	r3, #27
 80018e6:	011b      	lsls	r3, r3, #4
 80018e8:	4413      	add	r3, r2
 80018ea:	3304      	adds	r3, #4
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	0c1b      	lsrs	r3, r3, #16
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	011b      	lsls	r3, r3, #4
 80018fe:	4413      	add	r3, r2
 8001900:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	b2da      	uxtb	r2, r3
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	011b      	lsls	r3, r3, #4
 8001914:	4413      	add	r3, r2
 8001916:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	0a1a      	lsrs	r2, r3, #8
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	3301      	adds	r3, #1
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	011b      	lsls	r3, r3, #4
 800192e:	4413      	add	r3, r2
 8001930:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	0c1a      	lsrs	r2, r3, #16
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	3302      	adds	r3, #2
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	4413      	add	r3, r2
 800194a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	0e1a      	lsrs	r2, r3, #24
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	3303      	adds	r3, #3
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	011b      	lsls	r3, r3, #4
 8001962:	4413      	add	r3, r2
 8001964:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	3304      	adds	r3, #4
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	011b      	lsls	r3, r3, #4
 800197a:	4413      	add	r3, r2
 800197c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	0a1a      	lsrs	r2, r3, #8
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	3305      	adds	r3, #5
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	011b      	lsls	r3, r3, #4
 8001994:	4413      	add	r3, r2
 8001996:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	0c1a      	lsrs	r2, r3, #16
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	3306      	adds	r3, #6
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	011b      	lsls	r3, r3, #4
 80019ae:	4413      	add	r3, r2
 80019b0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	0e1a      	lsrs	r2, r3, #24
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	3307      	adds	r3, #7
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d108      	bne.n	80019d8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68da      	ldr	r2, [r3, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f042 0220 	orr.w	r2, r2, #32
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	e007      	b.n	80019e8 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	691a      	ldr	r2, [r3, #16]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0220 	orr.w	r2, r2, #32
 80019e6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80019e8:	2300      	movs	r3, #0
 80019ea:	e006      	b.n	80019fa <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
  }
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	371c      	adds	r7, #28
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b085      	sub	sp, #20
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a16:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d002      	beq.n	8001a24 <HAL_CAN_ActivateNotification+0x1e>
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d109      	bne.n	8001a38 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6959      	ldr	r1, [r3, #20]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001a34:	2300      	movs	r3, #0
 8001a36:	e006      	b.n	8001a46 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
  }
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b08a      	sub	sp, #40	@ 0x28
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	695b      	ldr	r3, [r3, #20]
 8001a64:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001a8e:	6a3b      	ldr	r3, [r7, #32]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d07c      	beq.n	8001b92 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d023      	beq.n	8001aea <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 f983 	bl	8001dc0 <HAL_CAN_TxMailbox0CompleteCallback>
 8001aba:	e016      	b.n	8001aea <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	f003 0304 	and.w	r3, r3, #4
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d004      	beq.n	8001ad0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001acc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ace:	e00c      	b.n	8001aea <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d004      	beq.n	8001ae4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001adc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ae0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ae2:	e002      	b.n	8001aea <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 f989 	bl	8001dfc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d024      	beq.n	8001b3e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001afc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f963 	bl	8001dd4 <HAL_CAN_TxMailbox1CompleteCallback>
 8001b0e:	e016      	b.n	8001b3e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d004      	beq.n	8001b24 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b20:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b22:	e00c      	b.n	8001b3e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d004      	beq.n	8001b38 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b34:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b36:	e002      	b.n	8001b3e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f000 f969 	bl	8001e10 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d024      	beq.n	8001b92 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b50:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d003      	beq.n	8001b64 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f943 	bl	8001de8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001b62:	e016      	b.n	8001b92 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d004      	beq.n	8001b78 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b74:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b76:	e00c      	b.n	8001b92 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d004      	beq.n	8001b8c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b88:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b8a:	e002      	b.n	8001b92 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 f949 	bl	8001e24 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001b92:	6a3b      	ldr	r3, [r7, #32]
 8001b94:	f003 0308 	and.w	r3, r3, #8
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d00c      	beq.n	8001bb6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	f003 0310 	and.w	r3, r3, #16
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d007      	beq.n	8001bb6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bac:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2210      	movs	r2, #16
 8001bb4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001bb6:	6a3b      	ldr	r3, [r7, #32]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d00b      	beq.n	8001bd8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f003 0308 	and.w	r3, r3, #8
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d006      	beq.n	8001bd8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2208      	movs	r2, #8
 8001bd0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f930 	bl	8001e38 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001bd8:	6a3b      	ldr	r3, [r7, #32]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d009      	beq.n	8001bf6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	f003 0303 	and.w	r3, r3, #3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d002      	beq.n	8001bf6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7fe fca3 	bl	800053c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001bf6:	6a3b      	ldr	r3, [r7, #32]
 8001bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00c      	beq.n	8001c1a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	f003 0310 	and.w	r3, r3, #16
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d007      	beq.n	8001c1a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c10:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2210      	movs	r2, #16
 8001c18:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001c1a:	6a3b      	ldr	r3, [r7, #32]
 8001c1c:	f003 0320 	and.w	r3, r3, #32
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d00b      	beq.n	8001c3c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d006      	beq.n	8001c3c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2208      	movs	r2, #8
 8001c34:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f912 	bl	8001e60 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001c3c:	6a3b      	ldr	r3, [r7, #32]
 8001c3e:	f003 0310 	and.w	r3, r3, #16
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d009      	beq.n	8001c5a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d002      	beq.n	8001c5a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 f8f9 	bl	8001e4c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001c5a:	6a3b      	ldr	r3, [r7, #32]
 8001c5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00b      	beq.n	8001c7c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f003 0310 	and.w	r3, r3, #16
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d006      	beq.n	8001c7c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2210      	movs	r2, #16
 8001c74:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f8fc 	bl	8001e74 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001c7c:	6a3b      	ldr	r3, [r7, #32]
 8001c7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00b      	beq.n	8001c9e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	f003 0308 	and.w	r3, r3, #8
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d006      	beq.n	8001c9e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2208      	movs	r2, #8
 8001c96:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 f8f5 	bl	8001e88 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001c9e:	6a3b      	ldr	r3, [r7, #32]
 8001ca0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d07b      	beq.n	8001da0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f003 0304 	and.w	r3, r3, #4
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d072      	beq.n	8001d98 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001cb2:	6a3b      	ldr	r3, [r7, #32]
 8001cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d008      	beq.n	8001cce <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d008      	beq.n	8001cea <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce4:	f043 0302 	orr.w	r3, r3, #2
 8001ce8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001cea:	6a3b      	ldr	r3, [r7, #32]
 8001cec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d008      	beq.n	8001d06 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d06:	6a3b      	ldr	r3, [r7, #32]
 8001d08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d043      	beq.n	8001d98 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d03e      	beq.n	8001d98 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d20:	2b60      	cmp	r3, #96	@ 0x60
 8001d22:	d02b      	beq.n	8001d7c <HAL_CAN_IRQHandler+0x32a>
 8001d24:	2b60      	cmp	r3, #96	@ 0x60
 8001d26:	d82e      	bhi.n	8001d86 <HAL_CAN_IRQHandler+0x334>
 8001d28:	2b50      	cmp	r3, #80	@ 0x50
 8001d2a:	d022      	beq.n	8001d72 <HAL_CAN_IRQHandler+0x320>
 8001d2c:	2b50      	cmp	r3, #80	@ 0x50
 8001d2e:	d82a      	bhi.n	8001d86 <HAL_CAN_IRQHandler+0x334>
 8001d30:	2b40      	cmp	r3, #64	@ 0x40
 8001d32:	d019      	beq.n	8001d68 <HAL_CAN_IRQHandler+0x316>
 8001d34:	2b40      	cmp	r3, #64	@ 0x40
 8001d36:	d826      	bhi.n	8001d86 <HAL_CAN_IRQHandler+0x334>
 8001d38:	2b30      	cmp	r3, #48	@ 0x30
 8001d3a:	d010      	beq.n	8001d5e <HAL_CAN_IRQHandler+0x30c>
 8001d3c:	2b30      	cmp	r3, #48	@ 0x30
 8001d3e:	d822      	bhi.n	8001d86 <HAL_CAN_IRQHandler+0x334>
 8001d40:	2b10      	cmp	r3, #16
 8001d42:	d002      	beq.n	8001d4a <HAL_CAN_IRQHandler+0x2f8>
 8001d44:	2b20      	cmp	r3, #32
 8001d46:	d005      	beq.n	8001d54 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001d48:	e01d      	b.n	8001d86 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4c:	f043 0308 	orr.w	r3, r3, #8
 8001d50:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d52:	e019      	b.n	8001d88 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d56:	f043 0310 	orr.w	r3, r3, #16
 8001d5a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d5c:	e014      	b.n	8001d88 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d60:	f043 0320 	orr.w	r3, r3, #32
 8001d64:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d66:	e00f      	b.n	8001d88 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d6e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d70:	e00a      	b.n	8001d88 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d78:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d7a:	e005      	b.n	8001d88 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d82:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d84:	e000      	b.n	8001d88 <HAL_CAN_IRQHandler+0x336>
            break;
 8001d86:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	699a      	ldr	r2, [r3, #24]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001d96:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2204      	movs	r2, #4
 8001d9e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d008      	beq.n	8001db8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dac:	431a      	orrs	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f872 	bl	8001e9c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001db8:	bf00      	nop
 8001dba:	3728      	adds	r7, #40	@ 0x28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ecc:	4013      	ands	r3, r2
 8001ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001edc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ee2:	4a04      	ldr	r2, [pc, #16]	@ (8001ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	60d3      	str	r3, [r2, #12]
}
 8001ee8:	bf00      	nop
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001efc:	4b04      	ldr	r3, [pc, #16]	@ (8001f10 <__NVIC_GetPriorityGrouping+0x18>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	0a1b      	lsrs	r3, r3, #8
 8001f02:	f003 0307 	and.w	r3, r3, #7
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	db0b      	blt.n	8001f3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	f003 021f 	and.w	r2, r3, #31
 8001f2c:	4907      	ldr	r1, [pc, #28]	@ (8001f4c <__NVIC_EnableIRQ+0x38>)
 8001f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f32:	095b      	lsrs	r3, r3, #5
 8001f34:	2001      	movs	r0, #1
 8001f36:	fa00 f202 	lsl.w	r2, r0, r2
 8001f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	e000e100 	.word	0xe000e100

08001f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	6039      	str	r1, [r7, #0]
 8001f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	db0a      	blt.n	8001f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	490c      	ldr	r1, [pc, #48]	@ (8001f9c <__NVIC_SetPriority+0x4c>)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	0112      	lsls	r2, r2, #4
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	440b      	add	r3, r1
 8001f74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f78:	e00a      	b.n	8001f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	4908      	ldr	r1, [pc, #32]	@ (8001fa0 <__NVIC_SetPriority+0x50>)
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	3b04      	subs	r3, #4
 8001f88:	0112      	lsls	r2, r2, #4
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	761a      	strb	r2, [r3, #24]
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000e100 	.word	0xe000e100
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b089      	sub	sp, #36	@ 0x24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f1c3 0307 	rsb	r3, r3, #7
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	bf28      	it	cs
 8001fc2:	2304      	movcs	r3, #4
 8001fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3304      	adds	r3, #4
 8001fca:	2b06      	cmp	r3, #6
 8001fcc:	d902      	bls.n	8001fd4 <NVIC_EncodePriority+0x30>
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3b03      	subs	r3, #3
 8001fd2:	e000      	b.n	8001fd6 <NVIC_EncodePriority+0x32>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43da      	mvns	r2, r3
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff6:	43d9      	mvns	r1, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ffc:	4313      	orrs	r3, r2
         );
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3724      	adds	r7, #36	@ 0x24
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
	...

0800200c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3b01      	subs	r3, #1
 8002018:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800201c:	d301      	bcc.n	8002022 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800201e:	2301      	movs	r3, #1
 8002020:	e00f      	b.n	8002042 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002022:	4a0a      	ldr	r2, [pc, #40]	@ (800204c <SysTick_Config+0x40>)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3b01      	subs	r3, #1
 8002028:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800202a:	210f      	movs	r1, #15
 800202c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002030:	f7ff ff8e 	bl	8001f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002034:	4b05      	ldr	r3, [pc, #20]	@ (800204c <SysTick_Config+0x40>)
 8002036:	2200      	movs	r2, #0
 8002038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800203a:	4b04      	ldr	r3, [pc, #16]	@ (800204c <SysTick_Config+0x40>)
 800203c:	2207      	movs	r2, #7
 800203e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	e000e010 	.word	0xe000e010

08002050 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f7ff ff29 	bl	8001eb0 <__NVIC_SetPriorityGrouping>
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002066:	b580      	push	{r7, lr}
 8002068:	b086      	sub	sp, #24
 800206a:	af00      	add	r7, sp, #0
 800206c:	4603      	mov	r3, r0
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	607a      	str	r2, [r7, #4]
 8002072:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002078:	f7ff ff3e 	bl	8001ef8 <__NVIC_GetPriorityGrouping>
 800207c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	68b9      	ldr	r1, [r7, #8]
 8002082:	6978      	ldr	r0, [r7, #20]
 8002084:	f7ff ff8e 	bl	8001fa4 <NVIC_EncodePriority>
 8002088:	4602      	mov	r2, r0
 800208a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800208e:	4611      	mov	r1, r2
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff ff5d 	bl	8001f50 <__NVIC_SetPriority>
}
 8002096:	bf00      	nop
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	4603      	mov	r3, r0
 80020a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff ff31 	bl	8001f14 <__NVIC_EnableIRQ>
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b082      	sub	sp, #8
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7ff ffa2 	bl	800200c <SysTick_Config>
 80020c8:	4603      	mov	r3, r0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
	...

080020d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b089      	sub	sp, #36	@ 0x24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ea:	2300      	movs	r3, #0
 80020ec:	61fb      	str	r3, [r7, #28]
 80020ee:	e165      	b.n	80023bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020f0:	2201      	movs	r2, #1
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	4013      	ands	r3, r2
 8002102:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	429a      	cmp	r2, r3
 800210a:	f040 8154 	bne.w	80023b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	2b01      	cmp	r3, #1
 8002118:	d005      	beq.n	8002126 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002122:	2b02      	cmp	r3, #2
 8002124:	d130      	bne.n	8002188 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	2203      	movs	r2, #3
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43db      	mvns	r3, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4013      	ands	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	68da      	ldr	r2, [r3, #12]
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4313      	orrs	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800215c:	2201      	movs	r2, #1
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	091b      	lsrs	r3, r3, #4
 8002172:	f003 0201 	and.w	r2, r3, #1
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4313      	orrs	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 0303 	and.w	r3, r3, #3
 8002190:	2b03      	cmp	r3, #3
 8002192:	d017      	beq.n	80021c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	2203      	movs	r2, #3
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 0303 	and.w	r3, r3, #3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d123      	bne.n	8002218 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	08da      	lsrs	r2, r3, #3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3208      	adds	r2, #8
 80021d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	220f      	movs	r2, #15
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4013      	ands	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	691a      	ldr	r2, [r3, #16]
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	08da      	lsrs	r2, r3, #3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3208      	adds	r2, #8
 8002212:	69b9      	ldr	r1, [r7, #24]
 8002214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	2203      	movs	r2, #3
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 0203 	and.w	r2, r3, #3
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 80ae 	beq.w	80023b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	4b5d      	ldr	r3, [pc, #372]	@ (80023d4 <HAL_GPIO_Init+0x300>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002262:	4a5c      	ldr	r2, [pc, #368]	@ (80023d4 <HAL_GPIO_Init+0x300>)
 8002264:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002268:	6453      	str	r3, [r2, #68]	@ 0x44
 800226a:	4b5a      	ldr	r3, [pc, #360]	@ (80023d4 <HAL_GPIO_Init+0x300>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002276:	4a58      	ldr	r2, [pc, #352]	@ (80023d8 <HAL_GPIO_Init+0x304>)
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	089b      	lsrs	r3, r3, #2
 800227c:	3302      	adds	r3, #2
 800227e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	220f      	movs	r2, #15
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4013      	ands	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a4f      	ldr	r2, [pc, #316]	@ (80023dc <HAL_GPIO_Init+0x308>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d025      	beq.n	80022ee <HAL_GPIO_Init+0x21a>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a4e      	ldr	r2, [pc, #312]	@ (80023e0 <HAL_GPIO_Init+0x30c>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d01f      	beq.n	80022ea <HAL_GPIO_Init+0x216>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a4d      	ldr	r2, [pc, #308]	@ (80023e4 <HAL_GPIO_Init+0x310>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d019      	beq.n	80022e6 <HAL_GPIO_Init+0x212>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a4c      	ldr	r2, [pc, #304]	@ (80023e8 <HAL_GPIO_Init+0x314>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d013      	beq.n	80022e2 <HAL_GPIO_Init+0x20e>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a4b      	ldr	r2, [pc, #300]	@ (80023ec <HAL_GPIO_Init+0x318>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d00d      	beq.n	80022de <HAL_GPIO_Init+0x20a>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a4a      	ldr	r2, [pc, #296]	@ (80023f0 <HAL_GPIO_Init+0x31c>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d007      	beq.n	80022da <HAL_GPIO_Init+0x206>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a49      	ldr	r2, [pc, #292]	@ (80023f4 <HAL_GPIO_Init+0x320>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d101      	bne.n	80022d6 <HAL_GPIO_Init+0x202>
 80022d2:	2306      	movs	r3, #6
 80022d4:	e00c      	b.n	80022f0 <HAL_GPIO_Init+0x21c>
 80022d6:	2307      	movs	r3, #7
 80022d8:	e00a      	b.n	80022f0 <HAL_GPIO_Init+0x21c>
 80022da:	2305      	movs	r3, #5
 80022dc:	e008      	b.n	80022f0 <HAL_GPIO_Init+0x21c>
 80022de:	2304      	movs	r3, #4
 80022e0:	e006      	b.n	80022f0 <HAL_GPIO_Init+0x21c>
 80022e2:	2303      	movs	r3, #3
 80022e4:	e004      	b.n	80022f0 <HAL_GPIO_Init+0x21c>
 80022e6:	2302      	movs	r3, #2
 80022e8:	e002      	b.n	80022f0 <HAL_GPIO_Init+0x21c>
 80022ea:	2301      	movs	r3, #1
 80022ec:	e000      	b.n	80022f0 <HAL_GPIO_Init+0x21c>
 80022ee:	2300      	movs	r3, #0
 80022f0:	69fa      	ldr	r2, [r7, #28]
 80022f2:	f002 0203 	and.w	r2, r2, #3
 80022f6:	0092      	lsls	r2, r2, #2
 80022f8:	4093      	lsls	r3, r2
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002300:	4935      	ldr	r1, [pc, #212]	@ (80023d8 <HAL_GPIO_Init+0x304>)
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	089b      	lsrs	r3, r3, #2
 8002306:	3302      	adds	r3, #2
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800230e:	4b3a      	ldr	r3, [pc, #232]	@ (80023f8 <HAL_GPIO_Init+0x324>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	43db      	mvns	r3, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002332:	4a31      	ldr	r2, [pc, #196]	@ (80023f8 <HAL_GPIO_Init+0x324>)
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002338:	4b2f      	ldr	r3, [pc, #188]	@ (80023f8 <HAL_GPIO_Init+0x324>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4313      	orrs	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800235c:	4a26      	ldr	r2, [pc, #152]	@ (80023f8 <HAL_GPIO_Init+0x324>)
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002362:	4b25      	ldr	r3, [pc, #148]	@ (80023f8 <HAL_GPIO_Init+0x324>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	43db      	mvns	r3, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002386:	4a1c      	ldr	r2, [pc, #112]	@ (80023f8 <HAL_GPIO_Init+0x324>)
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800238c:	4b1a      	ldr	r3, [pc, #104]	@ (80023f8 <HAL_GPIO_Init+0x324>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023b0:	4a11      	ldr	r2, [pc, #68]	@ (80023f8 <HAL_GPIO_Init+0x324>)
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	3301      	adds	r3, #1
 80023ba:	61fb      	str	r3, [r7, #28]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	2b0f      	cmp	r3, #15
 80023c0:	f67f ae96 	bls.w	80020f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023c4:	bf00      	nop
 80023c6:	bf00      	nop
 80023c8:	3724      	adds	r7, #36	@ 0x24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40023800 	.word	0x40023800
 80023d8:	40013800 	.word	0x40013800
 80023dc:	40020000 	.word	0x40020000
 80023e0:	40020400 	.word	0x40020400
 80023e4:	40020800 	.word	0x40020800
 80023e8:	40020c00 	.word	0x40020c00
 80023ec:	40021000 	.word	0x40021000
 80023f0:	40021400 	.word	0x40021400
 80023f4:	40021800 	.word	0x40021800
 80023f8:	40013c00 	.word	0x40013c00

080023fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	807b      	strh	r3, [r7, #2]
 8002408:	4613      	mov	r3, r2
 800240a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800240c:	787b      	ldrb	r3, [r7, #1]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002412:	887a      	ldrh	r2, [r7, #2]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002418:	e003      	b.n	8002422 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800241a:	887b      	ldrh	r3, [r7, #2]
 800241c:	041a      	lsls	r2, r3, #16
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	619a      	str	r2, [r3, #24]
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
	...

08002430 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e12b      	b.n	800269a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d106      	bne.n	800245c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7fe fba8 	bl	8000bac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2224      	movs	r2, #36	@ 0x24
 8002460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 0201 	bic.w	r2, r2, #1
 8002472:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002482:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002492:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002494:	f000 fa02 	bl	800289c <HAL_RCC_GetPCLK1Freq>
 8002498:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	4a81      	ldr	r2, [pc, #516]	@ (80026a4 <HAL_I2C_Init+0x274>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d807      	bhi.n	80024b4 <HAL_I2C_Init+0x84>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4a80      	ldr	r2, [pc, #512]	@ (80026a8 <HAL_I2C_Init+0x278>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	bf94      	ite	ls
 80024ac:	2301      	movls	r3, #1
 80024ae:	2300      	movhi	r3, #0
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	e006      	b.n	80024c2 <HAL_I2C_Init+0x92>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4a7d      	ldr	r2, [pc, #500]	@ (80026ac <HAL_I2C_Init+0x27c>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	bf94      	ite	ls
 80024bc:	2301      	movls	r3, #1
 80024be:	2300      	movhi	r3, #0
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e0e7      	b.n	800269a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	4a78      	ldr	r2, [pc, #480]	@ (80026b0 <HAL_I2C_Init+0x280>)
 80024ce:	fba2 2303 	umull	r2, r3, r2, r3
 80024d2:	0c9b      	lsrs	r3, r3, #18
 80024d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68ba      	ldr	r2, [r7, #8]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	4a6a      	ldr	r2, [pc, #424]	@ (80026a4 <HAL_I2C_Init+0x274>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d802      	bhi.n	8002504 <HAL_I2C_Init+0xd4>
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	3301      	adds	r3, #1
 8002502:	e009      	b.n	8002518 <HAL_I2C_Init+0xe8>
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800250a:	fb02 f303 	mul.w	r3, r2, r3
 800250e:	4a69      	ldr	r2, [pc, #420]	@ (80026b4 <HAL_I2C_Init+0x284>)
 8002510:	fba2 2303 	umull	r2, r3, r2, r3
 8002514:	099b      	lsrs	r3, r3, #6
 8002516:	3301      	adds	r3, #1
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	430b      	orrs	r3, r1
 800251e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800252a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	495c      	ldr	r1, [pc, #368]	@ (80026a4 <HAL_I2C_Init+0x274>)
 8002534:	428b      	cmp	r3, r1
 8002536:	d819      	bhi.n	800256c <HAL_I2C_Init+0x13c>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	1e59      	subs	r1, r3, #1
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	fbb1 f3f3 	udiv	r3, r1, r3
 8002546:	1c59      	adds	r1, r3, #1
 8002548:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800254c:	400b      	ands	r3, r1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_I2C_Init+0x138>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	1e59      	subs	r1, r3, #1
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002560:	3301      	adds	r3, #1
 8002562:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002566:	e051      	b.n	800260c <HAL_I2C_Init+0x1dc>
 8002568:	2304      	movs	r3, #4
 800256a:	e04f      	b.n	800260c <HAL_I2C_Init+0x1dc>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d111      	bne.n	8002598 <HAL_I2C_Init+0x168>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	1e58      	subs	r0, r3, #1
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6859      	ldr	r1, [r3, #4]
 800257c:	460b      	mov	r3, r1
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	440b      	add	r3, r1
 8002582:	fbb0 f3f3 	udiv	r3, r0, r3
 8002586:	3301      	adds	r3, #1
 8002588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800258c:	2b00      	cmp	r3, #0
 800258e:	bf0c      	ite	eq
 8002590:	2301      	moveq	r3, #1
 8002592:	2300      	movne	r3, #0
 8002594:	b2db      	uxtb	r3, r3
 8002596:	e012      	b.n	80025be <HAL_I2C_Init+0x18e>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	1e58      	subs	r0, r3, #1
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6859      	ldr	r1, [r3, #4]
 80025a0:	460b      	mov	r3, r1
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	0099      	lsls	r1, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ae:	3301      	adds	r3, #1
 80025b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	bf0c      	ite	eq
 80025b8:	2301      	moveq	r3, #1
 80025ba:	2300      	movne	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_I2C_Init+0x196>
 80025c2:	2301      	movs	r3, #1
 80025c4:	e022      	b.n	800260c <HAL_I2C_Init+0x1dc>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10e      	bne.n	80025ec <HAL_I2C_Init+0x1bc>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	1e58      	subs	r0, r3, #1
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6859      	ldr	r1, [r3, #4]
 80025d6:	460b      	mov	r3, r1
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	440b      	add	r3, r1
 80025dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80025e0:	3301      	adds	r3, #1
 80025e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025ea:	e00f      	b.n	800260c <HAL_I2C_Init+0x1dc>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	1e58      	subs	r0, r3, #1
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6859      	ldr	r1, [r3, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	0099      	lsls	r1, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002602:	3301      	adds	r3, #1
 8002604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002608:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	6809      	ldr	r1, [r1, #0]
 8002610:	4313      	orrs	r3, r2
 8002612:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69da      	ldr	r2, [r3, #28]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	431a      	orrs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	430a      	orrs	r2, r1
 800262e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800263a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6911      	ldr	r1, [r2, #16]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	68d2      	ldr	r2, [r2, #12]
 8002646:	4311      	orrs	r1, r2
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	430b      	orrs	r3, r1
 800264e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695a      	ldr	r2, [r3, #20]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0201 	orr.w	r2, r2, #1
 800267a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2220      	movs	r2, #32
 8002686:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	000186a0 	.word	0x000186a0
 80026a8:	001e847f 	.word	0x001e847f
 80026ac:	003d08ff 	.word	0x003d08ff
 80026b0:	431bde83 	.word	0x431bde83
 80026b4:	10624dd3 	.word	0x10624dd3

080026b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e0cc      	b.n	8002866 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026cc:	4b68      	ldr	r3, [pc, #416]	@ (8002870 <HAL_RCC_ClockConfig+0x1b8>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 030f 	and.w	r3, r3, #15
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d90c      	bls.n	80026f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026da:	4b65      	ldr	r3, [pc, #404]	@ (8002870 <HAL_RCC_ClockConfig+0x1b8>)
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e2:	4b63      	ldr	r3, [pc, #396]	@ (8002870 <HAL_RCC_ClockConfig+0x1b8>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d001      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e0b8      	b.n	8002866 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d020      	beq.n	8002742 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	d005      	beq.n	8002718 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800270c:	4b59      	ldr	r3, [pc, #356]	@ (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	4a58      	ldr	r2, [pc, #352]	@ (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 8002712:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002716:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0308 	and.w	r3, r3, #8
 8002720:	2b00      	cmp	r3, #0
 8002722:	d005      	beq.n	8002730 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002724:	4b53      	ldr	r3, [pc, #332]	@ (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	4a52      	ldr	r2, [pc, #328]	@ (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 800272a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800272e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002730:	4b50      	ldr	r3, [pc, #320]	@ (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	494d      	ldr	r1, [pc, #308]	@ (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 800273e:	4313      	orrs	r3, r2
 8002740:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d044      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d107      	bne.n	8002766 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002756:	4b47      	ldr	r3, [pc, #284]	@ (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d119      	bne.n	8002796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e07f      	b.n	8002866 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b02      	cmp	r3, #2
 800276c:	d003      	beq.n	8002776 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002772:	2b03      	cmp	r3, #3
 8002774:	d107      	bne.n	8002786 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002776:	4b3f      	ldr	r3, [pc, #252]	@ (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d109      	bne.n	8002796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e06f      	b.n	8002866 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002786:	4b3b      	ldr	r3, [pc, #236]	@ (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e067      	b.n	8002866 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002796:	4b37      	ldr	r3, [pc, #220]	@ (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f023 0203 	bic.w	r2, r3, #3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	4934      	ldr	r1, [pc, #208]	@ (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027a8:	f7fe fb76 	bl	8000e98 <HAL_GetTick>
 80027ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ae:	e00a      	b.n	80027c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b0:	f7fe fb72 	bl	8000e98 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027be:	4293      	cmp	r3, r2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e04f      	b.n	8002866 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c6:	4b2b      	ldr	r3, [pc, #172]	@ (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 020c 	and.w	r2, r3, #12
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d1eb      	bne.n	80027b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027d8:	4b25      	ldr	r3, [pc, #148]	@ (8002870 <HAL_RCC_ClockConfig+0x1b8>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 030f 	and.w	r3, r3, #15
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d20c      	bcs.n	8002800 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e6:	4b22      	ldr	r3, [pc, #136]	@ (8002870 <HAL_RCC_ClockConfig+0x1b8>)
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ee:	4b20      	ldr	r3, [pc, #128]	@ (8002870 <HAL_RCC_ClockConfig+0x1b8>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d001      	beq.n	8002800 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e032      	b.n	8002866 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b00      	cmp	r3, #0
 800280a:	d008      	beq.n	800281e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800280c:	4b19      	ldr	r3, [pc, #100]	@ (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	4916      	ldr	r1, [pc, #88]	@ (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 800281a:	4313      	orrs	r3, r2
 800281c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	2b00      	cmp	r3, #0
 8002828:	d009      	beq.n	800283e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800282a:	4b12      	ldr	r3, [pc, #72]	@ (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	490e      	ldr	r1, [pc, #56]	@ (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 800283a:	4313      	orrs	r3, r2
 800283c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800283e:	f000 f855 	bl	80028ec <HAL_RCC_GetSysClockFreq>
 8002842:	4602      	mov	r2, r0
 8002844:	4b0b      	ldr	r3, [pc, #44]	@ (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	091b      	lsrs	r3, r3, #4
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	490a      	ldr	r1, [pc, #40]	@ (8002878 <HAL_RCC_ClockConfig+0x1c0>)
 8002850:	5ccb      	ldrb	r3, [r1, r3]
 8002852:	fa22 f303 	lsr.w	r3, r2, r3
 8002856:	4a09      	ldr	r2, [pc, #36]	@ (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002858:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800285a:	4b09      	ldr	r3, [pc, #36]	@ (8002880 <HAL_RCC_ClockConfig+0x1c8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f7fe fad6 	bl	8000e10 <HAL_InitTick>

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40023c00 	.word	0x40023c00
 8002874:	40023800 	.word	0x40023800
 8002878:	08003880 	.word	0x08003880
 800287c:	20000004 	.word	0x20000004
 8002880:	20000008 	.word	0x20000008

08002884 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002888:	4b03      	ldr	r3, [pc, #12]	@ (8002898 <HAL_RCC_GetHCLKFreq+0x14>)
 800288a:	681b      	ldr	r3, [r3, #0]
}
 800288c:	4618      	mov	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	20000004 	.word	0x20000004

0800289c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028a0:	f7ff fff0 	bl	8002884 <HAL_RCC_GetHCLKFreq>
 80028a4:	4602      	mov	r2, r0
 80028a6:	4b05      	ldr	r3, [pc, #20]	@ (80028bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	0a9b      	lsrs	r3, r3, #10
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	4903      	ldr	r1, [pc, #12]	@ (80028c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028b2:	5ccb      	ldrb	r3, [r1, r3]
 80028b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40023800 	.word	0x40023800
 80028c0:	08003890 	.word	0x08003890

080028c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028c8:	f7ff ffdc 	bl	8002884 <HAL_RCC_GetHCLKFreq>
 80028cc:	4602      	mov	r2, r0
 80028ce:	4b05      	ldr	r3, [pc, #20]	@ (80028e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	0b5b      	lsrs	r3, r3, #13
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	4903      	ldr	r1, [pc, #12]	@ (80028e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028da:	5ccb      	ldrb	r3, [r1, r3]
 80028dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40023800 	.word	0x40023800
 80028e8:	08003890 	.word	0x08003890

080028ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028f0:	b0ae      	sub	sp, #184	@ 0xb8
 80028f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002900:	2300      	movs	r3, #0
 8002902:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002906:	2300      	movs	r3, #0
 8002908:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800290c:	2300      	movs	r3, #0
 800290e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002912:	4bcb      	ldr	r3, [pc, #812]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 030c 	and.w	r3, r3, #12
 800291a:	2b0c      	cmp	r3, #12
 800291c:	f200 8206 	bhi.w	8002d2c <HAL_RCC_GetSysClockFreq+0x440>
 8002920:	a201      	add	r2, pc, #4	@ (adr r2, 8002928 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002926:	bf00      	nop
 8002928:	0800295d 	.word	0x0800295d
 800292c:	08002d2d 	.word	0x08002d2d
 8002930:	08002d2d 	.word	0x08002d2d
 8002934:	08002d2d 	.word	0x08002d2d
 8002938:	08002965 	.word	0x08002965
 800293c:	08002d2d 	.word	0x08002d2d
 8002940:	08002d2d 	.word	0x08002d2d
 8002944:	08002d2d 	.word	0x08002d2d
 8002948:	0800296d 	.word	0x0800296d
 800294c:	08002d2d 	.word	0x08002d2d
 8002950:	08002d2d 	.word	0x08002d2d
 8002954:	08002d2d 	.word	0x08002d2d
 8002958:	08002b5d 	.word	0x08002b5d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800295c:	4bb9      	ldr	r3, [pc, #740]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x358>)
 800295e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002962:	e1e7      	b.n	8002d34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002964:	4bb8      	ldr	r3, [pc, #736]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002966:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800296a:	e1e3      	b.n	8002d34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800296c:	4bb4      	ldr	r3, [pc, #720]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x354>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002974:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002978:	4bb1      	ldr	r3, [pc, #708]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x354>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d071      	beq.n	8002a68 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002984:	4bae      	ldr	r3, [pc, #696]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	099b      	lsrs	r3, r3, #6
 800298a:	2200      	movs	r2, #0
 800298c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002990:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002994:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800299c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80029a0:	2300      	movs	r3, #0
 80029a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80029a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80029aa:	4622      	mov	r2, r4
 80029ac:	462b      	mov	r3, r5
 80029ae:	f04f 0000 	mov.w	r0, #0
 80029b2:	f04f 0100 	mov.w	r1, #0
 80029b6:	0159      	lsls	r1, r3, #5
 80029b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029bc:	0150      	lsls	r0, r2, #5
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	4621      	mov	r1, r4
 80029c4:	1a51      	subs	r1, r2, r1
 80029c6:	6439      	str	r1, [r7, #64]	@ 0x40
 80029c8:	4629      	mov	r1, r5
 80029ca:	eb63 0301 	sbc.w	r3, r3, r1
 80029ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80029d0:	f04f 0200 	mov.w	r2, #0
 80029d4:	f04f 0300 	mov.w	r3, #0
 80029d8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80029dc:	4649      	mov	r1, r9
 80029de:	018b      	lsls	r3, r1, #6
 80029e0:	4641      	mov	r1, r8
 80029e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029e6:	4641      	mov	r1, r8
 80029e8:	018a      	lsls	r2, r1, #6
 80029ea:	4641      	mov	r1, r8
 80029ec:	1a51      	subs	r1, r2, r1
 80029ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80029f0:	4649      	mov	r1, r9
 80029f2:	eb63 0301 	sbc.w	r3, r3, r1
 80029f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029f8:	f04f 0200 	mov.w	r2, #0
 80029fc:	f04f 0300 	mov.w	r3, #0
 8002a00:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002a04:	4649      	mov	r1, r9
 8002a06:	00cb      	lsls	r3, r1, #3
 8002a08:	4641      	mov	r1, r8
 8002a0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a0e:	4641      	mov	r1, r8
 8002a10:	00ca      	lsls	r2, r1, #3
 8002a12:	4610      	mov	r0, r2
 8002a14:	4619      	mov	r1, r3
 8002a16:	4603      	mov	r3, r0
 8002a18:	4622      	mov	r2, r4
 8002a1a:	189b      	adds	r3, r3, r2
 8002a1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a1e:	462b      	mov	r3, r5
 8002a20:	460a      	mov	r2, r1
 8002a22:	eb42 0303 	adc.w	r3, r2, r3
 8002a26:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	f04f 0300 	mov.w	r3, #0
 8002a30:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002a34:	4629      	mov	r1, r5
 8002a36:	024b      	lsls	r3, r1, #9
 8002a38:	4621      	mov	r1, r4
 8002a3a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a3e:	4621      	mov	r1, r4
 8002a40:	024a      	lsls	r2, r1, #9
 8002a42:	4610      	mov	r0, r2
 8002a44:	4619      	mov	r1, r3
 8002a46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a50:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a54:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002a58:	f7fd fbd4 	bl	8000204 <__aeabi_uldivmod>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4613      	mov	r3, r2
 8002a62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a66:	e067      	b.n	8002b38 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a68:	4b75      	ldr	r3, [pc, #468]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	099b      	lsrs	r3, r3, #6
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002a74:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002a78:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002a82:	2300      	movs	r3, #0
 8002a84:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002a86:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002a8a:	4622      	mov	r2, r4
 8002a8c:	462b      	mov	r3, r5
 8002a8e:	f04f 0000 	mov.w	r0, #0
 8002a92:	f04f 0100 	mov.w	r1, #0
 8002a96:	0159      	lsls	r1, r3, #5
 8002a98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a9c:	0150      	lsls	r0, r2, #5
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	4621      	mov	r1, r4
 8002aa4:	1a51      	subs	r1, r2, r1
 8002aa6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002aa8:	4629      	mov	r1, r5
 8002aaa:	eb63 0301 	sbc.w	r3, r3, r1
 8002aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	f04f 0300 	mov.w	r3, #0
 8002ab8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002abc:	4649      	mov	r1, r9
 8002abe:	018b      	lsls	r3, r1, #6
 8002ac0:	4641      	mov	r1, r8
 8002ac2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ac6:	4641      	mov	r1, r8
 8002ac8:	018a      	lsls	r2, r1, #6
 8002aca:	4641      	mov	r1, r8
 8002acc:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ad0:	4649      	mov	r1, r9
 8002ad2:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ad6:	f04f 0200 	mov.w	r2, #0
 8002ada:	f04f 0300 	mov.w	r3, #0
 8002ade:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ae2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ae6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002aea:	4692      	mov	sl, r2
 8002aec:	469b      	mov	fp, r3
 8002aee:	4623      	mov	r3, r4
 8002af0:	eb1a 0303 	adds.w	r3, sl, r3
 8002af4:	623b      	str	r3, [r7, #32]
 8002af6:	462b      	mov	r3, r5
 8002af8:	eb4b 0303 	adc.w	r3, fp, r3
 8002afc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002afe:	f04f 0200 	mov.w	r2, #0
 8002b02:	f04f 0300 	mov.w	r3, #0
 8002b06:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002b0a:	4629      	mov	r1, r5
 8002b0c:	028b      	lsls	r3, r1, #10
 8002b0e:	4621      	mov	r1, r4
 8002b10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b14:	4621      	mov	r1, r4
 8002b16:	028a      	lsls	r2, r1, #10
 8002b18:	4610      	mov	r0, r2
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b20:	2200      	movs	r2, #0
 8002b22:	673b      	str	r3, [r7, #112]	@ 0x70
 8002b24:	677a      	str	r2, [r7, #116]	@ 0x74
 8002b26:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002b2a:	f7fd fb6b 	bl	8000204 <__aeabi_uldivmod>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	460b      	mov	r3, r1
 8002b32:	4613      	mov	r3, r2
 8002b34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b38:	4b41      	ldr	r3, [pc, #260]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	0c1b      	lsrs	r3, r3, #16
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	3301      	adds	r3, #1
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002b4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002b4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002b5a:	e0eb      	b.n	8002d34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b5c:	4b38      	ldr	r3, [pc, #224]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b68:	4b35      	ldr	r3, [pc, #212]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d06b      	beq.n	8002c4c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b74:	4b32      	ldr	r3, [pc, #200]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	099b      	lsrs	r3, r3, #6
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b7e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002b80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b86:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b88:	2300      	movs	r3, #0
 8002b8a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002b8c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002b90:	4622      	mov	r2, r4
 8002b92:	462b      	mov	r3, r5
 8002b94:	f04f 0000 	mov.w	r0, #0
 8002b98:	f04f 0100 	mov.w	r1, #0
 8002b9c:	0159      	lsls	r1, r3, #5
 8002b9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ba2:	0150      	lsls	r0, r2, #5
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	4621      	mov	r1, r4
 8002baa:	1a51      	subs	r1, r2, r1
 8002bac:	61b9      	str	r1, [r7, #24]
 8002bae:	4629      	mov	r1, r5
 8002bb0:	eb63 0301 	sbc.w	r3, r3, r1
 8002bb4:	61fb      	str	r3, [r7, #28]
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	f04f 0300 	mov.w	r3, #0
 8002bbe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002bc2:	4659      	mov	r1, fp
 8002bc4:	018b      	lsls	r3, r1, #6
 8002bc6:	4651      	mov	r1, sl
 8002bc8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bcc:	4651      	mov	r1, sl
 8002bce:	018a      	lsls	r2, r1, #6
 8002bd0:	4651      	mov	r1, sl
 8002bd2:	ebb2 0801 	subs.w	r8, r2, r1
 8002bd6:	4659      	mov	r1, fp
 8002bd8:	eb63 0901 	sbc.w	r9, r3, r1
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	f04f 0300 	mov.w	r3, #0
 8002be4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002be8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bf0:	4690      	mov	r8, r2
 8002bf2:	4699      	mov	r9, r3
 8002bf4:	4623      	mov	r3, r4
 8002bf6:	eb18 0303 	adds.w	r3, r8, r3
 8002bfa:	613b      	str	r3, [r7, #16]
 8002bfc:	462b      	mov	r3, r5
 8002bfe:	eb49 0303 	adc.w	r3, r9, r3
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	f04f 0200 	mov.w	r2, #0
 8002c08:	f04f 0300 	mov.w	r3, #0
 8002c0c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002c10:	4629      	mov	r1, r5
 8002c12:	024b      	lsls	r3, r1, #9
 8002c14:	4621      	mov	r1, r4
 8002c16:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c1a:	4621      	mov	r1, r4
 8002c1c:	024a      	lsls	r2, r1, #9
 8002c1e:	4610      	mov	r0, r2
 8002c20:	4619      	mov	r1, r3
 8002c22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c26:	2200      	movs	r2, #0
 8002c28:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c2a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002c2c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002c30:	f7fd fae8 	bl	8000204 <__aeabi_uldivmod>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4613      	mov	r3, r2
 8002c3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c3e:	e065      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0x420>
 8002c40:	40023800 	.word	0x40023800
 8002c44:	00f42400 	.word	0x00f42400
 8002c48:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c4c:	4b3d      	ldr	r3, [pc, #244]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0x458>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	099b      	lsrs	r3, r3, #6
 8002c52:	2200      	movs	r2, #0
 8002c54:	4618      	mov	r0, r3
 8002c56:	4611      	mov	r1, r2
 8002c58:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c5c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c5e:	2300      	movs	r3, #0
 8002c60:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c62:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002c66:	4642      	mov	r2, r8
 8002c68:	464b      	mov	r3, r9
 8002c6a:	f04f 0000 	mov.w	r0, #0
 8002c6e:	f04f 0100 	mov.w	r1, #0
 8002c72:	0159      	lsls	r1, r3, #5
 8002c74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c78:	0150      	lsls	r0, r2, #5
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	4641      	mov	r1, r8
 8002c80:	1a51      	subs	r1, r2, r1
 8002c82:	60b9      	str	r1, [r7, #8]
 8002c84:	4649      	mov	r1, r9
 8002c86:	eb63 0301 	sbc.w	r3, r3, r1
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002c98:	4659      	mov	r1, fp
 8002c9a:	018b      	lsls	r3, r1, #6
 8002c9c:	4651      	mov	r1, sl
 8002c9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ca2:	4651      	mov	r1, sl
 8002ca4:	018a      	lsls	r2, r1, #6
 8002ca6:	4651      	mov	r1, sl
 8002ca8:	1a54      	subs	r4, r2, r1
 8002caa:	4659      	mov	r1, fp
 8002cac:	eb63 0501 	sbc.w	r5, r3, r1
 8002cb0:	f04f 0200 	mov.w	r2, #0
 8002cb4:	f04f 0300 	mov.w	r3, #0
 8002cb8:	00eb      	lsls	r3, r5, #3
 8002cba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cbe:	00e2      	lsls	r2, r4, #3
 8002cc0:	4614      	mov	r4, r2
 8002cc2:	461d      	mov	r5, r3
 8002cc4:	4643      	mov	r3, r8
 8002cc6:	18e3      	adds	r3, r4, r3
 8002cc8:	603b      	str	r3, [r7, #0]
 8002cca:	464b      	mov	r3, r9
 8002ccc:	eb45 0303 	adc.w	r3, r5, r3
 8002cd0:	607b      	str	r3, [r7, #4]
 8002cd2:	f04f 0200 	mov.w	r2, #0
 8002cd6:	f04f 0300 	mov.w	r3, #0
 8002cda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cde:	4629      	mov	r1, r5
 8002ce0:	028b      	lsls	r3, r1, #10
 8002ce2:	4621      	mov	r1, r4
 8002ce4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ce8:	4621      	mov	r1, r4
 8002cea:	028a      	lsls	r2, r1, #10
 8002cec:	4610      	mov	r0, r2
 8002cee:	4619      	mov	r1, r3
 8002cf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002cf8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002cfa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002cfe:	f7fd fa81 	bl	8000204 <__aeabi_uldivmod>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	4613      	mov	r3, r2
 8002d08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0x458>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	0f1b      	lsrs	r3, r3, #28
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8002d1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002d1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d2a:	e003      	b.n	8002d34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d2c:	4b06      	ldr	r3, [pc, #24]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002d2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d32:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	37b8      	adds	r7, #184	@ 0xb8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d42:	bf00      	nop
 8002d44:	40023800 	.word	0x40023800
 8002d48:	00f42400 	.word	0x00f42400

08002d4c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e28d      	b.n	800327a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 8083 	beq.w	8002e72 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d6c:	4b94      	ldr	r3, [pc, #592]	@ (8002fc0 <HAL_RCC_OscConfig+0x274>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 030c 	and.w	r3, r3, #12
 8002d74:	2b04      	cmp	r3, #4
 8002d76:	d019      	beq.n	8002dac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d78:	4b91      	ldr	r3, [pc, #580]	@ (8002fc0 <HAL_RCC_OscConfig+0x274>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d80:	2b08      	cmp	r3, #8
 8002d82:	d106      	bne.n	8002d92 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d84:	4b8e      	ldr	r3, [pc, #568]	@ (8002fc0 <HAL_RCC_OscConfig+0x274>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d90:	d00c      	beq.n	8002dac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d92:	4b8b      	ldr	r3, [pc, #556]	@ (8002fc0 <HAL_RCC_OscConfig+0x274>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d9a:	2b0c      	cmp	r3, #12
 8002d9c:	d112      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d9e:	4b88      	ldr	r3, [pc, #544]	@ (8002fc0 <HAL_RCC_OscConfig+0x274>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002da6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002daa:	d10b      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dac:	4b84      	ldr	r3, [pc, #528]	@ (8002fc0 <HAL_RCC_OscConfig+0x274>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d05b      	beq.n	8002e70 <HAL_RCC_OscConfig+0x124>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d157      	bne.n	8002e70 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e25a      	b.n	800327a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dcc:	d106      	bne.n	8002ddc <HAL_RCC_OscConfig+0x90>
 8002dce:	4b7c      	ldr	r3, [pc, #496]	@ (8002fc0 <HAL_RCC_OscConfig+0x274>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a7b      	ldr	r2, [pc, #492]	@ (8002fc0 <HAL_RCC_OscConfig+0x274>)
 8002dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	e01d      	b.n	8002e18 <HAL_RCC_OscConfig+0xcc>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002de4:	d10c      	bne.n	8002e00 <HAL_RCC_OscConfig+0xb4>
 8002de6:	4b76      	ldr	r3, [pc, #472]	@ (8002fc0 <HAL_RCC_OscConfig+0x274>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a75      	ldr	r2, [pc, #468]	@ (8002fc0 <HAL_RCC_OscConfig+0x274>)
 8002dec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	4b73      	ldr	r3, [pc, #460]	@ (8002fc0 <HAL_RCC_OscConfig+0x274>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a72      	ldr	r2, [pc, #456]	@ (8002fc0 <HAL_RCC_OscConfig+0x274>)
 8002df8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	e00b      	b.n	8002e18 <HAL_RCC_OscConfig+0xcc>
 8002e00:	4b6f      	ldr	r3, [pc, #444]	@ (8002fc0 <HAL_RCC_OscConfig+0x274>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a6e      	ldr	r2, [pc, #440]	@ (8002fc0 <HAL_RCC_OscConfig+0x274>)
 8002e06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	4b6c      	ldr	r3, [pc, #432]	@ (8002fc0 <HAL_RCC_OscConfig+0x274>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a6b      	ldr	r2, [pc, #428]	@ (8002fc0 <HAL_RCC_OscConfig+0x274>)
 8002e12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d013      	beq.n	8002e48 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e20:	f7fe f83a 	bl	8000e98 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e28:	f7fe f836 	bl	8000e98 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b64      	cmp	r3, #100	@ 0x64
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e21f      	b.n	800327a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3a:	4b61      	ldr	r3, [pc, #388]	@ (8002fc0 <HAL_RCC_OscConfig+0x274>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0f0      	beq.n	8002e28 <HAL_RCC_OscConfig+0xdc>
 8002e46:	e014      	b.n	8002e72 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e48:	f7fe f826 	bl	8000e98 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e50:	f7fe f822 	bl	8000e98 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b64      	cmp	r3, #100	@ 0x64
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e20b      	b.n	800327a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e62:	4b57      	ldr	r3, [pc, #348]	@ (8002fc0 <HAL_RCC_OscConfig+0x274>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f0      	bne.n	8002e50 <HAL_RCC_OscConfig+0x104>
 8002e6e:	e000      	b.n	8002e72 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d06f      	beq.n	8002f5e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e7e:	4b50      	ldr	r3, [pc, #320]	@ (8002fc0 <HAL_RCC_OscConfig+0x274>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 030c 	and.w	r3, r3, #12
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d017      	beq.n	8002eba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e8a:	4b4d      	ldr	r3, [pc, #308]	@ (8002fc0 <HAL_RCC_OscConfig+0x274>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e92:	2b08      	cmp	r3, #8
 8002e94:	d105      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e96:	4b4a      	ldr	r3, [pc, #296]	@ (8002fc0 <HAL_RCC_OscConfig+0x274>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00b      	beq.n	8002eba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ea2:	4b47      	ldr	r3, [pc, #284]	@ (8002fc0 <HAL_RCC_OscConfig+0x274>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002eaa:	2b0c      	cmp	r3, #12
 8002eac:	d11c      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eae:	4b44      	ldr	r3, [pc, #272]	@ (8002fc0 <HAL_RCC_OscConfig+0x274>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d116      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eba:	4b41      	ldr	r3, [pc, #260]	@ (8002fc0 <HAL_RCC_OscConfig+0x274>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d005      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x186>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d001      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e1d3      	b.n	800327a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed2:	4b3b      	ldr	r3, [pc, #236]	@ (8002fc0 <HAL_RCC_OscConfig+0x274>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	4937      	ldr	r1, [pc, #220]	@ (8002fc0 <HAL_RCC_OscConfig+0x274>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ee6:	e03a      	b.n	8002f5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d020      	beq.n	8002f32 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ef0:	4b34      	ldr	r3, [pc, #208]	@ (8002fc4 <HAL_RCC_OscConfig+0x278>)
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef6:	f7fd ffcf 	bl	8000e98 <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002efe:	f7fd ffcb 	bl	8000e98 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e1b4      	b.n	800327a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f10:	4b2b      	ldr	r3, [pc, #172]	@ (8002fc0 <HAL_RCC_OscConfig+0x274>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0f0      	beq.n	8002efe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f1c:	4b28      	ldr	r3, [pc, #160]	@ (8002fc0 <HAL_RCC_OscConfig+0x274>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	4925      	ldr	r1, [pc, #148]	@ (8002fc0 <HAL_RCC_OscConfig+0x274>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	600b      	str	r3, [r1, #0]
 8002f30:	e015      	b.n	8002f5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f32:	4b24      	ldr	r3, [pc, #144]	@ (8002fc4 <HAL_RCC_OscConfig+0x278>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f38:	f7fd ffae 	bl	8000e98 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f40:	f7fd ffaa 	bl	8000e98 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e193      	b.n	800327a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f52:	4b1b      	ldr	r3, [pc, #108]	@ (8002fc0 <HAL_RCC_OscConfig+0x274>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1f0      	bne.n	8002f40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d036      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d016      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f72:	4b15      	ldr	r3, [pc, #84]	@ (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002f74:	2201      	movs	r2, #1
 8002f76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f78:	f7fd ff8e 	bl	8000e98 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f80:	f7fd ff8a 	bl	8000e98 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e173      	b.n	800327a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f92:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc0 <HAL_RCC_OscConfig+0x274>)
 8002f94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0f0      	beq.n	8002f80 <HAL_RCC_OscConfig+0x234>
 8002f9e:	e01b      	b.n	8002fd8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fa0:	4b09      	ldr	r3, [pc, #36]	@ (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa6:	f7fd ff77 	bl	8000e98 <HAL_GetTick>
 8002faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fac:	e00e      	b.n	8002fcc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fae:	f7fd ff73 	bl	8000e98 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d907      	bls.n	8002fcc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e15c      	b.n	800327a <HAL_RCC_OscConfig+0x52e>
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	42470000 	.word	0x42470000
 8002fc8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fcc:	4b8a      	ldr	r3, [pc, #552]	@ (80031f8 <HAL_RCC_OscConfig+0x4ac>)
 8002fce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1ea      	bne.n	8002fae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 8097 	beq.w	8003114 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fea:	4b83      	ldr	r3, [pc, #524]	@ (80031f8 <HAL_RCC_OscConfig+0x4ac>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10f      	bne.n	8003016 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60bb      	str	r3, [r7, #8]
 8002ffa:	4b7f      	ldr	r3, [pc, #508]	@ (80031f8 <HAL_RCC_OscConfig+0x4ac>)
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffe:	4a7e      	ldr	r2, [pc, #504]	@ (80031f8 <HAL_RCC_OscConfig+0x4ac>)
 8003000:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003004:	6413      	str	r3, [r2, #64]	@ 0x40
 8003006:	4b7c      	ldr	r3, [pc, #496]	@ (80031f8 <HAL_RCC_OscConfig+0x4ac>)
 8003008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800300e:	60bb      	str	r3, [r7, #8]
 8003010:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003012:	2301      	movs	r3, #1
 8003014:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003016:	4b79      	ldr	r3, [pc, #484]	@ (80031fc <HAL_RCC_OscConfig+0x4b0>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800301e:	2b00      	cmp	r3, #0
 8003020:	d118      	bne.n	8003054 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003022:	4b76      	ldr	r3, [pc, #472]	@ (80031fc <HAL_RCC_OscConfig+0x4b0>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a75      	ldr	r2, [pc, #468]	@ (80031fc <HAL_RCC_OscConfig+0x4b0>)
 8003028:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800302c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800302e:	f7fd ff33 	bl	8000e98 <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003034:	e008      	b.n	8003048 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003036:	f7fd ff2f 	bl	8000e98 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e118      	b.n	800327a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003048:	4b6c      	ldr	r3, [pc, #432]	@ (80031fc <HAL_RCC_OscConfig+0x4b0>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0f0      	beq.n	8003036 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d106      	bne.n	800306a <HAL_RCC_OscConfig+0x31e>
 800305c:	4b66      	ldr	r3, [pc, #408]	@ (80031f8 <HAL_RCC_OscConfig+0x4ac>)
 800305e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003060:	4a65      	ldr	r2, [pc, #404]	@ (80031f8 <HAL_RCC_OscConfig+0x4ac>)
 8003062:	f043 0301 	orr.w	r3, r3, #1
 8003066:	6713      	str	r3, [r2, #112]	@ 0x70
 8003068:	e01c      	b.n	80030a4 <HAL_RCC_OscConfig+0x358>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	2b05      	cmp	r3, #5
 8003070:	d10c      	bne.n	800308c <HAL_RCC_OscConfig+0x340>
 8003072:	4b61      	ldr	r3, [pc, #388]	@ (80031f8 <HAL_RCC_OscConfig+0x4ac>)
 8003074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003076:	4a60      	ldr	r2, [pc, #384]	@ (80031f8 <HAL_RCC_OscConfig+0x4ac>)
 8003078:	f043 0304 	orr.w	r3, r3, #4
 800307c:	6713      	str	r3, [r2, #112]	@ 0x70
 800307e:	4b5e      	ldr	r3, [pc, #376]	@ (80031f8 <HAL_RCC_OscConfig+0x4ac>)
 8003080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003082:	4a5d      	ldr	r2, [pc, #372]	@ (80031f8 <HAL_RCC_OscConfig+0x4ac>)
 8003084:	f043 0301 	orr.w	r3, r3, #1
 8003088:	6713      	str	r3, [r2, #112]	@ 0x70
 800308a:	e00b      	b.n	80030a4 <HAL_RCC_OscConfig+0x358>
 800308c:	4b5a      	ldr	r3, [pc, #360]	@ (80031f8 <HAL_RCC_OscConfig+0x4ac>)
 800308e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003090:	4a59      	ldr	r2, [pc, #356]	@ (80031f8 <HAL_RCC_OscConfig+0x4ac>)
 8003092:	f023 0301 	bic.w	r3, r3, #1
 8003096:	6713      	str	r3, [r2, #112]	@ 0x70
 8003098:	4b57      	ldr	r3, [pc, #348]	@ (80031f8 <HAL_RCC_OscConfig+0x4ac>)
 800309a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800309c:	4a56      	ldr	r2, [pc, #344]	@ (80031f8 <HAL_RCC_OscConfig+0x4ac>)
 800309e:	f023 0304 	bic.w	r3, r3, #4
 80030a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d015      	beq.n	80030d8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ac:	f7fd fef4 	bl	8000e98 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b2:	e00a      	b.n	80030ca <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030b4:	f7fd fef0 	bl	8000e98 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e0d7      	b.n	800327a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ca:	4b4b      	ldr	r3, [pc, #300]	@ (80031f8 <HAL_RCC_OscConfig+0x4ac>)
 80030cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0ee      	beq.n	80030b4 <HAL_RCC_OscConfig+0x368>
 80030d6:	e014      	b.n	8003102 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d8:	f7fd fede 	bl	8000e98 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030de:	e00a      	b.n	80030f6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030e0:	f7fd feda 	bl	8000e98 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e0c1      	b.n	800327a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030f6:	4b40      	ldr	r3, [pc, #256]	@ (80031f8 <HAL_RCC_OscConfig+0x4ac>)
 80030f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1ee      	bne.n	80030e0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003102:	7dfb      	ldrb	r3, [r7, #23]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d105      	bne.n	8003114 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003108:	4b3b      	ldr	r3, [pc, #236]	@ (80031f8 <HAL_RCC_OscConfig+0x4ac>)
 800310a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310c:	4a3a      	ldr	r2, [pc, #232]	@ (80031f8 <HAL_RCC_OscConfig+0x4ac>)
 800310e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003112:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 80ad 	beq.w	8003278 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800311e:	4b36      	ldr	r3, [pc, #216]	@ (80031f8 <HAL_RCC_OscConfig+0x4ac>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 030c 	and.w	r3, r3, #12
 8003126:	2b08      	cmp	r3, #8
 8003128:	d060      	beq.n	80031ec <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	2b02      	cmp	r3, #2
 8003130:	d145      	bne.n	80031be <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003132:	4b33      	ldr	r3, [pc, #204]	@ (8003200 <HAL_RCC_OscConfig+0x4b4>)
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003138:	f7fd feae 	bl	8000e98 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003140:	f7fd feaa 	bl	8000e98 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e093      	b.n	800327a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003152:	4b29      	ldr	r3, [pc, #164]	@ (80031f8 <HAL_RCC_OscConfig+0x4ac>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f0      	bne.n	8003140 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	69da      	ldr	r2, [r3, #28]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316c:	019b      	lsls	r3, r3, #6
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003174:	085b      	lsrs	r3, r3, #1
 8003176:	3b01      	subs	r3, #1
 8003178:	041b      	lsls	r3, r3, #16
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003180:	061b      	lsls	r3, r3, #24
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003188:	071b      	lsls	r3, r3, #28
 800318a:	491b      	ldr	r1, [pc, #108]	@ (80031f8 <HAL_RCC_OscConfig+0x4ac>)
 800318c:	4313      	orrs	r3, r2
 800318e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003190:	4b1b      	ldr	r3, [pc, #108]	@ (8003200 <HAL_RCC_OscConfig+0x4b4>)
 8003192:	2201      	movs	r2, #1
 8003194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003196:	f7fd fe7f 	bl	8000e98 <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800319e:	f7fd fe7b 	bl	8000e98 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e064      	b.n	800327a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b0:	4b11      	ldr	r3, [pc, #68]	@ (80031f8 <HAL_RCC_OscConfig+0x4ac>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0f0      	beq.n	800319e <HAL_RCC_OscConfig+0x452>
 80031bc:	e05c      	b.n	8003278 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031be:	4b10      	ldr	r3, [pc, #64]	@ (8003200 <HAL_RCC_OscConfig+0x4b4>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c4:	f7fd fe68 	bl	8000e98 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031cc:	f7fd fe64 	bl	8000e98 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e04d      	b.n	800327a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031de:	4b06      	ldr	r3, [pc, #24]	@ (80031f8 <HAL_RCC_OscConfig+0x4ac>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f0      	bne.n	80031cc <HAL_RCC_OscConfig+0x480>
 80031ea:	e045      	b.n	8003278 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d107      	bne.n	8003204 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e040      	b.n	800327a <HAL_RCC_OscConfig+0x52e>
 80031f8:	40023800 	.word	0x40023800
 80031fc:	40007000 	.word	0x40007000
 8003200:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003204:	4b1f      	ldr	r3, [pc, #124]	@ (8003284 <HAL_RCC_OscConfig+0x538>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d030      	beq.n	8003274 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800321c:	429a      	cmp	r2, r3
 800321e:	d129      	bne.n	8003274 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800322a:	429a      	cmp	r2, r3
 800322c:	d122      	bne.n	8003274 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003234:	4013      	ands	r3, r2
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800323a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800323c:	4293      	cmp	r3, r2
 800323e:	d119      	bne.n	8003274 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800324a:	085b      	lsrs	r3, r3, #1
 800324c:	3b01      	subs	r3, #1
 800324e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003250:	429a      	cmp	r2, r3
 8003252:	d10f      	bne.n	8003274 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800325e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003260:	429a      	cmp	r2, r3
 8003262:	d107      	bne.n	8003274 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003270:	429a      	cmp	r2, r3
 8003272:	d001      	beq.n	8003278 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e000      	b.n	800327a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3718      	adds	r7, #24
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	40023800 	.word	0x40023800

08003288 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e042      	b.n	8003320 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d106      	bne.n	80032b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7fd fcc4 	bl	8000c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2224      	movs	r2, #36	@ 0x24
 80032b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f82b 	bl	8003328 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80032e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	695a      	ldr	r2, [r3, #20]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80032f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003300:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2220      	movs	r2, #32
 800330c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2220      	movs	r2, #32
 8003314:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800332c:	b0c0      	sub	sp, #256	@ 0x100
 800332e:	af00      	add	r7, sp, #0
 8003330:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003344:	68d9      	ldr	r1, [r3, #12]
 8003346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	ea40 0301 	orr.w	r3, r0, r1
 8003350:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	431a      	orrs	r2, r3
 8003360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	431a      	orrs	r2, r3
 8003368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	4313      	orrs	r3, r2
 8003370:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003380:	f021 010c 	bic.w	r1, r1, #12
 8003384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800338e:	430b      	orrs	r3, r1
 8003390:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800339e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033a2:	6999      	ldr	r1, [r3, #24]
 80033a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	ea40 0301 	orr.w	r3, r0, r1
 80033ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	4b8f      	ldr	r3, [pc, #572]	@ (80035f4 <UART_SetConfig+0x2cc>)
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d005      	beq.n	80033c8 <UART_SetConfig+0xa0>
 80033bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	4b8d      	ldr	r3, [pc, #564]	@ (80035f8 <UART_SetConfig+0x2d0>)
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d104      	bne.n	80033d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033c8:	f7ff fa7c 	bl	80028c4 <HAL_RCC_GetPCLK2Freq>
 80033cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80033d0:	e003      	b.n	80033da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033d2:	f7ff fa63 	bl	800289c <HAL_RCC_GetPCLK1Freq>
 80033d6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033e4:	f040 810c 	bne.w	8003600 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033ec:	2200      	movs	r2, #0
 80033ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80033f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80033f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80033fa:	4622      	mov	r2, r4
 80033fc:	462b      	mov	r3, r5
 80033fe:	1891      	adds	r1, r2, r2
 8003400:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003402:	415b      	adcs	r3, r3
 8003404:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003406:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800340a:	4621      	mov	r1, r4
 800340c:	eb12 0801 	adds.w	r8, r2, r1
 8003410:	4629      	mov	r1, r5
 8003412:	eb43 0901 	adc.w	r9, r3, r1
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	f04f 0300 	mov.w	r3, #0
 800341e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003422:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003426:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800342a:	4690      	mov	r8, r2
 800342c:	4699      	mov	r9, r3
 800342e:	4623      	mov	r3, r4
 8003430:	eb18 0303 	adds.w	r3, r8, r3
 8003434:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003438:	462b      	mov	r3, r5
 800343a:	eb49 0303 	adc.w	r3, r9, r3
 800343e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800344e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003452:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003456:	460b      	mov	r3, r1
 8003458:	18db      	adds	r3, r3, r3
 800345a:	653b      	str	r3, [r7, #80]	@ 0x50
 800345c:	4613      	mov	r3, r2
 800345e:	eb42 0303 	adc.w	r3, r2, r3
 8003462:	657b      	str	r3, [r7, #84]	@ 0x54
 8003464:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003468:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800346c:	f7fc feca 	bl	8000204 <__aeabi_uldivmod>
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	4b61      	ldr	r3, [pc, #388]	@ (80035fc <UART_SetConfig+0x2d4>)
 8003476:	fba3 2302 	umull	r2, r3, r3, r2
 800347a:	095b      	lsrs	r3, r3, #5
 800347c:	011c      	lsls	r4, r3, #4
 800347e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003482:	2200      	movs	r2, #0
 8003484:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003488:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800348c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003490:	4642      	mov	r2, r8
 8003492:	464b      	mov	r3, r9
 8003494:	1891      	adds	r1, r2, r2
 8003496:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003498:	415b      	adcs	r3, r3
 800349a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800349c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80034a0:	4641      	mov	r1, r8
 80034a2:	eb12 0a01 	adds.w	sl, r2, r1
 80034a6:	4649      	mov	r1, r9
 80034a8:	eb43 0b01 	adc.w	fp, r3, r1
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034c0:	4692      	mov	sl, r2
 80034c2:	469b      	mov	fp, r3
 80034c4:	4643      	mov	r3, r8
 80034c6:	eb1a 0303 	adds.w	r3, sl, r3
 80034ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034ce:	464b      	mov	r3, r9
 80034d0:	eb4b 0303 	adc.w	r3, fp, r3
 80034d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80034d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80034e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80034ec:	460b      	mov	r3, r1
 80034ee:	18db      	adds	r3, r3, r3
 80034f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80034f2:	4613      	mov	r3, r2
 80034f4:	eb42 0303 	adc.w	r3, r2, r3
 80034f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80034fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80034fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003502:	f7fc fe7f 	bl	8000204 <__aeabi_uldivmod>
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
 800350a:	4611      	mov	r1, r2
 800350c:	4b3b      	ldr	r3, [pc, #236]	@ (80035fc <UART_SetConfig+0x2d4>)
 800350e:	fba3 2301 	umull	r2, r3, r3, r1
 8003512:	095b      	lsrs	r3, r3, #5
 8003514:	2264      	movs	r2, #100	@ 0x64
 8003516:	fb02 f303 	mul.w	r3, r2, r3
 800351a:	1acb      	subs	r3, r1, r3
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003522:	4b36      	ldr	r3, [pc, #216]	@ (80035fc <UART_SetConfig+0x2d4>)
 8003524:	fba3 2302 	umull	r2, r3, r3, r2
 8003528:	095b      	lsrs	r3, r3, #5
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003530:	441c      	add	r4, r3
 8003532:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003536:	2200      	movs	r2, #0
 8003538:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800353c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003540:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003544:	4642      	mov	r2, r8
 8003546:	464b      	mov	r3, r9
 8003548:	1891      	adds	r1, r2, r2
 800354a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800354c:	415b      	adcs	r3, r3
 800354e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003550:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003554:	4641      	mov	r1, r8
 8003556:	1851      	adds	r1, r2, r1
 8003558:	6339      	str	r1, [r7, #48]	@ 0x30
 800355a:	4649      	mov	r1, r9
 800355c:	414b      	adcs	r3, r1
 800355e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	f04f 0300 	mov.w	r3, #0
 8003568:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800356c:	4659      	mov	r1, fp
 800356e:	00cb      	lsls	r3, r1, #3
 8003570:	4651      	mov	r1, sl
 8003572:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003576:	4651      	mov	r1, sl
 8003578:	00ca      	lsls	r2, r1, #3
 800357a:	4610      	mov	r0, r2
 800357c:	4619      	mov	r1, r3
 800357e:	4603      	mov	r3, r0
 8003580:	4642      	mov	r2, r8
 8003582:	189b      	adds	r3, r3, r2
 8003584:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003588:	464b      	mov	r3, r9
 800358a:	460a      	mov	r2, r1
 800358c:	eb42 0303 	adc.w	r3, r2, r3
 8003590:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80035a0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80035a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80035a8:	460b      	mov	r3, r1
 80035aa:	18db      	adds	r3, r3, r3
 80035ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035ae:	4613      	mov	r3, r2
 80035b0:	eb42 0303 	adc.w	r3, r2, r3
 80035b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80035ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80035be:	f7fc fe21 	bl	8000204 <__aeabi_uldivmod>
 80035c2:	4602      	mov	r2, r0
 80035c4:	460b      	mov	r3, r1
 80035c6:	4b0d      	ldr	r3, [pc, #52]	@ (80035fc <UART_SetConfig+0x2d4>)
 80035c8:	fba3 1302 	umull	r1, r3, r3, r2
 80035cc:	095b      	lsrs	r3, r3, #5
 80035ce:	2164      	movs	r1, #100	@ 0x64
 80035d0:	fb01 f303 	mul.w	r3, r1, r3
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	3332      	adds	r3, #50	@ 0x32
 80035da:	4a08      	ldr	r2, [pc, #32]	@ (80035fc <UART_SetConfig+0x2d4>)
 80035dc:	fba2 2303 	umull	r2, r3, r2, r3
 80035e0:	095b      	lsrs	r3, r3, #5
 80035e2:	f003 0207 	and.w	r2, r3, #7
 80035e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4422      	add	r2, r4
 80035ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035f0:	e106      	b.n	8003800 <UART_SetConfig+0x4d8>
 80035f2:	bf00      	nop
 80035f4:	40011000 	.word	0x40011000
 80035f8:	40011400 	.word	0x40011400
 80035fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003600:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003604:	2200      	movs	r2, #0
 8003606:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800360a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800360e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003612:	4642      	mov	r2, r8
 8003614:	464b      	mov	r3, r9
 8003616:	1891      	adds	r1, r2, r2
 8003618:	6239      	str	r1, [r7, #32]
 800361a:	415b      	adcs	r3, r3
 800361c:	627b      	str	r3, [r7, #36]	@ 0x24
 800361e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003622:	4641      	mov	r1, r8
 8003624:	1854      	adds	r4, r2, r1
 8003626:	4649      	mov	r1, r9
 8003628:	eb43 0501 	adc.w	r5, r3, r1
 800362c:	f04f 0200 	mov.w	r2, #0
 8003630:	f04f 0300 	mov.w	r3, #0
 8003634:	00eb      	lsls	r3, r5, #3
 8003636:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800363a:	00e2      	lsls	r2, r4, #3
 800363c:	4614      	mov	r4, r2
 800363e:	461d      	mov	r5, r3
 8003640:	4643      	mov	r3, r8
 8003642:	18e3      	adds	r3, r4, r3
 8003644:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003648:	464b      	mov	r3, r9
 800364a:	eb45 0303 	adc.w	r3, r5, r3
 800364e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800365e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003662:	f04f 0200 	mov.w	r2, #0
 8003666:	f04f 0300 	mov.w	r3, #0
 800366a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800366e:	4629      	mov	r1, r5
 8003670:	008b      	lsls	r3, r1, #2
 8003672:	4621      	mov	r1, r4
 8003674:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003678:	4621      	mov	r1, r4
 800367a:	008a      	lsls	r2, r1, #2
 800367c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003680:	f7fc fdc0 	bl	8000204 <__aeabi_uldivmod>
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	4b60      	ldr	r3, [pc, #384]	@ (800380c <UART_SetConfig+0x4e4>)
 800368a:	fba3 2302 	umull	r2, r3, r3, r2
 800368e:	095b      	lsrs	r3, r3, #5
 8003690:	011c      	lsls	r4, r3, #4
 8003692:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003696:	2200      	movs	r2, #0
 8003698:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800369c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80036a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80036a4:	4642      	mov	r2, r8
 80036a6:	464b      	mov	r3, r9
 80036a8:	1891      	adds	r1, r2, r2
 80036aa:	61b9      	str	r1, [r7, #24]
 80036ac:	415b      	adcs	r3, r3
 80036ae:	61fb      	str	r3, [r7, #28]
 80036b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036b4:	4641      	mov	r1, r8
 80036b6:	1851      	adds	r1, r2, r1
 80036b8:	6139      	str	r1, [r7, #16]
 80036ba:	4649      	mov	r1, r9
 80036bc:	414b      	adcs	r3, r1
 80036be:	617b      	str	r3, [r7, #20]
 80036c0:	f04f 0200 	mov.w	r2, #0
 80036c4:	f04f 0300 	mov.w	r3, #0
 80036c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036cc:	4659      	mov	r1, fp
 80036ce:	00cb      	lsls	r3, r1, #3
 80036d0:	4651      	mov	r1, sl
 80036d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036d6:	4651      	mov	r1, sl
 80036d8:	00ca      	lsls	r2, r1, #3
 80036da:	4610      	mov	r0, r2
 80036dc:	4619      	mov	r1, r3
 80036de:	4603      	mov	r3, r0
 80036e0:	4642      	mov	r2, r8
 80036e2:	189b      	adds	r3, r3, r2
 80036e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80036e8:	464b      	mov	r3, r9
 80036ea:	460a      	mov	r2, r1
 80036ec:	eb42 0303 	adc.w	r3, r2, r3
 80036f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80036f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80036fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003700:	f04f 0200 	mov.w	r2, #0
 8003704:	f04f 0300 	mov.w	r3, #0
 8003708:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800370c:	4649      	mov	r1, r9
 800370e:	008b      	lsls	r3, r1, #2
 8003710:	4641      	mov	r1, r8
 8003712:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003716:	4641      	mov	r1, r8
 8003718:	008a      	lsls	r2, r1, #2
 800371a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800371e:	f7fc fd71 	bl	8000204 <__aeabi_uldivmod>
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	4611      	mov	r1, r2
 8003728:	4b38      	ldr	r3, [pc, #224]	@ (800380c <UART_SetConfig+0x4e4>)
 800372a:	fba3 2301 	umull	r2, r3, r3, r1
 800372e:	095b      	lsrs	r3, r3, #5
 8003730:	2264      	movs	r2, #100	@ 0x64
 8003732:	fb02 f303 	mul.w	r3, r2, r3
 8003736:	1acb      	subs	r3, r1, r3
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	3332      	adds	r3, #50	@ 0x32
 800373c:	4a33      	ldr	r2, [pc, #204]	@ (800380c <UART_SetConfig+0x4e4>)
 800373e:	fba2 2303 	umull	r2, r3, r2, r3
 8003742:	095b      	lsrs	r3, r3, #5
 8003744:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003748:	441c      	add	r4, r3
 800374a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800374e:	2200      	movs	r2, #0
 8003750:	673b      	str	r3, [r7, #112]	@ 0x70
 8003752:	677a      	str	r2, [r7, #116]	@ 0x74
 8003754:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003758:	4642      	mov	r2, r8
 800375a:	464b      	mov	r3, r9
 800375c:	1891      	adds	r1, r2, r2
 800375e:	60b9      	str	r1, [r7, #8]
 8003760:	415b      	adcs	r3, r3
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003768:	4641      	mov	r1, r8
 800376a:	1851      	adds	r1, r2, r1
 800376c:	6039      	str	r1, [r7, #0]
 800376e:	4649      	mov	r1, r9
 8003770:	414b      	adcs	r3, r1
 8003772:	607b      	str	r3, [r7, #4]
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	f04f 0300 	mov.w	r3, #0
 800377c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003780:	4659      	mov	r1, fp
 8003782:	00cb      	lsls	r3, r1, #3
 8003784:	4651      	mov	r1, sl
 8003786:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800378a:	4651      	mov	r1, sl
 800378c:	00ca      	lsls	r2, r1, #3
 800378e:	4610      	mov	r0, r2
 8003790:	4619      	mov	r1, r3
 8003792:	4603      	mov	r3, r0
 8003794:	4642      	mov	r2, r8
 8003796:	189b      	adds	r3, r3, r2
 8003798:	66bb      	str	r3, [r7, #104]	@ 0x68
 800379a:	464b      	mov	r3, r9
 800379c:	460a      	mov	r2, r1
 800379e:	eb42 0303 	adc.w	r3, r2, r3
 80037a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80037a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80037ae:	667a      	str	r2, [r7, #100]	@ 0x64
 80037b0:	f04f 0200 	mov.w	r2, #0
 80037b4:	f04f 0300 	mov.w	r3, #0
 80037b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80037bc:	4649      	mov	r1, r9
 80037be:	008b      	lsls	r3, r1, #2
 80037c0:	4641      	mov	r1, r8
 80037c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037c6:	4641      	mov	r1, r8
 80037c8:	008a      	lsls	r2, r1, #2
 80037ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80037ce:	f7fc fd19 	bl	8000204 <__aeabi_uldivmod>
 80037d2:	4602      	mov	r2, r0
 80037d4:	460b      	mov	r3, r1
 80037d6:	4b0d      	ldr	r3, [pc, #52]	@ (800380c <UART_SetConfig+0x4e4>)
 80037d8:	fba3 1302 	umull	r1, r3, r3, r2
 80037dc:	095b      	lsrs	r3, r3, #5
 80037de:	2164      	movs	r1, #100	@ 0x64
 80037e0:	fb01 f303 	mul.w	r3, r1, r3
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	3332      	adds	r3, #50	@ 0x32
 80037ea:	4a08      	ldr	r2, [pc, #32]	@ (800380c <UART_SetConfig+0x4e4>)
 80037ec:	fba2 2303 	umull	r2, r3, r2, r3
 80037f0:	095b      	lsrs	r3, r3, #5
 80037f2:	f003 020f 	and.w	r2, r3, #15
 80037f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4422      	add	r2, r4
 80037fe:	609a      	str	r2, [r3, #8]
}
 8003800:	bf00      	nop
 8003802:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003806:	46bd      	mov	sp, r7
 8003808:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800380c:	51eb851f 	.word	0x51eb851f

08003810 <memset>:
 8003810:	4402      	add	r2, r0
 8003812:	4603      	mov	r3, r0
 8003814:	4293      	cmp	r3, r2
 8003816:	d100      	bne.n	800381a <memset+0xa>
 8003818:	4770      	bx	lr
 800381a:	f803 1b01 	strb.w	r1, [r3], #1
 800381e:	e7f9      	b.n	8003814 <memset+0x4>

08003820 <__libc_init_array>:
 8003820:	b570      	push	{r4, r5, r6, lr}
 8003822:	4d0d      	ldr	r5, [pc, #52]	@ (8003858 <__libc_init_array+0x38>)
 8003824:	4c0d      	ldr	r4, [pc, #52]	@ (800385c <__libc_init_array+0x3c>)
 8003826:	1b64      	subs	r4, r4, r5
 8003828:	10a4      	asrs	r4, r4, #2
 800382a:	2600      	movs	r6, #0
 800382c:	42a6      	cmp	r6, r4
 800382e:	d109      	bne.n	8003844 <__libc_init_array+0x24>
 8003830:	4d0b      	ldr	r5, [pc, #44]	@ (8003860 <__libc_init_array+0x40>)
 8003832:	4c0c      	ldr	r4, [pc, #48]	@ (8003864 <__libc_init_array+0x44>)
 8003834:	f000 f818 	bl	8003868 <_init>
 8003838:	1b64      	subs	r4, r4, r5
 800383a:	10a4      	asrs	r4, r4, #2
 800383c:	2600      	movs	r6, #0
 800383e:	42a6      	cmp	r6, r4
 8003840:	d105      	bne.n	800384e <__libc_init_array+0x2e>
 8003842:	bd70      	pop	{r4, r5, r6, pc}
 8003844:	f855 3b04 	ldr.w	r3, [r5], #4
 8003848:	4798      	blx	r3
 800384a:	3601      	adds	r6, #1
 800384c:	e7ee      	b.n	800382c <__libc_init_array+0xc>
 800384e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003852:	4798      	blx	r3
 8003854:	3601      	adds	r6, #1
 8003856:	e7f2      	b.n	800383e <__libc_init_array+0x1e>
 8003858:	080038a0 	.word	0x080038a0
 800385c:	080038a0 	.word	0x080038a0
 8003860:	080038a0 	.word	0x080038a0
 8003864:	080038a4 	.word	0x080038a4

08003868 <_init>:
 8003868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800386a:	bf00      	nop
 800386c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800386e:	bc08      	pop	{r3}
 8003870:	469e      	mov	lr, r3
 8003872:	4770      	bx	lr

08003874 <_fini>:
 8003874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003876:	bf00      	nop
 8003878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800387a:	bc08      	pop	{r3}
 800387c:	469e      	mov	lr, r3
 800387e:	4770      	bx	lr
